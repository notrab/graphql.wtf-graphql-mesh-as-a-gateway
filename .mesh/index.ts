import { GraphQLResolveInfo, GraphQLScalarType, GraphQLScalarTypeConfig } from 'graphql';
import { DocumentNode } from 'graphql';
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type RequireFields<T, K extends keyof T> = { [X in Exclude<keyof T, K>]?: T[X] } & { [P in K]-?: NonNullable<T[P]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  Upload: any;
  Json: any;
  Date: Date;
  JSON: any;
};

export type Query = {
  continents: Array<Continent>;
  continent?: Maybe<Continent>;
  countries: Array<Country>;
  country?: Maybe<Country>;
  languages: Array<Language>;
  language?: Maybe<Language>;
  /** Use this to get a cart by a custom ID. If a cart doesn't exist with this ID, it will be created for you. */
  cart?: Maybe<Cart>;
  node?: Maybe<Node>;
  /**
   * <p>Retrieves a 3D Secure object.</p>
   *
   * Equivalent to GET /v1/3d_secure/{three_d_secure}
   */
  get3dSecureThreeDSecure?: Maybe<ThreeDSecure>;
  /**
   * <p>Retrieves the details of an account.</p>
   *
   * Equivalent to GET /v1/account
   */
  getAccount?: Maybe<Account3>;
  /**
   * <p>Retrieve a specified external account for a given account.</p>
   *
   * Equivalent to GET /v1/account/bank_accounts/{id}
   */
  getAccountBankAccountsId?: Maybe<Polymorphic>;
  /**
   * <p>Returns a list of capabilities associated with the account. The capabilities are returned sorted by creation date, with the most recent capability appearing first.</p>
   *
   * Equivalent to GET /v1/account/capabilities
   */
  getAccountCapabilities?: Maybe<ListAccountCapability>;
  /**
   * <p>Retrieves information about the specified Account Capability.</p>
   *
   * Equivalent to GET /v1/account/capabilities/{capability}
   */
  getAccountCapabilitiesCapability?: Maybe<Capability>;
  /**
   * <p>List external accounts for an account.</p>
   *
   * Equivalent to GET /v1/account/external_accounts
   */
  getAccountExternalAccounts?: Maybe<ExternalAccountList>;
  /**
   * <p>Retrieve a specified external account for a given account.</p>
   *
   * Equivalent to GET /v1/account/external_accounts/{id}
   */
  getAccountExternalAccountsId?: Maybe<Polymorphic>;
  /**
   * <p>Returns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first.</p>
   *
   * Equivalent to GET /v1/account/people
   */
  getAccountPeople?: Maybe<V1AccountPeople2>;
  /**
   * <p>Retrieves an existing person.</p>
   *
   * Equivalent to GET /v1/account/people/{person}
   */
  getAccountPeoplePerson?: Maybe<Person>;
  /**
   * <p>Returns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first.</p>
   *
   * Equivalent to GET /v1/account/persons
   */
  getAccountPersons?: Maybe<V1AccountPersons2>;
  /**
   * <p>Retrieves an existing person.</p>
   *
   * Equivalent to GET /v1/account/persons/{person}
   */
  getAccountPersonsPerson?: Maybe<Person>;
  /**
   * <p>Returns a list of accounts connected to your platform via <a href="/docs/connect">Connect</a>. If you’re not a platform, the list is empty.</p>
   *
   * Equivalent to GET /v1/accounts
   */
  getAccounts?: Maybe<V1Accounts2>;
  /**
   * <p>Retrieves the details of an account.</p>
   *
   * Equivalent to GET /v1/accounts/{account}
   */
  getAccountsAccount?: Maybe<Account3>;
  /**
   * <p>Retrieve a specified external account for a given account.</p>
   *
   * Equivalent to GET /v1/accounts/{account}/bank_accounts/{id}
   */
  getAccountsAccountBankAccountsId?: Maybe<Polymorphic>;
  /**
   * <p>Returns a list of capabilities associated with the account. The capabilities are returned sorted by creation date, with the most recent capability appearing first.</p>
   *
   * Equivalent to GET /v1/accounts/{account}/capabilities
   */
  getAccountsAccountCapabilities?: Maybe<ListAccountCapability>;
  /**
   * <p>Retrieves information about the specified Account Capability.</p>
   *
   * Equivalent to GET /v1/accounts/{account}/capabilities/{capability}
   */
  getAccountsAccountCapabilitiesCapability?: Maybe<Capability>;
  /**
   * <p>List external accounts for an account.</p>
   *
   * Equivalent to GET /v1/accounts/{account}/external_accounts
   */
  getAccountsAccountExternalAccounts?: Maybe<ExternalAccountList>;
  /**
   * <p>Retrieve a specified external account for a given account.</p>
   *
   * Equivalent to GET /v1/accounts/{account}/external_accounts/{id}
   */
  getAccountsAccountExternalAccountsId?: Maybe<Polymorphic>;
  /**
   * <p>Returns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first.</p>
   *
   * Equivalent to GET /v1/accounts/{account}/people
   */
  getAccountsAccountPeople?: Maybe<V1AccountPeople2>;
  /**
   * <p>Retrieves an existing person.</p>
   *
   * Equivalent to GET /v1/accounts/{account}/people/{person}
   */
  getAccountsAccountPeoplePerson?: Maybe<Person>;
  /**
   * <p>Returns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first.</p>
   *
   * Equivalent to GET /v1/accounts/{account}/persons
   */
  getAccountsAccountPersons?: Maybe<V1AccountPersons2>;
  /**
   * <p>Retrieves an existing person.</p>
   *
   * Equivalent to GET /v1/accounts/{account}/persons/{person}
   */
  getAccountsAccountPersonsPerson?: Maybe<Person>;
  /**
   * <p>List apple pay domains.</p>
   *
   * Equivalent to GET /v1/apple_pay/domains
   */
  getApplePayDomains?: Maybe<ApplePayDomainList>;
  /**
   * <p>Retrieve an apple pay domain.</p>
   *
   * Equivalent to GET /v1/apple_pay/domains/{domain}
   */
  getApplePayDomainsDomain?: Maybe<ApplePayDomain>;
  /**
   * <p>Returns a list of application fees you’ve previously collected. The application fees are returned in sorted order, with the most recent fees appearing first.</p>
   *
   * Equivalent to GET /v1/application_fees
   */
  getApplicationFees?: Maybe<V1ApplicationFees2>;
  /**
   * <p>By default, you can see the 10 most recent refunds stored directly on the application fee object, but you can also retrieve details about a specific refund stored on the application fee.</p>
   *
   * Equivalent to GET /v1/application_fees/{fee}/refunds/{id}
   */
  getApplicationFeesFeeRefundsId?: Maybe<FeeRefund>;
  /**
   * <p>Retrieves the details of an application fee that your account has collected. The same information is returned when refunding the application fee.</p>
   *
   * Equivalent to GET /v1/application_fees/{id}
   */
  getApplicationFeesId?: Maybe<ApplicationFee>;
  /**
   * <p>You can see a list of the refunds belonging to a specific application fee. Note that the 10 most recent refunds are always available by default on the application fee object. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional refunds.</p>
   *
   * Equivalent to GET /v1/application_fees/{id}/refunds
   */
  getApplicationFeesIdRefunds?: Maybe<FeeRefundList>;
  /**
   * <p>Retrieves the current account balance, based on the authentication that was used to make the request.
   *  For a sample request, see <a href="/docs/connect/account-balances#accounting-for-negative-balances">Accounting for negative balances</a>.</p>
   *
   * Equivalent to GET /v1/balance
   */
  getBalance?: Maybe<Balance>;
  /**
   * <p>Returns a list of transactions that have contributed to the Stripe account balance (e.g., charges, transfers, and so forth). The transactions are returned in sorted order, with the most recent transactions appearing first.</p>
   *
   * <p>Note that this endpoint was previously called “Balance history” and used the path <code>/v1/balance/history</code>.</p>
   *
   * Equivalent to GET /v1/balance/history
   */
  getBalanceHistory?: Maybe<BalanceTransactionsList>;
  /**
   * <p>Retrieves the balance transaction with the given ID.</p>
   *
   * <p>Note that this endpoint previously used the path <code>/v1/balance/history/:id</code>.</p>
   *
   * Equivalent to GET /v1/balance/history/{id}
   */
  getBalanceHistoryId?: Maybe<BalanceTransaction3>;
  /**
   * <p>Returns a list of transactions that have contributed to the Stripe account balance (e.g., charges, transfers, and so forth). The transactions are returned in sorted order, with the most recent transactions appearing first.</p>
   *
   * <p>Note that this endpoint was previously called “Balance history” and used the path <code>/v1/balance/history</code>.</p>
   *
   * Equivalent to GET /v1/balance_transactions
   */
  getBalanceTransactions?: Maybe<BalanceTransactionsList>;
  /**
   * <p>Retrieves the balance transaction with the given ID.</p>
   *
   * <p>Note that this endpoint previously used the path <code>/v1/balance/history/:id</code>.</p>
   *
   * Equivalent to GET /v1/balance_transactions/{id}
   */
  getBalanceTransactionsId?: Maybe<BalanceTransaction3>;
  /**
   * <p>Returns a list of configurations that describe the functionality of the customer portal.</p>
   *
   * Equivalent to GET /v1/billing_portal/configurations
   */
  getBillingPortalConfigurations?: Maybe<V1BillingPortalConfigurations2>;
  /**
   * <p>Retrieves a configuration that describes the functionality of the customer portal.</p>
   *
   * Equivalent to GET /v1/billing_portal/configurations/{configuration}
   */
  getBillingPortalConfigurationsConfiguration?: Maybe<BillingPortalConfiguration>;
  /**
   * <p>Returns a list of your receivers. Receivers are returned sorted by creation date, with the most recently created receivers appearing first.</p>
   *
   * Equivalent to GET /v1/bitcoin/receivers
   */
  getBitcoinReceivers?: Maybe<V1BitcoinReceivers2>;
  /**
   * <p>Retrieves the Bitcoin receiver with the given ID.</p>
   *
   * Equivalent to GET /v1/bitcoin/receivers/{id}
   */
  getBitcoinReceiversId?: Maybe<BitcoinReceiver>;
  /**
   * <p>List bitcoin transacitons for a given receiver.</p>
   *
   * Equivalent to GET /v1/bitcoin/receivers/{receiver}/transactions
   */
  getBitcoinReceiversReceiverTransactions?: Maybe<BitcoinTransactionList>;
  /**
   * <p>List bitcoin transacitons for a given receiver.</p>
   *
   * Equivalent to GET /v1/bitcoin/transactions
   */
  getBitcoinTransactions?: Maybe<BitcoinTransactionList>;
  /**
   * <p>Returns a list of charges you’ve previously created. The charges are returned in sorted order, with the most recent charges appearing first.</p>
   *
   * Equivalent to GET /v1/charges
   */
  getCharges?: Maybe<V1Charges2>;
  /**
   * <p>Retrieves the details of a charge that has previously been created. Supply the unique charge ID that was returned from your previous request, and Stripe will return the corresponding charge information. The same information is returned when creating or refunding the charge.</p>
   *
   * Equivalent to GET /v1/charges/{charge}
   */
  getChargesCharge?: Maybe<Charge2>;
  /**
   * <p>Retrieve a dispute for a specified charge.</p>
   *
   * Equivalent to GET /v1/charges/{charge}/dispute
   */
  getChargesChargeDispute?: Maybe<Dispute>;
  /**
   * <p>You can see a list of the refunds belonging to a specific charge. Note that the 10 most recent refunds are always available by default on the charge object. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional refunds.</p>
   *
   * Equivalent to GET /v1/charges/{charge}/refunds
   */
  getChargesChargeRefunds?: Maybe<RefundList2>;
  /**
   * <p>Retrieves the details of an existing refund.</p>
   *
   * Equivalent to GET /v1/charges/{charge}/refunds/{refund}
   */
  getChargesChargeRefundsRefund?: Maybe<Refund>;
  /**
   * <p>Returns a list of Checkout Sessions.</p>
   *
   * Equivalent to GET /v1/checkout/sessions
   */
  getCheckoutSessions?: Maybe<PaymentPagesCheckoutSessionList>;
  /**
   * <p>Retrieves a Session object.</p>
   *
   * Equivalent to GET /v1/checkout/sessions/{session}
   */
  getCheckoutSessionsSession?: Maybe<CheckoutSession>;
  /**
   * <p>When retrieving a Checkout Session, there is an includable <strong>line_items</strong> property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
   *
   * Equivalent to GET /v1/checkout/sessions/{session}/line_items
   */
  getCheckoutSessionsSessionLineItems?: Maybe<PaymentPagesCheckoutSessionListLineItems>;
  /**
   * <p>Lists all Country Spec objects available in the API.</p>
   *
   * Equivalent to GET /v1/country_specs
   */
  getCountrySpecs?: Maybe<V1CountrySpecs2>;
  /**
   * <p>Returns a Country Spec for a given Country code.</p>
   *
   * Equivalent to GET /v1/country_specs/{country}
   */
  getCountrySpecsCountry?: Maybe<CountrySpec>;
  /**
   * <p>Returns a list of your coupons.</p>
   *
   * Equivalent to GET /v1/coupons
   */
  getCoupons?: Maybe<V1Coupons2>;
  /**
   * <p>Retrieves the coupon with the given ID.</p>
   *
   * Equivalent to GET /v1/coupons/{coupon}
   */
  getCouponsCoupon?: Maybe<Coupon>;
  /**
   * <p>Returns a list of credit notes.</p>
   *
   * Equivalent to GET /v1/credit_notes
   */
  getCreditNotes?: Maybe<CreditNotesList>;
  /**
   * <p>When retrieving a credit note, you’ll get a <strong>lines</strong> property containing the the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
   *
   * Equivalent to GET /v1/credit_notes/{credit_note}/lines
   */
  getCreditNotesCreditNoteLines?: Maybe<CreditNoteLinesList>;
  /**
   * <p>Retrieves the credit note object with the given identifier.</p>
   *
   * Equivalent to GET /v1/credit_notes/{id}
   */
  getCreditNotesId?: Maybe<CreditNote>;
  /**
   * <p>Get a preview of a credit note without creating it.</p>
   *
   * Equivalent to GET /v1/credit_notes/preview
   */
  getCreditNotesPreview?: Maybe<CreditNote>;
  /**
   * <p>When retrieving a credit note preview, you’ll get a <strong>lines</strong> property containing the first handful of those items. This URL you can retrieve the full (paginated) list of line items.</p>
   *
   * Equivalent to GET /v1/credit_notes/preview/lines
   */
  getCreditNotesPreviewLines?: Maybe<CreditNoteLinesList>;
  /**
   * <p>Returns a list of your customers. The customers are returned sorted by creation date, with the most recent customers appearing first.</p>
   *
   * Equivalent to GET /v1/customers
   */
  getCustomers?: Maybe<V1Customers2>;
  /**
   * <p>Retrieves the details of an existing customer. You need only supply the unique customer identifier that was returned upon customer creation.</p>
   *
   * Equivalent to GET /v1/customers/{customer}
   */
  getCustomersCustomer?: Maybe<V1Customer2>;
  /**
   * <p>Returns a list of transactions that updated the customer’s <a href="/docs/billing/customer/balance">balances</a>.</p>
   *
   * Equivalent to GET /v1/customers/{customer}/balance_transactions
   */
  getCustomersCustomerBalanceTransactions?: Maybe<CustomerBalanceTransactionList>;
  /**
   * <p>Retrieves a specific customer balance transaction that updated the customer’s <a href="/docs/billing/customer/balance">balances</a>.</p>
   *
   * Equivalent to GET /v1/customers/{customer}/balance_transactions/{transaction}
   */
  getCustomersCustomerBalanceTransactionsTransaction?: Maybe<CustomerBalanceTransaction2>;
  /**
   * <p>You can see a list of the bank accounts belonging to a Customer. Note that the 10 most recent sources are always available by default on the Customer. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional bank accounts.</p>
   *
   * Equivalent to GET /v1/customers/{customer}/bank_accounts
   */
  getCustomersCustomerBankAccounts?: Maybe<BankAccountList>;
  /**
   * <p>By default, you can see the 10 most recent sources stored on a Customer directly on the object, but you can also retrieve details about a specific bank account stored on the Stripe account.</p>
   *
   * Equivalent to GET /v1/customers/{customer}/bank_accounts/{id}
   */
  getCustomersCustomerBankAccountsId?: Maybe<BankAccount7>;
  /**
   * <p>You can see a list of the cards belonging to a customer.
   * Note that the 10 most recent sources are always available on the <code>Customer</code> object.
   * If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional cards.</p>
   *
   * Equivalent to GET /v1/customers/{customer}/cards
   */
  getCustomersCustomerCards?: Maybe<CardList>;
  /**
   * <p>You can always see the 10 most recent cards directly on a customer; this method lets you retrieve details about a specific card stored on the customer.</p>
   *
   * Equivalent to GET /v1/customers/{customer}/cards/{id}
   */
  getCustomersCustomerCardsId?: Maybe<Card2>;
  /** Equivalent to GET /v1/customers/{customer}/discount */
  getCustomersCustomerDiscount?: Maybe<Discount>;
  /**
   * <p>List sources for a specified customer.</p>
   *
   * Equivalent to GET /v1/customers/{customer}/sources
   */
  getCustomersCustomerSources?: Maybe<ApmsSourcesSourceList>;
  /**
   * <p>Retrieve a specified source for a given customer.</p>
   *
   * Equivalent to GET /v1/customers/{customer}/sources/{id}
   */
  getCustomersCustomerSourcesId?: Maybe<PaymentSource>;
  /**
   * <p>You can see a list of the customer’s active subscriptions. Note that the 10 most recent active subscriptions are always available by default on the customer object. If you need more than those 10, you can use the limit and starting_after parameters to page through additional subscriptions.</p>
   *
   * Equivalent to GET /v1/customers/{customer}/subscriptions
   */
  getCustomersCustomerSubscriptions?: Maybe<SubscriptionList>;
  /**
   * <p>Retrieves the subscription with the given ID.</p>
   *
   * Equivalent to GET /v1/customers/{customer}/subscriptions/{subscription_exposed_id}
   */
  getCustomersCustomerSubscriptionsSubscriptionExposedId?: Maybe<Subscription5>;
  /** Equivalent to GET /v1/customers/{customer}/subscriptions/{subscription_exposed_id}/discount */
  getCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount?: Maybe<Discount>;
  /**
   * <p>Returns a list of tax IDs for a customer.</p>
   *
   * Equivalent to GET /v1/customers/{customer}/tax_ids
   */
  getCustomersCustomerTaxIds?: Maybe<TaxIDsList2>;
  /**
   * <p>Retrieves the <code>TaxID</code> object with the given identifier.</p>
   *
   * Equivalent to GET /v1/customers/{customer}/tax_ids/{id}
   */
  getCustomersCustomerTaxIdsId?: Maybe<TaxId3>;
  /**
   * <p>Returns a list of your disputes.</p>
   *
   * Equivalent to GET /v1/disputes
   */
  getDisputes?: Maybe<V1Disputes2>;
  /**
   * <p>Retrieves the dispute with the given ID.</p>
   *
   * Equivalent to GET /v1/disputes/{dispute}
   */
  getDisputesDispute?: Maybe<Dispute>;
  /**
   * <p>List events, going back up to 30 days. Each event data is rendered according to Stripe API version at its creation time, specified in <a href="/docs/api/events/object">event object</a> <code>api_version</code> attribute (not according to your current Stripe API version or <code>Stripe-Version</code> header).</p>
   *
   * Equivalent to GET /v1/events
   */
  getEvents?: Maybe<NotificationEventList>;
  /**
   * <p>Retrieves the details of an event. Supply the unique identifier of the event, which you might have received in a webhook.</p>
   *
   * Equivalent to GET /v1/events/{id}
   */
  getEventsId?: Maybe<Event>;
  /**
   * <p>Returns a list of objects that contain the rates at which foreign currencies are converted to one another. Only shows the currencies for which Stripe supports.</p>
   *
   * Equivalent to GET /v1/exchange_rates
   */
  getExchangeRates?: Maybe<V1ExchangeRates2>;
  /**
   * <p>Retrieves the exchange rates from the given currency to every supported currency.</p>
   *
   * Equivalent to GET /v1/exchange_rates/{rate_id}
   */
  getExchangeRatesRateId?: Maybe<ExchangeRate2>;
  /**
   * <p>Returns a list of file links.</p>
   *
   * Equivalent to GET /v1/file_links
   */
  getFileLinks?: Maybe<V1FileLinks2>;
  /**
   * <p>Retrieves the file link with the given ID.</p>
   *
   * Equivalent to GET /v1/file_links/{link}
   */
  getFileLinksLink?: Maybe<FileLink>;
  /**
   * <p>Returns a list of the files that your account has access to. The files are returned sorted by creation date, with the most recently created files appearing first.</p>
   *
   * Equivalent to GET /v1/files
   */
  getFiles?: Maybe<V1Files2>;
  /**
   * <p>Retrieves the details of an existing file object. Supply the unique file ID from a file, and Stripe will return the corresponding file object. To access file contents, see the <a href="/docs/file-upload#download-file-contents">File Upload Guide</a>.</p>
   *
   * Equivalent to GET /v1/files/{file}
   */
  getFilesFile?: Maybe<File3>;
  /**
   * <p>List all verification reports.</p>
   *
   * Equivalent to GET /v1/identity/verification_reports
   */
  getIdentityVerificationReports?: Maybe<V1IdentityVerificationReports2>;
  /**
   * <p>Retrieves an existing VerificationReport</p>
   *
   * Equivalent to GET /v1/identity/verification_reports/{report}
   */
  getIdentityVerificationReportsReport?: Maybe<IdentityVerificationReport>;
  /**
   * <p>Returns a list of VerificationSessions</p>
   *
   * Equivalent to GET /v1/identity/verification_sessions
   */
  getIdentityVerificationSessions?: Maybe<V1IdentityVerificationSessions2>;
  /**
   * <p>Retrieves the details of a VerificationSession that was previously created.</p>
   *
   * <p>When the session status is <code>requires_input</code>, you can use this method to retrieve a valid
   * <code>client_secret</code> or <code>url</code> to allow re-submission.</p>
   *
   * Equivalent to GET /v1/identity/verification_sessions/{session}
   */
  getIdentityVerificationSessionsSession?: Maybe<IdentityVerificationSession>;
  /**
   * <p>Returns a list of your invoice items. Invoice items are returned sorted by creation date, with the most recently created invoice items appearing first.</p>
   *
   * Equivalent to GET /v1/invoiceitems
   */
  getInvoiceitems?: Maybe<V1Invoiceitems2>;
  /**
   * <p>Retrieves the invoice item with the given ID.</p>
   *
   * Equivalent to GET /v1/invoiceitems/{invoiceitem}
   */
  getInvoiceitemsInvoiceitem?: Maybe<Invoiceitem>;
  /**
   * <p>You can list all invoices, or list the invoices for a specific customer. The invoices are returned sorted by creation date, with the most recently created invoices appearing first.</p>
   *
   * Equivalent to GET /v1/invoices
   */
  getInvoices?: Maybe<InvoicesList>;
  /**
   * <p>Retrieves the invoice with the given ID.</p>
   *
   * Equivalent to GET /v1/invoices/{invoice}
   */
  getInvoicesInvoice?: Maybe<Invoice11>;
  /**
   * <p>When retrieving an invoice, you’ll get a <strong>lines</strong> property containing the total count of line items and the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
   *
   * Equivalent to GET /v1/invoices/{invoice}/lines
   */
  getInvoicesInvoiceLines?: Maybe<InvoiceLinesList2>;
  /**
   * <p>At any time, you can preview the upcoming invoice for a customer. This will show you all the charges that are pending, including subscription renewal charges, invoice item charges, etc. It will also show you any discounts that are applicable to the invoice.</p>
   *
   * <p>Note that when you are viewing an upcoming invoice, you are simply viewing a preview – the invoice has not yet been created. As such, the upcoming invoice will not show up in invoice listing calls, and you cannot use the API to pay or edit the invoice. If you want to change the amount that your customer will be billed, you can add, remove, or update pending invoice items, or update the customer’s discount.</p>
   *
   * <p>You can preview the effects of updating a subscription, including a preview of what proration will take place. To ensure that the actual proration is calculated exactly the same as the previewed proration, you should pass a <code>proration_date</code> parameter when doing the actual subscription update. The value passed in should be the same as the <code>subscription_proration_date</code> returned on the upcoming invoice resource. The recommended way to get only the prorations being previewed is to consider only proration line items where <code>period[start]</code> is equal to the <code>subscription_proration_date</code> on the upcoming invoice resource.</p>
   *
   * Equivalent to GET /v1/invoices/upcoming
   */
  getInvoicesUpcoming?: Maybe<Invoice11>;
  /**
   * <p>When retrieving an upcoming invoice, you’ll get a <strong>lines</strong> property containing the total count of line items and the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
   *
   * Equivalent to GET /v1/invoices/upcoming/lines
   */
  getInvoicesUpcomingLines?: Maybe<InvoiceLinesList2>;
  /**
   * <p>Returns a list of issuer fraud records.</p>
   *
   * Equivalent to GET /v1/issuer_fraud_records
   */
  getIssuerFraudRecords?: Maybe<RadarIssuerFraudRecordList>;
  /**
   * <p>Retrieves the details of an issuer fraud record that has previously been created. </p>
   *
   * <p>Please refer to the <a href="#issuer_fraud_record_object">issuer fraud record</a> object reference for more details.</p>
   *
   * Equivalent to GET /v1/issuer_fraud_records/{issuer_fraud_record}
   */
  getIssuerFraudRecordsIssuerFraudRecord?: Maybe<IssuerFraudRecord>;
  /**
   * <p>Returns a list of Issuing <code>Authorization</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
   *
   * Equivalent to GET /v1/issuing/authorizations
   */
  getIssuingAuthorizations?: Maybe<V1IssuingAuthorizations2>;
  /**
   * <p>Retrieves an Issuing <code>Authorization</code> object.</p>
   *
   * Equivalent to GET /v1/issuing/authorizations/{authorization}
   */
  getIssuingAuthorizationsAuthorization?: Maybe<IssuingAuthorization>;
  /**
   * <p>Returns a list of Issuing <code>Cardholder</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
   *
   * Equivalent to GET /v1/issuing/cardholders
   */
  getIssuingCardholders?: Maybe<V1IssuingCardholders2>;
  /**
   * <p>Retrieves an Issuing <code>Cardholder</code> object.</p>
   *
   * Equivalent to GET /v1/issuing/cardholders/{cardholder}
   */
  getIssuingCardholdersCardholder?: Maybe<IssuingCardholder>;
  /**
   * <p>Returns a list of Issuing <code>Card</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
   *
   * Equivalent to GET /v1/issuing/cards
   */
  getIssuingCards?: Maybe<V1IssuingCards2>;
  /**
   * <p>Retrieves an Issuing <code>Card</code> object.</p>
   *
   * Equivalent to GET /v1/issuing/cards/{card}
   */
  getIssuingCardsCard?: Maybe<IssuingCard2>;
  /**
   * <p>Returns a list of Issuing <code>Dispute</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
   *
   * Equivalent to GET /v1/issuing/disputes
   */
  getIssuingDisputes?: Maybe<IssuingDisputeList>;
  /**
   * <p>Retrieves an Issuing <code>Dispute</code> object.</p>
   *
   * Equivalent to GET /v1/issuing/disputes/{dispute}
   */
  getIssuingDisputesDispute?: Maybe<IssuingDispute>;
  /**
   * <p>Returns a list of Issuing <code>Settlement</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
   *
   * Equivalent to GET /v1/issuing/settlements
   */
  getIssuingSettlements?: Maybe<V1IssuingSettlements2>;
  /**
   * <p>Retrieves an Issuing <code>Settlement</code> object.</p>
   *
   * Equivalent to GET /v1/issuing/settlements/{settlement}
   */
  getIssuingSettlementsSettlement?: Maybe<IssuingSettlement>;
  /**
   * <p>Returns a list of Issuing <code>Transaction</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
   *
   * Equivalent to GET /v1/issuing/transactions
   */
  getIssuingTransactions?: Maybe<V1IssuingTransactions2>;
  /**
   * <p>Retrieves an Issuing <code>Transaction</code> object.</p>
   *
   * Equivalent to GET /v1/issuing/transactions/{transaction}
   */
  getIssuingTransactionsTransaction?: Maybe<IssuingTransaction>;
  /**
   * <p>Retrieves a Mandate object.</p>
   *
   * Equivalent to GET /v1/mandates/{mandate}
   */
  getMandatesMandate?: Maybe<Mandate6>;
  /**
   * <p>Returns a list of your order returns. The returns are returned sorted by creation date, with the most recently created return appearing first.</p>
   *
   * Equivalent to GET /v1/order_returns
   */
  getOrderReturns?: Maybe<V1OrderReturns2>;
  /**
   * <p>Retrieves the details of an existing order return. Supply the unique order ID from either an order return creation request or the order return list, and Stripe will return the corresponding order information.</p>
   *
   * Equivalent to GET /v1/order_returns/{id}
   */
  getOrderReturnsId?: Maybe<OrderReturn>;
  /**
   * <p>Returns a list of your orders. The orders are returned sorted by creation date, with the most recently created orders appearing first.</p>
   *
   * Equivalent to GET /v1/orders
   */
  getOrders?: Maybe<V1Orders2>;
  /**
   * <p>Retrieves the details of an existing order. Supply the unique order ID from either an order creation request or the order list, and Stripe will return the corresponding order information.</p>
   *
   * Equivalent to GET /v1/orders/{id}
   */
  getOrdersId?: Maybe<Order3>;
  /**
   * <p>Returns a list of PaymentIntents.</p>
   *
   * Equivalent to GET /v1/payment_intents
   */
  getPaymentIntents?: Maybe<PaymentFlowsPaymentIntentList>;
  /**
   * <p>Retrieves the details of a PaymentIntent that has previously been created. </p>
   *
   * <p>Client-side retrieval using a publishable key is allowed when the <code>client_secret</code> is provided in the query string. </p>
   *
   * <p>When retrieved with a publishable key, only a subset of properties will be returned. Please refer to the <a href="#payment_intent_object">payment intent</a> object reference for more details.</p>
   *
   * Equivalent to GET /v1/payment_intents/{intent}
   */
  getPaymentIntentsIntent?: Maybe<PaymentIntent7>;
  /**
   * <p>Returns a list of PaymentMethods for a given Customer</p>
   *
   * Equivalent to GET /v1/payment_methods
   */
  getPaymentMethods?: Maybe<PaymentFlowsPaymentMethodList>;
  /**
   * <p>Retrieves a PaymentMethod object.</p>
   *
   * Equivalent to GET /v1/payment_methods/{payment_method}
   */
  getPaymentMethodsPaymentMethod?: Maybe<PaymentMethod3>;
  /**
   * <p>Returns a list of existing payouts sent to third-party bank accounts or that Stripe has sent you. The payouts are returned in sorted order, with the most recently created payouts appearing first.</p>
   *
   * Equivalent to GET /v1/payouts
   */
  getPayouts?: Maybe<PayoutList>;
  /**
   * <p>Retrieves the details of an existing payout. Supply the unique payout ID from either a payout creation request or the payout list, and Stripe will return the corresponding payout information.</p>
   *
   * Equivalent to GET /v1/payouts/{payout}
   */
  getPayoutsPayout?: Maybe<Payout>;
  /**
   * <p>Returns a list of your plans.</p>
   *
   * Equivalent to GET /v1/plans
   */
  getPlans?: Maybe<PlanList>;
  /**
   * <p>Retrieves the plan with the given ID.</p>
   *
   * Equivalent to GET /v1/plans/{plan}
   */
  getPlansPlan?: Maybe<Plan4>;
  /**
   * <p>Returns a list of your prices.</p>
   *
   * Equivalent to GET /v1/prices
   */
  getPrices?: Maybe<PriceList>;
  /**
   * <p>Retrieves the price with the given ID.</p>
   *
   * Equivalent to GET /v1/prices/{price}
   */
  getPricesPrice?: Maybe<Price3>;
  /**
   * <p>Returns a list of your products. The products are returned sorted by creation date, with the most recently created products appearing first.</p>
   *
   * Equivalent to GET /v1/products
   */
  getProducts?: Maybe<V1Products2>;
  /**
   * <p>Retrieves the details of an existing product. Supply the unique product ID from either a product creation request or the product list, and Stripe will return the corresponding product information.</p>
   *
   * Equivalent to GET /v1/products/{id}
   */
  getProductsId?: Maybe<Product14>;
  /**
   * <p>Returns a list of your promotion codes.</p>
   *
   * Equivalent to GET /v1/promotion_codes
   */
  getPromotionCodes?: Maybe<V1PromotionCodes2>;
  /**
   * <p>Retrieves the promotion code with the given ID.</p>
   *
   * Equivalent to GET /v1/promotion_codes/{promotion_code}
   */
  getPromotionCodesPromotionCode?: Maybe<PromotionCode11>;
  /**
   * <p>Returns a list of your quotes.</p>
   *
   * Equivalent to GET /v1/quotes
   */
  getQuotes?: Maybe<V1Quotes2>;
  /**
   * <p>Retrieves the quote with the given ID.</p>
   *
   * Equivalent to GET /v1/quotes/{quote}
   */
  getQuotesQuote?: Maybe<Quote2>;
  /**
   * <p>When retrieving a quote, there is an includable <strong>upfront.line_items</strong> property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of upfront line items.</p>
   *
   * Equivalent to GET /v1/quotes/{quote}/computed_upfront_line_items
   */
  getQuotesQuoteComputedUpfrontLineItems?: Maybe<QuotesResourceListLineItems2>;
  /**
   * <p>When retrieving a quote, there is an includable <strong>line_items</strong> property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
   *
   * Equivalent to GET /v1/quotes/{quote}/line_items
   */
  getQuotesQuoteLineItems?: Maybe<QuotesResourceListLineItems2>;
  /**
   * <p>Download the PDF for a finalized quote</p>
   *
   * Equivalent to GET /v1/quotes/{quote}/pdf
   */
  getQuotesQuotePdf?: Maybe<Scalars['String']>;
  /**
   * <p>Returns a list of early fraud warnings.</p>
   *
   * Equivalent to GET /v1/radar/early_fraud_warnings
   */
  getRadarEarlyFraudWarnings?: Maybe<RadarEarlyFraudWarningList>;
  /**
   * <p>Retrieves the details of an early fraud warning that has previously been created. </p>
   *
   * <p>Please refer to the <a href="#early_fraud_warning_object">early fraud warning</a> object reference for more details.</p>
   *
   * Equivalent to GET /v1/radar/early_fraud_warnings/{early_fraud_warning}
   */
  getRadarEarlyFraudWarningsEarlyFraudWarning?: Maybe<RadarEarlyFraudWarning>;
  /**
   * <p>Returns a list of <code>ValueListItem</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
   *
   * Equivalent to GET /v1/radar/value_list_items
   */
  getRadarValueListItems?: Maybe<V1RadarValueListItems2>;
  /**
   * <p>Retrieves a <code>ValueListItem</code> object.</p>
   *
   * Equivalent to GET /v1/radar/value_list_items/{item}
   */
  getRadarValueListItemsItem?: Maybe<RadarValueListItem>;
  /**
   * <p>Returns a list of <code>ValueList</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
   *
   * Equivalent to GET /v1/radar/value_lists
   */
  getRadarValueLists?: Maybe<V1RadarValueLists2>;
  /**
   * <p>Retrieves a <code>ValueList</code> object.</p>
   *
   * Equivalent to GET /v1/radar/value_lists/{value_list}
   */
  getRadarValueListsValueList?: Maybe<RadarValueList>;
  /**
   * <p>Returns a list of your recipients. The recipients are returned sorted by creation date, with the most recently created recipients appearing first.</p>
   *
   * Equivalent to GET /v1/recipients
   */
  getRecipients?: Maybe<V1Recipients2>;
  /**
   * <p>Retrieves the details of an existing recipient. You need only supply the unique recipient identifier that was returned upon recipient creation.</p>
   *
   * Equivalent to GET /v1/recipients/{id}
   */
  getRecipientsId?: Maybe<V1Recipient2>;
  /**
   * <p>Returns a list of all refunds you’ve previously created. The refunds are returned in sorted order, with the most recent refunds appearing first. For convenience, the 10 most recent refunds are always available by default on the charge object.</p>
   *
   * Equivalent to GET /v1/refunds
   */
  getRefunds?: Maybe<V1Refunds2>;
  /**
   * <p>Retrieves the details of an existing refund.</p>
   *
   * Equivalent to GET /v1/refunds/{refund}
   */
  getRefundsRefund?: Maybe<Refund>;
  /**
   * <p>Returns a list of Report Runs, with the most recent appearing first.</p>
   *
   * Equivalent to GET /v1/reporting/report_runs
   */
  getReportingReportRuns?: Maybe<V1ReportingReportRuns2>;
  /**
   * <p>Retrieves the details of an existing Report Run.</p>
   *
   * Equivalent to GET /v1/reporting/report_runs/{report_run}
   */
  getReportingReportRunsReportRun?: Maybe<ReportingReportRun>;
  /**
   * <p>Returns a full list of Report Types.</p>
   *
   * Equivalent to GET /v1/reporting/report_types
   */
  getReportingReportTypes?: Maybe<FinancialReportingFinanceReportTypeList>;
  /**
   * <p>Retrieves the details of a Report Type. (Certain report types require a <a href="https://stripe.com/docs/keys#test-live-modes">live-mode API key</a>.)</p>
   *
   * Equivalent to GET /v1/reporting/report_types/{report_type}
   */
  getReportingReportTypesReportType?: Maybe<ReportingReportType>;
  /**
   * <p>Returns a list of <code>Review</code> objects that have <code>open</code> set to <code>true</code>. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
   *
   * Equivalent to GET /v1/reviews
   */
  getReviews?: Maybe<V1Reviews2>;
  /**
   * <p>Retrieves a <code>Review</code> object.</p>
   *
   * Equivalent to GET /v1/reviews/{review}
   */
  getReviewsReview?: Maybe<Review3>;
  /**
   * <p>Returns a list of SetupAttempts associated with a provided SetupIntent.</p>
   *
   * Equivalent to GET /v1/setup_attempts
   */
  getSetupAttempts?: Maybe<PaymentFlowsSetupIntentSetupAttemptList>;
  /**
   * <p>Returns a list of SetupIntents.</p>
   *
   * Equivalent to GET /v1/setup_intents
   */
  getSetupIntents?: Maybe<PaymentFlowsSetupIntentList>;
  /**
   * <p>Retrieves the details of a SetupIntent that has previously been created. </p>
   *
   * <p>Client-side retrieval using a publishable key is allowed when the <code>client_secret</code> is provided in the query string. </p>
   *
   * <p>When retrieved with a publishable key, only a subset of properties will be returned. Please refer to the <a href="#setup_intent_object">SetupIntent</a> object reference for more details.</p>
   *
   * Equivalent to GET /v1/setup_intents/{intent}
   */
  getSetupIntentsIntent?: Maybe<SetupIntent2>;
  /**
   * <p>Returns a list of scheduled query runs.</p>
   *
   * Equivalent to GET /v1/sigma/scheduled_query_runs
   */
  getSigmaScheduledQueryRuns?: Maybe<V1SigmaScheduledQueryRuns2>;
  /**
   * <p>Retrieves the details of an scheduled query run.</p>
   *
   * Equivalent to GET /v1/sigma/scheduled_query_runs/{scheduled_query_run}
   */
  getSigmaScheduledQueryRunsScheduledQueryRun?: Maybe<ScheduledQueryRun>;
  /**
   * <p>Returns a list of your SKUs. The SKUs are returned sorted by creation date, with the most recently created SKUs appearing first.</p>
   *
   * Equivalent to GET /v1/skus
   */
  getSkus?: Maybe<V1Skus2>;
  /**
   * <p>Retrieves the details of an existing SKU. Supply the unique SKU identifier from either a SKU creation request or from the product, and Stripe will return the corresponding SKU information.</p>
   *
   * Equivalent to GET /v1/skus/{id}
   */
  getSkusId?: Maybe<V1Skus4>;
  /**
   * <p>Retrieves an existing source object. Supply the unique source ID from a source creation request and Stripe will return the corresponding up-to-date source object information.</p>
   *
   * Equivalent to GET /v1/sources/{source}
   */
  getSourcesSource?: Maybe<Source12>;
  /**
   * <p>Retrieves a new Source MandateNotification.</p>
   *
   * Equivalent to GET /v1/sources/{source}/mandate_notifications/{mandate_notification}
   */
  getSourcesSourceMandateNotificationsMandateNotification?: Maybe<SourceMandateNotification>;
  /**
   * <p>List source transactions for a given source.</p>
   *
   * Equivalent to GET /v1/sources/{source}/source_transactions
   */
  getSourcesSourceSourceTransactions?: Maybe<ApmsSourcesSourceTransactionList>;
  /**
   * <p>Retrieve an existing source transaction object. Supply the unique source ID from a source creation request and the source transaction ID and Stripe will return the corresponding up-to-date source object information.</p>
   *
   * Equivalent to GET /v1/sources/{source}/source_transactions/{source_transaction}
   */
  getSourcesSourceSourceTransactionsSourceTransaction?: Maybe<SourceTransaction>;
  /**
   * <p>Returns a list of your subscription items for a given subscription.</p>
   *
   * Equivalent to GET /v1/subscription_items
   */
  getSubscriptionItems?: Maybe<V1SubscriptionItems2>;
  /**
   * <p>Retrieves the subscription item with the given ID.</p>
   *
   * Equivalent to GET /v1/subscription_items/{item}
   */
  getSubscriptionItemsItem?: Maybe<SubscriptionItem>;
  /**
   * <p>For the specified subscription item, returns a list of summary objects. Each object in the list provides usage information that’s been summarized from multiple usage records and over a subscription billing period (e.g., 15 usage records in the month of September).</p>
   *
   * <p>The list is sorted in reverse-chronological order (newest first). The first list item represents the most current usage period that hasn’t ended yet. Since new usage records can still be added, the returned summary information for the subscription item’s ID should be seen as unstable until the subscription billing period ends.</p>
   *
   * Equivalent to GET /v1/subscription_items/{subscription_item}/usage_record_summaries
   */
  getSubscriptionItemsSubscriptionItemUsageRecordSummaries?: Maybe<V1SubscriptionItemUsageRecordSummaries2>;
  /**
   * <p>Retrieves the list of your subscription schedules.</p>
   *
   * Equivalent to GET /v1/subscription_schedules
   */
  getSubscriptionSchedules?: Maybe<V1SubscriptionSchedules2>;
  /**
   * <p>Retrieves the details of an existing subscription schedule. You only need to supply the unique subscription schedule identifier that was returned upon subscription schedule creation.</p>
   *
   * Equivalent to GET /v1/subscription_schedules/{schedule}
   */
  getSubscriptionSchedulesSchedule?: Maybe<SubscriptionSchedule2>;
  /**
   * <p>By default, returns a list of subscriptions that have not been canceled. In order to list canceled subscriptions, specify <code>status=canceled</code>.</p>
   *
   * Equivalent to GET /v1/subscriptions
   */
  getSubscriptions?: Maybe<V1Subscriptions2>;
  /**
   * <p>Retrieves the subscription with the given ID.</p>
   *
   * Equivalent to GET /v1/subscriptions/{subscription_exposed_id}
   */
  getSubscriptionsSubscriptionExposedId?: Maybe<Subscription5>;
  /**
   * <p>A list of <a href="https://stripe.com/docs/tax/tax-codes">all tax codes available</a> to add to Products in order to allow specific tax calculations.</p>
   *
   * Equivalent to GET /v1/tax_codes
   */
  getTaxCodes?: Maybe<TaxProductResourceTaxCodeList>;
  /**
   * <p>Retrieves the details of an existing tax code. Supply the unique tax code ID and Stripe will return the corresponding tax code information.</p>
   *
   * Equivalent to GET /v1/tax_codes/{id}
   */
  getTaxCodesId?: Maybe<TaxCode6>;
  /**
   * <p>Returns a list of your tax rates. Tax rates are returned sorted by creation date, with the most recently created tax rates appearing first.</p>
   *
   * Equivalent to GET /v1/tax_rates
   */
  getTaxRates?: Maybe<V1TaxRates2>;
  /**
   * <p>Retrieves a tax rate with the given ID</p>
   *
   * Equivalent to GET /v1/tax_rates/{tax_rate}
   */
  getTaxRatesTaxRate?: Maybe<TaxRate>;
  /**
   * <p>Returns a list of <code>Location</code> objects.</p>
   *
   * Equivalent to GET /v1/terminal/locations
   */
  getTerminalLocations?: Maybe<TerminalLocationLocationList>;
  /**
   * <p>Retrieves a <code>Location</code> object.</p>
   *
   * Equivalent to GET /v1/terminal/locations/{location}
   */
  getTerminalLocationsLocation?: Maybe<TerminalLocation>;
  /**
   * <p>Returns a list of <code>Reader</code> objects.</p>
   *
   * Equivalent to GET /v1/terminal/readers
   */
  getTerminalReaders?: Maybe<TerminalReaderRetrieveReader>;
  /**
   * <p>Retrieves a <code>Reader</code> object.</p>
   *
   * Equivalent to GET /v1/terminal/readers/{reader}
   */
  getTerminalReadersReader?: Maybe<TerminalReader>;
  /**
   * <p>Retrieves the token with the given ID.</p>
   *
   * Equivalent to GET /v1/tokens/{token}
   */
  getTokensToken?: Maybe<Token3>;
  /**
   * <p>Returns a list of top-ups.</p>
   *
   * Equivalent to GET /v1/topups
   */
  getTopups?: Maybe<TopupList>;
  /**
   * <p>Retrieves the details of a top-up that has previously been created. Supply the unique top-up ID that was returned from your previous request, and Stripe will return the corresponding top-up information.</p>
   *
   * Equivalent to GET /v1/topups/{topup}
   */
  getTopupsTopup?: Maybe<Topup>;
  /**
   * <p>Returns a list of existing transfers sent to connected accounts. The transfers are returned in sorted order, with the most recently created transfers appearing first.</p>
   *
   * Equivalent to GET /v1/transfers
   */
  getTransfers?: Maybe<TransferList>;
  /**
   * <p>You can see a list of the reversals belonging to a specific transfer. Note that the 10 most recent reversals are always available by default on the transfer object. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional reversals.</p>
   *
   * Equivalent to GET /v1/transfers/{id}/reversals
   */
  getTransfersIdReversals?: Maybe<TransferReversalList>;
  /**
   * <p>Retrieves the details of an existing transfer. Supply the unique transfer ID from either a transfer creation request or the transfer list, and Stripe will return the corresponding transfer information.</p>
   *
   * Equivalent to GET /v1/transfers/{transfer}
   */
  getTransfersTransfer?: Maybe<Transfer2>;
  /**
   * <p>By default, you can see the 10 most recent reversals stored directly on the transfer object, but you can also retrieve details about a specific reversal stored on the transfer.</p>
   *
   * Equivalent to GET /v1/transfers/{transfer}/reversals/{id}
   */
  getTransfersTransferReversalsId?: Maybe<TransferReversal2>;
  /**
   * <p>Returns a list of your webhook endpoints.</p>
   *
   * Equivalent to GET /v1/webhook_endpoints
   */
  getWebhookEndpoints?: Maybe<V1WebhookEndpoints2>;
  /**
   * <p>Retrieves the webhook endpoint with the given ID.</p>
   *
   * Equivalent to GET /v1/webhook_endpoints/{webhook_endpoint}
   */
  getWebhookEndpointsWebhookEndpoint?: Maybe<WebhookEndpoint>;
};


export type QuerycontinentsArgs = {
  filter?: Maybe<ContinentFilterInput>;
};


export type QuerycontinentArgs = {
  code: Scalars['ID'];
};


export type QuerycountriesArgs = {
  filter?: Maybe<CountryFilterInput>;
};


export type QuerycountryArgs = {
  code: Scalars['ID'];
};


export type QuerylanguagesArgs = {
  filter?: Maybe<LanguageFilterInput>;
};


export type QuerylanguageArgs = {
  code: Scalars['ID'];
};


export type QuerycartArgs = {
  id: Scalars['ID'];
  currency?: Maybe<CurrencyInput>;
};


export type QuerynodeArgs = {
  id: Scalars['ID'];
  currency?: Maybe<CurrencyInput>;
};


export type Queryget3dSecureThreeDSecureArgs = {
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  threeDSecure: Scalars['String'];
  v13dSecure2Input?: Maybe<Scalars['JSON']>;
};


export type QuerygetAccountArgs = {
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  v1Account2Input?: Maybe<Scalars['JSON']>;
};


export type QuerygetAccountBankAccountsIdArgs = {
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  id: Scalars['String'];
  v1AccountBankAccountInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetAccountCapabilitiesArgs = {
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  v1AccountCapabilitiesInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetAccountCapabilitiesCapabilityArgs = {
  capability: Scalars['String'];
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  v1AccountCapabilityInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetAccountExternalAccountsArgs = {
  endingBefore?: Maybe<Scalars['String']>;
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  limit?: Maybe<Scalars['Int']>;
  startingAfter?: Maybe<Scalars['String']>;
  v1AccountExternalAccountsInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetAccountExternalAccountsIdArgs = {
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  id: Scalars['String'];
  v1AccountExternalAccountInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetAccountPeopleArgs = {
  endingBefore?: Maybe<Scalars['String']>;
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  limit?: Maybe<Scalars['Int']>;
  relationship?: Maybe<Relationship2Input>;
  startingAfter?: Maybe<Scalars['String']>;
  v1AccountPeopleInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetAccountPeoplePersonArgs = {
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  person: Scalars['String'];
  v1AccountPersonInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetAccountPersonsArgs = {
  endingBefore?: Maybe<Scalars['String']>;
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  limit?: Maybe<Scalars['Int']>;
  relationship?: Maybe<Relationship2Input>;
  startingAfter?: Maybe<Scalars['String']>;
  v1AccountPersonsInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetAccountPersonsPersonArgs = {
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  person: Scalars['String'];
  v1AccountPersonInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetAccountsArgs = {
  created?: Maybe<Scalars['JSON']>;
  endingBefore?: Maybe<Scalars['String']>;
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  limit?: Maybe<Scalars['Int']>;
  startingAfter?: Maybe<Scalars['String']>;
  v1AccountsInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetAccountsAccountArgs = {
  account: Scalars['String'];
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  v1Account2Input?: Maybe<Scalars['JSON']>;
};


export type QuerygetAccountsAccountBankAccountsIdArgs = {
  account: Scalars['String'];
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  id: Scalars['String'];
  v1AccountBankAccountInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetAccountsAccountCapabilitiesArgs = {
  account: Scalars['String'];
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  v1AccountCapabilitiesInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetAccountsAccountCapabilitiesCapabilityArgs = {
  account: Scalars['String'];
  capability: Scalars['String'];
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  v1AccountCapabilityInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetAccountsAccountExternalAccountsArgs = {
  account: Scalars['String'];
  endingBefore?: Maybe<Scalars['String']>;
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  limit?: Maybe<Scalars['Int']>;
  startingAfter?: Maybe<Scalars['String']>;
  v1AccountExternalAccountsInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetAccountsAccountExternalAccountsIdArgs = {
  account: Scalars['String'];
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  id: Scalars['String'];
  v1AccountExternalAccountInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetAccountsAccountPeopleArgs = {
  account: Scalars['String'];
  endingBefore?: Maybe<Scalars['String']>;
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  limit?: Maybe<Scalars['Int']>;
  relationship?: Maybe<Relationship2Input>;
  startingAfter?: Maybe<Scalars['String']>;
  v1AccountPeopleInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetAccountsAccountPeoplePersonArgs = {
  account: Scalars['String'];
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  person: Scalars['String'];
  v1AccountPersonInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetAccountsAccountPersonsArgs = {
  account: Scalars['String'];
  endingBefore?: Maybe<Scalars['String']>;
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  limit?: Maybe<Scalars['Int']>;
  relationship?: Maybe<Relationship2Input>;
  startingAfter?: Maybe<Scalars['String']>;
  v1AccountPersonsInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetAccountsAccountPersonsPersonArgs = {
  account: Scalars['String'];
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  person: Scalars['String'];
  v1AccountPersonInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetApplePayDomainsArgs = {
  domainName?: Maybe<Scalars['String']>;
  endingBefore?: Maybe<Scalars['String']>;
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  limit?: Maybe<Scalars['Int']>;
  startingAfter?: Maybe<Scalars['String']>;
  v1ApplePayDomainsInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetApplePayDomainsDomainArgs = {
  domain: Scalars['String'];
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  v1ApplePayDomainInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetApplicationFeesArgs = {
  charge?: Maybe<Scalars['String']>;
  created?: Maybe<Scalars['JSON']>;
  endingBefore?: Maybe<Scalars['String']>;
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  limit?: Maybe<Scalars['Int']>;
  startingAfter?: Maybe<Scalars['String']>;
  v1ApplicationFeesInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetApplicationFeesFeeRefundsIdArgs = {
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  fee: Scalars['String'];
  id: Scalars['String'];
  v1ApplicationFeesRefundInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetApplicationFeesIdArgs = {
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  id: Scalars['String'];
  v1ApplicationFeeInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetApplicationFeesIdRefundsArgs = {
  endingBefore?: Maybe<Scalars['String']>;
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  id: Scalars['String'];
  limit?: Maybe<Scalars['Int']>;
  startingAfter?: Maybe<Scalars['String']>;
  v1ApplicationFeeRefundsInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetBalanceArgs = {
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  v1BalanceInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetBalanceHistoryArgs = {
  availableOn?: Maybe<Scalars['JSON']>;
  created?: Maybe<Scalars['JSON']>;
  currency?: Maybe<Scalars['String']>;
  endingBefore?: Maybe<Scalars['String']>;
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  limit?: Maybe<Scalars['Int']>;
  payout?: Maybe<Scalars['String']>;
  source?: Maybe<Scalars['String']>;
  startingAfter?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  v1BalanceHistoryInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetBalanceHistoryIdArgs = {
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  id: Scalars['String'];
  v1BalanceHistoryInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetBalanceTransactionsArgs = {
  availableOn?: Maybe<Scalars['JSON']>;
  created?: Maybe<Scalars['JSON']>;
  currency?: Maybe<Scalars['String']>;
  endingBefore?: Maybe<Scalars['String']>;
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  limit?: Maybe<Scalars['Int']>;
  payout?: Maybe<Scalars['String']>;
  source?: Maybe<Scalars['String']>;
  startingAfter?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  v1BalanceTransactionsInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetBalanceTransactionsIdArgs = {
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  id: Scalars['String'];
  v1BalanceTransactionInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetBillingPortalConfigurationsArgs = {
  active?: Maybe<Scalars['Boolean']>;
  endingBefore?: Maybe<Scalars['String']>;
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  isDefault?: Maybe<Scalars['Boolean']>;
  limit?: Maybe<Scalars['Int']>;
  startingAfter?: Maybe<Scalars['String']>;
  v1BillingPortalConfigurationsInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetBillingPortalConfigurationsConfigurationArgs = {
  configuration: Scalars['String'];
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  v1BillingPortalConfigurationInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetBitcoinReceiversArgs = {
  active?: Maybe<Scalars['Boolean']>;
  endingBefore?: Maybe<Scalars['String']>;
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  filled?: Maybe<Scalars['Boolean']>;
  limit?: Maybe<Scalars['Int']>;
  startingAfter?: Maybe<Scalars['String']>;
  uncapturedFunds?: Maybe<Scalars['Boolean']>;
  v1BitcoinReceiversInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetBitcoinReceiversIdArgs = {
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  id: Scalars['String'];
  v1BitcoinReceiverInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetBitcoinReceiversReceiverTransactionsArgs = {
  customer?: Maybe<Scalars['String']>;
  endingBefore?: Maybe<Scalars['String']>;
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  limit?: Maybe<Scalars['Int']>;
  receiver: Scalars['String'];
  startingAfter?: Maybe<Scalars['String']>;
  v1BitcoinReceiverTransactionsInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetBitcoinTransactionsArgs = {
  customer?: Maybe<Scalars['String']>;
  endingBefore?: Maybe<Scalars['String']>;
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  limit?: Maybe<Scalars['Int']>;
  receiver?: Maybe<Scalars['String']>;
  startingAfter?: Maybe<Scalars['String']>;
  v1BitcoinTransactionsInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetChargesArgs = {
  created?: Maybe<Scalars['JSON']>;
  customer?: Maybe<Scalars['String']>;
  endingBefore?: Maybe<Scalars['String']>;
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  limit?: Maybe<Scalars['Int']>;
  paymentIntent?: Maybe<Scalars['String']>;
  startingAfter?: Maybe<Scalars['String']>;
  transferGroup?: Maybe<Scalars['String']>;
  v1ChargesInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetChargesChargeArgs = {
  charge: Scalars['String'];
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  v1ChargeInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetChargesChargeDisputeArgs = {
  charge: Scalars['String'];
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  v1ChargeDisputeInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetChargesChargeRefundsArgs = {
  charge: Scalars['String'];
  endingBefore?: Maybe<Scalars['String']>;
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  limit?: Maybe<Scalars['Int']>;
  startingAfter?: Maybe<Scalars['String']>;
  v1ChargeRefundsInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetChargesChargeRefundsRefundArgs = {
  charge: Scalars['String'];
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  refund: Scalars['String'];
  v1ChargeRefund2Input?: Maybe<Scalars['JSON']>;
};


export type QuerygetCheckoutSessionsArgs = {
  endingBefore?: Maybe<Scalars['String']>;
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  limit?: Maybe<Scalars['Int']>;
  paymentIntent?: Maybe<Scalars['String']>;
  startingAfter?: Maybe<Scalars['String']>;
  subscription?: Maybe<Scalars['String']>;
  v1CheckoutSessionsInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetCheckoutSessionsSessionArgs = {
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  session: Scalars['String'];
  v1CheckoutSessionInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetCheckoutSessionsSessionLineItemsArgs = {
  endingBefore?: Maybe<Scalars['String']>;
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  limit?: Maybe<Scalars['Int']>;
  session: Scalars['String'];
  startingAfter?: Maybe<Scalars['String']>;
  v1CheckoutSessionLineItemsInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetCountrySpecsArgs = {
  endingBefore?: Maybe<Scalars['String']>;
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  limit?: Maybe<Scalars['Int']>;
  startingAfter?: Maybe<Scalars['String']>;
  v1CountrySpecsInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetCountrySpecsCountryArgs = {
  country: Scalars['String'];
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  v1CountrySpecsInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetCouponsArgs = {
  created?: Maybe<Scalars['JSON']>;
  endingBefore?: Maybe<Scalars['String']>;
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  limit?: Maybe<Scalars['Int']>;
  startingAfter?: Maybe<Scalars['String']>;
  v1CouponsInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetCouponsCouponArgs = {
  coupon: Scalars['String'];
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  v1CouponInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetCreditNotesArgs = {
  customer?: Maybe<Scalars['String']>;
  endingBefore?: Maybe<Scalars['String']>;
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  invoice?: Maybe<Scalars['String']>;
  limit?: Maybe<Scalars['Int']>;
  startingAfter?: Maybe<Scalars['String']>;
  v1CreditNotesInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetCreditNotesCreditNoteLinesArgs = {
  creditNote: Scalars['String'];
  endingBefore?: Maybe<Scalars['String']>;
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  limit?: Maybe<Scalars['Int']>;
  startingAfter?: Maybe<Scalars['String']>;
  v1CreditNoteLinesInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetCreditNotesIdArgs = {
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  id: Scalars['String'];
  v1CreditNoteInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetCreditNotesPreviewArgs = {
  amount?: Maybe<Scalars['Int']>;
  creditAmount?: Maybe<Scalars['Int']>;
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  invoice: Scalars['String'];
  lines?: Maybe<Array<Maybe<Lines3ListItemInput>>>;
  memo?: Maybe<Scalars['String']>;
  metadata?: Maybe<Scalars['JSON']>;
  outOfBandAmount?: Maybe<Scalars['Int']>;
  reason?: Maybe<Reason18>;
  refund?: Maybe<Scalars['String']>;
  refundAmount?: Maybe<Scalars['Int']>;
  v1CreditNotesPreviewInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetCreditNotesPreviewLinesArgs = {
  amount?: Maybe<Scalars['Int']>;
  creditAmount?: Maybe<Scalars['Int']>;
  endingBefore?: Maybe<Scalars['String']>;
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  invoice: Scalars['String'];
  limit?: Maybe<Scalars['Int']>;
  lines?: Maybe<Array<Maybe<Lines3ListItemInput>>>;
  memo?: Maybe<Scalars['String']>;
  metadata?: Maybe<Scalars['JSON']>;
  outOfBandAmount?: Maybe<Scalars['Int']>;
  reason?: Maybe<Reason18>;
  refund?: Maybe<Scalars['String']>;
  refundAmount?: Maybe<Scalars['Int']>;
  startingAfter?: Maybe<Scalars['String']>;
  v1CreditNotesPreviewLinesInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetCustomersArgs = {
  created?: Maybe<Scalars['JSON']>;
  email?: Maybe<Scalars['String']>;
  endingBefore?: Maybe<Scalars['String']>;
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  limit?: Maybe<Scalars['Int']>;
  startingAfter?: Maybe<Scalars['String']>;
  v1CustomersInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetCustomersCustomerArgs = {
  customer: Scalars['String'];
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  v1CustomerInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetCustomersCustomerBalanceTransactionsArgs = {
  customer: Scalars['String'];
  endingBefore?: Maybe<Scalars['String']>;
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  limit?: Maybe<Scalars['Int']>;
  startingAfter?: Maybe<Scalars['String']>;
  v1CustomerBalanceTransactionsInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetCustomersCustomerBalanceTransactionsTransactionArgs = {
  customer: Scalars['String'];
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  transaction: Scalars['String'];
  v1CustomerBalanceTransactionsInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetCustomersCustomerBankAccountsArgs = {
  customer: Scalars['String'];
  endingBefore?: Maybe<Scalars['String']>;
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  limit?: Maybe<Scalars['Int']>;
  startingAfter?: Maybe<Scalars['String']>;
  v1CustomerBankAccountsInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetCustomersCustomerBankAccountsIdArgs = {
  customer: Scalars['String'];
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  id: Scalars['String'];
  v1CustomerBankAccount3Input?: Maybe<Scalars['JSON']>;
};


export type QuerygetCustomersCustomerCardsArgs = {
  customer: Scalars['String'];
  endingBefore?: Maybe<Scalars['String']>;
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  limit?: Maybe<Scalars['Int']>;
  startingAfter?: Maybe<Scalars['String']>;
  v1CustomerCardsInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetCustomersCustomerCardsIdArgs = {
  customer: Scalars['String'];
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  id: Scalars['String'];
  v1CustomerCard3Input?: Maybe<Scalars['JSON']>;
};


export type QuerygetCustomersCustomerDiscountArgs = {
  customer: Scalars['String'];
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  v1CustomerDiscountInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetCustomersCustomerSourcesArgs = {
  customer: Scalars['String'];
  endingBefore?: Maybe<Scalars['String']>;
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  limit?: Maybe<Scalars['Int']>;
  object?: Maybe<Scalars['String']>;
  startingAfter?: Maybe<Scalars['String']>;
  v1CustomerSourcesInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetCustomersCustomerSourcesIdArgs = {
  customer: Scalars['String'];
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  id: Scalars['String'];
  v1CustomerSource3Input?: Maybe<Scalars['JSON']>;
};


export type QuerygetCustomersCustomerSubscriptionsArgs = {
  customer: Scalars['String'];
  endingBefore?: Maybe<Scalars['String']>;
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  limit?: Maybe<Scalars['Int']>;
  startingAfter?: Maybe<Scalars['String']>;
  v1CustomerSubscriptionsInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetCustomersCustomerSubscriptionsSubscriptionExposedIdArgs = {
  customer: Scalars['String'];
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  subscriptionExposedId: Scalars['String'];
  v1CustomerSubscription2Input?: Maybe<Scalars['JSON']>;
};


export type QuerygetCustomersCustomerSubscriptionsSubscriptionExposedIdDiscountArgs = {
  customer: Scalars['String'];
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  subscriptionExposedId: Scalars['String'];
  v1CustomerSubscriptionDiscountInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetCustomersCustomerTaxIdsArgs = {
  customer: Scalars['String'];
  endingBefore?: Maybe<Scalars['String']>;
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  limit?: Maybe<Scalars['Int']>;
  startingAfter?: Maybe<Scalars['String']>;
  v1CustomerTaxIdsInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetCustomersCustomerTaxIdsIdArgs = {
  customer: Scalars['String'];
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  id: Scalars['String'];
  v1CustomerTaxIdInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetDisputesArgs = {
  charge?: Maybe<Scalars['String']>;
  created?: Maybe<Scalars['JSON']>;
  endingBefore?: Maybe<Scalars['String']>;
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  limit?: Maybe<Scalars['Int']>;
  paymentIntent?: Maybe<Scalars['String']>;
  startingAfter?: Maybe<Scalars['String']>;
  v1DisputesInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetDisputesDisputeArgs = {
  dispute: Scalars['String'];
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  v1DisputeInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetEventsArgs = {
  created?: Maybe<Scalars['JSON']>;
  deliverySuccess?: Maybe<Scalars['Boolean']>;
  endingBefore?: Maybe<Scalars['String']>;
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  limit?: Maybe<Scalars['Int']>;
  startingAfter?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  types?: Maybe<Array<Maybe<Scalars['String']>>>;
  v1EventsInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetEventsIdArgs = {
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  id: Scalars['String'];
  v1EventInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetExchangeRatesArgs = {
  endingBefore?: Maybe<Scalars['String']>;
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  limit?: Maybe<Scalars['Int']>;
  startingAfter?: Maybe<Scalars['String']>;
  v1ExchangeRatesInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetExchangeRatesRateIdArgs = {
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  rateId: Scalars['String'];
  v1ExchangeRateInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetFileLinksArgs = {
  created?: Maybe<Scalars['JSON']>;
  endingBefore?: Maybe<Scalars['String']>;
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  expired?: Maybe<Scalars['Boolean']>;
  file?: Maybe<Scalars['String']>;
  limit?: Maybe<Scalars['Int']>;
  startingAfter?: Maybe<Scalars['String']>;
  v1FileLinksInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetFileLinksLinkArgs = {
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  link: Scalars['String'];
  v1FileLinksInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetFilesArgs = {
  created?: Maybe<Scalars['JSON']>;
  endingBefore?: Maybe<Scalars['String']>;
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  limit?: Maybe<Scalars['Int']>;
  purpose?: Maybe<Purpose2>;
  startingAfter?: Maybe<Scalars['String']>;
  v1FilesInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetFilesFileArgs = {
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  file: Scalars['String'];
  v1FileInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetIdentityVerificationReportsArgs = {
  created?: Maybe<Scalars['JSON']>;
  endingBefore?: Maybe<Scalars['String']>;
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  limit?: Maybe<Scalars['Int']>;
  startingAfter?: Maybe<Scalars['String']>;
  type?: Maybe<Type68>;
  v1IdentityVerificationReportsInput?: Maybe<Scalars['JSON']>;
  verificationSession?: Maybe<Scalars['String']>;
};


export type QuerygetIdentityVerificationReportsReportArgs = {
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  report: Scalars['String'];
  v1IdentityVerificationReportsInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetIdentityVerificationSessionsArgs = {
  created?: Maybe<Scalars['JSON']>;
  endingBefore?: Maybe<Scalars['String']>;
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  limit?: Maybe<Scalars['Int']>;
  startingAfter?: Maybe<Scalars['String']>;
  status?: Maybe<Status55>;
  v1IdentityVerificationSessionsInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetIdentityVerificationSessionsSessionArgs = {
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  session: Scalars['String'];
  v1IdentityVerificationSessionsInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetInvoiceitemsArgs = {
  created?: Maybe<Scalars['JSON']>;
  customer?: Maybe<Scalars['String']>;
  endingBefore?: Maybe<Scalars['String']>;
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  invoice?: Maybe<Scalars['String']>;
  limit?: Maybe<Scalars['Int']>;
  pending?: Maybe<Scalars['Boolean']>;
  startingAfter?: Maybe<Scalars['String']>;
  v1InvoiceitemsInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetInvoiceitemsInvoiceitemArgs = {
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  invoiceitem: Scalars['String'];
  v1InvoiceitemInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetInvoicesArgs = {
  collectionMethod?: Maybe<CollectionMethod9>;
  created?: Maybe<Scalars['JSON']>;
  customer?: Maybe<Scalars['String']>;
  dueDate?: Maybe<Scalars['JSON']>;
  endingBefore?: Maybe<Scalars['String']>;
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  limit?: Maybe<Scalars['Int']>;
  startingAfter?: Maybe<Scalars['String']>;
  status?: Maybe<Status56>;
  subscription?: Maybe<Scalars['String']>;
  v1InvoicesInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetInvoicesInvoiceArgs = {
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  invoice: Scalars['String'];
  v1InvoiceInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetInvoicesInvoiceLinesArgs = {
  endingBefore?: Maybe<Scalars['String']>;
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  invoice: Scalars['String'];
  limit?: Maybe<Scalars['Int']>;
  startingAfter?: Maybe<Scalars['String']>;
  v1InvoiceLinesInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetInvoicesUpcomingArgs = {
  automaticTax?: Maybe<AutomaticTax6Input>;
  coupon?: Maybe<Scalars['String']>;
  customer?: Maybe<Scalars['String']>;
  customerDetails?: Maybe<CustomerDetails2Input>;
  discounts?: Maybe<Scalars['JSON']>;
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  invoiceItems?: Maybe<Array<Maybe<InvoiceItemsListItemInput>>>;
  schedule?: Maybe<Scalars['String']>;
  subscription?: Maybe<Scalars['String']>;
  subscriptionBillingCycleAnchor?: Maybe<Scalars['JSON']>;
  subscriptionCancelAt?: Maybe<Scalars['JSON']>;
  subscriptionCancelAtPeriodEnd?: Maybe<Scalars['Boolean']>;
  subscriptionCancelNow?: Maybe<Scalars['Boolean']>;
  subscriptionDefaultTaxRates?: Maybe<Scalars['JSON']>;
  subscriptionItems?: Maybe<Array<Maybe<SubscriptionItems2ListItemInput>>>;
  subscriptionProrationBehavior?: Maybe<SubscriptionProrationBehavior>;
  subscriptionProrationDate?: Maybe<Scalars['Int']>;
  subscriptionStartDate?: Maybe<Scalars['Int']>;
  subscriptionTrialEnd?: Maybe<Scalars['JSON']>;
  subscriptionTrialFromPlan?: Maybe<Scalars['Boolean']>;
  v1InvoicesUpcomingInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetInvoicesUpcomingLinesArgs = {
  automaticTax?: Maybe<AutomaticTax6Input>;
  coupon?: Maybe<Scalars['String']>;
  customer?: Maybe<Scalars['String']>;
  customerDetails?: Maybe<CustomerDetails2Input>;
  discounts?: Maybe<Scalars['JSON']>;
  endingBefore?: Maybe<Scalars['String']>;
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  invoiceItems?: Maybe<Array<Maybe<InvoiceItemsListItemInput>>>;
  limit?: Maybe<Scalars['Int']>;
  schedule?: Maybe<Scalars['String']>;
  startingAfter?: Maybe<Scalars['String']>;
  subscription?: Maybe<Scalars['String']>;
  subscriptionBillingCycleAnchor?: Maybe<Scalars['JSON']>;
  subscriptionCancelAt?: Maybe<Scalars['JSON']>;
  subscriptionCancelAtPeriodEnd?: Maybe<Scalars['Boolean']>;
  subscriptionCancelNow?: Maybe<Scalars['Boolean']>;
  subscriptionDefaultTaxRates?: Maybe<Scalars['JSON']>;
  subscriptionItems?: Maybe<Array<Maybe<SubscriptionItems2ListItemInput>>>;
  subscriptionProrationBehavior?: Maybe<SubscriptionProrationBehavior>;
  subscriptionProrationDate?: Maybe<Scalars['Int']>;
  subscriptionStartDate?: Maybe<Scalars['Int']>;
  subscriptionTrialEnd?: Maybe<Scalars['JSON']>;
  subscriptionTrialFromPlan?: Maybe<Scalars['Boolean']>;
  v1InvoicesUpcomingLinesInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetIssuerFraudRecordsArgs = {
  charge?: Maybe<Scalars['String']>;
  endingBefore?: Maybe<Scalars['String']>;
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  limit?: Maybe<Scalars['Int']>;
  startingAfter?: Maybe<Scalars['String']>;
  v1IssuerFraudRecordsInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetIssuerFraudRecordsIssuerFraudRecordArgs = {
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  issuerFraudRecord: Scalars['String'];
  v1IssuerFraudRecordInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetIssuingAuthorizationsArgs = {
  card?: Maybe<Scalars['String']>;
  cardholder?: Maybe<Scalars['String']>;
  created?: Maybe<Scalars['JSON']>;
  endingBefore?: Maybe<Scalars['String']>;
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  limit?: Maybe<Scalars['Int']>;
  startingAfter?: Maybe<Scalars['String']>;
  status?: Maybe<Status57>;
  v1IssuingAuthorizationsInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetIssuingAuthorizationsAuthorizationArgs = {
  authorization: Scalars['String'];
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  v1IssuingAuthorizationInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetIssuingCardholdersArgs = {
  created?: Maybe<Scalars['JSON']>;
  email?: Maybe<Scalars['String']>;
  endingBefore?: Maybe<Scalars['String']>;
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  limit?: Maybe<Scalars['Int']>;
  phoneNumber?: Maybe<Scalars['String']>;
  startingAfter?: Maybe<Scalars['String']>;
  status?: Maybe<Status58>;
  type?: Maybe<Type69>;
  v1IssuingCardholdersInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetIssuingCardholdersCardholderArgs = {
  cardholder: Scalars['String'];
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  v1IssuingCardholderInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetIssuingCardsArgs = {
  cardholder?: Maybe<Scalars['String']>;
  created?: Maybe<Scalars['JSON']>;
  endingBefore?: Maybe<Scalars['String']>;
  expMonth?: Maybe<Scalars['Int']>;
  expYear?: Maybe<Scalars['Int']>;
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  last4?: Maybe<Scalars['String']>;
  limit?: Maybe<Scalars['Int']>;
  startingAfter?: Maybe<Scalars['String']>;
  status?: Maybe<Status59>;
  type?: Maybe<Type70>;
  v1IssuingCardsInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetIssuingCardsCardArgs = {
  card: Scalars['String'];
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  v1IssuingCardInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetIssuingDisputesArgs = {
  created?: Maybe<Scalars['JSON']>;
  endingBefore?: Maybe<Scalars['String']>;
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  limit?: Maybe<Scalars['Int']>;
  startingAfter?: Maybe<Scalars['String']>;
  status?: Maybe<Status60>;
  transaction?: Maybe<Scalars['String']>;
  v1IssuingDisputesInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetIssuingDisputesDisputeArgs = {
  dispute: Scalars['String'];
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  v1IssuingDisputeInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetIssuingSettlementsArgs = {
  created?: Maybe<Scalars['JSON']>;
  endingBefore?: Maybe<Scalars['String']>;
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  limit?: Maybe<Scalars['Int']>;
  startingAfter?: Maybe<Scalars['String']>;
  v1IssuingSettlementsInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetIssuingSettlementsSettlementArgs = {
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  settlement: Scalars['String'];
  v1IssuingSettlementInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetIssuingTransactionsArgs = {
  card?: Maybe<Scalars['String']>;
  cardholder?: Maybe<Scalars['String']>;
  created?: Maybe<Scalars['JSON']>;
  endingBefore?: Maybe<Scalars['String']>;
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  limit?: Maybe<Scalars['Int']>;
  startingAfter?: Maybe<Scalars['String']>;
  type?: Maybe<Type71>;
  v1IssuingTransactionsInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetIssuingTransactionsTransactionArgs = {
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  transaction: Scalars['String'];
  v1IssuingTransactionInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetMandatesMandateArgs = {
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  mandate: Scalars['String'];
  v1MandateInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetOrderReturnsArgs = {
  created?: Maybe<Scalars['JSON']>;
  endingBefore?: Maybe<Scalars['String']>;
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  limit?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['String']>;
  startingAfter?: Maybe<Scalars['String']>;
  v1OrderReturnsInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetOrderReturnsIdArgs = {
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  id: Scalars['String'];
  v1OrderReturnInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetOrdersArgs = {
  created?: Maybe<Scalars['JSON']>;
  customer?: Maybe<Scalars['String']>;
  endingBefore?: Maybe<Scalars['String']>;
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  ids?: Maybe<Array<Maybe<Scalars['String']>>>;
  limit?: Maybe<Scalars['Int']>;
  startingAfter?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
  statusTransitions?: Maybe<StatusTransitions2Input>;
  upstreamIds?: Maybe<Array<Maybe<Scalars['String']>>>;
  v1OrdersInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetOrdersIdArgs = {
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  id: Scalars['String'];
  v1OrderInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetPaymentIntentsArgs = {
  created?: Maybe<Scalars['JSON']>;
  customer?: Maybe<Scalars['String']>;
  endingBefore?: Maybe<Scalars['String']>;
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  limit?: Maybe<Scalars['Int']>;
  startingAfter?: Maybe<Scalars['String']>;
  v1PaymentIntentsInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetPaymentIntentsIntentArgs = {
  clientSecret?: Maybe<Scalars['String']>;
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  intent: Scalars['String'];
  v1PaymentIntentsInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetPaymentMethodsArgs = {
  customer: Scalars['String'];
  endingBefore?: Maybe<Scalars['String']>;
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  limit?: Maybe<Scalars['Int']>;
  startingAfter?: Maybe<Scalars['String']>;
  type: Type72;
  v1PaymentMethodsInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetPaymentMethodsPaymentMethodArgs = {
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  paymentMethod: Scalars['String'];
  v1PaymentMethodInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetPayoutsArgs = {
  arrivalDate?: Maybe<Scalars['JSON']>;
  created?: Maybe<Scalars['JSON']>;
  destination?: Maybe<Scalars['String']>;
  endingBefore?: Maybe<Scalars['String']>;
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  limit?: Maybe<Scalars['Int']>;
  startingAfter?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
  v1PayoutsInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetPayoutsPayoutArgs = {
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  payout: Scalars['String'];
  v1PayoutInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetPlansArgs = {
  active?: Maybe<Scalars['Boolean']>;
  created?: Maybe<Scalars['JSON']>;
  endingBefore?: Maybe<Scalars['String']>;
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  limit?: Maybe<Scalars['Int']>;
  product?: Maybe<Scalars['String']>;
  startingAfter?: Maybe<Scalars['String']>;
  v1PlansInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetPlansPlanArgs = {
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  plan: Scalars['String'];
  v1PlanInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetPricesArgs = {
  active?: Maybe<Scalars['Boolean']>;
  created?: Maybe<Scalars['JSON']>;
  currency?: Maybe<Scalars['String']>;
  endingBefore?: Maybe<Scalars['String']>;
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  limit?: Maybe<Scalars['Int']>;
  lookupKeys?: Maybe<Array<Maybe<Scalars['String']>>>;
  product?: Maybe<Scalars['String']>;
  recurring?: Maybe<Recurring4Input>;
  startingAfter?: Maybe<Scalars['String']>;
  type?: Maybe<Type73>;
  v1PricesInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetPricesPriceArgs = {
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  price: Scalars['String'];
  v1PriceInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetProductsArgs = {
  active?: Maybe<Scalars['Boolean']>;
  created?: Maybe<Scalars['JSON']>;
  endingBefore?: Maybe<Scalars['String']>;
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  ids?: Maybe<Array<Maybe<Scalars['String']>>>;
  limit?: Maybe<Scalars['Int']>;
  shippable?: Maybe<Scalars['Boolean']>;
  startingAfter?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  v1ProductsInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetProductsIdArgs = {
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  id: Scalars['String'];
  v1ProductInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetPromotionCodesArgs = {
  active?: Maybe<Scalars['Boolean']>;
  code?: Maybe<Scalars['String']>;
  coupon?: Maybe<Scalars['String']>;
  created?: Maybe<Scalars['JSON']>;
  customer?: Maybe<Scalars['String']>;
  endingBefore?: Maybe<Scalars['String']>;
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  limit?: Maybe<Scalars['Int']>;
  startingAfter?: Maybe<Scalars['String']>;
  v1PromotionCodesInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetPromotionCodesPromotionCodeArgs = {
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  promotionCode: Scalars['String'];
  v1PromotionCodeInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetQuotesArgs = {
  customer?: Maybe<Scalars['String']>;
  endingBefore?: Maybe<Scalars['String']>;
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  limit?: Maybe<Scalars['Int']>;
  startingAfter?: Maybe<Scalars['String']>;
  status?: Maybe<Status63>;
  v1QuotesInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetQuotesQuoteArgs = {
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  quote: Scalars['String'];
  v1QuoteInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetQuotesQuoteComputedUpfrontLineItemsArgs = {
  endingBefore?: Maybe<Scalars['String']>;
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  limit?: Maybe<Scalars['Int']>;
  quote: Scalars['String'];
  startingAfter?: Maybe<Scalars['String']>;
  v1QuoteComputedUpfrontLineItemsInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetQuotesQuoteLineItemsArgs = {
  endingBefore?: Maybe<Scalars['String']>;
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  limit?: Maybe<Scalars['Int']>;
  quote: Scalars['String'];
  startingAfter?: Maybe<Scalars['String']>;
  v1QuoteLineItemsInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetQuotesQuotePdfArgs = {
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  quote: Scalars['String'];
  v1QuotePdfInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetRadarEarlyFraudWarningsArgs = {
  charge?: Maybe<Scalars['String']>;
  endingBefore?: Maybe<Scalars['String']>;
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  limit?: Maybe<Scalars['Int']>;
  paymentIntent?: Maybe<Scalars['String']>;
  startingAfter?: Maybe<Scalars['String']>;
  v1RadarEarlyFraudWarningsInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetRadarEarlyFraudWarningsEarlyFraudWarningArgs = {
  earlyFraudWarning: Scalars['String'];
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  v1RadarEarlyFraudWarningInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetRadarValueListItemsArgs = {
  created?: Maybe<Scalars['JSON']>;
  endingBefore?: Maybe<Scalars['String']>;
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  limit?: Maybe<Scalars['Int']>;
  startingAfter?: Maybe<Scalars['String']>;
  v1RadarValueListItemsInput?: Maybe<Scalars['JSON']>;
  value?: Maybe<Scalars['String']>;
  valueList: Scalars['String'];
};


export type QuerygetRadarValueListItemsItemArgs = {
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  item: Scalars['String'];
  v1RadarValueListItemsInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetRadarValueListsArgs = {
  alias?: Maybe<Scalars['String']>;
  contains?: Maybe<Scalars['String']>;
  created?: Maybe<Scalars['JSON']>;
  endingBefore?: Maybe<Scalars['String']>;
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  limit?: Maybe<Scalars['Int']>;
  startingAfter?: Maybe<Scalars['String']>;
  v1RadarValueListsInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetRadarValueListsValueListArgs = {
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  v1RadarValueListInput?: Maybe<Scalars['JSON']>;
  valueList: Scalars['String'];
};


export type QuerygetRecipientsArgs = {
  created?: Maybe<Scalars['JSON']>;
  endingBefore?: Maybe<Scalars['String']>;
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  limit?: Maybe<Scalars['Int']>;
  startingAfter?: Maybe<Scalars['String']>;
  type?: Maybe<Type74>;
  v1RecipientsInput?: Maybe<Scalars['JSON']>;
  verified?: Maybe<Scalars['Boolean']>;
};


export type QuerygetRecipientsIdArgs = {
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  id: Scalars['String'];
  v1RecipientInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetRefundsArgs = {
  charge?: Maybe<Scalars['String']>;
  created?: Maybe<Scalars['JSON']>;
  endingBefore?: Maybe<Scalars['String']>;
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  limit?: Maybe<Scalars['Int']>;
  paymentIntent?: Maybe<Scalars['String']>;
  startingAfter?: Maybe<Scalars['String']>;
  v1RefundsInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetRefundsRefundArgs = {
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  refund: Scalars['String'];
  v1RefundInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetReportingReportRunsArgs = {
  created?: Maybe<Scalars['JSON']>;
  endingBefore?: Maybe<Scalars['String']>;
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  limit?: Maybe<Scalars['Int']>;
  startingAfter?: Maybe<Scalars['String']>;
  v1ReportingReportRunsInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetReportingReportRunsReportRunArgs = {
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  reportRun: Scalars['String'];
  v1ReportingReportRunInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetReportingReportTypesArgs = {
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  v1ReportingReportTypesInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetReportingReportTypesReportTypeArgs = {
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  reportType: Scalars['String'];
  v1ReportingReportTypeInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetReviewsArgs = {
  created?: Maybe<Scalars['JSON']>;
  endingBefore?: Maybe<Scalars['String']>;
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  limit?: Maybe<Scalars['Int']>;
  startingAfter?: Maybe<Scalars['String']>;
  v1ReviewsInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetReviewsReviewArgs = {
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  review: Scalars['String'];
  v1ReviewInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetSetupAttemptsArgs = {
  created?: Maybe<Scalars['JSON']>;
  endingBefore?: Maybe<Scalars['String']>;
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  limit?: Maybe<Scalars['Int']>;
  setupIntent: Scalars['String'];
  startingAfter?: Maybe<Scalars['String']>;
  v1SetupAttemptsInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetSetupIntentsArgs = {
  created?: Maybe<Scalars['JSON']>;
  customer?: Maybe<Scalars['String']>;
  endingBefore?: Maybe<Scalars['String']>;
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  limit?: Maybe<Scalars['Int']>;
  paymentMethod?: Maybe<Scalars['String']>;
  startingAfter?: Maybe<Scalars['String']>;
  v1SetupIntentsInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetSetupIntentsIntentArgs = {
  clientSecret?: Maybe<Scalars['String']>;
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  intent: Scalars['String'];
  v1SetupIntentsInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetSigmaScheduledQueryRunsArgs = {
  endingBefore?: Maybe<Scalars['String']>;
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  limit?: Maybe<Scalars['Int']>;
  startingAfter?: Maybe<Scalars['String']>;
  v1SigmaScheduledQueryRunsInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetSigmaScheduledQueryRunsScheduledQueryRunArgs = {
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  scheduledQueryRun: Scalars['String'];
  v1SigmaScheduledQueryRunInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetSkusArgs = {
  active?: Maybe<Scalars['Boolean']>;
  attributes?: Maybe<Scalars['JSON']>;
  endingBefore?: Maybe<Scalars['String']>;
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  ids?: Maybe<Array<Maybe<Scalars['String']>>>;
  inStock?: Maybe<Scalars['Boolean']>;
  limit?: Maybe<Scalars['Int']>;
  product?: Maybe<Scalars['String']>;
  startingAfter?: Maybe<Scalars['String']>;
  v1SkusInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetSkusIdArgs = {
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  id: Scalars['String'];
  v1SkusInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetSourcesSourceArgs = {
  clientSecret?: Maybe<Scalars['String']>;
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  source: Scalars['String'];
  v1SourceInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetSourcesSourceMandateNotificationsMandateNotificationArgs = {
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  mandateNotification: Scalars['String'];
  source: Scalars['String'];
  v1SourceMandateNotificationInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetSourcesSourceSourceTransactionsArgs = {
  endingBefore?: Maybe<Scalars['String']>;
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  limit?: Maybe<Scalars['Int']>;
  source: Scalars['String'];
  startingAfter?: Maybe<Scalars['String']>;
  v1SourceSourceTransactionsInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetSourcesSourceSourceTransactionsSourceTransactionArgs = {
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  source: Scalars['String'];
  sourceTransaction: Scalars['String'];
  v1SourceSourceTransactionInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetSubscriptionItemsArgs = {
  endingBefore?: Maybe<Scalars['String']>;
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  limit?: Maybe<Scalars['Int']>;
  startingAfter?: Maybe<Scalars['String']>;
  subscription: Scalars['String'];
  v1SubscriptionItemsInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetSubscriptionItemsItemArgs = {
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  item: Scalars['String'];
  v1SubscriptionItemsInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetSubscriptionItemsSubscriptionItemUsageRecordSummariesArgs = {
  endingBefore?: Maybe<Scalars['String']>;
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  limit?: Maybe<Scalars['Int']>;
  startingAfter?: Maybe<Scalars['String']>;
  subscriptionItem: Scalars['String'];
  v1SubscriptionItemUsageRecordSummariesInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetSubscriptionSchedulesArgs = {
  canceledAt?: Maybe<Scalars['JSON']>;
  completedAt?: Maybe<Scalars['JSON']>;
  created?: Maybe<Scalars['JSON']>;
  customer?: Maybe<Scalars['String']>;
  endingBefore?: Maybe<Scalars['String']>;
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  limit?: Maybe<Scalars['Int']>;
  releasedAt?: Maybe<Scalars['JSON']>;
  scheduled?: Maybe<Scalars['Boolean']>;
  startingAfter?: Maybe<Scalars['String']>;
  v1SubscriptionSchedulesInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetSubscriptionSchedulesScheduleArgs = {
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  schedule: Scalars['String'];
  v1SubscriptionSchedulesInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetSubscriptionsArgs = {
  collectionMethod?: Maybe<CollectionMethod9>;
  created?: Maybe<Scalars['JSON']>;
  currentPeriodEnd?: Maybe<Scalars['JSON']>;
  currentPeriodStart?: Maybe<Scalars['JSON']>;
  customer?: Maybe<Scalars['String']>;
  endingBefore?: Maybe<Scalars['String']>;
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  limit?: Maybe<Scalars['Int']>;
  price?: Maybe<Scalars['String']>;
  startingAfter?: Maybe<Scalars['String']>;
  status?: Maybe<Status64>;
  v1SubscriptionsInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetSubscriptionsSubscriptionExposedIdArgs = {
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  subscriptionExposedId: Scalars['String'];
  v1Subscription2Input?: Maybe<Scalars['JSON']>;
};


export type QuerygetTaxCodesArgs = {
  endingBefore?: Maybe<Scalars['String']>;
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  limit?: Maybe<Scalars['Int']>;
  startingAfter?: Maybe<Scalars['String']>;
  v1TaxCodesInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetTaxCodesIdArgs = {
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  id: Scalars['String'];
  v1TaxCodeInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetTaxRatesArgs = {
  active?: Maybe<Scalars['Boolean']>;
  created?: Maybe<Scalars['JSON']>;
  endingBefore?: Maybe<Scalars['String']>;
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  inclusive?: Maybe<Scalars['Boolean']>;
  limit?: Maybe<Scalars['Int']>;
  startingAfter?: Maybe<Scalars['String']>;
  v1TaxRatesInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetTaxRatesTaxRateArgs = {
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  taxRate: Scalars['String'];
  v1TaxRateInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetTerminalLocationsArgs = {
  endingBefore?: Maybe<Scalars['String']>;
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  limit?: Maybe<Scalars['Int']>;
  startingAfter?: Maybe<Scalars['String']>;
  v1TerminalLocationsInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetTerminalLocationsLocationArgs = {
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  location: Scalars['String'];
  v1TerminalLocationInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetTerminalReadersArgs = {
  deviceType?: Maybe<DeviceType2>;
  endingBefore?: Maybe<Scalars['String']>;
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  limit?: Maybe<Scalars['Int']>;
  location?: Maybe<Scalars['String']>;
  startingAfter?: Maybe<Scalars['String']>;
  status?: Maybe<Status65>;
  v1TerminalReadersInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetTerminalReadersReaderArgs = {
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  reader: Scalars['String'];
  v1TerminalReaderInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetTokensTokenArgs = {
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  token: Scalars['String'];
  v1TokenInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetTopupsArgs = {
  amount?: Maybe<Scalars['JSON']>;
  created?: Maybe<Scalars['JSON']>;
  endingBefore?: Maybe<Scalars['String']>;
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  limit?: Maybe<Scalars['Int']>;
  startingAfter?: Maybe<Scalars['String']>;
  status?: Maybe<Status66>;
  v1TopupsInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetTopupsTopupArgs = {
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  topup: Scalars['String'];
  v1TopupInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetTransfersArgs = {
  created?: Maybe<Scalars['JSON']>;
  destination?: Maybe<Scalars['String']>;
  endingBefore?: Maybe<Scalars['String']>;
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  limit?: Maybe<Scalars['Int']>;
  startingAfter?: Maybe<Scalars['String']>;
  transferGroup?: Maybe<Scalars['String']>;
  v1TransfersInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetTransfersIdReversalsArgs = {
  endingBefore?: Maybe<Scalars['String']>;
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  id: Scalars['String'];
  limit?: Maybe<Scalars['Int']>;
  startingAfter?: Maybe<Scalars['String']>;
  v1TransferReversalsInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetTransfersTransferArgs = {
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  transfer: Scalars['String'];
  v1TransferInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetTransfersTransferReversalsIdArgs = {
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  id: Scalars['String'];
  transfer: Scalars['String'];
  v1TransferReversalInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetWebhookEndpointsArgs = {
  endingBefore?: Maybe<Scalars['String']>;
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  limit?: Maybe<Scalars['Int']>;
  startingAfter?: Maybe<Scalars['String']>;
  v1WebhookEndpointsInput?: Maybe<Scalars['JSON']>;
};


export type QuerygetWebhookEndpointsWebhookEndpointArgs = {
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  v1WebhookEndpointInput?: Maybe<Scalars['JSON']>;
  webhookEndpoint: Scalars['String'];
};

export type ContinentFilterInput = {
  code?: Maybe<StringQueryOperatorInput>;
};

export type StringQueryOperatorInput = {
  eq?: Maybe<Scalars['String']>;
  ne?: Maybe<Scalars['String']>;
  in?: Maybe<Array<Maybe<Scalars['String']>>>;
  nin?: Maybe<Array<Maybe<Scalars['String']>>>;
  regex?: Maybe<Scalars['String']>;
  glob?: Maybe<Scalars['String']>;
};

export type Continent = {
  code: Scalars['ID'];
  name: Scalars['String'];
  countries: Array<Country>;
};

export type Country = {
  code: Scalars['ID'];
  name: Scalars['String'];
  native: Scalars['String'];
  phone: Scalars['String'];
  continent: Continent;
  capital?: Maybe<Scalars['String']>;
  currency?: Maybe<Scalars['String']>;
  languages: Array<Language>;
  emoji: Scalars['String'];
  emojiU: Scalars['String'];
  states: Array<State>;
};

export type Language = {
  code: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
  native?: Maybe<Scalars['String']>;
  rtl: Scalars['Boolean'];
};

export type State = {
  code?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  country: Country;
};

export type CountryFilterInput = {
  code?: Maybe<StringQueryOperatorInput>;
  currency?: Maybe<StringQueryOperatorInput>;
  continent?: Maybe<StringQueryOperatorInput>;
};

export type LanguageFilterInput = {
  code?: Maybe<StringQueryOperatorInput>;
};

export enum CacheControlScope {
  PUBLIC = 'PUBLIC',
  PRIVATE = 'PRIVATE'
}


export type Mutation = {
  /** Use this to add items to the cart. If the item already exists, the provided input will be merged and quantity will be increased. */
  addItem: Cart;
  /** Use this to set all the items at once in the cart. This will override any existing items. */
  setItems: Cart;
  /** Use this to update any existing items in the cart. If the item doesn't exist, it'll return an error. */
  updateItem: Cart;
  /** Use this to increase the item quantity of the provided item ID. If the item doesn't exist, it'll throw an error. */
  incrementItemQuantity: Cart;
  /** Use this to decrease the item quantity of the provided item ID. If the item doesn't exist, it'll throw an error. */
  decrementItemQuantity: Cart;
  /** Use this to remove any items from the cart. If it doesn't exist, it'll throw an error. */
  removeItem: Cart;
  /** Use this to empty the cart. If the cart doesn't exist, it'll throw an error. */
  emptyCart: Cart;
  /** Use this to update the cart currency or metadata. If the cart doesn't exist, it'll throw an error. */
  updateCart: Cart;
  /** Use this to delete a cart. If the cart doesn't exist, it'll throw an error. */
  deleteCart: DeletePayload;
  /** Use this to convert a cart to an unpaid order. */
  checkout?: Maybe<Order>;
  /**
   * <p>With <a href="/docs/connect">Connect</a>, you can delete accounts you manage.</p>
   *
   * <p>Accounts created using test-mode keys can be deleted at any time. Custom or Express accounts created using live-mode keys can only be deleted once all balances are zero.</p>
   *
   * <p>If you want to delete your own account, use the <a href="https://dashboard.stripe.com/account">account information tab in your account settings</a> instead.</p>
   *
   * Equivalent to DELETE /v1/account
   */
  deleteAccount?: Maybe<DeletedAccount>;
  /**
   * <p>Delete a specified external account for a given account.</p>
   *
   * Equivalent to DELETE /v1/account/bank_accounts/{id}
   */
  deleteAccountBankAccountsId?: Maybe<DeletedExternalAccount>;
  /**
   * <p>Delete a specified external account for a given account.</p>
   *
   * Equivalent to DELETE /v1/account/external_accounts/{id}
   */
  deleteAccountExternalAccountsId?: Maybe<DeletedExternalAccount>;
  /**
   * <p>Deletes an existing person’s relationship to the account’s legal entity. Any person with a relationship for an account can be deleted through the API, except if the person is the <code>account_opener</code>. If your integration is using the <code>executive</code> parameter, you cannot delete the only verified <code>executive</code> on file.</p>
   *
   * Equivalent to DELETE /v1/account/people/{person}
   */
  deleteAccountPeoplePerson?: Maybe<DeletedPerson>;
  /**
   * <p>Deletes an existing person’s relationship to the account’s legal entity. Any person with a relationship for an account can be deleted through the API, except if the person is the <code>account_opener</code>. If your integration is using the <code>executive</code> parameter, you cannot delete the only verified <code>executive</code> on file.</p>
   *
   * Equivalent to DELETE /v1/account/persons/{person}
   */
  deleteAccountPersonsPerson?: Maybe<DeletedPerson>;
  /**
   * <p>With <a href="/docs/connect">Connect</a>, you can delete accounts you manage.</p>
   *
   * <p>Accounts created using test-mode keys can be deleted at any time. Custom or Express accounts created using live-mode keys can only be deleted once all balances are zero.</p>
   *
   * <p>If you want to delete your own account, use the <a href="https://dashboard.stripe.com/account">account information tab in your account settings</a> instead.</p>
   *
   * Equivalent to DELETE /v1/accounts/{account}
   */
  deleteAccountsAccount?: Maybe<DeletedAccount>;
  /**
   * <p>Delete a specified external account for a given account.</p>
   *
   * Equivalent to DELETE /v1/accounts/{account}/bank_accounts/{id}
   */
  deleteAccountsAccountBankAccountsId?: Maybe<DeletedExternalAccount>;
  /**
   * <p>Delete a specified external account for a given account.</p>
   *
   * Equivalent to DELETE /v1/accounts/{account}/external_accounts/{id}
   */
  deleteAccountsAccountExternalAccountsId?: Maybe<DeletedExternalAccount>;
  /**
   * <p>Deletes an existing person’s relationship to the account’s legal entity. Any person with a relationship for an account can be deleted through the API, except if the person is the <code>account_opener</code>. If your integration is using the <code>executive</code> parameter, you cannot delete the only verified <code>executive</code> on file.</p>
   *
   * Equivalent to DELETE /v1/accounts/{account}/people/{person}
   */
  deleteAccountsAccountPeoplePerson?: Maybe<DeletedPerson>;
  /**
   * <p>Deletes an existing person’s relationship to the account’s legal entity. Any person with a relationship for an account can be deleted through the API, except if the person is the <code>account_opener</code>. If your integration is using the <code>executive</code> parameter, you cannot delete the only verified <code>executive</code> on file.</p>
   *
   * Equivalent to DELETE /v1/accounts/{account}/persons/{person}
   */
  deleteAccountsAccountPersonsPerson?: Maybe<DeletedPerson>;
  /**
   * <p>Delete an apple pay domain.</p>
   *
   * Equivalent to DELETE /v1/apple_pay/domains/{domain}
   */
  deleteApplePayDomainsDomain?: Maybe<DeletedApplePayDomain>;
  /**
   * <p>You can delete coupons via the <a href="https://dashboard.stripe.com/coupons">coupon management</a> page of the Stripe dashboard. However, deleting a coupon does not affect any customers who have already applied the coupon; it means that new customers can’t redeem the coupon. You can also delete coupons via the API.</p>
   *
   * Equivalent to DELETE /v1/coupons/{coupon}
   */
  deleteCouponsCoupon?: Maybe<DeletedCoupon>;
  /**
   * <p>Permanently deletes a customer. It cannot be undone. Also immediately cancels any active subscriptions on the customer.</p>
   *
   * Equivalent to DELETE /v1/customers/{customer}
   */
  deleteCustomersCustomer?: Maybe<DeletedCustomer>;
  /**
   * <p>Delete a specified source for a given customer.</p>
   *
   * Equivalent to DELETE /v1/customers/{customer}/bank_accounts/{id}
   */
  deleteCustomersCustomerBankAccountsId?: Maybe<Scalars['JSON']>;
  /**
   * <p>Delete a specified source for a given customer.</p>
   *
   * Equivalent to DELETE /v1/customers/{customer}/cards/{id}
   */
  deleteCustomersCustomerCardsId?: Maybe<Scalars['JSON']>;
  /**
   * <p>Removes the currently applied discount on a customer.</p>
   *
   * Equivalent to DELETE /v1/customers/{customer}/discount
   */
  deleteCustomersCustomerDiscount?: Maybe<DeletedDiscount>;
  /**
   * <p>Delete a specified source for a given customer.</p>
   *
   * Equivalent to DELETE /v1/customers/{customer}/sources/{id}
   */
  deleteCustomersCustomerSourcesId?: Maybe<Scalars['JSON']>;
  /**
   * <p>Cancels a customer’s subscription. If you set the <code>at_period_end</code> parameter to <code>true</code>, the subscription will remain active until the end of the period, at which point it will be canceled and not renewed. Otherwise, with the default <code>false</code> value, the subscription is terminated immediately. In either case, the customer will not be charged again for the subscription.</p>
   *
   * <p>Note, however, that any pending invoice items that you’ve created will still be charged for at the end of the period, unless manually <a href="#delete_invoiceitem">deleted</a>. If you’ve set the subscription to cancel at the end of the period, any pending prorations will also be left in place and collected at the end of the period. But if the subscription is set to cancel immediately, pending prorations will be removed.</p>
   *
   * <p>By default, upon subscription cancellation, Stripe will stop automatic collection of all finalized invoices for the customer. This is intended to prevent unexpected payment attempts after the customer has canceled a subscription. However, you can resume automatic collection of the invoices manually after subscription cancellation to have us proceed. Or, you could check for unpaid invoices before allowing the customer to cancel the subscription at all.</p>
   *
   * Equivalent to DELETE /v1/customers/{customer}/subscriptions/{subscription_exposed_id}
   */
  deleteCustomersCustomerSubscriptionsSubscriptionExposedId?: Maybe<Subscription5>;
  /**
   * <p>Removes the currently applied discount on a customer.</p>
   *
   * Equivalent to DELETE /v1/customers/{customer}/subscriptions/{subscription_exposed_id}/discount
   */
  deleteCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount?: Maybe<DeletedDiscount>;
  /**
   * <p>Deletes an existing <code>TaxID</code> object.</p>
   *
   * Equivalent to DELETE /v1/customers/{customer}/tax_ids/{id}
   */
  deleteCustomersCustomerTaxIdsId?: Maybe<DeletedTaxId>;
  /**
   * <p>Invalidates a short-lived API key for a given resource.</p>
   *
   * Equivalent to DELETE /v1/ephemeral_keys/{key}
   */
  deleteEphemeralKeysKey?: Maybe<EphemeralKey>;
  /**
   * <p>Deletes an invoice item, removing it from an invoice. Deleting invoice items is only possible when they’re not attached to invoices, or if it’s attached to a draft invoice.</p>
   *
   * Equivalent to DELETE /v1/invoiceitems/{invoiceitem}
   */
  deleteInvoiceitemsInvoiceitem?: Maybe<DeletedInvoiceitem>;
  /**
   * <p>Permanently deletes a one-off invoice draft. This cannot be undone. Attempts to delete invoices that are no longer in a draft state will fail; once an invoice has been finalized or if an invoice is for a subscription, it must be <a href="#void_invoice">voided</a>.</p>
   *
   * Equivalent to DELETE /v1/invoices/{invoice}
   */
  deleteInvoicesInvoice?: Maybe<DeletedInvoice>;
  /**
   * <p>Deleting plans means new subscribers can’t be added. Existing subscribers aren’t affected.</p>
   *
   * Equivalent to DELETE /v1/plans/{plan}
   */
  deletePlansPlan?: Maybe<DeletedPlan>;
  /**
   * <p>Delete a product. Deleting a product is only possible if it has no prices associated with it. Additionally, deleting a product with <code>type=good</code> is only possible if it has no SKUs associated with it.</p>
   *
   * Equivalent to DELETE /v1/products/{id}
   */
  deleteProductsId?: Maybe<DeletedProduct>;
  /**
   * <p>Deletes a <code>ValueListItem</code> object, removing it from its parent value list.</p>
   *
   * Equivalent to DELETE /v1/radar/value_list_items/{item}
   */
  deleteRadarValueListItemsItem?: Maybe<DeletedRadarValueListItem>;
  /**
   * <p>Deletes a <code>ValueList</code> object, also deleting any items contained within the value list. To be deleted, a value list must not be referenced in any rules.</p>
   *
   * Equivalent to DELETE /v1/radar/value_lists/{value_list}
   */
  deleteRadarValueListsValueList?: Maybe<DeletedRadarValueList>;
  /**
   * <p>Permanently deletes a recipient. It cannot be undone.</p>
   *
   * Equivalent to DELETE /v1/recipients/{id}
   */
  deleteRecipientsId?: Maybe<DeletedRecipient>;
  /**
   * <p>Delete a SKU. Deleting a SKU is only possible until it has been used in an order.</p>
   *
   * Equivalent to DELETE /v1/skus/{id}
   */
  deleteSkusId?: Maybe<DeletedSku>;
  /**
   * <p>Deletes an item from the subscription. Removing a subscription item from a subscription will not cancel the subscription.</p>
   *
   * Equivalent to DELETE /v1/subscription_items/{item}
   */
  deleteSubscriptionItemsItem?: Maybe<DeletedSubscriptionItem>;
  /**
   * <p>Cancels a customer’s subscription immediately. The customer will not be charged again for the subscription.</p>
   *
   * <p>Note, however, that any pending invoice items that you’ve created will still be charged for at the end of the period, unless manually <a href="#delete_invoiceitem">deleted</a>. If you’ve set the subscription to cancel at the end of the period, any pending prorations will also be left in place and collected at the end of the period. But if the subscription is set to cancel immediately, pending prorations will be removed.</p>
   *
   * <p>By default, upon subscription cancellation, Stripe will stop automatic collection of all finalized invoices for the customer. This is intended to prevent unexpected payment attempts after the customer has canceled a subscription. However, you can resume automatic collection of the invoices manually after subscription cancellation to have us proceed. Or, you could check for unpaid invoices before allowing the customer to cancel the subscription at all.</p>
   *
   * Equivalent to DELETE /v1/subscriptions/{subscription_exposed_id}
   */
  deleteSubscriptionsSubscriptionExposedId?: Maybe<Subscription5>;
  /**
   * <p>Removes the currently applied discount on a subscription.</p>
   *
   * Equivalent to DELETE /v1/subscriptions/{subscription_exposed_id}/discount
   */
  deleteSubscriptionsSubscriptionExposedIdDiscount?: Maybe<DeletedDiscount>;
  /**
   * <p>Deletes a <code>Location</code> object.</p>
   *
   * Equivalent to DELETE /v1/terminal/locations/{location}
   */
  deleteTerminalLocationsLocation?: Maybe<DeletedTerminalLocation>;
  /**
   * <p>Deletes a <code>Reader</code> object.</p>
   *
   * Equivalent to DELETE /v1/terminal/readers/{reader}
   */
  deleteTerminalReadersReader?: Maybe<DeletedTerminalReader>;
  /**
   * <p>You can also delete webhook endpoints via the <a href="https://dashboard.stripe.com/account/webhooks">webhook endpoint management</a> page of the Stripe dashboard.</p>
   *
   * Equivalent to DELETE /v1/webhook_endpoints/{webhook_endpoint}
   */
  deleteWebhookEndpointsWebhookEndpoint?: Maybe<DeletedWebhookEndpoint>;
  /**
   * <p>Initiate 3D Secure authentication.</p>
   *
   * Equivalent to POST /v1/3d_secure
   */
  post3dSecure?: Maybe<ThreeDSecure>;
  /**
   * <p>Updates a <a href="/docs/connect/accounts">connected account</a> by setting the values of the parameters passed. Any parameters not provided are left unchanged. Most parameters can be changed only for Custom accounts. (These are marked <strong>Custom Only</strong> below.) Parameters marked <strong>Custom and Express</strong> are not supported for Standard accounts.</p>
   *
   * <p>To update your own account, use the <a href="https://dashboard.stripe.com/account">Dashboard</a>. Refer to our <a href="/docs/connect/updating-accounts">Connect</a> documentation to learn more about updating accounts.</p>
   *
   * Equivalent to POST /v1/account
   */
  postAccount?: Maybe<Account3>;
  /**
   * <p>Create an external account for a given account.</p>
   *
   * Equivalent to POST /v1/account/bank_accounts
   */
  postAccountBankAccounts?: Maybe<Polymorphic>;
  /**
   * <p>Updates the metadata, account holder name, account holder type of a bank account belonging to a <a href="/docs/connect/custom-accounts">Custom account</a>, and optionally sets it as the default for its currency. Other bank account details are not editable by design.</p>
   *
   * <p>You can re-enable a disabled bank account by performing an update call without providing any arguments or changes.</p>
   *
   * Equivalent to POST /v1/account/bank_accounts/{id}
   */
  postAccountBankAccountsId?: Maybe<Polymorphic>;
  /**
   * <p>Updates an existing Account Capability.</p>
   *
   * Equivalent to POST /v1/account/capabilities/{capability}
   */
  postAccountCapabilitiesCapability?: Maybe<Capability>;
  /**
   * <p>Create an external account for a given account.</p>
   *
   * Equivalent to POST /v1/account/external_accounts
   */
  postAccountExternalAccounts?: Maybe<Polymorphic>;
  /**
   * <p>Updates the metadata, account holder name, account holder type of a bank account belonging to a <a href="/docs/connect/custom-accounts">Custom account</a>, and optionally sets it as the default for its currency. Other bank account details are not editable by design.</p>
   *
   * <p>You can re-enable a disabled bank account by performing an update call without providing any arguments or changes.</p>
   *
   * Equivalent to POST /v1/account/external_accounts/{id}
   */
  postAccountExternalAccountsId?: Maybe<Polymorphic>;
  /**
   * <p>Creates an AccountLink object that includes a single-use Stripe URL that the platform can redirect their user to in order to take them through the Connect Onboarding flow.</p>
   *
   * Equivalent to POST /v1/account_links
   */
  postAccountLinks?: Maybe<AccountLink>;
  /**
   * <p>Creates a single-use login link for an Express account to access their Stripe dashboard.</p>
   *
   * <p><strong>You may only create login links for <a href="/docs/connect/express-accounts">Express accounts</a> connected to your platform</strong>.</p>
   *
   * Equivalent to POST /v1/account/login_links
   */
  postAccountLoginLinks?: Maybe<LoginLink>;
  /**
   * <p>Creates a new person.</p>
   *
   * Equivalent to POST /v1/account/people
   */
  postAccountPeople?: Maybe<Person>;
  /**
   * <p>Updates an existing person.</p>
   *
   * Equivalent to POST /v1/account/people/{person}
   */
  postAccountPeoplePerson?: Maybe<Person>;
  /**
   * <p>Creates a new person.</p>
   *
   * Equivalent to POST /v1/account/persons
   */
  postAccountPersons?: Maybe<Person>;
  /**
   * <p>Updates an existing person.</p>
   *
   * Equivalent to POST /v1/account/persons/{person}
   */
  postAccountPersonsPerson?: Maybe<Person>;
  /**
   * <p>With <a href="/docs/connect">Connect</a>, you can create Stripe accounts for your users.
   * To do this, you’ll first need to <a href="https://dashboard.stripe.com/account/applications/settings">register your platform</a>.</p>
   *
   * Equivalent to POST /v1/accounts
   */
  postAccounts?: Maybe<Account3>;
  /**
   * <p>Updates a <a href="/docs/connect/accounts">connected account</a> by setting the values of the parameters passed. Any parameters not provided are left unchanged. Most parameters can be changed only for Custom accounts. (These are marked <strong>Custom Only</strong> below.) Parameters marked <strong>Custom and Express</strong> are not supported for Standard accounts.</p>
   *
   * <p>To update your own account, use the <a href="https://dashboard.stripe.com/account">Dashboard</a>. Refer to our <a href="/docs/connect/updating-accounts">Connect</a> documentation to learn more about updating accounts.</p>
   *
   * Equivalent to POST /v1/accounts/{account}
   */
  postAccountsAccount?: Maybe<Account3>;
  /**
   * <p>Create an external account for a given account.</p>
   *
   * Equivalent to POST /v1/accounts/{account}/bank_accounts
   */
  postAccountsAccountBankAccounts?: Maybe<Polymorphic>;
  /**
   * <p>Updates the metadata, account holder name, account holder type of a bank account belonging to a <a href="/docs/connect/custom-accounts">Custom account</a>, and optionally sets it as the default for its currency. Other bank account details are not editable by design.</p>
   *
   * <p>You can re-enable a disabled bank account by performing an update call without providing any arguments or changes.</p>
   *
   * Equivalent to POST /v1/accounts/{account}/bank_accounts/{id}
   */
  postAccountsAccountBankAccountsId?: Maybe<Polymorphic>;
  /**
   * <p>Updates an existing Account Capability.</p>
   *
   * Equivalent to POST /v1/accounts/{account}/capabilities/{capability}
   */
  postAccountsAccountCapabilitiesCapability?: Maybe<Capability>;
  /**
   * <p>Create an external account for a given account.</p>
   *
   * Equivalent to POST /v1/accounts/{account}/external_accounts
   */
  postAccountsAccountExternalAccounts?: Maybe<Polymorphic>;
  /**
   * <p>Updates the metadata, account holder name, account holder type of a bank account belonging to a <a href="/docs/connect/custom-accounts">Custom account</a>, and optionally sets it as the default for its currency. Other bank account details are not editable by design.</p>
   *
   * <p>You can re-enable a disabled bank account by performing an update call without providing any arguments or changes.</p>
   *
   * Equivalent to POST /v1/accounts/{account}/external_accounts/{id}
   */
  postAccountsAccountExternalAccountsId?: Maybe<Polymorphic>;
  /**
   * <p>Creates a single-use login link for an Express account to access their Stripe dashboard.</p>
   *
   * <p><strong>You may only create login links for <a href="/docs/connect/express-accounts">Express accounts</a> connected to your platform</strong>.</p>
   *
   * Equivalent to POST /v1/accounts/{account}/login_links
   */
  postAccountsAccountLoginLinks?: Maybe<LoginLink>;
  /**
   * <p>Creates a new person.</p>
   *
   * Equivalent to POST /v1/accounts/{account}/people
   */
  postAccountsAccountPeople?: Maybe<Person>;
  /**
   * <p>Updates an existing person.</p>
   *
   * Equivalent to POST /v1/accounts/{account}/people/{person}
   */
  postAccountsAccountPeoplePerson?: Maybe<Person>;
  /**
   * <p>Creates a new person.</p>
   *
   * Equivalent to POST /v1/accounts/{account}/persons
   */
  postAccountsAccountPersons?: Maybe<Person>;
  /**
   * <p>Updates an existing person.</p>
   *
   * Equivalent to POST /v1/accounts/{account}/persons/{person}
   */
  postAccountsAccountPersonsPerson?: Maybe<Person>;
  /**
   * <p>With <a href="/docs/connect">Connect</a>, you may flag accounts as suspicious.</p>
   *
   * <p>Test-mode Custom and Express accounts can be rejected at any time. Accounts created using live-mode keys may only be rejected once all balances are zero.</p>
   *
   * Equivalent to POST /v1/accounts/{account}/reject
   */
  postAccountsAccountReject?: Maybe<Account3>;
  /**
   * <p>Create an apple pay domain.</p>
   *
   * Equivalent to POST /v1/apple_pay/domains
   */
  postApplePayDomains?: Maybe<ApplePayDomain>;
  /**
   * <p>Updates the specified application fee refund by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
   *
   * <p>This request only accepts metadata as an argument.</p>
   *
   * Equivalent to POST /v1/application_fees/{fee}/refunds/{id}
   */
  postApplicationFeesFeeRefundsId?: Maybe<FeeRefund>;
  /** Equivalent to POST /v1/application_fees/{id}/refund */
  postApplicationFeesIdRefund?: Maybe<ApplicationFee>;
  /**
   * <p>Refunds an application fee that has previously been collected but not yet refunded.
   * Funds will be refunded to the Stripe account from which the fee was originally collected.</p>
   *
   * <p>You can optionally refund only part of an application fee.
   * You can do so multiple times, until the entire fee has been refunded.</p>
   *
   * <p>Once entirely refunded, an application fee can’t be refunded again.
   * This method will raise an error when called on an already-refunded application fee,
   * or when trying to refund more money than is left on an application fee.</p>
   *
   * Equivalent to POST /v1/application_fees/{id}/refunds
   */
  postApplicationFeesIdRefunds?: Maybe<FeeRefund>;
  /**
   * <p>Creates a configuration that describes the functionality and behavior of a PortalSession</p>
   *
   * Equivalent to POST /v1/billing_portal/configurations
   */
  postBillingPortalConfigurations?: Maybe<BillingPortalConfiguration>;
  /**
   * <p>Updates a configuration that describes the functionality of the customer portal.</p>
   *
   * Equivalent to POST /v1/billing_portal/configurations/{configuration}
   */
  postBillingPortalConfigurationsConfiguration?: Maybe<BillingPortalConfiguration>;
  /**
   * <p>Creates a session of the customer portal.</p>
   *
   * Equivalent to POST /v1/billing_portal/sessions
   */
  postBillingPortalSessions?: Maybe<BillingPortalSession>;
  /**
   * <p>To charge a credit card or other payment source, you create a <code>Charge</code> object. If your API key is in test mode, the supplied payment source (e.g., card) won’t actually be charged, although everything else will occur as if in live mode. (Stripe assumes that the charge would have completed successfully).</p>
   *
   * Equivalent to POST /v1/charges
   */
  postCharges?: Maybe<Charge2>;
  /**
   * <p>Updates the specified charge by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
   *
   * Equivalent to POST /v1/charges/{charge}
   */
  postChargesCharge?: Maybe<Charge2>;
  /**
   * <p>Capture the payment of an existing, uncaptured, charge. This is the second half of the two-step payment flow, where first you <a href="#create_charge">created a charge</a> with the capture option set to false.</p>
   *
   * <p>Uncaptured payments expire exactly seven days after they are created. If they are not captured by that point in time, they will be marked as refunded and will no longer be capturable.</p>
   *
   * Equivalent to POST /v1/charges/{charge}/capture
   */
  postChargesChargeCapture?: Maybe<Charge2>;
  /** Equivalent to POST /v1/charges/{charge}/dispute */
  postChargesChargeDispute?: Maybe<Dispute>;
  /** Equivalent to POST /v1/charges/{charge}/dispute/close */
  postChargesChargeDisputeClose?: Maybe<Dispute>;
  /**
   * <p>When you create a new refund, you must specify a Charge or a PaymentIntent object on which to create it.</p>
   *
   * <p>Creating a new refund will refund a charge that has previously been created but not yet refunded.
   * Funds will be refunded to the credit or debit card that was originally charged.</p>
   *
   * <p>You can optionally refund only part of a charge.
   * You can do so multiple times, until the entire charge has been refunded.</p>
   *
   * <p>Once entirely refunded, a charge can’t be refunded again.
   * This method will raise an error when called on an already-refunded charge,
   * or when trying to refund more money than is left on a charge.</p>
   *
   * Equivalent to POST /v1/charges/{charge}/refund
   */
  postChargesChargeRefund?: Maybe<Charge2>;
  /**
   * <p>Create a refund.</p>
   *
   * Equivalent to POST /v1/charges/{charge}/refunds
   */
  postChargesChargeRefunds?: Maybe<Refund>;
  /**
   * <p>Update a specified refund.</p>
   *
   * Equivalent to POST /v1/charges/{charge}/refunds/{refund}
   */
  postChargesChargeRefundsRefund?: Maybe<Refund>;
  /**
   * <p>Creates a Session object.</p>
   *
   * Equivalent to POST /v1/checkout/sessions
   */
  postCheckoutSessions?: Maybe<CheckoutSession>;
  /**
   * <p>You can create coupons easily via the <a href="https://dashboard.stripe.com/coupons">coupon management</a> page of the Stripe dashboard. Coupon creation is also accessible via the API if you need to create coupons on the fly.</p>
   *
   * <p>A coupon has either a <code>percent_off</code> or an <code>amount_off</code> and <code>currency</code>. If you set an <code>amount_off</code>, that amount will be subtracted from any invoice’s subtotal. For example, an invoice with a subtotal of <currency>100</currency> will have a final total of <currency>0</currency> if a coupon with an <code>amount_off</code> of <amount>200</amount> is applied to it and an invoice with a subtotal of <currency>300</currency> will have a final total of <currency>100</currency> if a coupon with an <code>amount_off</code> of <amount>200</amount> is applied to it.</p>
   *
   * Equivalent to POST /v1/coupons
   */
  postCoupons?: Maybe<Coupon>;
  /**
   * <p>Updates the metadata of a coupon. Other coupon details (currency, duration, amount_off) are, by design, not editable.</p>
   *
   * Equivalent to POST /v1/coupons/{coupon}
   */
  postCouponsCoupon?: Maybe<Coupon>;
  /**
   * <p>Issue a credit note to adjust the amount of a finalized invoice. For a <code>status=open</code> invoice, a credit note reduces
   * its <code>amount_due</code>. For a <code>status=paid</code> invoice, a credit note does not affect its <code>amount_due</code>. Instead, it can result
   * in any combination of the following:</p>
   *
   * <ul>
   * <li>Refund: create a new refund (using <code>refund_amount</code>) or link an existing refund (using <code>refund</code>).</li>
   * <li>Customer balance credit: credit the customer’s balance (using <code>credit_amount</code>) which will be automatically applied to their next invoice when it’s finalized.</li>
   * <li>Outside of Stripe credit: record the amount that is or will be credited outside of Stripe (using <code>out_of_band_amount</code>).</li>
   * </ul>
   *
   * <p>For post-payment credit notes the sum of the refund, credit and outside of Stripe amounts must equal the credit note total.</p>
   *
   * <p>You may issue multiple credit notes for an invoice. Each credit note will increment the invoice’s <code>pre_payment_credit_notes_amount</code>
   * or <code>post_payment_credit_notes_amount</code> depending on its <code>status</code> at the time of credit note creation.</p>
   *
   * Equivalent to POST /v1/credit_notes
   */
  postCreditNotes?: Maybe<CreditNote>;
  /**
   * <p>Updates an existing credit note.</p>
   *
   * Equivalent to POST /v1/credit_notes/{id}
   */
  postCreditNotesId?: Maybe<CreditNote>;
  /**
   * <p>Marks a credit note as void. Learn more about <a href="/docs/billing/invoices/credit-notes#voiding">voiding credit notes</a>.</p>
   *
   * Equivalent to POST /v1/credit_notes/{id}/void
   */
  postCreditNotesIdVoid?: Maybe<CreditNote>;
  /**
   * <p>Creates a new customer object.</p>
   *
   * Equivalent to POST /v1/customers
   */
  postCustomers?: Maybe<Customer13>;
  /**
   * <p>Updates the specified customer by setting the values of the parameters passed. Any parameters not provided will be left unchanged. For example, if you pass the <strong>source</strong> parameter, that becomes the customer’s active source (e.g., a card) to be used for all charges in the future. When you update a customer to a new valid card source by passing the <strong>source</strong> parameter: for each of the customer’s current subscriptions, if the subscription bills automatically and is in the <code>past_due</code> state, then the latest open invoice for the subscription with automatic collection enabled will be retried. This retry will not count as an automatic retry, and will not affect the next regularly scheduled payment for the invoice. Changing the <strong>default_source</strong> for a customer will not trigger this behavior.</p>
   *
   * <p>This request accepts mostly the same arguments as the customer creation call.</p>
   *
   * Equivalent to POST /v1/customers/{customer}
   */
  postCustomersCustomer?: Maybe<Customer13>;
  /**
   * <p>Creates an immutable transaction that updates the customer’s credit <a href="/docs/billing/customer/balance">balance</a>.</p>
   *
   * Equivalent to POST /v1/customers/{customer}/balance_transactions
   */
  postCustomersCustomerBalanceTransactions?: Maybe<CustomerBalanceTransaction2>;
  /**
   * <p>Most credit balance transaction fields are immutable, but you may update its <code>description</code> and <code>metadata</code>.</p>
   *
   * Equivalent to POST /v1/customers/{customer}/balance_transactions/{transaction}
   */
  postCustomersCustomerBalanceTransactionsTransaction?: Maybe<CustomerBalanceTransaction2>;
  /**
   * <p>When you create a new credit card, you must specify a customer or recipient on which to create it.</p>
   *
   * <p>If the card’s owner has no default card, then the new card will become the default.
   * However, if the owner already has a default, then it will not change.
   * To change the default, you should <a href="/docs/api#update_customer">update the customer</a> to have a new <code>default_source</code>.</p>
   *
   * Equivalent to POST /v1/customers/{customer}/bank_accounts
   */
  postCustomersCustomerBankAccounts?: Maybe<PaymentSource>;
  /**
   * <p>Update a specified source for a given customer.</p>
   *
   * Equivalent to POST /v1/customers/{customer}/bank_accounts/{id}
   */
  postCustomersCustomerBankAccountsId?: Maybe<V1CustomerBankAccount5>;
  /**
   * <p>Verify a specified bank account for a given customer.</p>
   *
   * Equivalent to POST /v1/customers/{customer}/bank_accounts/{id}/verify
   */
  postCustomersCustomerBankAccountsIdVerify?: Maybe<BankAccount7>;
  /**
   * <p>When you create a new credit card, you must specify a customer or recipient on which to create it.</p>
   *
   * <p>If the card’s owner has no default card, then the new card will become the default.
   * However, if the owner already has a default, then it will not change.
   * To change the default, you should <a href="/docs/api#update_customer">update the customer</a> to have a new <code>default_source</code>.</p>
   *
   * Equivalent to POST /v1/customers/{customer}/cards
   */
  postCustomersCustomerCards?: Maybe<PaymentSource>;
  /**
   * <p>Update a specified source for a given customer.</p>
   *
   * Equivalent to POST /v1/customers/{customer}/cards/{id}
   */
  postCustomersCustomerCardsId?: Maybe<V1CustomerCard5>;
  /**
   * <p>When you create a new credit card, you must specify a customer or recipient on which to create it.</p>
   *
   * <p>If the card’s owner has no default card, then the new card will become the default.
   * However, if the owner already has a default, then it will not change.
   * To change the default, you should <a href="/docs/api#update_customer">update the customer</a> to have a new <code>default_source</code>.</p>
   *
   * Equivalent to POST /v1/customers/{customer}/sources
   */
  postCustomersCustomerSources?: Maybe<PaymentSource>;
  /**
   * <p>Update a specified source for a given customer.</p>
   *
   * Equivalent to POST /v1/customers/{customer}/sources/{id}
   */
  postCustomersCustomerSourcesId?: Maybe<V1CustomerSource5>;
  /**
   * <p>Verify a specified bank account for a given customer.</p>
   *
   * Equivalent to POST /v1/customers/{customer}/sources/{id}/verify
   */
  postCustomersCustomerSourcesIdVerify?: Maybe<BankAccount7>;
  /**
   * <p>Creates a new subscription on an existing customer.</p>
   *
   * Equivalent to POST /v1/customers/{customer}/subscriptions
   */
  postCustomersCustomerSubscriptions?: Maybe<Subscription5>;
  /**
   * <p>Updates an existing subscription on a customer to match the specified parameters. When changing plans or quantities, we will optionally prorate the price we charge next month to make up for any price changes. To preview how the proration will be calculated, use the <a href="#upcoming_invoice">upcoming invoice</a> endpoint.</p>
   *
   * Equivalent to POST /v1/customers/{customer}/subscriptions/{subscription_exposed_id}
   */
  postCustomersCustomerSubscriptionsSubscriptionExposedId?: Maybe<Subscription5>;
  /**
   * <p>Creates a new <code>TaxID</code> object for a customer.</p>
   *
   * Equivalent to POST /v1/customers/{customer}/tax_ids
   */
  postCustomersCustomerTaxIds?: Maybe<TaxId3>;
  /**
   * <p>When you get a dispute, contacting your customer is always the best first step. If that doesn’t work, you can submit evidence to help us resolve the dispute in your favor. You can do this in your <a href="https://dashboard.stripe.com/disputes">dashboard</a>, but if you prefer, you can use the API to submit evidence programmatically.</p>
   *
   * <p>Depending on your dispute type, different evidence fields will give you a better chance of winning your dispute. To figure out which evidence fields to provide, see our <a href="/docs/disputes/categories">guide to dispute types</a>.</p>
   *
   * Equivalent to POST /v1/disputes/{dispute}
   */
  postDisputesDispute?: Maybe<Dispute>;
  /**
   * <p>Closing the dispute for a charge indicates that you do not have any evidence to submit and are essentially dismissing the dispute, acknowledging it as lost.</p>
   *
   * <p>The status of the dispute will change from <code>needs_response</code> to <code>lost</code>. <em>Closing a dispute is irreversible</em>.</p>
   *
   * Equivalent to POST /v1/disputes/{dispute}/close
   */
  postDisputesDisputeClose?: Maybe<Dispute>;
  /**
   * <p>Creates a short-lived API key for a given resource.</p>
   *
   * Equivalent to POST /v1/ephemeral_keys
   */
  postEphemeralKeys?: Maybe<EphemeralKey>;
  /**
   * <p>Creates a new file link object.</p>
   *
   * Equivalent to POST /v1/file_links
   */
  postFileLinks?: Maybe<FileLink>;
  /**
   * <p>Updates an existing file link object. Expired links can no longer be updated.</p>
   *
   * Equivalent to POST /v1/file_links/{link}
   */
  postFileLinksLink?: Maybe<FileLink>;
  /**
   * <p>To upload a file to Stripe, you’ll need to send a request of type <code>multipart/form-data</code>. The request should contain the file you would like to upload, as well as the parameters for creating a file.</p>
   *
   * <p>All of Stripe’s officially supported Client libraries should have support for sending <code>multipart/form-data</code>.</p>
   *
   * Equivalent to POST /v1/files
   */
  postFiles?: Maybe<File3>;
  /**
   * <p>Creates a VerificationSession object.</p>
   *
   * <p>After the VerificationSession is created, display a verification modal using the session <code>client_secret</code> or send your users to the session’s <code>url</code>.</p>
   *
   * <p>If your API key is in test mode, verification checks won’t actually process, though everything else will occur as if in live mode.</p>
   *
   * <p>Related guide: <a href="/docs/identity/verify-identity-documents">Verify your users’ identity documents</a>.</p>
   *
   * Equivalent to POST /v1/identity/verification_sessions
   */
  postIdentityVerificationSessions?: Maybe<IdentityVerificationSession>;
  /**
   * <p>Updates a VerificationSession object.</p>
   *
   * <p>When the session status is <code>requires_input</code>, you can use this method to update the
   * verification check and options.</p>
   *
   * Equivalent to POST /v1/identity/verification_sessions/{session}
   */
  postIdentityVerificationSessionsSession?: Maybe<IdentityVerificationSession>;
  /**
   * <p>A VerificationSession object can be canceled when it is in <code>requires_input</code> <a href="/docs/identity/how-sessions-work">status</a>.</p>
   *
   * <p>Once canceled, future submission attempts are disabled. This cannot be undone. <a href="/docs/identity/verification-sessions#cancel">Learn more</a>.</p>
   *
   * Equivalent to POST /v1/identity/verification_sessions/{session}/cancel
   */
  postIdentityVerificationSessionsSessionCancel?: Maybe<IdentityVerificationSession>;
  /**
   * <p>Redact a VerificationSession to remove all collected information from Stripe. This will redact
   * the VerificationSession and all objects related to it, including VerificationReports, Events,
   * request logs, etc.</p>
   *
   * <p>A VerificationSession object can be redacted when it is in <code>requires_input</code> or <code>verified</code>
   * <a href="/docs/identity/how-sessions-work">status</a>. Redacting a VerificationSession in <code>requires_action</code>
   * state will automatically cancel it.</p>
   *
   * <p>The redaction process may take up to four days. When the redaction process is in progress, the
   * VerificationSession’s <code>redaction.status</code> field will be set to <code>processing</code>; when the process is
   * finished, it will change to <code>redacted</code> and an <code>identity.verification_session.redacted</code> event
   * will be emitted.</p>
   *
   * <p>Redaction is irreversible. Redacted objects are still accessible in the Stripe API, but all the
   * fields that contain personal data will be replaced by the string <code>[redacted]</code> or a similar
   * placeholder. The <code>metadata</code> field will also be erased. Redacted objects cannot be updated or
   * used for any purpose.</p>
   *
   * <p><a href="/docs/identity/verification-sessions#redact">Learn more</a>.</p>
   *
   * Equivalent to POST /v1/identity/verification_sessions/{session}/redact
   */
  postIdentityVerificationSessionsSessionRedact?: Maybe<IdentityVerificationSession>;
  /**
   * <p>Creates an item to be added to a draft invoice (up to 250 items per invoice). If no invoice is specified, the item will be on the next invoice created for the customer specified.</p>
   *
   * Equivalent to POST /v1/invoiceitems
   */
  postInvoiceitems?: Maybe<Invoiceitem>;
  /**
   * <p>Updates the amount or description of an invoice item on an upcoming invoice. Updating an invoice item is only possible before the invoice it’s attached to is closed.</p>
   *
   * Equivalent to POST /v1/invoiceitems/{invoiceitem}
   */
  postInvoiceitemsInvoiceitem?: Maybe<Invoiceitem>;
  /**
   * <p>This endpoint creates a draft invoice for a given customer. The draft invoice created pulls in all pending invoice items on that customer, including prorations. The invoice remains a draft until you <a href="#finalize_invoice">finalize</a> the invoice, which allows you to <a href="#pay_invoice">pay</a> or <a href="#send_invoice">send</a> the invoice to your customers.</p>
   *
   * Equivalent to POST /v1/invoices
   */
  postInvoices?: Maybe<Invoice11>;
  /**
   * <p>Draft invoices are fully editable. Once an invoice is <a href="/docs/billing/invoices/workflow#finalized">finalized</a>,
   * monetary values, as well as <code>collection_method</code>, become uneditable.</p>
   *
   * <p>If you would like to stop the Stripe Billing engine from automatically finalizing, reattempting payments on,
   * sending reminders for, or <a href="/docs/billing/invoices/reconciliation">automatically reconciling</a> invoices, pass
   * <code>auto_advance=false</code>.</p>
   *
   * Equivalent to POST /v1/invoices/{invoice}
   */
  postInvoicesInvoice?: Maybe<Invoice11>;
  /**
   * <p>Stripe automatically finalizes drafts before sending and attempting payment on invoices. However, if you’d like to finalize a draft invoice manually, you can do so using this method.</p>
   *
   * Equivalent to POST /v1/invoices/{invoice}/finalize
   */
  postInvoicesInvoiceFinalize?: Maybe<Invoice11>;
  /**
   * <p>Marking an invoice as uncollectible is useful for keeping track of bad debts that can be written off for accounting purposes.</p>
   *
   * Equivalent to POST /v1/invoices/{invoice}/mark_uncollectible
   */
  postInvoicesInvoiceMarkUncollectible?: Maybe<Invoice11>;
  /**
   * <p>Stripe automatically creates and then attempts to collect payment on invoices for customers on subscriptions according to your <a href="https://dashboard.stripe.com/account/billing/automatic">subscriptions settings</a>. However, if you’d like to attempt payment on an invoice out of the normal collection schedule or for some other reason, you can do so.</p>
   *
   * Equivalent to POST /v1/invoices/{invoice}/pay
   */
  postInvoicesInvoicePay?: Maybe<Invoice11>;
  /**
   * <p>Stripe will automatically send invoices to customers according to your <a href="https://dashboard.stripe.com/account/billing/automatic">subscriptions settings</a>. However, if you’d like to manually send an invoice to your customer out of the normal schedule, you can do so. When sending invoices that have already been paid, there will be no reference to the payment in the email.</p>
   *
   * <p>Requests made in test-mode result in no emails being sent, despite sending an <code>invoice.sent</code> event.</p>
   *
   * Equivalent to POST /v1/invoices/{invoice}/send
   */
  postInvoicesInvoiceSend?: Maybe<Invoice11>;
  /**
   * <p>Mark a finalized invoice as void. This cannot be undone. Voiding an invoice is similar to <a href="#delete_invoice">deletion</a>, however it only applies to finalized invoices and maintains a papertrail where the invoice can still be found.</p>
   *
   * Equivalent to POST /v1/invoices/{invoice}/void
   */
  postInvoicesInvoiceVoid?: Maybe<Invoice11>;
  /**
   * <p>Updates the specified Issuing <code>Authorization</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
   *
   * Equivalent to POST /v1/issuing/authorizations/{authorization}
   */
  postIssuingAuthorizationsAuthorization?: Maybe<IssuingAuthorization>;
  /**
   * <p>Approves a pending Issuing <code>Authorization</code> object. This request should be made within the timeout window of the <a href="/docs/issuing/controls/real-time-authorizations">real-time authorization</a> flow.</p>
   *
   * Equivalent to POST /v1/issuing/authorizations/{authorization}/approve
   */
  postIssuingAuthorizationsAuthorizationApprove?: Maybe<IssuingAuthorization>;
  /**
   * <p>Declines a pending Issuing <code>Authorization</code> object. This request should be made within the timeout window of the <a href="/docs/issuing/controls/real-time-authorizations">real time authorization</a> flow.</p>
   *
   * Equivalent to POST /v1/issuing/authorizations/{authorization}/decline
   */
  postIssuingAuthorizationsAuthorizationDecline?: Maybe<IssuingAuthorization>;
  /**
   * <p>Creates a new Issuing <code>Cardholder</code> object that can be issued cards.</p>
   *
   * Equivalent to POST /v1/issuing/cardholders
   */
  postIssuingCardholders?: Maybe<IssuingCardholder>;
  /**
   * <p>Updates the specified Issuing <code>Cardholder</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
   *
   * Equivalent to POST /v1/issuing/cardholders/{cardholder}
   */
  postIssuingCardholdersCardholder?: Maybe<IssuingCardholder>;
  /**
   * <p>Creates an Issuing <code>Card</code> object.</p>
   *
   * Equivalent to POST /v1/issuing/cards
   */
  postIssuingCards?: Maybe<IssuingCard2>;
  /**
   * <p>Updates the specified Issuing <code>Card</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
   *
   * Equivalent to POST /v1/issuing/cards/{card}
   */
  postIssuingCardsCard?: Maybe<IssuingCard2>;
  /**
   * <p>Creates an Issuing <code>Dispute</code> object. Individual pieces of evidence within the <code>evidence</code> object are optional at this point. Stripe only validates that required evidence is present during submission. Refer to <a href="/docs/issuing/purchases/disputes#dispute-reasons-and-evidence">Dispute reasons and evidence</a> for more details about evidence requirements.</p>
   *
   * Equivalent to POST /v1/issuing/disputes
   */
  postIssuingDisputes?: Maybe<IssuingDispute>;
  /**
   * <p>Updates the specified Issuing <code>Dispute</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Properties on the <code>evidence</code> object can be unset by passing in an empty string.</p>
   *
   * Equivalent to POST /v1/issuing/disputes/{dispute}
   */
  postIssuingDisputesDispute?: Maybe<IssuingDispute>;
  /**
   * <p>Submits an Issuing <code>Dispute</code> to the card network. Stripe validates that all evidence fields required for the dispute’s reason are present. For more details, see <a href="/docs/issuing/purchases/disputes#dispute-reasons-and-evidence">Dispute reasons and evidence</a>.</p>
   *
   * Equivalent to POST /v1/issuing/disputes/{dispute}/submit
   */
  postIssuingDisputesDisputeSubmit?: Maybe<IssuingDispute>;
  /**
   * <p>Updates the specified Issuing <code>Settlement</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
   *
   * Equivalent to POST /v1/issuing/settlements/{settlement}
   */
  postIssuingSettlementsSettlement?: Maybe<IssuingSettlement>;
  /**
   * <p>Updates the specified Issuing <code>Transaction</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
   *
   * Equivalent to POST /v1/issuing/transactions/{transaction}
   */
  postIssuingTransactionsTransaction?: Maybe<IssuingTransaction>;
  /**
   * <p>Creates a new order object.</p>
   *
   * Equivalent to POST /v1/orders
   */
  postOrders?: Maybe<Order3>;
  /**
   * <p>Updates the specific order by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
   *
   * Equivalent to POST /v1/orders/{id}
   */
  postOrdersId?: Maybe<Order3>;
  /**
   * <p>Pay an order by providing a <code>source</code> to create a payment.</p>
   *
   * Equivalent to POST /v1/orders/{id}/pay
   */
  postOrdersIdPay?: Maybe<Order3>;
  /**
   * <p>Return all or part of an order. The order must have a status of <code>paid</code> or <code>fulfilled</code> before it can be returned. Once all items have been returned, the order will become <code>canceled</code> or <code>returned</code> depending on which status the order started in.</p>
   *
   * Equivalent to POST /v1/orders/{id}/returns
   */
  postOrdersIdReturns?: Maybe<OrderReturn>;
  /**
   * <p>Creates a PaymentIntent object.</p>
   *
   * <p>After the PaymentIntent is created, attach a payment method and <a href="/docs/api/payment_intents/confirm">confirm</a>
   * to continue the payment. You can read more about the different payment flows
   * available via the Payment Intents API <a href="/docs/payments/payment-intents">here</a>.</p>
   *
   * <p>When <code>confirm=true</code> is used during creation, it is equivalent to creating
   * and confirming the PaymentIntent in the same call. You may use any parameters
   * available in the <a href="/docs/api/payment_intents/confirm">confirm API</a> when <code>confirm=true</code>
   * is supplied.</p>
   *
   * Equivalent to POST /v1/payment_intents
   */
  postPaymentIntents?: Maybe<PaymentIntent7>;
  /**
   * <p>Updates properties on a PaymentIntent object without confirming.</p>
   *
   * <p>Depending on which properties you update, you may need to confirm the
   * PaymentIntent again. For example, updating the <code>payment_method</code> will
   * always require you to confirm the PaymentIntent again. If you prefer to
   * update and confirm at the same time, we recommend updating properties via
   * the <a href="/docs/api/payment_intents/confirm">confirm API</a> instead.</p>
   *
   * Equivalent to POST /v1/payment_intents/{intent}
   */
  postPaymentIntentsIntent?: Maybe<PaymentIntent7>;
  /**
   * <p>A PaymentIntent object can be canceled when it is in one of these statuses: <code>requires_payment_method</code>, <code>requires_capture</code>, <code>requires_confirmation</code>, or <code>requires_action</code>. </p>
   *
   * <p>Once canceled, no additional charges will be made by the PaymentIntent and any operations on the PaymentIntent will fail with an error. For PaymentIntents with <code>status=’requires_capture’</code>, the remaining <code>amount_capturable</code> will automatically be refunded.</p>
   *
   * Equivalent to POST /v1/payment_intents/{intent}/cancel
   */
  postPaymentIntentsIntentCancel?: Maybe<PaymentIntent7>;
  /**
   * <p>Capture the funds of an existing uncaptured PaymentIntent when its status is <code>requires_capture</code>.</p>
   *
   * <p>Uncaptured PaymentIntents will be canceled exactly seven days after they are created.</p>
   *
   * <p>Learn more about <a href="/docs/payments/capture-later">separate authorization and capture</a>.</p>
   *
   * Equivalent to POST /v1/payment_intents/{intent}/capture
   */
  postPaymentIntentsIntentCapture?: Maybe<PaymentIntent7>;
  /**
   * <p>Confirm that your customer intends to pay with current or provided
   * payment method. Upon confirmation, the PaymentIntent will attempt to initiate
   * a payment.</p>
   *
   * <p>If the selected payment method requires additional authentication steps, the
   * PaymentIntent will transition to the <code>requires_action</code> status and
   * suggest additional actions via <code>next_action</code>. If payment fails,
   * the PaymentIntent will transition to the <code>requires_payment_method</code> status. If
   * payment succeeds, the PaymentIntent will transition to the <code>succeeded</code>
   * status (or <code>requires_capture</code>, if <code>capture_method</code> is set to <code>manual</code>).</p>
   *
   * <p>If the <code>confirmation_method</code> is <code>automatic</code>, payment may be attempted
   * using our <a href="/docs/stripe-js/reference#stripe-handle-card-payment">client SDKs</a>
   * and the PaymentIntent’s <a href="#payment_intent_object-client_secret">client_secret</a>.
   * After <code>next_action</code>s are handled by the client, no additional
   * confirmation is required to complete the payment.</p>
   *
   * <p>If the <code>confirmation_method</code> is <code>manual</code>, all payment attempts must be
   * initiated using a secret key.
   * If any actions are required for the payment, the PaymentIntent will
   * return to the <code>requires_confirmation</code> state
   * after those actions are completed. Your server needs to then
   * explicitly re-confirm the PaymentIntent to initiate the next payment
   * attempt. Read the <a href="/docs/payments/payment-intents/web-manual">expanded documentation</a>
   * to learn more about manual confirmation.</p>
   *
   * Equivalent to POST /v1/payment_intents/{intent}/confirm
   */
  postPaymentIntentsIntentConfirm?: Maybe<PaymentIntent7>;
  /**
   * <p>Creates a PaymentMethod object. Read the <a href="/docs/stripe-js/reference#stripe-create-payment-method">Stripe.js reference</a> to learn how to create PaymentMethods via Stripe.js.</p>
   *
   * Equivalent to POST /v1/payment_methods
   */
  postPaymentMethods?: Maybe<PaymentMethod3>;
  /**
   * <p>Updates a PaymentMethod object. A PaymentMethod must be attached a customer to be updated.</p>
   *
   * Equivalent to POST /v1/payment_methods/{payment_method}
   */
  postPaymentMethodsPaymentMethod?: Maybe<PaymentMethod3>;
  /**
   * <p>Attaches a PaymentMethod object to a Customer.</p>
   *
   * <p>To attach a new PaymentMethod to a customer for future payments, we recommend you use a <a href="/docs/api/setup_intents">SetupIntent</a>
   * or a PaymentIntent with <a href="/docs/api/payment_intents/create#create_payment_intent-setup_future_usage">setup_future_usage</a>.
   * These approaches will perform any necessary steps to ensure that the PaymentMethod can be used in a future payment. Using the
   * <code>/v1/payment_methods/:id/attach</code> endpoint does not ensure that future payments can be made with the attached PaymentMethod.
   * See <a href="/docs/payments/payment-intents#future-usage">Optimizing cards for future payments</a> for more information about setting up future payments.</p>
   *
   * <p>To use this PaymentMethod as the default for invoice or subscription payments,
   * set <a href="/docs/api/customers/update#update_customer-invoice_settings-default_payment_method"><code>invoice_settings.default_payment_method</code></a>,
   * on the Customer to the PaymentMethod’s ID.</p>
   *
   * Equivalent to POST /v1/payment_methods/{payment_method}/attach
   */
  postPaymentMethodsPaymentMethodAttach?: Maybe<PaymentMethod3>;
  /**
   * <p>Detaches a PaymentMethod object from a Customer.</p>
   *
   * Equivalent to POST /v1/payment_methods/{payment_method}/detach
   */
  postPaymentMethodsPaymentMethodDetach?: Maybe<PaymentMethod3>;
  /**
   * <p>To send funds to your own bank account, you create a new payout object. Your <a href="#balance">Stripe balance</a> must be able to cover the payout amount, or you’ll receive an “Insufficient Funds” error.</p>
   *
   * <p>If your API key is in test mode, money won’t actually be sent, though everything else will occur as if in live mode.</p>
   *
   * <p>If you are creating a manual payout on a Stripe account that uses multiple payment source types, you’ll need to specify the source type balance that the payout should draw from. The <a href="#balance_object">balance object</a> details available and pending amounts by source type.</p>
   *
   * Equivalent to POST /v1/payouts
   */
  postPayouts?: Maybe<Payout>;
  /**
   * <p>Updates the specified payout by setting the values of the parameters passed. Any parameters not provided will be left unchanged. This request accepts only the metadata as arguments.</p>
   *
   * Equivalent to POST /v1/payouts/{payout}
   */
  postPayoutsPayout?: Maybe<Payout>;
  /**
   * <p>A previously created payout can be canceled if it has not yet been paid out. Funds will be refunded to your available balance. You may not cancel automatic Stripe payouts.</p>
   *
   * Equivalent to POST /v1/payouts/{payout}/cancel
   */
  postPayoutsPayoutCancel?: Maybe<Payout>;
  /**
   * <p>Reverses a payout by debiting the destination bank account. Only payouts for connected accounts to US bank accounts may be reversed at this time. If the payout is in the <code>pending</code> status, <code>/v1/payouts/:id/cancel</code> should be used instead.</p>
   *
   * <p>By requesting a reversal via <code>/v1/payouts/:id/reverse</code>, you confirm that the authorized signatory of the selected bank account has authorized the debit on the bank account and that no other authorization is required.</p>
   *
   * Equivalent to POST /v1/payouts/{payout}/reverse
   */
  postPayoutsPayoutReverse?: Maybe<Payout>;
  /**
   * <p>You can now model subscriptions more flexibly using the <a href="#prices">Prices API</a>. It replaces the Plans API and is backwards compatible to simplify your migration.</p>
   *
   * Equivalent to POST /v1/plans
   */
  postPlans?: Maybe<Plan4>;
  /**
   * <p>Updates the specified plan by setting the values of the parameters passed. Any parameters not provided are left unchanged. By design, you cannot change a plan’s ID, amount, currency, or billing cycle.</p>
   *
   * Equivalent to POST /v1/plans/{plan}
   */
  postPlansPlan?: Maybe<Plan4>;
  /**
   * <p>Creates a new price for an existing product. The price can be recurring or one-time.</p>
   *
   * Equivalent to POST /v1/prices
   */
  postPrices?: Maybe<Price3>;
  /**
   * <p>Updates the specified price by setting the values of the parameters passed. Any parameters not provided are left unchanged.</p>
   *
   * Equivalent to POST /v1/prices/{price}
   */
  postPricesPrice?: Maybe<Price3>;
  /**
   * <p>Creates a new product object.</p>
   *
   * Equivalent to POST /v1/products
   */
  postProducts?: Maybe<Product14>;
  /**
   * <p>Updates the specific product by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
   *
   * Equivalent to POST /v1/products/{id}
   */
  postProductsId?: Maybe<Product14>;
  /**
   * <p>A promotion code points to a coupon. You can optionally restrict the code to a specific customer, redemption limit, and expiration date.</p>
   *
   * Equivalent to POST /v1/promotion_codes
   */
  postPromotionCodes?: Maybe<PromotionCode11>;
  /**
   * <p>Updates the specified promotion code by setting the values of the parameters passed. Most fields are, by design, not editable.</p>
   *
   * Equivalent to POST /v1/promotion_codes/{promotion_code}
   */
  postPromotionCodesPromotionCode?: Maybe<PromotionCode11>;
  /**
   * <p>A quote models prices and services for a customer. Default options for <code>header</code>, <code>description</code>, <code>footer</code>, and <code>expires_at</code> can be set in the dashboard via the <a href="https://dashboard.stripe.com/settings/billing/quote">quote template</a>.</p>
   *
   * Equivalent to POST /v1/quotes
   */
  postQuotes?: Maybe<Quote2>;
  /**
   * <p>A quote models prices and services for a customer.</p>
   *
   * Equivalent to POST /v1/quotes/{quote}
   */
  postQuotesQuote?: Maybe<Quote2>;
  /**
   * <p>Accepts the specified quote.</p>
   *
   * Equivalent to POST /v1/quotes/{quote}/accept
   */
  postQuotesQuoteAccept?: Maybe<Quote2>;
  /**
   * <p>Cancels the quote.</p>
   *
   * Equivalent to POST /v1/quotes/{quote}/cancel
   */
  postQuotesQuoteCancel?: Maybe<Quote2>;
  /**
   * <p>Finalizes the quote.</p>
   *
   * Equivalent to POST /v1/quotes/{quote}/finalize
   */
  postQuotesQuoteFinalize?: Maybe<Quote2>;
  /**
   * <p>Creates a new <code>ValueListItem</code> object, which is added to the specified parent value list.</p>
   *
   * Equivalent to POST /v1/radar/value_list_items
   */
  postRadarValueListItems?: Maybe<RadarValueListItem>;
  /**
   * <p>Creates a new <code>ValueList</code> object, which can then be referenced in rules.</p>
   *
   * Equivalent to POST /v1/radar/value_lists
   */
  postRadarValueLists?: Maybe<RadarValueList>;
  /**
   * <p>Updates a <code>ValueList</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Note that <code>item_type</code> is immutable.</p>
   *
   * Equivalent to POST /v1/radar/value_lists/{value_list}
   */
  postRadarValueListsValueList?: Maybe<RadarValueList>;
  /**
   * <p>Creates a new <code>Recipient</code> object and verifies the recipient’s identity.
   * Also verifies the recipient’s bank account information or debit card, if either is provided.</p>
   *
   * Equivalent to POST /v1/recipients
   */
  postRecipients?: Maybe<Recipient10>;
  /**
   * <p>Updates the specified recipient by setting the values of the parameters passed.
   * Any parameters not provided will be left unchanged.</p>
   *
   * <p>If you update the name or tax ID, the identity verification will automatically be rerun.
   * If you update the bank account, the bank account validation will automatically be rerun.</p>
   *
   * Equivalent to POST /v1/recipients/{id}
   */
  postRecipientsId?: Maybe<Recipient10>;
  /**
   * <p>Create a refund.</p>
   *
   * Equivalent to POST /v1/refunds
   */
  postRefunds?: Maybe<Refund>;
  /**
   * <p>Updates the specified refund by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
   *
   * <p>This request only accepts <code>metadata</code> as an argument.</p>
   *
   * Equivalent to POST /v1/refunds/{refund}
   */
  postRefundsRefund?: Maybe<Refund>;
  /**
   * <p>Creates a new object and begin running the report. (Certain report types require a <a href="https://stripe.com/docs/keys#test-live-modes">live-mode API key</a>.)</p>
   *
   * Equivalent to POST /v1/reporting/report_runs
   */
  postReportingReportRuns?: Maybe<ReportingReportRun>;
  /**
   * <p>Approves a <code>Review</code> object, closing it and removing it from the list of reviews.</p>
   *
   * Equivalent to POST /v1/reviews/{review}/approve
   */
  postReviewsReviewApprove?: Maybe<Review3>;
  /**
   * <p>Creates a SetupIntent object.</p>
   *
   * <p>After the SetupIntent is created, attach a payment method and <a href="/docs/api/setup_intents/confirm">confirm</a>
   * to collect any required permissions to charge the payment method later.</p>
   *
   * Equivalent to POST /v1/setup_intents
   */
  postSetupIntents?: Maybe<SetupIntent2>;
  /**
   * <p>Updates a SetupIntent object.</p>
   *
   * Equivalent to POST /v1/setup_intents/{intent}
   */
  postSetupIntentsIntent?: Maybe<SetupIntent2>;
  /**
   * <p>A SetupIntent object can be canceled when it is in one of these statuses: <code>requires_payment_method</code>, <code>requires_confirmation</code>, or <code>requires_action</code>. </p>
   *
   * <p>Once canceled, setup is abandoned and any operations on the SetupIntent will fail with an error.</p>
   *
   * Equivalent to POST /v1/setup_intents/{intent}/cancel
   */
  postSetupIntentsIntentCancel?: Maybe<SetupIntent2>;
  /**
   * <p>Confirm that your customer intends to set up the current or
   * provided payment method. For example, you would confirm a SetupIntent
   * when a customer hits the “Save” button on a payment method management
   * page on your website.</p>
   *
   * <p>If the selected payment method does not require any additional
   * steps from the customer, the SetupIntent will transition to the
   * <code>succeeded</code> status.</p>
   *
   * <p>Otherwise, it will transition to the <code>requires_action</code> status and
   * suggest additional actions via <code>next_action</code>. If setup fails,
   * the SetupIntent will transition to the
   * <code>requires_payment_method</code> status.</p>
   *
   * Equivalent to POST /v1/setup_intents/{intent}/confirm
   */
  postSetupIntentsIntentConfirm?: Maybe<SetupIntent2>;
  /**
   * <p>Creates a new SKU associated with a product.</p>
   *
   * Equivalent to POST /v1/skus
   */
  postSkus?: Maybe<Sku>;
  /**
   * <p>Updates the specific SKU by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
   *
   * <p>Note that a SKU’s <code>attributes</code> are not editable. Instead, you would need to deactivate the existing SKU and create a new one with the new attribute values.</p>
   *
   * Equivalent to POST /v1/skus/{id}
   */
  postSkusId?: Maybe<Sku>;
  /**
   * <p>Creates a new source object.</p>
   *
   * Equivalent to POST /v1/sources
   */
  postSources?: Maybe<Source12>;
  /**
   * <p>Updates the specified source by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
   *
   * <p>This request accepts the <code>metadata</code> and <code>owner</code> as arguments. It is also possible to update type specific information for selected payment methods. Please refer to our <a href="/docs/sources">payment method guides</a> for more detail.</p>
   *
   * Equivalent to POST /v1/sources/{source}
   */
  postSourcesSource?: Maybe<Source12>;
  /**
   * <p>Verify a given source.</p>
   *
   * Equivalent to POST /v1/sources/{source}/verify
   */
  postSourcesSourceVerify?: Maybe<Source12>;
  /**
   * <p>Adds a new item to an existing subscription. No existing items will be changed or replaced.</p>
   *
   * Equivalent to POST /v1/subscription_items
   */
  postSubscriptionItems?: Maybe<SubscriptionItem>;
  /**
   * <p>Updates the plan or quantity of an item on a current subscription.</p>
   *
   * Equivalent to POST /v1/subscription_items/{item}
   */
  postSubscriptionItemsItem?: Maybe<SubscriptionItem>;
  /**
   * <p>Creates a usage record for a specified subscription item and date, and fills it with a quantity.</p>
   *
   * <p>Usage records provide <code>quantity</code> information that Stripe uses to track how much a customer is using your service. With usage information and the pricing model set up by the <a href="https://stripe.com/docs/billing/subscriptions/metered-billing">metered billing</a> plan, Stripe helps you send accurate invoices to your customers.</p>
   *
   * <p>The default calculation for usage is to add up all the <code>quantity</code> values of the usage records within a billing period. You can change this default behavior with the billing plan’s <code>aggregate_usage</code> <a href="/docs/api/plans/create#create_plan-aggregate_usage">parameter</a>. When there is more than one usage record with the same timestamp, Stripe adds the <code>quantity</code> values together. In most cases, this is the desired resolution, however, you can change this behavior with the <code>action</code> parameter.</p>
   *
   * <p>The default pricing model for metered billing is <a href="/docs/api/plans/object#plan_object-billing_scheme">per-unit pricing</a>. For finer granularity, you can configure metered billing to have a <a href="https://stripe.com/docs/billing/subscriptions/tiers">tiered pricing</a> model.</p>
   *
   * Equivalent to POST /v1/subscription_items/{subscription_item}/usage_records
   */
  postSubscriptionItemsSubscriptionItemUsageRecords?: Maybe<UsageRecord>;
  /**
   * <p>Creates a new subscription schedule object. Each customer can have up to 500 active or scheduled subscriptions.</p>
   *
   * Equivalent to POST /v1/subscription_schedules
   */
  postSubscriptionSchedules?: Maybe<SubscriptionSchedule2>;
  /**
   * <p>Updates an existing subscription schedule.</p>
   *
   * Equivalent to POST /v1/subscription_schedules/{schedule}
   */
  postSubscriptionSchedulesSchedule?: Maybe<SubscriptionSchedule2>;
  /**
   * <p>Cancels a subscription schedule and its associated subscription immediately (if the subscription schedule has an active subscription). A subscription schedule can only be canceled if its status is <code>not_started</code> or <code>active</code>.</p>
   *
   * Equivalent to POST /v1/subscription_schedules/{schedule}/cancel
   */
  postSubscriptionSchedulesScheduleCancel?: Maybe<SubscriptionSchedule2>;
  /**
   * <p>Releases the subscription schedule immediately, which will stop scheduling of its phases, but leave any existing subscription in place. A schedule can only be released if its status is <code>not_started</code> or <code>active</code>. If the subscription schedule is currently associated with a subscription, releasing it will remove its <code>subscription</code> property and set the subscription’s ID to the <code>released_subscription</code> property.</p>
   *
   * Equivalent to POST /v1/subscription_schedules/{schedule}/release
   */
  postSubscriptionSchedulesScheduleRelease?: Maybe<SubscriptionSchedule2>;
  /**
   * <p>Creates a new subscription on an existing customer. Each customer can have up to 500 active or scheduled subscriptions.</p>
   *
   * Equivalent to POST /v1/subscriptions
   */
  postSubscriptions?: Maybe<Subscription5>;
  /**
   * <p>Updates an existing subscription on a customer to match the specified parameters. When changing plans or quantities, we will optionally prorate the price we charge next month to make up for any price changes. To preview how the proration will be calculated, use the <a href="#upcoming_invoice">upcoming invoice</a> endpoint.</p>
   *
   * Equivalent to POST /v1/subscriptions/{subscription_exposed_id}
   */
  postSubscriptionsSubscriptionExposedId?: Maybe<Subscription5>;
  /**
   * <p>Creates a new tax rate.</p>
   *
   * Equivalent to POST /v1/tax_rates
   */
  postTaxRates?: Maybe<TaxRate>;
  /**
   * <p>Updates an existing tax rate.</p>
   *
   * Equivalent to POST /v1/tax_rates/{tax_rate}
   */
  postTaxRatesTaxRate?: Maybe<TaxRate>;
  /**
   * <p>To connect to a reader the Stripe Terminal SDK needs to retrieve a short-lived connection token from Stripe, proxied through your server. On your backend, add an endpoint that creates and returns a connection token.</p>
   *
   * Equivalent to POST /v1/terminal/connection_tokens
   */
  postTerminalConnectionTokens?: Maybe<TerminalConnectionToken>;
  /**
   * <p>Creates a new <code>Location</code> object.</p>
   *
   * Equivalent to POST /v1/terminal/locations
   */
  postTerminalLocations?: Maybe<TerminalLocation>;
  /**
   * <p>Updates a <code>Location</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
   *
   * Equivalent to POST /v1/terminal/locations/{location}
   */
  postTerminalLocationsLocation?: Maybe<TerminalLocation>;
  /**
   * <p>Creates a new <code>Reader</code> object.</p>
   *
   * Equivalent to POST /v1/terminal/readers
   */
  postTerminalReaders?: Maybe<TerminalReader>;
  /**
   * <p>Updates a <code>Reader</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
   *
   * Equivalent to POST /v1/terminal/readers/{reader}
   */
  postTerminalReadersReader?: Maybe<TerminalReader>;
  /**
   * <p>Creates a single-use token that represents a bank account’s details.
   * This token can be used with any API method in place of a bank account dictionary. This token can be used only once, by attaching it to a <a href="#accounts">Custom account</a>.</p>
   *
   * Equivalent to POST /v1/tokens
   */
  postTokens?: Maybe<Token3>;
  /**
   * <p>Top up the balance of an account</p>
   *
   * Equivalent to POST /v1/topups
   */
  postTopups?: Maybe<Topup>;
  /**
   * <p>Updates the metadata of a top-up. Other top-up details are not editable by design.</p>
   *
   * Equivalent to POST /v1/topups/{topup}
   */
  postTopupsTopup?: Maybe<Topup>;
  /**
   * <p>Cancels a top-up. Only pending top-ups can be canceled.</p>
   *
   * Equivalent to POST /v1/topups/{topup}/cancel
   */
  postTopupsTopupCancel?: Maybe<Topup>;
  /**
   * <p>To send funds from your Stripe account to a connected account, you create a new transfer object. Your <a href="#balance">Stripe balance</a> must be able to cover the transfer amount, or you’ll receive an “Insufficient Funds” error.</p>
   *
   * Equivalent to POST /v1/transfers
   */
  postTransfers?: Maybe<Transfer2>;
  /**
   * <p>When you create a new reversal, you must specify a transfer to create it on.</p>
   *
   * <p>When reversing transfers, you can optionally reverse part of the transfer. You can do so as many times as you wish until the entire transfer has been reversed.</p>
   *
   * <p>Once entirely reversed, a transfer can’t be reversed again. This method will return an error when called on an already-reversed transfer, or when trying to reverse more money than is left on a transfer.</p>
   *
   * Equivalent to POST /v1/transfers/{id}/reversals
   */
  postTransfersIdReversals?: Maybe<TransferReversal2>;
  /**
   * <p>Updates the specified transfer by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
   *
   * <p>This request accepts only metadata as an argument.</p>
   *
   * Equivalent to POST /v1/transfers/{transfer}
   */
  postTransfersTransfer?: Maybe<Transfer2>;
  /**
   * <p>Updates the specified reversal by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
   *
   * <p>This request only accepts metadata and description as arguments.</p>
   *
   * Equivalent to POST /v1/transfers/{transfer}/reversals/{id}
   */
  postTransfersTransferReversalsId?: Maybe<TransferReversal2>;
  /**
   * <p>A webhook endpoint must have a <code>url</code> and a list of <code>enabled_events</code>. You may optionally specify the Boolean <code>connect</code> parameter. If set to true, then a Connect webhook endpoint that notifies the specified <code>url</code> about events from all connected accounts is created; otherwise an account webhook endpoint that notifies the specified <code>url</code> only about events from your account is created. You can also create webhook endpoints in the <a href="https://dashboard.stripe.com/account/webhooks">webhooks settings</a> section of the Dashboard.</p>
   *
   * Equivalent to POST /v1/webhook_endpoints
   */
  postWebhookEndpoints?: Maybe<WebhookEndpoint>;
  /**
   * <p>Updates the webhook endpoint. You may edit the <code>url</code>, the list of <code>enabled_events</code>, and the status of your endpoint.</p>
   *
   * Equivalent to POST /v1/webhook_endpoints/{webhook_endpoint}
   */
  postWebhookEndpointsWebhookEndpoint?: Maybe<WebhookEndpoint>;
};


export type MutationaddItemArgs = {
  input: AddToCartInput;
};


export type MutationsetItemsArgs = {
  input: SetCartItemsInput;
};


export type MutationupdateItemArgs = {
  input: UpdateCartItemInput;
};


export type MutationincrementItemQuantityArgs = {
  input: UpdateItemQuantityInput;
};


export type MutationdecrementItemQuantityArgs = {
  input: UpdateItemQuantityInput;
};


export type MutationremoveItemArgs = {
  input: RemoveCartItemInput;
};


export type MutationemptyCartArgs = {
  input: EmptyCartInput;
};


export type MutationupdateCartArgs = {
  input: UpdateCartInput;
};


export type MutationdeleteCartArgs = {
  input: DeleteCartInput;
};


export type MutationcheckoutArgs = {
  input: CheckoutInput;
};


export type MutationdeleteAccountArgs = {
  v1AccountInput?: Maybe<V1AccountInput>;
};


export type MutationdeleteAccountBankAccountsIdArgs = {
  id: Scalars['String'];
  v1AccountBankAccountInput?: Maybe<Scalars['JSON']>;
};


export type MutationdeleteAccountExternalAccountsIdArgs = {
  id: Scalars['String'];
  v1AccountExternalAccountInput?: Maybe<Scalars['JSON']>;
};


export type MutationdeleteAccountPeoplePersonArgs = {
  person: Scalars['String'];
  v1AccountPersonInput?: Maybe<Scalars['JSON']>;
};


export type MutationdeleteAccountPersonsPersonArgs = {
  person: Scalars['String'];
  v1AccountPersonInput?: Maybe<Scalars['JSON']>;
};


export type MutationdeleteAccountsAccountArgs = {
  account: Scalars['String'];
  v1Account2Input?: Maybe<Scalars['JSON']>;
};


export type MutationdeleteAccountsAccountBankAccountsIdArgs = {
  account: Scalars['String'];
  id: Scalars['String'];
  v1AccountBankAccountInput?: Maybe<Scalars['JSON']>;
};


export type MutationdeleteAccountsAccountExternalAccountsIdArgs = {
  account: Scalars['String'];
  id: Scalars['String'];
  v1AccountExternalAccountInput?: Maybe<Scalars['JSON']>;
};


export type MutationdeleteAccountsAccountPeoplePersonArgs = {
  account: Scalars['String'];
  person: Scalars['String'];
  v1AccountPersonInput?: Maybe<Scalars['JSON']>;
};


export type MutationdeleteAccountsAccountPersonsPersonArgs = {
  account: Scalars['String'];
  person: Scalars['String'];
  v1AccountPersonInput?: Maybe<Scalars['JSON']>;
};


export type MutationdeleteApplePayDomainsDomainArgs = {
  domain: Scalars['String'];
  v1ApplePayDomainInput?: Maybe<Scalars['JSON']>;
};


export type MutationdeleteCouponsCouponArgs = {
  coupon: Scalars['String'];
  v1CouponInput?: Maybe<Scalars['JSON']>;
};


export type MutationdeleteCustomersCustomerArgs = {
  customer: Scalars['String'];
  v1CustomerInput?: Maybe<Scalars['JSON']>;
};


export type MutationdeleteCustomersCustomerBankAccountsIdArgs = {
  customer: Scalars['String'];
  id: Scalars['String'];
  v1CustomerBankAccountInput?: Maybe<V1CustomerBankAccountInput>;
};


export type MutationdeleteCustomersCustomerCardsIdArgs = {
  customer: Scalars['String'];
  id: Scalars['String'];
  v1CustomerCardInput?: Maybe<V1CustomerCardInput>;
};


export type MutationdeleteCustomersCustomerDiscountArgs = {
  customer: Scalars['String'];
  v1CustomerDiscountInput?: Maybe<Scalars['JSON']>;
};


export type MutationdeleteCustomersCustomerSourcesIdArgs = {
  customer: Scalars['String'];
  id: Scalars['String'];
  v1CustomerSourceInput?: Maybe<V1CustomerSourceInput>;
};


export type MutationdeleteCustomersCustomerSubscriptionsSubscriptionExposedIdArgs = {
  customer: Scalars['String'];
  subscriptionExposedId: Scalars['String'];
  v1CustomerSubscriptionInput?: Maybe<V1CustomerSubscriptionInput>;
};


export type MutationdeleteCustomersCustomerSubscriptionsSubscriptionExposedIdDiscountArgs = {
  customer: Scalars['String'];
  subscriptionExposedId: Scalars['String'];
  v1CustomerSubscriptionDiscountInput?: Maybe<Scalars['JSON']>;
};


export type MutationdeleteCustomersCustomerTaxIdsIdArgs = {
  customer: Scalars['String'];
  id: Scalars['String'];
  v1CustomerTaxIdInput?: Maybe<Scalars['JSON']>;
};


export type MutationdeleteEphemeralKeysKeyArgs = {
  key: Scalars['String'];
  v1EphemeralKeyInput?: Maybe<V1EphemeralKeyInput>;
};


export type MutationdeleteInvoiceitemsInvoiceitemArgs = {
  invoiceitem: Scalars['String'];
  v1InvoiceitemInput?: Maybe<Scalars['JSON']>;
};


export type MutationdeleteInvoicesInvoiceArgs = {
  invoice: Scalars['String'];
  v1InvoiceInput?: Maybe<Scalars['JSON']>;
};


export type MutationdeletePlansPlanArgs = {
  plan: Scalars['String'];
  v1PlanInput?: Maybe<Scalars['JSON']>;
};


export type MutationdeleteProductsIdArgs = {
  id: Scalars['String'];
  v1ProductInput?: Maybe<Scalars['JSON']>;
};


export type MutationdeleteRadarValueListItemsItemArgs = {
  item: Scalars['String'];
  v1RadarValueListItemsInput?: Maybe<Scalars['JSON']>;
};


export type MutationdeleteRadarValueListsValueListArgs = {
  v1RadarValueListInput?: Maybe<Scalars['JSON']>;
  valueList: Scalars['String'];
};


export type MutationdeleteRecipientsIdArgs = {
  id: Scalars['String'];
  v1RecipientInput?: Maybe<Scalars['JSON']>;
};


export type MutationdeleteSkusIdArgs = {
  id: Scalars['String'];
  v1SkusInput?: Maybe<Scalars['JSON']>;
};


export type MutationdeleteSubscriptionItemsItemArgs = {
  item: Scalars['String'];
  v1SubscriptionItems4Input?: Maybe<V1SubscriptionItems4Input>;
};


export type MutationdeleteSubscriptionsSubscriptionExposedIdArgs = {
  subscriptionExposedId: Scalars['String'];
  v1SubscriptionInput?: Maybe<V1SubscriptionInput>;
};


export type MutationdeleteSubscriptionsSubscriptionExposedIdDiscountArgs = {
  subscriptionExposedId: Scalars['String'];
  v1SubscriptionDiscountInput?: Maybe<Scalars['JSON']>;
};


export type MutationdeleteTerminalLocationsLocationArgs = {
  location: Scalars['String'];
  v1TerminalLocationInput?: Maybe<Scalars['JSON']>;
};


export type MutationdeleteTerminalReadersReaderArgs = {
  reader: Scalars['String'];
  v1TerminalReaderInput?: Maybe<Scalars['JSON']>;
};


export type MutationdeleteWebhookEndpointsWebhookEndpointArgs = {
  v1WebhookEndpointInput?: Maybe<Scalars['JSON']>;
  webhookEndpoint: Scalars['String'];
};


export type Mutationpost3dSecureArgs = {
  v13dSecureInput: V13dSecureInput;
};


export type MutationpostAccountArgs = {
  v1Account3Input?: Maybe<V1Account3Input>;
};


export type MutationpostAccountBankAccountsArgs = {
  v1AccountBankAccountsInput?: Maybe<V1AccountBankAccountsInput>;
};


export type MutationpostAccountBankAccountsIdArgs = {
  id: Scalars['String'];
  v1AccountBankAccount2Input?: Maybe<V1AccountBankAccount2Input>;
};


export type MutationpostAccountCapabilitiesCapabilityArgs = {
  capability: Scalars['String'];
  v1AccountCapability2Input?: Maybe<V1AccountCapability2Input>;
};


export type MutationpostAccountExternalAccountsArgs = {
  v1AccountExternalAccounts2Input?: Maybe<V1AccountExternalAccounts2Input>;
};


export type MutationpostAccountExternalAccountsIdArgs = {
  id: Scalars['String'];
  v1AccountExternalAccount2Input?: Maybe<V1AccountExternalAccount2Input>;
};


export type MutationpostAccountLinksArgs = {
  v1AccountLinksInput: V1AccountLinksInput;
};


export type MutationpostAccountLoginLinksArgs = {
  v1AccountLoginLinksInput: V1AccountLoginLinksInput;
};


export type MutationpostAccountPeopleArgs = {
  v1AccountPeople3Input?: Maybe<V1AccountPeople3Input>;
};


export type MutationpostAccountPeoplePersonArgs = {
  person: Scalars['String'];
  v1AccountPerson2Input?: Maybe<V1AccountPerson2Input>;
};


export type MutationpostAccountPersonsArgs = {
  v1AccountPersons3Input?: Maybe<V1AccountPersons3Input>;
};


export type MutationpostAccountPersonsPersonArgs = {
  person: Scalars['String'];
  v1AccountPerson2Input?: Maybe<V1AccountPerson2Input>;
};


export type MutationpostAccountsArgs = {
  v1Accounts3Input?: Maybe<V1Accounts3Input>;
};


export type MutationpostAccountsAccountArgs = {
  account: Scalars['String'];
  v1Account3Input?: Maybe<V1Account3Input>;
};


export type MutationpostAccountsAccountBankAccountsArgs = {
  account: Scalars['String'];
  v1AccountBankAccountsInput?: Maybe<V1AccountBankAccountsInput>;
};


export type MutationpostAccountsAccountBankAccountsIdArgs = {
  account: Scalars['String'];
  id: Scalars['String'];
  v1AccountBankAccount2Input?: Maybe<V1AccountBankAccount2Input>;
};


export type MutationpostAccountsAccountCapabilitiesCapabilityArgs = {
  account: Scalars['String'];
  capability: Scalars['String'];
  v1AccountCapability2Input?: Maybe<V1AccountCapability2Input>;
};


export type MutationpostAccountsAccountExternalAccountsArgs = {
  account: Scalars['String'];
  v1AccountExternalAccounts2Input?: Maybe<V1AccountExternalAccounts2Input>;
};


export type MutationpostAccountsAccountExternalAccountsIdArgs = {
  account: Scalars['String'];
  id: Scalars['String'];
  v1AccountExternalAccount2Input?: Maybe<V1AccountExternalAccount2Input>;
};


export type MutationpostAccountsAccountLoginLinksArgs = {
  account: Scalars['String'];
  v1AccountLoginLinks2Input?: Maybe<V1AccountLoginLinks2Input>;
};


export type MutationpostAccountsAccountPeopleArgs = {
  account: Scalars['String'];
  v1AccountPeople4Input?: Maybe<V1AccountPeople4Input>;
};


export type MutationpostAccountsAccountPeoplePersonArgs = {
  account: Scalars['String'];
  person: Scalars['String'];
  v1AccountPerson3Input?: Maybe<V1AccountPerson3Input>;
};


export type MutationpostAccountsAccountPersonsArgs = {
  account: Scalars['String'];
  v1AccountPersons4Input?: Maybe<V1AccountPersons4Input>;
};


export type MutationpostAccountsAccountPersonsPersonArgs = {
  account: Scalars['String'];
  person: Scalars['String'];
  v1AccountPerson3Input?: Maybe<V1AccountPerson3Input>;
};


export type MutationpostAccountsAccountRejectArgs = {
  account: Scalars['String'];
  v1AccountRejectInput: V1AccountRejectInput;
};


export type MutationpostApplePayDomainsArgs = {
  v1ApplePayDomains2Input: V1ApplePayDomains2Input;
};


export type MutationpostApplicationFeesFeeRefundsIdArgs = {
  fee: Scalars['String'];
  id: Scalars['String'];
  v1ApplicationFeesRefund2Input?: Maybe<V1ApplicationFeesRefund2Input>;
};


export type MutationpostApplicationFeesIdRefundArgs = {
  id: Scalars['String'];
  v1ApplicationFeeRefundInput?: Maybe<V1ApplicationFeeRefundInput>;
};


export type MutationpostApplicationFeesIdRefundsArgs = {
  id: Scalars['String'];
  v1ApplicationFeeRefunds2Input?: Maybe<V1ApplicationFeeRefunds2Input>;
};


export type MutationpostBillingPortalConfigurationsArgs = {
  v1BillingPortalConfigurations3Input: V1BillingPortalConfigurations3Input;
};


export type MutationpostBillingPortalConfigurationsConfigurationArgs = {
  configuration: Scalars['String'];
  v1BillingPortalConfiguration2Input?: Maybe<V1BillingPortalConfiguration2Input>;
};


export type MutationpostBillingPortalSessionsArgs = {
  v1BillingPortalSessionsInput: V1BillingPortalSessionsInput;
};


export type MutationpostChargesArgs = {
  v1Charges3Input?: Maybe<V1Charges3Input>;
};


export type MutationpostChargesChargeArgs = {
  charge: Scalars['String'];
  v1Charge2Input?: Maybe<V1Charge2Input>;
};


export type MutationpostChargesChargeCaptureArgs = {
  charge: Scalars['String'];
  v1ChargeCaptureInput?: Maybe<V1ChargeCaptureInput>;
};


export type MutationpostChargesChargeDisputeArgs = {
  charge: Scalars['String'];
  v1ChargeDispute2Input?: Maybe<V1ChargeDispute2Input>;
};


export type MutationpostChargesChargeDisputeCloseArgs = {
  charge: Scalars['String'];
  v1ChargeDisputeCloseInput?: Maybe<V1ChargeDisputeCloseInput>;
};


export type MutationpostChargesChargeRefundArgs = {
  charge: Scalars['String'];
  v1ChargeRefundInput?: Maybe<V1ChargeRefundInput>;
};


export type MutationpostChargesChargeRefundsArgs = {
  charge: Scalars['String'];
  v1ChargeRefunds2Input?: Maybe<V1ChargeRefunds2Input>;
};


export type MutationpostChargesChargeRefundsRefundArgs = {
  charge: Scalars['String'];
  refund: Scalars['String'];
  v1ChargeRefund3Input?: Maybe<V1ChargeRefund3Input>;
};


export type MutationpostCheckoutSessionsArgs = {
  v1CheckoutSessions2Input: V1CheckoutSessions2Input;
};


export type MutationpostCouponsArgs = {
  v1Coupons3Input?: Maybe<V1Coupons3Input>;
};


export type MutationpostCouponsCouponArgs = {
  coupon: Scalars['String'];
  v1Coupon2Input?: Maybe<V1Coupon2Input>;
};


export type MutationpostCreditNotesArgs = {
  v1CreditNotes2Input: V1CreditNotes2Input;
};


export type MutationpostCreditNotesIdArgs = {
  id: Scalars['String'];
  v1CreditNote2Input?: Maybe<V1CreditNote2Input>;
};


export type MutationpostCreditNotesIdVoidArgs = {
  id: Scalars['String'];
  v1CreditNoteVoidInput?: Maybe<V1CreditNoteVoidInput>;
};


export type MutationpostCustomersArgs = {
  v1Customers3Input?: Maybe<V1Customers3Input>;
};


export type MutationpostCustomersCustomerArgs = {
  customer: Scalars['String'];
  v1Customer3Input?: Maybe<V1Customer3Input>;
};


export type MutationpostCustomersCustomerBalanceTransactionsArgs = {
  customer: Scalars['String'];
  v1CustomerBalanceTransactions2Input: V1CustomerBalanceTransactions2Input;
};


export type MutationpostCustomersCustomerBalanceTransactionsTransactionArgs = {
  customer: Scalars['String'];
  transaction: Scalars['String'];
  v1CustomerBalanceTransactions3Input?: Maybe<V1CustomerBalanceTransactions3Input>;
};


export type MutationpostCustomersCustomerBankAccountsArgs = {
  customer: Scalars['String'];
  v1CustomerBankAccounts2Input?: Maybe<V1CustomerBankAccounts2Input>;
};


export type MutationpostCustomersCustomerBankAccountsIdArgs = {
  customer: Scalars['String'];
  id: Scalars['String'];
  v1CustomerBankAccount4Input?: Maybe<V1CustomerBankAccount4Input>;
};


export type MutationpostCustomersCustomerBankAccountsIdVerifyArgs = {
  customer: Scalars['String'];
  id: Scalars['String'];
  v1CustomerBankAccountVerifyInput?: Maybe<V1CustomerBankAccountVerifyInput>;
};


export type MutationpostCustomersCustomerCardsArgs = {
  customer: Scalars['String'];
  v1CustomerCards2Input?: Maybe<V1CustomerCards2Input>;
};


export type MutationpostCustomersCustomerCardsIdArgs = {
  customer: Scalars['String'];
  id: Scalars['String'];
  v1CustomerCard4Input?: Maybe<V1CustomerCard4Input>;
};


export type MutationpostCustomersCustomerSourcesArgs = {
  customer: Scalars['String'];
  v1CustomerSources2Input?: Maybe<V1CustomerSources2Input>;
};


export type MutationpostCustomersCustomerSourcesIdArgs = {
  customer: Scalars['String'];
  id: Scalars['String'];
  v1CustomerSource4Input?: Maybe<V1CustomerSource4Input>;
};


export type MutationpostCustomersCustomerSourcesIdVerifyArgs = {
  customer: Scalars['String'];
  id: Scalars['String'];
  v1CustomerSourceVerifyInput?: Maybe<V1CustomerSourceVerifyInput>;
};


export type MutationpostCustomersCustomerSubscriptionsArgs = {
  customer: Scalars['String'];
  v1CustomerSubscriptions2Input?: Maybe<V1CustomerSubscriptions2Input>;
};


export type MutationpostCustomersCustomerSubscriptionsSubscriptionExposedIdArgs = {
  customer: Scalars['String'];
  subscriptionExposedId: Scalars['String'];
  v1CustomerSubscription3Input?: Maybe<V1CustomerSubscription3Input>;
};


export type MutationpostCustomersCustomerTaxIdsArgs = {
  customer: Scalars['String'];
  v1CustomerTaxIds2Input: V1CustomerTaxIds2Input;
};


export type MutationpostDisputesDisputeArgs = {
  dispute: Scalars['String'];
  v1Dispute2Input?: Maybe<V1Dispute2Input>;
};


export type MutationpostDisputesDisputeCloseArgs = {
  dispute: Scalars['String'];
  v1DisputeCloseInput?: Maybe<V1DisputeCloseInput>;
};


export type MutationpostEphemeralKeysArgs = {
  v1EphemeralKeysInput?: Maybe<V1EphemeralKeysInput>;
};


export type MutationpostFileLinksArgs = {
  v1FileLinks3Input: V1FileLinks3Input;
};


export type MutationpostFileLinksLinkArgs = {
  link: Scalars['String'];
  v1FileLinks4Input?: Maybe<V1FileLinks4Input>;
};


export type MutationpostFilesArgs = {
  multipartFormDataInput: Scalars['String'];
};


export type MutationpostIdentityVerificationSessionsArgs = {
  v1IdentityVerificationSessions3Input: V1IdentityVerificationSessions3Input;
};


export type MutationpostIdentityVerificationSessionsSessionArgs = {
  session: Scalars['String'];
  v1IdentityVerificationSessions4Input?: Maybe<V1IdentityVerificationSessions4Input>;
};


export type MutationpostIdentityVerificationSessionsSessionCancelArgs = {
  session: Scalars['String'];
  v1IdentityVerificationSessionsCancelInput?: Maybe<V1IdentityVerificationSessionsCancelInput>;
};


export type MutationpostIdentityVerificationSessionsSessionRedactArgs = {
  session: Scalars['String'];
  v1IdentityVerificationSessionsRedactInput?: Maybe<V1IdentityVerificationSessionsRedactInput>;
};


export type MutationpostInvoiceitemsArgs = {
  v1Invoiceitems3Input: V1Invoiceitems3Input;
};


export type MutationpostInvoiceitemsInvoiceitemArgs = {
  invoiceitem: Scalars['String'];
  v1Invoiceitem2Input?: Maybe<V1Invoiceitem2Input>;
};


export type MutationpostInvoicesArgs = {
  v1Invoices2Input: V1Invoices2Input;
};


export type MutationpostInvoicesInvoiceArgs = {
  invoice: Scalars['String'];
  v1Invoice2Input?: Maybe<V1Invoice2Input>;
};


export type MutationpostInvoicesInvoiceFinalizeArgs = {
  invoice: Scalars['String'];
  v1InvoiceFinalizeInput?: Maybe<V1InvoiceFinalizeInput>;
};


export type MutationpostInvoicesInvoiceMarkUncollectibleArgs = {
  invoice: Scalars['String'];
  v1InvoiceMarkUncollectibleInput?: Maybe<V1InvoiceMarkUncollectibleInput>;
};


export type MutationpostInvoicesInvoicePayArgs = {
  invoice: Scalars['String'];
  v1InvoicePayInput?: Maybe<V1InvoicePayInput>;
};


export type MutationpostInvoicesInvoiceSendArgs = {
  invoice: Scalars['String'];
  v1InvoiceSendInput?: Maybe<V1InvoiceSendInput>;
};


export type MutationpostInvoicesInvoiceVoidArgs = {
  invoice: Scalars['String'];
  v1InvoiceVoidInput?: Maybe<V1InvoiceVoidInput>;
};


export type MutationpostIssuingAuthorizationsAuthorizationArgs = {
  authorization: Scalars['String'];
  v1IssuingAuthorization2Input?: Maybe<V1IssuingAuthorization2Input>;
};


export type MutationpostIssuingAuthorizationsAuthorizationApproveArgs = {
  authorization: Scalars['String'];
  v1IssuingAuthorizationApproveInput?: Maybe<V1IssuingAuthorizationApproveInput>;
};


export type MutationpostIssuingAuthorizationsAuthorizationDeclineArgs = {
  authorization: Scalars['String'];
  v1IssuingAuthorizationDeclineInput?: Maybe<V1IssuingAuthorizationDeclineInput>;
};


export type MutationpostIssuingCardholdersArgs = {
  v1IssuingCardholders3Input: V1IssuingCardholders3Input;
};


export type MutationpostIssuingCardholdersCardholderArgs = {
  cardholder: Scalars['String'];
  v1IssuingCardholder2Input?: Maybe<V1IssuingCardholder2Input>;
};


export type MutationpostIssuingCardsArgs = {
  v1IssuingCards3Input: V1IssuingCards3Input;
};


export type MutationpostIssuingCardsCardArgs = {
  card: Scalars['String'];
  v1IssuingCard2Input?: Maybe<V1IssuingCard2Input>;
};


export type MutationpostIssuingDisputesArgs = {
  v1IssuingDisputes2Input: V1IssuingDisputes2Input;
};


export type MutationpostIssuingDisputesDisputeArgs = {
  dispute: Scalars['String'];
  v1IssuingDispute2Input?: Maybe<V1IssuingDispute2Input>;
};


export type MutationpostIssuingDisputesDisputeSubmitArgs = {
  dispute: Scalars['String'];
  v1IssuingDisputeSubmitInput?: Maybe<V1IssuingDisputeSubmitInput>;
};


export type MutationpostIssuingSettlementsSettlementArgs = {
  settlement: Scalars['String'];
  v1IssuingSettlement2Input?: Maybe<V1IssuingSettlement2Input>;
};


export type MutationpostIssuingTransactionsTransactionArgs = {
  transaction: Scalars['String'];
  v1IssuingTransaction2Input?: Maybe<V1IssuingTransaction2Input>;
};


export type MutationpostOrdersArgs = {
  v1Orders3Input: V1Orders3Input;
};


export type MutationpostOrdersIdArgs = {
  id: Scalars['String'];
  v1Order2Input?: Maybe<V1Order2Input>;
};


export type MutationpostOrdersIdPayArgs = {
  id: Scalars['String'];
  v1OrderPayInput?: Maybe<V1OrderPayInput>;
};


export type MutationpostOrdersIdReturnsArgs = {
  id: Scalars['String'];
  v1OrderReturns3Input?: Maybe<V1OrderReturns3Input>;
};


export type MutationpostPaymentIntentsArgs = {
  v1PaymentIntents2Input: V1PaymentIntents2Input;
};


export type MutationpostPaymentIntentsIntentArgs = {
  intent: Scalars['String'];
  v1PaymentIntents3Input?: Maybe<V1PaymentIntents3Input>;
};


export type MutationpostPaymentIntentsIntentCancelArgs = {
  intent: Scalars['String'];
  v1PaymentIntentsCancelInput?: Maybe<V1PaymentIntentsCancelInput>;
};


export type MutationpostPaymentIntentsIntentCaptureArgs = {
  intent: Scalars['String'];
  v1PaymentIntentsCaptureInput?: Maybe<V1PaymentIntentsCaptureInput>;
};


export type MutationpostPaymentIntentsIntentConfirmArgs = {
  intent: Scalars['String'];
  v1PaymentIntentsConfirmInput?: Maybe<V1PaymentIntentsConfirmInput>;
};


export type MutationpostPaymentMethodsArgs = {
  v1PaymentMethods2Input?: Maybe<V1PaymentMethods2Input>;
};


export type MutationpostPaymentMethodsPaymentMethodArgs = {
  paymentMethod: Scalars['String'];
  v1PaymentMethod2Input?: Maybe<V1PaymentMethod2Input>;
};


export type MutationpostPaymentMethodsPaymentMethodAttachArgs = {
  paymentMethod: Scalars['String'];
  v1PaymentMethodAttachInput: V1PaymentMethodAttachInput;
};


export type MutationpostPaymentMethodsPaymentMethodDetachArgs = {
  paymentMethod: Scalars['String'];
  v1PaymentMethodDetachInput?: Maybe<V1PaymentMethodDetachInput>;
};


export type MutationpostPayoutsArgs = {
  v1Payouts2Input: V1Payouts2Input;
};


export type MutationpostPayoutsPayoutArgs = {
  payout: Scalars['String'];
  v1Payout2Input?: Maybe<V1Payout2Input>;
};


export type MutationpostPayoutsPayoutCancelArgs = {
  payout: Scalars['String'];
  v1PayoutCancelInput?: Maybe<V1PayoutCancelInput>;
};


export type MutationpostPayoutsPayoutReverseArgs = {
  payout: Scalars['String'];
  v1PayoutReverseInput?: Maybe<V1PayoutReverseInput>;
};


export type MutationpostPlansArgs = {
  v1Plans2Input: V1Plans2Input;
};


export type MutationpostPlansPlanArgs = {
  plan: Scalars['String'];
  v1Plan2Input?: Maybe<V1Plan2Input>;
};


export type MutationpostPricesArgs = {
  v1Prices2Input: V1Prices2Input;
};


export type MutationpostPricesPriceArgs = {
  price: Scalars['String'];
  v1Price2Input?: Maybe<V1Price2Input>;
};


export type MutationpostProductsArgs = {
  v1Products3Input: V1Products3Input;
};


export type MutationpostProductsIdArgs = {
  id: Scalars['String'];
  v1Product2Input?: Maybe<V1Product2Input>;
};


export type MutationpostPromotionCodesArgs = {
  v1PromotionCodes3Input: V1PromotionCodes3Input;
};


export type MutationpostPromotionCodesPromotionCodeArgs = {
  promotionCode: Scalars['String'];
  v1PromotionCode2Input?: Maybe<V1PromotionCode2Input>;
};


export type MutationpostQuotesArgs = {
  v1Quotes3Input?: Maybe<V1Quotes3Input>;
};


export type MutationpostQuotesQuoteArgs = {
  quote: Scalars['String'];
  v1Quote2Input?: Maybe<V1Quote2Input>;
};


export type MutationpostQuotesQuoteAcceptArgs = {
  quote: Scalars['String'];
  v1QuoteAcceptInput?: Maybe<V1QuoteAcceptInput>;
};


export type MutationpostQuotesQuoteCancelArgs = {
  quote: Scalars['String'];
  v1QuoteCancelInput?: Maybe<V1QuoteCancelInput>;
};


export type MutationpostQuotesQuoteFinalizeArgs = {
  quote: Scalars['String'];
  v1QuoteFinalizeInput?: Maybe<V1QuoteFinalizeInput>;
};


export type MutationpostRadarValueListItemsArgs = {
  v1RadarValueListItems3Input: V1RadarValueListItems3Input;
};


export type MutationpostRadarValueListsArgs = {
  v1RadarValueLists3Input: V1RadarValueLists3Input;
};


export type MutationpostRadarValueListsValueListArgs = {
  v1RadarValueList2Input?: Maybe<V1RadarValueList2Input>;
  valueList: Scalars['String'];
};


export type MutationpostRecipientsArgs = {
  v1Recipients3Input: V1Recipients3Input;
};


export type MutationpostRecipientsIdArgs = {
  id: Scalars['String'];
  v1Recipient3Input?: Maybe<V1Recipient3Input>;
};


export type MutationpostRefundsArgs = {
  v1Refunds3Input?: Maybe<V1Refunds3Input>;
};


export type MutationpostRefundsRefundArgs = {
  refund: Scalars['String'];
  v1Refund2Input?: Maybe<V1Refund2Input>;
};


export type MutationpostReportingReportRunsArgs = {
  v1ReportingReportRuns3Input: V1ReportingReportRuns3Input;
};


export type MutationpostReviewsReviewApproveArgs = {
  review: Scalars['String'];
  v1ReviewApproveInput?: Maybe<V1ReviewApproveInput>;
};


export type MutationpostSetupIntentsArgs = {
  v1SetupIntents2Input?: Maybe<V1SetupIntents2Input>;
};


export type MutationpostSetupIntentsIntentArgs = {
  intent: Scalars['String'];
  v1SetupIntents3Input?: Maybe<V1SetupIntents3Input>;
};


export type MutationpostSetupIntentsIntentCancelArgs = {
  intent: Scalars['String'];
  v1SetupIntentsCancelInput?: Maybe<V1SetupIntentsCancelInput>;
};


export type MutationpostSetupIntentsIntentConfirmArgs = {
  intent: Scalars['String'];
  v1SetupIntentsConfirmInput?: Maybe<V1SetupIntentsConfirmInput>;
};


export type MutationpostSkusArgs = {
  v1Skus3Input: V1Skus3Input;
};


export type MutationpostSkusIdArgs = {
  id: Scalars['String'];
  v1Skus5Input?: Maybe<V1Skus5Input>;
};


export type MutationpostSourcesArgs = {
  v1SourcesInput?: Maybe<V1SourcesInput>;
};


export type MutationpostSourcesSourceArgs = {
  source: Scalars['String'];
  v1Source2Input?: Maybe<V1Source2Input>;
};


export type MutationpostSourcesSourceVerifyArgs = {
  source: Scalars['String'];
  v1SourceVerifyInput: V1SourceVerifyInput;
};


export type MutationpostSubscriptionItemsArgs = {
  v1SubscriptionItems3Input: V1SubscriptionItems3Input;
};


export type MutationpostSubscriptionItemsItemArgs = {
  item: Scalars['String'];
  v1SubscriptionItems5Input?: Maybe<V1SubscriptionItems5Input>;
};


export type MutationpostSubscriptionItemsSubscriptionItemUsageRecordsArgs = {
  subscriptionItem: Scalars['String'];
  v1SubscriptionItemUsageRecordsInput: V1SubscriptionItemUsageRecordsInput;
};


export type MutationpostSubscriptionSchedulesArgs = {
  v1SubscriptionSchedules3Input?: Maybe<V1SubscriptionSchedules3Input>;
};


export type MutationpostSubscriptionSchedulesScheduleArgs = {
  schedule: Scalars['String'];
  v1SubscriptionSchedules4Input?: Maybe<V1SubscriptionSchedules4Input>;
};


export type MutationpostSubscriptionSchedulesScheduleCancelArgs = {
  schedule: Scalars['String'];
  v1SubscriptionSchedulesCancelInput?: Maybe<V1SubscriptionSchedulesCancelInput>;
};


export type MutationpostSubscriptionSchedulesScheduleReleaseArgs = {
  schedule: Scalars['String'];
  v1SubscriptionSchedulesReleaseInput?: Maybe<V1SubscriptionSchedulesReleaseInput>;
};


export type MutationpostSubscriptionsArgs = {
  v1Subscriptions3Input: V1Subscriptions3Input;
};


export type MutationpostSubscriptionsSubscriptionExposedIdArgs = {
  subscriptionExposedId: Scalars['String'];
  v1Subscription3Input?: Maybe<V1Subscription3Input>;
};


export type MutationpostTaxRatesArgs = {
  v1TaxRates3Input: V1TaxRates3Input;
};


export type MutationpostTaxRatesTaxRateArgs = {
  taxRate: Scalars['String'];
  v1TaxRate2Input?: Maybe<V1TaxRate2Input>;
};


export type MutationpostTerminalConnectionTokensArgs = {
  v1TerminalConnectionTokensInput?: Maybe<V1TerminalConnectionTokensInput>;
};


export type MutationpostTerminalLocationsArgs = {
  v1TerminalLocations2Input: V1TerminalLocations2Input;
};


export type MutationpostTerminalLocationsLocationArgs = {
  location: Scalars['String'];
  v1TerminalLocation2Input?: Maybe<V1TerminalLocation2Input>;
};


export type MutationpostTerminalReadersArgs = {
  v1TerminalReaders2Input: V1TerminalReaders2Input;
};


export type MutationpostTerminalReadersReaderArgs = {
  reader: Scalars['String'];
  v1TerminalReader2Input?: Maybe<V1TerminalReader2Input>;
};


export type MutationpostTokensArgs = {
  v1TokensInput?: Maybe<V1TokensInput>;
};


export type MutationpostTopupsArgs = {
  v1Topups2Input: V1Topups2Input;
};


export type MutationpostTopupsTopupArgs = {
  topup: Scalars['String'];
  v1Topup2Input?: Maybe<V1Topup2Input>;
};


export type MutationpostTopupsTopupCancelArgs = {
  topup: Scalars['String'];
  v1TopupCancelInput?: Maybe<V1TopupCancelInput>;
};


export type MutationpostTransfersArgs = {
  v1Transfers2Input: V1Transfers2Input;
};


export type MutationpostTransfersIdReversalsArgs = {
  id: Scalars['String'];
  v1TransferReversals2Input?: Maybe<V1TransferReversals2Input>;
};


export type MutationpostTransfersTransferArgs = {
  transfer: Scalars['String'];
  v1Transfer2Input?: Maybe<V1Transfer2Input>;
};


export type MutationpostTransfersTransferReversalsIdArgs = {
  id: Scalars['String'];
  transfer: Scalars['String'];
  v1TransferReversal2Input?: Maybe<V1TransferReversal2Input>;
};


export type MutationpostWebhookEndpointsArgs = {
  v1WebhookEndpoints3Input: V1WebhookEndpoints3Input;
};


export type MutationpostWebhookEndpointsWebhookEndpointArgs = {
  v1WebhookEndpoint2Input?: Maybe<V1WebhookEndpoint2Input>;
  webhookEndpoint: Scalars['String'];
};

export type CurrencyInput = {
  code?: Maybe<CurrencyCode>;
  symbol?: Maybe<Scalars['String']>;
  thousandsSeparator?: Maybe<Scalars['String']>;
  decimalSeparator?: Maybe<Scalars['String']>;
  decimalDigits?: Maybe<Scalars['Int']>;
};

export enum CurrencyCode {
  AED = 'AED',
  AFN = 'AFN',
  ALL = 'ALL',
  AMD = 'AMD',
  ANG = 'ANG',
  AOA = 'AOA',
  ARS = 'ARS',
  AUD = 'AUD',
  AWG = 'AWG',
  AZN = 'AZN',
  BAM = 'BAM',
  BBD = 'BBD',
  BDT = 'BDT',
  BGN = 'BGN',
  BHD = 'BHD',
  BIF = 'BIF',
  BMD = 'BMD',
  BND = 'BND',
  BOB = 'BOB',
  BRL = 'BRL',
  BSD = 'BSD',
  BTC = 'BTC',
  BTN = 'BTN',
  BWP = 'BWP',
  BYR = 'BYR',
  BZD = 'BZD',
  CAD = 'CAD',
  CDF = 'CDF',
  CHF = 'CHF',
  CLP = 'CLP',
  CNY = 'CNY',
  COP = 'COP',
  CRC = 'CRC',
  CUC = 'CUC',
  CUP = 'CUP',
  CVE = 'CVE',
  CZK = 'CZK',
  DJF = 'DJF',
  DKK = 'DKK',
  DOP = 'DOP',
  DZD = 'DZD',
  EGP = 'EGP',
  ERN = 'ERN',
  ETB = 'ETB',
  EUR = 'EUR',
  FJD = 'FJD',
  FKP = 'FKP',
  GBP = 'GBP',
  GEL = 'GEL',
  GHS = 'GHS',
  GIP = 'GIP',
  GMD = 'GMD',
  GNF = 'GNF',
  GTQ = 'GTQ',
  GYD = 'GYD',
  HKD = 'HKD',
  HNL = 'HNL',
  HRK = 'HRK',
  HTG = 'HTG',
  HUF = 'HUF',
  IDR = 'IDR',
  ILS = 'ILS',
  INR = 'INR',
  IQD = 'IQD',
  IRR = 'IRR',
  ISK = 'ISK',
  JMD = 'JMD',
  JOD = 'JOD',
  JPY = 'JPY',
  KES = 'KES',
  KGS = 'KGS',
  KHR = 'KHR',
  KMF = 'KMF',
  KPW = 'KPW',
  KRW = 'KRW',
  KWD = 'KWD',
  KYD = 'KYD',
  KZT = 'KZT',
  LAK = 'LAK',
  LBP = 'LBP',
  LKR = 'LKR',
  LRD = 'LRD',
  LSL = 'LSL',
  LYD = 'LYD',
  MAD = 'MAD',
  MDL = 'MDL',
  MGA = 'MGA',
  MKD = 'MKD',
  MMK = 'MMK',
  MNT = 'MNT',
  MOP = 'MOP',
  MRO = 'MRO',
  MTL = 'MTL',
  MUR = 'MUR',
  MVR = 'MVR',
  MWK = 'MWK',
  MXN = 'MXN',
  MYR = 'MYR',
  MZN = 'MZN',
  NAD = 'NAD',
  NGN = 'NGN',
  NIO = 'NIO',
  NOK = 'NOK',
  NPR = 'NPR',
  NZD = 'NZD',
  OMR = 'OMR',
  PAB = 'PAB',
  PEN = 'PEN',
  PGK = 'PGK',
  PHP = 'PHP',
  PKR = 'PKR',
  PLN = 'PLN',
  PYG = 'PYG',
  QAR = 'QAR',
  RON = 'RON',
  RSD = 'RSD',
  RUB = 'RUB',
  RWF = 'RWF',
  SAR = 'SAR',
  SBD = 'SBD',
  SCR = 'SCR',
  SDD = 'SDD',
  SDG = 'SDG',
  SEK = 'SEK',
  SGD = 'SGD',
  SHP = 'SHP',
  SLL = 'SLL',
  SOS = 'SOS',
  SRD = 'SRD',
  STD = 'STD',
  SVC = 'SVC',
  SYP = 'SYP',
  SZL = 'SZL',
  THB = 'THB',
  TJS = 'TJS',
  TMT = 'TMT',
  TND = 'TND',
  TOP = 'TOP',
  TRY = 'TRY',
  TTD = 'TTD',
  TVD = 'TVD',
  TWD = 'TWD',
  TZS = 'TZS',
  UAH = 'UAH',
  UGX = 'UGX',
  USD = 'USD',
  UYU = 'UYU',
  UZS = 'UZS',
  VEB = 'VEB',
  VEF = 'VEF',
  VND = 'VND',
  VUV = 'VUV',
  WST = 'WST',
  XAF = 'XAF',
  XCD = 'XCD',
  XBT = 'XBT',
  XOF = 'XOF',
  XPF = 'XPF',
  YER = 'YER',
  ZAR = 'ZAR',
  ZMW = 'ZMW',
  WON = 'WON'
}

/** Carts are the core concept of CartQL. Bring your own PIM and use CartQL to calculate your Cart and Checkout. */
export type Cart = Node & {
  /** A custom unique identifer for the cart provided by you. */
  id: Scalars['ID'];
  /** The current currency details of the cart. */
  currency: Currency;
  /** The customer for the cart */
  email?: Maybe<Scalars['String']>;
  /** The number of total items in the cart */
  totalItems?: Maybe<Scalars['Int']>;
  /** The number of total unique items in the cart. */
  totalUniqueItems?: Maybe<Scalars['Int']>;
  /** The items currently in the cart. */
  items: Array<CartItem>;
  /** Sum of all SKU items, excluding discounts, taxes, shipping, including the raw/formatted amounts and currency details */
  subTotal: Money;
  /** The cart total for all items with type SHIPPING, including the raw/formatted amounts and currency details. */
  shippingTotal: Money;
  /** The cart total for all items with type TAX, including the raw/formatted amounts and currency details. */
  taxTotal: Money;
  /** The grand total for all items, including shipping, including the raw/formatted amounts and currency details. */
  grandTotal: Money;
  /** A simple helper method to check if the cart is empty. */
  isEmpty?: Maybe<Scalars['Boolean']>;
  /** A simple helper method to check if the cart hasn't been updated in the last 2 hours. */
  abandoned?: Maybe<Scalars['Boolean']>;
  /** Custom key/value attributes array for the cart. */
  attributes: Array<CustomCartAttribute>;
  /** Custom meta object for the cart */
  metadata?: Maybe<Scalars['Json']>;
  /** Any notes related to the cart/checkout */
  notes?: Maybe<Scalars['String']>;
  /** The date and time the cart was created. */
  createdAt: Scalars['Date'];
  /** The date and time the cart was updated. */
  updatedAt: Scalars['Date'];
};

export type Node = {
  id: Scalars['ID'];
};

/** Cart and Cart Items use the currency object to format their unit/line totals. */
export type Currency = {
  /** The currency code, e.g. USD, GBP, EUR */
  code?: Maybe<CurrencyCode>;
  /** The currency smybol, e.g. $, £, € */
  symbol?: Maybe<Scalars['String']>;
  /** The thousand separator, e.g. ',', '.' */
  thousandsSeparator?: Maybe<Scalars['String']>;
  /** The decimal separator, e.g. '.' */
  decimalSeparator?: Maybe<Scalars['String']>;
  /** The decimal places for the currency */
  decimalDigits?: Maybe<Scalars['Int']>;
};

/** A Cart Item is used to store data on the items inside the Cart. There are no strict rules about what you use the named fields for. */
export type CartItem = {
  /** A custom unique identifer for the item provided by you. */
  id: Scalars['ID'];
  /** Name for the item. */
  name?: Maybe<Scalars['String']>;
  /** Description for the item. */
  description?: Maybe<Scalars['String']>;
  /** The type of cart item this is. */
  type: CartItemType;
  /** Array of image URLs for the item. */
  images?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Unit total for the individual item. */
  unitTotal: Money;
  /** Line total (quantity * unit price). */
  lineTotal: Money;
  /** Quantity for the item. */
  quantity: Scalars['Int'];
  /** Custom key/value attributes array for the item. */
  attributes: Array<CustomCartAttribute>;
  /** Custom metadata for the item. */
  metadata?: Maybe<Scalars['Json']>;
  /** The date and time the item was created. */
  createdAt: Scalars['Date'];
  /** The date and time the item was updated. */
  updatedAt: Scalars['Date'];
};

/** Use these enums to group cart items. Cart totals will reflect these enums. */
export enum CartItemType {
  SKU = 'SKU',
  TAX = 'TAX',
  SHIPPING = 'SHIPPING'
}

/** The Money type is used when describing the Cart and Cart Item unit/line totals. */
export type Money = {
  /** The raw amount in cents/pence */
  amount?: Maybe<Scalars['Int']>;
  /** The current currency details of the money amount */
  currency: Currency;
  /** The formatted amount with the cart currency. */
  formatted: Scalars['String'];
};

/** Custom Cart Attributes are used for any type of custom data you want to store on a Cart. These are transferred to Orders when you checkout. */
export type CustomCartAttribute = {
  key: Scalars['String'];
  value?: Maybe<Scalars['String']>;
};



export type AddToCartInput = {
  cartId: Scalars['ID'];
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  type?: Maybe<CartItemType>;
  images?: Maybe<Array<Maybe<Scalars['String']>>>;
  price: Scalars['Int'];
  currency?: Maybe<CurrencyInput>;
  quantity?: Maybe<Scalars['Int']>;
  attributes?: Maybe<Array<Maybe<CustomAttributeInput>>>;
  metadata?: Maybe<Scalars['Json']>;
};

export type CustomAttributeInput = {
  key: Scalars['String'];
  value?: Maybe<Scalars['String']>;
};

export type SetCartItemsInput = {
  cartId: Scalars['ID'];
  items: Array<SetCartItemInput>;
};

export type SetCartItemInput = {
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  type?: Maybe<CartItemType>;
  images?: Maybe<Array<Maybe<Scalars['String']>>>;
  price: Scalars['Int'];
  currency?: Maybe<CurrencyInput>;
  quantity?: Maybe<Scalars['Int']>;
  attributes?: Maybe<Array<Maybe<CustomAttributeInput>>>;
  metadata?: Maybe<Scalars['Json']>;
};

export type UpdateCartItemInput = {
  cartId: Scalars['ID'];
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  type?: Maybe<CartItemType>;
  images?: Maybe<Array<Maybe<Scalars['String']>>>;
  price?: Maybe<Scalars['Int']>;
  quantity?: Maybe<Scalars['Int']>;
  metadata?: Maybe<Scalars['Json']>;
};

export type UpdateItemQuantityInput = {
  /** The ID of the Cart in which the CartItem belongs to. */
  cartId: Scalars['ID'];
  /** The ID of the CartItem you wish to update. */
  id: Scalars['ID'];
  /** The amount (as Int) you wish to increment the Cart item quantity by. */
  by: Scalars['Int'];
};

export type RemoveCartItemInput = {
  /** The ID of the Cart in which the CartItem belongs to. */
  cartId: Scalars['ID'];
  /** The ID of the CartItem you wish to remove. */
  id: Scalars['ID'];
};

export type EmptyCartInput = {
  /** The ID of the Cart you wish to empty. */
  id: Scalars['ID'];
};

export type UpdateCartInput = {
  id: Scalars['ID'];
  currency?: Maybe<CurrencyInput>;
  email?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  attributes?: Maybe<Array<Maybe<CustomAttributeInput>>>;
  metadata?: Maybe<Scalars['Json']>;
};

export type DeleteCartInput = {
  /** The ID of the Cart you wish to delete. */
  id: Scalars['ID'];
};

export type DeletePayload = {
  success: Scalars['Boolean'];
  message?: Maybe<Scalars['String']>;
};

export type CheckoutInput = {
  cartId: Scalars['ID'];
  email: Scalars['String'];
  notes?: Maybe<Scalars['String']>;
  shipping: AddressInput;
  billing?: Maybe<AddressInput>;
  metadata?: Maybe<Scalars['Json']>;
};

export type AddressInput = {
  company?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  line1: Scalars['String'];
  line2?: Maybe<Scalars['String']>;
  city: Scalars['String'];
  state?: Maybe<Scalars['String']>;
  postalCode: Scalars['String'];
  country: Scalars['String'];
};

/** Orders are immutable. Once created, you can't change them. The status will automatically reflect the current payment status. */
export type Order = {
  id: Scalars['ID'];
  /** The ID of the cart you want to "checkout". */
  cartId: Scalars['ID'];
  /** The email of the recipient. Can be used later for cart recovery emails. */
  email: Scalars['String'];
  /** The orders shipping address. */
  shipping: Address;
  /** The orders billing address. */
  billing: Address;
  /** The order items that were in the cart. */
  items: Array<OrderItem>;
  /** Sum of all SKU items, excluding discounts, taxes, shipping, including the raw/formatted amounts and currency details */
  subTotal: Money;
  /** The total for all items with type SHIPPING, including the raw/formatted amounts and currency details. */
  shippingTotal: Money;
  /** The total for all items with type TAX, including the raw/formatted amounts and currency details. */
  taxTotal: Money;
  /** The grand total for all items, including shipping, including the raw/formatted amounts and currency details. */
  grandTotal: Money;
  /** The total item count. */
  totalItems: Scalars['Int'];
  /** The total unique item count. */
  totalUniqueItems: Scalars['Int'];
  /** The notes set at checkout. */
  notes?: Maybe<Scalars['String']>;
  /** The custom attributes set at checkout */
  attributes: Array<CustomAttribute>;
  /** The metadata set at checkout */
  metadata?: Maybe<Scalars['Json']>;
  /** The current order status. This will reflect the current payment status. The first stage is 'unpaid'. */
  status: OrderStatus;
  /** The date and time the order was created. */
  createdAt: Scalars['Date'];
  /** The date and time the order status was updated. */
  updatedAt: Scalars['Date'];
};

export type Address = {
  /** Use this to keep an optional company name for addresses. */
  company?: Maybe<Scalars['String']>;
  /** Use this to keep the name of the recipient. */
  name: Scalars['String'];
  /** Address line 1 (e.g., street, PO Box, or company name). */
  line1?: Maybe<Scalars['String']>;
  /** Address line 2 (e.g., apartment, suite, unit, or building). */
  line2?: Maybe<Scalars['String']>;
  /** City, district, suburb, town, or village. */
  city?: Maybe<Scalars['String']>;
  /** State, county, province, or region. */
  state?: Maybe<Scalars['String']>;
  /** ZIP or postal code. */
  postalCode?: Maybe<Scalars['String']>;
  /** Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)). */
  country?: Maybe<Scalars['String']>;
};

/**
 * A representation of the constituent items of any given order. Can be used to
 * represent [SKUs](https://stripe.com/docs/api#skus), shipping costs, or taxes owed on the order.
 *
 * Related guide: [Orders](https://stripe.com/docs/orders/guide).
 */
export type OrderItem = {
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
  /** Description of the line item, meant to be displayable to the user (e.g., `"Express shipping"`). */
  description: Scalars['String'];
  /** The type of line item. One of `sku`, `tax`, `shipping`, or `discount`. */
  type: Scalars['String'];
  images?: Maybe<Array<Maybe<Scalars['String']>>>;
  unitTotal: Money;
  lineTotal: Money;
  /** A positive integer representing the number of instances of `parent` that are included in this order item. Applicable/present only if `type` is `sku`. */
  quantity?: Maybe<Scalars['Int']>;
  createdAt: Scalars['Date'];
  updatedAt: Scalars['Date'];
  attributes: Array<CustomCartAttribute>;
  metadata?: Maybe<Scalars['Json']>;
  /** A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount for the line item. */
  amount: Scalars['Int'];
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency: Scalars['String'];
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object58;
  /** The ID of the associated object for this line item. Expandable if not null (e.g., expandable to a SKU). */
  parent?: Maybe<Scalars['JSON']>;
};

export type CustomAttribute = {
  key: Scalars['String'];
  value?: Maybe<Scalars['String']>;
};

export enum OrderStatus {
  UNPAID = 'UNPAID',
  PAID = 'PAID'
}

/**
 * Cardholder authentication via 3D Secure is initiated by creating a `3D Secure`
 * object. Once the object has been created, you can use it to authenticate the
 * cardholder and create a charge.
 */
export type ThreeDSecure = {
  /** Amount of the charge that you will create when authentication completes. */
  amount: Scalars['Int'];
  /** True if the cardholder went through the authentication flow and their bank indicated that authentication succeeded. */
  authenticated: Scalars['Boolean'];
  /**
   * You can store multiple cards on a customer in order to charge the customer
   * later. You can also store multiple debit cards on a recipient in order to
   * transfer to those cards later.
   *
   * Related guide: [Card Payments with Sources](https://stripe.com/docs/sources/cards).
   */
  card: Card2;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created: Scalars['Int'];
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency: Scalars['String'];
  /** Unique identifier for the object. */
  id: Scalars['String'];
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object2;
  /** If present, this is the URL that you should send the cardholder to for authentication. If you are going to use Stripe.js to display the authentication page in an iframe, you should use the value "_callback". */
  redirectUrl?: Maybe<Scalars['String']>;
  /** Possible values are `redirect_pending`, `succeeded`, or `failed`. When the cardholder can be authenticated, the object starts with status `redirect_pending`. When liability will be shifted to the cardholder's bank (either because the cardholder was successfully authenticated, or because the bank has not implemented 3D Secure, the object wlil be in status `succeeded`. `failed` indicates that authentication was attempted unsuccessfully. */
  status: Scalars['String'];
};

/**
 * You can store multiple cards on a customer in order to charge the customer
 * later. You can also store multiple debit cards on a recipient in order to
 * transfer to those cards later.
 *
 * Related guide: [Card Payments with Sources](https://stripe.com/docs/sources/cards).
 */
export type Card2 = {
  /** The account this card belongs to. This attribute will not be in the card object if the card belongs to a customer or recipient instead. */
  account?: Maybe<Scalars['JSON']>;
  /** City/District/Suburb/Town/Village. */
  addressCity?: Maybe<Scalars['String']>;
  /** Billing address country, if provided when creating card. */
  addressCountry?: Maybe<Scalars['String']>;
  /** Address line 1 (Street address/PO Box/Company name). */
  addressLine1?: Maybe<Scalars['String']>;
  /** If `address_line1` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. */
  addressLine1Check?: Maybe<Scalars['String']>;
  /** Address line 2 (Apartment/Suite/Unit/Building). */
  addressLine2?: Maybe<Scalars['String']>;
  /** State/County/Province/Region. */
  addressState?: Maybe<Scalars['String']>;
  /** ZIP or postal code. */
  addressZip?: Maybe<Scalars['String']>;
  /** If `address_zip` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. */
  addressZipCheck?: Maybe<Scalars['String']>;
  /** A set of available payout methods for this card. Only values from this set should be passed as the `method` when creating a payout. */
  availablePayoutMethods?: Maybe<Array<Maybe<AvailablePayoutMethodsListItem>>>;
  /** Card brand. Can be `American Express`, `Diners Club`, `Discover`, `JCB`, `MasterCard`, `UnionPay`, `Visa`, or `Unknown`. */
  brand: Scalars['String'];
  /** Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected. */
  country?: Maybe<Scalars['String']>;
  /** Three-letter [ISO code for currency](https://stripe.com/docs/payouts). Only applicable on accounts (not customers or recipients). The card can be used as a transfer destination for funds in this currency. */
  currency?: Maybe<Scalars['String']>;
  /** The customer that this card belongs to. This attribute will not be in the card object if the card belongs to an account or recipient instead. */
  customer?: Maybe<Scalars['JSON']>;
  /** If a CVC was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. A result of unchecked indicates that CVC was provided but hasn't been checked yet. Checks are typically performed when attaching a card to a Customer object, or when creating a charge. For more details, see [Check if a card is valid without a charge](https://support.stripe.com/questions/check-if-a-card-is-valid-without-a-charge). */
  cvcCheck?: Maybe<Scalars['String']>;
  /** Whether this card is the default external account for its currency. */
  defaultForCurrency?: Maybe<Scalars['Boolean']>;
  /** (For tokenized numbers only.) The last four digits of the device account number. */
  dynamicLast4?: Maybe<Scalars['String']>;
  /** Two-digit number representing the card's expiration month. */
  expMonth: Scalars['Int'];
  /** Four-digit number representing the card's expiration year. */
  expYear: Scalars['Int'];
  /**
   * Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
   *
   * *Starting May 1, 2021, card fingerprint in India for Connect will change to allow two fingerprints for the same card --- one for India and one for the rest of the world.*
   */
  fingerprint?: Maybe<Scalars['String']>;
  /** Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`. */
  funding: Scalars['String'];
  /** Unique identifier for the object. */
  id: Scalars['String'];
  /** The last four digits of the card. */
  last4: Scalars['String'];
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Maybe<Scalars['JSON']>;
  /** Cardholder name. */
  name?: Maybe<Scalars['String']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object;
  /** The recipient that this card belongs to. This attribute will not be in the card object if the card belongs to a customer or account instead. */
  recipient?: Maybe<Scalars['JSON']>;
  /** If the card number is tokenized, this is the method that was used. Can be `android_pay` (includes Google Pay), `apple_pay`, `masterpass`, `visa_checkout`, or null. */
  tokenizationMethod?: Maybe<Scalars['String']>;
};


export enum AvailablePayoutMethodsListItem {
  INSTANT = 'instant',
  STANDARD = 'standard'
}

export enum Object {
  CARD = 'card'
}

export enum Object2 {
  THREE_D_SECURE = 'three_d_secure'
}

/**
 * This is an object representing a Stripe account. You can retrieve it to see
 * properties on the account like its current e-mail address or if the account is
 * enabled yet to make live charges.
 *
 * Some properties, marked below, are available only to platforms that want to
 * [create and manage Express or Custom accounts](https://stripe.com/docs/connect/accounts).
 */
export type Account3 = {
  /** Business information about the account. */
  businessProfile?: Maybe<BusinessProfile>;
  /** The business type. */
  businessType?: Maybe<BusinessType>;
  capabilities?: Maybe<AccountCapabilities>;
  /** Whether the account can create live charges. */
  chargesEnabled?: Maybe<Scalars['Boolean']>;
  company?: Maybe<LegalEntityCompany>;
  controller?: Maybe<AccountController>;
  /** The account's country. */
  country?: Maybe<Scalars['String']>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: Maybe<Scalars['Int']>;
  /** Three-letter ISO currency code representing the default currency for the account. This must be a currency that [Stripe supports in the account's country](https://stripe.com/docs/payouts). */
  defaultCurrency?: Maybe<Scalars['String']>;
  /** Whether account details have been submitted. Standard accounts cannot receive payouts before this is true. */
  detailsSubmitted?: Maybe<Scalars['Boolean']>;
  /** An email address associated with the account. You can treat this as metadata: it is not used for authentication or messaging account holders. */
  email?: Maybe<Scalars['String']>;
  /** External accounts (bank accounts and debit cards) currently attached to this account */
  externalAccounts?: Maybe<ExternalAccounts>;
  /** Unique identifier for the object. */
  id: Scalars['String'];
  /**
   * This is an object representing a person associated with a Stripe account.
   *
   * A platform cannot access a Standard or Express account's persons after the account starts onboarding, such as after generating an account link for the account.
   * See the [Standard onboarding](https://stripe.com/docs/connect/standard-accounts) or [Express onboarding documentation](https://stripe.com/docs/connect/express-accounts) for information about platform pre-filling and account onboarding steps.
   *
   * Related guide: [Handling Identity Verification with the API](https://stripe.com/docs/connect/identity-verification-api#person-information).
   */
  individual?: Maybe<Person>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Maybe<Scalars['JSON']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object3;
  /** Whether Stripe can send payouts to this account. */
  payoutsEnabled?: Maybe<Scalars['Boolean']>;
  requirements?: Maybe<AccountRequirements>;
  /** Options for customizing how the account functions within Stripe. */
  settings?: Maybe<Settings>;
  tosAcceptance?: Maybe<AccountTosAcceptance>;
  /** The Stripe account type. Can be `standard`, `express`, or `custom`. */
  type?: Maybe<Type2>;
};

/** Business information about the account. */
export type BusinessProfile = {
  /** [The merchant category code for the account](https://stripe.com/docs/connect/setting-mcc). MCCs are used to classify businesses based on the goods or services they provide. */
  mcc?: Maybe<Scalars['String']>;
  /** The customer-facing business name. */
  name?: Maybe<Scalars['String']>;
  /** Internal-only description of the product sold or service provided by the business. It's used by Stripe for risk and underwriting purposes. */
  productDescription?: Maybe<Scalars['String']>;
  /** A publicly available mailing address for sending support issues to. */
  supportAddress?: Maybe<SupportAddress>;
  /** A publicly available email address for sending support issues to. */
  supportEmail?: Maybe<Scalars['String']>;
  /** A publicly available phone number to call with support issues. */
  supportPhone?: Maybe<Scalars['String']>;
  /** A publicly available website for handling support issues. */
  supportUrl?: Maybe<Scalars['String']>;
  /** The business's publicly available website. */
  url?: Maybe<Scalars['String']>;
};

/** A publicly available mailing address for sending support issues to. */
export type SupportAddress = {
  /** City, district, suburb, town, or village. */
  city?: Maybe<Scalars['String']>;
  /** Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)). */
  country?: Maybe<Scalars['String']>;
  /** Address line 1 (e.g., street, PO Box, or company name). */
  line1?: Maybe<Scalars['String']>;
  /** Address line 2 (e.g., apartment, suite, unit, or building). */
  line2?: Maybe<Scalars['String']>;
  /** ZIP or postal code. */
  postalCode?: Maybe<Scalars['String']>;
  /** State, county, province, or region. */
  state?: Maybe<Scalars['String']>;
};

export enum BusinessType {
  COMPANY = 'company',
  GOVERNMENT_ENTITY = 'government_entity',
  INDIVIDUAL = 'individual',
  NON_PROFIT = 'non_profit'
}

export type AccountCapabilities = {
  /** The status of the ACSS Direct Debits payments capability of the account, or whether the account can directly process ACSS Direct Debits charges. */
  acssDebitPayments?: Maybe<AcssDebitPayments>;
  /** The status of the Afterpay Clearpay capability of the account, or whether the account can directly process Afterpay Clearpay charges. */
  afterpayClearpayPayments?: Maybe<AfterpayClearpayPayments>;
  /** The status of the BECS Direct Debit (AU) payments capability of the account, or whether the account can directly process BECS Direct Debit (AU) charges. */
  auBecsDebitPayments?: Maybe<AuBecsDebitPayments>;
  /** The status of the Bacs Direct Debits payments capability of the account, or whether the account can directly process Bacs Direct Debits charges. */
  bacsDebitPayments?: Maybe<BacsDebitPayments>;
  /** The status of the Bancontact payments capability of the account, or whether the account can directly process Bancontact charges. */
  bancontactPayments?: Maybe<BancontactPayments>;
  /** The status of the boleto payments capability of the account, or whether the account can directly process boleto charges. */
  boletoPayments?: Maybe<BoletoPayments>;
  /** The status of the card issuing capability of the account, or whether you can use Issuing to distribute funds on cards */
  cardIssuing?: Maybe<CardIssuing>;
  /** The status of the card payments capability of the account, or whether the account can directly process credit and debit card charges. */
  cardPayments?: Maybe<CardPayments>;
  /** The status of the Cartes Bancaires payments capability of the account, or whether the account can directly process Cartes Bancaires card charges in EUR currency. */
  cartesBancairesPayments?: Maybe<CartesBancairesPayments>;
  /** The status of the EPS payments capability of the account, or whether the account can directly process EPS charges. */
  epsPayments?: Maybe<EpsPayments>;
  /** The status of the FPX payments capability of the account, or whether the account can directly process FPX charges. */
  fpxPayments?: Maybe<FpxPayments>;
  /** The status of the giropay payments capability of the account, or whether the account can directly process giropay charges. */
  giropayPayments?: Maybe<GiropayPayments>;
  /** The status of the GrabPay payments capability of the account, or whether the account can directly process GrabPay charges. */
  grabpayPayments?: Maybe<GrabpayPayments>;
  /** The status of the iDEAL payments capability of the account, or whether the account can directly process iDEAL charges. */
  idealPayments?: Maybe<IdealPayments>;
  /** The status of the JCB payments capability of the account, or whether the account (Japan only) can directly process JCB credit card charges in JPY currency. */
  jcbPayments?: Maybe<JcbPayments>;
  /** The status of the legacy payments capability of the account. */
  legacyPayments?: Maybe<LegacyPayments>;
  /** The status of the OXXO payments capability of the account, or whether the account can directly process OXXO charges. */
  oxxoPayments?: Maybe<OxxoPayments>;
  /** The status of the P24 payments capability of the account, or whether the account can directly process P24 charges. */
  p24Payments?: Maybe<P24Payments>;
  /** The status of the SEPA Direct Debits payments capability of the account, or whether the account can directly process SEPA Direct Debits charges. */
  sepaDebitPayments?: Maybe<SepaDebitPayments>;
  /** The status of the Sofort payments capability of the account, or whether the account can directly process Sofort charges. */
  sofortPayments?: Maybe<SofortPayments>;
  /** The status of the tax reporting 1099-K (US) capability of the account. */
  taxReportingUs1099K?: Maybe<TaxReportingUs1099K>;
  /** The status of the tax reporting 1099-MISC (US) capability of the account. */
  taxReportingUs1099Misc?: Maybe<TaxReportingUs1099Misc>;
  /** The status of the transfers capability of the account, or whether your platform can transfer funds to the account. */
  transfers?: Maybe<Transfers>;
};

export enum AcssDebitPayments {
  ACTIVE = 'active',
  INACTIVE = 'inactive',
  PENDING = 'pending'
}

export enum AfterpayClearpayPayments {
  ACTIVE = 'active',
  INACTIVE = 'inactive',
  PENDING = 'pending'
}

export enum AuBecsDebitPayments {
  ACTIVE = 'active',
  INACTIVE = 'inactive',
  PENDING = 'pending'
}

export enum BacsDebitPayments {
  ACTIVE = 'active',
  INACTIVE = 'inactive',
  PENDING = 'pending'
}

export enum BancontactPayments {
  ACTIVE = 'active',
  INACTIVE = 'inactive',
  PENDING = 'pending'
}

export enum BoletoPayments {
  ACTIVE = 'active',
  INACTIVE = 'inactive',
  PENDING = 'pending'
}

export enum CardIssuing {
  ACTIVE = 'active',
  INACTIVE = 'inactive',
  PENDING = 'pending'
}

export enum CardPayments {
  ACTIVE = 'active',
  INACTIVE = 'inactive',
  PENDING = 'pending'
}

export enum CartesBancairesPayments {
  ACTIVE = 'active',
  INACTIVE = 'inactive',
  PENDING = 'pending'
}

export enum EpsPayments {
  ACTIVE = 'active',
  INACTIVE = 'inactive',
  PENDING = 'pending'
}

export enum FpxPayments {
  ACTIVE = 'active',
  INACTIVE = 'inactive',
  PENDING = 'pending'
}

export enum GiropayPayments {
  ACTIVE = 'active',
  INACTIVE = 'inactive',
  PENDING = 'pending'
}

export enum GrabpayPayments {
  ACTIVE = 'active',
  INACTIVE = 'inactive',
  PENDING = 'pending'
}

export enum IdealPayments {
  ACTIVE = 'active',
  INACTIVE = 'inactive',
  PENDING = 'pending'
}

export enum JcbPayments {
  ACTIVE = 'active',
  INACTIVE = 'inactive',
  PENDING = 'pending'
}

export enum LegacyPayments {
  ACTIVE = 'active',
  INACTIVE = 'inactive',
  PENDING = 'pending'
}

export enum OxxoPayments {
  ACTIVE = 'active',
  INACTIVE = 'inactive',
  PENDING = 'pending'
}

export enum P24Payments {
  ACTIVE = 'active',
  INACTIVE = 'inactive',
  PENDING = 'pending'
}

export enum SepaDebitPayments {
  ACTIVE = 'active',
  INACTIVE = 'inactive',
  PENDING = 'pending'
}

export enum SofortPayments {
  ACTIVE = 'active',
  INACTIVE = 'inactive',
  PENDING = 'pending'
}

export enum TaxReportingUs1099K {
  ACTIVE = 'active',
  INACTIVE = 'inactive',
  PENDING = 'pending'
}

export enum TaxReportingUs1099Misc {
  ACTIVE = 'active',
  INACTIVE = 'inactive',
  PENDING = 'pending'
}

export enum Transfers {
  ACTIVE = 'active',
  INACTIVE = 'inactive',
  PENDING = 'pending'
}

export type LegalEntityCompany = {
  address?: Maybe<Address>;
  /** The Kana variation of the company's primary address (Japan only). */
  addressKana?: Maybe<AddressKana>;
  /** The Kanji variation of the company's primary address (Japan only). */
  addressKanji?: Maybe<AddressKanji>;
  /** Whether the company's directors have been provided. This Boolean will be `true` if you've manually indicated that all directors are provided via [the `directors_provided` parameter](https://stripe.com/docs/api/accounts/update#update_account-company-directors_provided). */
  directorsProvided?: Maybe<Scalars['Boolean']>;
  /** Whether the company's executives have been provided. This Boolean will be `true` if you've manually indicated that all executives are provided via [the `executives_provided` parameter](https://stripe.com/docs/api/accounts/update#update_account-company-executives_provided), or if Stripe determined that sufficient executives were provided. */
  executivesProvided?: Maybe<Scalars['Boolean']>;
  /** The company's legal name. */
  name?: Maybe<Scalars['String']>;
  /** The Kana variation of the company's legal name (Japan only). */
  nameKana?: Maybe<Scalars['String']>;
  /** The Kanji variation of the company's legal name (Japan only). */
  nameKanji?: Maybe<Scalars['String']>;
  /** Whether the company's owners have been provided. This Boolean will be `true` if you've manually indicated that all owners are provided via [the `owners_provided` parameter](https://stripe.com/docs/api/accounts/update#update_account-company-owners_provided), or if Stripe determined that sufficient owners were provided. Stripe determines ownership requirements using both the number of owners provided and their total percent ownership (calculated by adding the `percent_ownership` of each owner together). */
  ownersProvided?: Maybe<Scalars['Boolean']>;
  /** The company's phone number (used for verification). */
  phone?: Maybe<Scalars['String']>;
  /** The category identifying the legal structure of the company or legal entity. See [Business structure](https://stripe.com/docs/connect/identity-verification#business-structure) for more details. */
  structure?: Maybe<Structure>;
  /** Whether the company's business ID number was provided. */
  taxIdProvided?: Maybe<Scalars['Boolean']>;
  /** The jurisdiction in which the `tax_id` is registered (Germany-based companies only). */
  taxIdRegistrar?: Maybe<Scalars['String']>;
  /** Whether the company's business VAT number was provided. */
  vatIdProvided?: Maybe<Scalars['Boolean']>;
  /** Information on the verification state of the company. */
  verification?: Maybe<Verification>;
};

/** The Kana variation of the company's primary address (Japan only). */
export type AddressKana = {
  /** City/Ward. */
  city?: Maybe<Scalars['String']>;
  /** Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)). */
  country?: Maybe<Scalars['String']>;
  /** Block/Building number. */
  line1?: Maybe<Scalars['String']>;
  /** Building details. */
  line2?: Maybe<Scalars['String']>;
  /** ZIP or postal code. */
  postalCode?: Maybe<Scalars['String']>;
  /** Prefecture. */
  state?: Maybe<Scalars['String']>;
  /** Town/cho-me. */
  town?: Maybe<Scalars['String']>;
};

/** The Kanji variation of the company's primary address (Japan only). */
export type AddressKanji = {
  /** City/Ward. */
  city?: Maybe<Scalars['String']>;
  /** Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)). */
  country?: Maybe<Scalars['String']>;
  /** Block/Building number. */
  line1?: Maybe<Scalars['String']>;
  /** Building details. */
  line2?: Maybe<Scalars['String']>;
  /** ZIP or postal code. */
  postalCode?: Maybe<Scalars['String']>;
  /** Prefecture. */
  state?: Maybe<Scalars['String']>;
  /** Town/cho-me. */
  town?: Maybe<Scalars['String']>;
};

export enum Structure {
  FREE_ZONE_ESTABLISHMENT = 'free_zone_establishment',
  FREE_ZONE_LLC = 'free_zone_llc',
  GOVERNMENT_INSTRUMENTALITY = 'government_instrumentality',
  GOVERNMENTAL_UNIT = 'governmental_unit',
  INCORPORATED_NON_PROFIT = 'incorporated_non_profit',
  LIMITED_LIABILITY_PARTNERSHIP = 'limited_liability_partnership',
  LLC = 'llc',
  MULTI_MEMBER_LLC = 'multi_member_llc',
  PRIVATE_COMPANY = 'private_company',
  PRIVATE_CORPORATION = 'private_corporation',
  PRIVATE_PARTNERSHIP = 'private_partnership',
  PUBLIC_COMPANY = 'public_company',
  PUBLIC_CORPORATION = 'public_corporation',
  PUBLIC_PARTNERSHIP = 'public_partnership',
  SINGLE_MEMBER_LLC = 'single_member_llc',
  SOLE_ESTABLISHMENT = 'sole_establishment',
  SOLE_PROPRIETORSHIP = 'sole_proprietorship',
  TAX_EXEMPT_GOVERNMENT_INSTRUMENTALITY = 'tax_exempt_government_instrumentality',
  UNINCORPORATED_ASSOCIATION = 'unincorporated_association',
  UNINCORPORATED_NON_PROFIT = 'unincorporated_non_profit'
}

/** Information on the verification state of the company. */
export type Verification = {
  document?: Maybe<Document>;
};

export type Document = {
  /** The back of a document returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `additional_verification`. */
  back?: Maybe<Scalars['JSON']>;
  /** A user-displayable string describing the verification state of this document. */
  details?: Maybe<Scalars['String']>;
  /** One of `document_corrupt`, `document_expired`, `document_failed_copy`, `document_failed_greyscale`, `document_failed_other`, `document_failed_test_mode`, `document_fraudulent`, `document_incomplete`, `document_invalid`, `document_manipulated`, `document_not_readable`, `document_not_uploaded`, `document_type_not_supported`, or `document_too_large`. A machine-readable code specifying the verification state for this document. */
  detailsCode?: Maybe<Scalars['String']>;
  /** The front of a document returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `additional_verification`. */
  front?: Maybe<Scalars['JSON']>;
};

export type AccountController = {
  /** `true` if the Connect application retrieving the resource controls the account and can therefore exercise [platform controls](https://stripe.com/docs/connect/platform-controls-for-standard-accounts). Otherwise, this field is null. */
  isController?: Maybe<Scalars['Boolean']>;
  /** The controller type. Can be `application`, if a Connect application controls the account, or `account`, if the account controls itself. */
  type?: Maybe<Type>;
};

export enum Type {
  ACCOUNT = 'account',
  APPLICATION = 'application'
}

/** External accounts (bank accounts and debit cards) currently attached to this account */
export type ExternalAccounts = {
  /** The list contains all external accounts that have been attached to the Stripe account. These may be bank accounts or cards. */
  data: Array<Maybe<DataListItem>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

export type DataListItem = {
  account?: Maybe<Scalars['JSON']>;
  /** The name of the person or business that owns the bank account. */
  accountHolderName?: Maybe<Scalars['String']>;
  /** The type of entity that holds the account. This can be either `individual` or `company`. */
  accountHolderType?: Maybe<Scalars['String']>;
  /** The bank account type. This can only be `checking` or `savings` in most countries. In Japan, this can only be `futsu` or `toza`. */
  accountType?: Maybe<Scalars['String']>;
  /** City/District/Suburb/Town/Village. */
  addressCity?: Maybe<Scalars['String']>;
  /** Billing address country, if provided when creating card. */
  addressCountry?: Maybe<Scalars['String']>;
  /** Address line 1 (Street address/PO Box/Company name). */
  addressLine1?: Maybe<Scalars['String']>;
  /** If `address_line1` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. */
  addressLine1Check?: Maybe<Scalars['String']>;
  /** Address line 2 (Apartment/Suite/Unit/Building). */
  addressLine2?: Maybe<Scalars['String']>;
  /** State/County/Province/Region. */
  addressState?: Maybe<Scalars['String']>;
  /** ZIP or postal code. */
  addressZip?: Maybe<Scalars['String']>;
  /** If `address_zip` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. */
  addressZipCheck?: Maybe<Scalars['String']>;
  availablePayoutMethods?: Maybe<Scalars['JSON']>;
  /** Name of the bank associated with the routing number (e.g., `WELLS FARGO`). */
  bankName?: Maybe<Scalars['String']>;
  /** Card brand. Can be `American Express`, `Diners Club`, `Discover`, `JCB`, `MasterCard`, `UnionPay`, `Visa`, or `Unknown`. */
  brand?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['JSON']>;
  currency?: Maybe<Scalars['JSON']>;
  customer?: Maybe<Scalars['JSON']>;
  /** If a CVC was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. A result of unchecked indicates that CVC was provided but hasn't been checked yet. Checks are typically performed when attaching a card to a Customer object, or when creating a charge. For more details, see [Check if a card is valid without a charge](https://support.stripe.com/questions/check-if-a-card-is-valid-without-a-charge). */
  cvcCheck?: Maybe<Scalars['String']>;
  defaultForCurrency?: Maybe<Scalars['JSON']>;
  /** (For tokenized numbers only.) The last four digits of the device account number. */
  dynamicLast4?: Maybe<Scalars['String']>;
  /** Two-digit number representing the card's expiration month. */
  expMonth?: Maybe<Scalars['Int']>;
  /** Four-digit number representing the card's expiration year. */
  expYear?: Maybe<Scalars['Int']>;
  fingerprint?: Maybe<Scalars['JSON']>;
  /** Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`. */
  funding?: Maybe<Scalars['String']>;
  /** Unique identifier for the object. */
  id?: Maybe<Scalars['String']>;
  last4?: Maybe<Scalars['JSON']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Maybe<Scalars['JSON']>;
  /** Cardholder name. */
  name?: Maybe<Scalars['String']>;
  object?: Maybe<Scalars['JSON']>;
  /** The recipient that this card belongs to. This attribute will not be in the card object if the card belongs to a customer or account instead. */
  recipient?: Maybe<Scalars['JSON']>;
  /** The routing transit number for the bank account. */
  routingNumber?: Maybe<Scalars['String']>;
  /**
   * For bank accounts, possible values are `new`, `validated`, `verified`, `verification_failed`, or `errored`. A bank account that hasn't had any activity or validation performed is `new`. If Stripe can determine that the bank account exists, its status will be `validated`. Note that there often isn’t enough information to know (e.g., for smaller credit unions), and the validation is not always run. If customer bank account verification has succeeded, the bank account status will be `verified`. If the verification failed for any reason, such as microdeposit failure, the status will be `verification_failed`. If a transfer sent to this bank account fails, we'll set the status to `errored` and will not continue to send transfers until the bank details are updated.
   *
   * For external accounts, possible values are `new` and `errored`. Validations aren't run against external accounts because they're only used for payouts. This means the other statuses don't apply. If a transfer fails, the status is set to `errored` and transfers are stopped until account details are updated.
   */
  status?: Maybe<Scalars['String']>;
  /** If the card number is tokenized, this is the method that was used. Can be `android_pay` (includes Google Pay), `apple_pay`, `masterpass`, `visa_checkout`, or null. */
  tokenizationMethod?: Maybe<Scalars['String']>;
};

export enum Object4 {
  LIST = 'list'
}

/**
 * This is an object representing a person associated with a Stripe account.
 *
 * A platform cannot access a Standard or Express account's persons after the account starts onboarding, such as after generating an account link for the account.
 * See the [Standard onboarding](https://stripe.com/docs/connect/standard-accounts) or [Express onboarding documentation](https://stripe.com/docs/connect/express-accounts) for information about platform pre-filling and account onboarding steps.
 *
 * Related guide: [Handling Identity Verification with the API](https://stripe.com/docs/connect/identity-verification-api#person-information).
 */
export type Person = {
  /** The account the person is associated with. */
  account: Scalars['String'];
  address?: Maybe<Address>;
  addressKana?: Maybe<AddressKana2>;
  addressKanji?: Maybe<AddressKanji2>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created: Scalars['Int'];
  dob?: Maybe<LegalEntityDob>;
  /** The person's email address. */
  email?: Maybe<Scalars['String']>;
  /** The person's first name. */
  firstName?: Maybe<Scalars['String']>;
  /** The Kana variation of the person's first name (Japan only). */
  firstNameKana?: Maybe<Scalars['String']>;
  /** The Kanji variation of the person's first name (Japan only). */
  firstNameKanji?: Maybe<Scalars['String']>;
  /** The person's gender (International regulations require either "male" or "female"). */
  gender?: Maybe<Scalars['String']>;
  /** Unique identifier for the object. */
  id: Scalars['String'];
  /** Whether the person's `id_number` was provided. */
  idNumberProvided?: Maybe<Scalars['Boolean']>;
  /** The person's last name. */
  lastName?: Maybe<Scalars['String']>;
  /** The Kana variation of the person's last name (Japan only). */
  lastNameKana?: Maybe<Scalars['String']>;
  /** The Kanji variation of the person's last name (Japan only). */
  lastNameKanji?: Maybe<Scalars['String']>;
  /** The person's maiden name. */
  maidenName?: Maybe<Scalars['String']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Maybe<Scalars['JSON']>;
  /** The country where the person is a national. */
  nationality?: Maybe<Scalars['String']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object5;
  /** The person's phone number. */
  phone?: Maybe<Scalars['String']>;
  /** Indicates if the person or any of their representatives, family members, or other closely related persons, declares that they hold or have held an important public job or function, in any jurisdiction. */
  politicalExposure?: Maybe<PoliticalExposure>;
  relationship?: Maybe<PersonRelationship>;
  requirements?: Maybe<Requirements>;
  /** Whether the last four digits of the person's Social Security number have been provided (U.S. only). */
  ssnLast4Provided?: Maybe<Scalars['Boolean']>;
  verification?: Maybe<LegalEntityPersonVerification>;
};

export type AddressKana2 = {
  /** City/Ward. */
  city?: Maybe<Scalars['String']>;
  /** Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)). */
  country?: Maybe<Scalars['String']>;
  /** Block/Building number. */
  line1?: Maybe<Scalars['String']>;
  /** Building details. */
  line2?: Maybe<Scalars['String']>;
  /** ZIP or postal code. */
  postalCode?: Maybe<Scalars['String']>;
  /** Prefecture. */
  state?: Maybe<Scalars['String']>;
  /** Town/cho-me. */
  town?: Maybe<Scalars['String']>;
};

export type AddressKanji2 = {
  /** City/Ward. */
  city?: Maybe<Scalars['String']>;
  /** Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)). */
  country?: Maybe<Scalars['String']>;
  /** Block/Building number. */
  line1?: Maybe<Scalars['String']>;
  /** Building details. */
  line2?: Maybe<Scalars['String']>;
  /** ZIP or postal code. */
  postalCode?: Maybe<Scalars['String']>;
  /** Prefecture. */
  state?: Maybe<Scalars['String']>;
  /** Town/cho-me. */
  town?: Maybe<Scalars['String']>;
};

export type LegalEntityDob = {
  /** The day of birth, between 1 and 31. */
  day?: Maybe<Scalars['Int']>;
  /** The month of birth, between 1 and 12. */
  month?: Maybe<Scalars['Int']>;
  /** The four-digit year of birth. */
  year?: Maybe<Scalars['Int']>;
};

export enum Object5 {
  PERSON = 'person'
}

export enum PoliticalExposure {
  EXISTING = 'existing',
  NONE = 'none'
}

export type PersonRelationship = {
  /** Whether the person is a director of the account's legal entity. Currently only required for accounts in the EU. Directors are typically members of the governing board of the company, or responsible for ensuring the company meets its regulatory obligations. */
  director?: Maybe<Scalars['Boolean']>;
  /** Whether the person has significant responsibility to control, manage, or direct the organization. */
  executive?: Maybe<Scalars['Boolean']>;
  /** Whether the person is an owner of the account’s legal entity. */
  owner?: Maybe<Scalars['Boolean']>;
  /** The percent owned by the person of the account's legal entity. */
  percentOwnership?: Maybe<Scalars['Float']>;
  /** Whether the person is authorized as the primary representative of the account. This is the person nominated by the business to provide information about themselves, and general information about the account. There can only be one representative at any given time. At the time the account is created, this person should be set to the person responsible for opening the account. */
  representative?: Maybe<Scalars['Boolean']>;
  /** The person's title (e.g., CEO, Support Engineer). */
  title?: Maybe<Scalars['String']>;
};

export type Requirements = {
  /** Fields that need to be collected to keep the person's account enabled. If not collected by the account's `current_deadline`, these fields appear in `past_due` as well, and the account is disabled. */
  currentlyDue?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Fields that are `currently_due` and need to be collected again because validation or verification failed. */
  errors?: Maybe<Array<Maybe<AccountRequirementsError>>>;
  /** Fields that need to be collected assuming all volume thresholds are reached. As they become required, they appear in `currently_due` as well, and the account's `current_deadline` becomes set. */
  eventuallyDue?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Fields that weren't collected by the account's `current_deadline`. These fields need to be collected to enable the person's account. */
  pastDue?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Fields that may become required depending on the results of verification or review. Will be an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due`, `currently_due`, or `past_due`. */
  pendingVerification?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type AccountRequirementsError = {
  /** The code for the type of error. */
  code: Code;
  /** An informative message that indicates the error type and provides additional details about the error. */
  reason: Scalars['String'];
  /** The specific user onboarding requirement field (in the requirements hash) that needs to be resolved. */
  requirement: Scalars['String'];
};

export enum Code {
  INVALID_ADDRESS_CITY_STATE_POSTAL_CODE = 'invalid_address_city_state_postal_code',
  INVALID_STREET_ADDRESS = 'invalid_street_address',
  INVALID_VALUE_OTHER = 'invalid_value_other',
  VERIFICATION_DOCUMENT_ADDRESS_MISMATCH = 'verification_document_address_mismatch',
  VERIFICATION_DOCUMENT_ADDRESS_MISSING = 'verification_document_address_missing',
  VERIFICATION_DOCUMENT_CORRUPT = 'verification_document_corrupt',
  VERIFICATION_DOCUMENT_COUNTRY_NOT_SUPPORTED = 'verification_document_country_not_supported',
  VERIFICATION_DOCUMENT_DOB_MISMATCH = 'verification_document_dob_mismatch',
  VERIFICATION_DOCUMENT_DUPLICATE_TYPE = 'verification_document_duplicate_type',
  VERIFICATION_DOCUMENT_EXPIRED = 'verification_document_expired',
  VERIFICATION_DOCUMENT_FAILED_COPY = 'verification_document_failed_copy',
  VERIFICATION_DOCUMENT_FAILED_GREYSCALE = 'verification_document_failed_greyscale',
  VERIFICATION_DOCUMENT_FAILED_OTHER = 'verification_document_failed_other',
  VERIFICATION_DOCUMENT_FAILED_TEST_MODE = 'verification_document_failed_test_mode',
  VERIFICATION_DOCUMENT_FRAUDULENT = 'verification_document_fraudulent',
  VERIFICATION_DOCUMENT_ID_NUMBER_MISMATCH = 'verification_document_id_number_mismatch',
  VERIFICATION_DOCUMENT_ID_NUMBER_MISSING = 'verification_document_id_number_missing',
  VERIFICATION_DOCUMENT_INCOMPLETE = 'verification_document_incomplete',
  VERIFICATION_DOCUMENT_INVALID = 'verification_document_invalid',
  VERIFICATION_DOCUMENT_ISSUE_OR_EXPIRY_DATE_MISSING = 'verification_document_issue_or_expiry_date_missing',
  VERIFICATION_DOCUMENT_MANIPULATED = 'verification_document_manipulated',
  VERIFICATION_DOCUMENT_MISSING_BACK = 'verification_document_missing_back',
  VERIFICATION_DOCUMENT_MISSING_FRONT = 'verification_document_missing_front',
  VERIFICATION_DOCUMENT_NAME_MISMATCH = 'verification_document_name_mismatch',
  VERIFICATION_DOCUMENT_NAME_MISSING = 'verification_document_name_missing',
  VERIFICATION_DOCUMENT_NATIONALITY_MISMATCH = 'verification_document_nationality_mismatch',
  VERIFICATION_DOCUMENT_NOT_READABLE = 'verification_document_not_readable',
  VERIFICATION_DOCUMENT_NOT_SIGNED = 'verification_document_not_signed',
  VERIFICATION_DOCUMENT_NOT_UPLOADED = 'verification_document_not_uploaded',
  VERIFICATION_DOCUMENT_PHOTO_MISMATCH = 'verification_document_photo_mismatch',
  VERIFICATION_DOCUMENT_TOO_LARGE = 'verification_document_too_large',
  VERIFICATION_DOCUMENT_TYPE_NOT_SUPPORTED = 'verification_document_type_not_supported',
  VERIFICATION_FAILED_ADDRESS_MATCH = 'verification_failed_address_match',
  VERIFICATION_FAILED_BUSINESS_IEC_NUMBER = 'verification_failed_business_iec_number',
  VERIFICATION_FAILED_DOCUMENT_MATCH = 'verification_failed_document_match',
  VERIFICATION_FAILED_ID_NUMBER_MATCH = 'verification_failed_id_number_match',
  VERIFICATION_FAILED_KEYED_IDENTITY = 'verification_failed_keyed_identity',
  VERIFICATION_FAILED_KEYED_MATCH = 'verification_failed_keyed_match',
  VERIFICATION_FAILED_NAME_MATCH = 'verification_failed_name_match',
  VERIFICATION_FAILED_OTHER = 'verification_failed_other',
  VERIFICATION_FAILED_TAX_ID_MATCH = 'verification_failed_tax_id_match',
  VERIFICATION_FAILED_TAX_ID_NOT_ISSUED = 'verification_failed_tax_id_not_issued',
  VERIFICATION_MISSING_EXECUTIVES = 'verification_missing_executives',
  VERIFICATION_MISSING_OWNERS = 'verification_missing_owners',
  VERIFICATION_REQUIRES_ADDITIONAL_MEMORANDUM_OF_ASSOCIATIONS = 'verification_requires_additional_memorandum_of_associations'
}

export type LegalEntityPersonVerification = {
  /** A document showing address, either a passport, local ID card, or utility bill from a well-known utility company. */
  additionalDocument?: Maybe<AdditionalDocument>;
  /** A user-displayable string describing the verification state for the person. For example, this may say "Provided identity information could not be verified". */
  details?: Maybe<Scalars['String']>;
  /** One of `document_address_mismatch`, `document_dob_mismatch`, `document_duplicate_type`, `document_id_number_mismatch`, `document_name_mismatch`, `document_nationality_mismatch`, `failed_keyed_identity`, or `failed_other`. A machine-readable code specifying the verification state for the person. */
  detailsCode?: Maybe<Scalars['String']>;
  document?: Maybe<LegalEntityPersonVerificationDocument>;
  /** The state of verification for the person. Possible values are `unverified`, `pending`, or `verified`. */
  status: Scalars['String'];
};

/** A document showing address, either a passport, local ID card, or utility bill from a well-known utility company. */
export type AdditionalDocument = {
  /** The back of an ID returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `identity_document`. */
  back?: Maybe<Scalars['JSON']>;
  /** A user-displayable string describing the verification state of this document. For example, if a document is uploaded and the picture is too fuzzy, this may say "Identity document is too unclear to read". */
  details?: Maybe<Scalars['String']>;
  /** One of `document_corrupt`, `document_country_not_supported`, `document_expired`, `document_failed_copy`, `document_failed_other`, `document_failed_test_mode`, `document_fraudulent`, `document_failed_greyscale`, `document_incomplete`, `document_invalid`, `document_manipulated`, `document_missing_back`, `document_missing_front`, `document_not_readable`, `document_not_uploaded`, `document_photo_mismatch`, `document_too_large`, or `document_type_not_supported`. A machine-readable code specifying the verification state for this document. */
  detailsCode?: Maybe<Scalars['String']>;
  /** The front of an ID returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `identity_document`. */
  front?: Maybe<Scalars['JSON']>;
};

export type LegalEntityPersonVerificationDocument = {
  /** The back of an ID returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `identity_document`. */
  back?: Maybe<Scalars['JSON']>;
  /** A user-displayable string describing the verification state of this document. For example, if a document is uploaded and the picture is too fuzzy, this may say "Identity document is too unclear to read". */
  details?: Maybe<Scalars['String']>;
  /** One of `document_corrupt`, `document_country_not_supported`, `document_expired`, `document_failed_copy`, `document_failed_other`, `document_failed_test_mode`, `document_fraudulent`, `document_failed_greyscale`, `document_incomplete`, `document_invalid`, `document_manipulated`, `document_missing_back`, `document_missing_front`, `document_not_readable`, `document_not_uploaded`, `document_photo_mismatch`, `document_too_large`, or `document_type_not_supported`. A machine-readable code specifying the verification state for this document. */
  detailsCode?: Maybe<Scalars['String']>;
  /** The front of an ID returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `identity_document`. */
  front?: Maybe<Scalars['JSON']>;
};

export enum Object3 {
  ACCOUNT = 'account'
}

export type AccountRequirements = {
  /** Date by which the fields in `currently_due` must be collected to keep the account enabled. These fields may disable the account sooner if the next threshold is reached before they are collected. */
  currentDeadline?: Maybe<Scalars['Int']>;
  /** Fields that need to be collected to keep the account enabled. If not collected by `current_deadline`, these fields appear in `past_due` as well, and the account is disabled. */
  currentlyDue?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** If the account is disabled, this string describes why. Can be `requirements.past_due`, `requirements.pending_verification`, `listed`, `platform_paused`, `rejected.fraud`, `rejected.listed`, `rejected.terms_of_service`, `rejected.other`, `under_review`, or `other`. */
  disabledReason?: Maybe<Scalars['String']>;
  /** Fields that are `currently_due` and need to be collected again because validation or verification failed. */
  errors?: Maybe<Array<Maybe<AccountRequirementsError>>>;
  /** Fields that need to be collected assuming all volume thresholds are reached. As they become required, they appear in `currently_due` as well, and `current_deadline` becomes set. */
  eventuallyDue?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Fields that weren't collected by `current_deadline`. These fields need to be collected to enable the account. */
  pastDue?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Fields that may become required depending on the results of verification or review. Will be an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due`, `currently_due`, or `past_due`. */
  pendingVerification?: Maybe<Array<Maybe<Scalars['String']>>>;
};

/** Options for customizing how the account functions within Stripe. */
export type Settings = {
  bacsDebitPayments?: Maybe<BacsDebitPayments2>;
  branding?: Maybe<Branding>;
  cardIssuing?: Maybe<CardIssuing2>;
  cardPayments?: Maybe<CardPayments2>;
  dashboard?: Maybe<Dashboard>;
  payments?: Maybe<Payments>;
  payouts?: Maybe<Payouts>;
  sepaDebitPayments?: Maybe<SepaDebitPayments2>;
};

export type BacsDebitPayments2 = {
  /** The Bacs Direct Debit Display Name for this account. For payments made with Bacs Direct Debit, this will appear on the mandate, and as the statement descriptor. */
  displayName?: Maybe<Scalars['String']>;
};

export type Branding = {
  /** (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) An icon for the account. Must be square and at least 128px x 128px. */
  icon?: Maybe<Scalars['JSON']>;
  /** (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) A logo for the account that will be used in Checkout instead of the icon and without the account's name next to it if provided. Must be at least 128px x 128px. */
  logo?: Maybe<Scalars['JSON']>;
  /** A CSS hex color value representing the primary branding color for this account */
  primaryColor?: Maybe<Scalars['String']>;
  /** A CSS hex color value representing the secondary branding color for this account */
  secondaryColor?: Maybe<Scalars['String']>;
};

export type CardIssuing2 = {
  tosAcceptance?: Maybe<CardIssuingAccountTermsOfService>;
};

export type CardIssuingAccountTermsOfService = {
  /** The Unix timestamp marking when the account representative accepted the service agreement. */
  date?: Maybe<Scalars['Int']>;
  /** The IP address from which the account representative accepted the service agreement. */
  ip?: Maybe<Scalars['String']>;
  /** The user agent of the browser from which the account representative accepted the service agreement. */
  userAgent?: Maybe<Scalars['String']>;
};

export type CardPayments2 = {
  declineOn?: Maybe<AccountDeclineChargeOn>;
  /** The default text that appears on credit card statements when a charge is made. This field prefixes any dynamic `statement_descriptor` specified on the charge. `statement_descriptor_prefix` is useful for maximizing descriptor space for the dynamic portion. */
  statementDescriptorPrefix?: Maybe<Scalars['String']>;
};

export type AccountDeclineChargeOn = {
  /** Whether Stripe automatically declines charges with an incorrect ZIP or postal code. This setting only applies when a ZIP or postal code is provided and they fail bank verification. */
  avsFailure: Scalars['Boolean'];
  /** Whether Stripe automatically declines charges with an incorrect CVC. This setting only applies when a CVC is provided and it fails bank verification. */
  cvcFailure: Scalars['Boolean'];
};

export type Dashboard = {
  /** The display name for this account. This is used on the Stripe Dashboard to differentiate between accounts. */
  displayName?: Maybe<Scalars['String']>;
  /** The timezone used in the Stripe Dashboard for this account. A list of possible time zone values is maintained at the [IANA Time Zone Database](http://www.iana.org/time-zones). */
  timezone?: Maybe<Scalars['String']>;
};

export type Payments = {
  /** The default text that appears on credit card statements when a charge is made. This field prefixes any dynamic `statement_descriptor` specified on the charge. */
  statementDescriptor?: Maybe<Scalars['String']>;
  /** The Kana variation of the default text that appears on credit card statements when a charge is made (Japan only) */
  statementDescriptorKana?: Maybe<Scalars['String']>;
  /** The Kanji variation of the default text that appears on credit card statements when a charge is made (Japan only) */
  statementDescriptorKanji?: Maybe<Scalars['String']>;
};

export type Payouts = {
  /** A Boolean indicating if Stripe should try to reclaim negative balances from an attached bank account. See our [Understanding Connect Account Balances](https://stripe.com/docs/connect/account-balances) documentation for details. Default value is `true` for Express accounts and `false` for Custom accounts. */
  debitNegativeBalances: Scalars['Boolean'];
  schedule: TransferSchedule;
  /** The text that appears on the bank account statement for payouts. If not set, this defaults to the platform's bank descriptor as set in the Dashboard. */
  statementDescriptor?: Maybe<Scalars['String']>;
};

export type TransferSchedule = {
  /** The number of days charges for the account will be held before being paid out. */
  delayDays: Scalars['Int'];
  /** How frequently funds will be paid out. One of `manual` (payouts only created via API call), `daily`, `weekly`, or `monthly`. */
  interval: Scalars['String'];
  /** The day of the month funds will be paid out. Only shown if `interval` is monthly. Payouts scheduled between the 29th and 31st of the month are sent on the last day of shorter months. */
  monthlyAnchor?: Maybe<Scalars['Int']>;
  /** The day of the week funds will be paid out, of the style 'monday', 'tuesday', etc. Only shown if `interval` is weekly. */
  weeklyAnchor?: Maybe<Scalars['String']>;
};

export type SepaDebitPayments2 = {
  /** SEPA creditor identifier that identifies the company making the payment. */
  creditorId?: Maybe<Scalars['String']>;
};

export type AccountTosAcceptance = {
  /** The Unix timestamp marking when the account representative accepted their service agreement */
  date?: Maybe<Scalars['Int']>;
  /** The IP address from which the account representative accepted their service agreement */
  ip?: Maybe<Scalars['String']>;
  /** The user's service agreement type */
  serviceAgreement?: Maybe<Scalars['String']>;
  /** The user agent of the browser from which the account representative accepted their service agreement */
  userAgent?: Maybe<Scalars['String']>;
};

export enum Type2 {
  CUSTOM = 'custom',
  EXPRESS = 'express',
  STANDARD = 'standard'
}

export type Polymorphic = {
  account?: Maybe<Scalars['JSON']>;
  /** The name of the person or business that owns the bank account. */
  accountHolderName?: Maybe<Scalars['String']>;
  /** The type of entity that holds the account. This can be either `individual` or `company`. */
  accountHolderType?: Maybe<Scalars['String']>;
  /** The bank account type. This can only be `checking` or `savings` in most countries. In Japan, this can only be `futsu` or `toza`. */
  accountType?: Maybe<Scalars['String']>;
  /** City/District/Suburb/Town/Village. */
  addressCity?: Maybe<Scalars['String']>;
  /** Billing address country, if provided when creating card. */
  addressCountry?: Maybe<Scalars['String']>;
  /** Address line 1 (Street address/PO Box/Company name). */
  addressLine1?: Maybe<Scalars['String']>;
  /** If `address_line1` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. */
  addressLine1Check?: Maybe<Scalars['String']>;
  /** Address line 2 (Apartment/Suite/Unit/Building). */
  addressLine2?: Maybe<Scalars['String']>;
  /** State/County/Province/Region. */
  addressState?: Maybe<Scalars['String']>;
  /** ZIP or postal code. */
  addressZip?: Maybe<Scalars['String']>;
  /** If `address_zip` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. */
  addressZipCheck?: Maybe<Scalars['String']>;
  availablePayoutMethods?: Maybe<Scalars['JSON']>;
  /** Name of the bank associated with the routing number (e.g., `WELLS FARGO`). */
  bankName?: Maybe<Scalars['String']>;
  /** Card brand. Can be `American Express`, `Diners Club`, `Discover`, `JCB`, `MasterCard`, `UnionPay`, `Visa`, or `Unknown`. */
  brand?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['JSON']>;
  currency?: Maybe<Scalars['JSON']>;
  customer?: Maybe<Scalars['JSON']>;
  /** If a CVC was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. A result of unchecked indicates that CVC was provided but hasn't been checked yet. Checks are typically performed when attaching a card to a Customer object, or when creating a charge. For more details, see [Check if a card is valid without a charge](https://support.stripe.com/questions/check-if-a-card-is-valid-without-a-charge). */
  cvcCheck?: Maybe<Scalars['String']>;
  defaultForCurrency?: Maybe<Scalars['JSON']>;
  /** (For tokenized numbers only.) The last four digits of the device account number. */
  dynamicLast4?: Maybe<Scalars['String']>;
  /** Two-digit number representing the card's expiration month. */
  expMonth?: Maybe<Scalars['Int']>;
  /** Four-digit number representing the card's expiration year. */
  expYear?: Maybe<Scalars['Int']>;
  fingerprint?: Maybe<Scalars['JSON']>;
  /** Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`. */
  funding?: Maybe<Scalars['String']>;
  /** Unique identifier for the object. */
  id?: Maybe<Scalars['String']>;
  last4?: Maybe<Scalars['JSON']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Maybe<Scalars['JSON']>;
  /** Cardholder name. */
  name?: Maybe<Scalars['String']>;
  object?: Maybe<Scalars['JSON']>;
  /** The recipient that this card belongs to. This attribute will not be in the card object if the card belongs to a customer or account instead. */
  recipient?: Maybe<Scalars['JSON']>;
  /** The routing transit number for the bank account. */
  routingNumber?: Maybe<Scalars['String']>;
  /**
   * For bank accounts, possible values are `new`, `validated`, `verified`, `verification_failed`, or `errored`. A bank account that hasn't had any activity or validation performed is `new`. If Stripe can determine that the bank account exists, its status will be `validated`. Note that there often isn’t enough information to know (e.g., for smaller credit unions), and the validation is not always run. If customer bank account verification has succeeded, the bank account status will be `verified`. If the verification failed for any reason, such as microdeposit failure, the status will be `verification_failed`. If a transfer sent to this bank account fails, we'll set the status to `errored` and will not continue to send transfers until the bank details are updated.
   *
   * For external accounts, possible values are `new` and `errored`. Validations aren't run against external accounts because they're only used for payouts. This means the other statuses don't apply. If a transfer fails, the status is set to `errored` and transfers are stopped until account details are updated.
   */
  status?: Maybe<Scalars['String']>;
  /** If the card number is tokenized, this is the method that was used. Can be `android_pay` (includes Google Pay), `apple_pay`, `masterpass`, `visa_checkout`, or null. */
  tokenizationMethod?: Maybe<Scalars['String']>;
};

export type ListAccountCapability = {
  data: Array<Maybe<Capability>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

/**
 * This is an object representing a capability for a Stripe account.
 *
 * Related guide: [Account capabilities](https://stripe.com/docs/connect/account-capabilities).
 */
export type Capability = {
  /** The account for which the capability enables functionality. */
  account: Scalars['JSON'];
  /** The identifier for the capability. */
  id: Scalars['String'];
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object6;
  /** Whether the capability has been requested. */
  requested: Scalars['Boolean'];
  /** Time at which the capability was requested. Measured in seconds since the Unix epoch. */
  requestedAt?: Maybe<Scalars['Int']>;
  requirements?: Maybe<AccountCapabilityRequirements>;
  /** The status of the capability. Can be `active`, `inactive`, `pending`, or `unrequested`. */
  status: Status5;
};

export enum Object6 {
  CAPABILITY = 'capability'
}

export type AccountCapabilityRequirements = {
  /** Date by which the fields in `currently_due` must be collected to keep the capability enabled for the account. These fields may disable the capability sooner if the next threshold is reached before they are collected. */
  currentDeadline?: Maybe<Scalars['Int']>;
  /** Fields that need to be collected to keep the capability enabled. If not collected by `current_deadline`, these fields appear in `past_due` as well, and the capability is disabled. */
  currentlyDue: Array<Maybe<Scalars['String']>>;
  /**
   * If the capability is disabled, this string describes why. Can be `requirements.past_due`, `requirements.pending_verification`, `listed`, `platform_paused`, `rejected.fraud`, `rejected.listed`, `rejected.terms_of_service`, `rejected.other`, `under_review`, or `other`.
   *
   * `rejected.unsupported_business` means that the account's business is not supported by the capability. For example, payment methods may restrict the businesses they support in their terms of service:
   *
   * - [Afterpay Clearpay's terms of service](/afterpay-clearpay/legal#restricted-businesses)
   *
   * If you believe that the rejection is in error, please contact support@stripe.com for assistance.
   */
  disabledReason?: Maybe<Scalars['String']>;
  /** Fields that are `currently_due` and need to be collected again because validation or verification failed. */
  errors: Array<Maybe<AccountRequirementsError>>;
  /** Fields that need to be collected assuming all volume thresholds are reached. As they become required, they appear in `currently_due` as well, and `current_deadline` becomes set. */
  eventuallyDue: Array<Maybe<Scalars['String']>>;
  /** Fields that weren't collected by `current_deadline`. These fields need to be collected to enable the capability on the account. */
  pastDue: Array<Maybe<Scalars['String']>>;
  /** Fields that may become required depending on the results of verification or review. Will be an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due`, `currently_due`, or `past_due`. */
  pendingVerification: Array<Maybe<Scalars['String']>>;
};

export enum Status5 {
  ACTIVE = 'active',
  DISABLED = 'disabled',
  INACTIVE = 'inactive',
  PENDING = 'pending',
  UNREQUESTED = 'unrequested'
}

export type ExternalAccountList = {
  /** The list contains all external accounts that have been attached to the Stripe account. These may be bank accounts or cards. */
  data: Array<Maybe<DataListItem>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

export type V1AccountPeople2 = {
  data: Array<Maybe<Person>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

export type Relationship2Input = {
  director?: Maybe<Scalars['Boolean']>;
  executive?: Maybe<Scalars['Boolean']>;
  owner?: Maybe<Scalars['Boolean']>;
  representative?: Maybe<Scalars['Boolean']>;
};

export type V1AccountPersons2 = {
  data: Array<Maybe<Person>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

export type V1Accounts2 = {
  data: Array<Maybe<Account3>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

export type ApplePayDomainList = {
  data: Array<Maybe<ApplePayDomain>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

export type ApplePayDomain = {
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created: Scalars['Int'];
  domainName: Scalars['String'];
  /** Unique identifier for the object. */
  id: Scalars['String'];
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object9;
};

export enum Object9 {
  APPLE_PAY_DOMAIN = 'apple_pay_domain'
}

export type V1ApplicationFees2 = {
  data: Array<Maybe<ApplicationFee>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

export type ApplicationFee = {
  /** ID of the Stripe account this fee was taken from. */
  account: Scalars['JSON'];
  /** Amount earned, in %s. */
  amount: Scalars['Int'];
  /** Amount in %s refunded (can be less than the amount attribute on the fee if a partial refund was issued) */
  amountRefunded: Scalars['Int'];
  /** ID of the Connect application that earned the fee. */
  application: Scalars['JSON'];
  /** Balance transaction that describes the impact of this collected application fee on your account balance (not including refunds). */
  balanceTransaction?: Maybe<Scalars['JSON']>;
  /** ID of the charge that the application fee was taken from. */
  charge: Scalars['JSON'];
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created: Scalars['Int'];
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency: Scalars['String'];
  /** Unique identifier for the object. */
  id: Scalars['String'];
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object10;
  /** ID of the corresponding charge on the platform account, if this fee was the result of a charge using the `destination` parameter. */
  originatingTransaction?: Maybe<Scalars['JSON']>;
  /** Whether the fee has been fully refunded. If the fee is only partially refunded, this attribute will still be false. */
  refunded: Scalars['Boolean'];
  /** A list of refunds that have been applied to the fee. */
  refunds: Refunds;
};

export enum Object10 {
  APPLICATION_FEE = 'application_fee'
}

/** A list of refunds that have been applied to the fee. */
export type Refunds = {
  /** Details about each object. */
  data: Array<Maybe<FeeRefund>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

/**
 * `Application Fee Refund` objects allow you to refund an application fee that
 * has previously been created but not yet refunded. Funds will be refunded to
 * the Stripe account from which the fee was originally collected.
 *
 * Related guide: [Refunding Application Fees](https://stripe.com/docs/connect/destination-charges#refunding-app-fee).
 */
export type FeeRefund = {
  /** Amount, in %s. */
  amount: Scalars['Int'];
  /** Balance transaction that describes the impact on your account balance. */
  balanceTransaction?: Maybe<Scalars['JSON']>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created: Scalars['Int'];
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency: Scalars['String'];
  /** ID of the application fee that was refunded. */
  fee: Scalars['JSON'];
  /** Unique identifier for the object. */
  id: Scalars['String'];
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Maybe<Scalars['JSON']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object11;
};

export enum Object11 {
  FEE_REFUND = 'fee_refund'
}

export type FeeRefundList = {
  /** Details about each object. */
  data: Array<Maybe<FeeRefund>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

/**
 * This is an object representing your Stripe balance. You can retrieve it to see
 * the balance currently on your Stripe account.
 *
 * You can also retrieve the balance history, which contains a list of
 * [transactions](https://stripe.com/docs/reporting/balance-transaction-types) that contributed to the balance
 * (charges, payouts, and so forth).
 *
 * The available and pending amounts for each currency are broken down further by
 * payment source types.
 *
 * Related guide: [Understanding Connect Account Balances](https://stripe.com/docs/connect/account-balances).
 */
export type Balance = {
  /** Funds that are available to be transferred or paid out, whether automatically by Stripe or explicitly via the [Transfers API](https://stripe.com/docs/api#transfers) or [Payouts API](https://stripe.com/docs/api#payouts). The available balance for each currency and payment type can be found in the `source_types` property. */
  available: Array<Maybe<BalanceAmount>>;
  /** Funds held due to negative balances on connected Custom accounts. The connect reserve balance for each currency and payment type can be found in the `source_types` property. */
  connectReserved?: Maybe<Array<Maybe<BalanceAmount>>>;
  /** Funds that can be paid out using Instant Payouts. */
  instantAvailable?: Maybe<Array<Maybe<BalanceAmount>>>;
  issuing?: Maybe<BalanceDetail>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object12;
  /** Funds that are not yet available in the balance, due to the 7-day rolling pay cycle. The pending balance for each currency, and for each payment type, can be found in the `source_types` property. */
  pending: Array<Maybe<BalanceAmount>>;
};

export type BalanceAmount = {
  /** Balance amount. */
  amount: Scalars['Int'];
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency: Scalars['String'];
  sourceTypes?: Maybe<BalanceAmountBySourceType>;
};

export type BalanceAmountBySourceType = {
  /** Amount for bank account. */
  bankAccount?: Maybe<Scalars['Int']>;
  /** Amount for card. */
  card?: Maybe<Scalars['Int']>;
  /** Amount for FPX. */
  fpx?: Maybe<Scalars['Int']>;
};

export type BalanceDetail = {
  /** Funds that are available for use. */
  available: Array<Maybe<BalanceAmount>>;
};

export enum Object12 {
  BALANCE = 'balance'
}

export type BalanceTransactionsList = {
  data: Array<Maybe<BalanceTransaction3>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

/**
 * Balance transactions represent funds moving through your Stripe account.
 * They're created for every type of transaction that comes into or flows out of your Stripe account balance.
 *
 * Related guide: [Balance Transaction Types](https://stripe.com/docs/reports/balance-transaction-types).
 */
export type BalanceTransaction3 = {
  /** Gross amount of the transaction, in %s. */
  amount: Scalars['Int'];
  /** The date the transaction's net funds will become available in the Stripe balance. */
  availableOn: Scalars['Int'];
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created: Scalars['Int'];
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency: Scalars['String'];
  /** An arbitrary string attached to the object. Often useful for displaying to users. */
  description?: Maybe<Scalars['String']>;
  /** The exchange rate used, if applicable, for this transaction. Specifically, if money was converted from currency A to currency B, then the `amount` in currency A, times `exchange_rate`, would be the `amount` in currency B. For example, suppose you charged a customer 10.00 EUR. Then the PaymentIntent's `amount` would be `1000` and `currency` would be `eur`. Suppose this was converted into 12.34 USD in your Stripe account. Then the BalanceTransaction's `amount` would be `1234`, `currency` would be `usd`, and `exchange_rate` would be `1.234`. */
  exchangeRate?: Maybe<Scalars['Float']>;
  /** Fees (in %s) paid for this transaction. */
  fee: Scalars['Int'];
  /** Detailed breakdown of fees (in %s) paid for this transaction. */
  feeDetails: Array<Maybe<Fee3>>;
  /** Unique identifier for the object. */
  id: Scalars['String'];
  /** Net amount of the transaction, in %s. */
  net: Scalars['Int'];
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object13;
  /** [Learn more](https://stripe.com/docs/reports/reporting-categories) about how reporting categories can help you understand balance transactions from an accounting perspective. */
  reportingCategory: Scalars['String'];
  /** The Stripe object to which this transaction is related. */
  source?: Maybe<Scalars['JSON']>;
  /** If the transaction's net funds are available in the Stripe balance yet. Either `available` or `pending`. */
  status: Scalars['String'];
  /** Transaction type: `adjustment`, `advance`, `advance_funding`, `anticipation_repayment`, `application_fee`, `application_fee_refund`, `charge`, `connect_collection_transfer`, `contribution`, `issuing_authorization_hold`, `issuing_authorization_release`, `issuing_dispute`, `issuing_transaction`, `payment`, `payment_failure_refund`, `payment_refund`, `payout`, `payout_cancel`, `payout_failure`, `refund`, `refund_failure`, `reserve_transaction`, `reserved_funds`, `stripe_fee`, `stripe_fx_fee`, `tax_fee`, `topup`, `topup_reversal`, `transfer`, `transfer_cancel`, `transfer_failure`, or `transfer_refund`. [Learn more](https://stripe.com/docs/reports/balance-transaction-types) about balance transaction types and what they represent. If you are looking to classify transactions for accounting purposes, you might want to consider `reporting_category` instead. */
  type: Type6;
};

export type Fee3 = {
  /** Amount of the fee, in cents. */
  amount: Scalars['Int'];
  /** ID of the Connect application that earned the fee. */
  application?: Maybe<Scalars['String']>;
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency: Scalars['String'];
  /** An arbitrary string attached to the object. Often useful for displaying to users. */
  description?: Maybe<Scalars['String']>;
  /** Type of the fee, one of: `application_fee`, `stripe_fee` or `tax`. */
  type: Scalars['String'];
};

export enum Object13 {
  BALANCE_TRANSACTION = 'balance_transaction'
}

export enum Type6 {
  ADJUSTMENT = 'adjustment',
  ADVANCE = 'advance',
  ADVANCE_FUNDING = 'advance_funding',
  ANTICIPATION_REPAYMENT = 'anticipation_repayment',
  APPLICATION_FEE = 'application_fee',
  APPLICATION_FEE_REFUND = 'application_fee_refund',
  CHARGE = 'charge',
  CONNECT_COLLECTION_TRANSFER = 'connect_collection_transfer',
  CONTRIBUTION = 'contribution',
  ISSUING_AUTHORIZATION_HOLD = 'issuing_authorization_hold',
  ISSUING_AUTHORIZATION_RELEASE = 'issuing_authorization_release',
  ISSUING_DISPUTE = 'issuing_dispute',
  ISSUING_TRANSACTION = 'issuing_transaction',
  PAYMENT = 'payment',
  PAYMENT_FAILURE_REFUND = 'payment_failure_refund',
  PAYMENT_REFUND = 'payment_refund',
  PAYOUT = 'payout',
  PAYOUT_CANCEL = 'payout_cancel',
  PAYOUT_FAILURE = 'payout_failure',
  REFUND = 'refund',
  REFUND_FAILURE = 'refund_failure',
  RESERVE_TRANSACTION = 'reserve_transaction',
  RESERVED_FUNDS = 'reserved_funds',
  STRIPE_FEE = 'stripe_fee',
  STRIPE_FX_FEE = 'stripe_fx_fee',
  TAX_FEE = 'tax_fee',
  TOPUP = 'topup',
  TOPUP_REVERSAL = 'topup_reversal',
  TRANSFER = 'transfer',
  TRANSFER_CANCEL = 'transfer_cancel',
  TRANSFER_FAILURE = 'transfer_failure',
  TRANSFER_REFUND = 'transfer_refund'
}

export type V1BillingPortalConfigurations2 = {
  data: Array<Maybe<BillingPortalConfiguration>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

/** A portal configuration describes the functionality and behavior of a portal session. */
export type BillingPortalConfiguration = {
  /** Whether the configuration is active and can be used to create portal sessions. */
  active: Scalars['Boolean'];
  /** ID of the Connect Application that created the configuration. */
  application?: Maybe<Scalars['String']>;
  businessProfile: PortalBusinessProfile;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created: Scalars['Int'];
  /** The default URL to redirect customers to when they click on the portal's link to return to your website. This can be [overriden](https://stripe.com/docs/api/customer_portal/sessions/create#create_portal_session-return_url) when creating the session. */
  defaultReturnUrl?: Maybe<Scalars['String']>;
  features: PortalFeatures;
  /** Unique identifier for the object. */
  id: Scalars['String'];
  /** Whether the configuration is the default. If `true`, this configuration can be managed in the Dashboard and portal sessions will use this configuration unless it is overriden when creating the session. */
  isDefault: Scalars['Boolean'];
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object14;
  /** Time at which the object was last updated. Measured in seconds since the Unix epoch. */
  updated: Scalars['Int'];
};

export type PortalBusinessProfile = {
  /** The messaging shown to customers in the portal. */
  headline?: Maybe<Scalars['String']>;
  /** A link to the business’s publicly available privacy policy. */
  privacyPolicyUrl: Scalars['String'];
  /** A link to the business’s publicly available terms of service. */
  termsOfServiceUrl: Scalars['String'];
};

export type PortalFeatures = {
  customerUpdate: PortalCustomerUpdate;
  invoiceHistory: PortalInvoiceList;
  paymentMethodUpdate: PortalPaymentMethodUpdate;
  subscriptionCancel: PortalSubscriptionCancel;
  subscriptionPause: PortalSubscriptionPause;
  subscriptionUpdate: PortalSubscriptionUpdate;
};

export type PortalCustomerUpdate = {
  /** The types of customer updates that are supported. When empty, customers are not updateable. */
  allowedUpdates: Array<Maybe<AllowedUpdatesListItem>>;
  /** Whether the feature is enabled. */
  enabled: Scalars['Boolean'];
};

export enum AllowedUpdatesListItem {
  ADDRESS = 'address',
  EMAIL = 'email',
  PHONE = 'phone',
  SHIPPING = 'shipping',
  TAX_ID = 'tax_id'
}

export type PortalInvoiceList = {
  /** Whether the feature is enabled. */
  enabled: Scalars['Boolean'];
};

export type PortalPaymentMethodUpdate = {
  /** Whether the feature is enabled. */
  enabled: Scalars['Boolean'];
};

export type PortalSubscriptionCancel = {
  /** Whether the feature is enabled. */
  enabled: Scalars['Boolean'];
  /** Whether to cancel subscriptions immediately or at the end of the billing period. */
  mode: Mode;
  /** Whether to create prorations when canceling subscriptions. Possible values are `none` and `create_prorations`. */
  prorationBehavior: ProrationBehavior;
};

export enum Mode {
  AT_PERIOD_END = 'at_period_end',
  IMMEDIATELY = 'immediately'
}

export enum ProrationBehavior {
  ALWAYS_INVOICE = 'always_invoice',
  CREATE_PRORATIONS = 'create_prorations',
  NONE = 'none'
}

export type PortalSubscriptionPause = {
  /** Whether the feature is enabled. */
  enabled: Scalars['Boolean'];
};

export type PortalSubscriptionUpdate = {
  /** The types of subscription updates that are supported for items listed in the `products` attribute. When empty, subscriptions are not updateable. */
  defaultAllowedUpdates: Array<Maybe<DefaultAllowedUpdatesListItem>>;
  /** Whether the feature is enabled. */
  enabled: Scalars['Boolean'];
  /** The list of products that support subscription updates. */
  products?: Maybe<Array<Maybe<PortalSubscriptionUpdateProduct>>>;
  /** Determines how to handle prorations resulting from subscription updates. Valid values are `none`, `create_prorations`, and `always_invoice`. */
  prorationBehavior: ProrationBehavior2;
};

export enum DefaultAllowedUpdatesListItem {
  PRICE = 'price',
  PROMOTION_CODE = 'promotion_code',
  QUANTITY = 'quantity'
}

export type PortalSubscriptionUpdateProduct = {
  /** The list of price IDs which, when subscribed to, a subscription can be updated. */
  prices: Array<Maybe<Scalars['String']>>;
  /** The product ID. */
  product: Scalars['String'];
};

export enum ProrationBehavior2 {
  ALWAYS_INVOICE = 'always_invoice',
  CREATE_PRORATIONS = 'create_prorations',
  NONE = 'none'
}

export enum Object14 {
  BILLING_PORTAL_CONFIGURATION = 'billing_portal.configuration'
}

export type V1BitcoinReceivers2 = {
  data: Array<Maybe<BitcoinReceiver>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

export type BitcoinReceiver = {
  /** True when this bitcoin receiver has received a non-zero amount of bitcoin. */
  active: Scalars['Boolean'];
  /** The amount of `currency` that you are collecting as payment. */
  amount: Scalars['Int'];
  /** The amount of `currency` to which `bitcoin_amount_received` has been converted. */
  amountReceived: Scalars['Int'];
  /** The amount of bitcoin that the customer should send to fill the receiver. The `bitcoin_amount` is denominated in Satoshi: there are 10^8 Satoshi in one bitcoin. */
  bitcoinAmount: Scalars['Int'];
  /** The amount of bitcoin that has been sent by the customer to this receiver. */
  bitcoinAmountReceived: Scalars['Int'];
  /** This URI can be displayed to the customer as a clickable link (to activate their bitcoin client) or as a QR code (for mobile wallets). */
  bitcoinUri: Scalars['String'];
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created: Scalars['Int'];
  /** Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) to which the bitcoin will be converted. */
  currency: Scalars['String'];
  /** The customer ID of the bitcoin receiver. */
  customer?: Maybe<Scalars['String']>;
  /** An arbitrary string attached to the object. Often useful for displaying to users. */
  description?: Maybe<Scalars['String']>;
  /** The customer's email address, set by the API call that creates the receiver. */
  email?: Maybe<Scalars['String']>;
  /** This flag is initially false and updates to true when the customer sends the `bitcoin_amount` to this receiver. */
  filled: Scalars['Boolean'];
  /** Unique identifier for the object. */
  id: Scalars['String'];
  /** A bitcoin address that is specific to this receiver. The customer can send bitcoin to this address to fill the receiver. */
  inboundAddress: Scalars['String'];
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: Scalars['Boolean'];
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Maybe<Scalars['JSON']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object16;
  /** The ID of the payment created from the receiver, if any. Hidden when viewing the receiver with a publishable key. */
  payment?: Maybe<Scalars['String']>;
  /** The refund address of this bitcoin receiver. */
  refundAddress?: Maybe<Scalars['String']>;
  /** A list with one entry for each time that the customer sent bitcoin to the receiver. Hidden when viewing the receiver with a publishable key. */
  transactions?: Maybe<Transactions>;
  /** This receiver contains uncaptured funds that can be used for a payment or refunded. */
  uncapturedFunds: Scalars['Boolean'];
  /** Indicate if this source is used for payment. */
  usedForPayment?: Maybe<Scalars['Boolean']>;
};

export enum Object16 {
  BITCOIN_RECEIVER = 'bitcoin_receiver'
}

/** A list with one entry for each time that the customer sent bitcoin to the receiver. Hidden when viewing the receiver with a publishable key. */
export type Transactions = {
  /** Details about each object. */
  data: Array<Maybe<BitcoinTransaction>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

export type BitcoinTransaction = {
  /** The amount of `currency` that the transaction was converted to in real-time. */
  amount: Scalars['Int'];
  /** The amount of bitcoin contained in the transaction. */
  bitcoinAmount: Scalars['Int'];
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created: Scalars['Int'];
  /** Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) to which this transaction was converted. */
  currency: Scalars['String'];
  /** Unique identifier for the object. */
  id: Scalars['String'];
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object17;
  /** The receiver to which this transaction was sent. */
  receiver: Scalars['String'];
};

export enum Object17 {
  BITCOIN_TRANSACTION = 'bitcoin_transaction'
}

export type BitcoinTransactionList = {
  /** Details about each object. */
  data: Array<Maybe<BitcoinTransaction>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

export type V1Charges2 = {
  data: Array<Maybe<Charge2>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

/**
 * To charge a credit or a debit card, you create a `Charge` object. You can
 * retrieve and refund individual charges as well as list all charges. Charges
 * are identified by a unique, random ID.
 *
 * Related guide: [Accept a payment with the Charges API](https://stripe.com/docs/payments/accept-a-payment-charges).
 */
export type Charge2 = {
  /** Amount intended to be collected by this payment. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99). */
  amount: Scalars['Int'];
  /** Amount in %s captured (can be less than the amount attribute on the charge if a partial capture was made). */
  amountCaptured: Scalars['Int'];
  /** Amount in %s refunded (can be less than the amount attribute on the charge if a partial refund was issued). */
  amountRefunded: Scalars['Int'];
  /** ID of the Connect application that created the charge. */
  application?: Maybe<Scalars['JSON']>;
  /** The application fee (if any) for the charge. [See the Connect documentation](https://stripe.com/docs/connect/direct-charges#collecting-fees) for details. */
  applicationFee?: Maybe<Scalars['JSON']>;
  /** The amount of the application fee (if any) requested for the charge. [See the Connect documentation](https://stripe.com/docs/connect/direct-charges#collecting-fees) for details. */
  applicationFeeAmount?: Maybe<Scalars['Int']>;
  /** ID of the balance transaction that describes the impact of this charge on your account balance (not including refunds or disputes). */
  balanceTransaction?: Maybe<Scalars['JSON']>;
  billingDetails: BillingDetails;
  /** The full statement descriptor that is passed to card networks, and that is displayed on your customers' credit card and bank statements. Allows you to see what the statement descriptor looks like after the static and dynamic portions are combined. */
  calculatedStatementDescriptor?: Maybe<Scalars['String']>;
  /** If the charge was created without capturing, this Boolean represents whether it is still uncaptured or has since been captured. */
  captured: Scalars['Boolean'];
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created: Scalars['Int'];
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency: Scalars['String'];
  /** ID of the customer this charge is for if one exists. */
  customer?: Maybe<Scalars['JSON']>;
  /** An arbitrary string attached to the object. Often useful for displaying to users. */
  description?: Maybe<Scalars['String']>;
  /** Whether the charge has been disputed. */
  disputed: Scalars['Boolean'];
  /** Error code explaining reason for charge failure if available (see [the errors section](https://stripe.com/docs/api#errors) for a list of codes). */
  failureCode?: Maybe<Scalars['String']>;
  /** Message to user further explaining reason for charge failure if available. */
  failureMessage?: Maybe<Scalars['String']>;
  /** Information on fraud assessments for the charge. */
  fraudDetails?: Maybe<FraudDetails>;
  /** Unique identifier for the object. */
  id: Scalars['String'];
  /** ID of the invoice this charge is for if one exists. */
  invoice?: Maybe<Scalars['JSON']>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: Scalars['Boolean'];
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata: Scalars['JSON'];
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object18;
  /** The account (if any) the charge was made on behalf of without triggering an automatic transfer. See the [Connect documentation](https://stripe.com/docs/connect/charges-transfers) for details. */
  onBehalfOf?: Maybe<Scalars['JSON']>;
  /** ID of the order this charge is for if one exists. */
  order?: Maybe<Scalars['JSON']>;
  /** Details about whether the payment was accepted, and why. See [understanding declines](https://stripe.com/docs/declines) for details. */
  outcome?: Maybe<Outcome>;
  /** `true` if the charge succeeded, or was successfully authorized for later capture. */
  paid: Scalars['Boolean'];
  /** ID of the PaymentIntent associated with this charge, if one exists. */
  paymentIntent?: Maybe<Scalars['JSON']>;
  /** ID of the payment method used in this charge. */
  paymentMethod?: Maybe<Scalars['String']>;
  /** Details about the payment method at the time of the transaction. */
  paymentMethodDetails?: Maybe<PaymentMethodDetails>;
  /** This is the email address that the receipt for this charge was sent to. */
  receiptEmail?: Maybe<Scalars['String']>;
  /** This is the transaction number that appears on email receipts sent for this charge. This attribute will be `null` until a receipt has been sent. */
  receiptNumber?: Maybe<Scalars['String']>;
  /** This is the URL to view the receipt for this charge. The receipt is kept up-to-date to the latest state of the charge, including any refunds. If the charge is for an Invoice, the receipt will be stylized as an Invoice receipt. */
  receiptUrl?: Maybe<Scalars['String']>;
  /** Whether the charge has been fully refunded. If the charge is only partially refunded, this attribute will still be false. */
  refunded: Scalars['Boolean'];
  /** A list of refunds that have been applied to the charge. */
  refunds: RefundList;
  /** ID of the review associated with this charge if one exists. */
  review?: Maybe<Scalars['JSON']>;
  /** Shipping information for the charge. */
  shipping?: Maybe<Shipping>;
  /** The transfer ID which created this charge. Only present if the charge came from another Stripe account. [See the Connect documentation](https://stripe.com/docs/connect/destination-charges) for details. */
  sourceTransfer?: Maybe<Scalars['JSON']>;
  /** For card charges, use `statement_descriptor_suffix` instead. Otherwise, you can use this value as the complete description of a charge on your customers’ statements. Must contain at least one letter, maximum 22 characters. */
  statementDescriptor?: Maybe<Scalars['String']>;
  /** Provides information about the charge that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor. */
  statementDescriptorSuffix?: Maybe<Scalars['String']>;
  /** The status of the payment is either `succeeded`, `pending`, or `failed`. */
  status: Scalars['String'];
  /** ID of the transfer to the `destination` account (only applicable if the charge was created using the `destination` parameter). */
  transfer?: Maybe<Scalars['JSON']>;
  /** An optional dictionary including the account to automatically transfer to as part of a destination charge. [See the Connect documentation](https://stripe.com/docs/connect/destination-charges) for details. */
  transferData?: Maybe<TransferData>;
  /** A string that identifies this transaction as part of a group. See the [Connect documentation](https://stripe.com/docs/connect/charges-transfers#transfer-options) for details. */
  transferGroup?: Maybe<Scalars['String']>;
};

export type BillingDetails = {
  /** Billing address. */
  address?: Maybe<Address4>;
  /** Email address. */
  email?: Maybe<Scalars['String']>;
  /** Full name. */
  name?: Maybe<Scalars['String']>;
  /** Billing phone number (including extension). */
  phone?: Maybe<Scalars['String']>;
};

/** Billing address. */
export type Address4 = {
  /** City, district, suburb, town, or village. */
  city?: Maybe<Scalars['String']>;
  /** Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)). */
  country?: Maybe<Scalars['String']>;
  /** Address line 1 (e.g., street, PO Box, or company name). */
  line1?: Maybe<Scalars['String']>;
  /** Address line 2 (e.g., apartment, suite, unit, or building). */
  line2?: Maybe<Scalars['String']>;
  /** ZIP or postal code. */
  postalCode?: Maybe<Scalars['String']>;
  /** State, county, province, or region. */
  state?: Maybe<Scalars['String']>;
};

/** Information on fraud assessments for the charge. */
export type FraudDetails = {
  /** Assessments from Stripe. If set, the value is `fraudulent`. */
  stripeReport?: Maybe<Scalars['String']>;
  /** Assessments reported by you. If set, possible values of are `safe` and `fraudulent`. */
  userReport?: Maybe<Scalars['String']>;
};

export enum Object18 {
  CHARGE = 'charge'
}

/** Details about whether the payment was accepted, and why. See [understanding declines](https://stripe.com/docs/declines) for details. */
export type Outcome = {
  /** Possible values are `approved_by_network`, `declined_by_network`, `not_sent_to_network`, and `reversed_after_approval`. The value `reversed_after_approval` indicates the payment was [blocked by Stripe](https://stripe.com/docs/declines#blocked-payments) after bank authorization, and may temporarily appear as "pending" on a cardholder's statement. */
  networkStatus?: Maybe<Scalars['String']>;
  /** An enumerated value providing a more detailed explanation of the outcome's `type`. Charges blocked by Radar's default block rule have the value `highest_risk_level`. Charges placed in review by Radar's default review rule have the value `elevated_risk_level`. Charges authorized, blocked, or placed in review by custom rules have the value `rule`. See [understanding declines](https://stripe.com/docs/declines) for more details. */
  reason?: Maybe<Scalars['String']>;
  /** Stripe Radar's evaluation of the riskiness of the payment. Possible values for evaluated payments are `normal`, `elevated`, `highest`. For non-card payments, and card-based payments predating the public assignment of risk levels, this field will have the value `not_assessed`. In the event of an error in the evaluation, this field will have the value `unknown`. This field is only available with Radar. */
  riskLevel?: Maybe<Scalars['String']>;
  /** Stripe Radar's evaluation of the riskiness of the payment. Possible values for evaluated payments are between 0 and 100. For non-card payments, card-based payments predating the public assignment of risk scores, or in the event of an error during evaluation, this field will not be present. This field is only available with Radar for Fraud Teams. */
  riskScore?: Maybe<Scalars['Int']>;
  /** The ID of the Radar rule that matched the payment, if applicable. */
  rule?: Maybe<Scalars['JSON']>;
  /** A human-readable description of the outcome type and reason, designed for you (the recipient of the payment), not your customer. */
  sellerMessage?: Maybe<Scalars['String']>;
  /** Possible values are `authorized`, `manual_review`, `issuer_declined`, `blocked`, and `invalid`. See [understanding declines](https://stripe.com/docs/declines) and [Radar reviews](https://stripe.com/docs/radar/reviews) for details. */
  type?: Maybe<Scalars['String']>;
};

/** Details about the payment method at the time of the transaction. */
export type PaymentMethodDetails = {
  achCreditTransfer?: Maybe<AchCreditTransfer>;
  achDebit?: Maybe<AchDebit>;
  acssDebit?: Maybe<AcssDebit>;
  afterpayClearpay?: Maybe<AfterpayClearpay>;
  alipay?: Maybe<Alipay>;
  auBecsDebit?: Maybe<AuBecsDebit>;
  bacsDebit?: Maybe<BacsDebit>;
  bancontact?: Maybe<Bancontact>;
  boleto?: Maybe<Boleto>;
  card?: Maybe<Card4>;
  cardPresent?: Maybe<CardPresent>;
  eps?: Maybe<Eps>;
  fpx?: Maybe<Fpx2>;
  giropay?: Maybe<Giropay>;
  grabpay?: Maybe<Grabpay>;
  ideal?: Maybe<Ideal>;
  interacPresent?: Maybe<InteracPresent>;
  klarna?: Maybe<Scalars['JSON']>;
  multibanco?: Maybe<Multibanco>;
  oxxo?: Maybe<Oxxo>;
  p24?: Maybe<P24>;
  sepaDebit?: Maybe<SepaDebit>;
  sofort?: Maybe<Sofort>;
  stripeAccount?: Maybe<Scalars['JSON']>;
  /**
   * The type of transaction-specific details of the payment method used in the payment, one of `ach_credit_transfer`, `ach_debit`, `acss_debit`, `alipay`, `au_becs_debit`, `bancontact`, `card`, `card_present`, `eps`, `giropay`, `ideal`, `klarna`, `multibanco`, `p24`, `sepa_debit`, `sofort`, `stripe_account`, or `wechat`.
   * An additional hash is included on `payment_method_details` with a name matching this value.
   * It contains information specific to the payment method.
   */
  type?: Maybe<Scalars['String']>;
  wechat?: Maybe<Scalars['JSON']>;
  wechatPay?: Maybe<WechatPay>;
};

export type AchCreditTransfer = {
  /** Account number to transfer funds to. */
  accountNumber?: Maybe<Scalars['String']>;
  /** Name of the bank associated with the routing number. */
  bankName?: Maybe<Scalars['String']>;
  /** Routing transit number for the bank account to transfer funds to. */
  routingNumber?: Maybe<Scalars['String']>;
  /** SWIFT code of the bank associated with the routing number. */
  swiftCode?: Maybe<Scalars['String']>;
};

export type AchDebit = {
  /** Type of entity that holds the account. This can be either `individual` or `company`. */
  accountHolderType?: Maybe<AccountHolderType4>;
  /** Name of the bank associated with the bank account. */
  bankName?: Maybe<Scalars['String']>;
  /** Two-letter ISO code representing the country the bank account is located in. */
  country?: Maybe<Scalars['String']>;
  /** Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
  fingerprint?: Maybe<Scalars['String']>;
  /** Last four digits of the bank account number. */
  last4?: Maybe<Scalars['String']>;
  /** Routing transit number of the bank account. */
  routingNumber?: Maybe<Scalars['String']>;
};

export enum AccountHolderType4 {
  COMPANY = 'company',
  INDIVIDUAL = 'individual'
}

export type AcssDebit = {
  /** Name of the bank associated with the bank account. */
  bankName?: Maybe<Scalars['String']>;
  /** Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
  fingerprint?: Maybe<Scalars['String']>;
  /** Institution number of the bank account */
  institutionNumber?: Maybe<Scalars['String']>;
  /** Last four digits of the bank account number. */
  last4?: Maybe<Scalars['String']>;
  /** ID of the mandate used to make this payment. */
  mandate?: Maybe<Scalars['String']>;
  /** Transit number of the bank account. */
  transitNumber?: Maybe<Scalars['String']>;
};

export type AfterpayClearpay = {
  /** Order identifier shown to the merchant in Afterpay’s online portal. */
  reference?: Maybe<Scalars['String']>;
};

export type Alipay = {
  /** Uniquely identifies this particular Alipay account. You can use this attribute to check whether two Alipay accounts are the same. */
  fingerprint?: Maybe<Scalars['String']>;
  /** Transaction ID of this particular Alipay transaction. */
  transactionId?: Maybe<Scalars['String']>;
};

export type AuBecsDebit = {
  /** Bank-State-Branch number of the bank account. */
  bsbNumber?: Maybe<Scalars['String']>;
  /** Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
  fingerprint?: Maybe<Scalars['String']>;
  /** Last four digits of the bank account number. */
  last4?: Maybe<Scalars['String']>;
  /** ID of the mandate used to make this payment. */
  mandate?: Maybe<Scalars['String']>;
};

export type BacsDebit = {
  /** Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
  fingerprint?: Maybe<Scalars['String']>;
  /** Last four digits of the bank account number. */
  last4?: Maybe<Scalars['String']>;
  /** ID of the mandate used to make this payment. */
  mandate?: Maybe<Scalars['String']>;
  /** Sort code of the bank account. (e.g., `10-20-30`) */
  sortCode?: Maybe<Scalars['String']>;
};

export type Bancontact = {
  /** Bank code of bank associated with the bank account. */
  bankCode?: Maybe<Scalars['String']>;
  /** Name of the bank associated with the bank account. */
  bankName?: Maybe<Scalars['String']>;
  /** Bank Identifier Code of the bank associated with the bank account. */
  bic?: Maybe<Scalars['String']>;
  /** The ID of the SEPA Direct Debit PaymentMethod which was generated by this Charge. */
  generatedSepaDebit?: Maybe<Scalars['JSON']>;
  /** The mandate for the SEPA Direct Debit PaymentMethod which was generated by this Charge. */
  generatedSepaDebitMandate?: Maybe<Scalars['JSON']>;
  /** Last four characters of the IBAN. */
  ibanLast4?: Maybe<Scalars['String']>;
  /**
   * Preferred language of the Bancontact authorization page that the customer is redirected to.
   * Can be one of `en`, `de`, `fr`, or `nl`
   */
  preferredLanguage?: Maybe<PreferredLanguage>;
  /**
   * Owner's verified full name. Values are verified or provided by Bancontact directly
   * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   */
  verifiedName?: Maybe<Scalars['String']>;
};

export enum PreferredLanguage {
  DE = 'de',
  EN = 'en',
  FR = 'fr',
  NL = 'nl'
}

export type Boleto = {
  /** Uniquely identifies this customer tax_id (CNPJ or CPF) */
  taxId: Scalars['String'];
};

export type Card4 = {
  /** Card brand. Can be `amex`, `diners`, `discover`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`. */
  brand?: Maybe<Scalars['String']>;
  /** Check results by Card networks on Card address and CVC at time of payment. */
  checks?: Maybe<Checks>;
  /** Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected. */
  country?: Maybe<Scalars['String']>;
  /** Two-digit number representing the card's expiration month. */
  expMonth: Scalars['Int'];
  /** Four-digit number representing the card's expiration year. */
  expYear: Scalars['Int'];
  /**
   * Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
   *
   * *Starting May 1, 2021, card fingerprint in India for Connect will change to allow two fingerprints for the same card --- one for India and one for the rest of the world.*
   */
  fingerprint?: Maybe<Scalars['String']>;
  /** Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`. */
  funding?: Maybe<Scalars['String']>;
  /**
   * Installment details for this payment (Mexico only).
   *
   * For more information, see the [installments integration guide](https://stripe.com/docs/payments/installments).
   */
  installments?: Maybe<Installments>;
  /** The last four digits of the card. */
  last4?: Maybe<Scalars['String']>;
  /** Identifies which network this charge was processed on. Can be `amex`, `cartes_bancaires`, `diners`, `discover`, `interac`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`. */
  network?: Maybe<Scalars['String']>;
  /** Populated if this transaction used 3D Secure authentication. */
  threeDSecure?: Maybe<ThreeDSecure2>;
  /** If this Card is part of a card wallet, this contains the details of the card wallet. */
  wallet?: Maybe<Wallet>;
};

/** Check results by Card networks on Card address and CVC at time of payment. */
export type Checks = {
  /** If a address line1 was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`. */
  addressLine1Check?: Maybe<Scalars['String']>;
  /** If a address postal code was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`. */
  addressPostalCodeCheck?: Maybe<Scalars['String']>;
  /** If a CVC was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`. */
  cvcCheck?: Maybe<Scalars['String']>;
};

/**
 * Installment details for this payment (Mexico only).
 *
 * For more information, see the [installments integration guide](https://stripe.com/docs/payments/installments).
 */
export type Installments = {
  /** Installment plan selected for the payment. */
  plan?: Maybe<Plan>;
};

/** Installment plan selected for the payment. */
export type Plan = {
  /** For `fixed_count` installment plans, this is the number of installment payments your customer will make to their credit card. */
  count?: Maybe<Scalars['Int']>;
  /**
   * For `fixed_count` installment plans, this is the interval between installment payments your customer will make to their credit card.
   * One of `month`.
   */
  interval?: Maybe<Interval3>;
  /** Type of installment plan, one of `fixed_count`. */
  type?: Maybe<Type8>;
};

export enum Interval3 {
  MONTH = 'month'
}

export enum Type8 {
  FIXED_COUNT = 'fixed_count'
}

/** Populated if this transaction used 3D Secure authentication. */
export type ThreeDSecure2 = {
  /**
   * For authenticated transactions: how the customer was authenticated by
   * the issuing bank.
   */
  authenticationFlow?: Maybe<AuthenticationFlow>;
  /** Indicates the outcome of 3D Secure authentication. */
  result?: Maybe<Result>;
  /**
   * Additional information about why 3D Secure succeeded or failed based
   * on the `result`.
   */
  resultReason?: Maybe<ResultReason>;
  /** The version of 3D Secure that was used. */
  version?: Maybe<Version>;
};

export enum AuthenticationFlow {
  CHALLENGE = 'challenge',
  FRICTIONLESS = 'frictionless'
}

export enum Result {
  ATTEMPT_ACKNOWLEDGED = 'attempt_acknowledged',
  AUTHENTICATED = 'authenticated',
  FAILED = 'failed',
  NOT_SUPPORTED = 'not_supported',
  PROCESSING_ERROR = 'processing_error'
}

export enum ResultReason {
  ABANDONED = 'abandoned',
  BYPASSED = 'bypassed',
  CANCELED = 'canceled',
  CARD_NOT_ENROLLED = 'card_not_enrolled',
  NETWORK_NOT_SUPPORTED = 'network_not_supported',
  PROTOCOL_ERROR = 'protocol_error',
  REJECTED = 'rejected'
}

export enum Version {
  _1_0_2 = '1.0.2',
  _2_1_0 = '2.1.0',
  _2_2_0 = '2.2.0'
}

/** If this Card is part of a card wallet, this contains the details of the card wallet. */
export type Wallet = {
  amexExpressCheckout?: Maybe<Scalars['JSON']>;
  applePay?: Maybe<Scalars['JSON']>;
  /** (For tokenized numbers only.) The last four digits of the device account number. */
  dynamicLast4?: Maybe<Scalars['String']>;
  googlePay?: Maybe<Scalars['JSON']>;
  masterpass?: Maybe<Masterpass>;
  samsungPay?: Maybe<Scalars['JSON']>;
  /** The type of the card wallet, one of `amex_express_checkout`, `apple_pay`, `google_pay`, `masterpass`, `samsung_pay`, or `visa_checkout`. An additional hash is included on the Wallet subhash with a name matching this value. It contains additional information specific to the card wallet type. */
  type?: Maybe<Type9>;
  visaCheckout?: Maybe<VisaCheckout>;
};

export type Masterpass = {
  /** Owner's verified billing address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
  billingAddress?: Maybe<BillingAddress>;
  /** Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
  email?: Maybe<Scalars['String']>;
  /** Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
  name?: Maybe<Scalars['String']>;
  /** Owner's verified shipping address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
  shippingAddress?: Maybe<ShippingAddress>;
};

/** Owner's verified billing address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
export type BillingAddress = {
  /** City, district, suburb, town, or village. */
  city?: Maybe<Scalars['String']>;
  /** Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)). */
  country?: Maybe<Scalars['String']>;
  /** Address line 1 (e.g., street, PO Box, or company name). */
  line1?: Maybe<Scalars['String']>;
  /** Address line 2 (e.g., apartment, suite, unit, or building). */
  line2?: Maybe<Scalars['String']>;
  /** ZIP or postal code. */
  postalCode?: Maybe<Scalars['String']>;
  /** State, county, province, or region. */
  state?: Maybe<Scalars['String']>;
};

/** Owner's verified shipping address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
export type ShippingAddress = {
  /** City, district, suburb, town, or village. */
  city?: Maybe<Scalars['String']>;
  /** Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)). */
  country?: Maybe<Scalars['String']>;
  /** Address line 1 (e.g., street, PO Box, or company name). */
  line1?: Maybe<Scalars['String']>;
  /** Address line 2 (e.g., apartment, suite, unit, or building). */
  line2?: Maybe<Scalars['String']>;
  /** ZIP or postal code. */
  postalCode?: Maybe<Scalars['String']>;
  /** State, county, province, or region. */
  state?: Maybe<Scalars['String']>;
};

export enum Type9 {
  AMEX_EXPRESS_CHECKOUT = 'amex_express_checkout',
  APPLE_PAY = 'apple_pay',
  GOOGLE_PAY = 'google_pay',
  MASTERPASS = 'masterpass',
  SAMSUNG_PAY = 'samsung_pay',
  VISA_CHECKOUT = 'visa_checkout'
}

export type VisaCheckout = {
  /** Owner's verified billing address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
  billingAddress?: Maybe<BillingAddress>;
  /** Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
  email?: Maybe<Scalars['String']>;
  /** Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
  name?: Maybe<Scalars['String']>;
  /** Owner's verified shipping address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
  shippingAddress?: Maybe<ShippingAddress>;
};

export type CardPresent = {
  /** Card brand. Can be `amex`, `diners`, `discover`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`. */
  brand?: Maybe<Scalars['String']>;
  /** The cardholder name as read from the card, in [ISO 7813](https://en.wikipedia.org/wiki/ISO/IEC_7813) format. May include alphanumeric characters, special characters and first/last name separator (`/`). */
  cardholderName?: Maybe<Scalars['String']>;
  /** Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected. */
  country?: Maybe<Scalars['String']>;
  /** Authorization response cryptogram. */
  emvAuthData?: Maybe<Scalars['String']>;
  /** Two-digit number representing the card's expiration month. */
  expMonth: Scalars['Int'];
  /** Four-digit number representing the card's expiration year. */
  expYear: Scalars['Int'];
  /**
   * Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
   *
   * *Starting May 1, 2021, card fingerprint in India for Connect will change to allow two fingerprints for the same card --- one for India and one for the rest of the world.*
   */
  fingerprint?: Maybe<Scalars['String']>;
  /** Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`. */
  funding?: Maybe<Scalars['String']>;
  /** ID of a card PaymentMethod generated from the card_present PaymentMethod that may be attached to a Customer for future transactions. Only present if it was possible to generate a card PaymentMethod. */
  generatedCard?: Maybe<Scalars['String']>;
  /** The last four digits of the card. */
  last4?: Maybe<Scalars['String']>;
  /** Identifies which network this charge was processed on. Can be `amex`, `cartes_bancaires`, `diners`, `discover`, `interac`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`. */
  network?: Maybe<Scalars['String']>;
  /** How card details were read in this transaction. */
  readMethod?: Maybe<ReadMethod>;
  /** A collection of fields required to be displayed on receipts. Only required for EMV transactions. */
  receipt?: Maybe<Receipt>;
};

export enum ReadMethod {
  CONTACT_EMV = 'contact_emv',
  CONTACTLESS_EMV = 'contactless_emv',
  CONTACTLESS_MAGSTRIPE_MODE = 'contactless_magstripe_mode',
  MAGNETIC_STRIPE_FALLBACK = 'magnetic_stripe_fallback',
  MAGNETIC_STRIPE_TRACK2 = 'magnetic_stripe_track2'
}

/** A collection of fields required to be displayed on receipts. Only required for EMV transactions. */
export type Receipt = {
  /** The type of account being debited or credited */
  accountType?: Maybe<AccountType4>;
  /** EMV tag 9F26, cryptogram generated by the integrated circuit chip. */
  applicationCryptogram?: Maybe<Scalars['String']>;
  /** Mnenomic of the Application Identifier. */
  applicationPreferredName?: Maybe<Scalars['String']>;
  /** Identifier for this transaction. */
  authorizationCode?: Maybe<Scalars['String']>;
  /** EMV tag 8A. A code returned by the card issuer. */
  authorizationResponseCode?: Maybe<Scalars['String']>;
  /** How the cardholder verified ownership of the card. */
  cardholderVerificationMethod?: Maybe<Scalars['String']>;
  /** EMV tag 84. Similar to the application identifier stored on the integrated circuit chip. */
  dedicatedFileName?: Maybe<Scalars['String']>;
  /** The outcome of a series of EMV functions performed by the card reader. */
  terminalVerificationResults?: Maybe<Scalars['String']>;
  /** An indication of various EMV functions performed during the transaction. */
  transactionStatusInformation?: Maybe<Scalars['String']>;
};

export enum AccountType4 {
  CHECKING = 'checking',
  CREDIT = 'credit',
  PREPAID = 'prepaid',
  UNKNOWN = 'unknown'
}

export type Eps = {
  /** The customer's bank. Should be one of `arzte_und_apotheker_bank`, `austrian_anadi_bank_ag`, `bank_austria`, `bankhaus_carl_spangler`, `bankhaus_schelhammer_und_schattera_ag`, `bawag_psk_ag`, `bks_bank_ag`, `brull_kallmus_bank_ag`, `btv_vier_lander_bank`, `capital_bank_grawe_gruppe_ag`, `dolomitenbank`, `easybank_ag`, `erste_bank_und_sparkassen`, `hypo_alpeadriabank_international_ag`, `hypo_noe_lb_fur_niederosterreich_u_wien`, `hypo_oberosterreich_salzburg_steiermark`, `hypo_tirol_bank_ag`, `hypo_vorarlberg_bank_ag`, `hypo_bank_burgenland_aktiengesellschaft`, `marchfelder_bank`, `oberbank_ag`, `raiffeisen_bankengruppe_osterreich`, `schoellerbank_ag`, `sparda_bank_wien`, `volksbank_gruppe`, `volkskreditbank_ag`, or `vr_bank_braunau`. */
  bank?: Maybe<Bank>;
  /**
   * Owner's verified full name. Values are verified or provided by EPS directly
   * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   * EPS rarely provides this information so the attribute is usually empty.
   */
  verifiedName?: Maybe<Scalars['String']>;
};

export enum Bank {
  ARZTE_UND_APOTHEKER_BANK = 'arzte_und_apotheker_bank',
  AUSTRIAN_ANADI_BANK_AG = 'austrian_anadi_bank_ag',
  BANK_AUSTRIA = 'bank_austria',
  BANKHAUS_CARL_SPANGLER = 'bankhaus_carl_spangler',
  BANKHAUS_SCHELHAMMER_UND_SCHATTERA_AG = 'bankhaus_schelhammer_und_schattera_ag',
  BAWAG_PSK_AG = 'bawag_psk_ag',
  BKS_BANK_AG = 'bks_bank_ag',
  BRULL_KALLMUS_BANK_AG = 'brull_kallmus_bank_ag',
  BTV_VIER_LANDER_BANK = 'btv_vier_lander_bank',
  CAPITAL_BANK_GRAWE_GRUPPE_AG = 'capital_bank_grawe_gruppe_ag',
  DOLOMITENBANK = 'dolomitenbank',
  EASYBANK_AG = 'easybank_ag',
  ERSTE_BANK_UND_SPARKASSEN = 'erste_bank_und_sparkassen',
  HYPO_ALPEADRIABANK_INTERNATIONAL_AG = 'hypo_alpeadriabank_international_ag',
  HYPO_BANK_BURGENLAND_AKTIENGESELLSCHAFT = 'hypo_bank_burgenland_aktiengesellschaft',
  HYPO_NOE_LB_FUR_NIEDEROSTERREICH_U_WIEN = 'hypo_noe_lb_fur_niederosterreich_u_wien',
  HYPO_OBEROSTERREICH_SALZBURG_STEIERMARK = 'hypo_oberosterreich_salzburg_steiermark',
  HYPO_TIROL_BANK_AG = 'hypo_tirol_bank_ag',
  HYPO_VORARLBERG_BANK_AG = 'hypo_vorarlberg_bank_ag',
  MARCHFELDER_BANK = 'marchfelder_bank',
  OBERBANK_AG = 'oberbank_ag',
  RAIFFEISEN_BANKENGRUPPE_OSTERREICH = 'raiffeisen_bankengruppe_osterreich',
  SCHOELLERBANK_AG = 'schoellerbank_ag',
  SPARDA_BANK_WIEN = 'sparda_bank_wien',
  VOLKSBANK_GRUPPE = 'volksbank_gruppe',
  VOLKSKREDITBANK_AG = 'volkskreditbank_ag',
  VR_BANK_BRAUNAU = 'vr_bank_braunau'
}

export type Fpx2 = {
  /** The customer's bank. Can be one of `affin_bank`, `alliance_bank`, `ambank`, `bank_islam`, `bank_muamalat`, `bank_rakyat`, `bsn`, `cimb`, `hong_leong_bank`, `hsbc`, `kfh`, `maybank2u`, `ocbc`, `public_bank`, `rhb`, `standard_chartered`, `uob`, `deutsche_bank`, `maybank2e`, or `pb_enterprise`. */
  bank: Bank2;
  /** Unique transaction id generated by FPX for every request from the merchant */
  transactionId?: Maybe<Scalars['String']>;
};

export enum Bank2 {
  AFFIN_BANK = 'affin_bank',
  ALLIANCE_BANK = 'alliance_bank',
  AMBANK = 'ambank',
  BANK_ISLAM = 'bank_islam',
  BANK_MUAMALAT = 'bank_muamalat',
  BANK_RAKYAT = 'bank_rakyat',
  BSN = 'bsn',
  CIMB = 'cimb',
  DEUTSCHE_BANK = 'deutsche_bank',
  HONG_LEONG_BANK = 'hong_leong_bank',
  HSBC = 'hsbc',
  KFH = 'kfh',
  MAYBANK2E = 'maybank2e',
  MAYBANK2U = 'maybank2u',
  OCBC = 'ocbc',
  PB_ENTERPRISE = 'pb_enterprise',
  PUBLIC_BANK = 'public_bank',
  RHB = 'rhb',
  STANDARD_CHARTERED = 'standard_chartered',
  UOB = 'uob'
}

export type Giropay = {
  /** Bank code of bank associated with the bank account. */
  bankCode?: Maybe<Scalars['String']>;
  /** Name of the bank associated with the bank account. */
  bankName?: Maybe<Scalars['String']>;
  /** Bank Identifier Code of the bank associated with the bank account. */
  bic?: Maybe<Scalars['String']>;
  /**
   * Owner's verified full name. Values are verified or provided by Giropay directly
   * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   * Giropay rarely provides this information so the attribute is usually empty.
   */
  verifiedName?: Maybe<Scalars['String']>;
};

export type Grabpay = {
  /** Unique transaction id generated by GrabPay */
  transactionId?: Maybe<Scalars['String']>;
};

export type Ideal = {
  /** The customer's bank. Can be one of `abn_amro`, `asn_bank`, `bunq`, `handelsbanken`, `ing`, `knab`, `moneyou`, `rabobank`, `regiobank`, `revolut`, `sns_bank`, `triodos_bank`, or `van_lanschot`. */
  bank?: Maybe<Bank3>;
  /** The Bank Identifier Code of the customer's bank. */
  bic?: Maybe<Bic3>;
  /** The ID of the SEPA Direct Debit PaymentMethod which was generated by this Charge. */
  generatedSepaDebit?: Maybe<Scalars['JSON']>;
  /** The mandate for the SEPA Direct Debit PaymentMethod which was generated by this Charge. */
  generatedSepaDebitMandate?: Maybe<Scalars['JSON']>;
  /** Last four characters of the IBAN. */
  ibanLast4?: Maybe<Scalars['String']>;
  /**
   * Owner's verified full name. Values are verified or provided by iDEAL directly
   * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   */
  verifiedName?: Maybe<Scalars['String']>;
};

export enum Bank3 {
  ABN_AMRO = 'abn_amro',
  ASN_BANK = 'asn_bank',
  BUNQ = 'bunq',
  HANDELSBANKEN = 'handelsbanken',
  ING = 'ing',
  KNAB = 'knab',
  MONEYOU = 'moneyou',
  RABOBANK = 'rabobank',
  REGIOBANK = 'regiobank',
  REVOLUT = 'revolut',
  SNS_BANK = 'sns_bank',
  TRIODOS_BANK = 'triodos_bank',
  VAN_LANSCHOT = 'van_lanschot'
}

export enum Bic3 {
  ABNANL2A = 'ABNANL2A',
  ASNBNL21 = 'ASNBNL21',
  BUNQNL2A = 'BUNQNL2A',
  FVLBNL22 = 'FVLBNL22',
  HANDNL2A = 'HANDNL2A',
  INGBNL2A = 'INGBNL2A',
  KNABNL2H = 'KNABNL2H',
  MOYONL21 = 'MOYONL21',
  RABONL2U = 'RABONL2U',
  RBRBNL21 = 'RBRBNL21',
  REVOLT21 = 'REVOLT21',
  SNSBNL2A = 'SNSBNL2A',
  TRIONL2U = 'TRIONL2U'
}

export type InteracPresent = {
  /** Card brand. Can be `interac`, `mastercard` or `visa`. */
  brand?: Maybe<Scalars['String']>;
  /** The cardholder name as read from the card, in [ISO 7813](https://en.wikipedia.org/wiki/ISO/IEC_7813) format. May include alphanumeric characters, special characters and first/last name separator (`/`). */
  cardholderName?: Maybe<Scalars['String']>;
  /** Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected. */
  country?: Maybe<Scalars['String']>;
  /** Authorization response cryptogram. */
  emvAuthData?: Maybe<Scalars['String']>;
  /** Two-digit number representing the card's expiration month. */
  expMonth: Scalars['Int'];
  /** Four-digit number representing the card's expiration year. */
  expYear: Scalars['Int'];
  /**
   * Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
   *
   * *Starting May 1, 2021, card fingerprint in India for Connect will change to allow two fingerprints for the same card --- one for India and one for the rest of the world.*
   */
  fingerprint?: Maybe<Scalars['String']>;
  /** Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`. */
  funding?: Maybe<Scalars['String']>;
  /** ID of a card PaymentMethod generated from the card_present PaymentMethod that may be attached to a Customer for future transactions. Only present if it was possible to generate a card PaymentMethod. */
  generatedCard?: Maybe<Scalars['String']>;
  /** The last four digits of the card. */
  last4?: Maybe<Scalars['String']>;
  /** Identifies which network this charge was processed on. Can be `amex`, `cartes_bancaires`, `diners`, `discover`, `interac`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`. */
  network?: Maybe<Scalars['String']>;
  /** EMV tag 5F2D. Preferred languages specified by the integrated circuit chip. */
  preferredLocales?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** How card details were read in this transaction. */
  readMethod?: Maybe<ReadMethod>;
  /** A collection of fields required to be displayed on receipts. Only required for EMV transactions. */
  receipt?: Maybe<Receipt2>;
};

/** A collection of fields required to be displayed on receipts. Only required for EMV transactions. */
export type Receipt2 = {
  /** The type of account being debited or credited */
  accountType?: Maybe<AccountType5>;
  /** EMV tag 9F26, cryptogram generated by the integrated circuit chip. */
  applicationCryptogram?: Maybe<Scalars['String']>;
  /** Mnenomic of the Application Identifier. */
  applicationPreferredName?: Maybe<Scalars['String']>;
  /** Identifier for this transaction. */
  authorizationCode?: Maybe<Scalars['String']>;
  /** EMV tag 8A. A code returned by the card issuer. */
  authorizationResponseCode?: Maybe<Scalars['String']>;
  /** How the cardholder verified ownership of the card. */
  cardholderVerificationMethod?: Maybe<Scalars['String']>;
  /** EMV tag 84. Similar to the application identifier stored on the integrated circuit chip. */
  dedicatedFileName?: Maybe<Scalars['String']>;
  /** The outcome of a series of EMV functions performed by the card reader. */
  terminalVerificationResults?: Maybe<Scalars['String']>;
  /** An indication of various EMV functions performed during the transaction. */
  transactionStatusInformation?: Maybe<Scalars['String']>;
};

export enum AccountType5 {
  CHECKING = 'checking',
  SAVINGS = 'savings',
  UNKNOWN = 'unknown'
}

export type Multibanco = {
  /** Entity number associated with this Multibanco payment. */
  entity?: Maybe<Scalars['String']>;
  /** Reference number associated with this Multibanco payment. */
  reference?: Maybe<Scalars['String']>;
};

export type Oxxo = {
  /** OXXO reference number */
  number?: Maybe<Scalars['String']>;
};

export type P24 = {
  /** The customer's bank. Can be one of `ing`, `citi_handlowy`, `tmobile_usbugi_bankowe`, `plus_bank`, `etransfer_pocztowy24`, `banki_spbdzielcze`, `bank_nowy_bfg_sa`, `getin_bank`, `blik`, `noble_pay`, `ideabank`, `envelobank`, `santander_przelew24`, `nest_przelew`, `mbank_mtransfer`, `inteligo`, `pbac_z_ipko`, `bnp_paribas`, `credit_agricole`, `toyota_bank`, `bank_pekao_sa`, `volkswagen_bank`, `bank_millennium`, `alior_bank`, or `boz`. */
  bank?: Maybe<Bank4>;
  /** Unique reference for this Przelewy24 payment. */
  reference?: Maybe<Scalars['String']>;
  /**
   * Owner's verified full name. Values are verified or provided by Przelewy24 directly
   * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   * Przelewy24 rarely provides this information so the attribute is usually empty.
   */
  verifiedName?: Maybe<Scalars['String']>;
};

export enum Bank4 {
  ALIOR_BANK = 'alior_bank',
  BANK_MILLENNIUM = 'bank_millennium',
  BANK_NOWY_BFG_SA = 'bank_nowy_bfg_sa',
  BANK_PEKAO_SA = 'bank_pekao_sa',
  BANKI_SPBDZIELCZE = 'banki_spbdzielcze',
  BLIK = 'blik',
  BNP_PARIBAS = 'bnp_paribas',
  BOZ = 'boz',
  CITI_HANDLOWY = 'citi_handlowy',
  CREDIT_AGRICOLE = 'credit_agricole',
  ENVELOBANK = 'envelobank',
  ETRANSFER_POCZTOWY24 = 'etransfer_pocztowy24',
  GETIN_BANK = 'getin_bank',
  IDEABANK = 'ideabank',
  ING = 'ing',
  INTELIGO = 'inteligo',
  MBANK_MTRANSFER = 'mbank_mtransfer',
  NEST_PRZELEW = 'nest_przelew',
  NOBLE_PAY = 'noble_pay',
  PBAC_Z_IPKO = 'pbac_z_ipko',
  PLUS_BANK = 'plus_bank',
  SANTANDER_PRZELEW24 = 'santander_przelew24',
  TMOBILE_USBUGI_BANKOWE = 'tmobile_usbugi_bankowe',
  TOYOTA_BANK = 'toyota_bank',
  VOLKSWAGEN_BANK = 'volkswagen_bank'
}

export type SepaDebit = {
  /** Bank code of bank associated with the bank account. */
  bankCode?: Maybe<Scalars['String']>;
  /** Branch code of bank associated with the bank account. */
  branchCode?: Maybe<Scalars['String']>;
  /** Two-letter ISO code representing the country the bank account is located in. */
  country?: Maybe<Scalars['String']>;
  /** Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
  fingerprint?: Maybe<Scalars['String']>;
  /** Last four characters of the IBAN. */
  last4?: Maybe<Scalars['String']>;
  /** ID of the mandate used to make this payment. */
  mandate?: Maybe<Scalars['String']>;
};

export type Sofort = {
  /** Bank code of bank associated with the bank account. */
  bankCode?: Maybe<Scalars['String']>;
  /** Name of the bank associated with the bank account. */
  bankName?: Maybe<Scalars['String']>;
  /** Bank Identifier Code of the bank associated with the bank account. */
  bic?: Maybe<Scalars['String']>;
  /** Two-letter ISO code representing the country the bank account is located in. */
  country?: Maybe<Scalars['String']>;
  /** The ID of the SEPA Direct Debit PaymentMethod which was generated by this Charge. */
  generatedSepaDebit?: Maybe<Scalars['JSON']>;
  /** The mandate for the SEPA Direct Debit PaymentMethod which was generated by this Charge. */
  generatedSepaDebitMandate?: Maybe<Scalars['JSON']>;
  /** Last four characters of the IBAN. */
  ibanLast4?: Maybe<Scalars['String']>;
  /**
   * Preferred language of the SOFORT authorization page that the customer is redirected to.
   * Can be one of `de`, `en`, `es`, `fr`, `it`, `nl`, or `pl`
   */
  preferredLanguage?: Maybe<PreferredLanguage2>;
  /**
   * Owner's verified full name. Values are verified or provided by SOFORT directly
   * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   */
  verifiedName?: Maybe<Scalars['String']>;
};

export enum PreferredLanguage2 {
  DE = 'de',
  EN = 'en',
  ES = 'es',
  FR = 'fr',
  IT = 'it',
  NL = 'nl',
  PL = 'pl'
}

export type WechatPay = {
  /** Uniquely identifies this particular WeChat Pay account. You can use this attribute to check whether two WeChat accounts are the same. */
  fingerprint?: Maybe<Scalars['String']>;
  /** Transaction ID of this particular WeChat Pay transaction. */
  transactionId?: Maybe<Scalars['String']>;
};

/** A list of refunds that have been applied to the charge. */
export type RefundList = {
  /** Details about each object. */
  data: Array<Maybe<Refund>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

/**
 * `Refund` objects allow you to refund a charge that has previously been created
 * but not yet refunded. Funds will be refunded to the credit or debit card that
 * was originally charged.
 *
 * Related guide: [Refunds](https://stripe.com/docs/refunds).
 */
export type Refund = {
  /** Amount, in %s. */
  amount: Scalars['Int'];
  /** Balance transaction that describes the impact on your account balance. */
  balanceTransaction?: Maybe<Scalars['JSON']>;
  /** ID of the charge that was refunded. */
  charge?: Maybe<Scalars['JSON']>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created: Scalars['Int'];
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency: Scalars['String'];
  /** An arbitrary string attached to the object. Often useful for displaying to users. (Available on non-card refunds only) */
  description?: Maybe<Scalars['String']>;
  /** If the refund failed, this balance transaction describes the adjustment made on your account balance that reverses the initial balance transaction. */
  failureBalanceTransaction?: Maybe<Scalars['JSON']>;
  /** If the refund failed, the reason for refund failure if known. Possible values are `lost_or_stolen_card`, `expired_or_canceled_card`, or `unknown`. */
  failureReason?: Maybe<Scalars['String']>;
  /** Unique identifier for the object. */
  id: Scalars['String'];
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Maybe<Scalars['JSON']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object19;
  /** ID of the PaymentIntent that was refunded. */
  paymentIntent?: Maybe<Scalars['JSON']>;
  /** Reason for the refund, either user-provided (`duplicate`, `fraudulent`, or `requested_by_customer`) or generated by Stripe internally (`expired_uncaptured_charge`). */
  reason?: Maybe<Scalars['String']>;
  /** This is the transaction number that appears on email receipts sent for this refund. */
  receiptNumber?: Maybe<Scalars['String']>;
  /** The transfer reversal that is associated with the refund. Only present if the charge came from another Stripe account. See the Connect documentation for details. */
  sourceTransferReversal?: Maybe<Scalars['JSON']>;
  /** Status of the refund. For credit card refunds, this can be `pending`, `succeeded`, or `failed`. For other types of refunds, it can be `pending`, `succeeded`, `failed`, or `canceled`. Refer to our [refunds](https://stripe.com/docs/refunds#failed-refunds) documentation for more details. */
  status?: Maybe<Scalars['String']>;
  /** If the accompanying transfer was reversed, the transfer reversal object. Only applicable if the charge was created using the destination parameter. */
  transferReversal?: Maybe<Scalars['JSON']>;
};

export enum Object19 {
  REFUND = 'refund'
}

/** Shipping information for the charge. */
export type Shipping = {
  address?: Maybe<Address>;
  /** The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc. */
  carrier?: Maybe<Scalars['String']>;
  /** Recipient name. */
  name?: Maybe<Scalars['String']>;
  /** Recipient phone (including extension). */
  phone?: Maybe<Scalars['String']>;
  /** The tracking number for a physical product, obtained from the delivery service. If multiple tracking numbers were generated for this purchase, please separate them with commas. */
  trackingNumber?: Maybe<Scalars['String']>;
};

/** An optional dictionary including the account to automatically transfer to as part of a destination charge. [See the Connect documentation](https://stripe.com/docs/connect/destination-charges) for details. */
export type TransferData = {
  /** The amount transferred to the destination account, if specified. By default, the entire charge amount is transferred to the destination account. */
  amount?: Maybe<Scalars['Int']>;
  /** ID of an existing, connected Stripe account to transfer funds to if `transfer_data` was specified in the charge request. */
  destination?: Maybe<Scalars['JSON']>;
};

/**
 * A dispute occurs when a customer questions your charge with their card issuer.
 * When this happens, you're given the opportunity to respond to the dispute with
 * evidence that shows that the charge is legitimate. You can find more
 * information about the dispute process in our [Disputes and
 * Fraud](/docs/disputes) documentation.
 *
 * Related guide: [Disputes and Fraud](https://stripe.com/docs/disputes).
 */
export type Dispute = {
  /** Disputed amount. Usually the amount of the charge, but can differ (usually because of currency fluctuation or because only part of the order is disputed). */
  amount: Scalars['Int'];
  /** List of zero, one, or two balance transactions that show funds withdrawn and reinstated to your Stripe account as a result of this dispute. */
  balanceTransactions: Array<Maybe<BalanceTransaction3>>;
  /** ID of the charge that was disputed. */
  charge: Scalars['JSON'];
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created: Scalars['Int'];
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency: Scalars['String'];
  evidence: DisputeEvidence;
  evidenceDetails: DisputeEvidenceDetails;
  /** Unique identifier for the object. */
  id: Scalars['String'];
  /** If true, it is still possible to refund the disputed payment. Once the payment has been fully refunded, no further funds will be withdrawn from your Stripe account as a result of this dispute. */
  isChargeRefundable: Scalars['Boolean'];
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: Scalars['Boolean'];
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata: Scalars['JSON'];
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object20;
  /** ID of the PaymentIntent that was disputed. */
  paymentIntent?: Maybe<Scalars['JSON']>;
  /** Reason given by cardholder for dispute. Possible values are `bank_cannot_process`, `check_returned`, `credit_not_processed`, `customer_initiated`, `debit_not_authorized`, `duplicate`, `fraudulent`, `general`, `incorrect_account_details`, `insufficient_funds`, `product_not_received`, `product_unacceptable`, `subscription_canceled`, or `unrecognized`. Read more about [dispute reasons](https://stripe.com/docs/disputes/categories). */
  reason: Scalars['String'];
  /** Current status of dispute. Possible values are `warning_needs_response`, `warning_under_review`, `warning_closed`, `needs_response`, `under_review`, `charge_refunded`, `won`, or `lost`. */
  status: Status9;
};

export type DisputeEvidence = {
  /** Any server or activity logs showing proof that the customer accessed or downloaded the purchased digital product. This information should include IP addresses, corresponding timestamps, and any detailed recorded activity. */
  accessActivityLog?: Maybe<Scalars['String']>;
  /** The billing address provided by the customer. */
  billingAddress?: Maybe<Scalars['String']>;
  /** (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Your subscription cancellation policy, as shown to the customer. */
  cancellationPolicy?: Maybe<Scalars['JSON']>;
  /** An explanation of how and when the customer was shown your refund policy prior to purchase. */
  cancellationPolicyDisclosure?: Maybe<Scalars['String']>;
  /** A justification for why the customer's subscription was not canceled. */
  cancellationRebuttal?: Maybe<Scalars['String']>;
  /** (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Any communication with the customer that you feel is relevant to your case. Examples include emails proving that the customer received the product or service, or demonstrating their use of or satisfaction with the product or service. */
  customerCommunication?: Maybe<Scalars['JSON']>;
  /** The email address of the customer. */
  customerEmailAddress?: Maybe<Scalars['String']>;
  /** The name of the customer. */
  customerName?: Maybe<Scalars['String']>;
  /** The IP address that the customer used when making the purchase. */
  customerPurchaseIp?: Maybe<Scalars['String']>;
  /** (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) A relevant document or contract showing the customer's signature. */
  customerSignature?: Maybe<Scalars['JSON']>;
  /** (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Documentation for the prior charge that can uniquely identify the charge, such as a receipt, shipping label, work order, etc. This document should be paired with a similar document from the disputed payment that proves the two payments are separate. */
  duplicateChargeDocumentation?: Maybe<Scalars['JSON']>;
  /** An explanation of the difference between the disputed charge versus the prior charge that appears to be a duplicate. */
  duplicateChargeExplanation?: Maybe<Scalars['String']>;
  /** The Stripe ID for the prior charge which appears to be a duplicate of the disputed charge. */
  duplicateChargeId?: Maybe<Scalars['String']>;
  /** A description of the product or service that was sold. */
  productDescription?: Maybe<Scalars['String']>;
  /** (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Any receipt or message sent to the customer notifying them of the charge. */
  receipt?: Maybe<Scalars['JSON']>;
  /** (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Your refund policy, as shown to the customer. */
  refundPolicy?: Maybe<Scalars['JSON']>;
  /** Documentation demonstrating that the customer was shown your refund policy prior to purchase. */
  refundPolicyDisclosure?: Maybe<Scalars['String']>;
  /** A justification for why the customer is not entitled to a refund. */
  refundRefusalExplanation?: Maybe<Scalars['String']>;
  /** The date on which the customer received or began receiving the purchased service, in a clear human-readable format. */
  serviceDate?: Maybe<Scalars['String']>;
  /** (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Documentation showing proof that a service was provided to the customer. This could include a copy of a signed contract, work order, or other form of written agreement. */
  serviceDocumentation?: Maybe<Scalars['JSON']>;
  /** The address to which a physical product was shipped. You should try to include as complete address information as possible. */
  shippingAddress?: Maybe<Scalars['String']>;
  /** The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc. If multiple carriers were used for this purchase, please separate them with commas. */
  shippingCarrier?: Maybe<Scalars['String']>;
  /** The date on which a physical product began its route to the shipping address, in a clear human-readable format. */
  shippingDate?: Maybe<Scalars['String']>;
  /** (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Documentation showing proof that a product was shipped to the customer at the same address the customer provided to you. This could include a copy of the shipment receipt, shipping label, etc. It should show the customer's full shipping address, if possible. */
  shippingDocumentation?: Maybe<Scalars['JSON']>;
  /** The tracking number for a physical product, obtained from the delivery service. If multiple tracking numbers were generated for this purchase, please separate them with commas. */
  shippingTrackingNumber?: Maybe<Scalars['String']>;
  /** (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Any additional evidence or statements. */
  uncategorizedFile?: Maybe<Scalars['JSON']>;
  /** Any additional evidence or statements. */
  uncategorizedText?: Maybe<Scalars['String']>;
};

export type DisputeEvidenceDetails = {
  /** Date by which evidence must be submitted in order to successfully challenge dispute. Will be null if the customer's bank or credit card company doesn't allow a response for this particular dispute. */
  dueBy?: Maybe<Scalars['Int']>;
  /** Whether evidence has been staged for this dispute. */
  hasEvidence: Scalars['Boolean'];
  /** Whether the last evidence submission was submitted past the due date. Defaults to `false` if no evidence submissions have occurred. If `true`, then delivery of the latest evidence is *not* guaranteed. */
  pastDue: Scalars['Boolean'];
  /** The number of times evidence has been submitted. Typically, you may only submit evidence once. */
  submissionCount: Scalars['Int'];
};

export enum Object20 {
  DISPUTE = 'dispute'
}

export enum Status9 {
  CHARGE_REFUNDED = 'charge_refunded',
  LOST = 'lost',
  NEEDS_RESPONSE = 'needs_response',
  UNDER_REVIEW = 'under_review',
  WARNING_CLOSED = 'warning_closed',
  WARNING_NEEDS_RESPONSE = 'warning_needs_response',
  WARNING_UNDER_REVIEW = 'warning_under_review',
  WON = 'won'
}

export type RefundList2 = {
  /** Details about each object. */
  data: Array<Maybe<Refund>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

export type PaymentPagesCheckoutSessionList = {
  data: Array<Maybe<CheckoutSession>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

/**
 * A Checkout Session represents your customer's session as they pay for
 * one-time purchases or subscriptions through [Checkout](https://stripe.com/docs/payments/checkout).
 * We recommend creating a new Session each time your customer attempts to pay.
 *
 * Once payment is successful, the Checkout Session will contain a reference
 * to the [Customer](https://stripe.com/docs/api/customers), and either the successful
 * [PaymentIntent](https://stripe.com/docs/api/payment_intents) or an active
 * [Subscription](https://stripe.com/docs/api/subscriptions).
 *
 * You can create a Checkout Session on your server and pass its ID to the
 * client to begin Checkout.
 *
 * Related guide: [Checkout Server Quickstart](https://stripe.com/docs/payments/checkout/api).
 */
export type CheckoutSession = {
  /** Enables user redeemable promotion codes. */
  allowPromotionCodes?: Maybe<Scalars['Boolean']>;
  /** Total of all items before discounts or taxes are applied. */
  amountSubtotal?: Maybe<Scalars['Int']>;
  /** Total of all items after discounts and taxes are applied. */
  amountTotal?: Maybe<Scalars['Int']>;
  automaticTax: PaymentPagesCheckoutSessionAutomaticTax;
  /** Describes whether Checkout should collect the customer's billing address. */
  billingAddressCollection?: Maybe<BillingAddressCollection>;
  /** The URL the customer will be directed to if they decide to cancel payment and return to your website. */
  cancelUrl: Scalars['String'];
  /**
   * A unique string to reference the Checkout Session. This can be a
   * customer ID, a cart ID, or similar, and can be used to reconcile the
   * Session with your internal systems.
   */
  clientReferenceId?: Maybe<Scalars['String']>;
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency?: Maybe<Scalars['String']>;
  /**
   * The ID of the customer for this Session.
   * For Checkout Sessions in `payment` or `subscription` mode, Checkout
   * will create a new customer object based on information provided
   * during the payment flow unless an existing customer was provided when
   * the Session was created.
   */
  customer?: Maybe<Scalars['JSON']>;
  /** The customer details including the customer's tax exempt status and the customer's tax IDs. Only present on Sessions in `payment` or `subscription` mode. */
  customerDetails?: Maybe<CustomerDetails>;
  /**
   * If provided, this value will be used when the Customer object is created.
   * If not provided, customers will be asked to enter their email address.
   * Use this parameter to prefill customer data if you already have an email
   * on file. To access information about the customer once the payment flow is
   * complete, use the `customer` attribute.
   */
  customerEmail?: Maybe<Scalars['String']>;
  /**
   * Unique identifier for the object. Used to pass to `redirectToCheckout`
   * in Stripe.js.
   */
  id: Scalars['String'];
  /** The line items purchased by the customer. */
  lineItems?: Maybe<LineItems>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: Scalars['Boolean'];
  /** The IETF language tag of the locale Checkout is displayed in. If blank or `auto`, the browser's locale is used. */
  locale?: Maybe<Locale>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Maybe<Scalars['JSON']>;
  /** The mode of the Checkout Session. */
  mode: Mode3;
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object26;
  /** The ID of the PaymentIntent for Checkout Sessions in `payment` mode. */
  paymentIntent?: Maybe<Scalars['JSON']>;
  /** Payment-method-specific configuration for the PaymentIntent or SetupIntent of this CheckoutSession. */
  paymentMethodOptions?: Maybe<PaymentMethodOptions>;
  /**
   * A list of the types of payment methods (e.g. card) this Checkout
   * Session is allowed to accept.
   */
  paymentMethodTypes: Array<Maybe<Scalars['String']>>;
  /**
   * The payment status of the Checkout Session, one of `paid`, `unpaid`, or `no_payment_required`.
   * You can use this value to decide when to fulfill your customer's order.
   */
  paymentStatus: PaymentStatus;
  /** The ID of the SetupIntent for Checkout Sessions in `setup` mode. */
  setupIntent?: Maybe<Scalars['JSON']>;
  /** Shipping information for this Checkout Session. */
  shipping?: Maybe<Shipping2>;
  /** When set, provides configuration for Checkout to collect a shipping address from a customer. */
  shippingAddressCollection?: Maybe<ShippingAddressCollection>;
  /**
   * Describes the type of transaction being performed by Checkout in order to customize
   * relevant text on the page, such as the submit button. `submit_type` can only be
   * specified on Checkout Sessions in `payment` mode, but not Checkout Sessions
   * in `subscription` or `setup` mode.
   */
  submitType?: Maybe<SubmitType>;
  /** The ID of the subscription for Checkout Sessions in `subscription` mode. */
  subscription?: Maybe<Scalars['JSON']>;
  /**
   * The URL the customer will be directed to after the payment or
   * subscription creation is successful.
   */
  successUrl: Scalars['String'];
  taxIdCollection?: Maybe<PaymentPagesCheckoutSessionTaxIdCollection>;
  /** Tax and discount details for the computed total amount. */
  totalDetails?: Maybe<TotalDetails>;
  /** The URL to the Checkout Session. */
  url?: Maybe<Scalars['String']>;
};

export type PaymentPagesCheckoutSessionAutomaticTax = {
  /** Indicates whether automatic tax is enabled for the session */
  enabled: Scalars['Boolean'];
  /** The status of the most recent automated tax calculation for this session. */
  status?: Maybe<Status10>;
};

export enum Status10 {
  COMPLETE = 'complete',
  FAILED = 'failed',
  REQUIRES_LOCATION_INPUTS = 'requires_location_inputs'
}

export enum BillingAddressCollection {
  AUTO = 'auto',
  REQUIRED = 'required'
}

/** The customer details including the customer's tax exempt status and the customer's tax IDs. Only present on Sessions in `payment` or `subscription` mode. */
export type CustomerDetails = {
  /** The customer’s email at time of checkout. */
  email?: Maybe<Scalars['String']>;
  /** The customer’s tax exempt status at time of checkout. */
  taxExempt?: Maybe<TaxExempt>;
  /** The customer’s tax IDs at time of checkout. */
  taxIds?: Maybe<Array<Maybe<PaymentPagesCheckoutSessionTaxId>>>;
};

export enum TaxExempt {
  EXEMPT = 'exempt',
  NONE = 'none',
  REVERSE = 'reverse'
}

export type PaymentPagesCheckoutSessionTaxId = {
  /** The type of the tax ID, one of `eu_vat`, `br_cnpj`, `br_cpf`, `gb_vat`, `nz_gst`, `au_abn`, `in_gst`, `no_vat`, `za_vat`, `ch_vat`, `mx_rfc`, `sg_uen`, `ru_inn`, `ru_kpp`, `ca_bn`, `hk_br`, `es_cif`, `tw_vat`, `th_vat`, `jp_cn`, `jp_rn`, `li_uid`, `my_itn`, `us_ein`, `kr_brn`, `ca_qst`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `my_sst`, `sg_gst`, `ae_trn`, `cl_tin`, `sa_vat`, `id_npwp`, `my_frp`, `il_vat`, or `unknown` */
  type: Type11;
  /** The value of the tax ID. */
  value?: Maybe<Scalars['String']>;
};

export enum Type11 {
  AE_TRN = 'ae_trn',
  AU_ABN = 'au_abn',
  BR_CNPJ = 'br_cnpj',
  BR_CPF = 'br_cpf',
  CA_BN = 'ca_bn',
  CA_GST_HST = 'ca_gst_hst',
  CA_PST_BC = 'ca_pst_bc',
  CA_PST_MB = 'ca_pst_mb',
  CA_PST_SK = 'ca_pst_sk',
  CA_QST = 'ca_qst',
  CH_VAT = 'ch_vat',
  CL_TIN = 'cl_tin',
  ES_CIF = 'es_cif',
  EU_VAT = 'eu_vat',
  GB_VAT = 'gb_vat',
  HK_BR = 'hk_br',
  ID_NPWP = 'id_npwp',
  IL_VAT = 'il_vat',
  IN_GST = 'in_gst',
  JP_CN = 'jp_cn',
  JP_RN = 'jp_rn',
  KR_BRN = 'kr_brn',
  LI_UID = 'li_uid',
  MX_RFC = 'mx_rfc',
  MY_FRP = 'my_frp',
  MY_ITN = 'my_itn',
  MY_SST = 'my_sst',
  NO_VAT = 'no_vat',
  NZ_GST = 'nz_gst',
  RU_INN = 'ru_inn',
  RU_KPP = 'ru_kpp',
  SA_VAT = 'sa_vat',
  SG_GST = 'sg_gst',
  SG_UEN = 'sg_uen',
  TH_VAT = 'th_vat',
  TW_VAT = 'tw_vat',
  UNKNOWN = 'unknown',
  US_EIN = 'us_ein',
  ZA_VAT = 'za_vat'
}

/** The line items purchased by the customer. */
export type LineItems = {
  /** Details about each object. */
  data: Array<Maybe<Item>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

/** A line item. */
export type Item = {
  /** Total before any discounts or taxes are applied. */
  amountSubtotal: Scalars['Int'];
  /** Total after discounts and taxes. */
  amountTotal: Scalars['Int'];
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency: Scalars['String'];
  /** An arbitrary string attached to the object. Often useful for displaying to users. Defaults to product name. */
  description: Scalars['String'];
  /** The discounts applied to the line item. */
  discounts?: Maybe<Array<Maybe<LineItemsDiscountAmount>>>;
  /** Unique identifier for the object. */
  id: Scalars['String'];
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object23;
  /** The price used to generate the line item. */
  price?: Maybe<Price>;
  /** The quantity of products being purchased. */
  quantity?: Maybe<Scalars['Int']>;
  /** The taxes applied to the line item. */
  taxes?: Maybe<Array<Maybe<LineItemsTaxAmount>>>;
};

export type LineItemsDiscountAmount = {
  /** The amount discounted. */
  amount: Scalars['Int'];
  /**
   * A discount represents the actual application of a coupon to a particular
   * customer. It contains information about when the discount began and when it
   * will end.
   *
   * Related guide: [Applying Discounts to Subscriptions](https://stripe.com/docs/billing/subscriptions/discounts).
   */
  discount: Discount;
};

/**
 * A discount represents the actual application of a coupon to a particular
 * customer. It contains information about when the discount began and when it
 * will end.
 *
 * Related guide: [Applying Discounts to Subscriptions](https://stripe.com/docs/billing/subscriptions/discounts).
 */
export type Discount = {
  /** The Checkout session that this coupon is applied to, if it is applied to a particular session in payment mode. Will not be present for subscription mode. */
  checkoutSession?: Maybe<Scalars['String']>;
  /**
   * A coupon contains information about a percent-off or amount-off discount you
   * might want to apply to a customer. Coupons may be applied to [invoices](https://stripe.com/docs/api#invoices) or
   * [orders](https://stripe.com/docs/api#create_order-coupon). Coupons do not work with conventional one-off [charges](https://stripe.com/docs/api#create_charge).
   */
  coupon: Coupon;
  /** The ID of the customer associated with this discount. */
  customer?: Maybe<Scalars['JSON']>;
  /** If the coupon has a duration of `repeating`, the date that this discount will end. If the coupon has a duration of `once` or `forever`, this attribute will be null. */
  end?: Maybe<Scalars['Int']>;
  /** The ID of the discount object. Discounts cannot be fetched by ID. Use `expand[]=discounts` in API calls to expand discount IDs in an array. */
  id: Scalars['String'];
  /** The invoice that the discount's coupon was applied to, if it was applied directly to a particular invoice. */
  invoice?: Maybe<Scalars['String']>;
  /** The invoice item `id` (or invoice line item `id` for invoice line items of type='subscription') that the discount's coupon was applied to, if it was applied directly to a particular invoice item or invoice line item. */
  invoiceItem?: Maybe<Scalars['String']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object22;
  /** The promotion code applied to create this discount. */
  promotionCode?: Maybe<Scalars['JSON']>;
  /** Date that the coupon was applied. */
  start: Scalars['Int'];
  /** The subscription that this coupon is applied to, if it is applied to a particular subscription. */
  subscription?: Maybe<Scalars['String']>;
};

/**
 * A coupon contains information about a percent-off or amount-off discount you
 * might want to apply to a customer. Coupons may be applied to [invoices](https://stripe.com/docs/api#invoices) or
 * [orders](https://stripe.com/docs/api#create_order-coupon). Coupons do not work with conventional one-off [charges](https://stripe.com/docs/api#create_charge).
 */
export type Coupon = {
  /** Amount (in the `currency` specified) that will be taken off the subtotal of any invoices for this customer. */
  amountOff?: Maybe<Scalars['Int']>;
  appliesTo?: Maybe<CouponAppliesTo>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created: Scalars['Int'];
  /** If `amount_off` has been set, the three-letter [ISO code for the currency](https://stripe.com/docs/currencies) of the amount to take off. */
  currency?: Maybe<Scalars['String']>;
  /** One of `forever`, `once`, and `repeating`. Describes how long a customer who applies this coupon will get the discount. */
  duration: Duration;
  /** If `duration` is `repeating`, the number of months the coupon applies. Null if coupon `duration` is `forever` or `once`. */
  durationInMonths?: Maybe<Scalars['Int']>;
  /** Unique identifier for the object. */
  id: Scalars['String'];
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: Scalars['Boolean'];
  /** Maximum number of times this coupon can be redeemed, in total, across all customers, before it is no longer valid. */
  maxRedemptions?: Maybe<Scalars['Int']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Maybe<Scalars['JSON']>;
  /** Name of the coupon displayed to customers on for instance invoices or receipts. */
  name?: Maybe<Scalars['String']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object21;
  /** Percent that will be taken off the subtotal of any invoices for this customer for the duration of the coupon. For example, a coupon with percent_off of 50 will make a %s100 invoice %s50 instead. */
  percentOff?: Maybe<Scalars['Float']>;
  /** Date after which the coupon can no longer be redeemed. */
  redeemBy?: Maybe<Scalars['Int']>;
  /** Number of times this coupon has been applied to a customer. */
  timesRedeemed: Scalars['Int'];
  /** Taking account of the above properties, whether this coupon can still be applied to a customer. */
  valid: Scalars['Boolean'];
};

export type CouponAppliesTo = {
  /** A list of product IDs this coupon applies to */
  products: Array<Maybe<Scalars['String']>>;
};

export enum Duration {
  FOREVER = 'forever',
  ONCE = 'once',
  REPEATING = 'repeating'
}

export enum Object21 {
  COUPON = 'coupon'
}

export enum Object22 {
  DISCOUNT = 'discount'
}

export enum Object23 {
  ITEM = 'item'
}

/** The price used to generate the line item. */
export type Price = {
  /** Whether the price can be used for new purchases. */
  active?: Maybe<Scalars['Boolean']>;
  /** Describes how to compute the price per period. Either `per_unit` or `tiered`. `per_unit` indicates that the fixed amount (specified in `unit_amount` or `unit_amount_decimal`) will be charged per unit in `quantity` (for prices with `usage_type=licensed`), or per unit of total usage (for prices with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as defined using the `tiers` and `tiers_mode` attributes. */
  billingScheme?: Maybe<BillingScheme>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: Maybe<Scalars['Int']>;
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency?: Maybe<Scalars['String']>;
  /** Unique identifier for the object. */
  id?: Maybe<Scalars['String']>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: Maybe<Scalars['Boolean']>;
  /** A lookup key used to retrieve prices dynamically from a static string. */
  lookupKey?: Maybe<Scalars['String']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Maybe<Scalars['JSON']>;
  /** A brief description of the price, hidden from customers. */
  nickname?: Maybe<Scalars['String']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: Maybe<Object24>;
  /** The ID of the product this price is associated with. */
  product?: Maybe<Scalars['JSON']>;
  /** The recurring components of a price such as `interval` and `usage_type`. */
  recurring?: Maybe<Recurring>;
  /** Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`. Once specified as either `inclusive` or `exclusive`, it cannot be changed. */
  taxBehavior?: Maybe<TaxBehavior>;
  /** Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`. */
  tiers?: Maybe<Array<Maybe<PriceTier>>>;
  /** Defines if the tiering price should be `graduated` or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per unit price. In `graduated` tiering, pricing can change as the quantity grows. */
  tiersMode?: Maybe<TiersMode>;
  /** Apply a transformation to the reported usage or set quantity before computing the amount billed. Cannot be combined with `tiers`. */
  transformQuantity?: Maybe<TransformQuantity>;
  /** One of `one_time` or `recurring` depending on whether the price is for a one-time purchase or a recurring (subscription) purchase. */
  type?: Maybe<Type12>;
  /** The unit amount in %s to be charged, represented as a whole integer if possible. Only set if `billing_scheme=per_unit`. */
  unitAmount?: Maybe<Scalars['Int']>;
  /** The unit amount in %s to be charged, represented as a decimal string with at most 12 decimal places. Only set if `billing_scheme=per_unit`. */
  unitAmountDecimal?: Maybe<Scalars['String']>;
};

export enum BillingScheme {
  PER_UNIT = 'per_unit',
  TIERED = 'tiered'
}

export enum Object24 {
  PRICE = 'price'
}

/** The recurring components of a price such as `interval` and `usage_type`. */
export type Recurring = {
  /** Specifies a usage aggregation strategy for prices of `usage_type=metered`. Allowed values are `sum` for summing up all usage during a period, `last_during_period` for using the last usage record reported within a period, `last_ever` for using the last usage record ever (across period bounds) or `max` which uses the usage record with the maximum reported usage during a period. Defaults to `sum`. */
  aggregateUsage?: Maybe<AggregateUsage>;
  /** The frequency at which a subscription is billed. One of `day`, `week`, `month` or `year`. */
  interval?: Maybe<Interval4>;
  /** The number of intervals (specified in the `interval` attribute) between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months. */
  intervalCount?: Maybe<Scalars['Int']>;
  /** Configures how the quantity per period should be determined. Can be either `metered` or `licensed`. `licensed` automatically bills the `quantity` set when adding it to a subscription. `metered` aggregates the total usage based on usage records. Defaults to `licensed`. */
  usageType?: Maybe<UsageType>;
};

export enum AggregateUsage {
  LAST_DURING_PERIOD = 'last_during_period',
  LAST_EVER = 'last_ever',
  MAX = 'max',
  SUM = 'sum'
}

export enum Interval4 {
  DAY = 'day',
  MONTH = 'month',
  WEEK = 'week',
  YEAR = 'year'
}

export enum UsageType {
  LICENSED = 'licensed',
  METERED = 'metered'
}

export enum TaxBehavior {
  EXCLUSIVE = 'exclusive',
  INCLUSIVE = 'inclusive',
  UNSPECIFIED = 'unspecified'
}

export type PriceTier = {
  /** Price for the entire tier. */
  flatAmount?: Maybe<Scalars['Int']>;
  /** Same as `flat_amount`, but contains a decimal value with at most 12 decimal places. */
  flatAmountDecimal?: Maybe<Scalars['String']>;
  /** Per unit price for units relevant to the tier. */
  unitAmount?: Maybe<Scalars['Int']>;
  /** Same as `unit_amount`, but contains a decimal value with at most 12 decimal places. */
  unitAmountDecimal?: Maybe<Scalars['String']>;
  /** Up to and including to this quantity will be contained in the tier. */
  upTo?: Maybe<Scalars['Int']>;
};

export enum TiersMode {
  GRADUATED = 'graduated',
  VOLUME = 'volume'
}

/** Apply a transformation to the reported usage or set quantity before computing the amount billed. Cannot be combined with `tiers`. */
export type TransformQuantity = {
  /** Divide usage by this number. */
  divideBy?: Maybe<Scalars['Int']>;
  /** After division, either round the result `up` or `down`. */
  round?: Maybe<Round>;
};

export enum Round {
  DOWN = 'down',
  UP = 'up'
}

export enum Type12 {
  ONE_TIME = 'one_time',
  RECURRING = 'recurring'
}

export type LineItemsTaxAmount = {
  /** Amount of tax applied for this rate. */
  amount: Scalars['Int'];
  /**
   * Tax rates can be applied to [invoices](https://stripe.com/docs/billing/invoices/tax-rates), [subscriptions](https://stripe.com/docs/billing/subscriptions/taxes) and [Checkout Sessions](https://stripe.com/docs/payments/checkout/set-up-a-subscription#tax-rates) to collect tax.
   *
   * Related guide: [Tax Rates](https://stripe.com/docs/billing/taxes/tax-rates).
   */
  rate: TaxRate;
};

/**
 * Tax rates can be applied to [invoices](https://stripe.com/docs/billing/invoices/tax-rates), [subscriptions](https://stripe.com/docs/billing/subscriptions/taxes) and [Checkout Sessions](https://stripe.com/docs/payments/checkout/set-up-a-subscription#tax-rates) to collect tax.
 *
 * Related guide: [Tax Rates](https://stripe.com/docs/billing/taxes/tax-rates).
 */
export type TaxRate = {
  /** Defaults to `true`. When set to `false`, this tax rate cannot be used with new applications or Checkout Sessions, but will still work for subscriptions and invoices that already have it set. */
  active: Scalars['Boolean'];
  /** Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)). */
  country?: Maybe<Scalars['String']>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created: Scalars['Int'];
  /** An arbitrary string attached to the tax rate for your internal use only. It will not be visible to your customers. */
  description?: Maybe<Scalars['String']>;
  /** The display name of the tax rates as it will appear to your customer on their receipt email, PDF, and the hosted invoice page. */
  displayName: Scalars['String'];
  /** Unique identifier for the object. */
  id: Scalars['String'];
  /** This specifies if the tax rate is inclusive or exclusive. */
  inclusive: Scalars['Boolean'];
  /** The jurisdiction for the tax rate. You can use this label field for tax reporting purposes. It also appears on your customer’s invoice. */
  jurisdiction?: Maybe<Scalars['String']>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: Scalars['Boolean'];
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Maybe<Scalars['JSON']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object25;
  /** This represents the tax rate percent out of 100. */
  percentage: Scalars['Float'];
  /** [ISO 3166-2 subdivision code](https://en.wikipedia.org/wiki/ISO_3166-2:US), without country prefix. For example, "NY" for New York, United States. */
  state?: Maybe<Scalars['String']>;
  /** The high-level tax type, such as `vat` or `sales_tax`. */
  taxType?: Maybe<TaxType>;
};

export enum Object25 {
  TAX_RATE = 'tax_rate'
}

export enum TaxType {
  GST = 'gst',
  HST = 'hst',
  PST = 'pst',
  QST = 'qst',
  SALES_TAX = 'sales_tax',
  VAT = 'vat'
}

export enum Locale {
  AUTO = 'auto',
  BG = 'bg',
  CS = 'cs',
  DA = 'da',
  DE = 'de',
  EL = 'el',
  EN = 'en',
  EN_GB = 'en-GB',
  ES = 'es',
  ES_419 = 'es-419',
  ET = 'et',
  FI = 'fi',
  FR = 'fr',
  FR_CA = 'fr-CA',
  HR = 'hr',
  HU = 'hu',
  ID = 'id',
  IT = 'it',
  JA = 'ja',
  KO = 'ko',
  LT = 'lt',
  LV = 'lv',
  MS = 'ms',
  MT = 'mt',
  NB = 'nb',
  NL = 'nl',
  PL = 'pl',
  PT = 'pt',
  PT_BR = 'pt-BR',
  RO = 'ro',
  RU = 'ru',
  SK = 'sk',
  SL = 'sl',
  SV = 'sv',
  TH = 'th',
  TR = 'tr',
  VI = 'vi',
  ZH = 'zh',
  ZH_HK = 'zh-HK',
  ZH_TW = 'zh-TW'
}

export enum Mode3 {
  PAYMENT = 'payment',
  SETUP = 'setup',
  SUBSCRIPTION = 'subscription'
}

export enum Object26 {
  CHECKOUT_SESSION = 'checkout.session'
}

/** Payment-method-specific configuration for the PaymentIntent or SetupIntent of this CheckoutSession. */
export type PaymentMethodOptions = {
  acssDebit?: Maybe<AcssDebit2>;
  boleto?: Maybe<Boleto2>;
  oxxo?: Maybe<Oxxo2>;
};

export type AcssDebit2 = {
  /** Currency supported by the bank account. Returned when the Session is in `setup` mode. */
  currency?: Maybe<Currency21>;
  mandateOptions?: Maybe<CheckoutAcssDebitMandateOptions>;
  /** Bank account verification method. */
  verificationMethod?: Maybe<VerificationMethod>;
};

export enum Currency21 {
  CAD = 'cad',
  USD = 'usd'
}

export type CheckoutAcssDebitMandateOptions = {
  /** A URL for custom mandate text */
  customMandateUrl?: Maybe<Scalars['String']>;
  /** Description of the interval. Only required if the 'payment_schedule' parameter is 'interval' or 'combined'. */
  intervalDescription?: Maybe<Scalars['String']>;
  /** Payment schedule for the mandate. */
  paymentSchedule?: Maybe<PaymentSchedule>;
  /** Transaction type of the mandate. */
  transactionType?: Maybe<TransactionType>;
};

export enum PaymentSchedule {
  COMBINED = 'combined',
  INTERVAL = 'interval',
  SPORADIC = 'sporadic'
}

export enum TransactionType {
  BUSINESS = 'business',
  PERSONAL = 'personal'
}

export enum VerificationMethod {
  AUTOMATIC = 'automatic',
  INSTANT = 'instant',
  MICRODEPOSITS = 'microdeposits'
}

export type Boleto2 = {
  /** The number of calendar days before a Boleto voucher expires. For example, if you create a Boleto voucher on Monday and you set expires_after_days to 2, the Boleto voucher will expire on Wednesday at 23:59 America/Sao_Paulo time. */
  expiresAfterDays: Scalars['Int'];
};

export type Oxxo2 = {
  /** The number of calendar days before an OXXO invoice expires. For example, if you create an OXXO invoice on Monday and you set expires_after_days to 2, the OXXO invoice will expire on Wednesday at 23:59 America/Mexico_City time. */
  expiresAfterDays: Scalars['Int'];
};

export enum PaymentStatus {
  NO_PAYMENT_REQUIRED = 'no_payment_required',
  PAID = 'paid',
  UNPAID = 'unpaid'
}

/** Shipping information for this Checkout Session. */
export type Shipping2 = {
  address?: Maybe<Address>;
  /** The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc. */
  carrier?: Maybe<Scalars['String']>;
  /** Recipient name. */
  name?: Maybe<Scalars['String']>;
  /** Recipient phone (including extension). */
  phone?: Maybe<Scalars['String']>;
  /** The tracking number for a physical product, obtained from the delivery service. If multiple tracking numbers were generated for this purchase, please separate them with commas. */
  trackingNumber?: Maybe<Scalars['String']>;
};

/** When set, provides configuration for Checkout to collect a shipping address from a customer. */
export type ShippingAddressCollection = {
  /**
   * An array of two-letter ISO country codes representing which countries Checkout should provide as options for
   * shipping locations. Unsupported country codes: `AS, CX, CC, CU, HM, IR, KP, MH, FM, NF, MP, PW, SD, SY, UM, VI`.
   */
  allowedCountries?: Maybe<Array<Maybe<AllowedCountriesListItem>>>;
};

export enum AllowedCountriesListItem {
  AC = 'AC',
  AD = 'AD',
  AE = 'AE',
  AF = 'AF',
  AG = 'AG',
  AI = 'AI',
  AL = 'AL',
  AM = 'AM',
  AO = 'AO',
  AQ = 'AQ',
  AR = 'AR',
  AT = 'AT',
  AU = 'AU',
  AW = 'AW',
  AX = 'AX',
  AZ = 'AZ',
  BA = 'BA',
  BB = 'BB',
  BD = 'BD',
  BE = 'BE',
  BF = 'BF',
  BG = 'BG',
  BH = 'BH',
  BI = 'BI',
  BJ = 'BJ',
  BL = 'BL',
  BM = 'BM',
  BN = 'BN',
  BO = 'BO',
  BQ = 'BQ',
  BR = 'BR',
  BS = 'BS',
  BT = 'BT',
  BV = 'BV',
  BW = 'BW',
  BY = 'BY',
  BZ = 'BZ',
  CA = 'CA',
  CD = 'CD',
  CF = 'CF',
  CG = 'CG',
  CH = 'CH',
  CI = 'CI',
  CK = 'CK',
  CL = 'CL',
  CM = 'CM',
  CN = 'CN',
  CO = 'CO',
  CR = 'CR',
  CV = 'CV',
  CW = 'CW',
  CY = 'CY',
  CZ = 'CZ',
  DE = 'DE',
  DJ = 'DJ',
  DK = 'DK',
  DM = 'DM',
  DO = 'DO',
  DZ = 'DZ',
  EC = 'EC',
  EE = 'EE',
  EG = 'EG',
  EH = 'EH',
  ER = 'ER',
  ES = 'ES',
  ET = 'ET',
  FI = 'FI',
  FJ = 'FJ',
  FK = 'FK',
  FO = 'FO',
  FR = 'FR',
  GA = 'GA',
  GB = 'GB',
  GD = 'GD',
  GE = 'GE',
  GF = 'GF',
  GG = 'GG',
  GH = 'GH',
  GI = 'GI',
  GL = 'GL',
  GM = 'GM',
  GN = 'GN',
  GP = 'GP',
  GQ = 'GQ',
  GR = 'GR',
  GS = 'GS',
  GT = 'GT',
  GU = 'GU',
  GW = 'GW',
  GY = 'GY',
  HK = 'HK',
  HN = 'HN',
  HR = 'HR',
  HT = 'HT',
  HU = 'HU',
  ID = 'ID',
  IE = 'IE',
  IL = 'IL',
  IM = 'IM',
  IN = 'IN',
  IO = 'IO',
  IQ = 'IQ',
  IS = 'IS',
  IT = 'IT',
  JE = 'JE',
  JM = 'JM',
  JO = 'JO',
  JP = 'JP',
  KE = 'KE',
  KG = 'KG',
  KH = 'KH',
  KI = 'KI',
  KM = 'KM',
  KN = 'KN',
  KR = 'KR',
  KW = 'KW',
  KY = 'KY',
  KZ = 'KZ',
  LA = 'LA',
  LB = 'LB',
  LC = 'LC',
  LI = 'LI',
  LK = 'LK',
  LR = 'LR',
  LS = 'LS',
  LT = 'LT',
  LU = 'LU',
  LV = 'LV',
  LY = 'LY',
  MA = 'MA',
  MC = 'MC',
  MD = 'MD',
  ME = 'ME',
  MF = 'MF',
  MG = 'MG',
  MK = 'MK',
  ML = 'ML',
  MM = 'MM',
  MN = 'MN',
  MO = 'MO',
  MQ = 'MQ',
  MR = 'MR',
  MS = 'MS',
  MT = 'MT',
  MU = 'MU',
  MV = 'MV',
  MW = 'MW',
  MX = 'MX',
  MY = 'MY',
  MZ = 'MZ',
  NA = 'NA',
  NC = 'NC',
  NE = 'NE',
  NG = 'NG',
  NI = 'NI',
  NL = 'NL',
  NO = 'NO',
  NP = 'NP',
  NR = 'NR',
  NU = 'NU',
  NZ = 'NZ',
  OM = 'OM',
  PA = 'PA',
  PE = 'PE',
  PF = 'PF',
  PG = 'PG',
  PH = 'PH',
  PK = 'PK',
  PL = 'PL',
  PM = 'PM',
  PN = 'PN',
  PR = 'PR',
  PS = 'PS',
  PT = 'PT',
  PY = 'PY',
  QA = 'QA',
  RE = 'RE',
  RO = 'RO',
  RS = 'RS',
  RU = 'RU',
  RW = 'RW',
  SA = 'SA',
  SB = 'SB',
  SC = 'SC',
  SE = 'SE',
  SG = 'SG',
  SH = 'SH',
  SI = 'SI',
  SJ = 'SJ',
  SK = 'SK',
  SL = 'SL',
  SM = 'SM',
  SN = 'SN',
  SO = 'SO',
  SR = 'SR',
  SS = 'SS',
  ST = 'ST',
  SV = 'SV',
  SX = 'SX',
  SZ = 'SZ',
  TA = 'TA',
  TC = 'TC',
  TD = 'TD',
  TF = 'TF',
  TG = 'TG',
  TH = 'TH',
  TJ = 'TJ',
  TK = 'TK',
  TL = 'TL',
  TM = 'TM',
  TN = 'TN',
  TO = 'TO',
  TR = 'TR',
  TT = 'TT',
  TV = 'TV',
  TW = 'TW',
  TZ = 'TZ',
  UA = 'UA',
  UG = 'UG',
  US = 'US',
  UY = 'UY',
  UZ = 'UZ',
  VA = 'VA',
  VC = 'VC',
  VE = 'VE',
  VG = 'VG',
  VN = 'VN',
  VU = 'VU',
  WF = 'WF',
  WS = 'WS',
  XK = 'XK',
  YE = 'YE',
  YT = 'YT',
  ZA = 'ZA',
  ZM = 'ZM',
  ZW = 'ZW',
  ZZ = 'ZZ'
}

export enum SubmitType {
  AUTO = 'auto',
  BOOK = 'book',
  DONATE = 'donate',
  PAY = 'pay'
}

export type PaymentPagesCheckoutSessionTaxIdCollection = {
  /** Indicates whether tax ID collection is enabled for the session */
  enabled: Scalars['Boolean'];
};

/** Tax and discount details for the computed total amount. */
export type TotalDetails = {
  /** This is the sum of all the line item discounts. */
  amountDiscount?: Maybe<Scalars['Int']>;
  /** This is the sum of all the line item shipping amounts. */
  amountShipping?: Maybe<Scalars['Int']>;
  /** This is the sum of all the line item tax amounts. */
  amountTax?: Maybe<Scalars['Int']>;
  breakdown?: Maybe<Breakdown>;
};

export type Breakdown = {
  /** The aggregated line item discounts. */
  discounts: Array<Maybe<LineItemsDiscountAmount>>;
  /** The aggregated line item tax amounts by rate. */
  taxes: Array<Maybe<LineItemsTaxAmount>>;
};

export type PaymentPagesCheckoutSessionListLineItems = {
  /** Details about each object. */
  data: Array<Maybe<Item>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

export type V1CountrySpecs2 = {
  data: Array<Maybe<CountrySpec>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

/**
 * Stripe needs to collect certain pieces of information about each account
 * created. These requirements can differ depending on the account's country. The
 * Country Specs API makes these rules available to your integration.
 *
 * You can also view the information from this API call as [an online
 * guide](/docs/connect/required-verification-information).
 */
export type CountrySpec = {
  /** The default currency for this country. This applies to both payment methods and bank accounts. */
  defaultCurrency: Scalars['String'];
  /** Unique identifier for the object. Represented as the ISO country code for this country. */
  id: Scalars['String'];
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object27;
  /** Currencies that can be accepted in the specific country (for transfers). */
  supportedBankAccountCurrencies: Scalars['JSON'];
  /** Currencies that can be accepted in the specified country (for payments). */
  supportedPaymentCurrencies: Array<Maybe<Scalars['String']>>;
  /** Payment methods available in the specified country. You may need to enable some payment methods (e.g., [ACH](https://stripe.com/docs/ach)) on your account before they appear in this list. The `stripe` payment method refers to [charging through your platform](https://stripe.com/docs/connect/destination-charges). */
  supportedPaymentMethods: Array<Maybe<Scalars['String']>>;
  /** Countries that can accept transfers from the specified country. */
  supportedTransferCountries: Array<Maybe<Scalars['String']>>;
  verificationFields: CountrySpecVerificationFields;
};

export enum Object27 {
  COUNTRY_SPEC = 'country_spec'
}

export type CountrySpecVerificationFields = {
  company: CountrySpecVerificationFieldDetails;
  individual: CountrySpecVerificationFieldDetails;
};

export type CountrySpecVerificationFieldDetails = {
  /** Additional fields which are only required for some users. */
  additional: Array<Maybe<Scalars['String']>>;
  /** Fields which every account must eventually provide. */
  minimum: Array<Maybe<Scalars['String']>>;
};

export type V1Coupons2 = {
  data: Array<Maybe<Coupon>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

export type CreditNotesList = {
  data: Array<Maybe<CreditNote>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

/**
 * Issue a credit note to adjust an invoice's amount after the invoice is finalized.
 *
 * Related guide: [Credit Notes](https://stripe.com/docs/billing/invoices/credit-notes).
 */
export type CreditNote = {
  /** The integer amount in %s representing the total amount of the credit note, including tax. */
  amount: Scalars['Int'];
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created: Scalars['Int'];
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency: Scalars['String'];
  /** ID of the customer. */
  customer: Scalars['JSON'];
  /** Customer balance transaction related to this credit note. */
  customerBalanceTransaction?: Maybe<Scalars['JSON']>;
  /** The integer amount in %s representing the total amount of discount that was credited. */
  discountAmount: Scalars['Int'];
  /** The aggregate amounts calculated per discount for all line items. */
  discountAmounts: Array<Maybe<DiscountsResourceDiscountAmount>>;
  /** Unique identifier for the object. */
  id: Scalars['String'];
  /** ID of the invoice. */
  invoice: Scalars['JSON'];
  /** Line items that make up the credit note */
  lines: Lines;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: Scalars['Boolean'];
  /** Customer-facing text that appears on the credit note PDF. */
  memo?: Maybe<Scalars['String']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Maybe<Scalars['JSON']>;
  /** A unique number that identifies this particular credit note and appears on the PDF of the credit note and its associated invoice. */
  number: Scalars['String'];
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object29;
  /** Amount that was credited outside of Stripe. */
  outOfBandAmount?: Maybe<Scalars['Int']>;
  /** The link to download the PDF of the credit note. */
  pdf: Scalars['String'];
  /** Reason for issuing this credit note, one of `duplicate`, `fraudulent`, `order_change`, or `product_unsatisfactory` */
  reason?: Maybe<Reason7>;
  /** Refund related to this credit note. */
  refund?: Maybe<Scalars['JSON']>;
  /** Status of this credit note, one of `issued` or `void`. Learn more about [voiding credit notes](https://stripe.com/docs/billing/invoices/credit-notes#voiding). */
  status: Status11;
  /** The integer amount in %s representing the amount of the credit note, excluding tax and invoice level discounts. */
  subtotal: Scalars['Int'];
  /** The aggregate amounts calculated per tax rate for all line items. */
  taxAmounts: Array<Maybe<CreditNoteTaxAmount>>;
  /** The integer amount in %s representing the total amount of the credit note, including tax and all discount. */
  total: Scalars['Int'];
  /** Type of this credit note, one of `pre_payment` or `post_payment`. A `pre_payment` credit note means it was issued when the invoice was open. A `post_payment` credit note means it was issued when the invoice was paid. */
  type: Type14;
  /** The time that the credit note was voided. */
  voidedAt?: Maybe<Scalars['Int']>;
};

export type DiscountsResourceDiscountAmount = {
  /** The amount, in %s, of the discount. */
  amount: Scalars['Int'];
  /** The discount that was applied to get this discount amount. */
  discount: Scalars['JSON'];
};

/** Line items that make up the credit note */
export type Lines = {
  /** Details about each object. */
  data: Array<Maybe<CreditNoteLineItem>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

export type CreditNoteLineItem = {
  /** The integer amount in %s representing the gross amount being credited for this line item, excluding (exclusive) tax and discounts. */
  amount: Scalars['Int'];
  /** Description of the item being credited. */
  description?: Maybe<Scalars['String']>;
  /** The integer amount in %s representing the discount being credited for this line item. */
  discountAmount: Scalars['Int'];
  /** The amount of discount calculated per discount for this line item */
  discountAmounts: Array<Maybe<DiscountsResourceDiscountAmount>>;
  /** Unique identifier for the object. */
  id: Scalars['String'];
  /** ID of the invoice line item being credited */
  invoiceLineItem?: Maybe<Scalars['String']>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object28;
  /** The number of units of product being credited. */
  quantity?: Maybe<Scalars['Int']>;
  /** The amount of tax calculated per tax rate for this line item */
  taxAmounts: Array<Maybe<CreditNoteTaxAmount>>;
  /** The tax rates which apply to the line item. */
  taxRates: Array<Maybe<TaxRate>>;
  /** The type of the credit note line item, one of `invoice_line_item` or `custom_line_item`. When the type is `invoice_line_item` there is an additional `invoice_line_item` property on the resource the value of which is the id of the credited line item on the invoice. */
  type: Type13;
  /** The cost of each unit of product being credited. */
  unitAmount?: Maybe<Scalars['Int']>;
  /** Same as `unit_amount`, but contains a decimal value with at most 12 decimal places. */
  unitAmountDecimal?: Maybe<Scalars['String']>;
};

export enum Object28 {
  CREDIT_NOTE_LINE_ITEM = 'credit_note_line_item'
}

export type CreditNoteTaxAmount = {
  /** The amount, in %s, of the tax. */
  amount: Scalars['Int'];
  /** Whether this tax amount is inclusive or exclusive. */
  inclusive: Scalars['Boolean'];
  /** The tax rate that was applied to get this tax amount. */
  taxRate: Scalars['JSON'];
};

export enum Type13 {
  CUSTOM_LINE_ITEM = 'custom_line_item',
  INVOICE_LINE_ITEM = 'invoice_line_item'
}

export enum Object29 {
  CREDIT_NOTE = 'credit_note'
}

export enum Reason7 {
  DUPLICATE = 'duplicate',
  FRAUDULENT = 'fraudulent',
  ORDER_CHANGE = 'order_change',
  PRODUCT_UNSATISFACTORY = 'product_unsatisfactory'
}

export enum Status11 {
  ISSUED = 'issued',
  VOID = 'void'
}

export enum Type14 {
  POST_PAYMENT = 'post_payment',
  PRE_PAYMENT = 'pre_payment'
}

export type CreditNoteLinesList = {
  /** Details about each object. */
  data: Array<Maybe<CreditNoteLineItem>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

export type Lines3ListItemInput = {
  amount?: Maybe<Scalars['Int']>;
  description?: Maybe<Scalars['String']>;
  invoiceLineItem?: Maybe<Scalars['String']>;
  quantity?: Maybe<Scalars['Int']>;
  taxRates?: Maybe<Scalars['JSON']>;
  type: Type15;
  unitAmount?: Maybe<Scalars['Int']>;
  unitAmountDecimal?: Maybe<Scalars['String']>;
};

export enum Type15 {
  CUSTOM_LINE_ITEM = 'custom_line_item',
  INVOICE_LINE_ITEM = 'invoice_line_item'
}

export enum Reason18 {
  DUPLICATE = 'duplicate',
  FRAUDULENT = 'fraudulent',
  ORDER_CHANGE = 'order_change',
  PRODUCT_UNSATISFACTORY = 'product_unsatisfactory'
}

export type V1Customers2 = {
  data: Array<Maybe<Customer13>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

/**
 * `Customer` objects allow you to perform recurring charges, and to track
 * multiple charges, that are associated with the same customer. The API allows
 * you to create, delete, and update your customers. You can retrieve individual
 * customers as well as a list of all your customers.
 *
 * Related guide: [Save a card during payment](https://stripe.com/docs/payments/save-during-payment).
 */
export type Customer13 = {
  /** The customer's address. */
  address?: Maybe<Address7>;
  /** Current balance, if any, being stored on the customer. If negative, the customer has credit to apply to their next invoice. If positive, the customer has an amount owed that will be added to their next invoice. The balance does not refer to any unpaid invoices; it solely takes into account amounts that have yet to be successfully applied to any invoice. This balance is only taken into account as invoices are finalized. */
  balance?: Maybe<Scalars['Int']>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created: Scalars['Int'];
  /** Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) the customer can be charged in for recurring billing purposes. */
  currency?: Maybe<Scalars['String']>;
  /**
   * ID of the default payment source for the customer.
   *
   * If you are using payment methods created via the PaymentMethods API, see the [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) field instead.
   */
  defaultSource?: Maybe<Scalars['JSON']>;
  /**
   * When the customer's latest invoice is billed by charging automatically, `delinquent` is `true` if the invoice's latest charge failed. When the customer's latest invoice is billed by sending an invoice, `delinquent` is `true` if the invoice isn't paid by its due date.
   *
   * If an invoice is marked uncollectible by [dunning](https://stripe.com/docs/billing/automatic-collection), `delinquent` doesn't get reset to `false`.
   */
  delinquent?: Maybe<Scalars['Boolean']>;
  /** An arbitrary string attached to the object. Often useful for displaying to users. */
  description?: Maybe<Scalars['String']>;
  /** Describes the current discount active on the customer, if there is one. */
  discount?: Maybe<Discount3>;
  /** The customer's email address. */
  email?: Maybe<Scalars['String']>;
  /** Unique identifier for the object. */
  id: Scalars['String'];
  /** The prefix for the customer used to generate unique invoice numbers. */
  invoicePrefix?: Maybe<Scalars['String']>;
  invoiceSettings?: Maybe<InvoiceSettingCustomerSetting>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: Scalars['Boolean'];
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Maybe<Scalars['JSON']>;
  /** The customer's full name or business name. */
  name?: Maybe<Scalars['String']>;
  /** The suffix of the customer's next invoice number, e.g., 0001. */
  nextInvoiceSequence?: Maybe<Scalars['Int']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object30;
  /** The customer's phone number. */
  phone?: Maybe<Scalars['String']>;
  /** The customer's preferred locales (languages), ordered by preference. */
  preferredLocales?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Mailing and shipping address for the customer. Appears on invoices emailed to this customer. */
  shipping?: Maybe<Shipping5>;
  /** The customer's payment sources, if any. */
  sources?: Maybe<Sources>;
  /** The customer's current subscriptions, if any. */
  subscriptions?: Maybe<Subscriptions>;
  tax?: Maybe<CustomerTax>;
  /** Describes the customer's tax exemption status. One of `none`, `exempt`, or `reverse`. When set to `reverse`, invoice and receipt PDFs include the text **"Reverse charge"**. */
  taxExempt?: Maybe<TaxExempt2>;
  /** The customer's tax IDs. */
  taxIds?: Maybe<TaxIDsList>;
};

/** The customer's address. */
export type Address7 = {
  /** City, district, suburb, town, or village. */
  city?: Maybe<Scalars['String']>;
  /** Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)). */
  country?: Maybe<Scalars['String']>;
  /** Address line 1 (e.g., street, PO Box, or company name). */
  line1?: Maybe<Scalars['String']>;
  /** Address line 2 (e.g., apartment, suite, unit, or building). */
  line2?: Maybe<Scalars['String']>;
  /** ZIP or postal code. */
  postalCode?: Maybe<Scalars['String']>;
  /** State, county, province, or region. */
  state?: Maybe<Scalars['String']>;
};

/** Describes the current discount active on the customer, if there is one. */
export type Discount3 = {
  /** The Checkout session that this coupon is applied to, if it is applied to a particular session in payment mode. Will not be present for subscription mode. */
  checkoutSession?: Maybe<Scalars['String']>;
  /**
   * A coupon contains information about a percent-off or amount-off discount you
   * might want to apply to a customer. Coupons may be applied to [invoices](https://stripe.com/docs/api#invoices) or
   * [orders](https://stripe.com/docs/api#create_order-coupon). Coupons do not work with conventional one-off [charges](https://stripe.com/docs/api#create_charge).
   */
  coupon?: Maybe<Coupon>;
  /** The ID of the customer associated with this discount. */
  customer?: Maybe<Scalars['JSON']>;
  /** If the coupon has a duration of `repeating`, the date that this discount will end. If the coupon has a duration of `once` or `forever`, this attribute will be null. */
  end?: Maybe<Scalars['Int']>;
  /** The ID of the discount object. Discounts cannot be fetched by ID. Use `expand[]=discounts` in API calls to expand discount IDs in an array. */
  id?: Maybe<Scalars['String']>;
  /** The invoice that the discount's coupon was applied to, if it was applied directly to a particular invoice. */
  invoice?: Maybe<Scalars['String']>;
  /** The invoice item `id` (or invoice line item `id` for invoice line items of type='subscription') that the discount's coupon was applied to, if it was applied directly to a particular invoice item or invoice line item. */
  invoiceItem?: Maybe<Scalars['String']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: Maybe<Object22>;
  /** The promotion code applied to create this discount. */
  promotionCode?: Maybe<Scalars['JSON']>;
  /** Date that the coupon was applied. */
  start?: Maybe<Scalars['Int']>;
  /** The subscription that this coupon is applied to, if it is applied to a particular subscription. */
  subscription?: Maybe<Scalars['String']>;
};

export type InvoiceSettingCustomerSetting = {
  /** Default custom fields to be displayed on invoices for this customer. */
  customFields?: Maybe<Array<Maybe<InvoiceSettingCustomField>>>;
  /** ID of a payment method that's attached to the customer, to be used as the customer's default payment method for subscriptions and invoices. */
  defaultPaymentMethod?: Maybe<Scalars['JSON']>;
  /** Default footer to be displayed on invoices for this customer. */
  footer?: Maybe<Scalars['String']>;
};

export type InvoiceSettingCustomField = {
  /** The name of the custom field. */
  name: Scalars['String'];
  /** The value of the custom field. */
  value: Scalars['String'];
};

export enum Object30 {
  CUSTOMER = 'customer'
}

/** Mailing and shipping address for the customer. Appears on invoices emailed to this customer. */
export type Shipping5 = {
  address?: Maybe<Address>;
  /** The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc. */
  carrier?: Maybe<Scalars['String']>;
  /** Recipient name. */
  name?: Maybe<Scalars['String']>;
  /** Recipient phone (including extension). */
  phone?: Maybe<Scalars['String']>;
  /** The tracking number for a physical product, obtained from the delivery service. If multiple tracking numbers were generated for this purchase, please separate them with commas. */
  trackingNumber?: Maybe<Scalars['String']>;
};

/** The customer's payment sources, if any. */
export type Sources = {
  /** Details about each object. */
  data: Array<Maybe<Data21ListItem>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

export type Data21ListItem = {
  account?: Maybe<Scalars['JSON']>;
  /** The name of the person or business that owns the bank account. */
  accountHolderName?: Maybe<Scalars['String']>;
  /** The type of entity that holds the account. This can be either `individual` or `company`. */
  accountHolderType?: Maybe<Scalars['String']>;
  /** The bank account type. This can only be `checking` or `savings` in most countries. In Japan, this can only be `futsu` or `toza`. */
  accountType?: Maybe<Scalars['String']>;
  achCreditTransfer?: Maybe<AchCreditTransfer2>;
  achDebit?: Maybe<AchDebit2>;
  acssDebit?: Maybe<AcssDebit4>;
  /** True when this bitcoin receiver has received a non-zero amount of bitcoin. */
  active?: Maybe<Scalars['Boolean']>;
  /** City/District/Suburb/Town/Village. */
  addressCity?: Maybe<Scalars['String']>;
  /** Billing address country, if provided when creating card. */
  addressCountry?: Maybe<Scalars['String']>;
  /** Address line 1 (Street address/PO Box/Company name). */
  addressLine1?: Maybe<Scalars['String']>;
  /** If `address_line1` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. */
  addressLine1Check?: Maybe<Scalars['String']>;
  /** Address line 2 (Apartment/Suite/Unit/Building). */
  addressLine2?: Maybe<Scalars['String']>;
  /** State/County/Province/Region. */
  addressState?: Maybe<Scalars['String']>;
  /** ZIP or postal code. */
  addressZip?: Maybe<Scalars['String']>;
  /** If `address_zip` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. */
  addressZipCheck?: Maybe<Scalars['String']>;
  alipay?: Maybe<Alipay2>;
  amount?: Maybe<Scalars['JSON']>;
  /** The amount of `currency` to which `bitcoin_amount_received` has been converted. */
  amountReceived?: Maybe<Scalars['Int']>;
  auBecsDebit?: Maybe<AuBecsDebit2>;
  availablePayoutMethods?: Maybe<Scalars['JSON']>;
  bancontact?: Maybe<Bancontact2>;
  /** Name of the bank associated with the routing number (e.g., `WELLS FARGO`). */
  bankName?: Maybe<Scalars['String']>;
  /** The amount of bitcoin that the customer should send to fill the receiver. The `bitcoin_amount` is denominated in Satoshi: there are 10^8 Satoshi in one bitcoin. */
  bitcoinAmount?: Maybe<Scalars['Int']>;
  /** The amount of bitcoin that has been sent by the customer to this receiver. */
  bitcoinAmountReceived?: Maybe<Scalars['Int']>;
  /** This URI can be displayed to the customer as a clickable link (to activate their bitcoin client) or as a QR code (for mobile wallets). */
  bitcoinUri?: Maybe<Scalars['String']>;
  /** Card brand. Can be `American Express`, `Diners Club`, `Discover`, `JCB`, `MasterCard`, `UnionPay`, `Visa`, or `Unknown`. */
  brand?: Maybe<Scalars['String']>;
  card?: Maybe<Card6>;
  cardPresent?: Maybe<CardPresent2>;
  /** The client secret of the source. Used for client-side retrieval using a publishable key. */
  clientSecret?: Maybe<Scalars['String']>;
  codeVerification?: Maybe<CodeVerification>;
  country?: Maybe<Scalars['JSON']>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: Maybe<Scalars['Int']>;
  currency?: Maybe<Scalars['JSON']>;
  customer?: Maybe<Scalars['JSON']>;
  /** If a CVC was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. A result of unchecked indicates that CVC was provided but hasn't been checked yet. Checks are typically performed when attaching a card to a Customer object, or when creating a charge. For more details, see [Check if a card is valid without a charge](https://support.stripe.com/questions/check-if-a-card-is-valid-without-a-charge). */
  cvcCheck?: Maybe<Scalars['String']>;
  defaultForCurrency?: Maybe<Scalars['JSON']>;
  /** An arbitrary string attached to the object. Often useful for displaying to users. */
  description?: Maybe<Scalars['String']>;
  /** (For tokenized numbers only.) The last four digits of the device account number. */
  dynamicLast4?: Maybe<Scalars['String']>;
  /** The customer's email address, set by the API call that creates the receiver. */
  email?: Maybe<Scalars['String']>;
  eps?: Maybe<Eps2>;
  /** Two-digit number representing the card's expiration month. */
  expMonth?: Maybe<Scalars['Int']>;
  /** Four-digit number representing the card's expiration year. */
  expYear?: Maybe<Scalars['Int']>;
  /** This flag is initially false and updates to true when the customer sends the `bitcoin_amount` to this receiver. */
  filled?: Maybe<Scalars['Boolean']>;
  fingerprint?: Maybe<Scalars['JSON']>;
  /** The authentication `flow` of the source. `flow` is one of `redirect`, `receiver`, `code_verification`, `none`. */
  flow?: Maybe<Scalars['String']>;
  /** Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`. */
  funding?: Maybe<Scalars['String']>;
  giropay?: Maybe<Giropay2>;
  /** Unique identifier for the object. */
  id?: Maybe<Scalars['String']>;
  ideal?: Maybe<Ideal2>;
  /** A bitcoin address that is specific to this receiver. The customer can send bitcoin to this address to fill the receiver. */
  inboundAddress?: Maybe<Scalars['String']>;
  klarna?: Maybe<Klarna2>;
  last4?: Maybe<Scalars['JSON']>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: Maybe<Scalars['Boolean']>;
  metadata?: Maybe<Scalars['JSON']>;
  multibanco?: Maybe<Multibanco2>;
  /** Cardholder name. */
  name?: Maybe<Scalars['String']>;
  object?: Maybe<Scalars['JSON']>;
  /** Information about the owner of the payment instrument that may be used or required by particular source types. */
  owner?: Maybe<Owner3>;
  p24?: Maybe<P242>;
  /** The ID of the payment created from the receiver, if any. Hidden when viewing the receiver with a publishable key. */
  payment?: Maybe<Scalars['String']>;
  /** If the Alipay account object is not reusable, the exact amount that you can create a charge for. */
  paymentAmount?: Maybe<Scalars['Int']>;
  /** If the Alipay account object is not reusable, the exact currency that you can create a charge for. */
  paymentCurrency?: Maybe<Scalars['String']>;
  receiver?: Maybe<Receiver2>;
  /** The recipient that this card belongs to. This attribute will not be in the card object if the card belongs to a customer or account instead. */
  recipient?: Maybe<Scalars['JSON']>;
  redirect?: Maybe<Redirect>;
  /** The refund address of this bitcoin receiver. */
  refundAddress?: Maybe<Scalars['String']>;
  /** True if you can create multiple payments using this account. If the account is reusable, then you can freely choose the amount of each payment. */
  reusable?: Maybe<Scalars['Boolean']>;
  /** The routing transit number for the bank account. */
  routingNumber?: Maybe<Scalars['String']>;
  sepaDebit?: Maybe<SepaDebit2>;
  sofort?: Maybe<Sofort2>;
  sourceOrder?: Maybe<SourceOrder>;
  /** Extra information about a source. This will appear on your customer's statement every time you charge the source. */
  statementDescriptor?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['JSON']>;
  threeDSecure?: Maybe<ThreeDSecure4>;
  /** If the card number is tokenized, this is the method that was used. Can be `android_pay` (includes Google Pay), `apple_pay`, `masterpass`, `visa_checkout`, or null. */
  tokenizationMethod?: Maybe<Scalars['String']>;
  /** A list with one entry for each time that the customer sent bitcoin to the receiver. Hidden when viewing the receiver with a publishable key. */
  transactions?: Maybe<Transactions>;
  /** The `type` of the source. The `type` is a payment method, one of `ach_credit_transfer`, `ach_debit`, `alipay`, `bancontact`, `card`, `card_present`, `eps`, `giropay`, `ideal`, `multibanco`, `klarna`, `p24`, `sepa_debit`, `sofort`, `three_d_secure`, or `wechat`. An additional hash is included on the source with a name matching this value. It contains additional information specific to the [payment method](https://stripe.com/docs/sources) used. */
  type?: Maybe<Type18>;
  /** This receiver contains uncaptured funds that can be used for a payment or refunded. */
  uncapturedFunds?: Maybe<Scalars['Boolean']>;
  /** Either `reusable` or `single_use`. Whether this source should be reusable or not. Some source types may or may not be reusable by construction, while others may leave the option at creation. If an incompatible value is passed, an error will be returned. */
  usage?: Maybe<Scalars['String']>;
  /** Whether this Alipay account object has ever been used for a payment. */
  used?: Maybe<Scalars['Boolean']>;
  /** Indicate if this source is used for payment. */
  usedForPayment?: Maybe<Scalars['Boolean']>;
  /** The username for the Alipay account. */
  username?: Maybe<Scalars['String']>;
  wechat?: Maybe<Wechat2>;
};

export type AchCreditTransfer2 = {
  accountNumber?: Maybe<Scalars['String']>;
  bankName?: Maybe<Scalars['String']>;
  fingerprint?: Maybe<Scalars['String']>;
  refundAccountHolderName?: Maybe<Scalars['String']>;
  refundAccountHolderType?: Maybe<Scalars['String']>;
  refundRoutingNumber?: Maybe<Scalars['String']>;
  routingNumber?: Maybe<Scalars['String']>;
  swiftCode?: Maybe<Scalars['String']>;
};

export type AchDebit2 = {
  bankName?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  fingerprint?: Maybe<Scalars['String']>;
  last4?: Maybe<Scalars['String']>;
  routingNumber?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};

export type AcssDebit4 = {
  bankAddressCity?: Maybe<Scalars['String']>;
  bankAddressLine1?: Maybe<Scalars['String']>;
  bankAddressLine2?: Maybe<Scalars['String']>;
  bankAddressPostalCode?: Maybe<Scalars['String']>;
  bankName?: Maybe<Scalars['String']>;
  category?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  fingerprint?: Maybe<Scalars['String']>;
  last4?: Maybe<Scalars['String']>;
  routingNumber?: Maybe<Scalars['String']>;
};

export type Alipay2 = {
  dataString?: Maybe<Scalars['String']>;
  nativeUrl?: Maybe<Scalars['String']>;
  statementDescriptor?: Maybe<Scalars['String']>;
};

export type AuBecsDebit2 = {
  bsbNumber?: Maybe<Scalars['String']>;
  fingerprint?: Maybe<Scalars['String']>;
  last4?: Maybe<Scalars['String']>;
};

export type Bancontact2 = {
  bankCode?: Maybe<Scalars['String']>;
  bankName?: Maybe<Scalars['String']>;
  bic?: Maybe<Scalars['String']>;
  ibanLast4?: Maybe<Scalars['String']>;
  preferredLanguage?: Maybe<Scalars['String']>;
  statementDescriptor?: Maybe<Scalars['String']>;
};

export type Card6 = {
  addressLine1Check?: Maybe<Scalars['String']>;
  addressZipCheck?: Maybe<Scalars['String']>;
  brand?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  cvcCheck?: Maybe<Scalars['String']>;
  dynamicLast4?: Maybe<Scalars['String']>;
  expMonth?: Maybe<Scalars['Int']>;
  expYear?: Maybe<Scalars['Int']>;
  fingerprint?: Maybe<Scalars['String']>;
  funding?: Maybe<Scalars['String']>;
  last4?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  threeDSecure?: Maybe<Scalars['String']>;
  tokenizationMethod?: Maybe<Scalars['String']>;
};

export type CardPresent2 = {
  applicationCryptogram?: Maybe<Scalars['String']>;
  applicationPreferredName?: Maybe<Scalars['String']>;
  authorizationCode?: Maybe<Scalars['String']>;
  authorizationResponseCode?: Maybe<Scalars['String']>;
  brand?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  cvmType?: Maybe<Scalars['String']>;
  dataType?: Maybe<Scalars['String']>;
  dedicatedFileName?: Maybe<Scalars['String']>;
  emvAuthData?: Maybe<Scalars['String']>;
  evidenceCustomerSignature?: Maybe<Scalars['String']>;
  evidenceTransactionCertificate?: Maybe<Scalars['String']>;
  expMonth?: Maybe<Scalars['Int']>;
  expYear?: Maybe<Scalars['Int']>;
  fingerprint?: Maybe<Scalars['String']>;
  funding?: Maybe<Scalars['String']>;
  last4?: Maybe<Scalars['String']>;
  posDeviceId?: Maybe<Scalars['String']>;
  posEntryMode?: Maybe<Scalars['String']>;
  readMethod?: Maybe<Scalars['String']>;
  reader?: Maybe<Scalars['String']>;
  terminalVerificationResults?: Maybe<Scalars['String']>;
  transactionStatusInformation?: Maybe<Scalars['String']>;
};

export type CodeVerification = {
  /** The number of attempts remaining to authenticate the source object with a verification code. */
  attemptsRemaining: Scalars['Int'];
  /** The status of the code verification, either `pending` (awaiting verification, `attempts_remaining` should be greater than 0), `succeeded` (successful verification) or `failed` (failed verification, cannot be verified anymore as `attempts_remaining` should be 0). */
  status: Scalars['String'];
};

export type Eps2 = {
  reference?: Maybe<Scalars['String']>;
  statementDescriptor?: Maybe<Scalars['String']>;
};

export type Giropay2 = {
  bankCode?: Maybe<Scalars['String']>;
  bankName?: Maybe<Scalars['String']>;
  bic?: Maybe<Scalars['String']>;
  statementDescriptor?: Maybe<Scalars['String']>;
};

export type Ideal2 = {
  bank?: Maybe<Scalars['String']>;
  bic?: Maybe<Scalars['String']>;
  ibanLast4?: Maybe<Scalars['String']>;
  statementDescriptor?: Maybe<Scalars['String']>;
};

export type Klarna2 = {
  backgroundImageUrl?: Maybe<Scalars['String']>;
  clientToken?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  locale?: Maybe<Scalars['String']>;
  logoUrl?: Maybe<Scalars['String']>;
  pageTitle?: Maybe<Scalars['String']>;
  payLaterAssetUrlsDescriptive?: Maybe<Scalars['String']>;
  payLaterAssetUrlsStandard?: Maybe<Scalars['String']>;
  payLaterName?: Maybe<Scalars['String']>;
  payLaterRedirectUrl?: Maybe<Scalars['String']>;
  payNowAssetUrlsDescriptive?: Maybe<Scalars['String']>;
  payNowAssetUrlsStandard?: Maybe<Scalars['String']>;
  payNowName?: Maybe<Scalars['String']>;
  payNowRedirectUrl?: Maybe<Scalars['String']>;
  payOverTimeAssetUrlsDescriptive?: Maybe<Scalars['String']>;
  payOverTimeAssetUrlsStandard?: Maybe<Scalars['String']>;
  payOverTimeName?: Maybe<Scalars['String']>;
  payOverTimeRedirectUrl?: Maybe<Scalars['String']>;
  paymentMethodCategories?: Maybe<Scalars['String']>;
  purchaseCountry?: Maybe<Scalars['String']>;
  purchaseType?: Maybe<Scalars['String']>;
  redirectUrl?: Maybe<Scalars['String']>;
  shippingDelay?: Maybe<Scalars['Int']>;
  shippingFirstName?: Maybe<Scalars['String']>;
  shippingLastName?: Maybe<Scalars['String']>;
};

export type Multibanco2 = {
  entity?: Maybe<Scalars['String']>;
  reference?: Maybe<Scalars['String']>;
  refundAccountHolderAddressCity?: Maybe<Scalars['String']>;
  refundAccountHolderAddressCountry?: Maybe<Scalars['String']>;
  refundAccountHolderAddressLine1?: Maybe<Scalars['String']>;
  refundAccountHolderAddressLine2?: Maybe<Scalars['String']>;
  refundAccountHolderAddressPostalCode?: Maybe<Scalars['String']>;
  refundAccountHolderAddressState?: Maybe<Scalars['String']>;
  refundAccountHolderName?: Maybe<Scalars['String']>;
  refundIban?: Maybe<Scalars['String']>;
};

/** Information about the owner of the payment instrument that may be used or required by particular source types. */
export type Owner3 = {
  /** Owner's address. */
  address?: Maybe<Address8>;
  /** Owner's email address. */
  email?: Maybe<Scalars['String']>;
  /** Owner's full name. */
  name?: Maybe<Scalars['String']>;
  /** Owner's phone number (including extension). */
  phone?: Maybe<Scalars['String']>;
  /** Verified owner's address. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated. */
  verifiedAddress?: Maybe<VerifiedAddress>;
  /** Verified owner's email address. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated. */
  verifiedEmail?: Maybe<Scalars['String']>;
  /** Verified owner's full name. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated. */
  verifiedName?: Maybe<Scalars['String']>;
  /** Verified owner's phone number (including extension). Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated. */
  verifiedPhone?: Maybe<Scalars['String']>;
};

/** Owner's address. */
export type Address8 = {
  /** City, district, suburb, town, or village. */
  city?: Maybe<Scalars['String']>;
  /** Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)). */
  country?: Maybe<Scalars['String']>;
  /** Address line 1 (e.g., street, PO Box, or company name). */
  line1?: Maybe<Scalars['String']>;
  /** Address line 2 (e.g., apartment, suite, unit, or building). */
  line2?: Maybe<Scalars['String']>;
  /** ZIP or postal code. */
  postalCode?: Maybe<Scalars['String']>;
  /** State, county, province, or region. */
  state?: Maybe<Scalars['String']>;
};

/** Verified owner's address. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated. */
export type VerifiedAddress = {
  /** City, district, suburb, town, or village. */
  city?: Maybe<Scalars['String']>;
  /** Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)). */
  country?: Maybe<Scalars['String']>;
  /** Address line 1 (e.g., street, PO Box, or company name). */
  line1?: Maybe<Scalars['String']>;
  /** Address line 2 (e.g., apartment, suite, unit, or building). */
  line2?: Maybe<Scalars['String']>;
  /** ZIP or postal code. */
  postalCode?: Maybe<Scalars['String']>;
  /** State, county, province, or region. */
  state?: Maybe<Scalars['String']>;
};

export type P242 = {
  reference?: Maybe<Scalars['String']>;
};

export type Receiver2 = {
  /** The address of the receiver source. This is the value that should be communicated to the customer to send their funds to. */
  address?: Maybe<Scalars['String']>;
  /** The total amount that was moved to your balance. This is almost always equal to the amount charged. In rare cases when customers deposit excess funds and we are unable to refund those, those funds get moved to your balance and show up in amount_charged as well. The amount charged is expressed in the source's currency. */
  amountCharged: Scalars['Int'];
  /** The total amount received by the receiver source. `amount_received = amount_returned + amount_charged` should be true for consumed sources unless customers deposit excess funds. The amount received is expressed in the source's currency. */
  amountReceived: Scalars['Int'];
  /** The total amount that was returned to the customer. The amount returned is expressed in the source's currency. */
  amountReturned: Scalars['Int'];
  /** Type of refund attribute method, one of `email`, `manual`, or `none`. */
  refundAttributesMethod: Scalars['String'];
  /** Type of refund attribute status, one of `missing`, `requested`, or `available`. */
  refundAttributesStatus: Scalars['String'];
};

export type Redirect = {
  /** The failure reason for the redirect, either `user_abort` (the customer aborted or dropped out of the redirect flow), `declined` (the authentication failed or the transaction was declined), or `processing_error` (the redirect failed due to a technical error). Present only if the redirect status is `failed`. */
  failureReason?: Maybe<Scalars['String']>;
  /** The URL you provide to redirect the customer to after they authenticated their payment. */
  returnUrl: Scalars['String'];
  /** The status of the redirect, either `pending` (ready to be used by your customer to authenticate the transaction), `succeeded` (succesful authentication, cannot be reused) or `not_required` (redirect should not be used) or `failed` (failed authentication, cannot be reused). */
  status: Scalars['String'];
  /** The URL provided to you to redirect a customer to as part of a `redirect` authentication flow. */
  url: Scalars['String'];
};

export type SepaDebit2 = {
  bankCode?: Maybe<Scalars['String']>;
  branchCode?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  fingerprint?: Maybe<Scalars['String']>;
  last4?: Maybe<Scalars['String']>;
  mandateReference?: Maybe<Scalars['String']>;
  mandateUrl?: Maybe<Scalars['String']>;
};

export type Sofort2 = {
  bankCode?: Maybe<Scalars['String']>;
  bankName?: Maybe<Scalars['String']>;
  bic?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  ibanLast4?: Maybe<Scalars['String']>;
  preferredLanguage?: Maybe<Scalars['String']>;
  statementDescriptor?: Maybe<Scalars['String']>;
};

export type SourceOrder = {
  /** A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount for the order. */
  amount: Scalars['Int'];
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency: Scalars['String'];
  /** The email address of the customer placing the order. */
  email?: Maybe<Scalars['String']>;
  /** List of items constituting the order. */
  items?: Maybe<Array<Maybe<SourceOrderItem>>>;
  shipping?: Maybe<Shipping6>;
};

export type SourceOrderItem = {
  /** The amount (price) for this order item. */
  amount?: Maybe<Scalars['Int']>;
  /** This currency of this order item. Required when `amount` is present. */
  currency?: Maybe<Scalars['String']>;
  /** Human-readable description for this order item. */
  description?: Maybe<Scalars['String']>;
  /** The ID of the associated object for this line item. Expandable if not null (e.g., expandable to a SKU). */
  parent?: Maybe<Scalars['String']>;
  /** The quantity of this order item. When type is `sku`, this is the number of instances of the SKU to be ordered. */
  quantity?: Maybe<Scalars['Int']>;
  /** The type of this order item. Must be `sku`, `tax`, or `shipping`. */
  type?: Maybe<Scalars['String']>;
};

export type Shipping6 = {
  address?: Maybe<Address>;
  /** The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc. */
  carrier?: Maybe<Scalars['String']>;
  /** Recipient name. */
  name?: Maybe<Scalars['String']>;
  /** Recipient phone (including extension). */
  phone?: Maybe<Scalars['String']>;
  /** The tracking number for a physical product, obtained from the delivery service. If multiple tracking numbers were generated for this purchase, please separate them with commas. */
  trackingNumber?: Maybe<Scalars['String']>;
};

export type ThreeDSecure4 = {
  addressLine1Check?: Maybe<Scalars['String']>;
  addressZipCheck?: Maybe<Scalars['String']>;
  authenticated?: Maybe<Scalars['Boolean']>;
  brand?: Maybe<Scalars['String']>;
  card?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  customer?: Maybe<Scalars['String']>;
  cvcCheck?: Maybe<Scalars['String']>;
  dynamicLast4?: Maybe<Scalars['String']>;
  expMonth?: Maybe<Scalars['Int']>;
  expYear?: Maybe<Scalars['Int']>;
  fingerprint?: Maybe<Scalars['String']>;
  funding?: Maybe<Scalars['String']>;
  last4?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  threeDSecure?: Maybe<Scalars['String']>;
  tokenizationMethod?: Maybe<Scalars['String']>;
};

export enum Type18 {
  ACH_CREDIT_TRANSFER = 'ach_credit_transfer',
  ACH_DEBIT = 'ach_debit',
  ACSS_DEBIT = 'acss_debit',
  ALIPAY = 'alipay',
  AU_BECS_DEBIT = 'au_becs_debit',
  BANCONTACT = 'bancontact',
  CARD = 'card',
  CARD_PRESENT = 'card_present',
  EPS = 'eps',
  GIROPAY = 'giropay',
  IDEAL = 'ideal',
  KLARNA = 'klarna',
  MULTIBANCO = 'multibanco',
  P24 = 'p24',
  SEPA_DEBIT = 'sepa_debit',
  SOFORT = 'sofort',
  THREE_D_SECURE = 'three_d_secure',
  WECHAT = 'wechat'
}

export type Wechat2 = {
  prepayId?: Maybe<Scalars['String']>;
  qrCodeUrl?: Maybe<Scalars['String']>;
  statementDescriptor?: Maybe<Scalars['String']>;
};

/** The customer's current subscriptions, if any. */
export type Subscriptions = {
  /** Details about each object. */
  data: Array<Maybe<Subscription5>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

/**
 * Subscriptions allow you to charge a customer on a recurring basis.
 *
 * Related guide: [Creating Subscriptions](https://stripe.com/docs/billing/subscriptions/creating).
 */
export type Subscription5 = {
  /** A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account. */
  applicationFeePercent?: Maybe<Scalars['Float']>;
  automaticTax: SubscriptionAutomaticTax;
  /** Determines the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices. */
  billingCycleAnchor: Scalars['Int'];
  /** Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period */
  billingThresholds?: Maybe<BillingThresholds>;
  /** A date in the future at which the subscription will automatically get canceled */
  cancelAt?: Maybe<Scalars['Int']>;
  /** If the subscription has been canceled with the `at_period_end` flag set to `true`, `cancel_at_period_end` on the subscription will be true. You can use this attribute to determine whether a subscription that has a status of active is scheduled to be canceled at the end of the current period. */
  cancelAtPeriodEnd: Scalars['Boolean'];
  /** If the subscription has been canceled, the date of that cancellation. If the subscription was canceled with `cancel_at_period_end`, `canceled_at` will reflect the time of the most recent update request, not the end of the subscription period when the subscription is automatically moved to a canceled state. */
  canceledAt?: Maybe<Scalars['Int']>;
  /** Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions. */
  collectionMethod?: Maybe<CollectionMethod>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created: Scalars['Int'];
  /** End of the current period that the subscription has been invoiced for. At the end of this period, a new invoice will be created. */
  currentPeriodEnd: Scalars['Int'];
  /** Start of the current period that the subscription has been invoiced for. */
  currentPeriodStart: Scalars['Int'];
  /** ID of the customer who owns the subscription. */
  customer: Scalars['JSON'];
  /** Number of days a customer has to pay invoices generated by this subscription. This value will be `null` for subscriptions where `collection_method=charge_automatically`. */
  daysUntilDue?: Maybe<Scalars['Int']>;
  /** ID of the default payment method for the subscription. It must belong to the customer associated with the subscription. This takes precedence over `default_source`. If neither are set, invoices will use the customer's [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source). */
  defaultPaymentMethod?: Maybe<Scalars['JSON']>;
  /** ID of the default payment source for the subscription. It must belong to the customer associated with the subscription and be in a chargeable state. If `default_payment_method` is also set, `default_payment_method` will take precedence. If neither are set, invoices will use the customer's [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source). */
  defaultSource?: Maybe<Scalars['JSON']>;
  /** The tax rates that will apply to any subscription item that does not have `tax_rates` set. Invoices created will have their `default_tax_rates` populated from the subscription. */
  defaultTaxRates?: Maybe<Array<Maybe<TaxRate>>>;
  /** Describes the current discount applied to this subscription, if there is one. When billing, a discount applied to a subscription overrides a discount applied on a customer-wide basis. */
  discount?: Maybe<Discount4>;
  /** If the subscription has ended, the date the subscription ended. */
  endedAt?: Maybe<Scalars['Int']>;
  /** Unique identifier for the object. */
  id: Scalars['String'];
  /** List of subscription items, each with an attached price. */
  items: SubscriptionItemList;
  /** The most recent invoice this subscription has generated. */
  latestInvoice?: Maybe<Scalars['JSON']>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: Scalars['Boolean'];
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata: Scalars['JSON'];
  /** Specifies the approximate timestamp on which any pending invoice items will be billed according to the schedule provided at `pending_invoice_item_interval`. */
  nextPendingInvoiceItemInvoice?: Maybe<Scalars['Int']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object32;
  /** If specified, payment collection for this subscription will be paused. */
  pauseCollection?: Maybe<PauseCollection>;
  /** Payment settings passed on to invoices created by the subscription. */
  paymentSettings?: Maybe<PaymentSettings>;
  /** Specifies an interval for how often to bill for any pending invoice items. It is analogous to calling [Create an invoice](https://stripe.com/docs/api#create_invoice) for the given subscription at the specified interval. */
  pendingInvoiceItemInterval?: Maybe<PendingInvoiceItemInterval>;
  /** You can use this [SetupIntent](https://stripe.com/docs/api/setup_intents) to collect user authentication when creating a subscription without immediate payment or updating a subscription's payment method, allowing you to optimize for off-session payments. Learn more in the [SCA Migration Guide](https://stripe.com/docs/billing/migration/strong-customer-authentication#scenario-2). */
  pendingSetupIntent?: Maybe<Scalars['JSON']>;
  /** If specified, [pending updates](https://stripe.com/docs/billing/subscriptions/pending-updates) that will be applied to the subscription once the `latest_invoice` has been paid. */
  pendingUpdate?: Maybe<PendingUpdate>;
  /** The schedule attached to the subscription */
  schedule?: Maybe<Scalars['JSON']>;
  /** Date when the subscription was first created. The date might differ from the `created` date due to backdating. */
  startDate: Scalars['Int'];
  /**
   * Possible values are `incomplete`, `incomplete_expired`, `trialing`, `active`, `past_due`, `canceled`, or `unpaid`.
   *
   * For `collection_method=charge_automatically` a subscription moves into `incomplete` if the initial payment attempt fails. A subscription in this state can only have metadata and default_source updated. Once the first invoice is paid, the subscription moves into an `active` state. If the first invoice is not paid within 23 hours, the subscription transitions to `incomplete_expired`. This is a terminal state, the open invoice will be voided and no further invoices will be generated.
   *
   * A subscription that is currently in a trial period is `trialing` and moves to `active` when the trial period is over.
   *
   * If subscription `collection_method=charge_automatically` it becomes `past_due` when payment to renew it fails and `canceled` or `unpaid` (depending on your subscriptions settings) when Stripe has exhausted all payment retry attempts.
   *
   * If subscription `collection_method=send_invoice` it becomes `past_due` when its invoice is not paid by the due date, and `canceled` or `unpaid` if it is still not paid by an additional deadline after that. Note that when a subscription has a status of `unpaid`, no subsequent invoices will be attempted (invoices will be created, but then immediately automatically closed). After receiving updated payment information from a customer, you may choose to reopen and pay their closed invoices.
   */
  status: Status14;
  /** The account (if any) the subscription's payments will be attributed to for tax reporting, and where funds from each payment will be transferred to for each of the subscription's invoices. */
  transferData?: Maybe<TransferData4>;
  /** If the subscription has a trial, the end of that trial. */
  trialEnd?: Maybe<Scalars['Int']>;
  /** If the subscription has a trial, the beginning of that trial. */
  trialStart?: Maybe<Scalars['Int']>;
};

export type SubscriptionAutomaticTax = {
  /** Whether Stripe automatically computes tax on this subscription. */
  enabled: Scalars['Boolean'];
};

/** Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period */
export type BillingThresholds = {
  /** Monetary threshold that triggers the subscription to create an invoice */
  amountGte?: Maybe<Scalars['Int']>;
  /** Indicates if the `billing_cycle_anchor` should be reset when a threshold is reached. If true, `billing_cycle_anchor` will be updated to the date/time the threshold was last reached; otherwise, the value will remain unchanged. This value may not be `true` if the subscription contains items with plans that have `aggregate_usage=last_ever`. */
  resetBillingCycleAnchor?: Maybe<Scalars['Boolean']>;
};

export enum CollectionMethod {
  CHARGE_AUTOMATICALLY = 'charge_automatically',
  SEND_INVOICE = 'send_invoice'
}

/** Describes the current discount applied to this subscription, if there is one. When billing, a discount applied to a subscription overrides a discount applied on a customer-wide basis. */
export type Discount4 = {
  /** The Checkout session that this coupon is applied to, if it is applied to a particular session in payment mode. Will not be present for subscription mode. */
  checkoutSession?: Maybe<Scalars['String']>;
  /**
   * A coupon contains information about a percent-off or amount-off discount you
   * might want to apply to a customer. Coupons may be applied to [invoices](https://stripe.com/docs/api#invoices) or
   * [orders](https://stripe.com/docs/api#create_order-coupon). Coupons do not work with conventional one-off [charges](https://stripe.com/docs/api#create_charge).
   */
  coupon?: Maybe<Coupon>;
  /** The ID of the customer associated with this discount. */
  customer?: Maybe<Scalars['JSON']>;
  /** If the coupon has a duration of `repeating`, the date that this discount will end. If the coupon has a duration of `once` or `forever`, this attribute will be null. */
  end?: Maybe<Scalars['Int']>;
  /** The ID of the discount object. Discounts cannot be fetched by ID. Use `expand[]=discounts` in API calls to expand discount IDs in an array. */
  id?: Maybe<Scalars['String']>;
  /** The invoice that the discount's coupon was applied to, if it was applied directly to a particular invoice. */
  invoice?: Maybe<Scalars['String']>;
  /** The invoice item `id` (or invoice line item `id` for invoice line items of type='subscription') that the discount's coupon was applied to, if it was applied directly to a particular invoice item or invoice line item. */
  invoiceItem?: Maybe<Scalars['String']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: Maybe<Object22>;
  /** The promotion code applied to create this discount. */
  promotionCode?: Maybe<Scalars['JSON']>;
  /** Date that the coupon was applied. */
  start?: Maybe<Scalars['Int']>;
  /** The subscription that this coupon is applied to, if it is applied to a particular subscription. */
  subscription?: Maybe<Scalars['String']>;
};

/** List of subscription items, each with an attached price. */
export type SubscriptionItemList = {
  /** Details about each object. */
  data: Array<Maybe<SubscriptionItem>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

/**
 * Subscription items allow you to create customer subscriptions with more than
 * one plan, making it easy to represent complex billing relationships.
 */
export type SubscriptionItem = {
  /** Define thresholds at which an invoice will be sent, and the related subscription advanced to a new billing period */
  billingThresholds?: Maybe<BillingThresholds2>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created: Scalars['Int'];
  /** Unique identifier for the object. */
  id: Scalars['String'];
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata: Scalars['JSON'];
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object31;
  /**
   * Prices define the unit cost, currency, and (optional) billing cycle for both recurring and one-time purchases of products.
   * [Products](https://stripe.com/docs/api#products) help you track inventory or provisioning, and prices help you track payment terms. Different physical goods or levels of service should be represented by products, and pricing options should be represented by prices. This approach lets you change prices without having to change your provisioning scheme.
   *
   * For example, you might have a single "gold" product that has prices for $10/month, $100/year, and €9 once.
   *
   * Related guides: [Set up a subscription](https://stripe.com/docs/billing/subscriptions/set-up-subscription), [create an invoice](https://stripe.com/docs/billing/invoices/create), and more about [products and prices](https://stripe.com/docs/billing/prices-guide).
   */
  price: Price3;
  /** The [quantity](https://stripe.com/docs/subscriptions/quantities) of the plan to which the customer should be subscribed. */
  quantity?: Maybe<Scalars['Int']>;
  /** The `subscription` this `subscription_item` belongs to. */
  subscription: Scalars['String'];
  /** The tax rates which apply to this `subscription_item`. When set, the `default_tax_rates` on the subscription do not apply to this `subscription_item`. */
  taxRates?: Maybe<Array<Maybe<TaxRate>>>;
};

/** Define thresholds at which an invoice will be sent, and the related subscription advanced to a new billing period */
export type BillingThresholds2 = {
  /** Usage threshold that triggers the subscription to create an invoice */
  usageGte?: Maybe<Scalars['Int']>;
};

export enum Object31 {
  SUBSCRIPTION_ITEM = 'subscription_item'
}

/**
 * Prices define the unit cost, currency, and (optional) billing cycle for both recurring and one-time purchases of products.
 * [Products](https://stripe.com/docs/api#products) help you track inventory or provisioning, and prices help you track payment terms. Different physical goods or levels of service should be represented by products, and pricing options should be represented by prices. This approach lets you change prices without having to change your provisioning scheme.
 *
 * For example, you might have a single "gold" product that has prices for $10/month, $100/year, and €9 once.
 *
 * Related guides: [Set up a subscription](https://stripe.com/docs/billing/subscriptions/set-up-subscription), [create an invoice](https://stripe.com/docs/billing/invoices/create), and more about [products and prices](https://stripe.com/docs/billing/prices-guide).
 */
export type Price3 = {
  /** Whether the price can be used for new purchases. */
  active: Scalars['Boolean'];
  /** Describes how to compute the price per period. Either `per_unit` or `tiered`. `per_unit` indicates that the fixed amount (specified in `unit_amount` or `unit_amount_decimal`) will be charged per unit in `quantity` (for prices with `usage_type=licensed`), or per unit of total usage (for prices with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as defined using the `tiers` and `tiers_mode` attributes. */
  billingScheme: BillingScheme;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created: Scalars['Int'];
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency: Scalars['String'];
  /** Unique identifier for the object. */
  id: Scalars['String'];
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: Scalars['Boolean'];
  /** A lookup key used to retrieve prices dynamically from a static string. */
  lookupKey?: Maybe<Scalars['String']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata: Scalars['JSON'];
  /** A brief description of the price, hidden from customers. */
  nickname?: Maybe<Scalars['String']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object24;
  /** The ID of the product this price is associated with. */
  product: Scalars['JSON'];
  /** The recurring components of a price such as `interval` and `usage_type`. */
  recurring?: Maybe<Recurring>;
  /** Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`. Once specified as either `inclusive` or `exclusive`, it cannot be changed. */
  taxBehavior?: Maybe<TaxBehavior>;
  /** Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`. */
  tiers?: Maybe<Array<Maybe<PriceTier>>>;
  /** Defines if the tiering price should be `graduated` or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per unit price. In `graduated` tiering, pricing can change as the quantity grows. */
  tiersMode?: Maybe<TiersMode>;
  /** Apply a transformation to the reported usage or set quantity before computing the amount billed. Cannot be combined with `tiers`. */
  transformQuantity?: Maybe<TransformQuantity>;
  /** One of `one_time` or `recurring` depending on whether the price is for a one-time purchase or a recurring (subscription) purchase. */
  type: Type12;
  /** The unit amount in %s to be charged, represented as a whole integer if possible. Only set if `billing_scheme=per_unit`. */
  unitAmount?: Maybe<Scalars['Int']>;
  /** The unit amount in %s to be charged, represented as a decimal string with at most 12 decimal places. Only set if `billing_scheme=per_unit`. */
  unitAmountDecimal?: Maybe<Scalars['String']>;
};

export enum Object32 {
  SUBSCRIPTION = 'subscription'
}

/** If specified, payment collection for this subscription will be paused. */
export type PauseCollection = {
  /** The payment collection behavior for this subscription while paused. One of `keep_as_draft`, `mark_uncollectible`, or `void`. */
  behavior?: Maybe<Behavior>;
  /** The time after which the subscription will resume collecting payments. */
  resumesAt?: Maybe<Scalars['Int']>;
};

export enum Behavior {
  KEEP_AS_DRAFT = 'keep_as_draft',
  MARK_UNCOLLECTIBLE = 'mark_uncollectible',
  VOID = 'void'
}

/** Payment settings passed on to invoices created by the subscription. */
export type PaymentSettings = {
  /** Payment-method-specific configuration to provide to invoices created by the subscription. */
  paymentMethodOptions?: Maybe<PaymentMethodOptions2>;
  /** The list of payment method types to provide to every invoice created by the subscription. If not set, Stripe attempts to automatically determine the types to use by looking at the invoice’s default payment method, the subscription’s default payment method, the customer’s default payment method, and your [invoice template settings](https://dashboard.stripe.com/settings/billing/invoice). */
  paymentMethodTypes?: Maybe<Array<Maybe<PaymentMethodTypes3ListItem>>>;
};

/** Payment-method-specific configuration to provide to invoices created by the subscription. */
export type PaymentMethodOptions2 = {
  /** This sub-hash contains details about the Bancontact payment method options to pass to invoices created by the subscription. */
  bancontact?: Maybe<Bancontact3>;
  /** This sub-hash contains details about the Card payment method options to pass to invoices created by the subscription. */
  card?: Maybe<Card8>;
};

/** This sub-hash contains details about the Bancontact payment method options to pass to invoices created by the subscription. */
export type Bancontact3 = {
  /** Preferred language of the Bancontact authorization page that the customer is redirected to. */
  preferredLanguage?: Maybe<PreferredLanguage5>;
};

export enum PreferredLanguage5 {
  DE = 'de',
  EN = 'en',
  FR = 'fr',
  NL = 'nl'
}

/** This sub-hash contains details about the Card payment method options to pass to invoices created by the subscription. */
export type Card8 = {
  /** We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine. */
  requestThreeDSecure?: Maybe<RequestThreeDSecure>;
};

export enum RequestThreeDSecure {
  ANY = 'any',
  AUTOMATIC = 'automatic'
}

export enum PaymentMethodTypes3ListItem {
  ACH_CREDIT_TRANSFER = 'ach_credit_transfer',
  ACH_DEBIT = 'ach_debit',
  AU_BECS_DEBIT = 'au_becs_debit',
  BACS_DEBIT = 'bacs_debit',
  BANCONTACT = 'bancontact',
  BOLETO = 'boleto',
  CARD = 'card',
  FPX = 'fpx',
  GIROPAY = 'giropay',
  IDEAL = 'ideal',
  SEPA_DEBIT = 'sepa_debit',
  SOFORT = 'sofort',
  WECHAT_PAY = 'wechat_pay'
}

/** Specifies an interval for how often to bill for any pending invoice items. It is analogous to calling [Create an invoice](https://stripe.com/docs/api#create_invoice) for the given subscription at the specified interval. */
export type PendingInvoiceItemInterval = {
  /** Specifies invoicing frequency. Either `day`, `week`, `month` or `year`. */
  interval?: Maybe<Interval6>;
  /** The number of intervals between invoices. For example, `interval=month` and `interval_count=3` bills every 3 months. Maximum of one year interval allowed (1 year, 12 months, or 52 weeks). */
  intervalCount?: Maybe<Scalars['Int']>;
};

export enum Interval6 {
  DAY = 'day',
  MONTH = 'month',
  WEEK = 'week',
  YEAR = 'year'
}

/** If specified, [pending updates](https://stripe.com/docs/billing/subscriptions/pending-updates) that will be applied to the subscription once the `latest_invoice` has been paid. */
export type PendingUpdate = {
  /** If the update is applied, determines the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices. */
  billingCycleAnchor?: Maybe<Scalars['Int']>;
  /** The point after which the changes reflected by this update will be discarded and no longer applied. */
  expiresAt?: Maybe<Scalars['Int']>;
  /** List of subscription items, each with an attached plan, that will be set if the update is applied. */
  subscriptionItems?: Maybe<Array<Maybe<SubscriptionItem>>>;
  /** Unix timestamp representing the end of the trial period the customer will get before being charged for the first time, if the update is applied. */
  trialEnd?: Maybe<Scalars['Int']>;
  /** Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `trial_end` is not allowed. */
  trialFromPlan?: Maybe<Scalars['Boolean']>;
};

export enum Status14 {
  ACTIVE = 'active',
  CANCELED = 'canceled',
  INCOMPLETE = 'incomplete',
  INCOMPLETE_EXPIRED = 'incomplete_expired',
  PAST_DUE = 'past_due',
  TRIALING = 'trialing',
  UNPAID = 'unpaid'
}

/** The account (if any) the subscription's payments will be attributed to for tax reporting, and where funds from each payment will be transferred to for each of the subscription's invoices. */
export type TransferData4 = {
  /** A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the destination account. By default, the entire amount is transferred to the destination. */
  amountPercent?: Maybe<Scalars['Float']>;
  /** The account where funds from the payment will be transferred to upon payment success. */
  destination?: Maybe<Scalars['JSON']>;
};

export type CustomerTax = {
  /** Surfaces if automatic tax computation is possible given the current customer location information. */
  automaticTax: AutomaticTax2;
  /** A recent IP address of the customer used for tax reporting and tax location inference. */
  ipAddress?: Maybe<Scalars['String']>;
  /** The customer's location as identified by Stripe Tax. */
  location?: Maybe<Location>;
};

export enum AutomaticTax2 {
  FAILED = 'failed',
  NOT_COLLECTING = 'not_collecting',
  SUPPORTED = 'supported',
  UNRECOGNIZED_LOCATION = 'unrecognized_location'
}

/** The customer's location as identified by Stripe Tax. */
export type Location = {
  /** The customer's country as identified by Stripe Tax. */
  country?: Maybe<Scalars['String']>;
  /** The data source used to infer the customer's location. */
  source?: Maybe<Source3>;
  /** The customer's state, county, province, or region as identified by Stripe Tax. */
  state?: Maybe<Scalars['String']>;
};

export enum Source3 {
  BILLING_ADDRESS = 'billing_address',
  IP_ADDRESS = 'ip_address',
  PAYMENT_METHOD = 'payment_method',
  SHIPPING_DESTINATION = 'shipping_destination'
}

export enum TaxExempt2 {
  EXEMPT = 'exempt',
  NONE = 'none',
  REVERSE = 'reverse'
}

/** The customer's tax IDs. */
export type TaxIDsList = {
  /** Details about each object. */
  data: Array<Maybe<TaxId3>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

/**
 * You can add one or multiple tax IDs to a [customer](https://stripe.com/docs/api/customers).
 * A customer's tax IDs are displayed on invoices and credit notes issued for the customer.
 *
 * Related guide: [Customer Tax Identification Numbers](https://stripe.com/docs/billing/taxes/tax-ids).
 */
export type TaxId3 = {
  /** Two-letter ISO code representing the country of the tax ID. */
  country?: Maybe<Scalars['String']>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created: Scalars['Int'];
  /** ID of the customer. */
  customer?: Maybe<Scalars['JSON']>;
  /** Unique identifier for the object. */
  id: Scalars['String'];
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object33;
  /** Type of the tax ID, one of `ae_trn`, `au_abn`, `br_cnpj`, `br_cpf`, `ca_bn`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `ca_qst`, `ch_vat`, `cl_tin`, `es_cif`, `eu_vat`, `gb_vat`, `hk_br`, `id_npwp`, `il_vat`, `in_gst`, `jp_cn`, `jp_rn`, `kr_brn`, `li_uid`, `mx_rfc`, `my_frp`, `my_itn`, `my_sst`, `no_vat`, `nz_gst`, `ru_inn`, `ru_kpp`, `sa_vat`, `sg_gst`, `sg_uen`, `th_vat`, `tw_vat`, `us_ein`, or `za_vat`. Note that some legacy tax IDs have type `unknown` */
  type: Type19;
  /** Value of the tax ID. */
  value: Scalars['String'];
  /** Tax ID verification information. */
  verification?: Maybe<Verification3>;
};

export enum Object33 {
  TAX_ID = 'tax_id'
}

export enum Type19 {
  AE_TRN = 'ae_trn',
  AU_ABN = 'au_abn',
  BR_CNPJ = 'br_cnpj',
  BR_CPF = 'br_cpf',
  CA_BN = 'ca_bn',
  CA_GST_HST = 'ca_gst_hst',
  CA_PST_BC = 'ca_pst_bc',
  CA_PST_MB = 'ca_pst_mb',
  CA_PST_SK = 'ca_pst_sk',
  CA_QST = 'ca_qst',
  CH_VAT = 'ch_vat',
  CL_TIN = 'cl_tin',
  ES_CIF = 'es_cif',
  EU_VAT = 'eu_vat',
  GB_VAT = 'gb_vat',
  HK_BR = 'hk_br',
  ID_NPWP = 'id_npwp',
  IL_VAT = 'il_vat',
  IN_GST = 'in_gst',
  JP_CN = 'jp_cn',
  JP_RN = 'jp_rn',
  KR_BRN = 'kr_brn',
  LI_UID = 'li_uid',
  MX_RFC = 'mx_rfc',
  MY_FRP = 'my_frp',
  MY_ITN = 'my_itn',
  MY_SST = 'my_sst',
  NO_VAT = 'no_vat',
  NZ_GST = 'nz_gst',
  RU_INN = 'ru_inn',
  RU_KPP = 'ru_kpp',
  SA_VAT = 'sa_vat',
  SG_GST = 'sg_gst',
  SG_UEN = 'sg_uen',
  TH_VAT = 'th_vat',
  TW_VAT = 'tw_vat',
  UNKNOWN = 'unknown',
  US_EIN = 'us_ein',
  ZA_VAT = 'za_vat'
}

/** Tax ID verification information. */
export type Verification3 = {
  /** Verification status, one of `pending`, `verified`, `unverified`, or `unavailable`. */
  status?: Maybe<Status15>;
  /** Verified address. */
  verifiedAddress?: Maybe<Scalars['String']>;
  /** Verified name. */
  verifiedName?: Maybe<Scalars['String']>;
};

export enum Status15 {
  PENDING = 'pending',
  UNAVAILABLE = 'unavailable',
  UNVERIFIED = 'unverified',
  VERIFIED = 'verified'
}

export type V1Customer2 = {
  /** The customer's address. */
  address?: Maybe<Address7>;
  /** Current balance, if any, being stored on the customer. If negative, the customer has credit to apply to their next invoice. If positive, the customer has an amount owed that will be added to their next invoice. The balance does not refer to any unpaid invoices; it solely takes into account amounts that have yet to be successfully applied to any invoice. This balance is only taken into account as invoices are finalized. */
  balance?: Maybe<Scalars['Int']>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: Maybe<Scalars['Int']>;
  /** Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) the customer can be charged in for recurring billing purposes. */
  currency?: Maybe<Scalars['String']>;
  /**
   * ID of the default payment source for the customer.
   *
   * If you are using payment methods created via the PaymentMethods API, see the [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) field instead.
   */
  defaultSource?: Maybe<Scalars['JSON']>;
  /** Always true for a deleted object */
  deleted?: Maybe<Deleted>;
  /**
   * When the customer's latest invoice is billed by charging automatically, `delinquent` is `true` if the invoice's latest charge failed. When the customer's latest invoice is billed by sending an invoice, `delinquent` is `true` if the invoice isn't paid by its due date.
   *
   * If an invoice is marked uncollectible by [dunning](https://stripe.com/docs/billing/automatic-collection), `delinquent` doesn't get reset to `false`.
   */
  delinquent?: Maybe<Scalars['Boolean']>;
  /** An arbitrary string attached to the object. Often useful for displaying to users. */
  description?: Maybe<Scalars['String']>;
  /** Describes the current discount active on the customer, if there is one. */
  discount?: Maybe<Discount3>;
  /** The customer's email address. */
  email?: Maybe<Scalars['String']>;
  /** Unique identifier for the object. */
  id?: Maybe<Scalars['String']>;
  /** The prefix for the customer used to generate unique invoice numbers. */
  invoicePrefix?: Maybe<Scalars['String']>;
  invoiceSettings?: Maybe<InvoiceSettings2>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: Maybe<Scalars['Boolean']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Maybe<Scalars['JSON']>;
  /** The customer's full name or business name. */
  name?: Maybe<Scalars['String']>;
  /** The suffix of the customer's next invoice number, e.g., 0001. */
  nextInvoiceSequence?: Maybe<Scalars['Int']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: Maybe<Object30>;
  /** The customer's phone number. */
  phone?: Maybe<Scalars['String']>;
  /** The customer's preferred locales (languages), ordered by preference. */
  preferredLocales?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Mailing and shipping address for the customer. Appears on invoices emailed to this customer. */
  shipping?: Maybe<Shipping5>;
  /** The customer's payment sources, if any. */
  sources?: Maybe<Sources>;
  /** The customer's current subscriptions, if any. */
  subscriptions?: Maybe<Subscriptions>;
  tax?: Maybe<Tax2>;
  /** Describes the customer's tax exemption status. One of `none`, `exempt`, or `reverse`. When set to `reverse`, invoice and receipt PDFs include the text **"Reverse charge"**. */
  taxExempt?: Maybe<TaxExempt2>;
  /** The customer's tax IDs. */
  taxIds?: Maybe<TaxIDsList>;
};

export enum Deleted {
  TRUE = 'true'
}

export type InvoiceSettings2 = {
  /** Default custom fields to be displayed on invoices for this customer. */
  customFields?: Maybe<Array<Maybe<InvoiceSettingCustomField>>>;
  /** ID of a payment method that's attached to the customer, to be used as the customer's default payment method for subscriptions and invoices. */
  defaultPaymentMethod?: Maybe<Scalars['JSON']>;
  /** Default footer to be displayed on invoices for this customer. */
  footer?: Maybe<Scalars['String']>;
};

export type Tax2 = {
  /** Surfaces if automatic tax computation is possible given the current customer location information. */
  automaticTax: AutomaticTax2;
  /** A recent IP address of the customer used for tax reporting and tax location inference. */
  ipAddress?: Maybe<Scalars['String']>;
  /** The customer's location as identified by Stripe Tax. */
  location?: Maybe<Location>;
};

export type CustomerBalanceTransactionList = {
  /** Details about each object. */
  data: Array<Maybe<CustomerBalanceTransaction2>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

/**
 * Each customer has a [`balance`](https://stripe.com/docs/api/customers/object#customer_object-balance) value,
 * which denotes a debit or credit that's automatically applied to their next invoice upon finalization.
 * You may modify the value directly by using the [update customer API](https://stripe.com/docs/api/customers/update),
 * or by creating a Customer Balance Transaction, which increments or decrements the customer's `balance` by the specified `amount`.
 *
 * Related guide: [Customer Balance](https://stripe.com/docs/billing/customer/balance) to learn more.
 */
export type CustomerBalanceTransaction2 = {
  /** The amount of the transaction. A negative value is a credit for the customer's balance, and a positive value is a debit to the customer's `balance`. */
  amount: Scalars['Int'];
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created: Scalars['Int'];
  /** The ID of the credit note (if any) related to the transaction. */
  creditNote?: Maybe<Scalars['JSON']>;
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency: Scalars['String'];
  /** The ID of the customer the transaction belongs to. */
  customer: Scalars['JSON'];
  /** An arbitrary string attached to the object. Often useful for displaying to users. */
  description?: Maybe<Scalars['String']>;
  /** The customer's `balance` after the transaction was applied. A negative value decreases the amount due on the customer's next invoice. A positive value increases the amount due on the customer's next invoice. */
  endingBalance: Scalars['Int'];
  /** Unique identifier for the object. */
  id: Scalars['String'];
  /** The ID of the invoice (if any) related to the transaction. */
  invoice?: Maybe<Scalars['JSON']>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: Scalars['Boolean'];
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Maybe<Scalars['JSON']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object34;
  /** Transaction type: `adjustment`, `applied_to_invoice`, `credit_note`, `initial`, `invoice_too_large`, `invoice_too_small`, `unspent_receiver_credit`, or `unapplied_from_invoice`. See the [Customer Balance page](https://stripe.com/docs/billing/customer/balance#types) to learn more about transaction types. */
  type: Type21;
};

export enum Object34 {
  CUSTOMER_BALANCE_TRANSACTION = 'customer_balance_transaction'
}

export enum Type21 {
  ADJUSTMENT = 'adjustment',
  APPLIED_TO_INVOICE = 'applied_to_invoice',
  CREDIT_NOTE = 'credit_note',
  INITIAL = 'initial',
  INVOICE_TOO_LARGE = 'invoice_too_large',
  INVOICE_TOO_SMALL = 'invoice_too_small',
  MIGRATION = 'migration',
  UNAPPLIED_FROM_INVOICE = 'unapplied_from_invoice',
  UNSPENT_RECEIVER_CREDIT = 'unspent_receiver_credit'
}

export type BankAccountList = {
  /** Details about each object. */
  data: Array<Maybe<BankAccount7>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

/**
 * These bank accounts are payment methods on `Customer` objects.
 *
 * On the other hand [External Accounts](https://stripe.com/docs/api#external_accounts) are transfer
 * destinations on `Account` objects for [Custom accounts](https://stripe.com/docs/connect/custom-accounts).
 * They can be bank accounts or debit cards as well, and are documented in the links above.
 *
 * Related guide: [Bank Debits and Transfers](https://stripe.com/docs/payments/bank-debits-transfers).
 */
export type BankAccount7 = {
  /** The ID of the account that the bank account is associated with. */
  account?: Maybe<Scalars['JSON']>;
  /** The name of the person or business that owns the bank account. */
  accountHolderName?: Maybe<Scalars['String']>;
  /** The type of entity that holds the account. This can be either `individual` or `company`. */
  accountHolderType?: Maybe<Scalars['String']>;
  /** The bank account type. This can only be `checking` or `savings` in most countries. In Japan, this can only be `futsu` or `toza`. */
  accountType?: Maybe<Scalars['String']>;
  /** A set of available payout methods for this bank account. Only values from this set should be passed as the `method` when creating a payout. */
  availablePayoutMethods?: Maybe<Array<Maybe<AvailablePayoutMethods2ListItem>>>;
  /** Name of the bank associated with the routing number (e.g., `WELLS FARGO`). */
  bankName?: Maybe<Scalars['String']>;
  /** Two-letter ISO code representing the country the bank account is located in. */
  country: Scalars['String'];
  /** Three-letter [ISO code for the currency](https://stripe.com/docs/payouts) paid out to the bank account. */
  currency: Scalars['String'];
  /** The ID of the customer that the bank account is associated with. */
  customer?: Maybe<Scalars['JSON']>;
  /** Whether this bank account is the default external account for its currency. */
  defaultForCurrency?: Maybe<Scalars['Boolean']>;
  /** Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
  fingerprint?: Maybe<Scalars['String']>;
  /** Unique identifier for the object. */
  id: Scalars['String'];
  /** The last four digits of the bank account number. */
  last4: Scalars['String'];
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Maybe<Scalars['JSON']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object35;
  /** The routing transit number for the bank account. */
  routingNumber?: Maybe<Scalars['String']>;
  /**
   * For bank accounts, possible values are `new`, `validated`, `verified`, `verification_failed`, or `errored`. A bank account that hasn't had any activity or validation performed is `new`. If Stripe can determine that the bank account exists, its status will be `validated`. Note that there often isn’t enough information to know (e.g., for smaller credit unions), and the validation is not always run. If customer bank account verification has succeeded, the bank account status will be `verified`. If the verification failed for any reason, such as microdeposit failure, the status will be `verification_failed`. If a transfer sent to this bank account fails, we'll set the status to `errored` and will not continue to send transfers until the bank details are updated.
   *
   * For external accounts, possible values are `new` and `errored`. Validations aren't run against external accounts because they're only used for payouts. This means the other statuses don't apply. If a transfer fails, the status is set to `errored` and transfers are stopped until account details are updated.
   */
  status: Scalars['String'];
};

export enum AvailablePayoutMethods2ListItem {
  INSTANT = 'instant',
  STANDARD = 'standard'
}

export enum Object35 {
  BANK_ACCOUNT = 'bank_account'
}

export type CardList = {
  data: Array<Maybe<Card2>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

export type ApmsSourcesSourceList = {
  /** Details about each object. */
  data: Array<Maybe<Data21ListItem>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

export type PaymentSource = {
  account?: Maybe<Scalars['JSON']>;
  /** The name of the person or business that owns the bank account. */
  accountHolderName?: Maybe<Scalars['String']>;
  /** The type of entity that holds the account. This can be either `individual` or `company`. */
  accountHolderType?: Maybe<Scalars['String']>;
  /** The bank account type. This can only be `checking` or `savings` in most countries. In Japan, this can only be `futsu` or `toza`. */
  accountType?: Maybe<Scalars['String']>;
  achCreditTransfer?: Maybe<AchCreditTransfer2>;
  achDebit?: Maybe<AchDebit2>;
  acssDebit?: Maybe<AcssDebit4>;
  /** True when this bitcoin receiver has received a non-zero amount of bitcoin. */
  active?: Maybe<Scalars['Boolean']>;
  /** City/District/Suburb/Town/Village. */
  addressCity?: Maybe<Scalars['String']>;
  /** Billing address country, if provided when creating card. */
  addressCountry?: Maybe<Scalars['String']>;
  /** Address line 1 (Street address/PO Box/Company name). */
  addressLine1?: Maybe<Scalars['String']>;
  /** If `address_line1` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. */
  addressLine1Check?: Maybe<Scalars['String']>;
  /** Address line 2 (Apartment/Suite/Unit/Building). */
  addressLine2?: Maybe<Scalars['String']>;
  /** State/County/Province/Region. */
  addressState?: Maybe<Scalars['String']>;
  /** ZIP or postal code. */
  addressZip?: Maybe<Scalars['String']>;
  /** If `address_zip` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. */
  addressZipCheck?: Maybe<Scalars['String']>;
  alipay?: Maybe<Alipay2>;
  amount?: Maybe<Scalars['JSON']>;
  /** The amount of `currency` to which `bitcoin_amount_received` has been converted. */
  amountReceived?: Maybe<Scalars['Int']>;
  auBecsDebit?: Maybe<AuBecsDebit2>;
  availablePayoutMethods?: Maybe<Scalars['JSON']>;
  bancontact?: Maybe<Bancontact2>;
  /** Name of the bank associated with the routing number (e.g., `WELLS FARGO`). */
  bankName?: Maybe<Scalars['String']>;
  /** The amount of bitcoin that the customer should send to fill the receiver. The `bitcoin_amount` is denominated in Satoshi: there are 10^8 Satoshi in one bitcoin. */
  bitcoinAmount?: Maybe<Scalars['Int']>;
  /** The amount of bitcoin that has been sent by the customer to this receiver. */
  bitcoinAmountReceived?: Maybe<Scalars['Int']>;
  /** This URI can be displayed to the customer as a clickable link (to activate their bitcoin client) or as a QR code (for mobile wallets). */
  bitcoinUri?: Maybe<Scalars['String']>;
  /** Card brand. Can be `American Express`, `Diners Club`, `Discover`, `JCB`, `MasterCard`, `UnionPay`, `Visa`, or `Unknown`. */
  brand?: Maybe<Scalars['String']>;
  /** Business information about the account. */
  businessProfile?: Maybe<BusinessProfile>;
  /** The business type. */
  businessType?: Maybe<BusinessType>;
  capabilities?: Maybe<Capabilities2>;
  card?: Maybe<Card6>;
  cardPresent?: Maybe<CardPresent2>;
  /** Whether the account can create live charges. */
  chargesEnabled?: Maybe<Scalars['Boolean']>;
  /** The client secret of the source. Used for client-side retrieval using a publishable key. */
  clientSecret?: Maybe<Scalars['String']>;
  codeVerification?: Maybe<CodeVerification>;
  company?: Maybe<Company2>;
  controller?: Maybe<Controller>;
  country?: Maybe<Scalars['JSON']>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: Maybe<Scalars['Int']>;
  currency?: Maybe<Scalars['JSON']>;
  customer?: Maybe<Scalars['JSON']>;
  /** If a CVC was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. A result of unchecked indicates that CVC was provided but hasn't been checked yet. Checks are typically performed when attaching a card to a Customer object, or when creating a charge. For more details, see [Check if a card is valid without a charge](https://support.stripe.com/questions/check-if-a-card-is-valid-without-a-charge). */
  cvcCheck?: Maybe<Scalars['String']>;
  /** Three-letter ISO currency code representing the default currency for the account. This must be a currency that [Stripe supports in the account's country](https://stripe.com/docs/payouts). */
  defaultCurrency?: Maybe<Scalars['String']>;
  defaultForCurrency?: Maybe<Scalars['JSON']>;
  /** An arbitrary string attached to the object. Often useful for displaying to users. */
  description?: Maybe<Scalars['String']>;
  /** Whether account details have been submitted. Standard accounts cannot receive payouts before this is true. */
  detailsSubmitted?: Maybe<Scalars['Boolean']>;
  /** (For tokenized numbers only.) The last four digits of the device account number. */
  dynamicLast4?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['JSON']>;
  eps?: Maybe<Eps2>;
  /** Two-digit number representing the card's expiration month. */
  expMonth?: Maybe<Scalars['Int']>;
  /** Four-digit number representing the card's expiration year. */
  expYear?: Maybe<Scalars['Int']>;
  /** External accounts (bank accounts and debit cards) currently attached to this account */
  externalAccounts?: Maybe<ExternalAccounts>;
  /** This flag is initially false and updates to true when the customer sends the `bitcoin_amount` to this receiver. */
  filled?: Maybe<Scalars['Boolean']>;
  fingerprint?: Maybe<Scalars['JSON']>;
  /** The authentication `flow` of the source. `flow` is one of `redirect`, `receiver`, `code_verification`, `none`. */
  flow?: Maybe<Scalars['String']>;
  /** Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`. */
  funding?: Maybe<Scalars['String']>;
  giropay?: Maybe<Giropay2>;
  /** Unique identifier for the object. */
  id?: Maybe<Scalars['String']>;
  ideal?: Maybe<Ideal2>;
  /** A bitcoin address that is specific to this receiver. The customer can send bitcoin to this address to fill the receiver. */
  inboundAddress?: Maybe<Scalars['String']>;
  /**
   * This is an object representing a person associated with a Stripe account.
   *
   * A platform cannot access a Standard or Express account's persons after the account starts onboarding, such as after generating an account link for the account.
   * See the [Standard onboarding](https://stripe.com/docs/connect/standard-accounts) or [Express onboarding documentation](https://stripe.com/docs/connect/express-accounts) for information about platform pre-filling and account onboarding steps.
   *
   * Related guide: [Handling Identity Verification with the API](https://stripe.com/docs/connect/identity-verification-api#person-information).
   */
  individual?: Maybe<Individual2>;
  klarna?: Maybe<Klarna2>;
  last4?: Maybe<Scalars['JSON']>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: Maybe<Scalars['Boolean']>;
  metadata?: Maybe<Scalars['JSON']>;
  multibanco?: Maybe<Multibanco2>;
  /** Cardholder name. */
  name?: Maybe<Scalars['String']>;
  object?: Maybe<Scalars['JSON']>;
  /** Information about the owner of the payment instrument that may be used or required by particular source types. */
  owner?: Maybe<Owner3>;
  p24?: Maybe<P242>;
  /** The ID of the payment created from the receiver, if any. Hidden when viewing the receiver with a publishable key. */
  payment?: Maybe<Scalars['String']>;
  /** If the Alipay account object is not reusable, the exact amount that you can create a charge for. */
  paymentAmount?: Maybe<Scalars['Int']>;
  /** If the Alipay account object is not reusable, the exact currency that you can create a charge for. */
  paymentCurrency?: Maybe<Scalars['String']>;
  /** Whether Stripe can send payouts to this account. */
  payoutsEnabled?: Maybe<Scalars['Boolean']>;
  receiver?: Maybe<Receiver2>;
  /** The recipient that this card belongs to. This attribute will not be in the card object if the card belongs to a customer or account instead. */
  recipient?: Maybe<Scalars['JSON']>;
  redirect?: Maybe<Redirect>;
  /** The refund address of this bitcoin receiver. */
  refundAddress?: Maybe<Scalars['String']>;
  requirements?: Maybe<Requirements2>;
  /** True if you can create multiple payments using this account. If the account is reusable, then you can freely choose the amount of each payment. */
  reusable?: Maybe<Scalars['Boolean']>;
  /** The routing transit number for the bank account. */
  routingNumber?: Maybe<Scalars['String']>;
  sepaDebit?: Maybe<SepaDebit2>;
  /** Options for customizing how the account functions within Stripe. */
  settings?: Maybe<Settings>;
  sofort?: Maybe<Sofort2>;
  sourceOrder?: Maybe<SourceOrder>;
  /** Extra information about a source. This will appear on your customer's statement every time you charge the source. */
  statementDescriptor?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['JSON']>;
  threeDSecure?: Maybe<ThreeDSecure4>;
  /** If the card number is tokenized, this is the method that was used. Can be `android_pay` (includes Google Pay), `apple_pay`, `masterpass`, `visa_checkout`, or null. */
  tokenizationMethod?: Maybe<Scalars['String']>;
  tosAcceptance?: Maybe<TosAcceptance2>;
  /** A list with one entry for each time that the customer sent bitcoin to the receiver. Hidden when viewing the receiver with a publishable key. */
  transactions?: Maybe<Transactions>;
  type?: Maybe<Scalars['JSON']>;
  /** This receiver contains uncaptured funds that can be used for a payment or refunded. */
  uncapturedFunds?: Maybe<Scalars['Boolean']>;
  /** Either `reusable` or `single_use`. Whether this source should be reusable or not. Some source types may or may not be reusable by construction, while others may leave the option at creation. If an incompatible value is passed, an error will be returned. */
  usage?: Maybe<Scalars['String']>;
  /** Whether this Alipay account object has ever been used for a payment. */
  used?: Maybe<Scalars['Boolean']>;
  /** Indicate if this source is used for payment. */
  usedForPayment?: Maybe<Scalars['Boolean']>;
  /** The username for the Alipay account. */
  username?: Maybe<Scalars['String']>;
  wechat?: Maybe<Wechat2>;
};

export type Capabilities2 = {
  /** The status of the ACSS Direct Debits payments capability of the account, or whether the account can directly process ACSS Direct Debits charges. */
  acssDebitPayments?: Maybe<AcssDebitPayments>;
  /** The status of the Afterpay Clearpay capability of the account, or whether the account can directly process Afterpay Clearpay charges. */
  afterpayClearpayPayments?: Maybe<AfterpayClearpayPayments>;
  /** The status of the BECS Direct Debit (AU) payments capability of the account, or whether the account can directly process BECS Direct Debit (AU) charges. */
  auBecsDebitPayments?: Maybe<AuBecsDebitPayments>;
  /** The status of the Bacs Direct Debits payments capability of the account, or whether the account can directly process Bacs Direct Debits charges. */
  bacsDebitPayments?: Maybe<BacsDebitPayments>;
  /** The status of the Bancontact payments capability of the account, or whether the account can directly process Bancontact charges. */
  bancontactPayments?: Maybe<BancontactPayments>;
  /** The status of the boleto payments capability of the account, or whether the account can directly process boleto charges. */
  boletoPayments?: Maybe<BoletoPayments>;
  /** The status of the card issuing capability of the account, or whether you can use Issuing to distribute funds on cards */
  cardIssuing?: Maybe<CardIssuing>;
  /** The status of the card payments capability of the account, or whether the account can directly process credit and debit card charges. */
  cardPayments?: Maybe<CardPayments>;
  /** The status of the Cartes Bancaires payments capability of the account, or whether the account can directly process Cartes Bancaires card charges in EUR currency. */
  cartesBancairesPayments?: Maybe<CartesBancairesPayments>;
  /** The status of the EPS payments capability of the account, or whether the account can directly process EPS charges. */
  epsPayments?: Maybe<EpsPayments>;
  /** The status of the FPX payments capability of the account, or whether the account can directly process FPX charges. */
  fpxPayments?: Maybe<FpxPayments>;
  /** The status of the giropay payments capability of the account, or whether the account can directly process giropay charges. */
  giropayPayments?: Maybe<GiropayPayments>;
  /** The status of the GrabPay payments capability of the account, or whether the account can directly process GrabPay charges. */
  grabpayPayments?: Maybe<GrabpayPayments>;
  /** The status of the iDEAL payments capability of the account, or whether the account can directly process iDEAL charges. */
  idealPayments?: Maybe<IdealPayments>;
  /** The status of the JCB payments capability of the account, or whether the account (Japan only) can directly process JCB credit card charges in JPY currency. */
  jcbPayments?: Maybe<JcbPayments>;
  /** The status of the legacy payments capability of the account. */
  legacyPayments?: Maybe<LegacyPayments>;
  /** The status of the OXXO payments capability of the account, or whether the account can directly process OXXO charges. */
  oxxoPayments?: Maybe<OxxoPayments>;
  /** The status of the P24 payments capability of the account, or whether the account can directly process P24 charges. */
  p24Payments?: Maybe<P24Payments>;
  /** The status of the SEPA Direct Debits payments capability of the account, or whether the account can directly process SEPA Direct Debits charges. */
  sepaDebitPayments?: Maybe<SepaDebitPayments>;
  /** The status of the Sofort payments capability of the account, or whether the account can directly process Sofort charges. */
  sofortPayments?: Maybe<SofortPayments>;
  /** The status of the tax reporting 1099-K (US) capability of the account. */
  taxReportingUs1099K?: Maybe<TaxReportingUs1099K>;
  /** The status of the tax reporting 1099-MISC (US) capability of the account. */
  taxReportingUs1099Misc?: Maybe<TaxReportingUs1099Misc>;
  /** The status of the transfers capability of the account, or whether your platform can transfer funds to the account. */
  transfers?: Maybe<Transfers>;
};

export type Company2 = {
  address?: Maybe<Address>;
  /** The Kana variation of the company's primary address (Japan only). */
  addressKana?: Maybe<AddressKana>;
  /** The Kanji variation of the company's primary address (Japan only). */
  addressKanji?: Maybe<AddressKanji>;
  /** Whether the company's directors have been provided. This Boolean will be `true` if you've manually indicated that all directors are provided via [the `directors_provided` parameter](https://stripe.com/docs/api/accounts/update#update_account-company-directors_provided). */
  directorsProvided?: Maybe<Scalars['Boolean']>;
  /** Whether the company's executives have been provided. This Boolean will be `true` if you've manually indicated that all executives are provided via [the `executives_provided` parameter](https://stripe.com/docs/api/accounts/update#update_account-company-executives_provided), or if Stripe determined that sufficient executives were provided. */
  executivesProvided?: Maybe<Scalars['Boolean']>;
  /** The company's legal name. */
  name?: Maybe<Scalars['String']>;
  /** The Kana variation of the company's legal name (Japan only). */
  nameKana?: Maybe<Scalars['String']>;
  /** The Kanji variation of the company's legal name (Japan only). */
  nameKanji?: Maybe<Scalars['String']>;
  /** Whether the company's owners have been provided. This Boolean will be `true` if you've manually indicated that all owners are provided via [the `owners_provided` parameter](https://stripe.com/docs/api/accounts/update#update_account-company-owners_provided), or if Stripe determined that sufficient owners were provided. Stripe determines ownership requirements using both the number of owners provided and their total percent ownership (calculated by adding the `percent_ownership` of each owner together). */
  ownersProvided?: Maybe<Scalars['Boolean']>;
  /** The company's phone number (used for verification). */
  phone?: Maybe<Scalars['String']>;
  /** The category identifying the legal structure of the company or legal entity. See [Business structure](https://stripe.com/docs/connect/identity-verification#business-structure) for more details. */
  structure?: Maybe<Structure>;
  /** Whether the company's business ID number was provided. */
  taxIdProvided?: Maybe<Scalars['Boolean']>;
  /** The jurisdiction in which the `tax_id` is registered (Germany-based companies only). */
  taxIdRegistrar?: Maybe<Scalars['String']>;
  /** Whether the company's business VAT number was provided. */
  vatIdProvided?: Maybe<Scalars['Boolean']>;
  /** Information on the verification state of the company. */
  verification?: Maybe<Verification>;
};

export type Controller = {
  /** `true` if the Connect application retrieving the resource controls the account and can therefore exercise [platform controls](https://stripe.com/docs/connect/platform-controls-for-standard-accounts). Otherwise, this field is null. */
  isController?: Maybe<Scalars['Boolean']>;
  /** The controller type. Can be `application`, if a Connect application controls the account, or `account`, if the account controls itself. */
  type?: Maybe<Type>;
};

/**
 * This is an object representing a person associated with a Stripe account.
 *
 * A platform cannot access a Standard or Express account's persons after the account starts onboarding, such as after generating an account link for the account.
 * See the [Standard onboarding](https://stripe.com/docs/connect/standard-accounts) or [Express onboarding documentation](https://stripe.com/docs/connect/express-accounts) for information about platform pre-filling and account onboarding steps.
 *
 * Related guide: [Handling Identity Verification with the API](https://stripe.com/docs/connect/identity-verification-api#person-information).
 */
export type Individual2 = {
  /** The account the person is associated with. */
  account: Scalars['String'];
  address?: Maybe<Address>;
  addressKana?: Maybe<AddressKana2>;
  addressKanji?: Maybe<AddressKanji2>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created: Scalars['Int'];
  dob?: Maybe<LegalEntityDob>;
  /** The person's email address. */
  email?: Maybe<Scalars['String']>;
  /** The person's first name. */
  firstName?: Maybe<Scalars['String']>;
  /** The Kana variation of the person's first name (Japan only). */
  firstNameKana?: Maybe<Scalars['String']>;
  /** The Kanji variation of the person's first name (Japan only). */
  firstNameKanji?: Maybe<Scalars['String']>;
  /** The person's gender (International regulations require either "male" or "female"). */
  gender?: Maybe<Scalars['String']>;
  /** Unique identifier for the object. */
  id: Scalars['String'];
  /** Whether the person's `id_number` was provided. */
  idNumberProvided?: Maybe<Scalars['Boolean']>;
  /** The person's last name. */
  lastName?: Maybe<Scalars['String']>;
  /** The Kana variation of the person's last name (Japan only). */
  lastNameKana?: Maybe<Scalars['String']>;
  /** The Kanji variation of the person's last name (Japan only). */
  lastNameKanji?: Maybe<Scalars['String']>;
  /** The person's maiden name. */
  maidenName?: Maybe<Scalars['String']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Maybe<Scalars['JSON']>;
  /** The country where the person is a national. */
  nationality?: Maybe<Scalars['String']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object5;
  /** The person's phone number. */
  phone?: Maybe<Scalars['String']>;
  /** Indicates if the person or any of their representatives, family members, or other closely related persons, declares that they hold or have held an important public job or function, in any jurisdiction. */
  politicalExposure?: Maybe<PoliticalExposure>;
  relationship?: Maybe<PersonRelationship>;
  requirements?: Maybe<Requirements>;
  /** Whether the last four digits of the person's Social Security number have been provided (U.S. only). */
  ssnLast4Provided?: Maybe<Scalars['Boolean']>;
  verification?: Maybe<LegalEntityPersonVerification>;
};

export type Requirements2 = {
  /** Date by which the fields in `currently_due` must be collected to keep the account enabled. These fields may disable the account sooner if the next threshold is reached before they are collected. */
  currentDeadline?: Maybe<Scalars['Int']>;
  /** Fields that need to be collected to keep the account enabled. If not collected by `current_deadline`, these fields appear in `past_due` as well, and the account is disabled. */
  currentlyDue?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** If the account is disabled, this string describes why. Can be `requirements.past_due`, `requirements.pending_verification`, `listed`, `platform_paused`, `rejected.fraud`, `rejected.listed`, `rejected.terms_of_service`, `rejected.other`, `under_review`, or `other`. */
  disabledReason?: Maybe<Scalars['String']>;
  /** Fields that are `currently_due` and need to be collected again because validation or verification failed. */
  errors?: Maybe<Array<Maybe<AccountRequirementsError>>>;
  /** Fields that need to be collected assuming all volume thresholds are reached. As they become required, they appear in `currently_due` as well, and `current_deadline` becomes set. */
  eventuallyDue?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Fields that weren't collected by `current_deadline`. These fields need to be collected to enable the account. */
  pastDue?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Fields that may become required depending on the results of verification or review. Will be an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due`, `currently_due`, or `past_due`. */
  pendingVerification?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type TosAcceptance2 = {
  /** The Unix timestamp marking when the account representative accepted their service agreement */
  date?: Maybe<Scalars['Int']>;
  /** The IP address from which the account representative accepted their service agreement */
  ip?: Maybe<Scalars['String']>;
  /** The user's service agreement type */
  serviceAgreement?: Maybe<Scalars['String']>;
  /** The user agent of the browser from which the account representative accepted their service agreement */
  userAgent?: Maybe<Scalars['String']>;
};

export type SubscriptionList = {
  /** Details about each object. */
  data: Array<Maybe<Subscription5>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

export type TaxIDsList2 = {
  /** Details about each object. */
  data: Array<Maybe<TaxId3>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

export type V1Disputes2 = {
  data: Array<Maybe<Dispute>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

export type NotificationEventList = {
  data: Array<Maybe<Event>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

/**
 * Events are our way of letting you know when something interesting happens in
 * your account. When an interesting event occurs, we create a new `Event`
 * object. For example, when a charge succeeds, we create a `charge.succeeded`
 * event; and when an invoice payment attempt fails, we create an
 * `invoice.payment_failed` event. Note that many API requests may cause multiple
 * events to be created. For example, if you create a new subscription for a
 * customer, you will receive both a `customer.subscription.created` event and a
 * `charge.succeeded` event.
 *
 * Events occur when the state of another API resource changes. The state of that
 * resource at the time of the change is embedded in the event's data field. For
 * example, a `charge.succeeded` event will contain a charge, and an
 * `invoice.payment_failed` event will contain an invoice.
 *
 * As with other API resources, you can use endpoints to retrieve an
 * [individual event](https://stripe.com/docs/api#retrieve_event) or a [list of events](https://stripe.com/docs/api#list_events)
 * from the API. We also have a separate
 * [webhooks](http://en.wikipedia.org/wiki/Webhook) system for sending the
 * `Event` objects directly to an endpoint on your server. Webhooks are managed
 * in your
 * [account settings](https://dashboard.stripe.com/account/webhooks),
 * and our [Using Webhooks](https://stripe.com/docs/webhooks) guide will help you get set up.
 *
 * When using [Connect](https://stripe.com/docs/connect), you can also receive notifications of
 * events that occur in connected accounts. For these events, there will be an
 * additional `account` attribute in the received `Event` object.
 *
 * **NOTE:** Right now, access to events through the [Retrieve Event API](https://stripe.com/docs/api#retrieve_event) is
 * guaranteed only for 30 days.
 */
export type Event = {
  /** The connected account that originated the event. */
  account?: Maybe<Scalars['String']>;
  /** The Stripe API version used to render `data`. *Note: This property is populated only for events on or after October 31, 2014*. */
  apiVersion?: Maybe<Scalars['String']>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created: Scalars['Int'];
  data: NotificationEventData;
  /** Unique identifier for the object. */
  id: Scalars['String'];
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object38;
  /** Number of webhooks that have yet to be successfully delivered (i.e., to return a 20x response) to the URLs you've specified. */
  pendingWebhooks: Scalars['Int'];
  /** Information on the API request that instigated the event. */
  request?: Maybe<Request>;
  /** Description of the event (e.g., `invoice.created` or `charge.refunded`). */
  type: Scalars['String'];
};

export type NotificationEventData = {
  /** Object containing the API resource relevant to the event. For example, an `invoice.created` event will have a full [invoice object](https://stripe.com/docs/api#invoice_object) as the value of the object key. */
  object: Scalars['JSON'];
  /** Object containing the names of the attributes that have changed, and their previous values (sent along only with *.updated events). */
  previousAttributes?: Maybe<Scalars['JSON']>;
};

export enum Object38 {
  EVENT = 'event'
}

/** Information on the API request that instigated the event. */
export type Request = {
  /** ID of the API request that caused the event. If null, the event was automatic (e.g., Stripe's automatic subscription handling). Request logs are available in the [dashboard](https://dashboard.stripe.com/logs), but currently not in the API. */
  id?: Maybe<Scalars['String']>;
  /** The idempotency key transmitted during the request, if any. *Note: This property is populated only for events on or after May 23, 2017*. */
  idempotencyKey?: Maybe<Scalars['String']>;
};

export type V1ExchangeRates2 = {
  data: Array<Maybe<ExchangeRate2>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

/**
 * `Exchange Rate` objects allow you to determine the rates that Stripe is
 * currently using to convert from one currency to another. Since this number is
 * variable throughout the day, there are various reasons why you might want to
 * know the current rate (for example, to dynamically price an item for a user
 * with a default payment in a foreign currency).
 *
 * If you want a guarantee that the charge is made with a certain exchange rate
 * you expect is current, you can pass in `exchange_rate` to charges endpoints.
 * If the value is no longer up to date, the charge won't go through. Please
 * refer to our [Exchange Rates API](https://stripe.com/docs/exchange-rates) guide for more
 * details.
 */
export type ExchangeRate2 = {
  /** Unique identifier for the object. Represented as the three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html) in lowercase. */
  id: Scalars['String'];
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object39;
  /** Hash where the keys are supported currencies and the values are the exchange rate at which the base id currency converts to the key currency. */
  rates: Scalars['JSON'];
};

export enum Object39 {
  EXCHANGE_RATE = 'exchange_rate'
}

export type V1FileLinks2 = {
  data: Array<Maybe<FileLink>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

/**
 * To share the contents of a `File` object with non-Stripe users, you can
 * create a `FileLink`. `FileLink`s contain a URL that can be used to
 * retrieve the contents of the file without authentication.
 */
export type FileLink = {
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created: Scalars['Int'];
  /** Whether this link is already expired. */
  expired: Scalars['Boolean'];
  /** Time at which the link expires. */
  expiresAt?: Maybe<Scalars['Int']>;
  /** The file object this link points to. */
  file: Scalars['JSON'];
  /** Unique identifier for the object. */
  id: Scalars['String'];
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: Scalars['Boolean'];
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata: Scalars['JSON'];
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object40;
  /** The publicly accessible URL to download the file. */
  url?: Maybe<Scalars['String']>;
};

export enum Object40 {
  FILE_LINK = 'file_link'
}

export type V1Files2 = {
  data: Array<Maybe<File3>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

/**
 * This is an object representing a file hosted on Stripe's servers. The
 * file may have been uploaded by yourself using the [create file](https://stripe.com/docs/api#create_file)
 * request (for example, when uploading dispute evidence) or it may have
 * been created by Stripe (for example, the results of a [Sigma scheduled
 * query](#scheduled_queries)).
 *
 * Related guide: [File Upload Guide](https://stripe.com/docs/file-upload).
 */
export type File3 = {
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created: Scalars['Int'];
  /** The time at which the file expires and is no longer available in epoch seconds. */
  expiresAt?: Maybe<Scalars['Int']>;
  /** A filename for the file, suitable for saving to a filesystem. */
  filename?: Maybe<Scalars['String']>;
  /** Unique identifier for the object. */
  id: Scalars['String'];
  /** A list of [file links](https://stripe.com/docs/api#file_links) that point at this file. */
  links?: Maybe<Links>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object41;
  /** The [purpose](https://stripe.com/docs/file-upload#uploading-a-file) of the uploaded file. */
  purpose: Purpose;
  /** The size in bytes of the file object. */
  size: Scalars['Int'];
  /** A user friendly title for the document. */
  title?: Maybe<Scalars['String']>;
  /** The type of the file returned (e.g., `csv`, `pdf`, `jpg`, or `png`). */
  type?: Maybe<Scalars['String']>;
  /** The URL from which the file can be downloaded using your live secret API key. */
  url?: Maybe<Scalars['String']>;
};

/** A list of [file links](https://stripe.com/docs/api#file_links) that point at this file. */
export type Links = {
  /** Details about each object. */
  data: Array<Maybe<FileLink>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

export enum Object41 {
  FILE = 'file'
}

export enum Purpose {
  ACCOUNT_REQUIREMENT = 'account_requirement',
  ADDITIONAL_VERIFICATION = 'additional_verification',
  BUSINESS_ICON = 'business_icon',
  BUSINESS_LOGO = 'business_logo',
  CUSTOMER_SIGNATURE = 'customer_signature',
  DISPUTE_EVIDENCE = 'dispute_evidence',
  DOCUMENT_PROVIDER_IDENTITY_DOCUMENT = 'document_provider_identity_document',
  FINANCE_REPORT_RUN = 'finance_report_run',
  IDENTITY_DOCUMENT = 'identity_document',
  IDENTITY_DOCUMENT_DOWNLOADABLE = 'identity_document_downloadable',
  PCI_DOCUMENT = 'pci_document',
  SELFIE = 'selfie',
  SIGMA_SCHEDULED_QUERY = 'sigma_scheduled_query',
  TAX_DOCUMENT_USER_UPLOAD = 'tax_document_user_upload'
}

export enum Purpose2 {
  ACCOUNT_REQUIREMENT = 'account_requirement',
  ADDITIONAL_VERIFICATION = 'additional_verification',
  BUSINESS_ICON = 'business_icon',
  BUSINESS_LOGO = 'business_logo',
  CUSTOMER_SIGNATURE = 'customer_signature',
  DISPUTE_EVIDENCE = 'dispute_evidence',
  DOCUMENT_PROVIDER_IDENTITY_DOCUMENT = 'document_provider_identity_document',
  FINANCE_REPORT_RUN = 'finance_report_run',
  IDENTITY_DOCUMENT = 'identity_document',
  IDENTITY_DOCUMENT_DOWNLOADABLE = 'identity_document_downloadable',
  PCI_DOCUMENT = 'pci_document',
  SELFIE = 'selfie',
  SIGMA_SCHEDULED_QUERY = 'sigma_scheduled_query',
  TAX_DOCUMENT_USER_UPLOAD = 'tax_document_user_upload'
}

export type V1IdentityVerificationReports2 = {
  data: Array<Maybe<IdentityVerificationReport>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

/**
 * A VerificationReport is the result of an attempt to collect and verify data from a user.
 * The collection of verification checks performed is determined from the `type` and `options`
 * parameters used. You can find the result of each verification check performed in the
 * appropriate sub-resource: `document`, `id_number`, `selfie`.
 *
 * Each VerificationReport contains a copy of any data collected by the user as well as
 * reference IDs which can be used to access collected images through the [FileUpload](https://stripe.com/docs/api/files)
 * API. To configure and create VerificationReports, use the
 * [VerificationSession](https://stripe.com/docs/api/identity/verification_sessions) API.
 *
 * Related guides: [Accessing verification results](https://stripe.com/docs/identity/verification-sessions#results).
 */
export type IdentityVerificationReport = {
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created: Scalars['Int'];
  /** Result from a document check */
  document?: Maybe<GelatoDocumentReport>;
  /** Unique identifier for the object. */
  id: Scalars['String'];
  /** Result from an id_number check */
  idNumber?: Maybe<GelatoIdNumberReport>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object42;
  options: GelatoVerificationReportOptions;
  /** Result from a selfie check */
  selfie?: Maybe<GelatoSelfieReport>;
  /** Type of report. */
  type: Type26;
  /** ID of the VerificationSession that created this report. */
  verificationSession?: Maybe<Scalars['String']>;
};

/** Result from a document check */
export type GelatoDocumentReport = {
  /** Address as it appears in the document. */
  address?: Maybe<Address12>;
  /** Date of birth as it appears in the document. */
  dob?: Maybe<Dob8>;
  /** Details on the verification error. Present when status is `unverified`. */
  error?: Maybe<Error>;
  /** Expiration date of the document. */
  expirationDate?: Maybe<ExpirationDate>;
  /** Array of [File](https://stripe.com/docs/api/files) ids containing images for this document. */
  files?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** First name as it appears in the document. */
  firstName?: Maybe<Scalars['String']>;
  /** Issued date of the document. */
  issuedDate?: Maybe<IssuedDate>;
  /** Issuing country of the document. */
  issuingCountry?: Maybe<Scalars['String']>;
  /** Last name as it appears in the document. */
  lastName?: Maybe<Scalars['String']>;
  /** Document ID number. */
  number?: Maybe<Scalars['String']>;
  /** Status of this `document` check. */
  status: Status17;
  /** Type of the document. */
  type?: Maybe<Type25>;
};

/** Address as it appears in the document. */
export type Address12 = {
  /** City, district, suburb, town, or village. */
  city?: Maybe<Scalars['String']>;
  /** Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)). */
  country?: Maybe<Scalars['String']>;
  /** Address line 1 (e.g., street, PO Box, or company name). */
  line1?: Maybe<Scalars['String']>;
  /** Address line 2 (e.g., apartment, suite, unit, or building). */
  line2?: Maybe<Scalars['String']>;
  /** ZIP or postal code. */
  postalCode?: Maybe<Scalars['String']>;
  /** State, county, province, or region. */
  state?: Maybe<Scalars['String']>;
};

/** Date of birth as it appears in the document. */
export type Dob8 = {
  /** Numerical day between 1 and 31. */
  day?: Maybe<Scalars['Int']>;
  /** Numerical month between 1 and 12. */
  month?: Maybe<Scalars['Int']>;
  /** The four-digit year. */
  year?: Maybe<Scalars['Int']>;
};

/** Details on the verification error. Present when status is `unverified`. */
export type Error = {
  /** A short machine-readable string giving the reason for the verification failure. */
  code?: Maybe<Code2>;
  /** A human-readable message giving the reason for the failure. These messages can be shown to your users. */
  reason?: Maybe<Scalars['String']>;
};

export enum Code2 {
  DOCUMENT_EXPIRED = 'document_expired',
  DOCUMENT_TYPE_NOT_SUPPORTED = 'document_type_not_supported',
  DOCUMENT_UNVERIFIED_OTHER = 'document_unverified_other'
}

/** Expiration date of the document. */
export type ExpirationDate = {
  /** Numerical day between 1 and 31. */
  day?: Maybe<Scalars['Int']>;
  /** Numerical month between 1 and 12. */
  month?: Maybe<Scalars['Int']>;
  /** The four-digit year. */
  year?: Maybe<Scalars['Int']>;
};

/** Issued date of the document. */
export type IssuedDate = {
  /** Numerical day between 1 and 31. */
  day?: Maybe<Scalars['Int']>;
  /** Numerical month between 1 and 12. */
  month?: Maybe<Scalars['Int']>;
  /** The four-digit year. */
  year?: Maybe<Scalars['Int']>;
};

export enum Status17 {
  UNVERIFIED = 'unverified',
  VERIFIED = 'verified'
}

export enum Type25 {
  DRIVING_LICENSE = 'driving_license',
  ID_CARD = 'id_card',
  PASSPORT = 'passport'
}

/** Result from an id_number check */
export type GelatoIdNumberReport = {
  /** Date of birth. */
  dob?: Maybe<Dob9>;
  /** Details on the verification error. Present when status is `unverified`. */
  error?: Maybe<Error2>;
  /** First name. */
  firstName?: Maybe<Scalars['String']>;
  /** ID number. */
  idNumber?: Maybe<Scalars['String']>;
  /** Type of ID number. */
  idNumberType?: Maybe<IdNumberType>;
  /** Last name. */
  lastName?: Maybe<Scalars['String']>;
  /** Status of this `id_number` check. */
  status: Status18;
};

/** Date of birth. */
export type Dob9 = {
  /** Numerical day between 1 and 31. */
  day?: Maybe<Scalars['Int']>;
  /** Numerical month between 1 and 12. */
  month?: Maybe<Scalars['Int']>;
  /** The four-digit year. */
  year?: Maybe<Scalars['Int']>;
};

/** Details on the verification error. Present when status is `unverified`. */
export type Error2 = {
  /** A short machine-readable string giving the reason for the verification failure. */
  code?: Maybe<Code3>;
  /** A human-readable message giving the reason for the failure. These messages can be shown to your users. */
  reason?: Maybe<Scalars['String']>;
};

export enum Code3 {
  ID_NUMBER_INSUFFICIENT_DOCUMENT_DATA = 'id_number_insufficient_document_data',
  ID_NUMBER_MISMATCH = 'id_number_mismatch',
  ID_NUMBER_UNVERIFIED_OTHER = 'id_number_unverified_other'
}

export enum IdNumberType {
  BR_CPF = 'br_cpf',
  SG_NRIC = 'sg_nric',
  US_SSN = 'us_ssn'
}

export enum Status18 {
  UNVERIFIED = 'unverified',
  VERIFIED = 'verified'
}

export enum Object42 {
  IDENTITY_VERIFICATION_REPORT = 'identity.verification_report'
}

export type GelatoVerificationReportOptions = {
  document?: Maybe<GelatoReportDocumentOptions>;
  idNumber?: Maybe<Scalars['JSON']>;
};

export type GelatoReportDocumentOptions = {
  /** Array of strings of allowed identity document types. If the provided identity document isn’t one of the allowed types, the verification check will fail with a document_type_not_allowed error code. */
  allowedTypes?: Maybe<Array<Maybe<AllowedTypesListItem>>>;
  /** Collect an ID number and perform an [ID number check](https://stripe.com/docs/identity/verification-checks?type=id-number) with the document’s extracted name and date of birth. */
  requireIdNumber?: Maybe<Scalars['Boolean']>;
  /** Disable image uploads, identity document images have to be captured using the device’s camera. */
  requireLiveCapture?: Maybe<Scalars['Boolean']>;
  /** Capture a face image and perform a [selfie check](https://stripe.com/docs/identity/verification-checks?type=selfie) comparing a photo ID and a picture of your user’s face. [Learn more](https://stripe.com/docs/identity/selfie). */
  requireMatchingSelfie?: Maybe<Scalars['Boolean']>;
};

export enum AllowedTypesListItem {
  DRIVING_LICENSE = 'driving_license',
  ID_CARD = 'id_card',
  PASSPORT = 'passport'
}

/** Result from a selfie check */
export type GelatoSelfieReport = {
  /** ID of the [File](https://stripe.com/docs/api/files) holding the image of the identity document used in this check. */
  document?: Maybe<Scalars['String']>;
  /** Details on the verification error. Present when status is `unverified`. */
  error?: Maybe<Error3>;
  /** ID of the [File](https://stripe.com/docs/api/files) holding the image of the selfie used in this check. */
  selfie?: Maybe<Scalars['String']>;
  /** Status of this `selfie` check. */
  status: Status19;
};

/** Details on the verification error. Present when status is `unverified`. */
export type Error3 = {
  /** A short machine-readable string giving the reason for the verification failure. */
  code?: Maybe<Code4>;
  /** A human-readable message giving the reason for the failure. These messages can be shown to your users. */
  reason?: Maybe<Scalars['String']>;
};

export enum Code4 {
  SELFIE_DOCUMENT_MISSING_PHOTO = 'selfie_document_missing_photo',
  SELFIE_FACE_MISMATCH = 'selfie_face_mismatch',
  SELFIE_MANIPULATED = 'selfie_manipulated',
  SELFIE_UNVERIFIED_OTHER = 'selfie_unverified_other'
}

export enum Status19 {
  UNVERIFIED = 'unverified',
  VERIFIED = 'verified'
}

export enum Type26 {
  DOCUMENT = 'document',
  ID_NUMBER = 'id_number'
}

export enum Type68 {
  DOCUMENT = 'document',
  ID_NUMBER = 'id_number'
}

export type V1IdentityVerificationSessions2 = {
  data: Array<Maybe<IdentityVerificationSession>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

/**
 * A VerificationSession guides you through the process of collecting and verifying the identities
 * of your users. It contains details about the type of verification, such as what [verification
 * check](/docs/identity/verification-checks) to perform. Only create one VerificationSession for
 * each verification in your system.
 *
 * A VerificationSession transitions through [multiple
 * statuses](/docs/identity/how-sessions-work) throughout its lifetime as it progresses through
 * the verification flow. The VerificationSession contains the user’s verified data after
 * verification checks are complete.
 *
 * Related guide: [The Verification Sessions API](https://stripe.com/docs/identity/verification-sessions)
 */
export type IdentityVerificationSession = {
  /** The short-lived client secret used by Stripe.js to [show a verification modal](https://stripe.com/docs/js/identity/modal) inside your app. This client secret expires after 24 hours and can only be used once. Don’t store it, log it, embed it in a URL, or expose it to anyone other than the user. Make sure that you have TLS enabled on any page that includes the client secret. Refer to our docs on [passing the client secret to the frontend](https://stripe.com/docs/identity/verification-sessions#client-secret) to learn more. */
  clientSecret?: Maybe<Scalars['String']>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created: Scalars['Int'];
  /** Unique identifier for the object. */
  id: Scalars['String'];
  /** If present, this property tells you the last error encountered when processing the verification. */
  lastError?: Maybe<LastError>;
  /** ID of the most recent VerificationReport. [Learn more about accessing detailed verification results.](https://stripe.com/docs/identity/verification-sessions#results) */
  lastVerificationReport?: Maybe<Scalars['JSON']>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: Scalars['Boolean'];
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata: Scalars['JSON'];
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object43;
  options: GelatoVerificationSessionOptions;
  /** Redaction status of this VerificationSession. If the VerificationSession is not redacted, this field will be null. */
  redaction?: Maybe<Redaction>;
  /** Status of this VerificationSession. [Learn more about the lifecycle of sessions](https://stripe.com/docs/identity/how-sessions-work). */
  status: Status21;
  /** The type of [verification check](https://stripe.com/docs/identity/verification-checks) to be performed. */
  type: Type27;
  /** The short-lived URL that you use to redirect a user to Stripe to submit their identity information. This URL expires after 24 hours and can only be used once. Don’t store it, log it, send it in emails or expose it to anyone other than the user. Refer to our docs on [verifying identity documents](https://stripe.com/docs/identity/verify-identity-documents?platform=web&type=redirect) to learn how to redirect users to Stripe. */
  url?: Maybe<Scalars['String']>;
  /** The user’s verified data. */
  verifiedOutputs?: Maybe<VerifiedOutputs>;
};

/** If present, this property tells you the last error encountered when processing the verification. */
export type LastError = {
  /** A short machine-readable string giving the reason for the verification or user-session failure. */
  code?: Maybe<Code5>;
  /** A message that explains the reason for verification or user-session failure. */
  reason?: Maybe<Scalars['String']>;
};

export enum Code5 {
  ABANDONED = 'abandoned',
  CONSENT_DECLINED = 'consent_declined',
  COUNTRY_NOT_SUPPORTED = 'country_not_supported',
  DEVICE_NOT_SUPPORTED = 'device_not_supported',
  DOCUMENT_EXPIRED = 'document_expired',
  DOCUMENT_TYPE_NOT_SUPPORTED = 'document_type_not_supported',
  DOCUMENT_UNVERIFIED_OTHER = 'document_unverified_other',
  ID_NUMBER_INSUFFICIENT_DOCUMENT_DATA = 'id_number_insufficient_document_data',
  ID_NUMBER_MISMATCH = 'id_number_mismatch',
  ID_NUMBER_UNVERIFIED_OTHER = 'id_number_unverified_other',
  SELFIE_DOCUMENT_MISSING_PHOTO = 'selfie_document_missing_photo',
  SELFIE_FACE_MISMATCH = 'selfie_face_mismatch',
  SELFIE_MANIPULATED = 'selfie_manipulated',
  SELFIE_UNVERIFIED_OTHER = 'selfie_unverified_other',
  UNDER_SUPPORTED_AGE = 'under_supported_age'
}

export enum Object43 {
  IDENTITY_VERIFICATION_SESSION = 'identity.verification_session'
}

export type GelatoVerificationSessionOptions = {
  document?: Maybe<GelatoSessionDocumentOptions>;
  idNumber?: Maybe<Scalars['JSON']>;
};

export type GelatoSessionDocumentOptions = {
  /** Array of strings of allowed identity document types. If the provided identity document isn’t one of the allowed types, the verification check will fail with a document_type_not_allowed error code. */
  allowedTypes?: Maybe<Array<Maybe<AllowedTypesListItem>>>;
  /** Collect an ID number and perform an [ID number check](https://stripe.com/docs/identity/verification-checks?type=id-number) with the document’s extracted name and date of birth. */
  requireIdNumber?: Maybe<Scalars['Boolean']>;
  /** Disable image uploads, identity document images have to be captured using the device’s camera. */
  requireLiveCapture?: Maybe<Scalars['Boolean']>;
  /** Capture a face image and perform a [selfie check](https://stripe.com/docs/identity/verification-checks?type=selfie) comparing a photo ID and a picture of your user’s face. [Learn more](https://stripe.com/docs/identity/selfie). */
  requireMatchingSelfie?: Maybe<Scalars['Boolean']>;
};

/** Redaction status of this VerificationSession. If the VerificationSession is not redacted, this field will be null. */
export type Redaction = {
  /** Indicates whether this object and its related objects have been redacted or not. */
  status?: Maybe<Status20>;
};

export enum Status20 {
  PROCESSING = 'processing',
  REDACTED = 'redacted'
}

export enum Status21 {
  CANCELED = 'canceled',
  PROCESSING = 'processing',
  REQUIRES_INPUT = 'requires_input',
  VERIFIED = 'verified'
}

export enum Type27 {
  DOCUMENT = 'document',
  ID_NUMBER = 'id_number'
}

/** The user’s verified data. */
export type VerifiedOutputs = {
  /** The user's verified address. */
  address?: Maybe<Address13>;
  /** The user’s verified date of birth. */
  dob?: Maybe<Dob10>;
  /** The user's verified first name. */
  firstName?: Maybe<Scalars['String']>;
  /** The user's verified id number. */
  idNumber?: Maybe<Scalars['String']>;
  /** The user's verified id number type. */
  idNumberType?: Maybe<IdNumberType2>;
  /** The user's verified last name. */
  lastName?: Maybe<Scalars['String']>;
};

/** The user's verified address. */
export type Address13 = {
  /** City, district, suburb, town, or village. */
  city?: Maybe<Scalars['String']>;
  /** Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)). */
  country?: Maybe<Scalars['String']>;
  /** Address line 1 (e.g., street, PO Box, or company name). */
  line1?: Maybe<Scalars['String']>;
  /** Address line 2 (e.g., apartment, suite, unit, or building). */
  line2?: Maybe<Scalars['String']>;
  /** ZIP or postal code. */
  postalCode?: Maybe<Scalars['String']>;
  /** State, county, province, or region. */
  state?: Maybe<Scalars['String']>;
};

/** The user’s verified date of birth. */
export type Dob10 = {
  /** Numerical day between 1 and 31. */
  day?: Maybe<Scalars['Int']>;
  /** Numerical month between 1 and 12. */
  month?: Maybe<Scalars['Int']>;
  /** The four-digit year. */
  year?: Maybe<Scalars['Int']>;
};

export enum IdNumberType2 {
  BR_CPF = 'br_cpf',
  SG_NRIC = 'sg_nric',
  US_SSN = 'us_ssn'
}

export enum Status55 {
  CANCELED = 'canceled',
  PROCESSING = 'processing',
  REQUIRES_INPUT = 'requires_input',
  VERIFIED = 'verified'
}

export type V1Invoiceitems2 = {
  data: Array<Maybe<Invoiceitem>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

/**
 * Sometimes you want to add a charge or credit to a customer, but actually
 * charge or credit the customer's card only at the end of a regular billing
 * cycle. This is useful for combining several charges (to minimize
 * per-transaction fees), or for having Stripe tabulate your usage-based billing
 * totals.
 *
 * Related guide: [Subscription Invoices](https://stripe.com/docs/billing/invoices/subscription#adding-upcoming-invoice-items).
 */
export type Invoiceitem = {
  /** Amount (in the `currency` specified) of the invoice item. This should always be equal to `unit_amount * quantity`. */
  amount: Scalars['Int'];
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency: Scalars['String'];
  /** The ID of the customer who will be billed when this invoice item is billed. */
  customer: Scalars['JSON'];
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  date: Scalars['Int'];
  /** An arbitrary string attached to the object. Often useful for displaying to users. */
  description?: Maybe<Scalars['String']>;
  /** If true, discounts will apply to this invoice item. Always false for prorations. */
  discountable: Scalars['Boolean'];
  /** The discounts which apply to the invoice item. Item discounts are applied before invoice discounts. Use `expand[]=discounts` to expand each discount. */
  discounts?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  /** Unique identifier for the object. */
  id: Scalars['String'];
  /** The ID of the invoice this invoice item belongs to. */
  invoice?: Maybe<Scalars['JSON']>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: Scalars['Boolean'];
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Maybe<Scalars['JSON']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object44;
  period: InvoiceLineItemPeriod;
  /** The price of the invoice item. */
  price?: Maybe<Price7>;
  /** Whether the invoice item was created automatically as a proration adjustment when the customer switched plans. */
  proration: Scalars['Boolean'];
  /** Quantity of units for the invoice item. If the invoice item is a proration, the quantity of the subscription that the proration was computed for. */
  quantity: Scalars['Int'];
  /** The subscription that this invoice item has been created for, if any. */
  subscription?: Maybe<Scalars['JSON']>;
  /** The subscription item that this invoice item has been created for, if any. */
  subscriptionItem?: Maybe<Scalars['String']>;
  /** The tax rates which apply to the invoice item. When set, the `default_tax_rates` on the invoice do not apply to this invoice item. */
  taxRates?: Maybe<Array<Maybe<TaxRate>>>;
  /** Unit amount (in the `currency` specified) of the invoice item. */
  unitAmount?: Maybe<Scalars['Int']>;
  /** Same as `unit_amount`, but contains a decimal value with at most 12 decimal places. */
  unitAmountDecimal?: Maybe<Scalars['String']>;
};

export enum Object44 {
  INVOICEITEM = 'invoiceitem'
}

export type InvoiceLineItemPeriod = {
  /** End of the line item's billing period */
  end: Scalars['Int'];
  /** Start of the line item's billing period */
  start: Scalars['Int'];
};

/** The price of the invoice item. */
export type Price7 = {
  /** Whether the price can be used for new purchases. */
  active?: Maybe<Scalars['Boolean']>;
  /** Describes how to compute the price per period. Either `per_unit` or `tiered`. `per_unit` indicates that the fixed amount (specified in `unit_amount` or `unit_amount_decimal`) will be charged per unit in `quantity` (for prices with `usage_type=licensed`), or per unit of total usage (for prices with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as defined using the `tiers` and `tiers_mode` attributes. */
  billingScheme?: Maybe<BillingScheme>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: Maybe<Scalars['Int']>;
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency?: Maybe<Scalars['String']>;
  /** Unique identifier for the object. */
  id?: Maybe<Scalars['String']>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: Maybe<Scalars['Boolean']>;
  /** A lookup key used to retrieve prices dynamically from a static string. */
  lookupKey?: Maybe<Scalars['String']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Maybe<Scalars['JSON']>;
  /** A brief description of the price, hidden from customers. */
  nickname?: Maybe<Scalars['String']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: Maybe<Object24>;
  /** The ID of the product this price is associated with. */
  product?: Maybe<Scalars['JSON']>;
  /** The recurring components of a price such as `interval` and `usage_type`. */
  recurring?: Maybe<Recurring>;
  /** Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`. Once specified as either `inclusive` or `exclusive`, it cannot be changed. */
  taxBehavior?: Maybe<TaxBehavior>;
  /** Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`. */
  tiers?: Maybe<Array<Maybe<PriceTier>>>;
  /** Defines if the tiering price should be `graduated` or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per unit price. In `graduated` tiering, pricing can change as the quantity grows. */
  tiersMode?: Maybe<TiersMode>;
  /** Apply a transformation to the reported usage or set quantity before computing the amount billed. Cannot be combined with `tiers`. */
  transformQuantity?: Maybe<TransformQuantity>;
  /** One of `one_time` or `recurring` depending on whether the price is for a one-time purchase or a recurring (subscription) purchase. */
  type?: Maybe<Type12>;
  /** The unit amount in %s to be charged, represented as a whole integer if possible. Only set if `billing_scheme=per_unit`. */
  unitAmount?: Maybe<Scalars['Int']>;
  /** The unit amount in %s to be charged, represented as a decimal string with at most 12 decimal places. Only set if `billing_scheme=per_unit`. */
  unitAmountDecimal?: Maybe<Scalars['String']>;
};

export type InvoicesList = {
  data: Array<Maybe<Invoice11>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

/**
 * Invoices are statements of amounts owed by a customer, and are either
 * generated one-off, or generated periodically from a subscription.
 *
 * They contain [invoice items](https://stripe.com/docs/api#invoiceitems), and proration adjustments
 * that may be caused by subscription upgrades/downgrades (if necessary).
 *
 * If your invoice is configured to be billed through automatic charges,
 * Stripe automatically finalizes your invoice and attempts payment. Note
 * that finalizing the invoice,
 * [when automatic](https://stripe.com/docs/billing/invoices/workflow/#auto_advance), does
 * not happen immediately as the invoice is created. Stripe waits
 * until one hour after the last webhook was successfully sent (or the last
 * webhook timed out after failing). If you (and the platforms you may have
 * connected to) have no webhooks configured, Stripe waits one hour after
 * creation to finalize the invoice.
 *
 * If your invoice is configured to be billed by sending an email, then based on your
 * [email settings](https://dashboard.stripe.com/account/billing/automatic'),
 * Stripe will email the invoice to your customer and await payment. These
 * emails can contain a link to a hosted page to pay the invoice.
 *
 * Stripe applies any customer credit on the account before determining the
 * amount due for the invoice (i.e., the amount that will be actually
 * charged). If the amount due for the invoice is less than Stripe's [minimum allowed charge
 * per currency](/docs/currencies#minimum-and-maximum-charge-amounts), the
 * invoice is automatically marked paid, and we add the amount due to the
 * customer's credit balance which is applied to the next invoice.
 *
 * More details on the customer's credit balance are
 * [here](https://stripe.com/docs/billing/customer/balance).
 *
 * Related guide: [Send Invoices to Customers](https://stripe.com/docs/billing/invoices/sending).
 */
export type Invoice11 = {
  /** The country of the business associated with this invoice, most often the business creating the invoice. */
  accountCountry?: Maybe<Scalars['String']>;
  /** The public name of the business associated with this invoice, most often the business creating the invoice. */
  accountName?: Maybe<Scalars['String']>;
  /** The account tax IDs associated with the invoice. Only editable when the invoice is a draft. */
  accountTaxIds?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  /** Final amount due at this time for this invoice. If the invoice's total is smaller than the minimum charge amount, for example, or if there is account credit that can be applied to the invoice, the `amount_due` may be 0. If there is a positive `starting_balance` for the invoice (the customer owes money), the `amount_due` will also take that into account. The charge that gets generated for the invoice will be for the amount specified in `amount_due`. */
  amountDue: Scalars['Int'];
  /** The amount, in %s, that was paid. */
  amountPaid: Scalars['Int'];
  /** The amount remaining, in %s, that is due. */
  amountRemaining: Scalars['Int'];
  /** The fee in %s that will be applied to the invoice and transferred to the application owner's Stripe account when the invoice is paid. */
  applicationFeeAmount?: Maybe<Scalars['Int']>;
  /** Number of payment attempts made for this invoice, from the perspective of the payment retry schedule. Any payment attempt counts as the first attempt, and subsequently only automatic retries increment the attempt count. In other words, manual payment attempts after the first attempt do not affect the retry schedule. */
  attemptCount: Scalars['Int'];
  /** Whether an attempt has been made to pay the invoice. An invoice is not attempted until 1 hour after the `invoice.created` webhook, for example, so you might not want to display that invoice as unpaid to your users. */
  attempted: Scalars['Boolean'];
  /** Controls whether Stripe will perform [automatic collection](https://stripe.com/docs/billing/invoices/workflow/#auto_advance) of the invoice. When `false`, the invoice's state will not automatically advance without an explicit action. */
  autoAdvance?: Maybe<Scalars['Boolean']>;
  automaticTax: AutomaticTax3;
  /** Indicates the reason why the invoice was created. `subscription_cycle` indicates an invoice created by a subscription advancing into a new period. `subscription_create` indicates an invoice created due to creating a subscription. `subscription_update` indicates an invoice created due to updating a subscription. `subscription` is set for all old invoices to indicate either a change to a subscription or a period advancement. `manual` is set for all invoices unrelated to a subscription (for example: created via the invoice editor). The `upcoming` value is reserved for simulated invoices per the upcoming invoice endpoint. `subscription_threshold` indicates an invoice created due to a billing threshold being reached. */
  billingReason?: Maybe<BillingReason>;
  /** ID of the latest charge generated for this invoice, if any. */
  charge?: Maybe<Scalars['JSON']>;
  /** Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this invoice using the default source attached to the customer. When sending an invoice, Stripe will email this invoice to the customer with payment instructions. */
  collectionMethod?: Maybe<CollectionMethod3>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created: Scalars['Int'];
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency: Scalars['String'];
  /** Custom fields displayed on the invoice. */
  customFields?: Maybe<Array<Maybe<InvoiceSettingCustomField>>>;
  /** The ID of the customer who will be billed. */
  customer?: Maybe<Scalars['JSON']>;
  /** The customer's address. Until the invoice is finalized, this field will equal `customer.address`. Once the invoice is finalized, this field will no longer be updated. */
  customerAddress?: Maybe<CustomerAddress>;
  /** The customer's email. Until the invoice is finalized, this field will equal `customer.email`. Once the invoice is finalized, this field will no longer be updated. */
  customerEmail?: Maybe<Scalars['String']>;
  /** The customer's name. Until the invoice is finalized, this field will equal `customer.name`. Once the invoice is finalized, this field will no longer be updated. */
  customerName?: Maybe<Scalars['String']>;
  /** The customer's phone number. Until the invoice is finalized, this field will equal `customer.phone`. Once the invoice is finalized, this field will no longer be updated. */
  customerPhone?: Maybe<Scalars['String']>;
  /** The customer's shipping information. Until the invoice is finalized, this field will equal `customer.shipping`. Once the invoice is finalized, this field will no longer be updated. */
  customerShipping?: Maybe<CustomerShipping>;
  /** The customer's tax exempt status. Until the invoice is finalized, this field will equal `customer.tax_exempt`. Once the invoice is finalized, this field will no longer be updated. */
  customerTaxExempt?: Maybe<CustomerTaxExempt>;
  /** The customer's tax IDs. Until the invoice is finalized, this field will contain the same tax IDs as `customer.tax_ids`. Once the invoice is finalized, this field will no longer be updated. */
  customerTaxIds?: Maybe<Array<Maybe<InvoicesResourceInvoiceTaxId>>>;
  /** ID of the default payment method for the invoice. It must belong to the customer associated with the invoice. If not set, defaults to the subscription's default payment method, if any, or to the default payment method in the customer's invoice settings. */
  defaultPaymentMethod?: Maybe<Scalars['JSON']>;
  /** ID of the default payment source for the invoice. It must belong to the customer associated with the invoice and be in a chargeable state. If not set, defaults to the subscription's default source, if any, or to the customer's default source. */
  defaultSource?: Maybe<Scalars['JSON']>;
  /** The tax rates applied to this invoice, if any. */
  defaultTaxRates: Array<Maybe<TaxRate>>;
  /** An arbitrary string attached to the object. Often useful for displaying to users. Referenced as 'memo' in the Dashboard. */
  description?: Maybe<Scalars['String']>;
  /** Describes the current discount applied to this invoice, if there is one. Not populated if there are multiple discounts. */
  discount?: Maybe<Discount5>;
  /** The discounts applied to the invoice. Line item discounts are applied before invoice discounts. Use `expand[]=discounts` to expand each discount. */
  discounts?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  /** The date on which payment for this invoice is due. This value will be `null` for invoices where `collection_method=charge_automatically`. */
  dueDate?: Maybe<Scalars['Int']>;
  /** Ending customer balance after the invoice is finalized. Invoices are finalized approximately an hour after successful webhook delivery or when payment collection is attempted for the invoice. If the invoice has not been finalized yet, this will be null. */
  endingBalance?: Maybe<Scalars['Int']>;
  /** Footer displayed on the invoice. */
  footer?: Maybe<Scalars['String']>;
  /** The URL for the hosted invoice page, which allows customers to view and pay an invoice. If the invoice has not been finalized yet, this will be null. */
  hostedInvoiceUrl?: Maybe<Scalars['String']>;
  /** Unique identifier for the object. */
  id?: Maybe<Scalars['String']>;
  /** The link to download the PDF for the invoice. If the invoice has not been finalized yet, this will be null. */
  invoicePdf?: Maybe<Scalars['String']>;
  /** The error encountered during the previous attempt to finalize the invoice. This field is cleared when the invoice is successfully finalized. */
  lastFinalizationError?: Maybe<LastFinalizationError>;
  /** The individual line items that make up the invoice. `lines` is sorted as follows: invoice items in reverse chronological order, followed by the subscription, if any. */
  lines: InvoiceLinesList;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: Scalars['Boolean'];
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Maybe<Scalars['JSON']>;
  /** The time at which payment will next be attempted. This value will be `null` for invoices where `collection_method=send_invoice`. */
  nextPaymentAttempt?: Maybe<Scalars['Int']>;
  /** A unique, identifying string that appears on emails sent to the customer for this invoice. This starts with the customer's unique invoice_prefix if it is specified. */
  number?: Maybe<Scalars['String']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object49;
  /** The account (if any) for which the funds of the invoice payment are intended. If set, the invoice will be presented with the branding and support information of the specified account. See the [Invoices with Connect](https://stripe.com/docs/billing/invoices/connect) documentation for details. */
  onBehalfOf?: Maybe<Scalars['JSON']>;
  /** Whether payment was successfully collected for this invoice. An invoice can be paid (most commonly) with a charge or with credit from the customer's account balance. */
  paid: Scalars['Boolean'];
  /** The PaymentIntent associated with this invoice. The PaymentIntent is generated when the invoice is finalized, and can then be used to pay the invoice. Note that voiding an invoice will cancel the PaymentIntent. */
  paymentIntent?: Maybe<Scalars['JSON']>;
  paymentSettings: InvoicesPaymentSettings;
  /** End of the usage period during which invoice items were added to this invoice. */
  periodEnd: Scalars['Int'];
  /** Start of the usage period during which invoice items were added to this invoice. */
  periodStart: Scalars['Int'];
  /** Total amount of all post-payment credit notes issued for this invoice. */
  postPaymentCreditNotesAmount: Scalars['Int'];
  /** Total amount of all pre-payment credit notes issued for this invoice. */
  prePaymentCreditNotesAmount: Scalars['Int'];
  /** The quote this invoice was generated from. */
  quote?: Maybe<Scalars['JSON']>;
  /** This is the transaction number that appears on email receipts sent for this invoice. */
  receiptNumber?: Maybe<Scalars['String']>;
  /** Starting customer balance before the invoice is finalized. If the invoice has not been finalized yet, this will be the current customer balance. */
  startingBalance: Scalars['Int'];
  /** Extra information about an invoice for the customer's credit card statement. */
  statementDescriptor?: Maybe<Scalars['String']>;
  /** The status of the invoice, one of `draft`, `open`, `paid`, `uncollectible`, or `void`. [Learn more](https://stripe.com/docs/billing/invoices/workflow#workflow-overview) */
  status?: Maybe<Status25>;
  statusTransitions: InvoicesStatusTransitions;
  /** The subscription that this invoice was prepared for, if any. */
  subscription?: Maybe<Scalars['JSON']>;
  /** Only set for upcoming invoices that preview prorations. The time used to calculate prorations. */
  subscriptionProrationDate?: Maybe<Scalars['Int']>;
  /** Total of all subscriptions, invoice items, and prorations on the invoice before any invoice level discount or tax is applied. Item discounts are already incorporated */
  subtotal: Scalars['Int'];
  /** The amount of tax on this invoice. This is the sum of all the tax amounts on this invoice. */
  tax?: Maybe<Scalars['Int']>;
  thresholdReason?: Maybe<InvoiceThresholdReason>;
  /** Total after discounts and taxes. */
  total: Scalars['Int'];
  /** The aggregate amounts calculated per discount across all line items. */
  totalDiscountAmounts?: Maybe<Array<Maybe<DiscountsResourceDiscountAmount>>>;
  /** The aggregate amounts calculated per tax rate for all line items. */
  totalTaxAmounts: Array<Maybe<InvoiceTaxAmount>>;
  /** The account (if any) the payment will be attributed to for tax reporting, and where funds from the payment will be transferred to for the invoice. */
  transferData?: Maybe<TransferData8>;
  /** Invoices are automatically paid or sent 1 hour after webhooks are delivered, or until all webhook delivery attempts have [been exhausted](https://stripe.com/docs/billing/webhooks#understand). This field tracks the time when webhooks for this invoice were successfully delivered. If the invoice had no webhooks to deliver, this will be set while the invoice is being created. */
  webhooksDeliveredAt?: Maybe<Scalars['Int']>;
};

export type AutomaticTax3 = {
  /** Whether Stripe automatically computes tax on this invoice. */
  enabled: Scalars['Boolean'];
  /** The status of the most recent automated tax calculation for this invoice. */
  status?: Maybe<Status22>;
};

export enum Status22 {
  COMPLETE = 'complete',
  FAILED = 'failed',
  REQUIRES_LOCATION_INPUTS = 'requires_location_inputs'
}

export enum BillingReason {
  AUTOMATIC_PENDING_INVOICE_ITEM_INVOICE = 'automatic_pending_invoice_item_invoice',
  MANUAL = 'manual',
  QUOTE_ACCEPT = 'quote_accept',
  SUBSCRIPTION = 'subscription',
  SUBSCRIPTION_CREATE = 'subscription_create',
  SUBSCRIPTION_CYCLE = 'subscription_cycle',
  SUBSCRIPTION_THRESHOLD = 'subscription_threshold',
  SUBSCRIPTION_UPDATE = 'subscription_update',
  UPCOMING = 'upcoming'
}

export enum CollectionMethod3 {
  CHARGE_AUTOMATICALLY = 'charge_automatically',
  SEND_INVOICE = 'send_invoice'
}

/** The customer's address. Until the invoice is finalized, this field will equal `customer.address`. Once the invoice is finalized, this field will no longer be updated. */
export type CustomerAddress = {
  /** City, district, suburb, town, or village. */
  city?: Maybe<Scalars['String']>;
  /** Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)). */
  country?: Maybe<Scalars['String']>;
  /** Address line 1 (e.g., street, PO Box, or company name). */
  line1?: Maybe<Scalars['String']>;
  /** Address line 2 (e.g., apartment, suite, unit, or building). */
  line2?: Maybe<Scalars['String']>;
  /** ZIP or postal code. */
  postalCode?: Maybe<Scalars['String']>;
  /** State, county, province, or region. */
  state?: Maybe<Scalars['String']>;
};

/** The customer's shipping information. Until the invoice is finalized, this field will equal `customer.shipping`. Once the invoice is finalized, this field will no longer be updated. */
export type CustomerShipping = {
  address?: Maybe<Address>;
  /** The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc. */
  carrier?: Maybe<Scalars['String']>;
  /** Recipient name. */
  name?: Maybe<Scalars['String']>;
  /** Recipient phone (including extension). */
  phone?: Maybe<Scalars['String']>;
  /** The tracking number for a physical product, obtained from the delivery service. If multiple tracking numbers were generated for this purchase, please separate them with commas. */
  trackingNumber?: Maybe<Scalars['String']>;
};

export enum CustomerTaxExempt {
  EXEMPT = 'exempt',
  NONE = 'none',
  REVERSE = 'reverse'
}

export type InvoicesResourceInvoiceTaxId = {
  /** The type of the tax ID, one of `eu_vat`, `br_cnpj`, `br_cpf`, `gb_vat`, `nz_gst`, `au_abn`, `in_gst`, `no_vat`, `za_vat`, `ch_vat`, `mx_rfc`, `sg_uen`, `ru_inn`, `ru_kpp`, `ca_bn`, `hk_br`, `es_cif`, `tw_vat`, `th_vat`, `jp_cn`, `jp_rn`, `li_uid`, `my_itn`, `us_ein`, `kr_brn`, `ca_qst`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `my_sst`, `sg_gst`, `ae_trn`, `cl_tin`, `sa_vat`, `id_npwp`, `my_frp`, `il_vat`, or `unknown` */
  type: Type11;
  /** The value of the tax ID. */
  value?: Maybe<Scalars['String']>;
};

/** Describes the current discount applied to this invoice, if there is one. Not populated if there are multiple discounts. */
export type Discount5 = {
  /** The Checkout session that this coupon is applied to, if it is applied to a particular session in payment mode. Will not be present for subscription mode. */
  checkoutSession?: Maybe<Scalars['String']>;
  /**
   * A coupon contains information about a percent-off or amount-off discount you
   * might want to apply to a customer. Coupons may be applied to [invoices](https://stripe.com/docs/api#invoices) or
   * [orders](https://stripe.com/docs/api#create_order-coupon). Coupons do not work with conventional one-off [charges](https://stripe.com/docs/api#create_charge).
   */
  coupon?: Maybe<Coupon>;
  /** The ID of the customer associated with this discount. */
  customer?: Maybe<Scalars['JSON']>;
  /** If the coupon has a duration of `repeating`, the date that this discount will end. If the coupon has a duration of `once` or `forever`, this attribute will be null. */
  end?: Maybe<Scalars['Int']>;
  /** The ID of the discount object. Discounts cannot be fetched by ID. Use `expand[]=discounts` in API calls to expand discount IDs in an array. */
  id?: Maybe<Scalars['String']>;
  /** The invoice that the discount's coupon was applied to, if it was applied directly to a particular invoice. */
  invoice?: Maybe<Scalars['String']>;
  /** The invoice item `id` (or invoice line item `id` for invoice line items of type='subscription') that the discount's coupon was applied to, if it was applied directly to a particular invoice item or invoice line item. */
  invoiceItem?: Maybe<Scalars['String']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: Maybe<Object22>;
  /** The promotion code applied to create this discount. */
  promotionCode?: Maybe<Scalars['JSON']>;
  /** Date that the coupon was applied. */
  start?: Maybe<Scalars['Int']>;
  /** The subscription that this coupon is applied to, if it is applied to a particular subscription. */
  subscription?: Maybe<Scalars['String']>;
};

/** The error encountered during the previous attempt to finalize the invoice. This field is cleared when the invoice is successfully finalized. */
export type LastFinalizationError = {
  /** For card errors, the ID of the failed charge. */
  charge?: Maybe<Scalars['String']>;
  /** For some errors that could be handled programmatically, a short string indicating the [error code](https://stripe.com/docs/error-codes) reported. */
  code?: Maybe<Scalars['String']>;
  /** For card errors resulting from a card issuer decline, a short string indicating the [card issuer's reason for the decline](https://stripe.com/docs/declines#issuer-declines) if they provide one. */
  declineCode?: Maybe<Scalars['String']>;
  /** A URL to more information about the [error code](https://stripe.com/docs/error-codes) reported. */
  docUrl?: Maybe<Scalars['String']>;
  /** A human-readable message providing more details about the error. For card errors, these messages can be shown to your users. */
  message?: Maybe<Scalars['String']>;
  /** If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field. */
  param?: Maybe<Scalars['String']>;
  /**
   * A PaymentIntent guides you through the process of collecting a payment from your customer.
   * We recommend that you create exactly one PaymentIntent for each order or
   * customer session in your system. You can reference the PaymentIntent later to
   * see the history of payment attempts for a particular session.
   *
   * A PaymentIntent transitions through
   * [multiple statuses](https://stripe.com/docs/payments/intents#intent-statuses)
   * throughout its lifetime as it interfaces with Stripe.js to perform
   * authentication flows and ultimately creates at most one successful charge.
   *
   * Related guide: [Payment Intents API](https://stripe.com/docs/payments/payment-intents).
   */
  paymentIntent?: Maybe<PaymentIntent7>;
  /**
   * PaymentMethod objects represent your customer's payment instruments.
   * They can be used with [PaymentIntents](https://stripe.com/docs/payments/payment-intents) to collect payments or saved to
   * Customer objects to store instrument details for future payments.
   *
   * Related guides: [Payment Methods](https://stripe.com/docs/payments/payment-methods) and [More Payment Scenarios](https://stripe.com/docs/payments/more-payment-scenarios).
   */
  paymentMethod?: Maybe<PaymentMethod3>;
  /** If the error is specific to the type of payment method, the payment method type that had a problem. This field is only populated for invoice-related errors. */
  paymentMethodType?: Maybe<Scalars['String']>;
  /**
   * A SetupIntent guides you through the process of setting up and saving a customer's payment credentials for future payments.
   * For example, you could use a SetupIntent to set up and save your customer's card without immediately collecting a payment.
   * Later, you can use [PaymentIntents](https://stripe.com/docs/api#payment_intents) to drive the payment flow.
   *
   * Create a SetupIntent as soon as you're ready to collect your customer's payment credentials.
   * Do not maintain long-lived, unconfirmed SetupIntents as they may no longer be valid.
   * The SetupIntent then transitions through multiple [statuses](https://stripe.com/docs/payments/intents#intent-statuses) as it guides
   * you through the setup process.
   *
   * Successful SetupIntents result in payment credentials that are optimized for future payments.
   * For example, cardholders in [certain regions](/guides/strong-customer-authentication) may need to be run through
   * [Strong Customer Authentication](https://stripe.com/docs/strong-customer-authentication) at the time of payment method collection
   * in order to streamline later [off-session payments](https://stripe.com/docs/payments/setup-intents).
   * If the SetupIntent is used with a [Customer](https://stripe.com/docs/api#setup_intent_object-customer), upon success,
   * it will automatically attach the resulting payment method to that Customer.
   * We recommend using SetupIntents or [setup_future_usage](https://stripe.com/docs/api#payment_intent_object-setup_future_usage) on
   * PaymentIntents to save payment methods in order to prevent saving invalid or unoptimized payment methods.
   *
   * By using SetupIntents, you ensure that your customers experience the minimum set of required friction,
   * even as regulations change over time.
   *
   * Related guide: [Setup Intents API](https://stripe.com/docs/payments/setup-intents).
   */
  setupIntent?: Maybe<SetupIntent2>;
  /** The source object for errors returned on a request involving a source. */
  source?: Maybe<Source9>;
  /** The type of error returned. One of `api_error`, `card_error`, `idempotency_error`, or `invalid_request_error` */
  type?: Maybe<Type30>;
};

/**
 * A PaymentIntent guides you through the process of collecting a payment from your customer.
 * We recommend that you create exactly one PaymentIntent for each order or
 * customer session in your system. You can reference the PaymentIntent later to
 * see the history of payment attempts for a particular session.
 *
 * A PaymentIntent transitions through
 * [multiple statuses](https://stripe.com/docs/payments/intents#intent-statuses)
 * throughout its lifetime as it interfaces with Stripe.js to perform
 * authentication flows and ultimately creates at most one successful charge.
 *
 * Related guide: [Payment Intents API](https://stripe.com/docs/payments/payment-intents).
 */
export type PaymentIntent7 = {
  /** Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99). */
  amount: Scalars['Int'];
  /** Amount that can be captured from this PaymentIntent. */
  amountCapturable?: Maybe<Scalars['Int']>;
  /** Amount that was collected by this PaymentIntent. */
  amountReceived?: Maybe<Scalars['Int']>;
  /** ID of the Connect application that created the PaymentIntent. */
  application?: Maybe<Scalars['JSON']>;
  /** The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. The amount of the application fee collected will be capped at the total payment amount. For more information, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts). */
  applicationFeeAmount?: Maybe<Scalars['Int']>;
  /** Populated when `status` is `canceled`, this is the time at which the PaymentIntent was canceled. Measured in seconds since the Unix epoch. */
  canceledAt?: Maybe<Scalars['Int']>;
  /** Reason for cancellation of this PaymentIntent, either user-provided (`duplicate`, `fraudulent`, `requested_by_customer`, or `abandoned`) or generated by Stripe internally (`failed_invoice`, `void_invoice`, or `automatic`). */
  cancellationReason?: Maybe<CancellationReason>;
  /** Controls when the funds will be captured from the customer's account. */
  captureMethod: CaptureMethod2;
  /** Charges that were created by this PaymentIntent, if any. */
  charges?: Maybe<Charges>;
  /**
   * The client secret of this PaymentIntent. Used for client-side retrieval using a publishable key.
   *
   * The client secret can be used to complete a payment from your frontend. It should not be stored, logged, embedded in URLs, or exposed to anyone other than the customer. Make sure that you have TLS enabled on any page that includes the client secret.
   *
   * Refer to our docs to [accept a payment](https://stripe.com/docs/payments/accept-a-payment?integration=elements) and learn about how `client_secret` should be handled.
   */
  clientSecret?: Maybe<Scalars['String']>;
  confirmationMethod: ConfirmationMethod;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created: Scalars['Int'];
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency: Scalars['String'];
  /**
   * ID of the Customer this PaymentIntent belongs to, if one exists.
   *
   * Payment methods attached to other Customers cannot be used with this PaymentIntent.
   *
   * If present in combination with [setup_future_usage](https://stripe.com/docs/api#payment_intent_object-setup_future_usage), this PaymentIntent's payment method will be attached to the Customer after the PaymentIntent has been confirmed and any required actions from the user are complete.
   */
  customer?: Maybe<Scalars['JSON']>;
  /** An arbitrary string attached to the object. Often useful for displaying to users. */
  description?: Maybe<Scalars['String']>;
  /** Unique identifier for the object. */
  id: Scalars['String'];
  /** ID of the invoice that created this PaymentIntent, if it exists. */
  invoice?: Maybe<Scalars['JSON']>;
  /** The payment error encountered in the previous PaymentIntent confirmation. It will be cleared if the PaymentIntent is later updated for any reason. */
  lastPaymentError?: Maybe<LastPaymentError>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: Scalars['Boolean'];
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. For more information, see the [documentation](https://stripe.com/docs/payments/payment-intents/creating-payment-intents#storing-information-in-metadata). */
  metadata?: Maybe<Scalars['JSON']>;
  /** If present, this property tells you what actions you need to take in order for your customer to fulfill a payment using the provided source. */
  nextAction?: Maybe<NextAction2>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object47;
  /** The account (if any) for which the funds of the PaymentIntent are intended. See the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts) for details. */
  onBehalfOf?: Maybe<Scalars['JSON']>;
  /** ID of the payment method used in this PaymentIntent. */
  paymentMethod?: Maybe<Scalars['JSON']>;
  /** Payment-method-specific configuration for this PaymentIntent. */
  paymentMethodOptions?: Maybe<PaymentMethodOptions5>;
  /** The list of payment method types (e.g. card) that this PaymentIntent is allowed to use. */
  paymentMethodTypes: Array<Maybe<Scalars['String']>>;
  /** Email address that the receipt for the resulting payment will be sent to. If `receipt_email` is specified for a payment in live mode, a receipt will be sent regardless of your [email settings](https://dashboard.stripe.com/account/emails). */
  receiptEmail?: Maybe<Scalars['String']>;
  /** ID of the review associated with this PaymentIntent, if any. */
  review?: Maybe<Scalars['JSON']>;
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
   *
   * When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
   */
  setupFutureUsage?: Maybe<SetupFutureUsage2>;
  /** Shipping information for this PaymentIntent. */
  shipping?: Maybe<Shipping9>;
  /** For non-card charges, you can use this value as the complete description that appears on your customers’ statements. Must contain at least one letter, maximum 22 characters. */
  statementDescriptor?: Maybe<Scalars['String']>;
  /** Provides information about a card payment that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor. */
  statementDescriptorSuffix?: Maybe<Scalars['String']>;
  /** Status of this PaymentIntent, one of `requires_payment_method`, `requires_confirmation`, `requires_action`, `processing`, `requires_capture`, `canceled`, or `succeeded`. Read more about each PaymentIntent [status](https://stripe.com/docs/payments/intents#intent-statuses). */
  status: Status24;
  /** The data with which to automatically create a Transfer when the payment is finalized. See the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts) for details. */
  transferData?: Maybe<TransferData7>;
  /** A string that identifies the resulting payment as part of a group. See the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts) for details. */
  transferGroup?: Maybe<Scalars['String']>;
};

export enum CancellationReason {
  ABANDONED = 'abandoned',
  AUTOMATIC = 'automatic',
  DUPLICATE = 'duplicate',
  FAILED_INVOICE = 'failed_invoice',
  FRAUDULENT = 'fraudulent',
  REQUESTED_BY_CUSTOMER = 'requested_by_customer',
  VOID_INVOICE = 'void_invoice'
}

export enum CaptureMethod2 {
  AUTOMATIC = 'automatic',
  MANUAL = 'manual'
}

/** Charges that were created by this PaymentIntent, if any. */
export type Charges = {
  /** This list only contains the latest charge, even if there were previously multiple unsuccessful charges. To view all previous charges for a PaymentIntent, you can filter the charges list using the `payment_intent` [parameter](https://stripe.com/docs/api/charges/list#list_charges-payment_intent). */
  data: Array<Maybe<Charge2>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

export enum ConfirmationMethod {
  AUTOMATIC = 'automatic',
  MANUAL = 'manual'
}

/** The payment error encountered in the previous PaymentIntent confirmation. It will be cleared if the PaymentIntent is later updated for any reason. */
export type LastPaymentError = {
  /** For card errors, the ID of the failed charge. */
  charge?: Maybe<Scalars['String']>;
  /** For some errors that could be handled programmatically, a short string indicating the [error code](https://stripe.com/docs/error-codes) reported. */
  code?: Maybe<Scalars['String']>;
  /** For card errors resulting from a card issuer decline, a short string indicating the [card issuer's reason for the decline](https://stripe.com/docs/declines#issuer-declines) if they provide one. */
  declineCode?: Maybe<Scalars['String']>;
  /** A URL to more information about the [error code](https://stripe.com/docs/error-codes) reported. */
  docUrl?: Maybe<Scalars['String']>;
  /** A human-readable message providing more details about the error. For card errors, these messages can be shown to your users. */
  message?: Maybe<Scalars['String']>;
  /** If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field. */
  param?: Maybe<Scalars['String']>;
  /**
   * A PaymentIntent guides you through the process of collecting a payment from your customer.
   * We recommend that you create exactly one PaymentIntent for each order or
   * customer session in your system. You can reference the PaymentIntent later to
   * see the history of payment attempts for a particular session.
   *
   * A PaymentIntent transitions through
   * [multiple statuses](https://stripe.com/docs/payments/intents#intent-statuses)
   * throughout its lifetime as it interfaces with Stripe.js to perform
   * authentication flows and ultimately creates at most one successful charge.
   *
   * Related guide: [Payment Intents API](https://stripe.com/docs/payments/payment-intents).
   */
  paymentIntent?: Maybe<PaymentIntent7>;
  /**
   * PaymentMethod objects represent your customer's payment instruments.
   * They can be used with [PaymentIntents](https://stripe.com/docs/payments/payment-intents) to collect payments or saved to
   * Customer objects to store instrument details for future payments.
   *
   * Related guides: [Payment Methods](https://stripe.com/docs/payments/payment-methods) and [More Payment Scenarios](https://stripe.com/docs/payments/more-payment-scenarios).
   */
  paymentMethod?: Maybe<PaymentMethod3>;
  /** If the error is specific to the type of payment method, the payment method type that had a problem. This field is only populated for invoice-related errors. */
  paymentMethodType?: Maybe<Scalars['String']>;
  /**
   * A SetupIntent guides you through the process of setting up and saving a customer's payment credentials for future payments.
   * For example, you could use a SetupIntent to set up and save your customer's card without immediately collecting a payment.
   * Later, you can use [PaymentIntents](https://stripe.com/docs/api#payment_intents) to drive the payment flow.
   *
   * Create a SetupIntent as soon as you're ready to collect your customer's payment credentials.
   * Do not maintain long-lived, unconfirmed SetupIntents as they may no longer be valid.
   * The SetupIntent then transitions through multiple [statuses](https://stripe.com/docs/payments/intents#intent-statuses) as it guides
   * you through the setup process.
   *
   * Successful SetupIntents result in payment credentials that are optimized for future payments.
   * For example, cardholders in [certain regions](/guides/strong-customer-authentication) may need to be run through
   * [Strong Customer Authentication](https://stripe.com/docs/strong-customer-authentication) at the time of payment method collection
   * in order to streamline later [off-session payments](https://stripe.com/docs/payments/setup-intents).
   * If the SetupIntent is used with a [Customer](https://stripe.com/docs/api#setup_intent_object-customer), upon success,
   * it will automatically attach the resulting payment method to that Customer.
   * We recommend using SetupIntents or [setup_future_usage](https://stripe.com/docs/api#payment_intent_object-setup_future_usage) on
   * PaymentIntents to save payment methods in order to prevent saving invalid or unoptimized payment methods.
   *
   * By using SetupIntents, you ensure that your customers experience the minimum set of required friction,
   * even as regulations change over time.
   *
   * Related guide: [Setup Intents API](https://stripe.com/docs/payments/setup-intents).
   */
  setupIntent?: Maybe<SetupIntent2>;
  /** The source object for errors returned on a request involving a source. */
  source?: Maybe<Source9>;
  /** The type of error returned. One of `api_error`, `card_error`, `idempotency_error`, or `invalid_request_error` */
  type?: Maybe<Type30>;
};

/**
 * PaymentMethod objects represent your customer's payment instruments.
 * They can be used with [PaymentIntents](https://stripe.com/docs/payments/payment-intents) to collect payments or saved to
 * Customer objects to store instrument details for future payments.
 *
 * Related guides: [Payment Methods](https://stripe.com/docs/payments/payment-methods) and [More Payment Scenarios](https://stripe.com/docs/payments/more-payment-scenarios).
 */
export type PaymentMethod3 = {
  acssDebit?: Maybe<PaymentMethodAcssDebit>;
  afterpayClearpay?: Maybe<Scalars['JSON']>;
  alipay?: Maybe<Scalars['JSON']>;
  auBecsDebit?: Maybe<PaymentMethodAuBecsDebit>;
  bacsDebit?: Maybe<PaymentMethodBacsDebit>;
  bancontact?: Maybe<Scalars['JSON']>;
  billingDetails: BillingDetails;
  boleto?: Maybe<PaymentMethodBoleto>;
  card?: Maybe<PaymentMethodCard>;
  cardPresent?: Maybe<Scalars['JSON']>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created: Scalars['Int'];
  /** The ID of the Customer to which this PaymentMethod is saved. This will not be set when the PaymentMethod has not been saved to a Customer. */
  customer?: Maybe<Scalars['JSON']>;
  eps?: Maybe<PaymentMethodEps>;
  fpx?: Maybe<PaymentMethodFpx>;
  giropay?: Maybe<Scalars['JSON']>;
  grabpay?: Maybe<Scalars['JSON']>;
  /** Unique identifier for the object. */
  id: Scalars['String'];
  ideal?: Maybe<PaymentMethodIdeal>;
  interacPresent?: Maybe<Scalars['JSON']>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: Scalars['Boolean'];
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Maybe<Scalars['JSON']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object45;
  oxxo?: Maybe<Scalars['JSON']>;
  p24?: Maybe<PaymentMethodP24>;
  sepaDebit?: Maybe<PaymentMethodSepaDebit>;
  sofort?: Maybe<PaymentMethodSofort>;
  /** The type of the PaymentMethod. An additional hash is included on the PaymentMethod with a name matching this value. It contains additional information specific to the PaymentMethod type. */
  type: Type29;
  wechatPay?: Maybe<Scalars['JSON']>;
};

export type PaymentMethodAcssDebit = {
  /** Name of the bank associated with the bank account. */
  bankName?: Maybe<Scalars['String']>;
  /** Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
  fingerprint?: Maybe<Scalars['String']>;
  /** Institution number of the bank account. */
  institutionNumber?: Maybe<Scalars['String']>;
  /** Last four digits of the bank account number. */
  last4?: Maybe<Scalars['String']>;
  /** Transit number of the bank account. */
  transitNumber?: Maybe<Scalars['String']>;
};

export type PaymentMethodAuBecsDebit = {
  /** Six-digit number identifying bank and branch associated with this bank account. */
  bsbNumber?: Maybe<Scalars['String']>;
  /** Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
  fingerprint?: Maybe<Scalars['String']>;
  /** Last four digits of the bank account number. */
  last4?: Maybe<Scalars['String']>;
};

export type PaymentMethodBacsDebit = {
  /** Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
  fingerprint?: Maybe<Scalars['String']>;
  /** Last four digits of the bank account number. */
  last4?: Maybe<Scalars['String']>;
  /** Sort code of the bank account. (e.g., `10-20-30`) */
  sortCode?: Maybe<Scalars['String']>;
};

export type PaymentMethodBoleto = {
  /** Uniquely identifies the customer tax id (CNPJ or CPF) */
  taxId: Scalars['String'];
};

export type PaymentMethodCard = {
  /** Card brand. Can be `amex`, `diners`, `discover`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`. */
  brand: Scalars['String'];
  /** Checks on Card address and CVC if provided. */
  checks?: Maybe<Checks2>;
  /** Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected. */
  country?: Maybe<Scalars['String']>;
  /** Two-digit number representing the card's expiration month. */
  expMonth: Scalars['Int'];
  /** Four-digit number representing the card's expiration year. */
  expYear: Scalars['Int'];
  /**
   * Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
   *
   * *Starting May 1, 2021, card fingerprint in India for Connect will change to allow two fingerprints for the same card --- one for India and one for the rest of the world.*
   */
  fingerprint?: Maybe<Scalars['String']>;
  /** Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`. */
  funding: Scalars['String'];
  /** Details of the original PaymentMethod that created this object. */
  generatedFrom?: Maybe<GeneratedFrom>;
  /** The last four digits of the card. */
  last4: Scalars['String'];
  /** Contains information about card networks that can be used to process the payment. */
  networks?: Maybe<Networks>;
  /** Contains details on how this Card maybe be used for 3D Secure authentication. */
  threeDSecureUsage?: Maybe<ThreeDSecureUsage>;
  /** If this Card is part of a card wallet, this contains the details of the card wallet. */
  wallet?: Maybe<Wallet2>;
};

/** Checks on Card address and CVC if provided. */
export type Checks2 = {
  /** If a address line1 was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`. */
  addressLine1Check?: Maybe<Scalars['String']>;
  /** If a address postal code was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`. */
  addressPostalCodeCheck?: Maybe<Scalars['String']>;
  /** If a CVC was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`. */
  cvcCheck?: Maybe<Scalars['String']>;
};

/** Details of the original PaymentMethod that created this object. */
export type GeneratedFrom = {
  /** The charge that created this object. */
  charge?: Maybe<Scalars['String']>;
  /** Transaction-specific details of the payment method used in the payment. */
  paymentMethodDetails?: Maybe<PaymentMethodDetails2>;
  /** The ID of the SetupAttempt that generated this PaymentMethod, if any. */
  setupAttempt?: Maybe<Scalars['JSON']>;
};

/** Transaction-specific details of the payment method used in the payment. */
export type PaymentMethodDetails2 = {
  cardPresent?: Maybe<CardPresent>;
  /** The type of payment method transaction-specific details from the transaction that generated this `card` payment method. Always `card_present`. */
  type?: Maybe<Scalars['String']>;
};

/** Contains information about card networks that can be used to process the payment. */
export type Networks = {
  /** All available networks for the card. */
  available?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** The preferred network for the card. */
  preferred?: Maybe<Scalars['String']>;
};

/** Contains details on how this Card maybe be used for 3D Secure authentication. */
export type ThreeDSecureUsage = {
  /** Whether 3D Secure is supported on this card. */
  supported?: Maybe<Scalars['Boolean']>;
};

/** If this Card is part of a card wallet, this contains the details of the card wallet. */
export type Wallet2 = {
  amexExpressCheckout?: Maybe<Scalars['JSON']>;
  applePay?: Maybe<Scalars['JSON']>;
  /** (For tokenized numbers only.) The last four digits of the device account number. */
  dynamicLast4?: Maybe<Scalars['String']>;
  googlePay?: Maybe<Scalars['JSON']>;
  masterpass?: Maybe<Masterpass2>;
  samsungPay?: Maybe<Scalars['JSON']>;
  /** The type of the card wallet, one of `amex_express_checkout`, `apple_pay`, `google_pay`, `masterpass`, `samsung_pay`, or `visa_checkout`. An additional hash is included on the Wallet subhash with a name matching this value. It contains additional information specific to the card wallet type. */
  type?: Maybe<Type9>;
  visaCheckout?: Maybe<VisaCheckout2>;
};

export type Masterpass2 = {
  /** Owner's verified billing address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
  billingAddress?: Maybe<BillingAddress>;
  /** Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
  email?: Maybe<Scalars['String']>;
  /** Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
  name?: Maybe<Scalars['String']>;
  /** Owner's verified shipping address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
  shippingAddress?: Maybe<ShippingAddress>;
};

export type VisaCheckout2 = {
  /** Owner's verified billing address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
  billingAddress?: Maybe<BillingAddress>;
  /** Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
  email?: Maybe<Scalars['String']>;
  /** Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
  name?: Maybe<Scalars['String']>;
  /** Owner's verified shipping address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
  shippingAddress?: Maybe<ShippingAddress>;
};

export type PaymentMethodEps = {
  /** The customer's bank. Should be one of `arzte_und_apotheker_bank`, `austrian_anadi_bank_ag`, `bank_austria`, `bankhaus_carl_spangler`, `bankhaus_schelhammer_und_schattera_ag`, `bawag_psk_ag`, `bks_bank_ag`, `brull_kallmus_bank_ag`, `btv_vier_lander_bank`, `capital_bank_grawe_gruppe_ag`, `dolomitenbank`, `easybank_ag`, `erste_bank_und_sparkassen`, `hypo_alpeadriabank_international_ag`, `hypo_noe_lb_fur_niederosterreich_u_wien`, `hypo_oberosterreich_salzburg_steiermark`, `hypo_tirol_bank_ag`, `hypo_vorarlberg_bank_ag`, `hypo_bank_burgenland_aktiengesellschaft`, `marchfelder_bank`, `oberbank_ag`, `raiffeisen_bankengruppe_osterreich`, `schoellerbank_ag`, `sparda_bank_wien`, `volksbank_gruppe`, `volkskreditbank_ag`, or `vr_bank_braunau`. */
  bank?: Maybe<Bank>;
};

export type PaymentMethodFpx = {
  /** The customer's bank, if provided. Can be one of `affin_bank`, `alliance_bank`, `ambank`, `bank_islam`, `bank_muamalat`, `bank_rakyat`, `bsn`, `cimb`, `hong_leong_bank`, `hsbc`, `kfh`, `maybank2u`, `ocbc`, `public_bank`, `rhb`, `standard_chartered`, `uob`, `deutsche_bank`, `maybank2e`, or `pb_enterprise`. */
  bank: Bank6;
};

export enum Bank6 {
  AFFIN_BANK = 'affin_bank',
  ALLIANCE_BANK = 'alliance_bank',
  AMBANK = 'ambank',
  BANK_ISLAM = 'bank_islam',
  BANK_MUAMALAT = 'bank_muamalat',
  BANK_RAKYAT = 'bank_rakyat',
  BSN = 'bsn',
  CIMB = 'cimb',
  DEUTSCHE_BANK = 'deutsche_bank',
  HONG_LEONG_BANK = 'hong_leong_bank',
  HSBC = 'hsbc',
  KFH = 'kfh',
  MAYBANK2E = 'maybank2e',
  MAYBANK2U = 'maybank2u',
  OCBC = 'ocbc',
  PB_ENTERPRISE = 'pb_enterprise',
  PUBLIC_BANK = 'public_bank',
  RHB = 'rhb',
  STANDARD_CHARTERED = 'standard_chartered',
  UOB = 'uob'
}

export type PaymentMethodIdeal = {
  /** The customer's bank, if provided. Can be one of `abn_amro`, `asn_bank`, `bunq`, `handelsbanken`, `ing`, `knab`, `moneyou`, `rabobank`, `regiobank`, `revolut`, `sns_bank`, `triodos_bank`, or `van_lanschot`. */
  bank?: Maybe<Bank7>;
  /** The Bank Identifier Code of the customer's bank, if the bank was provided. */
  bic?: Maybe<Bic9>;
};

export enum Bank7 {
  ABN_AMRO = 'abn_amro',
  ASN_BANK = 'asn_bank',
  BUNQ = 'bunq',
  HANDELSBANKEN = 'handelsbanken',
  ING = 'ing',
  KNAB = 'knab',
  MONEYOU = 'moneyou',
  RABOBANK = 'rabobank',
  REGIOBANK = 'regiobank',
  REVOLUT = 'revolut',
  SNS_BANK = 'sns_bank',
  TRIODOS_BANK = 'triodos_bank',
  VAN_LANSCHOT = 'van_lanschot'
}

export enum Bic9 {
  ABNANL2A = 'ABNANL2A',
  ASNBNL21 = 'ASNBNL21',
  BUNQNL2A = 'BUNQNL2A',
  FVLBNL22 = 'FVLBNL22',
  HANDNL2A = 'HANDNL2A',
  INGBNL2A = 'INGBNL2A',
  KNABNL2H = 'KNABNL2H',
  MOYONL21 = 'MOYONL21',
  RABONL2U = 'RABONL2U',
  RBRBNL21 = 'RBRBNL21',
  REVOLT21 = 'REVOLT21',
  SNSBNL2A = 'SNSBNL2A',
  TRIONL2U = 'TRIONL2U'
}

export enum Object45 {
  PAYMENT_METHOD = 'payment_method'
}

export type PaymentMethodP24 = {
  /** The customer's bank, if provided. */
  bank?: Maybe<Bank8>;
};

export enum Bank8 {
  ALIOR_BANK = 'alior_bank',
  BANK_MILLENNIUM = 'bank_millennium',
  BANK_NOWY_BFG_SA = 'bank_nowy_bfg_sa',
  BANK_PEKAO_SA = 'bank_pekao_sa',
  BANKI_SPBDZIELCZE = 'banki_spbdzielcze',
  BLIK = 'blik',
  BNP_PARIBAS = 'bnp_paribas',
  BOZ = 'boz',
  CITI_HANDLOWY = 'citi_handlowy',
  CREDIT_AGRICOLE = 'credit_agricole',
  ENVELOBANK = 'envelobank',
  ETRANSFER_POCZTOWY24 = 'etransfer_pocztowy24',
  GETIN_BANK = 'getin_bank',
  IDEABANK = 'ideabank',
  ING = 'ing',
  INTELIGO = 'inteligo',
  MBANK_MTRANSFER = 'mbank_mtransfer',
  NEST_PRZELEW = 'nest_przelew',
  NOBLE_PAY = 'noble_pay',
  PBAC_Z_IPKO = 'pbac_z_ipko',
  PLUS_BANK = 'plus_bank',
  SANTANDER_PRZELEW24 = 'santander_przelew24',
  TMOBILE_USBUGI_BANKOWE = 'tmobile_usbugi_bankowe',
  TOYOTA_BANK = 'toyota_bank',
  VOLKSWAGEN_BANK = 'volkswagen_bank'
}

export type PaymentMethodSepaDebit = {
  /** Bank code of bank associated with the bank account. */
  bankCode?: Maybe<Scalars['String']>;
  /** Branch code of bank associated with the bank account. */
  branchCode?: Maybe<Scalars['String']>;
  /** Two-letter ISO code representing the country the bank account is located in. */
  country?: Maybe<Scalars['String']>;
  /** Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
  fingerprint?: Maybe<Scalars['String']>;
  /** Information about the object that generated this PaymentMethod. */
  generatedFrom?: Maybe<GeneratedFrom2>;
  /** Last four characters of the IBAN. */
  last4?: Maybe<Scalars['String']>;
};

/** Information about the object that generated this PaymentMethod. */
export type GeneratedFrom2 = {
  /** The ID of the Charge that generated this PaymentMethod, if any. */
  charge?: Maybe<Scalars['JSON']>;
  /** The ID of the SetupAttempt that generated this PaymentMethod, if any. */
  setupAttempt?: Maybe<Scalars['JSON']>;
};

export type PaymentMethodSofort = {
  /** Two-letter ISO code representing the country the bank account is located in. */
  country?: Maybe<Scalars['String']>;
};

export enum Type29 {
  ACSS_DEBIT = 'acss_debit',
  AFTERPAY_CLEARPAY = 'afterpay_clearpay',
  ALIPAY = 'alipay',
  AU_BECS_DEBIT = 'au_becs_debit',
  BACS_DEBIT = 'bacs_debit',
  BANCONTACT = 'bancontact',
  BOLETO = 'boleto',
  CARD = 'card',
  CARD_PRESENT = 'card_present',
  EPS = 'eps',
  FPX = 'fpx',
  GIROPAY = 'giropay',
  GRABPAY = 'grabpay',
  IDEAL = 'ideal',
  INTERAC_PRESENT = 'interac_present',
  OXXO = 'oxxo',
  P24 = 'p24',
  SEPA_DEBIT = 'sepa_debit',
  SOFORT = 'sofort',
  WECHAT_PAY = 'wechat_pay'
}

/**
 * A SetupIntent guides you through the process of setting up and saving a customer's payment credentials for future payments.
 * For example, you could use a SetupIntent to set up and save your customer's card without immediately collecting a payment.
 * Later, you can use [PaymentIntents](https://stripe.com/docs/api#payment_intents) to drive the payment flow.
 *
 * Create a SetupIntent as soon as you're ready to collect your customer's payment credentials.
 * Do not maintain long-lived, unconfirmed SetupIntents as they may no longer be valid.
 * The SetupIntent then transitions through multiple [statuses](https://stripe.com/docs/payments/intents#intent-statuses) as it guides
 * you through the setup process.
 *
 * Successful SetupIntents result in payment credentials that are optimized for future payments.
 * For example, cardholders in [certain regions](/guides/strong-customer-authentication) may need to be run through
 * [Strong Customer Authentication](https://stripe.com/docs/strong-customer-authentication) at the time of payment method collection
 * in order to streamline later [off-session payments](https://stripe.com/docs/payments/setup-intents).
 * If the SetupIntent is used with a [Customer](https://stripe.com/docs/api#setup_intent_object-customer), upon success,
 * it will automatically attach the resulting payment method to that Customer.
 * We recommend using SetupIntents or [setup_future_usage](https://stripe.com/docs/api#payment_intent_object-setup_future_usage) on
 * PaymentIntents to save payment methods in order to prevent saving invalid or unoptimized payment methods.
 *
 * By using SetupIntents, you ensure that your customers experience the minimum set of required friction,
 * even as regulations change over time.
 *
 * Related guide: [Setup Intents API](https://stripe.com/docs/payments/setup-intents).
 */
export type SetupIntent2 = {
  /** ID of the Connect application that created the SetupIntent. */
  application?: Maybe<Scalars['JSON']>;
  /** Reason for cancellation of this SetupIntent, one of `abandoned`, `requested_by_customer`, or `duplicate`. */
  cancellationReason?: Maybe<CancellationReason2>;
  /**
   * The client secret of this SetupIntent. Used for client-side retrieval using a publishable key.
   *
   * The client secret can be used to complete payment setup from your frontend. It should not be stored, logged, embedded in URLs, or exposed to anyone other than the customer. Make sure that you have TLS enabled on any page that includes the client secret.
   */
  clientSecret?: Maybe<Scalars['String']>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created: Scalars['Int'];
  /**
   * ID of the Customer this SetupIntent belongs to, if one exists.
   *
   * If present, the SetupIntent's payment method will be attached to the Customer on successful setup. Payment methods attached to other Customers cannot be used with this SetupIntent.
   */
  customer?: Maybe<Scalars['JSON']>;
  /** An arbitrary string attached to the object. Often useful for displaying to users. */
  description?: Maybe<Scalars['String']>;
  /** Unique identifier for the object. */
  id: Scalars['String'];
  /** The error encountered in the previous SetupIntent confirmation. */
  lastSetupError?: Maybe<LastSetupError>;
  /** The most recent SetupAttempt for this SetupIntent. */
  latestAttempt?: Maybe<Scalars['JSON']>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: Scalars['Boolean'];
  /** ID of the multi use Mandate generated by the SetupIntent. */
  mandate?: Maybe<Scalars['JSON']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Maybe<Scalars['JSON']>;
  /** If present, this property tells you what actions you need to take in order for your customer to continue payment setup. */
  nextAction?: Maybe<NextAction>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object46;
  /** The account (if any) for which the setup is intended. */
  onBehalfOf?: Maybe<Scalars['JSON']>;
  /** ID of the payment method used with this SetupIntent. */
  paymentMethod?: Maybe<Scalars['JSON']>;
  /** Payment-method-specific configuration for this SetupIntent. */
  paymentMethodOptions?: Maybe<PaymentMethodOptions4>;
  /** The list of payment method types (e.g. card) that this SetupIntent is allowed to set up. */
  paymentMethodTypes: Array<Maybe<Scalars['String']>>;
  /** ID of the single_use Mandate generated by the SetupIntent. */
  singleUseMandate?: Maybe<Scalars['JSON']>;
  /** [Status](https://stripe.com/docs/payments/intents#intent-statuses) of this SetupIntent, one of `requires_payment_method`, `requires_confirmation`, `requires_action`, `processing`, `canceled`, or `succeeded`. */
  status: Status23;
  /**
   * Indicates how the payment method is intended to be used in the future.
   *
   * Use `on_session` if you intend to only reuse the payment method when the customer is in your checkout flow. Use `off_session` if your customer may or may not be in your checkout flow. If not provided, this value defaults to `off_session`.
   */
  usage: Scalars['String'];
};

export enum CancellationReason2 {
  ABANDONED = 'abandoned',
  DUPLICATE = 'duplicate',
  REQUESTED_BY_CUSTOMER = 'requested_by_customer'
}

/** The error encountered in the previous SetupIntent confirmation. */
export type LastSetupError = {
  /** For card errors, the ID of the failed charge. */
  charge?: Maybe<Scalars['String']>;
  /** For some errors that could be handled programmatically, a short string indicating the [error code](https://stripe.com/docs/error-codes) reported. */
  code?: Maybe<Scalars['String']>;
  /** For card errors resulting from a card issuer decline, a short string indicating the [card issuer's reason for the decline](https://stripe.com/docs/declines#issuer-declines) if they provide one. */
  declineCode?: Maybe<Scalars['String']>;
  /** A URL to more information about the [error code](https://stripe.com/docs/error-codes) reported. */
  docUrl?: Maybe<Scalars['String']>;
  /** A human-readable message providing more details about the error. For card errors, these messages can be shown to your users. */
  message?: Maybe<Scalars['String']>;
  /** If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field. */
  param?: Maybe<Scalars['String']>;
  /**
   * A PaymentIntent guides you through the process of collecting a payment from your customer.
   * We recommend that you create exactly one PaymentIntent for each order or
   * customer session in your system. You can reference the PaymentIntent later to
   * see the history of payment attempts for a particular session.
   *
   * A PaymentIntent transitions through
   * [multiple statuses](https://stripe.com/docs/payments/intents#intent-statuses)
   * throughout its lifetime as it interfaces with Stripe.js to perform
   * authentication flows and ultimately creates at most one successful charge.
   *
   * Related guide: [Payment Intents API](https://stripe.com/docs/payments/payment-intents).
   */
  paymentIntent?: Maybe<PaymentIntent7>;
  /**
   * PaymentMethod objects represent your customer's payment instruments.
   * They can be used with [PaymentIntents](https://stripe.com/docs/payments/payment-intents) to collect payments or saved to
   * Customer objects to store instrument details for future payments.
   *
   * Related guides: [Payment Methods](https://stripe.com/docs/payments/payment-methods) and [More Payment Scenarios](https://stripe.com/docs/payments/more-payment-scenarios).
   */
  paymentMethod?: Maybe<PaymentMethod3>;
  /** If the error is specific to the type of payment method, the payment method type that had a problem. This field is only populated for invoice-related errors. */
  paymentMethodType?: Maybe<Scalars['String']>;
  /**
   * A SetupIntent guides you through the process of setting up and saving a customer's payment credentials for future payments.
   * For example, you could use a SetupIntent to set up and save your customer's card without immediately collecting a payment.
   * Later, you can use [PaymentIntents](https://stripe.com/docs/api#payment_intents) to drive the payment flow.
   *
   * Create a SetupIntent as soon as you're ready to collect your customer's payment credentials.
   * Do not maintain long-lived, unconfirmed SetupIntents as they may no longer be valid.
   * The SetupIntent then transitions through multiple [statuses](https://stripe.com/docs/payments/intents#intent-statuses) as it guides
   * you through the setup process.
   *
   * Successful SetupIntents result in payment credentials that are optimized for future payments.
   * For example, cardholders in [certain regions](/guides/strong-customer-authentication) may need to be run through
   * [Strong Customer Authentication](https://stripe.com/docs/strong-customer-authentication) at the time of payment method collection
   * in order to streamline later [off-session payments](https://stripe.com/docs/payments/setup-intents).
   * If the SetupIntent is used with a [Customer](https://stripe.com/docs/api#setup_intent_object-customer), upon success,
   * it will automatically attach the resulting payment method to that Customer.
   * We recommend using SetupIntents or [setup_future_usage](https://stripe.com/docs/api#payment_intent_object-setup_future_usage) on
   * PaymentIntents to save payment methods in order to prevent saving invalid or unoptimized payment methods.
   *
   * By using SetupIntents, you ensure that your customers experience the minimum set of required friction,
   * even as regulations change over time.
   *
   * Related guide: [Setup Intents API](https://stripe.com/docs/payments/setup-intents).
   */
  setupIntent?: Maybe<SetupIntent2>;
  /** The source object for errors returned on a request involving a source. */
  source?: Maybe<Source9>;
  /** The type of error returned. One of `api_error`, `card_error`, `idempotency_error`, or `invalid_request_error` */
  type?: Maybe<Type30>;
};

/** The source object for errors returned on a request involving a source. */
export type Source9 = {
  account?: Maybe<Scalars['JSON']>;
  /** The name of the person or business that owns the bank account. */
  accountHolderName?: Maybe<Scalars['String']>;
  /** The type of entity that holds the account. This can be either `individual` or `company`. */
  accountHolderType?: Maybe<Scalars['String']>;
  /** The bank account type. This can only be `checking` or `savings` in most countries. In Japan, this can only be `futsu` or `toza`. */
  accountType?: Maybe<Scalars['String']>;
  achCreditTransfer?: Maybe<AchCreditTransfer2>;
  achDebit?: Maybe<AchDebit2>;
  acssDebit?: Maybe<AcssDebit4>;
  /** City/District/Suburb/Town/Village. */
  addressCity?: Maybe<Scalars['String']>;
  /** Billing address country, if provided when creating card. */
  addressCountry?: Maybe<Scalars['String']>;
  /** Address line 1 (Street address/PO Box/Company name). */
  addressLine1?: Maybe<Scalars['String']>;
  /** If `address_line1` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. */
  addressLine1Check?: Maybe<Scalars['String']>;
  /** Address line 2 (Apartment/Suite/Unit/Building). */
  addressLine2?: Maybe<Scalars['String']>;
  /** State/County/Province/Region. */
  addressState?: Maybe<Scalars['String']>;
  /** ZIP or postal code. */
  addressZip?: Maybe<Scalars['String']>;
  /** If `address_zip` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. */
  addressZipCheck?: Maybe<Scalars['String']>;
  alipay?: Maybe<Alipay2>;
  /** A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount associated with the source. This is the amount for which the source will be chargeable once ready. Required for `single_use` sources. */
  amount?: Maybe<Scalars['Int']>;
  auBecsDebit?: Maybe<AuBecsDebit2>;
  availablePayoutMethods?: Maybe<Scalars['JSON']>;
  bancontact?: Maybe<Bancontact2>;
  /** Name of the bank associated with the routing number (e.g., `WELLS FARGO`). */
  bankName?: Maybe<Scalars['String']>;
  /** Card brand. Can be `American Express`, `Diners Club`, `Discover`, `JCB`, `MasterCard`, `UnionPay`, `Visa`, or `Unknown`. */
  brand?: Maybe<Scalars['String']>;
  card?: Maybe<Card6>;
  cardPresent?: Maybe<CardPresent2>;
  /** The client secret of the source. Used for client-side retrieval using a publishable key. */
  clientSecret?: Maybe<Scalars['String']>;
  codeVerification?: Maybe<CodeVerification>;
  country?: Maybe<Scalars['JSON']>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: Maybe<Scalars['Int']>;
  currency?: Maybe<Scalars['JSON']>;
  customer?: Maybe<Scalars['JSON']>;
  /** If a CVC was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. A result of unchecked indicates that CVC was provided but hasn't been checked yet. Checks are typically performed when attaching a card to a Customer object, or when creating a charge. For more details, see [Check if a card is valid without a charge](https://support.stripe.com/questions/check-if-a-card-is-valid-without-a-charge). */
  cvcCheck?: Maybe<Scalars['String']>;
  defaultForCurrency?: Maybe<Scalars['JSON']>;
  /** (For tokenized numbers only.) The last four digits of the device account number. */
  dynamicLast4?: Maybe<Scalars['String']>;
  eps?: Maybe<Eps2>;
  /** Two-digit number representing the card's expiration month. */
  expMonth?: Maybe<Scalars['Int']>;
  /** Four-digit number representing the card's expiration year. */
  expYear?: Maybe<Scalars['Int']>;
  fingerprint?: Maybe<Scalars['JSON']>;
  /** The authentication `flow` of the source. `flow` is one of `redirect`, `receiver`, `code_verification`, `none`. */
  flow?: Maybe<Scalars['String']>;
  /** Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`. */
  funding?: Maybe<Scalars['String']>;
  giropay?: Maybe<Giropay2>;
  /** Unique identifier for the object. */
  id?: Maybe<Scalars['String']>;
  ideal?: Maybe<Ideal2>;
  klarna?: Maybe<Klarna2>;
  last4?: Maybe<Scalars['JSON']>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: Maybe<Scalars['Boolean']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Maybe<Scalars['JSON']>;
  multibanco?: Maybe<Multibanco2>;
  /** Cardholder name. */
  name?: Maybe<Scalars['String']>;
  object?: Maybe<Scalars['JSON']>;
  /** Information about the owner of the payment instrument that may be used or required by particular source types. */
  owner?: Maybe<Owner3>;
  p24?: Maybe<P242>;
  receiver?: Maybe<Receiver2>;
  /** The recipient that this card belongs to. This attribute will not be in the card object if the card belongs to a customer or account instead. */
  recipient?: Maybe<Scalars['JSON']>;
  redirect?: Maybe<Redirect>;
  /** The routing transit number for the bank account. */
  routingNumber?: Maybe<Scalars['String']>;
  sepaDebit?: Maybe<SepaDebit2>;
  sofort?: Maybe<Sofort2>;
  sourceOrder?: Maybe<SourceOrder>;
  /** Extra information about a source. This will appear on your customer's statement every time you charge the source. */
  statementDescriptor?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['JSON']>;
  threeDSecure?: Maybe<ThreeDSecure4>;
  /** If the card number is tokenized, this is the method that was used. Can be `android_pay` (includes Google Pay), `apple_pay`, `masterpass`, `visa_checkout`, or null. */
  tokenizationMethod?: Maybe<Scalars['String']>;
  /** The `type` of the source. The `type` is a payment method, one of `ach_credit_transfer`, `ach_debit`, `alipay`, `bancontact`, `card`, `card_present`, `eps`, `giropay`, `ideal`, `multibanco`, `klarna`, `p24`, `sepa_debit`, `sofort`, `three_d_secure`, or `wechat`. An additional hash is included on the source with a name matching this value. It contains additional information specific to the [payment method](https://stripe.com/docs/sources) used. */
  type?: Maybe<Type18>;
  /** Either `reusable` or `single_use`. Whether this source should be reusable or not. Some source types may or may not be reusable by construction, while others may leave the option at creation. If an incompatible value is passed, an error will be returned. */
  usage?: Maybe<Scalars['String']>;
  wechat?: Maybe<Wechat2>;
};

export enum Type30 {
  API_ERROR = 'api_error',
  CARD_ERROR = 'card_error',
  IDEMPOTENCY_ERROR = 'idempotency_error',
  INVALID_REQUEST_ERROR = 'invalid_request_error'
}

/** If present, this property tells you what actions you need to take in order for your customer to continue payment setup. */
export type NextAction = {
  redirectToUrl?: Maybe<RedirectToUrl>;
  /** Type of the next action to perform, one of `redirect_to_url`, `use_stripe_sdk`, `alipay_handle_redirect`, or `oxxo_display_details`. */
  type?: Maybe<Scalars['String']>;
  /** When confirming a SetupIntent with Stripe.js, Stripe.js depends on the contents of this dictionary to invoke authentication flows. The shape of the contents is subject to change and is only intended to be used by Stripe.js. */
  useStripeSdk?: Maybe<Scalars['JSON']>;
  verifyWithMicrodeposits?: Maybe<VerifyWithMicrodeposits>;
};

export type RedirectToUrl = {
  /** If the customer does not exit their browser while authenticating, they will be redirected to this specified URL after completion. */
  returnUrl?: Maybe<Scalars['String']>;
  /** The URL you must redirect your customer to in order to authenticate. */
  url?: Maybe<Scalars['String']>;
};

export type VerifyWithMicrodeposits = {
  /** The timestamp when the microdeposits are expected to land. */
  arrivalDate: Scalars['Int'];
  /** The URL for the hosted verification page, which allows customers to verify their bank account. */
  hostedVerificationUrl: Scalars['String'];
};

export enum Object46 {
  SETUP_INTENT = 'setup_intent'
}

/** Payment-method-specific configuration for this SetupIntent. */
export type PaymentMethodOptions4 = {
  acssDebit?: Maybe<AcssDebit5>;
  card?: Maybe<Card14>;
  sepaDebit?: Maybe<SepaDebit3>;
};

export type AcssDebit5 = {
  /** Currency supported by the bank account */
  currency?: Maybe<Currency43>;
  mandateOptions?: Maybe<SetupIntentPaymentMethodOptionsMandateOptionsAcssDebit>;
  /** Bank account verification method. */
  verificationMethod?: Maybe<VerificationMethod>;
};

export enum Currency43 {
  CAD = 'cad',
  USD = 'usd'
}

export type SetupIntentPaymentMethodOptionsMandateOptionsAcssDebit = {
  /** A URL for custom mandate text */
  customMandateUrl?: Maybe<Scalars['String']>;
  /** Description of the interval. Only required if the 'payment_schedule' parameter is 'interval' or 'combined'. */
  intervalDescription?: Maybe<Scalars['String']>;
  /** Payment schedule for the mandate. */
  paymentSchedule?: Maybe<PaymentSchedule>;
  /** Transaction type of the mandate. */
  transactionType?: Maybe<TransactionType>;
};

export type Card14 = {
  /** We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. Permitted values include: `automatic` or `any`. If not provided, defaults to `automatic`. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine. */
  requestThreeDSecure?: Maybe<RequestThreeDSecure2>;
};

export enum RequestThreeDSecure2 {
  ANY = 'any',
  AUTOMATIC = 'automatic',
  CHALLENGE_ONLY = 'challenge_only'
}

export type SepaDebit3 = {
  mandateOptions?: Maybe<Scalars['JSON']>;
};

export enum Status23 {
  CANCELED = 'canceled',
  PROCESSING = 'processing',
  REQUIRES_ACTION = 'requires_action',
  REQUIRES_CONFIRMATION = 'requires_confirmation',
  REQUIRES_PAYMENT_METHOD = 'requires_payment_method',
  SUCCEEDED = 'succeeded'
}

/** If present, this property tells you what actions you need to take in order for your customer to fulfill a payment using the provided source. */
export type NextAction2 = {
  alipayHandleRedirect?: Maybe<AlipayHandleRedirect>;
  boletoDisplayDetails?: Maybe<BoletoDisplayDetails>;
  oxxoDisplayDetails?: Maybe<OxxoDisplayDetails>;
  redirectToUrl?: Maybe<RedirectToUrl2>;
  /** Type of the next action to perform, one of `redirect_to_url`, `use_stripe_sdk`, `alipay_handle_redirect`, or `oxxo_display_details`. */
  type?: Maybe<Scalars['String']>;
  /** When confirming a PaymentIntent with Stripe.js, Stripe.js depends on the contents of this dictionary to invoke authentication flows. The shape of the contents is subject to change and is only intended to be used by Stripe.js. */
  useStripeSdk?: Maybe<Scalars['JSON']>;
  verifyWithMicrodeposits?: Maybe<VerifyWithMicrodeposits2>;
  wechatPayDisplayQrCode?: Maybe<WechatPayDisplayQrCode>;
  wechatPayRedirectToAndroidApp?: Maybe<WechatPayRedirectToAndroidApp>;
  wechatPayRedirectToIosApp?: Maybe<WechatPayRedirectToIosApp>;
};

export type AlipayHandleRedirect = {
  /** The native data to be used with Alipay SDK you must redirect your customer to in order to authenticate the payment in an Android App. */
  nativeData?: Maybe<Scalars['String']>;
  /** The native URL you must redirect your customer to in order to authenticate the payment in an iOS App. */
  nativeUrl?: Maybe<Scalars['String']>;
  /** If the customer does not exit their browser while authenticating, they will be redirected to this specified URL after completion. */
  returnUrl?: Maybe<Scalars['String']>;
  /** The URL you must redirect your customer to in order to authenticate the payment. */
  url?: Maybe<Scalars['String']>;
};

export type BoletoDisplayDetails = {
  /** The timestamp after which the boleto expires. */
  expiresAt?: Maybe<Scalars['Int']>;
  /** The URL to the hosted boleto voucher page, which allows customers to view the boleto voucher. */
  hostedVoucherUrl?: Maybe<Scalars['String']>;
  /** The boleto number. */
  number?: Maybe<Scalars['String']>;
  /** The URL to the downloadable boleto voucher PDF. */
  pdf?: Maybe<Scalars['String']>;
};

export type OxxoDisplayDetails = {
  /** The timestamp after which the OXXO voucher expires. */
  expiresAfter?: Maybe<Scalars['Int']>;
  /** The URL for the hosted OXXO voucher page, which allows customers to view and print an OXXO voucher. */
  hostedVoucherUrl?: Maybe<Scalars['String']>;
  /** OXXO reference number. */
  number?: Maybe<Scalars['String']>;
};

export type RedirectToUrl2 = {
  /** If the customer does not exit their browser while authenticating, they will be redirected to this specified URL after completion. */
  returnUrl?: Maybe<Scalars['String']>;
  /** The URL you must redirect your customer to in order to authenticate the payment. */
  url?: Maybe<Scalars['String']>;
};

export type VerifyWithMicrodeposits2 = {
  /** The timestamp when the microdeposits are expected to land. */
  arrivalDate: Scalars['Int'];
  /** The URL for the hosted verification page, which allows customers to verify their bank account. */
  hostedVerificationUrl: Scalars['String'];
};

export type WechatPayDisplayQrCode = {
  /** The data being used to generate QR code */
  data: Scalars['String'];
  /** The base64 image data for a pre-generated QR code */
  imageDataUrl: Scalars['String'];
};

export type WechatPayRedirectToAndroidApp = {
  /** app_id is the APP ID registered on WeChat open platform */
  appId: Scalars['String'];
  /** nonce_str is a random string */
  nonceStr: Scalars['String'];
  /** package is static value */
  package: Scalars['String'];
  /** an unique merchant ID assigned by Wechat Pay */
  partnerId: Scalars['String'];
  /** an unique trading ID assigned by Wechat Pay */
  prepayId: Scalars['String'];
  /** A signature */
  sign: Scalars['String'];
  /** Specifies the current time in epoch format */
  timestamp: Scalars['String'];
};

export type WechatPayRedirectToIosApp = {
  /** An universal link that redirect to Wechat Pay APP */
  nativeUrl: Scalars['String'];
};

export enum Object47 {
  PAYMENT_INTENT = 'payment_intent'
}

/** Payment-method-specific configuration for this PaymentIntent. */
export type PaymentMethodOptions5 = {
  acssDebit?: Maybe<AcssDebit6>;
  afterpayClearpay?: Maybe<AfterpayClearpay2>;
  alipay?: Maybe<Scalars['JSON']>;
  bancontact?: Maybe<Bancontact5>;
  boleto?: Maybe<Boleto2>;
  card?: Maybe<Card15>;
  cardPresent?: Maybe<Scalars['JSON']>;
  ideal?: Maybe<Scalars['JSON']>;
  oxxo?: Maybe<Oxxo2>;
  p24?: Maybe<Scalars['JSON']>;
  sepaDebit?: Maybe<SepaDebit4>;
  sofort?: Maybe<Sofort3>;
  wechatPay?: Maybe<WechatPay3>;
};

export type AcssDebit6 = {
  mandateOptions?: Maybe<PaymentIntentPaymentMethodOptionsMandateOptionsAcssDebit>;
  /** Bank account verification method. */
  verificationMethod?: Maybe<VerificationMethod>;
};

export type PaymentIntentPaymentMethodOptionsMandateOptionsAcssDebit = {
  /** A URL for custom mandate text */
  customMandateUrl?: Maybe<Scalars['String']>;
  /** Description of the interval. Only required if the 'payment_schedule' parameter is 'interval' or 'combined'. */
  intervalDescription?: Maybe<Scalars['String']>;
  /** Payment schedule for the mandate. */
  paymentSchedule?: Maybe<PaymentSchedule>;
  /** Transaction type of the mandate. */
  transactionType?: Maybe<TransactionType>;
};

export type AfterpayClearpay2 = {
  /**
   * Order identifier shown to the merchant in Afterpay’s online portal. We recommend using a value that helps you answer any questions a customer might have about
   * the payment. The identifier is limited to 128 characters and may contain only letters, digits, underscores, backslashes and dashes.
   */
  reference?: Maybe<Scalars['String']>;
};

export type Bancontact5 = {
  /** Preferred language of the Bancontact authorization page that the customer is redirected to. */
  preferredLanguage: PreferredLanguage5;
};

export type Card15 = {
  /**
   * Installment details for this payment (Mexico only).
   *
   * For more information, see the [installments integration guide](https://stripe.com/docs/payments/installments).
   */
  installments?: Maybe<Installments2>;
  /** Selected network to process this payment intent on. Depends on the available networks of the card attached to the payment intent. Can be only set confirm-time. */
  network?: Maybe<Network4>;
  /** We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. Permitted values include: `automatic` or `any`. If not provided, defaults to `automatic`. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine. */
  requestThreeDSecure?: Maybe<RequestThreeDSecure2>;
};

/**
 * Installment details for this payment (Mexico only).
 *
 * For more information, see the [installments integration guide](https://stripe.com/docs/payments/installments).
 */
export type Installments2 = {
  /** Installment plans that may be selected for this PaymentIntent. */
  availablePlans?: Maybe<Array<Maybe<PaymentMethodDetailsCardInstallmentsPlan>>>;
  /** Whether Installments are enabled for this PaymentIntent. */
  enabled?: Maybe<Scalars['Boolean']>;
  /** Installment plan selected for this PaymentIntent. */
  plan?: Maybe<Plan3>;
};

export type PaymentMethodDetailsCardInstallmentsPlan = {
  /** For `fixed_count` installment plans, this is the number of installment payments your customer will make to their credit card. */
  count?: Maybe<Scalars['Int']>;
  /**
   * For `fixed_count` installment plans, this is the interval between installment payments your customer will make to their credit card.
   * One of `month`.
   */
  interval?: Maybe<Interval3>;
  /** Type of installment plan, one of `fixed_count`. */
  type: Type8;
};

/** Installment plan selected for this PaymentIntent. */
export type Plan3 = {
  /** For `fixed_count` installment plans, this is the number of installment payments your customer will make to their credit card. */
  count?: Maybe<Scalars['Int']>;
  /**
   * For `fixed_count` installment plans, this is the interval between installment payments your customer will make to their credit card.
   * One of `month`.
   */
  interval?: Maybe<Interval3>;
  /** Type of installment plan, one of `fixed_count`. */
  type?: Maybe<Type8>;
};

export enum Network4 {
  AMEX = 'amex',
  CARTES_BANCAIRES = 'cartes_bancaires',
  DINERS = 'diners',
  DISCOVER = 'discover',
  INTERAC = 'interac',
  JCB = 'jcb',
  MASTERCARD = 'mastercard',
  UNIONPAY = 'unionpay',
  UNKNOWN = 'unknown',
  VISA = 'visa'
}

export type SepaDebit4 = {
  mandateOptions?: Maybe<Scalars['JSON']>;
};

export type Sofort3 = {
  /** Preferred language of the SOFORT authorization page that the customer is redirected to. */
  preferredLanguage?: Maybe<PreferredLanguage6>;
};

export enum PreferredLanguage6 {
  DE = 'de',
  EN = 'en',
  ES = 'es',
  FR = 'fr',
  IT = 'it',
  NL = 'nl',
  PL = 'pl'
}

export type WechatPay3 = {
  /** The app ID registered with WeChat Pay. Only required when client is ios or android. */
  appId?: Maybe<Scalars['String']>;
  /** The client type that the end customer will pay from */
  client?: Maybe<Client2>;
};

export enum Client2 {
  ANDROID = 'android',
  IOS = 'ios',
  WEB = 'web'
}

export enum SetupFutureUsage2 {
  OFF_SESSION = 'off_session',
  ON_SESSION = 'on_session'
}

/** Shipping information for this PaymentIntent. */
export type Shipping9 = {
  address?: Maybe<Address>;
  /** The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc. */
  carrier?: Maybe<Scalars['String']>;
  /** Recipient name. */
  name?: Maybe<Scalars['String']>;
  /** Recipient phone (including extension). */
  phone?: Maybe<Scalars['String']>;
  /** The tracking number for a physical product, obtained from the delivery service. If multiple tracking numbers were generated for this purchase, please separate them with commas. */
  trackingNumber?: Maybe<Scalars['String']>;
};

export enum Status24 {
  CANCELED = 'canceled',
  PROCESSING = 'processing',
  REQUIRES_ACTION = 'requires_action',
  REQUIRES_CAPTURE = 'requires_capture',
  REQUIRES_CONFIRMATION = 'requires_confirmation',
  REQUIRES_PAYMENT_METHOD = 'requires_payment_method',
  SUCCEEDED = 'succeeded'
}

/** The data with which to automatically create a Transfer when the payment is finalized. See the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts) for details. */
export type TransferData7 = {
  /** Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99). */
  amount?: Maybe<Scalars['Int']>;
  /**
   * The account (if any) the payment will be attributed to for tax
   * reporting, and where funds from the payment will be transferred to upon
   * payment success.
   */
  destination?: Maybe<Scalars['JSON']>;
};

/** The individual line items that make up the invoice. `lines` is sorted as follows: invoice items in reverse chronological order, followed by the subscription, if any. */
export type InvoiceLinesList = {
  /** Details about each object. */
  data: Array<Maybe<LineItem>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

export type LineItem = {
  /** The amount, in %s. */
  amount: Scalars['Int'];
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency: Scalars['String'];
  /** An arbitrary string attached to the object. Often useful for displaying to users. */
  description?: Maybe<Scalars['String']>;
  /** The amount of discount calculated per discount for this line item. */
  discountAmounts?: Maybe<Array<Maybe<DiscountsResourceDiscountAmount>>>;
  /** If true, discounts will apply to this line item. Always false for prorations. */
  discountable: Scalars['Boolean'];
  /** The discounts applied to the invoice line item. Line item discounts are applied before invoice discounts. Use `expand[]=discounts` to expand each discount. */
  discounts?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  /** Unique identifier for the object. */
  id: Scalars['String'];
  /** The ID of the [invoice item](https://stripe.com/docs/api/invoiceitems) associated with this line item if any. */
  invoiceItem?: Maybe<Scalars['String']>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: Scalars['Boolean'];
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Note that for line items with `type=subscription` this will reflect the metadata of the subscription that caused the line item to be created. */
  metadata: Scalars['JSON'];
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object48;
  period: InvoiceLineItemPeriod;
  /** The price of the line item. */
  price?: Maybe<Price10>;
  /** Whether this is a proration. */
  proration: Scalars['Boolean'];
  /** The quantity of the subscription, if the line item is a subscription or a proration. */
  quantity?: Maybe<Scalars['Int']>;
  /** The subscription that the invoice item pertains to, if any. */
  subscription?: Maybe<Scalars['String']>;
  /** The subscription item that generated this invoice item. Left empty if the line item is not an explicit result of a subscription. */
  subscriptionItem?: Maybe<Scalars['String']>;
  /** The amount of tax calculated per tax rate for this line item */
  taxAmounts?: Maybe<Array<Maybe<InvoiceTaxAmount>>>;
  /** The tax rates which apply to the line item. */
  taxRates?: Maybe<Array<Maybe<TaxRate>>>;
  /** A string identifying the type of the source of this line item, either an `invoiceitem` or a `subscription`. */
  type: Type33;
};

export enum Object48 {
  LINE_ITEM = 'line_item'
}

/** The price of the line item. */
export type Price10 = {
  /** Whether the price can be used for new purchases. */
  active?: Maybe<Scalars['Boolean']>;
  /** Describes how to compute the price per period. Either `per_unit` or `tiered`. `per_unit` indicates that the fixed amount (specified in `unit_amount` or `unit_amount_decimal`) will be charged per unit in `quantity` (for prices with `usage_type=licensed`), or per unit of total usage (for prices with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as defined using the `tiers` and `tiers_mode` attributes. */
  billingScheme?: Maybe<BillingScheme>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: Maybe<Scalars['Int']>;
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency?: Maybe<Scalars['String']>;
  /** Unique identifier for the object. */
  id?: Maybe<Scalars['String']>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: Maybe<Scalars['Boolean']>;
  /** A lookup key used to retrieve prices dynamically from a static string. */
  lookupKey?: Maybe<Scalars['String']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Maybe<Scalars['JSON']>;
  /** A brief description of the price, hidden from customers. */
  nickname?: Maybe<Scalars['String']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: Maybe<Object24>;
  /** The ID of the product this price is associated with. */
  product?: Maybe<Scalars['JSON']>;
  /** The recurring components of a price such as `interval` and `usage_type`. */
  recurring?: Maybe<Recurring>;
  /** Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`. Once specified as either `inclusive` or `exclusive`, it cannot be changed. */
  taxBehavior?: Maybe<TaxBehavior>;
  /** Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`. */
  tiers?: Maybe<Array<Maybe<PriceTier>>>;
  /** Defines if the tiering price should be `graduated` or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per unit price. In `graduated` tiering, pricing can change as the quantity grows. */
  tiersMode?: Maybe<TiersMode>;
  /** Apply a transformation to the reported usage or set quantity before computing the amount billed. Cannot be combined with `tiers`. */
  transformQuantity?: Maybe<TransformQuantity>;
  /** One of `one_time` or `recurring` depending on whether the price is for a one-time purchase or a recurring (subscription) purchase. */
  type?: Maybe<Type12>;
  /** The unit amount in %s to be charged, represented as a whole integer if possible. Only set if `billing_scheme=per_unit`. */
  unitAmount?: Maybe<Scalars['Int']>;
  /** The unit amount in %s to be charged, represented as a decimal string with at most 12 decimal places. Only set if `billing_scheme=per_unit`. */
  unitAmountDecimal?: Maybe<Scalars['String']>;
};

export type InvoiceTaxAmount = {
  /** The amount, in %s, of the tax. */
  amount: Scalars['Int'];
  /** Whether this tax amount is inclusive or exclusive. */
  inclusive: Scalars['Boolean'];
  /** The tax rate that was applied to get this tax amount. */
  taxRate: Scalars['JSON'];
};

export enum Type33 {
  INVOICEITEM = 'invoiceitem',
  SUBSCRIPTION = 'subscription'
}

export enum Object49 {
  INVOICE = 'invoice'
}

export type InvoicesPaymentSettings = {
  /** Payment-method-specific configuration to provide to the invoice’s PaymentIntent. */
  paymentMethodOptions?: Maybe<PaymentMethodOptions6>;
  /** The list of payment method types (e.g. card) to provide to the invoice’s PaymentIntent. If not set, Stripe attempts to automatically determine the types to use by looking at the invoice’s default payment method, the subscription’s default payment method, the customer’s default payment method, and your [invoice template settings](https://dashboard.stripe.com/settings/billing/invoice). */
  paymentMethodTypes?: Maybe<Array<Maybe<PaymentMethodTypes7ListItem>>>;
};

/** Payment-method-specific configuration to provide to the invoice’s PaymentIntent. */
export type PaymentMethodOptions6 = {
  /** If paying by `bancontact`, this sub-hash contains details about the Bancontact payment method options to pass to the invoice’s PaymentIntent. */
  bancontact?: Maybe<Bancontact6>;
  /** If paying by `card`, this sub-hash contains details about the Card payment method options to pass to the invoice’s PaymentIntent. */
  card?: Maybe<Card16>;
};

/** If paying by `bancontact`, this sub-hash contains details about the Bancontact payment method options to pass to the invoice’s PaymentIntent. */
export type Bancontact6 = {
  /** Preferred language of the Bancontact authorization page that the customer is redirected to. */
  preferredLanguage?: Maybe<PreferredLanguage5>;
};

/** If paying by `card`, this sub-hash contains details about the Card payment method options to pass to the invoice’s PaymentIntent. */
export type Card16 = {
  /** We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine. */
  requestThreeDSecure?: Maybe<RequestThreeDSecure>;
};

export enum PaymentMethodTypes7ListItem {
  ACH_CREDIT_TRANSFER = 'ach_credit_transfer',
  ACH_DEBIT = 'ach_debit',
  AU_BECS_DEBIT = 'au_becs_debit',
  BACS_DEBIT = 'bacs_debit',
  BANCONTACT = 'bancontact',
  BOLETO = 'boleto',
  CARD = 'card',
  FPX = 'fpx',
  GIROPAY = 'giropay',
  IDEAL = 'ideal',
  SEPA_DEBIT = 'sepa_debit',
  SOFORT = 'sofort',
  WECHAT_PAY = 'wechat_pay'
}

export enum Status25 {
  DELETED = 'deleted',
  DRAFT = 'draft',
  OPEN = 'open',
  PAID = 'paid',
  UNCOLLECTIBLE = 'uncollectible',
  VOID = 'void'
}

export type InvoicesStatusTransitions = {
  /** The time that the invoice draft was finalized. */
  finalizedAt?: Maybe<Scalars['Int']>;
  /** The time that the invoice was marked uncollectible. */
  markedUncollectibleAt?: Maybe<Scalars['Int']>;
  /** The time that the invoice was paid. */
  paidAt?: Maybe<Scalars['Int']>;
  /** The time that the invoice was voided. */
  voidedAt?: Maybe<Scalars['Int']>;
};

export type InvoiceThresholdReason = {
  /** The total invoice amount threshold boundary if it triggered the threshold invoice. */
  amountGte?: Maybe<Scalars['Int']>;
  /** Indicates which line items triggered a threshold invoice. */
  itemReasons: Array<Maybe<InvoiceItemThresholdReason>>;
};

export type InvoiceItemThresholdReason = {
  /** The IDs of the line items that triggered the threshold invoice. */
  lineItemIds: Array<Maybe<Scalars['String']>>;
  /** The quantity threshold boundary that applied to the given line item. */
  usageGte: Scalars['Int'];
};

/** The account (if any) the payment will be attributed to for tax reporting, and where funds from the payment will be transferred to for the invoice. */
export type TransferData8 = {
  /** The amount in %s that will be transferred to the destination account when the invoice is paid. By default, the entire amount is transferred to the destination. */
  amount?: Maybe<Scalars['Int']>;
  /** The account where funds from the payment will be transferred to upon payment success. */
  destination?: Maybe<Scalars['JSON']>;
};

export enum CollectionMethod9 {
  CHARGE_AUTOMATICALLY = 'charge_automatically',
  SEND_INVOICE = 'send_invoice'
}

export enum Status56 {
  DRAFT = 'draft',
  OPEN = 'open',
  PAID = 'paid',
  UNCOLLECTIBLE = 'uncollectible',
  VOID = 'void'
}

export type InvoiceLinesList2 = {
  /** Details about each object. */
  data: Array<Maybe<LineItem>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

export type AutomaticTax6Input = {
  enabled: Scalars['Boolean'];
};

export type CustomerDetails2Input = {
  address?: Maybe<Scalars['JSON']>;
  shipping?: Maybe<Scalars['JSON']>;
  tax?: Maybe<TaxParamInput>;
  taxExempt?: Maybe<TaxExempt4>;
  taxIds?: Maybe<Array<Maybe<TaxIds2ListItemInput>>>;
};

export type TaxParamInput = {
  ipAddress?: Maybe<Scalars['JSON']>;
};

export enum TaxExempt4 {
  _ = '',
  EXEMPT = 'exempt',
  NONE = 'none',
  REVERSE = 'reverse'
}

export type TaxIds2ListItemInput = {
  type: Type20;
  value: Scalars['String'];
};

export enum Type20 {
  AE_TRN = 'ae_trn',
  AU_ABN = 'au_abn',
  BR_CNPJ = 'br_cnpj',
  BR_CPF = 'br_cpf',
  CA_BN = 'ca_bn',
  CA_GST_HST = 'ca_gst_hst',
  CA_PST_BC = 'ca_pst_bc',
  CA_PST_MB = 'ca_pst_mb',
  CA_PST_SK = 'ca_pst_sk',
  CA_QST = 'ca_qst',
  CH_VAT = 'ch_vat',
  CL_TIN = 'cl_tin',
  ES_CIF = 'es_cif',
  EU_VAT = 'eu_vat',
  GB_VAT = 'gb_vat',
  HK_BR = 'hk_br',
  ID_NPWP = 'id_npwp',
  IL_VAT = 'il_vat',
  IN_GST = 'in_gst',
  JP_CN = 'jp_cn',
  JP_RN = 'jp_rn',
  KR_BRN = 'kr_brn',
  LI_UID = 'li_uid',
  MX_RFC = 'mx_rfc',
  MY_FRP = 'my_frp',
  MY_ITN = 'my_itn',
  MY_SST = 'my_sst',
  NO_VAT = 'no_vat',
  NZ_GST = 'nz_gst',
  RU_INN = 'ru_inn',
  RU_KPP = 'ru_kpp',
  SA_VAT = 'sa_vat',
  SG_GST = 'sg_gst',
  SG_UEN = 'sg_uen',
  TH_VAT = 'th_vat',
  TW_VAT = 'tw_vat',
  US_EIN = 'us_ein',
  ZA_VAT = 'za_vat'
}

export type InvoiceItemsListItemInput = {
  amount?: Maybe<Scalars['Int']>;
  currency?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  discountable?: Maybe<Scalars['Boolean']>;
  discounts?: Maybe<Scalars['JSON']>;
  invoiceitem?: Maybe<Scalars['String']>;
  metadata?: Maybe<Scalars['JSON']>;
  period?: Maybe<Period3Input>;
  price?: Maybe<Scalars['String']>;
  priceData?: Maybe<OneTimePriceDataInput>;
  quantity?: Maybe<Scalars['Int']>;
  taxRates?: Maybe<Scalars['JSON']>;
  unitAmount?: Maybe<Scalars['Int']>;
  unitAmountDecimal?: Maybe<Scalars['String']>;
};

export type Period3Input = {
  end: Scalars['Int'];
  start: Scalars['Int'];
};

export type OneTimePriceDataInput = {
  currency: Scalars['String'];
  product: Scalars['String'];
  taxBehavior?: Maybe<TaxBehavior2>;
  unitAmount?: Maybe<Scalars['Int']>;
  unitAmountDecimal?: Maybe<Scalars['String']>;
};

export enum TaxBehavior2 {
  EXCLUSIVE = 'exclusive',
  INCLUSIVE = 'inclusive',
  UNSPECIFIED = 'unspecified'
}

export type SubscriptionItems2ListItemInput = {
  billingThresholds?: Maybe<Scalars['JSON']>;
  clearUsage?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['String']>;
  metadata?: Maybe<Scalars['JSON']>;
  price?: Maybe<Scalars['String']>;
  priceData?: Maybe<RecurringPriceDataInput>;
  quantity?: Maybe<Scalars['Int']>;
  taxRates?: Maybe<Scalars['JSON']>;
};

export type RecurringPriceDataInput = {
  currency: Scalars['String'];
  product: Scalars['String'];
  recurring: RecurringAdhocInput;
  taxBehavior?: Maybe<TaxBehavior2>;
  unitAmount?: Maybe<Scalars['Int']>;
  unitAmountDecimal?: Maybe<Scalars['String']>;
};

export type RecurringAdhocInput = {
  interval: Interval5;
  intervalCount?: Maybe<Scalars['Int']>;
};

export enum Interval5 {
  DAY = 'day',
  MONTH = 'month',
  WEEK = 'week',
  YEAR = 'year'
}

export enum SubscriptionProrationBehavior {
  ALWAYS_INVOICE = 'always_invoice',
  CREATE_PRORATIONS = 'create_prorations',
  NONE = 'none'
}

export type RadarIssuerFraudRecordList = {
  data: Array<Maybe<IssuerFraudRecord>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

/**
 * This resource has been renamed to [Early Fraud
 * Warning](#early_fraud_warning_object) and will be removed in a future API
 * version.
 */
export type IssuerFraudRecord = {
  /** An IFR is actionable if it has not received a dispute and has not been fully refunded. You may wish to proactively refund a charge that receives an IFR, in order to avoid receiving a dispute later. */
  actionable: Scalars['Boolean'];
  /** ID of the charge this issuer fraud record is for, optionally expanded. */
  charge: Scalars['JSON'];
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created: Scalars['Int'];
  /** The type of fraud labelled by the issuer. One of `card_never_received`, `fraudulent_card_application`, `made_with_counterfeit_card`, `made_with_lost_card`, `made_with_stolen_card`, `misc`, `unauthorized_use_of_card`. */
  fraudType: Scalars['String'];
  /** If true, the associated charge is subject to [liability shift](https://stripe.com/docs/payments/3d-secure#disputed-payments). */
  hasLiabilityShift: Scalars['Boolean'];
  /** Unique identifier for the object. */
  id: Scalars['String'];
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object50;
  /** The timestamp at which the card issuer posted the issuer fraud record. */
  postDate: Scalars['Int'];
};

export enum Object50 {
  ISSUER_FRAUD_RECORD = 'issuer_fraud_record'
}

export type V1IssuingAuthorizations2 = {
  data: Array<Maybe<IssuingAuthorization>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

/**
 * When an [issued card](https://stripe.com/docs/issuing) is used to make a purchase, an Issuing `Authorization`
 * object is created. [Authorizations](https://stripe.com/docs/issuing/purchases/authorizations) must be approved for the
 * purchase to be completed successfully.
 *
 * Related guide: [Issued Card Authorizations](https://stripe.com/docs/issuing/purchases/authorizations).
 */
export type IssuingAuthorization = {
  /** The total amount that was authorized or rejected. This amount is in the card's currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
  amount: Scalars['Int'];
  /** Detailed breakdown of amount components. These amounts are denominated in `currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
  amountDetails?: Maybe<AmountDetails>;
  /** Whether the authorization has been approved. */
  approved: Scalars['Boolean'];
  /** How the card details were provided. */
  authorizationMethod: AuthorizationMethod;
  /** List of balance transactions associated with this authorization. */
  balanceTransactions: Array<Maybe<BalanceTransaction3>>;
  /** You can [create physical or virtual cards](https://stripe.com/docs/issuing/cards) that are issued to cardholders. */
  card: IssuingCard2;
  /** The cardholder to whom this authorization belongs. */
  cardholder?: Maybe<Scalars['JSON']>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created: Scalars['Int'];
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency: Scalars['String'];
  /** Unique identifier for the object. */
  id: Scalars['String'];
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: Scalars['Boolean'];
  /** The total amount that was authorized or rejected. This amount is in the `merchant_currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
  merchantAmount: Scalars['Int'];
  /** The currency that was presented to the cardholder for the authorization. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  merchantCurrency: Scalars['String'];
  merchantData: IssuingAuthorizationMerchantData;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata: Scalars['JSON'];
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object53;
  /** The pending authorization request. This field will only be non-null during an `issuing_authorization.request` webhook. */
  pendingRequest?: Maybe<PendingRequest>;
  /** History of every time `pending_request` was approved/denied, either by you directly or by Stripe (e.g. based on your `spending_controls`). If the merchant changes the authorization by performing an [incremental authorization](https://stripe.com/docs/issuing/purchases/authorizations), you can look at this field to see the previous requests for the authorization. */
  requestHistory: Array<Maybe<IssuingAuthorizationRequest>>;
  /** The current status of the authorization in its lifecycle. */
  status: Status29;
  /** List of [transactions](https://stripe.com/docs/api/issuing/transactions) associated with this authorization. */
  transactions: Array<Maybe<IssuingTransaction>>;
  verificationData: IssuingAuthorizationVerificationData;
  /** The digital wallet used for this authorization. One of `apple_pay`, `google_pay`, or `samsung_pay`. */
  wallet?: Maybe<Scalars['String']>;
};

/** Detailed breakdown of amount components. These amounts are denominated in `currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
export type AmountDetails = {
  /** The fee charged by the ATM for the cash withdrawal. */
  atmFee?: Maybe<Scalars['Int']>;
};

export enum AuthorizationMethod {
  CHIP = 'chip',
  CONTACTLESS = 'contactless',
  KEYED_IN = 'keyed_in',
  ONLINE = 'online',
  SWIPE = 'swipe'
}

/** You can [create physical or virtual cards](https://stripe.com/docs/issuing/cards) that are issued to cardholders. */
export type IssuingCard2 = {
  /** The brand of the card. */
  brand: Scalars['String'];
  /** The reason why the card was canceled. */
  cancellationReason?: Maybe<CancellationReason3>;
  /**
   * An Issuing `Cardholder` object represents an individual or business entity who is [issued](https://stripe.com/docs/issuing) cards.
   *
   * Related guide: [How to create a Cardholder](https://stripe.com/docs/issuing/cards#create-cardholder)
   */
  cardholder: IssuingCardholder;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created: Scalars['Int'];
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency: Scalars['String'];
  /** The card's CVC. For security reasons, this is only available for virtual cards, and will be omitted unless you explicitly request it with [the `expand` parameter](https://stripe.com/docs/api/expanding_objects). Additionally, it's only available via the ["Retrieve a card" endpoint](https://stripe.com/docs/api/issuing/cards/retrieve), not via "List all cards" or any other endpoint. */
  cvc?: Maybe<Scalars['String']>;
  /** The expiration month of the card. */
  expMonth: Scalars['Int'];
  /** The expiration year of the card. */
  expYear: Scalars['Int'];
  /** Unique identifier for the object. */
  id: Scalars['String'];
  /** The last 4 digits of the card number. */
  last4: Scalars['String'];
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: Scalars['Boolean'];
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata: Scalars['JSON'];
  /** The full unredacted card number. For security reasons, this is only available for virtual cards, and will be omitted unless you explicitly request it with [the `expand` parameter](https://stripe.com/docs/api/expanding_objects). Additionally, it's only available via the ["Retrieve a card" endpoint](https://stripe.com/docs/api/issuing/cards/retrieve), not via "List all cards" or any other endpoint. */
  number?: Maybe<Scalars['String']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object52;
  /** The latest card that replaces this card, if any. */
  replacedBy?: Maybe<Scalars['JSON']>;
  /** The card this card replaces, if any. */
  replacementFor?: Maybe<Scalars['JSON']>;
  /** The reason why the previous card needed to be replaced. */
  replacementReason?: Maybe<ReplacementReason>;
  /** Where and how the card will be shipped. */
  shipping?: Maybe<Shipping10>;
  spendingControls: IssuingCardAuthorizationControls;
  /** Whether authorizations can be approved on this card. */
  status: Status28;
  /** The type of the card. */
  type: Type36;
};

export enum CancellationReason3 {
  LOST = 'lost',
  STOLEN = 'stolen'
}

/**
 * An Issuing `Cardholder` object represents an individual or business entity who is [issued](https://stripe.com/docs/issuing) cards.
 *
 * Related guide: [How to create a Cardholder](https://stripe.com/docs/issuing/cards#create-cardholder)
 */
export type IssuingCardholder = {
  billing: IssuingCardholderAddress;
  /** Additional information about a `company` cardholder. */
  company?: Maybe<Company3>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created: Scalars['Int'];
  /** The cardholder's email address. */
  email?: Maybe<Scalars['String']>;
  /** Unique identifier for the object. */
  id: Scalars['String'];
  /** Additional information about an `individual` cardholder. */
  individual?: Maybe<Individual3>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: Scalars['Boolean'];
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata: Scalars['JSON'];
  /** The cardholder's name. This will be printed on cards issued to them. */
  name: Scalars['String'];
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object51;
  /** The cardholder's phone number. */
  phoneNumber?: Maybe<Scalars['String']>;
  requirements: IssuingCardholderRequirements;
  /** Rules that control spending across this cardholder's cards. Refer to our [documentation](https://stripe.com/docs/issuing/controls/spending-controls) for more details. */
  spendingControls?: Maybe<SpendingControls>;
  /** Specifies whether to permit authorizations on this cardholder's cards. */
  status: Status26;
  /** One of `individual` or `company`. */
  type: Type34;
};

export type IssuingCardholderAddress = {
  address: Address;
};

/** Additional information about a `company` cardholder. */
export type Company3 = {
  /** Whether the company's business ID number was provided. */
  taxIdProvided?: Maybe<Scalars['Boolean']>;
};

/** Additional information about an `individual` cardholder. */
export type Individual3 = {
  /** The date of birth of this cardholder. */
  dob?: Maybe<Dob11>;
  /** The first name of this cardholder. */
  firstName?: Maybe<Scalars['String']>;
  /** The last name of this cardholder. */
  lastName?: Maybe<Scalars['String']>;
  /** Government-issued ID document for this cardholder. */
  verification?: Maybe<Verification4>;
};

/** The date of birth of this cardholder. */
export type Dob11 = {
  /** The day of birth, between 1 and 31. */
  day?: Maybe<Scalars['Int']>;
  /** The month of birth, between 1 and 12. */
  month?: Maybe<Scalars['Int']>;
  /** The four-digit year of birth. */
  year?: Maybe<Scalars['Int']>;
};

/** Government-issued ID document for this cardholder. */
export type Verification4 = {
  /** An identifying document, either a passport or local ID card. */
  document?: Maybe<Document5>;
};

/** An identifying document, either a passport or local ID card. */
export type Document5 = {
  /** The back of a document returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `identity_document`. */
  back?: Maybe<Scalars['JSON']>;
  /** The front of a document returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `identity_document`. */
  front?: Maybe<Scalars['JSON']>;
};

export enum Object51 {
  ISSUING_CARDHOLDER = 'issuing.cardholder'
}

export type IssuingCardholderRequirements = {
  /** If `disabled_reason` is present, all cards will decline authorizations with `cardholder_verification_required` reason. */
  disabledReason?: Maybe<DisabledReason4>;
  /** Array of fields that need to be collected in order to verify and re-enable the cardholder. */
  pastDue?: Maybe<Array<Maybe<PastDue5ListItem>>>;
};

export enum DisabledReason4 {
  LISTED = 'listed',
  REJECTED_LISTED = 'rejected.listed',
  UNDER_REVIEW = 'under_review'
}

export enum PastDue5ListItem {
  COMPANY_TAX_ID = 'company.tax_id',
  INDIVIDUAL_DOB_DAY = 'individual.dob.day',
  INDIVIDUAL_DOB_MONTH = 'individual.dob.month',
  INDIVIDUAL_DOB_YEAR = 'individual.dob.year',
  INDIVIDUAL_FIRST_NAME = 'individual.first_name',
  INDIVIDUAL_LAST_NAME = 'individual.last_name',
  INDIVIDUAL_VERIFICATION_DOCUMENT = 'individual.verification.document'
}

/** Rules that control spending across this cardholder's cards. Refer to our [documentation](https://stripe.com/docs/issuing/controls/spending-controls) for more details. */
export type SpendingControls = {
  /** Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations to allow. All other categories will be blocked. Cannot be set with `blocked_categories`. */
  allowedCategories?: Maybe<Array<Maybe<AllowedCategoriesListItem>>>;
  /** Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations to decline. All other categories will be allowed. Cannot be set with `allowed_categories`. */
  blockedCategories?: Maybe<Array<Maybe<BlockedCategoriesListItem>>>;
  /** Limit spending with amount-based rules that apply across this cardholder's cards. */
  spendingLimits?: Maybe<Array<Maybe<IssuingCardholderSpendingLimit>>>;
  /** Currency of the amounts within `spending_limits`. */
  spendingLimitsCurrency?: Maybe<Scalars['String']>;
};

export enum AllowedCategoriesListItem {
  AC_REFRIGERATION_REPAIR = 'ac_refrigeration_repair',
  ACCOUNTING_BOOKKEEPING_SERVICES = 'accounting_bookkeeping_services',
  ADVERTISING_SERVICES = 'advertising_services',
  AGRICULTURAL_COOPERATIVE = 'agricultural_cooperative',
  AIRLINES_AIR_CARRIERS = 'airlines_air_carriers',
  AIRPORTS_FLYING_FIELDS = 'airports_flying_fields',
  AMBULANCE_SERVICES = 'ambulance_services',
  AMUSEMENT_PARKS_CARNIVALS = 'amusement_parks_carnivals',
  ANTIQUE_REPRODUCTIONS = 'antique_reproductions',
  ANTIQUE_SHOPS = 'antique_shops',
  AQUARIUMS = 'aquariums',
  ARCHITECTURAL_SURVEYING_SERVICES = 'architectural_surveying_services',
  ART_DEALERS_AND_GALLERIES = 'art_dealers_and_galleries',
  ARTISTS_SUPPLY_AND_CRAFT_SHOPS = 'artists_supply_and_craft_shops',
  AUTO_AND_HOME_SUPPLY_STORES = 'auto_and_home_supply_stores',
  AUTO_BODY_REPAIR_SHOPS = 'auto_body_repair_shops',
  AUTO_PAINT_SHOPS = 'auto_paint_shops',
  AUTO_SERVICE_SHOPS = 'auto_service_shops',
  AUTOMATED_CASH_DISBURSE = 'automated_cash_disburse',
  AUTOMATED_FUEL_DISPENSERS = 'automated_fuel_dispensers',
  AUTOMOBILE_ASSOCIATIONS = 'automobile_associations',
  AUTOMOTIVE_PARTS_AND_ACCESSORIES_STORES = 'automotive_parts_and_accessories_stores',
  AUTOMOTIVE_TIRE_STORES = 'automotive_tire_stores',
  BAIL_AND_BOND_PAYMENTS = 'bail_and_bond_payments',
  BAKERIES = 'bakeries',
  BANDS_ORCHESTRAS = 'bands_orchestras',
  BARBER_AND_BEAUTY_SHOPS = 'barber_and_beauty_shops',
  BETTING_CASINO_GAMBLING = 'betting_casino_gambling',
  BICYCLE_SHOPS = 'bicycle_shops',
  BILLIARD_POOL_ESTABLISHMENTS = 'billiard_pool_establishments',
  BOAT_DEALERS = 'boat_dealers',
  BOAT_RENTALS_AND_LEASES = 'boat_rentals_and_leases',
  BOOK_STORES = 'book_stores',
  BOOKS_PERIODICALS_AND_NEWSPAPERS = 'books_periodicals_and_newspapers',
  BOWLING_ALLEYS = 'bowling_alleys',
  BUS_LINES = 'bus_lines',
  BUSINESS_SECRETARIAL_SCHOOLS = 'business_secretarial_schools',
  BUYING_SHOPPING_SERVICES = 'buying_shopping_services',
  CABLE_SATELLITE_AND_OTHER_PAY_TELEVISION_AND_RADIO = 'cable_satellite_and_other_pay_television_and_radio',
  CAMERA_AND_PHOTOGRAPHIC_SUPPLY_STORES = 'camera_and_photographic_supply_stores',
  CANDY_NUT_AND_CONFECTIONERY_STORES = 'candy_nut_and_confectionery_stores',
  CAR_AND_TRUCK_DEALERS_NEW_USED = 'car_and_truck_dealers_new_used',
  CAR_AND_TRUCK_DEALERS_USED_ONLY = 'car_and_truck_dealers_used_only',
  CAR_RENTAL_AGENCIES = 'car_rental_agencies',
  CAR_WASHES = 'car_washes',
  CARPENTRY_SERVICES = 'carpentry_services',
  CARPET_UPHOLSTERY_CLEANING = 'carpet_upholstery_cleaning',
  CATERERS = 'caterers',
  CHARITABLE_AND_SOCIAL_SERVICE_ORGANIZATIONS_FUNDRAISING = 'charitable_and_social_service_organizations_fundraising',
  CHEMICALS_AND_ALLIED_PRODUCTS = 'chemicals_and_allied_products',
  CHILD_CARE_SERVICES = 'child_care_services',
  CHILDRENS_AND_INFANTS_WEAR_STORES = 'childrens_and_infants_wear_stores',
  CHIROPODISTS_PODIATRISTS = 'chiropodists_podiatrists',
  CHIROPRACTORS = 'chiropractors',
  CIGAR_STORES_AND_STANDS = 'cigar_stores_and_stands',
  CIVIC_SOCIAL_FRATERNAL_ASSOCIATIONS = 'civic_social_fraternal_associations',
  CLEANING_AND_MAINTENANCE = 'cleaning_and_maintenance',
  CLOTHING_RENTAL = 'clothing_rental',
  COLLEGES_UNIVERSITIES = 'colleges_universities',
  COMMERCIAL_EQUIPMENT = 'commercial_equipment',
  COMMERCIAL_FOOTWEAR = 'commercial_footwear',
  COMMERCIAL_PHOTOGRAPHY_ART_AND_GRAPHICS = 'commercial_photography_art_and_graphics',
  COMMUTER_TRANSPORT_AND_FERRIES = 'commuter_transport_and_ferries',
  COMPUTER_NETWORK_SERVICES = 'computer_network_services',
  COMPUTER_PROGRAMMING = 'computer_programming',
  COMPUTER_REPAIR = 'computer_repair',
  COMPUTER_SOFTWARE_STORES = 'computer_software_stores',
  COMPUTERS_PERIPHERALS_AND_SOFTWARE = 'computers_peripherals_and_software',
  CONCRETE_WORK_SERVICES = 'concrete_work_services',
  CONSTRUCTION_MATERIALS = 'construction_materials',
  CONSULTING_PUBLIC_RELATIONS = 'consulting_public_relations',
  CORRESPONDENCE_SCHOOLS = 'correspondence_schools',
  COSMETIC_STORES = 'cosmetic_stores',
  COUNSELING_SERVICES = 'counseling_services',
  COUNTRY_CLUBS = 'country_clubs',
  COURIER_SERVICES = 'courier_services',
  COURT_COSTS = 'court_costs',
  CREDIT_REPORTING_AGENCIES = 'credit_reporting_agencies',
  CRUISE_LINES = 'cruise_lines',
  DAIRY_PRODUCTS_STORES = 'dairy_products_stores',
  DANCE_HALL_STUDIOS_SCHOOLS = 'dance_hall_studios_schools',
  DATING_ESCORT_SERVICES = 'dating_escort_services',
  DENTISTS_ORTHODONTISTS = 'dentists_orthodontists',
  DEPARTMENT_STORES = 'department_stores',
  DETECTIVE_AGENCIES = 'detective_agencies',
  DIGITAL_GOODS_APPLICATIONS = 'digital_goods_applications',
  DIGITAL_GOODS_GAMES = 'digital_goods_games',
  DIGITAL_GOODS_LARGE_VOLUME = 'digital_goods_large_volume',
  DIGITAL_GOODS_MEDIA = 'digital_goods_media',
  DIRECT_MARKETING_CATALOG_MERCHANT = 'direct_marketing_catalog_merchant',
  DIRECT_MARKETING_COMBINATION_CATALOG_AND_RETAIL_MERCHANT = 'direct_marketing_combination_catalog_and_retail_merchant',
  DIRECT_MARKETING_INBOUND_TELEMARKETING = 'direct_marketing_inbound_telemarketing',
  DIRECT_MARKETING_INSURANCE_SERVICES = 'direct_marketing_insurance_services',
  DIRECT_MARKETING_OTHER = 'direct_marketing_other',
  DIRECT_MARKETING_OUTBOUND_TELEMARKETING = 'direct_marketing_outbound_telemarketing',
  DIRECT_MARKETING_SUBSCRIPTION = 'direct_marketing_subscription',
  DIRECT_MARKETING_TRAVEL = 'direct_marketing_travel',
  DISCOUNT_STORES = 'discount_stores',
  DOCTORS = 'doctors',
  DOOR_TO_DOOR_SALES = 'door_to_door_sales',
  DRAPERY_WINDOW_COVERING_AND_UPHOLSTERY_STORES = 'drapery_window_covering_and_upholstery_stores',
  DRINKING_PLACES = 'drinking_places',
  DRUG_STORES_AND_PHARMACIES = 'drug_stores_and_pharmacies',
  DRUGS_DRUG_PROPRIETARIES_AND_DRUGGIST_SUNDRIES = 'drugs_drug_proprietaries_and_druggist_sundries',
  DRY_CLEANERS = 'dry_cleaners',
  DURABLE_GOODS = 'durable_goods',
  DUTY_FREE_STORES = 'duty_free_stores',
  EATING_PLACES_RESTAURANTS = 'eating_places_restaurants',
  EDUCATIONAL_SERVICES = 'educational_services',
  ELECTRIC_RAZOR_STORES = 'electric_razor_stores',
  ELECTRICAL_PARTS_AND_EQUIPMENT = 'electrical_parts_and_equipment',
  ELECTRICAL_SERVICES = 'electrical_services',
  ELECTRONICS_REPAIR_SHOPS = 'electronics_repair_shops',
  ELECTRONICS_STORES = 'electronics_stores',
  ELEMENTARY_SECONDARY_SCHOOLS = 'elementary_secondary_schools',
  EMPLOYMENT_TEMP_AGENCIES = 'employment_temp_agencies',
  EQUIPMENT_RENTAL = 'equipment_rental',
  EXTERMINATING_SERVICES = 'exterminating_services',
  FAMILY_CLOTHING_STORES = 'family_clothing_stores',
  FAST_FOOD_RESTAURANTS = 'fast_food_restaurants',
  FINANCIAL_INSTITUTIONS = 'financial_institutions',
  FINES_GOVERNMENT_ADMINISTRATIVE_ENTITIES = 'fines_government_administrative_entities',
  FIREPLACE_FIREPLACE_SCREENS_AND_ACCESSORIES_STORES = 'fireplace_fireplace_screens_and_accessories_stores',
  FLOOR_COVERING_STORES = 'floor_covering_stores',
  FLORISTS = 'florists',
  FLORISTS_SUPPLIES_NURSERY_STOCK_AND_FLOWERS = 'florists_supplies_nursery_stock_and_flowers',
  FREEZER_AND_LOCKER_MEAT_PROVISIONERS = 'freezer_and_locker_meat_provisioners',
  FUEL_DEALERS_NON_AUTOMOTIVE = 'fuel_dealers_non_automotive',
  FUNERAL_SERVICES_CREMATORIES = 'funeral_services_crematories',
  FURNITURE_HOME_FURNISHINGS_AND_EQUIPMENT_STORES_EXCEPT_APPLIANCES = 'furniture_home_furnishings_and_equipment_stores_except_appliances',
  FURNITURE_REPAIR_REFINISHING = 'furniture_repair_refinishing',
  FURRIERS_AND_FUR_SHOPS = 'furriers_and_fur_shops',
  GENERAL_SERVICES = 'general_services',
  GIFT_CARD_NOVELTY_AND_SOUVENIR_SHOPS = 'gift_card_novelty_and_souvenir_shops',
  GLASS_PAINT_AND_WALLPAPER_STORES = 'glass_paint_and_wallpaper_stores',
  GLASSWARE_CRYSTAL_STORES = 'glassware_crystal_stores',
  GOLF_COURSES_PUBLIC = 'golf_courses_public',
  GOVERNMENT_SERVICES = 'government_services',
  GROCERY_STORES_SUPERMARKETS = 'grocery_stores_supermarkets',
  HARDWARE_EQUIPMENT_AND_SUPPLIES = 'hardware_equipment_and_supplies',
  HARDWARE_STORES = 'hardware_stores',
  HEALTH_AND_BEAUTY_SPAS = 'health_and_beauty_spas',
  HEARING_AIDS_SALES_AND_SUPPLIES = 'hearing_aids_sales_and_supplies',
  HEATING_PLUMBING_A_C = 'heating_plumbing_a_c',
  HOBBY_TOY_AND_GAME_SHOPS = 'hobby_toy_and_game_shops',
  HOME_SUPPLY_WAREHOUSE_STORES = 'home_supply_warehouse_stores',
  HOSPITALS = 'hospitals',
  HOTELS_MOTELS_AND_RESORTS = 'hotels_motels_and_resorts',
  HOUSEHOLD_APPLIANCE_STORES = 'household_appliance_stores',
  INDUSTRIAL_SUPPLIES = 'industrial_supplies',
  INFORMATION_RETRIEVAL_SERVICES = 'information_retrieval_services',
  INSURANCE_DEFAULT = 'insurance_default',
  INSURANCE_UNDERWRITING_PREMIUMS = 'insurance_underwriting_premiums',
  INTRA_COMPANY_PURCHASES = 'intra_company_purchases',
  JEWELRY_STORES_WATCHES_CLOCKS_AND_SILVERWARE_STORES = 'jewelry_stores_watches_clocks_and_silverware_stores',
  LANDSCAPING_SERVICES = 'landscaping_services',
  LAUNDRIES = 'laundries',
  LAUNDRY_CLEANING_SERVICES = 'laundry_cleaning_services',
  LEGAL_SERVICES_ATTORNEYS = 'legal_services_attorneys',
  LUGGAGE_AND_LEATHER_GOODS_STORES = 'luggage_and_leather_goods_stores',
  LUMBER_BUILDING_MATERIALS_STORES = 'lumber_building_materials_stores',
  MANUAL_CASH_DISBURSE = 'manual_cash_disburse',
  MARINAS_SERVICE_AND_SUPPLIES = 'marinas_service_and_supplies',
  MASONRY_STONEWORK_AND_PLASTER = 'masonry_stonework_and_plaster',
  MASSAGE_PARLORS = 'massage_parlors',
  MEDICAL_AND_DENTAL_LABS = 'medical_and_dental_labs',
  MEDICAL_DENTAL_OPHTHALMIC_AND_HOSPITAL_EQUIPMENT_AND_SUPPLIES = 'medical_dental_ophthalmic_and_hospital_equipment_and_supplies',
  MEDICAL_SERVICES = 'medical_services',
  MEMBERSHIP_ORGANIZATIONS = 'membership_organizations',
  MENS_AND_BOYS_CLOTHING_AND_ACCESSORIES_STORES = 'mens_and_boys_clothing_and_accessories_stores',
  MENS_WOMENS_CLOTHING_STORES = 'mens_womens_clothing_stores',
  METAL_SERVICE_CENTERS = 'metal_service_centers',
  MISCELLANEOUS = 'miscellaneous',
  MISCELLANEOUS_APPAREL_AND_ACCESSORY_SHOPS = 'miscellaneous_apparel_and_accessory_shops',
  MISCELLANEOUS_AUTO_DEALERS = 'miscellaneous_auto_dealers',
  MISCELLANEOUS_BUSINESS_SERVICES = 'miscellaneous_business_services',
  MISCELLANEOUS_FOOD_STORES = 'miscellaneous_food_stores',
  MISCELLANEOUS_GENERAL_MERCHANDISE = 'miscellaneous_general_merchandise',
  MISCELLANEOUS_GENERAL_SERVICES = 'miscellaneous_general_services',
  MISCELLANEOUS_HOME_FURNISHING_SPECIALTY_STORES = 'miscellaneous_home_furnishing_specialty_stores',
  MISCELLANEOUS_PUBLISHING_AND_PRINTING = 'miscellaneous_publishing_and_printing',
  MISCELLANEOUS_RECREATION_SERVICES = 'miscellaneous_recreation_services',
  MISCELLANEOUS_REPAIR_SHOPS = 'miscellaneous_repair_shops',
  MISCELLANEOUS_SPECIALTY_RETAIL = 'miscellaneous_specialty_retail',
  MOBILE_HOME_DEALERS = 'mobile_home_dealers',
  MOTION_PICTURE_THEATERS = 'motion_picture_theaters',
  MOTOR_FREIGHT_CARRIERS_AND_TRUCKING = 'motor_freight_carriers_and_trucking',
  MOTOR_HOMES_DEALERS = 'motor_homes_dealers',
  MOTOR_VEHICLE_SUPPLIES_AND_NEW_PARTS = 'motor_vehicle_supplies_and_new_parts',
  MOTORCYCLE_SHOPS_AND_DEALERS = 'motorcycle_shops_and_dealers',
  MOTORCYCLE_SHOPS_DEALERS = 'motorcycle_shops_dealers',
  MUSIC_STORES_MUSICAL_INSTRUMENTS_PIANOS_AND_SHEET_MUSIC = 'music_stores_musical_instruments_pianos_and_sheet_music',
  NEWS_DEALERS_AND_NEWSSTANDS = 'news_dealers_and_newsstands',
  NON_FI_MONEY_ORDERS = 'non_fi_money_orders',
  NON_FI_STORED_VALUE_CARD_PURCHASE_LOAD = 'non_fi_stored_value_card_purchase_load',
  NONDURABLE_GOODS = 'nondurable_goods',
  NURSERIES_LAWN_AND_GARDEN_SUPPLY_STORES = 'nurseries_lawn_and_garden_supply_stores',
  NURSING_PERSONAL_CARE = 'nursing_personal_care',
  OFFICE_AND_COMMERCIAL_FURNITURE = 'office_and_commercial_furniture',
  OPTICIANS_EYEGLASSES = 'opticians_eyeglasses',
  OPTOMETRISTS_OPHTHALMOLOGIST = 'optometrists_ophthalmologist',
  ORTHOPEDIC_GOODS_PROSTHETIC_DEVICES = 'orthopedic_goods_prosthetic_devices',
  OSTEOPATHS = 'osteopaths',
  PACKAGE_STORES_BEER_WINE_AND_LIQUOR = 'package_stores_beer_wine_and_liquor',
  PAINTS_VARNISHES_AND_SUPPLIES = 'paints_varnishes_and_supplies',
  PARKING_LOTS_GARAGES = 'parking_lots_garages',
  PASSENGER_RAILWAYS = 'passenger_railways',
  PAWN_SHOPS = 'pawn_shops',
  PET_SHOPS_PET_FOOD_AND_SUPPLIES = 'pet_shops_pet_food_and_supplies',
  PETROLEUM_AND_PETROLEUM_PRODUCTS = 'petroleum_and_petroleum_products',
  PHOTO_DEVELOPING = 'photo_developing',
  PHOTOGRAPHIC_PHOTOCOPY_MICROFILM_EQUIPMENT_AND_SUPPLIES = 'photographic_photocopy_microfilm_equipment_and_supplies',
  PHOTOGRAPHIC_STUDIOS = 'photographic_studios',
  PICTURE_VIDEO_PRODUCTION = 'picture_video_production',
  PIECE_GOODS_NOTIONS_AND_OTHER_DRY_GOODS = 'piece_goods_notions_and_other_dry_goods',
  PLUMBING_HEATING_EQUIPMENT_AND_SUPPLIES = 'plumbing_heating_equipment_and_supplies',
  POLITICAL_ORGANIZATIONS = 'political_organizations',
  POSTAL_SERVICES_GOVERNMENT_ONLY = 'postal_services_government_only',
  PRECIOUS_STONES_AND_METALS_WATCHES_AND_JEWELRY = 'precious_stones_and_metals_watches_and_jewelry',
  PROFESSIONAL_SERVICES = 'professional_services',
  PUBLIC_WAREHOUSING_AND_STORAGE = 'public_warehousing_and_storage',
  QUICK_COPY_REPRO_AND_BLUEPRINT = 'quick_copy_repro_and_blueprint',
  RAILROADS = 'railroads',
  REAL_ESTATE_AGENTS_AND_MANAGERS_RENTALS = 'real_estate_agents_and_managers_rentals',
  RECORD_STORES = 'record_stores',
  RECREATIONAL_VEHICLE_RENTALS = 'recreational_vehicle_rentals',
  RELIGIOUS_GOODS_STORES = 'religious_goods_stores',
  RELIGIOUS_ORGANIZATIONS = 'religious_organizations',
  ROOFING_SIDING_SHEET_METAL = 'roofing_siding_sheet_metal',
  SECRETARIAL_SUPPORT_SERVICES = 'secretarial_support_services',
  SECURITY_BROKERS_DEALERS = 'security_brokers_dealers',
  SERVICE_STATIONS = 'service_stations',
  SEWING_NEEDLEWORK_FABRIC_AND_PIECE_GOODS_STORES = 'sewing_needlework_fabric_and_piece_goods_stores',
  SHOE_REPAIR_HAT_CLEANING = 'shoe_repair_hat_cleaning',
  SHOE_STORES = 'shoe_stores',
  SMALL_APPLIANCE_REPAIR = 'small_appliance_repair',
  SNOWMOBILE_DEALERS = 'snowmobile_dealers',
  SPECIAL_TRADE_SERVICES = 'special_trade_services',
  SPECIALTY_CLEANING = 'specialty_cleaning',
  SPORTING_GOODS_STORES = 'sporting_goods_stores',
  SPORTING_RECREATION_CAMPS = 'sporting_recreation_camps',
  SPORTS_AND_RIDING_APPAREL_STORES = 'sports_and_riding_apparel_stores',
  SPORTS_CLUBS_FIELDS = 'sports_clubs_fields',
  STAMP_AND_COIN_STORES = 'stamp_and_coin_stores',
  STATIONARY_OFFICE_SUPPLIES_PRINTING_AND_WRITING_PAPER = 'stationary_office_supplies_printing_and_writing_paper',
  STATIONERY_STORES_OFFICE_AND_SCHOOL_SUPPLY_STORES = 'stationery_stores_office_and_school_supply_stores',
  SWIMMING_POOLS_SALES = 'swimming_pools_sales',
  T_UI_TRAVEL_GERMANY = 't_ui_travel_germany',
  TAILORS_ALTERATIONS = 'tailors_alterations',
  TAX_PAYMENTS_GOVERNMENT_AGENCIES = 'tax_payments_government_agencies',
  TAX_PREPARATION_SERVICES = 'tax_preparation_services',
  TAXICABS_LIMOUSINES = 'taxicabs_limousines',
  TELECOMMUNICATION_EQUIPMENT_AND_TELEPHONE_SALES = 'telecommunication_equipment_and_telephone_sales',
  TELECOMMUNICATION_SERVICES = 'telecommunication_services',
  TELEGRAPH_SERVICES = 'telegraph_services',
  TENT_AND_AWNING_SHOPS = 'tent_and_awning_shops',
  TESTING_LABORATORIES = 'testing_laboratories',
  THEATRICAL_TICKET_AGENCIES = 'theatrical_ticket_agencies',
  TIMESHARES = 'timeshares',
  TIRE_RETREADING_AND_REPAIR = 'tire_retreading_and_repair',
  TOLLS_BRIDGE_FEES = 'tolls_bridge_fees',
  TOURIST_ATTRACTIONS_AND_EXHIBITS = 'tourist_attractions_and_exhibits',
  TOWING_SERVICES = 'towing_services',
  TRAILER_PARKS_CAMPGROUNDS = 'trailer_parks_campgrounds',
  TRANSPORTATION_SERVICES = 'transportation_services',
  TRAVEL_AGENCIES_TOUR_OPERATORS = 'travel_agencies_tour_operators',
  TRUCK_STOP_ITERATION = 'truck_stop_iteration',
  TRUCK_UTILITY_TRAILER_RENTALS = 'truck_utility_trailer_rentals',
  TYPESETTING_PLATE_MAKING_AND_RELATED_SERVICES = 'typesetting_plate_making_and_related_services',
  TYPEWRITER_STORES = 'typewriter_stores',
  U_S_FEDERAL_GOVERNMENT_AGENCIES_OR_DEPARTMENTS = 'u_s_federal_government_agencies_or_departments',
  UNIFORMS_COMMERCIAL_CLOTHING = 'uniforms_commercial_clothing',
  USED_MERCHANDISE_AND_SECONDHAND_STORES = 'used_merchandise_and_secondhand_stores',
  UTILITIES = 'utilities',
  VARIETY_STORES = 'variety_stores',
  VETERINARY_SERVICES = 'veterinary_services',
  VIDEO_AMUSEMENT_GAME_SUPPLIES = 'video_amusement_game_supplies',
  VIDEO_GAME_ARCADES = 'video_game_arcades',
  VIDEO_TAPE_RENTAL_STORES = 'video_tape_rental_stores',
  VOCATIONAL_TRADE_SCHOOLS = 'vocational_trade_schools',
  WATCH_JEWELRY_REPAIR = 'watch_jewelry_repair',
  WELDING_REPAIR = 'welding_repair',
  WHOLESALE_CLUBS = 'wholesale_clubs',
  WIG_AND_TOUPEE_STORES = 'wig_and_toupee_stores',
  WIRES_MONEY_ORDERS = 'wires_money_orders',
  WOMENS_ACCESSORY_AND_SPECIALTY_SHOPS = 'womens_accessory_and_specialty_shops',
  WOMENS_READY_TO_WEAR_STORES = 'womens_ready_to_wear_stores',
  WRECKING_AND_SALVAGE_YARDS = 'wrecking_and_salvage_yards'
}

export enum BlockedCategoriesListItem {
  AC_REFRIGERATION_REPAIR = 'ac_refrigeration_repair',
  ACCOUNTING_BOOKKEEPING_SERVICES = 'accounting_bookkeeping_services',
  ADVERTISING_SERVICES = 'advertising_services',
  AGRICULTURAL_COOPERATIVE = 'agricultural_cooperative',
  AIRLINES_AIR_CARRIERS = 'airlines_air_carriers',
  AIRPORTS_FLYING_FIELDS = 'airports_flying_fields',
  AMBULANCE_SERVICES = 'ambulance_services',
  AMUSEMENT_PARKS_CARNIVALS = 'amusement_parks_carnivals',
  ANTIQUE_REPRODUCTIONS = 'antique_reproductions',
  ANTIQUE_SHOPS = 'antique_shops',
  AQUARIUMS = 'aquariums',
  ARCHITECTURAL_SURVEYING_SERVICES = 'architectural_surveying_services',
  ART_DEALERS_AND_GALLERIES = 'art_dealers_and_galleries',
  ARTISTS_SUPPLY_AND_CRAFT_SHOPS = 'artists_supply_and_craft_shops',
  AUTO_AND_HOME_SUPPLY_STORES = 'auto_and_home_supply_stores',
  AUTO_BODY_REPAIR_SHOPS = 'auto_body_repair_shops',
  AUTO_PAINT_SHOPS = 'auto_paint_shops',
  AUTO_SERVICE_SHOPS = 'auto_service_shops',
  AUTOMATED_CASH_DISBURSE = 'automated_cash_disburse',
  AUTOMATED_FUEL_DISPENSERS = 'automated_fuel_dispensers',
  AUTOMOBILE_ASSOCIATIONS = 'automobile_associations',
  AUTOMOTIVE_PARTS_AND_ACCESSORIES_STORES = 'automotive_parts_and_accessories_stores',
  AUTOMOTIVE_TIRE_STORES = 'automotive_tire_stores',
  BAIL_AND_BOND_PAYMENTS = 'bail_and_bond_payments',
  BAKERIES = 'bakeries',
  BANDS_ORCHESTRAS = 'bands_orchestras',
  BARBER_AND_BEAUTY_SHOPS = 'barber_and_beauty_shops',
  BETTING_CASINO_GAMBLING = 'betting_casino_gambling',
  BICYCLE_SHOPS = 'bicycle_shops',
  BILLIARD_POOL_ESTABLISHMENTS = 'billiard_pool_establishments',
  BOAT_DEALERS = 'boat_dealers',
  BOAT_RENTALS_AND_LEASES = 'boat_rentals_and_leases',
  BOOK_STORES = 'book_stores',
  BOOKS_PERIODICALS_AND_NEWSPAPERS = 'books_periodicals_and_newspapers',
  BOWLING_ALLEYS = 'bowling_alleys',
  BUS_LINES = 'bus_lines',
  BUSINESS_SECRETARIAL_SCHOOLS = 'business_secretarial_schools',
  BUYING_SHOPPING_SERVICES = 'buying_shopping_services',
  CABLE_SATELLITE_AND_OTHER_PAY_TELEVISION_AND_RADIO = 'cable_satellite_and_other_pay_television_and_radio',
  CAMERA_AND_PHOTOGRAPHIC_SUPPLY_STORES = 'camera_and_photographic_supply_stores',
  CANDY_NUT_AND_CONFECTIONERY_STORES = 'candy_nut_and_confectionery_stores',
  CAR_AND_TRUCK_DEALERS_NEW_USED = 'car_and_truck_dealers_new_used',
  CAR_AND_TRUCK_DEALERS_USED_ONLY = 'car_and_truck_dealers_used_only',
  CAR_RENTAL_AGENCIES = 'car_rental_agencies',
  CAR_WASHES = 'car_washes',
  CARPENTRY_SERVICES = 'carpentry_services',
  CARPET_UPHOLSTERY_CLEANING = 'carpet_upholstery_cleaning',
  CATERERS = 'caterers',
  CHARITABLE_AND_SOCIAL_SERVICE_ORGANIZATIONS_FUNDRAISING = 'charitable_and_social_service_organizations_fundraising',
  CHEMICALS_AND_ALLIED_PRODUCTS = 'chemicals_and_allied_products',
  CHILD_CARE_SERVICES = 'child_care_services',
  CHILDRENS_AND_INFANTS_WEAR_STORES = 'childrens_and_infants_wear_stores',
  CHIROPODISTS_PODIATRISTS = 'chiropodists_podiatrists',
  CHIROPRACTORS = 'chiropractors',
  CIGAR_STORES_AND_STANDS = 'cigar_stores_and_stands',
  CIVIC_SOCIAL_FRATERNAL_ASSOCIATIONS = 'civic_social_fraternal_associations',
  CLEANING_AND_MAINTENANCE = 'cleaning_and_maintenance',
  CLOTHING_RENTAL = 'clothing_rental',
  COLLEGES_UNIVERSITIES = 'colleges_universities',
  COMMERCIAL_EQUIPMENT = 'commercial_equipment',
  COMMERCIAL_FOOTWEAR = 'commercial_footwear',
  COMMERCIAL_PHOTOGRAPHY_ART_AND_GRAPHICS = 'commercial_photography_art_and_graphics',
  COMMUTER_TRANSPORT_AND_FERRIES = 'commuter_transport_and_ferries',
  COMPUTER_NETWORK_SERVICES = 'computer_network_services',
  COMPUTER_PROGRAMMING = 'computer_programming',
  COMPUTER_REPAIR = 'computer_repair',
  COMPUTER_SOFTWARE_STORES = 'computer_software_stores',
  COMPUTERS_PERIPHERALS_AND_SOFTWARE = 'computers_peripherals_and_software',
  CONCRETE_WORK_SERVICES = 'concrete_work_services',
  CONSTRUCTION_MATERIALS = 'construction_materials',
  CONSULTING_PUBLIC_RELATIONS = 'consulting_public_relations',
  CORRESPONDENCE_SCHOOLS = 'correspondence_schools',
  COSMETIC_STORES = 'cosmetic_stores',
  COUNSELING_SERVICES = 'counseling_services',
  COUNTRY_CLUBS = 'country_clubs',
  COURIER_SERVICES = 'courier_services',
  COURT_COSTS = 'court_costs',
  CREDIT_REPORTING_AGENCIES = 'credit_reporting_agencies',
  CRUISE_LINES = 'cruise_lines',
  DAIRY_PRODUCTS_STORES = 'dairy_products_stores',
  DANCE_HALL_STUDIOS_SCHOOLS = 'dance_hall_studios_schools',
  DATING_ESCORT_SERVICES = 'dating_escort_services',
  DENTISTS_ORTHODONTISTS = 'dentists_orthodontists',
  DEPARTMENT_STORES = 'department_stores',
  DETECTIVE_AGENCIES = 'detective_agencies',
  DIGITAL_GOODS_APPLICATIONS = 'digital_goods_applications',
  DIGITAL_GOODS_GAMES = 'digital_goods_games',
  DIGITAL_GOODS_LARGE_VOLUME = 'digital_goods_large_volume',
  DIGITAL_GOODS_MEDIA = 'digital_goods_media',
  DIRECT_MARKETING_CATALOG_MERCHANT = 'direct_marketing_catalog_merchant',
  DIRECT_MARKETING_COMBINATION_CATALOG_AND_RETAIL_MERCHANT = 'direct_marketing_combination_catalog_and_retail_merchant',
  DIRECT_MARKETING_INBOUND_TELEMARKETING = 'direct_marketing_inbound_telemarketing',
  DIRECT_MARKETING_INSURANCE_SERVICES = 'direct_marketing_insurance_services',
  DIRECT_MARKETING_OTHER = 'direct_marketing_other',
  DIRECT_MARKETING_OUTBOUND_TELEMARKETING = 'direct_marketing_outbound_telemarketing',
  DIRECT_MARKETING_SUBSCRIPTION = 'direct_marketing_subscription',
  DIRECT_MARKETING_TRAVEL = 'direct_marketing_travel',
  DISCOUNT_STORES = 'discount_stores',
  DOCTORS = 'doctors',
  DOOR_TO_DOOR_SALES = 'door_to_door_sales',
  DRAPERY_WINDOW_COVERING_AND_UPHOLSTERY_STORES = 'drapery_window_covering_and_upholstery_stores',
  DRINKING_PLACES = 'drinking_places',
  DRUG_STORES_AND_PHARMACIES = 'drug_stores_and_pharmacies',
  DRUGS_DRUG_PROPRIETARIES_AND_DRUGGIST_SUNDRIES = 'drugs_drug_proprietaries_and_druggist_sundries',
  DRY_CLEANERS = 'dry_cleaners',
  DURABLE_GOODS = 'durable_goods',
  DUTY_FREE_STORES = 'duty_free_stores',
  EATING_PLACES_RESTAURANTS = 'eating_places_restaurants',
  EDUCATIONAL_SERVICES = 'educational_services',
  ELECTRIC_RAZOR_STORES = 'electric_razor_stores',
  ELECTRICAL_PARTS_AND_EQUIPMENT = 'electrical_parts_and_equipment',
  ELECTRICAL_SERVICES = 'electrical_services',
  ELECTRONICS_REPAIR_SHOPS = 'electronics_repair_shops',
  ELECTRONICS_STORES = 'electronics_stores',
  ELEMENTARY_SECONDARY_SCHOOLS = 'elementary_secondary_schools',
  EMPLOYMENT_TEMP_AGENCIES = 'employment_temp_agencies',
  EQUIPMENT_RENTAL = 'equipment_rental',
  EXTERMINATING_SERVICES = 'exterminating_services',
  FAMILY_CLOTHING_STORES = 'family_clothing_stores',
  FAST_FOOD_RESTAURANTS = 'fast_food_restaurants',
  FINANCIAL_INSTITUTIONS = 'financial_institutions',
  FINES_GOVERNMENT_ADMINISTRATIVE_ENTITIES = 'fines_government_administrative_entities',
  FIREPLACE_FIREPLACE_SCREENS_AND_ACCESSORIES_STORES = 'fireplace_fireplace_screens_and_accessories_stores',
  FLOOR_COVERING_STORES = 'floor_covering_stores',
  FLORISTS = 'florists',
  FLORISTS_SUPPLIES_NURSERY_STOCK_AND_FLOWERS = 'florists_supplies_nursery_stock_and_flowers',
  FREEZER_AND_LOCKER_MEAT_PROVISIONERS = 'freezer_and_locker_meat_provisioners',
  FUEL_DEALERS_NON_AUTOMOTIVE = 'fuel_dealers_non_automotive',
  FUNERAL_SERVICES_CREMATORIES = 'funeral_services_crematories',
  FURNITURE_HOME_FURNISHINGS_AND_EQUIPMENT_STORES_EXCEPT_APPLIANCES = 'furniture_home_furnishings_and_equipment_stores_except_appliances',
  FURNITURE_REPAIR_REFINISHING = 'furniture_repair_refinishing',
  FURRIERS_AND_FUR_SHOPS = 'furriers_and_fur_shops',
  GENERAL_SERVICES = 'general_services',
  GIFT_CARD_NOVELTY_AND_SOUVENIR_SHOPS = 'gift_card_novelty_and_souvenir_shops',
  GLASS_PAINT_AND_WALLPAPER_STORES = 'glass_paint_and_wallpaper_stores',
  GLASSWARE_CRYSTAL_STORES = 'glassware_crystal_stores',
  GOLF_COURSES_PUBLIC = 'golf_courses_public',
  GOVERNMENT_SERVICES = 'government_services',
  GROCERY_STORES_SUPERMARKETS = 'grocery_stores_supermarkets',
  HARDWARE_EQUIPMENT_AND_SUPPLIES = 'hardware_equipment_and_supplies',
  HARDWARE_STORES = 'hardware_stores',
  HEALTH_AND_BEAUTY_SPAS = 'health_and_beauty_spas',
  HEARING_AIDS_SALES_AND_SUPPLIES = 'hearing_aids_sales_and_supplies',
  HEATING_PLUMBING_A_C = 'heating_plumbing_a_c',
  HOBBY_TOY_AND_GAME_SHOPS = 'hobby_toy_and_game_shops',
  HOME_SUPPLY_WAREHOUSE_STORES = 'home_supply_warehouse_stores',
  HOSPITALS = 'hospitals',
  HOTELS_MOTELS_AND_RESORTS = 'hotels_motels_and_resorts',
  HOUSEHOLD_APPLIANCE_STORES = 'household_appliance_stores',
  INDUSTRIAL_SUPPLIES = 'industrial_supplies',
  INFORMATION_RETRIEVAL_SERVICES = 'information_retrieval_services',
  INSURANCE_DEFAULT = 'insurance_default',
  INSURANCE_UNDERWRITING_PREMIUMS = 'insurance_underwriting_premiums',
  INTRA_COMPANY_PURCHASES = 'intra_company_purchases',
  JEWELRY_STORES_WATCHES_CLOCKS_AND_SILVERWARE_STORES = 'jewelry_stores_watches_clocks_and_silverware_stores',
  LANDSCAPING_SERVICES = 'landscaping_services',
  LAUNDRIES = 'laundries',
  LAUNDRY_CLEANING_SERVICES = 'laundry_cleaning_services',
  LEGAL_SERVICES_ATTORNEYS = 'legal_services_attorneys',
  LUGGAGE_AND_LEATHER_GOODS_STORES = 'luggage_and_leather_goods_stores',
  LUMBER_BUILDING_MATERIALS_STORES = 'lumber_building_materials_stores',
  MANUAL_CASH_DISBURSE = 'manual_cash_disburse',
  MARINAS_SERVICE_AND_SUPPLIES = 'marinas_service_and_supplies',
  MASONRY_STONEWORK_AND_PLASTER = 'masonry_stonework_and_plaster',
  MASSAGE_PARLORS = 'massage_parlors',
  MEDICAL_AND_DENTAL_LABS = 'medical_and_dental_labs',
  MEDICAL_DENTAL_OPHTHALMIC_AND_HOSPITAL_EQUIPMENT_AND_SUPPLIES = 'medical_dental_ophthalmic_and_hospital_equipment_and_supplies',
  MEDICAL_SERVICES = 'medical_services',
  MEMBERSHIP_ORGANIZATIONS = 'membership_organizations',
  MENS_AND_BOYS_CLOTHING_AND_ACCESSORIES_STORES = 'mens_and_boys_clothing_and_accessories_stores',
  MENS_WOMENS_CLOTHING_STORES = 'mens_womens_clothing_stores',
  METAL_SERVICE_CENTERS = 'metal_service_centers',
  MISCELLANEOUS = 'miscellaneous',
  MISCELLANEOUS_APPAREL_AND_ACCESSORY_SHOPS = 'miscellaneous_apparel_and_accessory_shops',
  MISCELLANEOUS_AUTO_DEALERS = 'miscellaneous_auto_dealers',
  MISCELLANEOUS_BUSINESS_SERVICES = 'miscellaneous_business_services',
  MISCELLANEOUS_FOOD_STORES = 'miscellaneous_food_stores',
  MISCELLANEOUS_GENERAL_MERCHANDISE = 'miscellaneous_general_merchandise',
  MISCELLANEOUS_GENERAL_SERVICES = 'miscellaneous_general_services',
  MISCELLANEOUS_HOME_FURNISHING_SPECIALTY_STORES = 'miscellaneous_home_furnishing_specialty_stores',
  MISCELLANEOUS_PUBLISHING_AND_PRINTING = 'miscellaneous_publishing_and_printing',
  MISCELLANEOUS_RECREATION_SERVICES = 'miscellaneous_recreation_services',
  MISCELLANEOUS_REPAIR_SHOPS = 'miscellaneous_repair_shops',
  MISCELLANEOUS_SPECIALTY_RETAIL = 'miscellaneous_specialty_retail',
  MOBILE_HOME_DEALERS = 'mobile_home_dealers',
  MOTION_PICTURE_THEATERS = 'motion_picture_theaters',
  MOTOR_FREIGHT_CARRIERS_AND_TRUCKING = 'motor_freight_carriers_and_trucking',
  MOTOR_HOMES_DEALERS = 'motor_homes_dealers',
  MOTOR_VEHICLE_SUPPLIES_AND_NEW_PARTS = 'motor_vehicle_supplies_and_new_parts',
  MOTORCYCLE_SHOPS_AND_DEALERS = 'motorcycle_shops_and_dealers',
  MOTORCYCLE_SHOPS_DEALERS = 'motorcycle_shops_dealers',
  MUSIC_STORES_MUSICAL_INSTRUMENTS_PIANOS_AND_SHEET_MUSIC = 'music_stores_musical_instruments_pianos_and_sheet_music',
  NEWS_DEALERS_AND_NEWSSTANDS = 'news_dealers_and_newsstands',
  NON_FI_MONEY_ORDERS = 'non_fi_money_orders',
  NON_FI_STORED_VALUE_CARD_PURCHASE_LOAD = 'non_fi_stored_value_card_purchase_load',
  NONDURABLE_GOODS = 'nondurable_goods',
  NURSERIES_LAWN_AND_GARDEN_SUPPLY_STORES = 'nurseries_lawn_and_garden_supply_stores',
  NURSING_PERSONAL_CARE = 'nursing_personal_care',
  OFFICE_AND_COMMERCIAL_FURNITURE = 'office_and_commercial_furniture',
  OPTICIANS_EYEGLASSES = 'opticians_eyeglasses',
  OPTOMETRISTS_OPHTHALMOLOGIST = 'optometrists_ophthalmologist',
  ORTHOPEDIC_GOODS_PROSTHETIC_DEVICES = 'orthopedic_goods_prosthetic_devices',
  OSTEOPATHS = 'osteopaths',
  PACKAGE_STORES_BEER_WINE_AND_LIQUOR = 'package_stores_beer_wine_and_liquor',
  PAINTS_VARNISHES_AND_SUPPLIES = 'paints_varnishes_and_supplies',
  PARKING_LOTS_GARAGES = 'parking_lots_garages',
  PASSENGER_RAILWAYS = 'passenger_railways',
  PAWN_SHOPS = 'pawn_shops',
  PET_SHOPS_PET_FOOD_AND_SUPPLIES = 'pet_shops_pet_food_and_supplies',
  PETROLEUM_AND_PETROLEUM_PRODUCTS = 'petroleum_and_petroleum_products',
  PHOTO_DEVELOPING = 'photo_developing',
  PHOTOGRAPHIC_PHOTOCOPY_MICROFILM_EQUIPMENT_AND_SUPPLIES = 'photographic_photocopy_microfilm_equipment_and_supplies',
  PHOTOGRAPHIC_STUDIOS = 'photographic_studios',
  PICTURE_VIDEO_PRODUCTION = 'picture_video_production',
  PIECE_GOODS_NOTIONS_AND_OTHER_DRY_GOODS = 'piece_goods_notions_and_other_dry_goods',
  PLUMBING_HEATING_EQUIPMENT_AND_SUPPLIES = 'plumbing_heating_equipment_and_supplies',
  POLITICAL_ORGANIZATIONS = 'political_organizations',
  POSTAL_SERVICES_GOVERNMENT_ONLY = 'postal_services_government_only',
  PRECIOUS_STONES_AND_METALS_WATCHES_AND_JEWELRY = 'precious_stones_and_metals_watches_and_jewelry',
  PROFESSIONAL_SERVICES = 'professional_services',
  PUBLIC_WAREHOUSING_AND_STORAGE = 'public_warehousing_and_storage',
  QUICK_COPY_REPRO_AND_BLUEPRINT = 'quick_copy_repro_and_blueprint',
  RAILROADS = 'railroads',
  REAL_ESTATE_AGENTS_AND_MANAGERS_RENTALS = 'real_estate_agents_and_managers_rentals',
  RECORD_STORES = 'record_stores',
  RECREATIONAL_VEHICLE_RENTALS = 'recreational_vehicle_rentals',
  RELIGIOUS_GOODS_STORES = 'religious_goods_stores',
  RELIGIOUS_ORGANIZATIONS = 'religious_organizations',
  ROOFING_SIDING_SHEET_METAL = 'roofing_siding_sheet_metal',
  SECRETARIAL_SUPPORT_SERVICES = 'secretarial_support_services',
  SECURITY_BROKERS_DEALERS = 'security_brokers_dealers',
  SERVICE_STATIONS = 'service_stations',
  SEWING_NEEDLEWORK_FABRIC_AND_PIECE_GOODS_STORES = 'sewing_needlework_fabric_and_piece_goods_stores',
  SHOE_REPAIR_HAT_CLEANING = 'shoe_repair_hat_cleaning',
  SHOE_STORES = 'shoe_stores',
  SMALL_APPLIANCE_REPAIR = 'small_appliance_repair',
  SNOWMOBILE_DEALERS = 'snowmobile_dealers',
  SPECIAL_TRADE_SERVICES = 'special_trade_services',
  SPECIALTY_CLEANING = 'specialty_cleaning',
  SPORTING_GOODS_STORES = 'sporting_goods_stores',
  SPORTING_RECREATION_CAMPS = 'sporting_recreation_camps',
  SPORTS_AND_RIDING_APPAREL_STORES = 'sports_and_riding_apparel_stores',
  SPORTS_CLUBS_FIELDS = 'sports_clubs_fields',
  STAMP_AND_COIN_STORES = 'stamp_and_coin_stores',
  STATIONARY_OFFICE_SUPPLIES_PRINTING_AND_WRITING_PAPER = 'stationary_office_supplies_printing_and_writing_paper',
  STATIONERY_STORES_OFFICE_AND_SCHOOL_SUPPLY_STORES = 'stationery_stores_office_and_school_supply_stores',
  SWIMMING_POOLS_SALES = 'swimming_pools_sales',
  T_UI_TRAVEL_GERMANY = 't_ui_travel_germany',
  TAILORS_ALTERATIONS = 'tailors_alterations',
  TAX_PAYMENTS_GOVERNMENT_AGENCIES = 'tax_payments_government_agencies',
  TAX_PREPARATION_SERVICES = 'tax_preparation_services',
  TAXICABS_LIMOUSINES = 'taxicabs_limousines',
  TELECOMMUNICATION_EQUIPMENT_AND_TELEPHONE_SALES = 'telecommunication_equipment_and_telephone_sales',
  TELECOMMUNICATION_SERVICES = 'telecommunication_services',
  TELEGRAPH_SERVICES = 'telegraph_services',
  TENT_AND_AWNING_SHOPS = 'tent_and_awning_shops',
  TESTING_LABORATORIES = 'testing_laboratories',
  THEATRICAL_TICKET_AGENCIES = 'theatrical_ticket_agencies',
  TIMESHARES = 'timeshares',
  TIRE_RETREADING_AND_REPAIR = 'tire_retreading_and_repair',
  TOLLS_BRIDGE_FEES = 'tolls_bridge_fees',
  TOURIST_ATTRACTIONS_AND_EXHIBITS = 'tourist_attractions_and_exhibits',
  TOWING_SERVICES = 'towing_services',
  TRAILER_PARKS_CAMPGROUNDS = 'trailer_parks_campgrounds',
  TRANSPORTATION_SERVICES = 'transportation_services',
  TRAVEL_AGENCIES_TOUR_OPERATORS = 'travel_agencies_tour_operators',
  TRUCK_STOP_ITERATION = 'truck_stop_iteration',
  TRUCK_UTILITY_TRAILER_RENTALS = 'truck_utility_trailer_rentals',
  TYPESETTING_PLATE_MAKING_AND_RELATED_SERVICES = 'typesetting_plate_making_and_related_services',
  TYPEWRITER_STORES = 'typewriter_stores',
  U_S_FEDERAL_GOVERNMENT_AGENCIES_OR_DEPARTMENTS = 'u_s_federal_government_agencies_or_departments',
  UNIFORMS_COMMERCIAL_CLOTHING = 'uniforms_commercial_clothing',
  USED_MERCHANDISE_AND_SECONDHAND_STORES = 'used_merchandise_and_secondhand_stores',
  UTILITIES = 'utilities',
  VARIETY_STORES = 'variety_stores',
  VETERINARY_SERVICES = 'veterinary_services',
  VIDEO_AMUSEMENT_GAME_SUPPLIES = 'video_amusement_game_supplies',
  VIDEO_GAME_ARCADES = 'video_game_arcades',
  VIDEO_TAPE_RENTAL_STORES = 'video_tape_rental_stores',
  VOCATIONAL_TRADE_SCHOOLS = 'vocational_trade_schools',
  WATCH_JEWELRY_REPAIR = 'watch_jewelry_repair',
  WELDING_REPAIR = 'welding_repair',
  WHOLESALE_CLUBS = 'wholesale_clubs',
  WIG_AND_TOUPEE_STORES = 'wig_and_toupee_stores',
  WIRES_MONEY_ORDERS = 'wires_money_orders',
  WOMENS_ACCESSORY_AND_SPECIALTY_SHOPS = 'womens_accessory_and_specialty_shops',
  WOMENS_READY_TO_WEAR_STORES = 'womens_ready_to_wear_stores',
  WRECKING_AND_SALVAGE_YARDS = 'wrecking_and_salvage_yards'
}

export type IssuingCardholderSpendingLimit = {
  /** Maximum amount allowed to spend per interval. */
  amount: Scalars['Int'];
  /** Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) this limit applies to. Omitting this field will apply the limit to all categories. */
  categories?: Maybe<Array<Maybe<CategoriesListItem>>>;
  /** Interval (or event) to which the amount applies. */
  interval: Interval7;
};

export enum CategoriesListItem {
  AC_REFRIGERATION_REPAIR = 'ac_refrigeration_repair',
  ACCOUNTING_BOOKKEEPING_SERVICES = 'accounting_bookkeeping_services',
  ADVERTISING_SERVICES = 'advertising_services',
  AGRICULTURAL_COOPERATIVE = 'agricultural_cooperative',
  AIRLINES_AIR_CARRIERS = 'airlines_air_carriers',
  AIRPORTS_FLYING_FIELDS = 'airports_flying_fields',
  AMBULANCE_SERVICES = 'ambulance_services',
  AMUSEMENT_PARKS_CARNIVALS = 'amusement_parks_carnivals',
  ANTIQUE_REPRODUCTIONS = 'antique_reproductions',
  ANTIQUE_SHOPS = 'antique_shops',
  AQUARIUMS = 'aquariums',
  ARCHITECTURAL_SURVEYING_SERVICES = 'architectural_surveying_services',
  ART_DEALERS_AND_GALLERIES = 'art_dealers_and_galleries',
  ARTISTS_SUPPLY_AND_CRAFT_SHOPS = 'artists_supply_and_craft_shops',
  AUTO_AND_HOME_SUPPLY_STORES = 'auto_and_home_supply_stores',
  AUTO_BODY_REPAIR_SHOPS = 'auto_body_repair_shops',
  AUTO_PAINT_SHOPS = 'auto_paint_shops',
  AUTO_SERVICE_SHOPS = 'auto_service_shops',
  AUTOMATED_CASH_DISBURSE = 'automated_cash_disburse',
  AUTOMATED_FUEL_DISPENSERS = 'automated_fuel_dispensers',
  AUTOMOBILE_ASSOCIATIONS = 'automobile_associations',
  AUTOMOTIVE_PARTS_AND_ACCESSORIES_STORES = 'automotive_parts_and_accessories_stores',
  AUTOMOTIVE_TIRE_STORES = 'automotive_tire_stores',
  BAIL_AND_BOND_PAYMENTS = 'bail_and_bond_payments',
  BAKERIES = 'bakeries',
  BANDS_ORCHESTRAS = 'bands_orchestras',
  BARBER_AND_BEAUTY_SHOPS = 'barber_and_beauty_shops',
  BETTING_CASINO_GAMBLING = 'betting_casino_gambling',
  BICYCLE_SHOPS = 'bicycle_shops',
  BILLIARD_POOL_ESTABLISHMENTS = 'billiard_pool_establishments',
  BOAT_DEALERS = 'boat_dealers',
  BOAT_RENTALS_AND_LEASES = 'boat_rentals_and_leases',
  BOOK_STORES = 'book_stores',
  BOOKS_PERIODICALS_AND_NEWSPAPERS = 'books_periodicals_and_newspapers',
  BOWLING_ALLEYS = 'bowling_alleys',
  BUS_LINES = 'bus_lines',
  BUSINESS_SECRETARIAL_SCHOOLS = 'business_secretarial_schools',
  BUYING_SHOPPING_SERVICES = 'buying_shopping_services',
  CABLE_SATELLITE_AND_OTHER_PAY_TELEVISION_AND_RADIO = 'cable_satellite_and_other_pay_television_and_radio',
  CAMERA_AND_PHOTOGRAPHIC_SUPPLY_STORES = 'camera_and_photographic_supply_stores',
  CANDY_NUT_AND_CONFECTIONERY_STORES = 'candy_nut_and_confectionery_stores',
  CAR_AND_TRUCK_DEALERS_NEW_USED = 'car_and_truck_dealers_new_used',
  CAR_AND_TRUCK_DEALERS_USED_ONLY = 'car_and_truck_dealers_used_only',
  CAR_RENTAL_AGENCIES = 'car_rental_agencies',
  CAR_WASHES = 'car_washes',
  CARPENTRY_SERVICES = 'carpentry_services',
  CARPET_UPHOLSTERY_CLEANING = 'carpet_upholstery_cleaning',
  CATERERS = 'caterers',
  CHARITABLE_AND_SOCIAL_SERVICE_ORGANIZATIONS_FUNDRAISING = 'charitable_and_social_service_organizations_fundraising',
  CHEMICALS_AND_ALLIED_PRODUCTS = 'chemicals_and_allied_products',
  CHILD_CARE_SERVICES = 'child_care_services',
  CHILDRENS_AND_INFANTS_WEAR_STORES = 'childrens_and_infants_wear_stores',
  CHIROPODISTS_PODIATRISTS = 'chiropodists_podiatrists',
  CHIROPRACTORS = 'chiropractors',
  CIGAR_STORES_AND_STANDS = 'cigar_stores_and_stands',
  CIVIC_SOCIAL_FRATERNAL_ASSOCIATIONS = 'civic_social_fraternal_associations',
  CLEANING_AND_MAINTENANCE = 'cleaning_and_maintenance',
  CLOTHING_RENTAL = 'clothing_rental',
  COLLEGES_UNIVERSITIES = 'colleges_universities',
  COMMERCIAL_EQUIPMENT = 'commercial_equipment',
  COMMERCIAL_FOOTWEAR = 'commercial_footwear',
  COMMERCIAL_PHOTOGRAPHY_ART_AND_GRAPHICS = 'commercial_photography_art_and_graphics',
  COMMUTER_TRANSPORT_AND_FERRIES = 'commuter_transport_and_ferries',
  COMPUTER_NETWORK_SERVICES = 'computer_network_services',
  COMPUTER_PROGRAMMING = 'computer_programming',
  COMPUTER_REPAIR = 'computer_repair',
  COMPUTER_SOFTWARE_STORES = 'computer_software_stores',
  COMPUTERS_PERIPHERALS_AND_SOFTWARE = 'computers_peripherals_and_software',
  CONCRETE_WORK_SERVICES = 'concrete_work_services',
  CONSTRUCTION_MATERIALS = 'construction_materials',
  CONSULTING_PUBLIC_RELATIONS = 'consulting_public_relations',
  CORRESPONDENCE_SCHOOLS = 'correspondence_schools',
  COSMETIC_STORES = 'cosmetic_stores',
  COUNSELING_SERVICES = 'counseling_services',
  COUNTRY_CLUBS = 'country_clubs',
  COURIER_SERVICES = 'courier_services',
  COURT_COSTS = 'court_costs',
  CREDIT_REPORTING_AGENCIES = 'credit_reporting_agencies',
  CRUISE_LINES = 'cruise_lines',
  DAIRY_PRODUCTS_STORES = 'dairy_products_stores',
  DANCE_HALL_STUDIOS_SCHOOLS = 'dance_hall_studios_schools',
  DATING_ESCORT_SERVICES = 'dating_escort_services',
  DENTISTS_ORTHODONTISTS = 'dentists_orthodontists',
  DEPARTMENT_STORES = 'department_stores',
  DETECTIVE_AGENCIES = 'detective_agencies',
  DIGITAL_GOODS_APPLICATIONS = 'digital_goods_applications',
  DIGITAL_GOODS_GAMES = 'digital_goods_games',
  DIGITAL_GOODS_LARGE_VOLUME = 'digital_goods_large_volume',
  DIGITAL_GOODS_MEDIA = 'digital_goods_media',
  DIRECT_MARKETING_CATALOG_MERCHANT = 'direct_marketing_catalog_merchant',
  DIRECT_MARKETING_COMBINATION_CATALOG_AND_RETAIL_MERCHANT = 'direct_marketing_combination_catalog_and_retail_merchant',
  DIRECT_MARKETING_INBOUND_TELEMARKETING = 'direct_marketing_inbound_telemarketing',
  DIRECT_MARKETING_INSURANCE_SERVICES = 'direct_marketing_insurance_services',
  DIRECT_MARKETING_OTHER = 'direct_marketing_other',
  DIRECT_MARKETING_OUTBOUND_TELEMARKETING = 'direct_marketing_outbound_telemarketing',
  DIRECT_MARKETING_SUBSCRIPTION = 'direct_marketing_subscription',
  DIRECT_MARKETING_TRAVEL = 'direct_marketing_travel',
  DISCOUNT_STORES = 'discount_stores',
  DOCTORS = 'doctors',
  DOOR_TO_DOOR_SALES = 'door_to_door_sales',
  DRAPERY_WINDOW_COVERING_AND_UPHOLSTERY_STORES = 'drapery_window_covering_and_upholstery_stores',
  DRINKING_PLACES = 'drinking_places',
  DRUG_STORES_AND_PHARMACIES = 'drug_stores_and_pharmacies',
  DRUGS_DRUG_PROPRIETARIES_AND_DRUGGIST_SUNDRIES = 'drugs_drug_proprietaries_and_druggist_sundries',
  DRY_CLEANERS = 'dry_cleaners',
  DURABLE_GOODS = 'durable_goods',
  DUTY_FREE_STORES = 'duty_free_stores',
  EATING_PLACES_RESTAURANTS = 'eating_places_restaurants',
  EDUCATIONAL_SERVICES = 'educational_services',
  ELECTRIC_RAZOR_STORES = 'electric_razor_stores',
  ELECTRICAL_PARTS_AND_EQUIPMENT = 'electrical_parts_and_equipment',
  ELECTRICAL_SERVICES = 'electrical_services',
  ELECTRONICS_REPAIR_SHOPS = 'electronics_repair_shops',
  ELECTRONICS_STORES = 'electronics_stores',
  ELEMENTARY_SECONDARY_SCHOOLS = 'elementary_secondary_schools',
  EMPLOYMENT_TEMP_AGENCIES = 'employment_temp_agencies',
  EQUIPMENT_RENTAL = 'equipment_rental',
  EXTERMINATING_SERVICES = 'exterminating_services',
  FAMILY_CLOTHING_STORES = 'family_clothing_stores',
  FAST_FOOD_RESTAURANTS = 'fast_food_restaurants',
  FINANCIAL_INSTITUTIONS = 'financial_institutions',
  FINES_GOVERNMENT_ADMINISTRATIVE_ENTITIES = 'fines_government_administrative_entities',
  FIREPLACE_FIREPLACE_SCREENS_AND_ACCESSORIES_STORES = 'fireplace_fireplace_screens_and_accessories_stores',
  FLOOR_COVERING_STORES = 'floor_covering_stores',
  FLORISTS = 'florists',
  FLORISTS_SUPPLIES_NURSERY_STOCK_AND_FLOWERS = 'florists_supplies_nursery_stock_and_flowers',
  FREEZER_AND_LOCKER_MEAT_PROVISIONERS = 'freezer_and_locker_meat_provisioners',
  FUEL_DEALERS_NON_AUTOMOTIVE = 'fuel_dealers_non_automotive',
  FUNERAL_SERVICES_CREMATORIES = 'funeral_services_crematories',
  FURNITURE_HOME_FURNISHINGS_AND_EQUIPMENT_STORES_EXCEPT_APPLIANCES = 'furniture_home_furnishings_and_equipment_stores_except_appliances',
  FURNITURE_REPAIR_REFINISHING = 'furniture_repair_refinishing',
  FURRIERS_AND_FUR_SHOPS = 'furriers_and_fur_shops',
  GENERAL_SERVICES = 'general_services',
  GIFT_CARD_NOVELTY_AND_SOUVENIR_SHOPS = 'gift_card_novelty_and_souvenir_shops',
  GLASS_PAINT_AND_WALLPAPER_STORES = 'glass_paint_and_wallpaper_stores',
  GLASSWARE_CRYSTAL_STORES = 'glassware_crystal_stores',
  GOLF_COURSES_PUBLIC = 'golf_courses_public',
  GOVERNMENT_SERVICES = 'government_services',
  GROCERY_STORES_SUPERMARKETS = 'grocery_stores_supermarkets',
  HARDWARE_EQUIPMENT_AND_SUPPLIES = 'hardware_equipment_and_supplies',
  HARDWARE_STORES = 'hardware_stores',
  HEALTH_AND_BEAUTY_SPAS = 'health_and_beauty_spas',
  HEARING_AIDS_SALES_AND_SUPPLIES = 'hearing_aids_sales_and_supplies',
  HEATING_PLUMBING_A_C = 'heating_plumbing_a_c',
  HOBBY_TOY_AND_GAME_SHOPS = 'hobby_toy_and_game_shops',
  HOME_SUPPLY_WAREHOUSE_STORES = 'home_supply_warehouse_stores',
  HOSPITALS = 'hospitals',
  HOTELS_MOTELS_AND_RESORTS = 'hotels_motels_and_resorts',
  HOUSEHOLD_APPLIANCE_STORES = 'household_appliance_stores',
  INDUSTRIAL_SUPPLIES = 'industrial_supplies',
  INFORMATION_RETRIEVAL_SERVICES = 'information_retrieval_services',
  INSURANCE_DEFAULT = 'insurance_default',
  INSURANCE_UNDERWRITING_PREMIUMS = 'insurance_underwriting_premiums',
  INTRA_COMPANY_PURCHASES = 'intra_company_purchases',
  JEWELRY_STORES_WATCHES_CLOCKS_AND_SILVERWARE_STORES = 'jewelry_stores_watches_clocks_and_silverware_stores',
  LANDSCAPING_SERVICES = 'landscaping_services',
  LAUNDRIES = 'laundries',
  LAUNDRY_CLEANING_SERVICES = 'laundry_cleaning_services',
  LEGAL_SERVICES_ATTORNEYS = 'legal_services_attorneys',
  LUGGAGE_AND_LEATHER_GOODS_STORES = 'luggage_and_leather_goods_stores',
  LUMBER_BUILDING_MATERIALS_STORES = 'lumber_building_materials_stores',
  MANUAL_CASH_DISBURSE = 'manual_cash_disburse',
  MARINAS_SERVICE_AND_SUPPLIES = 'marinas_service_and_supplies',
  MASONRY_STONEWORK_AND_PLASTER = 'masonry_stonework_and_plaster',
  MASSAGE_PARLORS = 'massage_parlors',
  MEDICAL_AND_DENTAL_LABS = 'medical_and_dental_labs',
  MEDICAL_DENTAL_OPHTHALMIC_AND_HOSPITAL_EQUIPMENT_AND_SUPPLIES = 'medical_dental_ophthalmic_and_hospital_equipment_and_supplies',
  MEDICAL_SERVICES = 'medical_services',
  MEMBERSHIP_ORGANIZATIONS = 'membership_organizations',
  MENS_AND_BOYS_CLOTHING_AND_ACCESSORIES_STORES = 'mens_and_boys_clothing_and_accessories_stores',
  MENS_WOMENS_CLOTHING_STORES = 'mens_womens_clothing_stores',
  METAL_SERVICE_CENTERS = 'metal_service_centers',
  MISCELLANEOUS = 'miscellaneous',
  MISCELLANEOUS_APPAREL_AND_ACCESSORY_SHOPS = 'miscellaneous_apparel_and_accessory_shops',
  MISCELLANEOUS_AUTO_DEALERS = 'miscellaneous_auto_dealers',
  MISCELLANEOUS_BUSINESS_SERVICES = 'miscellaneous_business_services',
  MISCELLANEOUS_FOOD_STORES = 'miscellaneous_food_stores',
  MISCELLANEOUS_GENERAL_MERCHANDISE = 'miscellaneous_general_merchandise',
  MISCELLANEOUS_GENERAL_SERVICES = 'miscellaneous_general_services',
  MISCELLANEOUS_HOME_FURNISHING_SPECIALTY_STORES = 'miscellaneous_home_furnishing_specialty_stores',
  MISCELLANEOUS_PUBLISHING_AND_PRINTING = 'miscellaneous_publishing_and_printing',
  MISCELLANEOUS_RECREATION_SERVICES = 'miscellaneous_recreation_services',
  MISCELLANEOUS_REPAIR_SHOPS = 'miscellaneous_repair_shops',
  MISCELLANEOUS_SPECIALTY_RETAIL = 'miscellaneous_specialty_retail',
  MOBILE_HOME_DEALERS = 'mobile_home_dealers',
  MOTION_PICTURE_THEATERS = 'motion_picture_theaters',
  MOTOR_FREIGHT_CARRIERS_AND_TRUCKING = 'motor_freight_carriers_and_trucking',
  MOTOR_HOMES_DEALERS = 'motor_homes_dealers',
  MOTOR_VEHICLE_SUPPLIES_AND_NEW_PARTS = 'motor_vehicle_supplies_and_new_parts',
  MOTORCYCLE_SHOPS_AND_DEALERS = 'motorcycle_shops_and_dealers',
  MOTORCYCLE_SHOPS_DEALERS = 'motorcycle_shops_dealers',
  MUSIC_STORES_MUSICAL_INSTRUMENTS_PIANOS_AND_SHEET_MUSIC = 'music_stores_musical_instruments_pianos_and_sheet_music',
  NEWS_DEALERS_AND_NEWSSTANDS = 'news_dealers_and_newsstands',
  NON_FI_MONEY_ORDERS = 'non_fi_money_orders',
  NON_FI_STORED_VALUE_CARD_PURCHASE_LOAD = 'non_fi_stored_value_card_purchase_load',
  NONDURABLE_GOODS = 'nondurable_goods',
  NURSERIES_LAWN_AND_GARDEN_SUPPLY_STORES = 'nurseries_lawn_and_garden_supply_stores',
  NURSING_PERSONAL_CARE = 'nursing_personal_care',
  OFFICE_AND_COMMERCIAL_FURNITURE = 'office_and_commercial_furniture',
  OPTICIANS_EYEGLASSES = 'opticians_eyeglasses',
  OPTOMETRISTS_OPHTHALMOLOGIST = 'optometrists_ophthalmologist',
  ORTHOPEDIC_GOODS_PROSTHETIC_DEVICES = 'orthopedic_goods_prosthetic_devices',
  OSTEOPATHS = 'osteopaths',
  PACKAGE_STORES_BEER_WINE_AND_LIQUOR = 'package_stores_beer_wine_and_liquor',
  PAINTS_VARNISHES_AND_SUPPLIES = 'paints_varnishes_and_supplies',
  PARKING_LOTS_GARAGES = 'parking_lots_garages',
  PASSENGER_RAILWAYS = 'passenger_railways',
  PAWN_SHOPS = 'pawn_shops',
  PET_SHOPS_PET_FOOD_AND_SUPPLIES = 'pet_shops_pet_food_and_supplies',
  PETROLEUM_AND_PETROLEUM_PRODUCTS = 'petroleum_and_petroleum_products',
  PHOTO_DEVELOPING = 'photo_developing',
  PHOTOGRAPHIC_PHOTOCOPY_MICROFILM_EQUIPMENT_AND_SUPPLIES = 'photographic_photocopy_microfilm_equipment_and_supplies',
  PHOTOGRAPHIC_STUDIOS = 'photographic_studios',
  PICTURE_VIDEO_PRODUCTION = 'picture_video_production',
  PIECE_GOODS_NOTIONS_AND_OTHER_DRY_GOODS = 'piece_goods_notions_and_other_dry_goods',
  PLUMBING_HEATING_EQUIPMENT_AND_SUPPLIES = 'plumbing_heating_equipment_and_supplies',
  POLITICAL_ORGANIZATIONS = 'political_organizations',
  POSTAL_SERVICES_GOVERNMENT_ONLY = 'postal_services_government_only',
  PRECIOUS_STONES_AND_METALS_WATCHES_AND_JEWELRY = 'precious_stones_and_metals_watches_and_jewelry',
  PROFESSIONAL_SERVICES = 'professional_services',
  PUBLIC_WAREHOUSING_AND_STORAGE = 'public_warehousing_and_storage',
  QUICK_COPY_REPRO_AND_BLUEPRINT = 'quick_copy_repro_and_blueprint',
  RAILROADS = 'railroads',
  REAL_ESTATE_AGENTS_AND_MANAGERS_RENTALS = 'real_estate_agents_and_managers_rentals',
  RECORD_STORES = 'record_stores',
  RECREATIONAL_VEHICLE_RENTALS = 'recreational_vehicle_rentals',
  RELIGIOUS_GOODS_STORES = 'religious_goods_stores',
  RELIGIOUS_ORGANIZATIONS = 'religious_organizations',
  ROOFING_SIDING_SHEET_METAL = 'roofing_siding_sheet_metal',
  SECRETARIAL_SUPPORT_SERVICES = 'secretarial_support_services',
  SECURITY_BROKERS_DEALERS = 'security_brokers_dealers',
  SERVICE_STATIONS = 'service_stations',
  SEWING_NEEDLEWORK_FABRIC_AND_PIECE_GOODS_STORES = 'sewing_needlework_fabric_and_piece_goods_stores',
  SHOE_REPAIR_HAT_CLEANING = 'shoe_repair_hat_cleaning',
  SHOE_STORES = 'shoe_stores',
  SMALL_APPLIANCE_REPAIR = 'small_appliance_repair',
  SNOWMOBILE_DEALERS = 'snowmobile_dealers',
  SPECIAL_TRADE_SERVICES = 'special_trade_services',
  SPECIALTY_CLEANING = 'specialty_cleaning',
  SPORTING_GOODS_STORES = 'sporting_goods_stores',
  SPORTING_RECREATION_CAMPS = 'sporting_recreation_camps',
  SPORTS_AND_RIDING_APPAREL_STORES = 'sports_and_riding_apparel_stores',
  SPORTS_CLUBS_FIELDS = 'sports_clubs_fields',
  STAMP_AND_COIN_STORES = 'stamp_and_coin_stores',
  STATIONARY_OFFICE_SUPPLIES_PRINTING_AND_WRITING_PAPER = 'stationary_office_supplies_printing_and_writing_paper',
  STATIONERY_STORES_OFFICE_AND_SCHOOL_SUPPLY_STORES = 'stationery_stores_office_and_school_supply_stores',
  SWIMMING_POOLS_SALES = 'swimming_pools_sales',
  T_UI_TRAVEL_GERMANY = 't_ui_travel_germany',
  TAILORS_ALTERATIONS = 'tailors_alterations',
  TAX_PAYMENTS_GOVERNMENT_AGENCIES = 'tax_payments_government_agencies',
  TAX_PREPARATION_SERVICES = 'tax_preparation_services',
  TAXICABS_LIMOUSINES = 'taxicabs_limousines',
  TELECOMMUNICATION_EQUIPMENT_AND_TELEPHONE_SALES = 'telecommunication_equipment_and_telephone_sales',
  TELECOMMUNICATION_SERVICES = 'telecommunication_services',
  TELEGRAPH_SERVICES = 'telegraph_services',
  TENT_AND_AWNING_SHOPS = 'tent_and_awning_shops',
  TESTING_LABORATORIES = 'testing_laboratories',
  THEATRICAL_TICKET_AGENCIES = 'theatrical_ticket_agencies',
  TIMESHARES = 'timeshares',
  TIRE_RETREADING_AND_REPAIR = 'tire_retreading_and_repair',
  TOLLS_BRIDGE_FEES = 'tolls_bridge_fees',
  TOURIST_ATTRACTIONS_AND_EXHIBITS = 'tourist_attractions_and_exhibits',
  TOWING_SERVICES = 'towing_services',
  TRAILER_PARKS_CAMPGROUNDS = 'trailer_parks_campgrounds',
  TRANSPORTATION_SERVICES = 'transportation_services',
  TRAVEL_AGENCIES_TOUR_OPERATORS = 'travel_agencies_tour_operators',
  TRUCK_STOP_ITERATION = 'truck_stop_iteration',
  TRUCK_UTILITY_TRAILER_RENTALS = 'truck_utility_trailer_rentals',
  TYPESETTING_PLATE_MAKING_AND_RELATED_SERVICES = 'typesetting_plate_making_and_related_services',
  TYPEWRITER_STORES = 'typewriter_stores',
  U_S_FEDERAL_GOVERNMENT_AGENCIES_OR_DEPARTMENTS = 'u_s_federal_government_agencies_or_departments',
  UNIFORMS_COMMERCIAL_CLOTHING = 'uniforms_commercial_clothing',
  USED_MERCHANDISE_AND_SECONDHAND_STORES = 'used_merchandise_and_secondhand_stores',
  UTILITIES = 'utilities',
  VARIETY_STORES = 'variety_stores',
  VETERINARY_SERVICES = 'veterinary_services',
  VIDEO_AMUSEMENT_GAME_SUPPLIES = 'video_amusement_game_supplies',
  VIDEO_GAME_ARCADES = 'video_game_arcades',
  VIDEO_TAPE_RENTAL_STORES = 'video_tape_rental_stores',
  VOCATIONAL_TRADE_SCHOOLS = 'vocational_trade_schools',
  WATCH_JEWELRY_REPAIR = 'watch_jewelry_repair',
  WELDING_REPAIR = 'welding_repair',
  WHOLESALE_CLUBS = 'wholesale_clubs',
  WIG_AND_TOUPEE_STORES = 'wig_and_toupee_stores',
  WIRES_MONEY_ORDERS = 'wires_money_orders',
  WOMENS_ACCESSORY_AND_SPECIALTY_SHOPS = 'womens_accessory_and_specialty_shops',
  WOMENS_READY_TO_WEAR_STORES = 'womens_ready_to_wear_stores',
  WRECKING_AND_SALVAGE_YARDS = 'wrecking_and_salvage_yards'
}

export enum Interval7 {
  ALL_TIME = 'all_time',
  DAILY = 'daily',
  MONTHLY = 'monthly',
  PER_AUTHORIZATION = 'per_authorization',
  WEEKLY = 'weekly',
  YEARLY = 'yearly'
}

export enum Status26 {
  ACTIVE = 'active',
  BLOCKED = 'blocked',
  INACTIVE = 'inactive'
}

export enum Type34 {
  COMPANY = 'company',
  INDIVIDUAL = 'individual'
}

export enum Object52 {
  ISSUING_CARD = 'issuing.card'
}

export enum ReplacementReason {
  DAMAGED = 'damaged',
  EXPIRED = 'expired',
  LOST = 'lost',
  STOLEN = 'stolen'
}

/** Where and how the card will be shipped. */
export type Shipping10 = {
  address?: Maybe<Address>;
  /** The delivery company that shipped a card. */
  carrier?: Maybe<Carrier9>;
  /** A unix timestamp representing a best estimate of when the card will be delivered. */
  eta?: Maybe<Scalars['Int']>;
  /** Recipient name. */
  name?: Maybe<Scalars['String']>;
  /** Shipment service, such as `standard` or `express`. */
  service?: Maybe<Service>;
  /** The delivery status of the card. */
  status?: Maybe<Status27>;
  /** A tracking number for a card shipment. */
  trackingNumber?: Maybe<Scalars['String']>;
  /** A link to the shipping carrier's site where you can view detailed information about a card shipment. */
  trackingUrl?: Maybe<Scalars['String']>;
  /** Packaging options. */
  type?: Maybe<Type35>;
};

export enum Carrier9 {
  DHL = 'dhl',
  FEDEX = 'fedex',
  ROYAL_MAIL = 'royal_mail',
  USPS = 'usps'
}

export enum Service {
  EXPRESS = 'express',
  PRIORITY = 'priority',
  STANDARD = 'standard'
}

export enum Status27 {
  CANCELED = 'canceled',
  DELIVERED = 'delivered',
  FAILURE = 'failure',
  PENDING = 'pending',
  RETURNED = 'returned',
  SHIPPED = 'shipped'
}

export enum Type35 {
  BULK = 'bulk',
  INDIVIDUAL = 'individual'
}

export type IssuingCardAuthorizationControls = {
  /** Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations to allow. All other categories will be blocked. Cannot be set with `blocked_categories`. */
  allowedCategories?: Maybe<Array<Maybe<AllowedCategoriesListItem>>>;
  /** Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations to decline. All other categories will be allowed. Cannot be set with `allowed_categories`. */
  blockedCategories?: Maybe<Array<Maybe<BlockedCategoriesListItem>>>;
  /** Limit spending with amount-based rules that apply across any cards this card replaced (i.e., its `replacement_for` card and _that_ card's `replacement_for` card, up the chain). */
  spendingLimits?: Maybe<Array<Maybe<IssuingCardSpendingLimit>>>;
  /** Currency of the amounts within `spending_limits`. Always the same as the currency of the card. */
  spendingLimitsCurrency?: Maybe<Scalars['String']>;
};

export type IssuingCardSpendingLimit = {
  /** Maximum amount allowed to spend per interval. */
  amount: Scalars['Int'];
  /** Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) this limit applies to. Omitting this field will apply the limit to all categories. */
  categories?: Maybe<Array<Maybe<CategoriesListItem>>>;
  /** Interval (or event) to which the amount applies. */
  interval: Interval7;
};

export enum Status28 {
  ACTIVE = 'active',
  CANCELED = 'canceled',
  INACTIVE = 'inactive'
}

export enum Type36 {
  PHYSICAL = 'physical',
  VIRTUAL = 'virtual'
}

export type IssuingAuthorizationMerchantData = {
  /** A categorization of the seller's type of business. See our [merchant categories guide](https://stripe.com/docs/issuing/merchant-categories) for a list of possible values. */
  category: Scalars['String'];
  /** The merchant category code for the seller’s business */
  categoryCode: Scalars['String'];
  /** City where the seller is located */
  city?: Maybe<Scalars['String']>;
  /** Country where the seller is located */
  country?: Maybe<Scalars['String']>;
  /** Name of the seller */
  name?: Maybe<Scalars['String']>;
  /** Identifier assigned to the seller by the card brand */
  networkId: Scalars['String'];
  /** Postal code where the seller is located */
  postalCode?: Maybe<Scalars['String']>;
  /** State where the seller is located */
  state?: Maybe<Scalars['String']>;
};

export enum Object53 {
  ISSUING_AUTHORIZATION = 'issuing.authorization'
}

/** The pending authorization request. This field will only be non-null during an `issuing_authorization.request` webhook. */
export type PendingRequest = {
  /** The additional amount Stripe will hold if the authorization is approved, in the card's [currency](https://stripe.com/docs/api#issuing_authorization_object-pending-request-currency) and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
  amount?: Maybe<Scalars['Int']>;
  /** Detailed breakdown of amount components. These amounts are denominated in `currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
  amountDetails?: Maybe<AmountDetails>;
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency?: Maybe<Scalars['String']>;
  /** If set `true`, you may provide [amount](https://stripe.com/docs/api/issuing/authorizations/approve#approve_issuing_authorization-amount) to control how much to hold for the authorization. */
  isAmountControllable?: Maybe<Scalars['Boolean']>;
  /** The amount the merchant is requesting to be authorized in the `merchant_currency`. The amount is in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
  merchantAmount?: Maybe<Scalars['Int']>;
  /** The local currency the merchant is requesting to authorize. */
  merchantCurrency?: Maybe<Scalars['String']>;
};

export type IssuingAuthorizationRequest = {
  /** The `pending_request.amount` at the time of the request, presented in your card's currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). Stripe held this amount from your account to fund the authorization if the request was approved. */
  amount: Scalars['Int'];
  /** Detailed breakdown of amount components. These amounts are denominated in `currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
  amountDetails?: Maybe<AmountDetails>;
  /** Whether this request was approved. */
  approved: Scalars['Boolean'];
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created: Scalars['Int'];
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency: Scalars['String'];
  /** The `pending_request.merchant_amount` at the time of the request, presented in the `merchant_currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
  merchantAmount: Scalars['Int'];
  /** The currency that was collected by the merchant and presented to the cardholder for the authorization. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  merchantCurrency: Scalars['String'];
  /** The reason for the approval or decline. */
  reason: Reason13;
};

export enum Reason13 {
  ACCOUNT_DISABLED = 'account_disabled',
  CARD_ACTIVE = 'card_active',
  CARD_INACTIVE = 'card_inactive',
  CARDHOLDER_INACTIVE = 'cardholder_inactive',
  CARDHOLDER_VERIFICATION_REQUIRED = 'cardholder_verification_required',
  INSUFFICIENT_FUNDS = 'insufficient_funds',
  NOT_ALLOWED = 'not_allowed',
  SPENDING_CONTROLS = 'spending_controls',
  SUSPECTED_FRAUD = 'suspected_fraud',
  VERIFICATION_FAILED = 'verification_failed',
  WEBHOOK_APPROVED = 'webhook_approved',
  WEBHOOK_DECLINED = 'webhook_declined',
  WEBHOOK_TIMEOUT = 'webhook_timeout'
}

export enum Status29 {
  CLOSED = 'closed',
  PENDING = 'pending',
  REVERSED = 'reversed'
}

/**
 * Any use of an [issued card](https://stripe.com/docs/issuing) that results in funds entering or leaving
 * your Stripe account, such as a completed purchase or refund, is represented by an Issuing
 * `Transaction` object.
 *
 * Related guide: [Issued Card Transactions](https://stripe.com/docs/issuing/purchases/transactions).
 */
export type IssuingTransaction = {
  /** The transaction amount, which will be reflected in your balance. This amount is in your currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
  amount: Scalars['Int'];
  /** Detailed breakdown of amount components. These amounts are denominated in `currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
  amountDetails?: Maybe<AmountDetails2>;
  /** The `Authorization` object that led to this transaction. */
  authorization?: Maybe<Scalars['JSON']>;
  /** ID of the [balance transaction](https://stripe.com/docs/api/balance_transactions) associated with this transaction. */
  balanceTransaction?: Maybe<Scalars['JSON']>;
  /** The card used to make this transaction. */
  card: Scalars['JSON'];
  /** The cardholder to whom this transaction belongs. */
  cardholder?: Maybe<Scalars['JSON']>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created: Scalars['Int'];
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency: Scalars['String'];
  /** If you've disputed the transaction, the ID of the dispute. */
  dispute?: Maybe<Scalars['JSON']>;
  /** Unique identifier for the object. */
  id: Scalars['String'];
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: Scalars['Boolean'];
  /** The amount that the merchant will receive, denominated in `merchant_currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). It will be different from `amount` if the merchant is taking payment in a different currency. */
  merchantAmount: Scalars['Int'];
  /** The currency with which the merchant is taking payment. */
  merchantCurrency: Scalars['String'];
  merchantData: IssuingAuthorizationMerchantData;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata: Scalars['JSON'];
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object54;
  /** Additional purchase information that is optionally provided by the merchant. */
  purchaseDetails?: Maybe<PurchaseDetails>;
  /** The nature of the transaction. */
  type: Type38;
  /** The digital wallet used for this transaction. One of `apple_pay`, `google_pay`, or `samsung_pay`. */
  wallet?: Maybe<Wallet3>;
};

/** Detailed breakdown of amount components. These amounts are denominated in `currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
export type AmountDetails2 = {
  /** The fee charged by the ATM for the cash withdrawal. */
  atmFee?: Maybe<Scalars['Int']>;
};

export enum Object54 {
  ISSUING_TRANSACTION = 'issuing.transaction'
}

/** Additional purchase information that is optionally provided by the merchant. */
export type PurchaseDetails = {
  /** Information about the flight that was purchased with this transaction. */
  flight?: Maybe<Flight>;
  /** Information about fuel that was purchased with this transaction. */
  fuel?: Maybe<Fuel>;
  /** Information about lodging that was purchased with this transaction. */
  lodging?: Maybe<Lodging>;
  /** The line items in the purchase. */
  receipt?: Maybe<Array<Maybe<IssuingTransactionReceiptData>>>;
  /** A merchant-specific order number. */
  reference?: Maybe<Scalars['String']>;
};

/** Information about the flight that was purchased with this transaction. */
export type Flight = {
  /** The time that the flight departed. */
  departureAt?: Maybe<Scalars['Int']>;
  /** The name of the passenger. */
  passengerName?: Maybe<Scalars['String']>;
  /** Whether the ticket is refundable. */
  refundable?: Maybe<Scalars['Boolean']>;
  /** The legs of the trip. */
  segments?: Maybe<Array<Maybe<IssuingTransactionFlightDataLeg>>>;
  /** The travel agency that issued the ticket. */
  travelAgency?: Maybe<Scalars['String']>;
};

export type IssuingTransactionFlightDataLeg = {
  /** The three-letter IATA airport code of the flight's destination. */
  arrivalAirportCode?: Maybe<Scalars['String']>;
  /** The airline carrier code. */
  carrier?: Maybe<Scalars['String']>;
  /** The three-letter IATA airport code that the flight departed from. */
  departureAirportCode?: Maybe<Scalars['String']>;
  /** The flight number. */
  flightNumber?: Maybe<Scalars['String']>;
  /** The flight's service class. */
  serviceClass?: Maybe<Scalars['String']>;
  /** Whether a stopover is allowed on this flight. */
  stopoverAllowed?: Maybe<Scalars['Boolean']>;
};

/** Information about fuel that was purchased with this transaction. */
export type Fuel = {
  /** The type of fuel that was purchased. One of `diesel`, `unleaded_plus`, `unleaded_regular`, `unleaded_super`, or `other`. */
  type?: Maybe<Scalars['String']>;
  /** The units for `volume_decimal`. One of `us_gallon` or `liter`. */
  unit?: Maybe<Scalars['String']>;
  /** The cost in cents per each unit of fuel, represented as a decimal string with at most 12 decimal places. */
  unitCostDecimal?: Maybe<Scalars['String']>;
  /** The volume of the fuel that was pumped, represented as a decimal string with at most 12 decimal places. */
  volumeDecimal?: Maybe<Scalars['String']>;
};

/** Information about lodging that was purchased with this transaction. */
export type Lodging = {
  /** The time of checking into the lodging. */
  checkInAt?: Maybe<Scalars['Int']>;
  /** The number of nights stayed at the lodging. */
  nights?: Maybe<Scalars['Int']>;
};

export type IssuingTransactionReceiptData = {
  /** The description of the item. The maximum length of this field is 26 characters. */
  description?: Maybe<Scalars['String']>;
  /** The quantity of the item. */
  quantity?: Maybe<Scalars['Float']>;
  /** The total for this line item in cents. */
  total?: Maybe<Scalars['Int']>;
  /** The unit cost of the item in cents. */
  unitCost?: Maybe<Scalars['Int']>;
};

export enum Type38 {
  CAPTURE = 'capture',
  REFUND = 'refund'
}

export enum Wallet3 {
  APPLE_PAY = 'apple_pay',
  GOOGLE_PAY = 'google_pay',
  SAMSUNG_PAY = 'samsung_pay'
}

export type IssuingAuthorizationVerificationData = {
  /** Whether the cardholder provided an address first line and if it matched the cardholder’s `billing.address.line1`. */
  addressLine1Check: AddressLine1Check14;
  /** Whether the cardholder provided a postal code and if it matched the cardholder’s `billing.address.postal_code`. */
  addressPostalCodeCheck: AddressPostalCodeCheck3;
  /** Whether the cardholder provided a CVC and if it matched Stripe’s record. */
  cvcCheck: CvcCheck14;
  /** Whether the cardholder provided an expiry date and if it matched Stripe’s record. */
  expiryCheck: ExpiryCheck;
};

export enum AddressLine1Check14 {
  MATCH = 'match',
  MISMATCH = 'mismatch',
  NOT_PROVIDED = 'not_provided'
}

export enum AddressPostalCodeCheck3 {
  MATCH = 'match',
  MISMATCH = 'mismatch',
  NOT_PROVIDED = 'not_provided'
}

export enum CvcCheck14 {
  MATCH = 'match',
  MISMATCH = 'mismatch',
  NOT_PROVIDED = 'not_provided'
}

export enum ExpiryCheck {
  MATCH = 'match',
  MISMATCH = 'mismatch',
  NOT_PROVIDED = 'not_provided'
}

export enum Status57 {
  CLOSED = 'closed',
  PENDING = 'pending',
  REVERSED = 'reversed'
}

export type V1IssuingCardholders2 = {
  data: Array<Maybe<IssuingCardholder>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

export enum Status58 {
  ACTIVE = 'active',
  BLOCKED = 'blocked',
  INACTIVE = 'inactive'
}

export enum Type69 {
  COMPANY = 'company',
  INDIVIDUAL = 'individual'
}

export type V1IssuingCards2 = {
  data: Array<Maybe<IssuingCard2>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

export enum Status59 {
  ACTIVE = 'active',
  CANCELED = 'canceled',
  INACTIVE = 'inactive'
}

export enum Type70 {
  PHYSICAL = 'physical',
  VIRTUAL = 'virtual'
}

export type IssuingDisputeList = {
  data: Array<Maybe<IssuingDispute>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

/**
 * As a [card issuer](https://stripe.com/docs/issuing), you can dispute transactions that the cardholder does not recognize, suspects to be fraudulent, or has other issues with.
 *
 * Related guide: [Disputing Transactions](https://stripe.com/docs/issuing/purchases/disputes)
 */
export type IssuingDispute = {
  /** Disputed amount. Usually the amount of the `transaction`, but can differ (usually because of currency fluctuation). */
  amount: Scalars['Int'];
  /** List of balance transactions associated with the dispute. */
  balanceTransactions?: Maybe<Array<Maybe<BalanceTransaction3>>>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created: Scalars['Int'];
  /** The currency the `transaction` was made in. */
  currency: Scalars['String'];
  evidence: IssuingDisputeEvidence;
  /** Unique identifier for the object. */
  id: Scalars['String'];
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: Scalars['Boolean'];
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata: Scalars['JSON'];
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object55;
  /** Current status of the dispute. */
  status: Status34;
  /** The transaction being disputed. */
  transaction: Scalars['JSON'];
};

export type IssuingDisputeEvidence = {
  canceled?: Maybe<IssuingDisputeCanceledEvidence>;
  duplicate?: Maybe<IssuingDisputeDuplicateEvidence>;
  fraudulent?: Maybe<IssuingDisputeFraudulentEvidence>;
  merchandiseNotAsDescribed?: Maybe<IssuingDisputeMerchandiseNotAsDescribedEvidence>;
  notReceived?: Maybe<IssuingDisputeNotReceivedEvidence>;
  other?: Maybe<IssuingDisputeOtherEvidence>;
  /** The reason for filing the dispute. Its value will match the field containing the evidence. */
  reason: Reason14;
  serviceNotAsDescribed?: Maybe<IssuingDisputeServiceNotAsDescribedEvidence>;
};

export type IssuingDisputeCanceledEvidence = {
  /** (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute. */
  additionalDocumentation?: Maybe<Scalars['JSON']>;
  /** Date when order was canceled. */
  canceledAt?: Maybe<Scalars['Int']>;
  /** Whether the cardholder was provided with a cancellation policy. */
  cancellationPolicyProvided?: Maybe<Scalars['Boolean']>;
  /** Reason for canceling the order. */
  cancellationReason?: Maybe<Scalars['String']>;
  /** Date when the cardholder expected to receive the product. */
  expectedAt?: Maybe<Scalars['Int']>;
  /** Explanation of why the cardholder is disputing this transaction. */
  explanation?: Maybe<Scalars['String']>;
  /** Description of the merchandise or service that was purchased. */
  productDescription?: Maybe<Scalars['String']>;
  /** Whether the product was a merchandise or service. */
  productType?: Maybe<ProductType>;
  /** Result of cardholder's attempt to return the product. */
  returnStatus?: Maybe<ReturnStatus>;
  /** Date when the product was returned or attempted to be returned. */
  returnedAt?: Maybe<Scalars['Int']>;
};

export enum ProductType {
  MERCHANDISE = 'merchandise',
  SERVICE = 'service'
}

export enum ReturnStatus {
  MERCHANT_REJECTED = 'merchant_rejected',
  SUCCESSFUL = 'successful'
}

export type IssuingDisputeDuplicateEvidence = {
  /** (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute. */
  additionalDocumentation?: Maybe<Scalars['JSON']>;
  /** (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Copy of the card statement showing that the product had already been paid for. */
  cardStatement?: Maybe<Scalars['JSON']>;
  /** (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Copy of the receipt showing that the product had been paid for in cash. */
  cashReceipt?: Maybe<Scalars['JSON']>;
  /** (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Image of the front and back of the check that was used to pay for the product. */
  checkImage?: Maybe<Scalars['JSON']>;
  /** Explanation of why the cardholder is disputing this transaction. */
  explanation?: Maybe<Scalars['String']>;
  /** Transaction (e.g., ipi_...) that the disputed transaction is a duplicate of. Of the two or more transactions that are copies of each other, this is original undisputed one. */
  originalTransaction?: Maybe<Scalars['String']>;
};

export type IssuingDisputeFraudulentEvidence = {
  /** (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute. */
  additionalDocumentation?: Maybe<Scalars['JSON']>;
  /** Explanation of why the cardholder is disputing this transaction. */
  explanation?: Maybe<Scalars['String']>;
};

export type IssuingDisputeMerchandiseNotAsDescribedEvidence = {
  /** (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute. */
  additionalDocumentation?: Maybe<Scalars['JSON']>;
  /** Explanation of why the cardholder is disputing this transaction. */
  explanation?: Maybe<Scalars['String']>;
  /** Date when the product was received. */
  receivedAt?: Maybe<Scalars['Int']>;
  /** Description of the cardholder's attempt to return the product. */
  returnDescription?: Maybe<Scalars['String']>;
  /** Result of cardholder's attempt to return the product. */
  returnStatus?: Maybe<ReturnStatus>;
  /** Date when the product was returned or attempted to be returned. */
  returnedAt?: Maybe<Scalars['Int']>;
};

export type IssuingDisputeNotReceivedEvidence = {
  /** (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute. */
  additionalDocumentation?: Maybe<Scalars['JSON']>;
  /** Date when the cardholder expected to receive the product. */
  expectedAt?: Maybe<Scalars['Int']>;
  /** Explanation of why the cardholder is disputing this transaction. */
  explanation?: Maybe<Scalars['String']>;
  /** Description of the merchandise or service that was purchased. */
  productDescription?: Maybe<Scalars['String']>;
  /** Whether the product was a merchandise or service. */
  productType?: Maybe<ProductType>;
};

export type IssuingDisputeOtherEvidence = {
  /** (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute. */
  additionalDocumentation?: Maybe<Scalars['JSON']>;
  /** Explanation of why the cardholder is disputing this transaction. */
  explanation?: Maybe<Scalars['String']>;
  /** Description of the merchandise or service that was purchased. */
  productDescription?: Maybe<Scalars['String']>;
  /** Whether the product was a merchandise or service. */
  productType?: Maybe<ProductType>;
};

export enum Reason14 {
  CANCELED = 'canceled',
  DUPLICATE = 'duplicate',
  FRAUDULENT = 'fraudulent',
  MERCHANDISE_NOT_AS_DESCRIBED = 'merchandise_not_as_described',
  NOT_RECEIVED = 'not_received',
  OTHER = 'other',
  SERVICE_NOT_AS_DESCRIBED = 'service_not_as_described'
}

export type IssuingDisputeServiceNotAsDescribedEvidence = {
  /** (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute. */
  additionalDocumentation?: Maybe<Scalars['JSON']>;
  /** Date when order was canceled. */
  canceledAt?: Maybe<Scalars['Int']>;
  /** Reason for canceling the order. */
  cancellationReason?: Maybe<Scalars['String']>;
  /** Explanation of why the cardholder is disputing this transaction. */
  explanation?: Maybe<Scalars['String']>;
  /** Date when the product was received. */
  receivedAt?: Maybe<Scalars['Int']>;
};

export enum Object55 {
  ISSUING_DISPUTE = 'issuing.dispute'
}

export enum Status34 {
  EXPIRED = 'expired',
  LOST = 'lost',
  SUBMITTED = 'submitted',
  UNSUBMITTED = 'unsubmitted',
  WON = 'won'
}

export enum Status60 {
  EXPIRED = 'expired',
  LOST = 'lost',
  SUBMITTED = 'submitted',
  UNSUBMITTED = 'unsubmitted',
  WON = 'won'
}

export type V1IssuingSettlements2 = {
  data: Array<Maybe<IssuingSettlement>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

/** When a non-stripe BIN is used, any use of an [issued card](https://stripe.com/docs/issuing) must be settled directly with the card network. The net amount owed is represented by an Issuing `Settlement` object. */
export type IssuingSettlement = {
  /** The Bank Identification Number reflecting this settlement record. */
  bin: Scalars['String'];
  /** The date that the transactions are cleared and posted to user's accounts. */
  clearingDate: Scalars['Int'];
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created: Scalars['Int'];
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency: Scalars['String'];
  /** Unique identifier for the object. */
  id: Scalars['String'];
  /** The total interchange received as reimbursement for the transactions. */
  interchangeFees: Scalars['Int'];
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: Scalars['Boolean'];
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata: Scalars['JSON'];
  /** The total net amount required to settle with the network. */
  netTotal: Scalars['Int'];
  /** The card network for this settlement report. One of ["visa"] */
  network: Network5;
  /** The total amount of fees owed to the network. */
  networkFees: Scalars['Int'];
  /** The Settlement Identification Number assigned by the network. */
  networkSettlementIdentifier: Scalars['String'];
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object56;
  /** One of `international` or `uk_national_net`. */
  settlementService: Scalars['String'];
  /** The total number of transactions reflected in this settlement. */
  transactionCount: Scalars['Int'];
  /** The total transaction amount reflected in this settlement. */
  transactionVolume: Scalars['Int'];
};

export enum Network5 {
  VISA = 'visa'
}

export enum Object56 {
  ISSUING_SETTLEMENT = 'issuing.settlement'
}

export type V1IssuingTransactions2 = {
  data: Array<Maybe<IssuingTransaction>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

export enum Type71 {
  CAPTURE = 'capture',
  REFUND = 'refund'
}

/** A Mandate is a record of the permission a customer has given you to debit their payment method. */
export type Mandate6 = {
  customerAcceptance: CustomerAcceptance;
  /** Unique identifier for the object. */
  id: Scalars['String'];
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: Scalars['Boolean'];
  multiUse?: Maybe<Scalars['JSON']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object57;
  /** ID of the payment method associated with this mandate. */
  paymentMethod: Scalars['JSON'];
  paymentMethodDetails: MandatePaymentMethodDetails;
  singleUse?: Maybe<MandateSingleUse>;
  /** The status of the mandate, which indicates whether it can be used to initiate a payment. */
  status: Status35;
  /** The type of the mandate. */
  type: Type43;
};

export type CustomerAcceptance = {
  /** The time at which the customer accepted the Mandate. */
  acceptedAt?: Maybe<Scalars['Int']>;
  offline?: Maybe<Scalars['JSON']>;
  online?: Maybe<OnlineAcceptance>;
  /** The type of customer acceptance information included with the Mandate. One of `online` or `offline`. */
  type: Type41;
};

export type OnlineAcceptance = {
  /** The IP address from which the Mandate was accepted by the customer. */
  ipAddress?: Maybe<Scalars['String']>;
  /** The user agent of the browser from which the Mandate was accepted by the customer. */
  userAgent?: Maybe<Scalars['String']>;
};

export enum Type41 {
  OFFLINE = 'offline',
  ONLINE = 'online'
}

export enum Object57 {
  MANDATE = 'mandate'
}

export type MandatePaymentMethodDetails = {
  acssDebit?: Maybe<MandateAcssDebit>;
  auBecsDebit?: Maybe<MandateAuBecsDebit>;
  bacsDebit?: Maybe<MandateBacsDebit>;
  card?: Maybe<Scalars['JSON']>;
  sepaDebit?: Maybe<MandateSepaDebit>;
  /** The type of the payment method associated with this mandate. An additional hash is included on `payment_method_details` with a name matching this value. It contains mandate information specific to the payment method. */
  type: Scalars['String'];
};

export type MandateAcssDebit = {
  /** Description of the interval. Only required if the 'payment_schedule' parameter is 'interval' or 'combined'. */
  intervalDescription?: Maybe<Scalars['String']>;
  /** Payment schedule for the mandate. */
  paymentSchedule: PaymentSchedule3;
  /** Transaction type of the mandate. */
  transactionType: TransactionType3;
};

export enum PaymentSchedule3 {
  COMBINED = 'combined',
  INTERVAL = 'interval',
  SPORADIC = 'sporadic'
}

export enum TransactionType3 {
  BUSINESS = 'business',
  PERSONAL = 'personal'
}

export type MandateAuBecsDebit = {
  /** The URL of the mandate. This URL generally contains sensitive information about the customer and should be shared with them exclusively. */
  url: Scalars['String'];
};

export type MandateBacsDebit = {
  /** The status of the mandate on the Bacs network. Can be one of `pending`, `revoked`, `refused`, or `accepted`. */
  networkStatus: NetworkStatus2;
  /** The unique reference identifying the mandate on the Bacs network. */
  reference: Scalars['String'];
  /** The URL that will contain the mandate that the customer has signed. */
  url: Scalars['String'];
};

export enum NetworkStatus2 {
  ACCEPTED = 'accepted',
  PENDING = 'pending',
  REFUSED = 'refused',
  REVOKED = 'revoked'
}

export type MandateSepaDebit = {
  /** The unique reference of the mandate. */
  reference: Scalars['String'];
  /** The URL of the mandate. This URL generally contains sensitive information about the customer and should be shared with them exclusively. */
  url: Scalars['String'];
};

export type MandateSingleUse = {
  /** On a single use mandate, the amount of the payment. */
  amount: Scalars['Int'];
  /** On a single use mandate, the currency of the payment. */
  currency: Scalars['String'];
};

export enum Status35 {
  ACTIVE = 'active',
  INACTIVE = 'inactive',
  PENDING = 'pending'
}

export enum Type43 {
  MULTI_USE = 'multi_use',
  SINGLE_USE = 'single_use'
}

export type V1OrderReturns2 = {
  data: Array<Maybe<OrderReturn>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

/**
 * A return represents the full or partial return of a number of [order items](https://stripe.com/docs/api#order_items).
 * Returns always belong to an order, and may optionally contain a refund.
 *
 * Related guide: [Handling Returns](https://stripe.com/docs/orders/guide#handling-returns).
 */
export type OrderReturn = {
  /** A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount for the returned line item. */
  amount: Scalars['Int'];
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created: Scalars['Int'];
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency: Scalars['String'];
  /** Unique identifier for the object. */
  id: Scalars['String'];
  /** The items included in this order return. */
  items: Array<Maybe<OrderItem>>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object59;
  /** The order that this return includes items from. */
  order?: Maybe<Scalars['JSON']>;
  /** The ID of the refund issued for this return. */
  refund?: Maybe<Scalars['JSON']>;
};

export enum Object58 {
  ORDER_ITEM = 'order_item'
}

export enum Object59 {
  ORDER_RETURN = 'order_return'
}

export type V1Orders2 = {
  data: Array<Maybe<Order3>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

/**
 * Order objects are created to handle end customers' purchases of previously
 * defined [products](https://stripe.com/docs/api#products). You can create, retrieve, and pay individual orders, as well
 * as list all orders. Orders are identified by a unique, random ID.
 *
 * Related guide: [Tax, Shipping, and Inventory](https://stripe.com/docs/orders).
 */
export type Order3 = {
  /** A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount for the order. */
  amount: Scalars['Int'];
  /** The total amount that was returned to the customer. */
  amountReturned?: Maybe<Scalars['Int']>;
  /** ID of the Connect Application that created the order. */
  application?: Maybe<Scalars['String']>;
  /** A fee in cents that will be applied to the order and transferred to the application owner’s Stripe account. The request must be made with an OAuth key or the Stripe-Account header in order to take an application fee. For more information, see the application fees documentation. */
  applicationFee?: Maybe<Scalars['Int']>;
  /** The ID of the payment used to pay for the order. Present if the order status is `paid`, `fulfilled`, or `refunded`. */
  charge?: Maybe<Scalars['JSON']>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created: Scalars['Int'];
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency: Scalars['String'];
  /** The customer used for the order. */
  customer?: Maybe<Scalars['JSON']>;
  /** The email address of the customer placing the order. */
  email?: Maybe<Scalars['String']>;
  /** External coupon code to load for this order. */
  externalCouponCode?: Maybe<Scalars['String']>;
  /** Unique identifier for the object. */
  id: Scalars['String'];
  /** List of items constituting the order. An order can have up to 25 items. */
  items: Array<Maybe<OrderItem>>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: Scalars['Boolean'];
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Maybe<Scalars['JSON']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object60;
  /** A list of returns that have taken place for this order. */
  returns?: Maybe<Returns>;
  /** The shipping method that is currently selected for this order, if any. If present, it is equal to one of the `id`s of shipping methods in the `shipping_methods` array. At order creation time, if there are multiple shipping methods, Stripe will automatically selected the first method. */
  selectedShippingMethod?: Maybe<Scalars['String']>;
  /** The shipping address for the order. Present if the order is for goods to be shipped. */
  shipping?: Maybe<Shipping11>;
  /** A list of supported shipping methods for this order. The desired shipping method can be specified either by updating the order, or when paying it. */
  shippingMethods?: Maybe<Array<Maybe<ShippingMethod>>>;
  /** Current order status. One of `created`, `paid`, `canceled`, `fulfilled`, or `returned`. More details in the [Orders Guide](https://stripe.com/docs/orders/guide#understanding-order-statuses). */
  status: Scalars['String'];
  /** The timestamps at which the order status was updated. */
  statusTransitions?: Maybe<StatusTransitions>;
  /** Time at which the object was last updated. Measured in seconds since the Unix epoch. */
  updated?: Maybe<Scalars['Int']>;
  /** The user's order ID if it is different from the Stripe order ID. */
  upstreamId?: Maybe<Scalars['String']>;
};

export enum Object60 {
  ORDER = 'order'
}

/** A list of returns that have taken place for this order. */
export type Returns = {
  /** Details about each object. */
  data: Array<Maybe<OrderReturn>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

/** The shipping address for the order. Present if the order is for goods to be shipped. */
export type Shipping11 = {
  address?: Maybe<Address>;
  /** The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc. */
  carrier?: Maybe<Scalars['String']>;
  /** Recipient name. */
  name?: Maybe<Scalars['String']>;
  /** Recipient phone (including extension). */
  phone?: Maybe<Scalars['String']>;
  /** The tracking number for a physical product, obtained from the delivery service. If multiple tracking numbers were generated for this purchase, please separate them with commas. */
  trackingNumber?: Maybe<Scalars['String']>;
};

export type ShippingMethod = {
  /** A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount for the line item. */
  amount: Scalars['Int'];
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency: Scalars['String'];
  /** The estimated delivery date for the given shipping method. Can be either a specific date or a range. */
  deliveryEstimate?: Maybe<DeliveryEstimate>;
  /** An arbitrary string attached to the object. Often useful for displaying to users. */
  description: Scalars['String'];
  /** Unique identifier for the object. */
  id: Scalars['String'];
};

/** The estimated delivery date for the given shipping method. Can be either a specific date or a range. */
export type DeliveryEstimate = {
  /** If `type` is `"exact"`, `date` will be the expected delivery date in the format YYYY-MM-DD. */
  date?: Maybe<Scalars['String']>;
  /** If `type` is `"range"`, `earliest` will be be the earliest delivery date in the format YYYY-MM-DD. */
  earliest?: Maybe<Scalars['String']>;
  /** If `type` is `"range"`, `latest` will be the latest delivery date in the format YYYY-MM-DD. */
  latest?: Maybe<Scalars['String']>;
  /** The type of estimate. Must be either `"range"` or `"exact"`. */
  type?: Maybe<Scalars['String']>;
};

/** The timestamps at which the order status was updated. */
export type StatusTransitions = {
  /** The time that the order was canceled. */
  canceled?: Maybe<Scalars['Int']>;
  /** The time that the order was fulfilled. */
  fulfiled?: Maybe<Scalars['Int']>;
  /** The time that the order was paid. */
  paid?: Maybe<Scalars['Int']>;
  /** The time that the order was returned. */
  returned?: Maybe<Scalars['Int']>;
};

export type StatusTransitions2Input = {
  canceled?: Maybe<Scalars['JSON']>;
  fulfilled?: Maybe<Scalars['JSON']>;
  paid?: Maybe<Scalars['JSON']>;
  returned?: Maybe<Scalars['JSON']>;
};

export type PaymentFlowsPaymentIntentList = {
  data: Array<Maybe<PaymentIntent7>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

export type PaymentFlowsPaymentMethodList = {
  data: Array<Maybe<PaymentMethod3>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

export enum Type72 {
  ACSS_DEBIT = 'acss_debit',
  AFTERPAY_CLEARPAY = 'afterpay_clearpay',
  ALIPAY = 'alipay',
  AU_BECS_DEBIT = 'au_becs_debit',
  BACS_DEBIT = 'bacs_debit',
  BANCONTACT = 'bancontact',
  BOLETO = 'boleto',
  CARD = 'card',
  EPS = 'eps',
  FPX = 'fpx',
  GIROPAY = 'giropay',
  GRABPAY = 'grabpay',
  IDEAL = 'ideal',
  OXXO = 'oxxo',
  P24 = 'p24',
  SEPA_DEBIT = 'sepa_debit',
  SOFORT = 'sofort',
  WECHAT_PAY = 'wechat_pay'
}

export type PayoutList = {
  data: Array<Maybe<Payout>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

/**
 * A `Payout` object is created when you receive funds from Stripe, or when you
 * initiate a payout to either a bank account or debit card of a [connected
 * Stripe account](/docs/connect/bank-debit-card-payouts). You can retrieve individual payouts,
 * as well as list all payouts. Payouts are made on [varying
 * schedules](/docs/connect/manage-payout-schedule), depending on your country and
 * industry.
 *
 * Related guide: [Receiving Payouts](https://stripe.com/docs/payouts).
 */
export type Payout = {
  /** Amount (in %s) to be transferred to your bank account or debit card. */
  amount: Scalars['Int'];
  /** Date the payout is expected to arrive in the bank. This factors in delays like weekends or bank holidays. */
  arrivalDate: Scalars['Int'];
  /** Returns `true` if the payout was created by an [automated payout schedule](https://stripe.com/docs/payouts#payout-schedule), and `false` if it was [requested manually](https://stripe.com/docs/payouts#manual-payouts). */
  automatic: Scalars['Boolean'];
  /** ID of the balance transaction that describes the impact of this payout on your account balance. */
  balanceTransaction?: Maybe<Scalars['JSON']>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created: Scalars['Int'];
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency: Scalars['String'];
  /** An arbitrary string attached to the object. Often useful for displaying to users. */
  description?: Maybe<Scalars['String']>;
  /** ID of the bank account or card the payout was sent to. */
  destination?: Maybe<Scalars['JSON']>;
  /** If the payout failed or was canceled, this will be the ID of the balance transaction that reversed the initial balance transaction, and puts the funds from the failed payout back in your balance. */
  failureBalanceTransaction?: Maybe<Scalars['JSON']>;
  /** Error code explaining reason for payout failure if available. See [Types of payout failures](https://stripe.com/docs/api#payout_failures) for a list of failure codes. */
  failureCode?: Maybe<Scalars['String']>;
  /** Message to user further explaining reason for payout failure if available. */
  failureMessage?: Maybe<Scalars['String']>;
  /** Unique identifier for the object. */
  id: Scalars['String'];
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: Scalars['Boolean'];
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Maybe<Scalars['JSON']>;
  /** The method used to send this payout, which can be `standard` or `instant`. `instant` is only supported for payouts to debit cards. (See [Instant payouts for marketplaces](https://stripe.com/blog/instant-payouts-for-marketplaces) for more information.) */
  method: Scalars['String'];
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object61;
  /** If the payout reverses another, this is the ID of the original payout. */
  originalPayout?: Maybe<Scalars['JSON']>;
  /** If the payout was reversed, this is the ID of the payout that reverses this payout. */
  reversedBy?: Maybe<Scalars['JSON']>;
  /** The source balance this payout came from. One of `card`, `fpx`, or `bank_account`. */
  sourceType: Scalars['String'];
  /** Extra information about a payout to be displayed on the user's bank statement. */
  statementDescriptor?: Maybe<Scalars['String']>;
  /** Current status of the payout: `paid`, `pending`, `in_transit`, `canceled` or `failed`. A payout is `pending` until it is submitted to the bank, when it becomes `in_transit`. The status then changes to `paid` if the transaction goes through, or to `failed` or `canceled` (within 5 business days). Some failed payouts may initially show as `paid` but then change to `failed`. */
  status: Scalars['String'];
  /** Can be `bank_account` or `card`. */
  type: Type50;
};

export enum Object61 {
  PAYOUT = 'payout'
}

export enum Type50 {
  BANK_ACCOUNT = 'bank_account',
  CARD = 'card'
}

export type PlanList = {
  /** Details about each object. */
  data: Array<Maybe<Plan4>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

/**
 * You can now model subscriptions more flexibly using the [Prices API](https://stripe.com/docs/api#prices). It replaces the Plans API and is backwards compatible to simplify your migration.
 *
 * Plans define the base price, currency, and billing cycle for recurring purchases of products.
 * [Products](https://stripe.com/docs/api#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.
 *
 * For example, you might have a single "gold" product that has plans for $10/month, $100/year, €9/month, and €90/year.
 *
 * Related guides: [Set up a subscription](https://stripe.com/docs/billing/subscriptions/set-up-subscription) and more about [products and prices](https://stripe.com/docs/billing/prices-guide).
 */
export type Plan4 = {
  /** Whether the plan can be used for new purchases. */
  active: Scalars['Boolean'];
  /** Specifies a usage aggregation strategy for plans of `usage_type=metered`. Allowed values are `sum` for summing up all usage during a period, `last_during_period` for using the last usage record reported within a period, `last_ever` for using the last usage record ever (across period bounds) or `max` which uses the usage record with the maximum reported usage during a period. Defaults to `sum`. */
  aggregateUsage?: Maybe<AggregateUsage2>;
  /** The unit amount in %s to be charged, represented as a whole integer if possible. Only set if `billing_scheme=per_unit`. */
  amount?: Maybe<Scalars['Int']>;
  /** The unit amount in %s to be charged, represented as a decimal string with at most 12 decimal places. Only set if `billing_scheme=per_unit`. */
  amountDecimal?: Maybe<Scalars['String']>;
  /** Describes how to compute the price per period. Either `per_unit` or `tiered`. `per_unit` indicates that the fixed amount (specified in `amount`) will be charged per unit in `quantity` (for plans with `usage_type=licensed`), or per unit of total usage (for plans with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as defined using the `tiers` and `tiers_mode` attributes. */
  billingScheme: BillingScheme2;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created: Scalars['Int'];
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency: Scalars['String'];
  /** Unique identifier for the object. */
  id: Scalars['String'];
  /** The frequency at which a subscription is billed. One of `day`, `week`, `month` or `year`. */
  interval: Interval4;
  /** The number of intervals (specified in the `interval` attribute) between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months. */
  intervalCount: Scalars['Int'];
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: Scalars['Boolean'];
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Maybe<Scalars['JSON']>;
  /** A brief description of the plan, hidden from customers. */
  nickname?: Maybe<Scalars['String']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object62;
  /** The product whose pricing this plan determines. */
  product?: Maybe<Scalars['JSON']>;
  /** Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`. */
  tiers?: Maybe<Array<Maybe<PlanTier>>>;
  /** Defines if the tiering price should be `graduated` or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per unit price. In `graduated` tiering, pricing can change as the quantity grows. */
  tiersMode?: Maybe<TiersMode>;
  /** Apply a transformation to the reported usage or set quantity before computing the amount billed. Cannot be combined with `tiers`. */
  transformUsage?: Maybe<TransformUsage>;
  /** Default number of trial days when subscribing a customer to this plan using [`trial_from_plan=true`](https://stripe.com/docs/api#create_subscription-trial_from_plan). */
  trialPeriodDays?: Maybe<Scalars['Int']>;
  /** Configures how the quantity per period should be determined. Can be either `metered` or `licensed`. `licensed` automatically bills the `quantity` set when adding it to a subscription. `metered` aggregates the total usage based on usage records. Defaults to `licensed`. */
  usageType: UsageType;
};

export enum AggregateUsage2 {
  LAST_DURING_PERIOD = 'last_during_period',
  LAST_EVER = 'last_ever',
  MAX = 'max',
  SUM = 'sum'
}

export enum BillingScheme2 {
  PER_UNIT = 'per_unit',
  TIERED = 'tiered'
}

export enum Object62 {
  PLAN = 'plan'
}

export type PlanTier = {
  /** Price for the entire tier. */
  flatAmount?: Maybe<Scalars['Int']>;
  /** Same as `flat_amount`, but contains a decimal value with at most 12 decimal places. */
  flatAmountDecimal?: Maybe<Scalars['String']>;
  /** Per unit price for units relevant to the tier. */
  unitAmount?: Maybe<Scalars['Int']>;
  /** Same as `unit_amount`, but contains a decimal value with at most 12 decimal places. */
  unitAmountDecimal?: Maybe<Scalars['String']>;
  /** Up to and including to this quantity will be contained in the tier. */
  upTo?: Maybe<Scalars['Int']>;
};

/** Apply a transformation to the reported usage or set quantity before computing the amount billed. Cannot be combined with `tiers`. */
export type TransformUsage = {
  /** Divide usage by this number. */
  divideBy?: Maybe<Scalars['Int']>;
  /** After division, either round the result `up` or `down`. */
  round?: Maybe<Round>;
};

export type PriceList = {
  /** Details about each object. */
  data: Array<Maybe<Price3>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

export type Recurring4Input = {
  interval?: Maybe<Interval5>;
  usageType?: Maybe<UsageType2>;
};

export enum UsageType2 {
  LICENSED = 'licensed',
  METERED = 'metered'
}

export enum Type73 {
  ONE_TIME = 'one_time',
  RECURRING = 'recurring'
}

export type V1Products2 = {
  data: Array<Maybe<Product14>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

/**
 * Products describe the specific goods or services you offer to your customers.
 * For example, you might offer a Standard and Premium version of your goods or service; each version would be a separate Product.
 * They can be used in conjunction with [Prices](https://stripe.com/docs/api#prices) to configure pricing in Checkout and Subscriptions.
 *
 * Related guides: [Set up a subscription](https://stripe.com/docs/billing/subscriptions/set-up-subscription) or accept [one-time payments with Checkout](https://stripe.com/docs/payments/checkout/client#create-products) and more about [Products and Prices](https://stripe.com/docs/billing/prices-guide)
 */
export type Product14 = {
  /** Whether the product is currently available for purchase. */
  active: Scalars['Boolean'];
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created: Scalars['Int'];
  /** The product's description, meant to be displayable to the customer. Use this field to optionally store a long form explanation of the product being sold for your own rendering purposes. */
  description?: Maybe<Scalars['String']>;
  /** Unique identifier for the object. */
  id: Scalars['String'];
  /** A list of up to 8 URLs of images for this product, meant to be displayable to the customer. */
  images: Array<Maybe<Scalars['String']>>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: Scalars['Boolean'];
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata: Scalars['JSON'];
  /** The product's name, meant to be displayable to the customer. Whenever this product is sold via a subscription, name will show up on associated invoice line item descriptions. */
  name: Scalars['String'];
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object63;
  /** The dimensions of this product for shipping purposes. */
  packageDimensions?: Maybe<PackageDimensions>;
  /** Whether this product is shipped (i.e., physical goods). */
  shippable?: Maybe<Scalars['Boolean']>;
  /** Extra information about a product which will appear on your customer's credit card statement. In the case that multiple products are billed at once, the first statement descriptor will be used. */
  statementDescriptor?: Maybe<Scalars['String']>;
  /** A [tax code](https://stripe.com/docs/tax/tax-codes) ID. */
  taxCode?: Maybe<Scalars['JSON']>;
  /** A label that represents units of this product in Stripe and on customers’ receipts and invoices. When set, this will be included in associated invoice line item descriptions. */
  unitLabel?: Maybe<Scalars['String']>;
  /** Time at which the object was last updated. Measured in seconds since the Unix epoch. */
  updated: Scalars['Int'];
  /** A URL of a publicly-accessible webpage for this product. */
  url?: Maybe<Scalars['String']>;
};

export enum Object63 {
  PRODUCT = 'product'
}

/** The dimensions of this product for shipping purposes. */
export type PackageDimensions = {
  /** Height, in inches. */
  height?: Maybe<Scalars['Float']>;
  /** Length, in inches. */
  length?: Maybe<Scalars['Float']>;
  /** Weight, in ounces. */
  weight?: Maybe<Scalars['Float']>;
  /** Width, in inches. */
  width?: Maybe<Scalars['Float']>;
};

export type V1PromotionCodes2 = {
  data: Array<Maybe<PromotionCode11>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

/**
 * A Promotion Code represents a customer-redeemable code for a coupon. It can be used to
 * create multiple codes for a single coupon.
 */
export type PromotionCode11 = {
  /** Whether the promotion code is currently active. A promotion code is only active if the coupon is also valid. */
  active: Scalars['Boolean'];
  /** The customer-facing code. Regardless of case, this code must be unique across all active promotion codes for each customer. */
  code: Scalars['String'];
  /**
   * A coupon contains information about a percent-off or amount-off discount you
   * might want to apply to a customer. Coupons may be applied to [invoices](https://stripe.com/docs/api#invoices) or
   * [orders](https://stripe.com/docs/api#create_order-coupon). Coupons do not work with conventional one-off [charges](https://stripe.com/docs/api#create_charge).
   */
  coupon: Coupon;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created: Scalars['Int'];
  /** The customer that this promotion code can be used by. */
  customer?: Maybe<Scalars['JSON']>;
  /** Date at which the promotion code can no longer be redeemed. */
  expiresAt?: Maybe<Scalars['Int']>;
  /** Unique identifier for the object. */
  id: Scalars['String'];
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: Scalars['Boolean'];
  /** Maximum number of times this promotion code can be redeemed. */
  maxRedemptions?: Maybe<Scalars['Int']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Maybe<Scalars['JSON']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object64;
  restrictions: PromotionCodesResourceRestrictions;
  /** Number of times this promotion code has been used. */
  timesRedeemed: Scalars['Int'];
};

export enum Object64 {
  PROMOTION_CODE = 'promotion_code'
}

export type PromotionCodesResourceRestrictions = {
  /** A Boolean indicating if the Promotion Code should only be redeemed for Customers without any successful payments or invoices */
  firstTimeTransaction: Scalars['Boolean'];
  /** Minimum amount required to redeem this Promotion Code into a Coupon (e.g., a purchase must be $100 or more to work). */
  minimumAmount?: Maybe<Scalars['Int']>;
  /** Three-letter [ISO code](https://stripe.com/docs/currencies) for minimum_amount */
  minimumAmountCurrency?: Maybe<Scalars['String']>;
};

export type V1Quotes2 = {
  data: Array<Maybe<Quote2>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

/**
 * A Quote is a way to model prices that you'd like to provide to a customer.
 * Once accepted, it will automatically create an invoice, subscription or subscription schedule.
 */
export type Quote2 = {
  /** Total before any discounts or taxes are applied. */
  amountSubtotal: Scalars['Int'];
  /** Total after discounts and taxes are applied. */
  amountTotal: Scalars['Int'];
  /** The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. Only applicable if there are no line items with recurring prices on the quote. */
  applicationFeeAmount?: Maybe<Scalars['Int']>;
  /** A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account. Only applicable if there are line items with recurring prices on the quote. */
  applicationFeePercent?: Maybe<Scalars['Float']>;
  automaticTax: QuotesResourceAutomaticTax;
  /** Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay invoices at the end of the subscription cycle or on finalization using the default payment method attached to the subscription or customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions. Defaults to `charge_automatically`. */
  collectionMethod: CollectionMethod6;
  computed: QuotesResourceComputed;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created: Scalars['Int'];
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency?: Maybe<Scalars['String']>;
  /** The customer which this quote belongs to. A customer is required before finalizing the quote. Once specified, it cannot be changed. */
  customer?: Maybe<Scalars['JSON']>;
  /** The tax rates applied to this quote. */
  defaultTaxRates?: Maybe<Array<Maybe<Scalars['JSON']>>>;
  /** A description that will be displayed on the quote PDF. */
  description?: Maybe<Scalars['String']>;
  /** The discounts applied to this quote. */
  discounts: Array<Maybe<Scalars['JSON']>>;
  /** The date on which the quote will be canceled if in `open` or `draft` status. Measured in seconds since the Unix epoch. */
  expiresAt: Scalars['Int'];
  /** A footer that will be displayed on the quote PDF. */
  footer?: Maybe<Scalars['String']>;
  /** Details of the quote that was cloned. See the [cloning documentation](https://stripe.com/docs/quotes/clone) for more details. */
  fromQuote?: Maybe<FromQuote>;
  /** A header that will be displayed on the quote PDF. */
  header?: Maybe<Scalars['String']>;
  /** Unique identifier for the object. */
  id: Scalars['String'];
  /** The invoice that was created from this quote. */
  invoice?: Maybe<Scalars['JSON']>;
  /** All invoices will be billed using the specified settings. */
  invoiceSettings?: Maybe<InvoiceSettings3>;
  /** A list of items the customer is being quoted for. */
  lineItems?: Maybe<LineItems3>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: Scalars['Boolean'];
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata: Scalars['JSON'];
  /** A unique number that identifies this particular quote. This number is assigned once the quote is [finalized](https://stripe.com/docs/quotes/overview#finalize). */
  number?: Maybe<Scalars['String']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object65;
  /** The account on behalf of which to charge. See the [Connect documentation](https://support.stripe.com/questions/sending-invoices-on-behalf-of-connected-accounts) for details. */
  onBehalfOf?: Maybe<Scalars['JSON']>;
  /** The status of the quote. */
  status: Status40;
  statusTransitions: QuotesResourceStatusTransitions;
  /** The subscription that was created or updated from this quote. */
  subscription?: Maybe<Scalars['JSON']>;
  subscriptionData: QuotesResourceSubscriptionData;
  /** The subscription schedule that was created or updated from this quote. */
  subscriptionSchedule?: Maybe<Scalars['JSON']>;
  totalDetails: QuotesResourceTotalDetails;
  /** The account (if any) the payments will be attributed to for tax reporting, and where funds from each payment will be transferred to for each of the invoices. */
  transferData?: Maybe<TransferData12>;
};

export type QuotesResourceAutomaticTax = {
  /** Automatically calculate taxes */
  enabled: Scalars['Boolean'];
  /** The status of the most recent automated tax calculation for this quote. */
  status?: Maybe<Status39>;
};

export enum Status39 {
  COMPLETE = 'complete',
  FAILED = 'failed',
  REQUIRES_LOCATION_INPUTS = 'requires_location_inputs'
}

export enum CollectionMethod6 {
  CHARGE_AUTOMATICALLY = 'charge_automatically',
  SEND_INVOICE = 'send_invoice'
}

export type QuotesResourceComputed = {
  /** The definitive totals and line items the customer will be charged on a recurring basis. Takes into account the line items with recurring prices and discounts with `duration=forever` coupons only. Defaults to `null` if no inputted line items with recurring prices. */
  recurring?: Maybe<Recurring3>;
  upfront: QuotesResourceUpfront;
};

/** The definitive totals and line items the customer will be charged on a recurring basis. Takes into account the line items with recurring prices and discounts with `duration=forever` coupons only. Defaults to `null` if no inputted line items with recurring prices. */
export type Recurring3 = {
  /** Total before any discounts or taxes are applied. */
  amountSubtotal?: Maybe<Scalars['Int']>;
  /** Total after discounts and taxes are applied. */
  amountTotal?: Maybe<Scalars['Int']>;
  /** The frequency at which a subscription is billed. One of `day`, `week`, `month` or `year`. */
  interval?: Maybe<Interval4>;
  /** The number of intervals (specified in the `interval` attribute) between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months. */
  intervalCount?: Maybe<Scalars['Int']>;
  totalDetails?: Maybe<TotalDetails2>;
};

export type TotalDetails2 = {
  /** This is the sum of all the line item discounts. */
  amountDiscount: Scalars['Int'];
  /** This is the sum of all the line item shipping amounts. */
  amountShipping?: Maybe<Scalars['Int']>;
  /** This is the sum of all the line item tax amounts. */
  amountTax: Scalars['Int'];
  breakdown?: Maybe<QuotesResourceTotalDetailsResourceBreakdown>;
};

export type QuotesResourceTotalDetailsResourceBreakdown = {
  /** The aggregated line item discounts. */
  discounts: Array<Maybe<LineItemsDiscountAmount>>;
  /** The aggregated line item tax amounts by rate. */
  taxes: Array<Maybe<LineItemsTaxAmount>>;
};

export type QuotesResourceUpfront = {
  /** Total before any discounts or taxes are applied. */
  amountSubtotal: Scalars['Int'];
  /** Total after discounts and taxes are applied. */
  amountTotal: Scalars['Int'];
  /** The line items that will appear on the next invoice after this quote is accepted. This does not include pending invoice items that exist on the customer but may still be included in the next invoice. */
  lineItems?: Maybe<QuotesResourceListLineItems>;
  totalDetails: QuotesResourceTotalDetails;
};

/** The line items that will appear on the next invoice after this quote is accepted. This does not include pending invoice items that exist on the customer but may still be included in the next invoice. */
export type QuotesResourceListLineItems = {
  /** Details about each object. */
  data: Array<Maybe<Item>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

export type QuotesResourceTotalDetails = {
  /** This is the sum of all the line item discounts. */
  amountDiscount: Scalars['Int'];
  /** This is the sum of all the line item shipping amounts. */
  amountShipping?: Maybe<Scalars['Int']>;
  /** This is the sum of all the line item tax amounts. */
  amountTax: Scalars['Int'];
  breakdown?: Maybe<QuotesResourceTotalDetailsResourceBreakdown>;
};

/** Details of the quote that was cloned. See the [cloning documentation](https://stripe.com/docs/quotes/clone) for more details. */
export type FromQuote = {
  /** Whether this quote is a revision of a different quote. */
  isRevision?: Maybe<Scalars['Boolean']>;
  /** The quote that was cloned. */
  quote?: Maybe<Scalars['JSON']>;
};

/** All invoices will be billed using the specified settings. */
export type InvoiceSettings3 = {
  /** Number of days within which a customer must pay invoices generated by this quote. This value will be `null` for quotes where `collection_method=charge_automatically`. */
  daysUntilDue?: Maybe<Scalars['Int']>;
};

/** A list of items the customer is being quoted for. */
export type LineItems3 = {
  /** Details about each object. */
  data: Array<Maybe<Item>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

export enum Object65 {
  QUOTE = 'quote'
}

export enum Status40 {
  ACCEPTED = 'accepted',
  CANCELED = 'canceled',
  DRAFT = 'draft',
  OPEN = 'open'
}

export type QuotesResourceStatusTransitions = {
  /** The time that the quote was accepted. Measured in seconds since Unix epoch. */
  acceptedAt?: Maybe<Scalars['Int']>;
  /** The time that the quote was canceled. Measured in seconds since Unix epoch. */
  canceledAt?: Maybe<Scalars['Int']>;
  /** The time that the quote was finalized. Measured in seconds since Unix epoch. */
  finalizedAt?: Maybe<Scalars['Int']>;
};

export type QuotesResourceSubscriptionData = {
  /** When creating a new subscription, the date of which the subscription schedule will start after the quote is accepted. This date is ignored if it is in the past when the quote is accepted. Measured in seconds since the Unix epoch. */
  effectiveDate?: Maybe<Scalars['Int']>;
  /** Integer representing the number of trial period days before the customer is charged for the first time. */
  trialPeriodDays?: Maybe<Scalars['Int']>;
};

/** The account (if any) the payments will be attributed to for tax reporting, and where funds from each payment will be transferred to for each of the invoices. */
export type TransferData12 = {
  /** The amount in %s that will be transferred to the destination account when the invoice is paid. By default, the entire amount is transferred to the destination. */
  amount?: Maybe<Scalars['Int']>;
  /** A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the destination account. By default, the entire amount will be transferred to the destination. */
  amountPercent?: Maybe<Scalars['Float']>;
  /** The account where funds from the payment will be transferred to upon payment success. */
  destination?: Maybe<Scalars['JSON']>;
};

export enum Status63 {
  ACCEPTED = 'accepted',
  CANCELED = 'canceled',
  DRAFT = 'draft',
  OPEN = 'open'
}

export type QuotesResourceListLineItems2 = {
  /** Details about each object. */
  data: Array<Maybe<Item>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

export type RadarEarlyFraudWarningList = {
  data: Array<Maybe<RadarEarlyFraudWarning>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

/**
 * An early fraud warning indicates that the card issuer has notified us that a
 * charge may be fraudulent.
 *
 * Related guide: [Early Fraud Warnings](https://stripe.com/docs/disputes/measuring#early-fraud-warnings).
 */
export type RadarEarlyFraudWarning = {
  /** An EFW is actionable if it has not received a dispute and has not been fully refunded. You may wish to proactively refund a charge that receives an EFW, in order to avoid receiving a dispute later. */
  actionable: Scalars['Boolean'];
  /** ID of the charge this early fraud warning is for, optionally expanded. */
  charge: Scalars['JSON'];
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created: Scalars['Int'];
  /** The type of fraud labelled by the issuer. One of `card_never_received`, `fraudulent_card_application`, `made_with_counterfeit_card`, `made_with_lost_card`, `made_with_stolen_card`, `misc`, `unauthorized_use_of_card`. */
  fraudType: Scalars['String'];
  /** Unique identifier for the object. */
  id: Scalars['String'];
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object66;
  /** ID of the Payment Intent this early fraud warning is for, optionally expanded. */
  paymentIntent?: Maybe<Scalars['JSON']>;
};

export enum Object66 {
  RADAR_EARLY_FRAUD_WARNING = 'radar.early_fraud_warning'
}

export type V1RadarValueListItems2 = {
  data: Array<Maybe<RadarValueListItem>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

/**
 * Value list items allow you to add specific values to a given Radar value list, which can then be used in rules.
 *
 * Related guide: [Managing List Items](https://stripe.com/docs/radar/lists#managing-list-items).
 */
export type RadarValueListItem = {
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created: Scalars['Int'];
  /** The name or email address of the user who added this item to the value list. */
  createdBy: Scalars['String'];
  /** Unique identifier for the object. */
  id: Scalars['String'];
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object67;
  /** The value of the item. */
  value: Scalars['String'];
  /** The identifier of the value list this item belongs to. */
  valueList: Scalars['String'];
};

export enum Object67 {
  RADAR_VALUE_LIST_ITEM = 'radar.value_list_item'
}

export type V1RadarValueLists2 = {
  data: Array<Maybe<RadarValueList>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

/**
 * Value lists allow you to group values together which can then be referenced in rules.
 *
 * Related guide: [Default Stripe Lists](https://stripe.com/docs/radar/lists#managing-list-items).
 */
export type RadarValueList = {
  /** The name of the value list for use in rules. */
  alias: Scalars['String'];
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created: Scalars['Int'];
  /** The name or email address of the user who created this value list. */
  createdBy: Scalars['String'];
  /** Unique identifier for the object. */
  id: Scalars['String'];
  /** The type of items in the value list. One of `card_fingerprint`, `card_bin`, `email`, `ip_address`, `country`, `string`, or `case_sensitive_string`. */
  itemType: ItemType;
  /** List of items contained within this value list. */
  listItems: ListItems;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: Scalars['Boolean'];
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata: Scalars['JSON'];
  /** The name of the value list. */
  name: Scalars['String'];
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object68;
};

export enum ItemType {
  CARD_BIN = 'card_bin',
  CARD_FINGERPRINT = 'card_fingerprint',
  CASE_SENSITIVE_STRING = 'case_sensitive_string',
  COUNTRY = 'country',
  EMAIL = 'email',
  IP_ADDRESS = 'ip_address',
  STRING = 'string'
}

/** List of items contained within this value list. */
export type ListItems = {
  /** Details about each object. */
  data: Array<Maybe<RadarValueListItem>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

export enum Object68 {
  RADAR_VALUE_LIST = 'radar.value_list'
}

export type V1Recipients2 = {
  data: Array<Maybe<Recipient10>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

/**
 * With `Recipient` objects, you can transfer money from your Stripe account to a
 * third-party bank account or debit card. The API allows you to create, delete,
 * and update your recipients. You can retrieve individual recipients as well as
 * a list of all your recipients.
 *
 * **`Recipient` objects have been deprecated in favor of
 * [Connect](https://stripe.com/docs/connect), specifically Connect's much more powerful
 * [Account objects](https://stripe.com/docs/api#account). Stripe accounts that don't already use
 * recipients can no longer begin doing so. Please use `Account` objects
 * instead.**
 */
export type Recipient10 = {
  /** Hash describing the current account on the recipient, if there is one. */
  activeAccount?: Maybe<ActiveAccount>;
  cards?: Maybe<Cards>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created: Scalars['Int'];
  /** The default card to use for creating transfers to this recipient. */
  defaultCard?: Maybe<Scalars['JSON']>;
  /** An arbitrary string attached to the object. Often useful for displaying to users. */
  description?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  /** Unique identifier for the object. */
  id: Scalars['String'];
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: Scalars['Boolean'];
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata: Scalars['JSON'];
  /** The ID of the [Custom account](https://stripe.com/docs/connect/custom-accounts) this recipient was migrated to. If set, the recipient can no longer be updated, nor can transfers be made to it: use the Custom account instead. */
  migratedTo?: Maybe<Scalars['JSON']>;
  /** Full, legal name of the recipient. */
  name?: Maybe<Scalars['String']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object69;
  rolledBackFrom?: Maybe<Scalars['JSON']>;
  /** Type of the recipient, one of `individual` or `corporation`. */
  type: Scalars['String'];
};

/** Hash describing the current account on the recipient, if there is one. */
export type ActiveAccount = {
  /** The ID of the account that the bank account is associated with. */
  account?: Maybe<Scalars['JSON']>;
  /** The name of the person or business that owns the bank account. */
  accountHolderName?: Maybe<Scalars['String']>;
  /** The type of entity that holds the account. This can be either `individual` or `company`. */
  accountHolderType?: Maybe<Scalars['String']>;
  /** The bank account type. This can only be `checking` or `savings` in most countries. In Japan, this can only be `futsu` or `toza`. */
  accountType?: Maybe<Scalars['String']>;
  /** A set of available payout methods for this bank account. Only values from this set should be passed as the `method` when creating a payout. */
  availablePayoutMethods?: Maybe<Array<Maybe<AvailablePayoutMethods2ListItem>>>;
  /** Name of the bank associated with the routing number (e.g., `WELLS FARGO`). */
  bankName?: Maybe<Scalars['String']>;
  /** Two-letter ISO code representing the country the bank account is located in. */
  country?: Maybe<Scalars['String']>;
  /** Three-letter [ISO code for the currency](https://stripe.com/docs/payouts) paid out to the bank account. */
  currency?: Maybe<Scalars['String']>;
  /** The ID of the customer that the bank account is associated with. */
  customer?: Maybe<Scalars['JSON']>;
  /** Whether this bank account is the default external account for its currency. */
  defaultForCurrency?: Maybe<Scalars['Boolean']>;
  /** Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
  fingerprint?: Maybe<Scalars['String']>;
  /** Unique identifier for the object. */
  id?: Maybe<Scalars['String']>;
  /** The last four digits of the bank account number. */
  last4?: Maybe<Scalars['String']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Maybe<Scalars['JSON']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: Maybe<Object35>;
  /** The routing transit number for the bank account. */
  routingNumber?: Maybe<Scalars['String']>;
  /**
   * For bank accounts, possible values are `new`, `validated`, `verified`, `verification_failed`, or `errored`. A bank account that hasn't had any activity or validation performed is `new`. If Stripe can determine that the bank account exists, its status will be `validated`. Note that there often isn’t enough information to know (e.g., for smaller credit unions), and the validation is not always run. If customer bank account verification has succeeded, the bank account status will be `verified`. If the verification failed for any reason, such as microdeposit failure, the status will be `verification_failed`. If a transfer sent to this bank account fails, we'll set the status to `errored` and will not continue to send transfers until the bank details are updated.
   *
   * For external accounts, possible values are `new` and `errored`. Validations aren't run against external accounts because they're only used for payouts. This means the other statuses don't apply. If a transfer fails, the status is set to `errored` and transfers are stopped until account details are updated.
   */
  status?: Maybe<Scalars['String']>;
};

export type Cards = {
  data: Array<Maybe<Card2>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

export enum Object69 {
  RECIPIENT = 'recipient'
}

export enum Type74 {
  CORPORATION = 'corporation',
  INDIVIDUAL = 'individual'
}

export type V1Recipient2 = {
  /** Hash describing the current account on the recipient, if there is one. */
  activeAccount?: Maybe<ActiveAccount>;
  cards?: Maybe<Cards>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: Maybe<Scalars['Int']>;
  /** The default card to use for creating transfers to this recipient. */
  defaultCard?: Maybe<Scalars['JSON']>;
  /** Always true for a deleted object */
  deleted?: Maybe<Deleted>;
  /** An arbitrary string attached to the object. Often useful for displaying to users. */
  description?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  /** Unique identifier for the object. */
  id?: Maybe<Scalars['String']>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: Maybe<Scalars['Boolean']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Maybe<Scalars['JSON']>;
  /** The ID of the [Custom account](https://stripe.com/docs/connect/custom-accounts) this recipient was migrated to. If set, the recipient can no longer be updated, nor can transfers be made to it: use the Custom account instead. */
  migratedTo?: Maybe<Scalars['JSON']>;
  /** Full, legal name of the recipient. */
  name?: Maybe<Scalars['String']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: Maybe<Object69>;
  rolledBackFrom?: Maybe<Scalars['JSON']>;
  /** Type of the recipient, one of `individual` or `corporation`. */
  type?: Maybe<Scalars['String']>;
};

export type V1Refunds2 = {
  data: Array<Maybe<Refund>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

export type V1ReportingReportRuns2 = {
  data: Array<Maybe<ReportingReportRun>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

/**
 * The Report Run object represents an instance of a report type generated with
 * specific run parameters. Once the object is created, Stripe begins processing the report.
 * When the report has finished running, it will give you a reference to a file
 * where you can retrieve your results. For an overview, see
 * [API Access to Reports](https://stripe.com/docs/reporting/statements/api).
 *
 * Note that certain report types can only be run based on your live-mode data (not test-mode
 * data), and will error when queried without a [live-mode API key](https://stripe.com/docs/keys#test-live-modes).
 */
export type ReportingReportRun = {
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created: Scalars['Int'];
  /**
   * If something should go wrong during the run, a message about the failure (populated when
   *  `status=failed`).
   */
  error?: Maybe<Scalars['String']>;
  /** Unique identifier for the object. */
  id: Scalars['String'];
  /** `true` if the report is run on live mode data and `false` if it is run on test mode data. */
  livemode: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object70;
  parameters: FinancialReportingFinanceReportRunRunParameters;
  /** The ID of the [report type](https://stripe.com/docs/reports/report-types) to run, such as `"balance.summary.1"`. */
  reportType: Scalars['String'];
  /**
   * The file object representing the result of the report run (populated when
   *  `status=succeeded`).
   */
  result?: Maybe<Result2>;
  /**
   * Status of this report run. This will be `pending` when the run is initially created.
   *  When the run finishes, this will be set to `succeeded` and the `result` field will be populated.
   *  Rarely, we may encounter an error, at which point this will be set to `failed` and the `error` field will be populated.
   */
  status: Scalars['String'];
  /**
   * Timestamp at which this run successfully finished (populated when
   *  `status=succeeded`). Measured in seconds since the Unix epoch.
   */
  succeededAt?: Maybe<Scalars['Int']>;
};

export enum Object70 {
  REPORTING_REPORT_RUN = 'reporting.report_run'
}

export type FinancialReportingFinanceReportRunRunParameters = {
  /** The set of output columns requested for inclusion in the report run. */
  columns?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Connected account ID by which to filter the report run. */
  connectedAccount?: Maybe<Scalars['String']>;
  /** Currency of objects to be included in the report run. */
  currency?: Maybe<Scalars['String']>;
  /** Ending timestamp of data to be included in the report run (exclusive). */
  intervalEnd?: Maybe<Scalars['Int']>;
  /** Starting timestamp of data to be included in the report run. */
  intervalStart?: Maybe<Scalars['Int']>;
  /** Payout ID by which to filter the report run. */
  payout?: Maybe<Scalars['String']>;
  /** Category of balance transactions to be included in the report run. */
  reportingCategory?: Maybe<Scalars['String']>;
  /** Defaults to `Etc/UTC`. The output timezone for all timestamps in the report. A list of possible time zone values is maintained at the [IANA Time Zone Database](http://www.iana.org/time-zones). Has no effect on `interval_start` or `interval_end`. */
  timezone?: Maybe<Scalars['String']>;
};

/**
 * The file object representing the result of the report run (populated when
 *  `status=succeeded`).
 */
export type Result2 = {
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: Maybe<Scalars['Int']>;
  /** The time at which the file expires and is no longer available in epoch seconds. */
  expiresAt?: Maybe<Scalars['Int']>;
  /** A filename for the file, suitable for saving to a filesystem. */
  filename?: Maybe<Scalars['String']>;
  /** Unique identifier for the object. */
  id?: Maybe<Scalars['String']>;
  /** A list of [file links](https://stripe.com/docs/api#file_links) that point at this file. */
  links?: Maybe<Links>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: Maybe<Object41>;
  /** The [purpose](https://stripe.com/docs/file-upload#uploading-a-file) of the uploaded file. */
  purpose?: Maybe<Purpose>;
  /** The size in bytes of the file object. */
  size?: Maybe<Scalars['Int']>;
  /** A user friendly title for the document. */
  title?: Maybe<Scalars['String']>;
  /** The type of the file returned (e.g., `csv`, `pdf`, `jpg`, or `png`). */
  type?: Maybe<Scalars['String']>;
  /** The URL from which the file can be downloaded using your live secret API key. */
  url?: Maybe<Scalars['String']>;
};

export type FinancialReportingFinanceReportTypeList = {
  data: Array<Maybe<ReportingReportType>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

/**
 * The Report Type resource corresponds to a particular type of report, such as
 * the "Activity summary" or "Itemized payouts" reports. These objects are
 * identified by an ID belonging to a set of enumerated values. See
 * [API Access to Reports documentation](https://stripe.com/docs/reporting/statements/api)
 * for those Report Type IDs, along with required and optional parameters.
 *
 * Note that certain report types can only be run based on your live-mode data (not test-mode
 * data), and will error when queried without a [live-mode API key](https://stripe.com/docs/keys#test-live-modes).
 */
export type ReportingReportType = {
  /** Most recent time for which this Report Type is available. Measured in seconds since the Unix epoch. */
  dataAvailableEnd: Scalars['Int'];
  /** Earliest time for which this Report Type is available. Measured in seconds since the Unix epoch. */
  dataAvailableStart: Scalars['Int'];
  /** List of column names that are included by default when this Report Type gets run. (If the Report Type doesn't support the `columns` parameter, this will be null.) */
  defaultColumns?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** The [ID of the Report Type](https://stripe.com/docs/reporting/statements/api#available-report-types), such as `balance.summary.1`. */
  id: Scalars['String'];
  /** Human-readable name of the Report Type */
  name: Scalars['String'];
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object71;
  /** When this Report Type was latest updated. Measured in seconds since the Unix epoch. */
  updated: Scalars['Int'];
  /** Version of the Report Type. Different versions report with the same ID will have the same purpose, but may take different run parameters or have different result schemas. */
  version: Scalars['Int'];
};

export enum Object71 {
  REPORTING_REPORT_TYPE = 'reporting.report_type'
}

export type V1Reviews2 = {
  data: Array<Maybe<Review3>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

/**
 * Reviews can be used to supplement automated fraud detection with human expertise.
 *
 * Learn more about [Radar](/radar) and reviewing payments
 * [here](https://stripe.com/docs/radar/reviews).
 */
export type Review3 = {
  /** The ZIP or postal code of the card used, if applicable. */
  billingZip?: Maybe<Scalars['String']>;
  /** The charge associated with this review. */
  charge?: Maybe<Scalars['JSON']>;
  /** The reason the review was closed, or null if it has not yet been closed. One of `approved`, `refunded`, `refunded_as_fraud`, `disputed`, or `redacted`. */
  closedReason?: Maybe<ClosedReason>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created: Scalars['Int'];
  /** Unique identifier for the object. */
  id: Scalars['String'];
  /** The IP address where the payment originated. */
  ipAddress?: Maybe<Scalars['String']>;
  /** Information related to the location of the payment. Note that this information is an approximation and attempts to locate the nearest population center - it should not be used to determine a specific address. */
  ipAddressLocation?: Maybe<IpAddressLocation>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object72;
  /** If `true`, the review needs action. */
  open: Scalars['Boolean'];
  /** The reason the review was opened. One of `rule` or `manual`. */
  openedReason: OpenedReason;
  /** The PaymentIntent ID associated with this review, if one exists. */
  paymentIntent?: Maybe<Scalars['JSON']>;
  /** The reason the review is currently open or closed. One of `rule`, `manual`, `approved`, `refunded`, `refunded_as_fraud`, `disputed`, or `redacted`. */
  reason: Scalars['String'];
  /** Information related to the browsing session of the user who initiated the payment. */
  session?: Maybe<Session>;
};

export enum ClosedReason {
  APPROVED = 'approved',
  DISPUTED = 'disputed',
  REDACTED = 'redacted',
  REFUNDED = 'refunded',
  REFUNDED_AS_FRAUD = 'refunded_as_fraud'
}

/** Information related to the location of the payment. Note that this information is an approximation and attempts to locate the nearest population center - it should not be used to determine a specific address. */
export type IpAddressLocation = {
  /** The city where the payment originated. */
  city?: Maybe<Scalars['String']>;
  /** Two-letter ISO code representing the country where the payment originated. */
  country?: Maybe<Scalars['String']>;
  /** The geographic latitude where the payment originated. */
  latitude?: Maybe<Scalars['Float']>;
  /** The geographic longitude where the payment originated. */
  longitude?: Maybe<Scalars['Float']>;
  /** The state/county/province/region where the payment originated. */
  region?: Maybe<Scalars['String']>;
};

export enum Object72 {
  REVIEW = 'review'
}

export enum OpenedReason {
  MANUAL = 'manual',
  RULE = 'rule'
}

/** Information related to the browsing session of the user who initiated the payment. */
export type Session = {
  /** The browser used in this browser session (e.g., `Chrome`). */
  browser?: Maybe<Scalars['String']>;
  /** Information about the device used for the browser session (e.g., `Samsung SM-G930T`). */
  device?: Maybe<Scalars['String']>;
  /** The platform for the browser session (e.g., `Macintosh`). */
  platform?: Maybe<Scalars['String']>;
  /** The version for the browser session (e.g., `61.0.3163.100`). */
  version?: Maybe<Scalars['String']>;
};

export type PaymentFlowsSetupIntentSetupAttemptList = {
  data: Array<Maybe<SetupAttempt3>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

/**
 * A SetupAttempt describes one attempted confirmation of a SetupIntent,
 * whether that confirmation was successful or unsuccessful. You can use
 * SetupAttempts to inspect details of a specific attempt at setting up a
 * payment method using a SetupIntent.
 */
export type SetupAttempt3 = {
  /** The value of [application](https://stripe.com/docs/api/setup_intents/object#setup_intent_object-application) on the SetupIntent at the time of this confirmation. */
  application?: Maybe<Scalars['JSON']>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created: Scalars['Int'];
  /** The value of [customer](https://stripe.com/docs/api/setup_intents/object#setup_intent_object-customer) on the SetupIntent at the time of this confirmation. */
  customer?: Maybe<Scalars['JSON']>;
  /** Unique identifier for the object. */
  id: Scalars['String'];
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object73;
  /** The value of [on_behalf_of](https://stripe.com/docs/api/setup_intents/object#setup_intent_object-on_behalf_of) on the SetupIntent at the time of this confirmation. */
  onBehalfOf?: Maybe<Scalars['JSON']>;
  /** ID of the payment method used with this SetupAttempt. */
  paymentMethod: Scalars['JSON'];
  paymentMethodDetails: SetupAttemptPaymentMethodDetails;
  /** The error encountered during this attempt to confirm the SetupIntent, if any. */
  setupError?: Maybe<SetupError>;
  /** ID of the SetupIntent that this attempt belongs to. */
  setupIntent: Scalars['JSON'];
  /** Status of this SetupAttempt, one of `requires_confirmation`, `requires_action`, `processing`, `succeeded`, `failed`, or `abandoned`. */
  status: Scalars['String'];
  /** The value of [usage](https://stripe.com/docs/api/setup_intents/object#setup_intent_object-usage) on the SetupIntent at the time of this confirmation, one of `off_session` or `on_session`. */
  usage: Scalars['String'];
};

export enum Object73 {
  SETUP_ATTEMPT = 'setup_attempt'
}

export type SetupAttemptPaymentMethodDetails = {
  acssDebit?: Maybe<Scalars['JSON']>;
  auBecsDebit?: Maybe<Scalars['JSON']>;
  bacsDebit?: Maybe<Scalars['JSON']>;
  bancontact?: Maybe<SetupAttemptPaymentMethodDetailsBancontact>;
  card?: Maybe<SetupAttemptPaymentMethodDetailsCard>;
  cardPresent?: Maybe<SetupAttemptPaymentMethodDetailsCardPresent>;
  ideal?: Maybe<SetupAttemptPaymentMethodDetailsIdeal>;
  sepaDebit?: Maybe<Scalars['JSON']>;
  sofort?: Maybe<SetupAttemptPaymentMethodDetailsSofort>;
  /** The type of the payment method used in the SetupIntent (e.g., `card`). An additional hash is included on `payment_method_details` with a name matching this value. It contains confirmation-specific information for the payment method. */
  type: Scalars['String'];
};

export type SetupAttemptPaymentMethodDetailsBancontact = {
  /** Bank code of bank associated with the bank account. */
  bankCode?: Maybe<Scalars['String']>;
  /** Name of the bank associated with the bank account. */
  bankName?: Maybe<Scalars['String']>;
  /** Bank Identifier Code of the bank associated with the bank account. */
  bic?: Maybe<Scalars['String']>;
  /** The ID of the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt. */
  generatedSepaDebit?: Maybe<Scalars['JSON']>;
  /** The mandate for the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt. */
  generatedSepaDebitMandate?: Maybe<Scalars['JSON']>;
  /** Last four characters of the IBAN. */
  ibanLast4?: Maybe<Scalars['String']>;
  /**
   * Preferred language of the Bancontact authorization page that the customer is redirected to.
   * Can be one of `en`, `de`, `fr`, or `nl`
   */
  preferredLanguage?: Maybe<PreferredLanguage>;
  /**
   * Owner's verified full name. Values are verified or provided by Bancontact directly
   * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   */
  verifiedName?: Maybe<Scalars['String']>;
};

export type SetupAttemptPaymentMethodDetailsCard = {
  /** Populated if this authorization used 3D Secure authentication. */
  threeDSecure?: Maybe<ThreeDSecure6>;
};

/** Populated if this authorization used 3D Secure authentication. */
export type ThreeDSecure6 = {
  /**
   * For authenticated transactions: how the customer was authenticated by
   * the issuing bank.
   */
  authenticationFlow?: Maybe<AuthenticationFlow>;
  /** Indicates the outcome of 3D Secure authentication. */
  result?: Maybe<Result>;
  /**
   * Additional information about why 3D Secure succeeded or failed based
   * on the `result`.
   */
  resultReason?: Maybe<ResultReason>;
  /** The version of 3D Secure that was used. */
  version?: Maybe<Version>;
};

export type SetupAttemptPaymentMethodDetailsCardPresent = {
  /** The ID of the Card PaymentMethod which was generated by this SetupAttempt. */
  generatedCard?: Maybe<Scalars['JSON']>;
};

export type SetupAttemptPaymentMethodDetailsIdeal = {
  /** The customer's bank. Can be one of `abn_amro`, `asn_bank`, `bunq`, `handelsbanken`, `ing`, `knab`, `moneyou`, `rabobank`, `regiobank`, `revolut`, `sns_bank`, `triodos_bank`, or `van_lanschot`. */
  bank?: Maybe<Bank3>;
  /** The Bank Identifier Code of the customer's bank. */
  bic?: Maybe<Bic3>;
  /** The ID of the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt. */
  generatedSepaDebit?: Maybe<Scalars['JSON']>;
  /** The mandate for the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt. */
  generatedSepaDebitMandate?: Maybe<Scalars['JSON']>;
  /** Last four characters of the IBAN. */
  ibanLast4?: Maybe<Scalars['String']>;
  /**
   * Owner's verified full name. Values are verified or provided by iDEAL directly
   * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   */
  verifiedName?: Maybe<Scalars['String']>;
};

export type SetupAttemptPaymentMethodDetailsSofort = {
  /** Bank code of bank associated with the bank account. */
  bankCode?: Maybe<Scalars['String']>;
  /** Name of the bank associated with the bank account. */
  bankName?: Maybe<Scalars['String']>;
  /** Bank Identifier Code of the bank associated with the bank account. */
  bic?: Maybe<Scalars['String']>;
  /** The ID of the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt. */
  generatedSepaDebit?: Maybe<Scalars['JSON']>;
  /** The mandate for the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt. */
  generatedSepaDebitMandate?: Maybe<Scalars['JSON']>;
  /** Last four characters of the IBAN. */
  ibanLast4?: Maybe<Scalars['String']>;
  /**
   * Preferred language of the Sofort authorization page that the customer is redirected to.
   * Can be one of `en`, `de`, `fr`, or `nl`
   */
  preferredLanguage?: Maybe<PreferredLanguage7>;
  /**
   * Owner's verified full name. Values are verified or provided by Sofort directly
   * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   */
  verifiedName?: Maybe<Scalars['String']>;
};

export enum PreferredLanguage7 {
  DE = 'de',
  EN = 'en',
  FR = 'fr',
  NL = 'nl'
}

/** The error encountered during this attempt to confirm the SetupIntent, if any. */
export type SetupError = {
  /** For card errors, the ID of the failed charge. */
  charge?: Maybe<Scalars['String']>;
  /** For some errors that could be handled programmatically, a short string indicating the [error code](https://stripe.com/docs/error-codes) reported. */
  code?: Maybe<Scalars['String']>;
  /** For card errors resulting from a card issuer decline, a short string indicating the [card issuer's reason for the decline](https://stripe.com/docs/declines#issuer-declines) if they provide one. */
  declineCode?: Maybe<Scalars['String']>;
  /** A URL to more information about the [error code](https://stripe.com/docs/error-codes) reported. */
  docUrl?: Maybe<Scalars['String']>;
  /** A human-readable message providing more details about the error. For card errors, these messages can be shown to your users. */
  message?: Maybe<Scalars['String']>;
  /** If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field. */
  param?: Maybe<Scalars['String']>;
  /**
   * A PaymentIntent guides you through the process of collecting a payment from your customer.
   * We recommend that you create exactly one PaymentIntent for each order or
   * customer session in your system. You can reference the PaymentIntent later to
   * see the history of payment attempts for a particular session.
   *
   * A PaymentIntent transitions through
   * [multiple statuses](https://stripe.com/docs/payments/intents#intent-statuses)
   * throughout its lifetime as it interfaces with Stripe.js to perform
   * authentication flows and ultimately creates at most one successful charge.
   *
   * Related guide: [Payment Intents API](https://stripe.com/docs/payments/payment-intents).
   */
  paymentIntent?: Maybe<PaymentIntent7>;
  /**
   * PaymentMethod objects represent your customer's payment instruments.
   * They can be used with [PaymentIntents](https://stripe.com/docs/payments/payment-intents) to collect payments or saved to
   * Customer objects to store instrument details for future payments.
   *
   * Related guides: [Payment Methods](https://stripe.com/docs/payments/payment-methods) and [More Payment Scenarios](https://stripe.com/docs/payments/more-payment-scenarios).
   */
  paymentMethod?: Maybe<PaymentMethod3>;
  /** If the error is specific to the type of payment method, the payment method type that had a problem. This field is only populated for invoice-related errors. */
  paymentMethodType?: Maybe<Scalars['String']>;
  /**
   * A SetupIntent guides you through the process of setting up and saving a customer's payment credentials for future payments.
   * For example, you could use a SetupIntent to set up and save your customer's card without immediately collecting a payment.
   * Later, you can use [PaymentIntents](https://stripe.com/docs/api#payment_intents) to drive the payment flow.
   *
   * Create a SetupIntent as soon as you're ready to collect your customer's payment credentials.
   * Do not maintain long-lived, unconfirmed SetupIntents as they may no longer be valid.
   * The SetupIntent then transitions through multiple [statuses](https://stripe.com/docs/payments/intents#intent-statuses) as it guides
   * you through the setup process.
   *
   * Successful SetupIntents result in payment credentials that are optimized for future payments.
   * For example, cardholders in [certain regions](/guides/strong-customer-authentication) may need to be run through
   * [Strong Customer Authentication](https://stripe.com/docs/strong-customer-authentication) at the time of payment method collection
   * in order to streamline later [off-session payments](https://stripe.com/docs/payments/setup-intents).
   * If the SetupIntent is used with a [Customer](https://stripe.com/docs/api#setup_intent_object-customer), upon success,
   * it will automatically attach the resulting payment method to that Customer.
   * We recommend using SetupIntents or [setup_future_usage](https://stripe.com/docs/api#payment_intent_object-setup_future_usage) on
   * PaymentIntents to save payment methods in order to prevent saving invalid or unoptimized payment methods.
   *
   * By using SetupIntents, you ensure that your customers experience the minimum set of required friction,
   * even as regulations change over time.
   *
   * Related guide: [Setup Intents API](https://stripe.com/docs/payments/setup-intents).
   */
  setupIntent?: Maybe<SetupIntent2>;
  /** The source object for errors returned on a request involving a source. */
  source?: Maybe<Source9>;
  /** The type of error returned. One of `api_error`, `card_error`, `idempotency_error`, or `invalid_request_error` */
  type?: Maybe<Type30>;
};

export type PaymentFlowsSetupIntentList = {
  data: Array<Maybe<SetupIntent2>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

export type V1SigmaScheduledQueryRuns2 = {
  data: Array<Maybe<ScheduledQueryRun>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

/**
 * If you have [scheduled a Sigma query](https://stripe.com/docs/sigma/scheduled-queries), you'll
 * receive a `sigma.scheduled_query_run.created` webhook each time the query
 * runs. The webhook contains a `ScheduledQueryRun` object, which you can use to
 * retrieve the query results.
 */
export type ScheduledQueryRun = {
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created: Scalars['Int'];
  /** When the query was run, Sigma contained a snapshot of your Stripe data at this time. */
  dataLoadTime: Scalars['Int'];
  error?: Maybe<SigmaScheduledQueryRunError>;
  /** The file object representing the results of the query. */
  file?: Maybe<File4>;
  /** Unique identifier for the object. */
  id: Scalars['String'];
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object74;
  /** Time at which the result expires and is no longer available for download. */
  resultAvailableUntil: Scalars['Int'];
  /** SQL for the query. */
  sql: Scalars['String'];
  /** The query's execution status, which will be `completed` for successful runs, and `canceled`, `failed`, or `timed_out` otherwise. */
  status: Scalars['String'];
  /** Title of the query. */
  title: Scalars['String'];
};

export type SigmaScheduledQueryRunError = {
  /** Information about the run failure. */
  message: Scalars['String'];
};

/** The file object representing the results of the query. */
export type File4 = {
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: Maybe<Scalars['Int']>;
  /** The time at which the file expires and is no longer available in epoch seconds. */
  expiresAt?: Maybe<Scalars['Int']>;
  /** A filename for the file, suitable for saving to a filesystem. */
  filename?: Maybe<Scalars['String']>;
  /** Unique identifier for the object. */
  id?: Maybe<Scalars['String']>;
  /** A list of [file links](https://stripe.com/docs/api#file_links) that point at this file. */
  links?: Maybe<Links>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: Maybe<Object41>;
  /** The [purpose](https://stripe.com/docs/file-upload#uploading-a-file) of the uploaded file. */
  purpose?: Maybe<Purpose>;
  /** The size in bytes of the file object. */
  size?: Maybe<Scalars['Int']>;
  /** A user friendly title for the document. */
  title?: Maybe<Scalars['String']>;
  /** The type of the file returned (e.g., `csv`, `pdf`, `jpg`, or `png`). */
  type?: Maybe<Scalars['String']>;
  /** The URL from which the file can be downloaded using your live secret API key. */
  url?: Maybe<Scalars['String']>;
};

export enum Object74 {
  SCHEDULED_QUERY_RUN = 'scheduled_query_run'
}

export type V1Skus2 = {
  data: Array<Maybe<Sku>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

/**
 * Stores representations of [stock keeping units](http://en.wikipedia.org/wiki/Stock_keeping_unit).
 * SKUs describe specific product variations, taking into account any combination of: attributes,
 * currency, and cost. For example, a product may be a T-shirt, whereas a specific SKU represents
 * the `size: large`, `color: red` version of that shirt.
 *
 * Can also be used to manage inventory.
 *
 * Related guide: [Tax, Shipping, and Inventory](https://stripe.com/docs/orders).
 */
export type Sku = {
  /** Whether the SKU is available for purchase. */
  active: Scalars['Boolean'];
  /** A dictionary of attributes and values for the attributes defined by the product. If, for example, a product's attributes are `["size", "gender"]`, a valid SKU has the following dictionary of attributes: `{"size": "Medium", "gender": "Unisex"}`. */
  attributes: Scalars['JSON'];
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created: Scalars['Int'];
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency: Scalars['String'];
  /** Unique identifier for the object. */
  id: Scalars['String'];
  /** The URL of an image for this SKU, meant to be displayable to the customer. */
  image?: Maybe<Scalars['String']>;
  inventory: SkuInventory;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: Scalars['Boolean'];
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata: Scalars['JSON'];
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object75;
  /** The dimensions of this SKU for shipping purposes. */
  packageDimensions?: Maybe<PackageDimensions3>;
  /** The cost of the item as a positive integer in the smallest currency unit (that is, 100 cents to charge $1.00, or 100 to charge ¥100, Japanese Yen being a zero-decimal currency). */
  price: Scalars['Int'];
  /** The ID of the product this SKU is associated with. The product must be currently active. */
  product: Scalars['JSON'];
  /** Time at which the object was last updated. Measured in seconds since the Unix epoch. */
  updated: Scalars['Int'];
};

export type SkuInventory = {
  /** The count of inventory available. Will be present if and only if `type` is `finite`. */
  quantity?: Maybe<Scalars['Int']>;
  /** Inventory type. Possible values are `finite`, `bucket` (not quantified), and `infinite`. */
  type: Scalars['String'];
  /** An indicator of the inventory available. Possible values are `in_stock`, `limited`, and `out_of_stock`. Will be present if and only if `type` is `bucket`. */
  value?: Maybe<Scalars['String']>;
};

export enum Object75 {
  SKU = 'sku'
}

/** The dimensions of this SKU for shipping purposes. */
export type PackageDimensions3 = {
  /** Height, in inches. */
  height?: Maybe<Scalars['Float']>;
  /** Length, in inches. */
  length?: Maybe<Scalars['Float']>;
  /** Weight, in ounces. */
  weight?: Maybe<Scalars['Float']>;
  /** Width, in inches. */
  width?: Maybe<Scalars['Float']>;
};

export type V1Skus4 = {
  /** Whether the SKU is available for purchase. */
  active?: Maybe<Scalars['Boolean']>;
  /** A dictionary of attributes and values for the attributes defined by the product. If, for example, a product's attributes are `["size", "gender"]`, a valid SKU has the following dictionary of attributes: `{"size": "Medium", "gender": "Unisex"}`. */
  attributes?: Maybe<Scalars['JSON']>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: Maybe<Scalars['Int']>;
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency?: Maybe<Scalars['String']>;
  /** Always true for a deleted object */
  deleted?: Maybe<Deleted>;
  /** Unique identifier for the object. */
  id?: Maybe<Scalars['String']>;
  /** The URL of an image for this SKU, meant to be displayable to the customer. */
  image?: Maybe<Scalars['String']>;
  inventory?: Maybe<Inventory2>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: Maybe<Scalars['Boolean']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Maybe<Scalars['JSON']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object?: Maybe<Object75>;
  /** The dimensions of this SKU for shipping purposes. */
  packageDimensions?: Maybe<PackageDimensions3>;
  /** The cost of the item as a positive integer in the smallest currency unit (that is, 100 cents to charge $1.00, or 100 to charge ¥100, Japanese Yen being a zero-decimal currency). */
  price?: Maybe<Scalars['Int']>;
  /** The ID of the product this SKU is associated with. The product must be currently active. */
  product?: Maybe<Scalars['JSON']>;
  /** Time at which the object was last updated. Measured in seconds since the Unix epoch. */
  updated?: Maybe<Scalars['Int']>;
};

export type Inventory2 = {
  /** The count of inventory available. Will be present if and only if `type` is `finite`. */
  quantity?: Maybe<Scalars['Int']>;
  /** Inventory type. Possible values are `finite`, `bucket` (not quantified), and `infinite`. */
  type: Scalars['String'];
  /** An indicator of the inventory available. Possible values are `in_stock`, `limited`, and `out_of_stock`. Will be present if and only if `type` is `bucket`. */
  value?: Maybe<Scalars['String']>;
};

/**
 * `Source` objects allow you to accept a variety of payment methods. They
 * represent a customer's payment instrument, and can be used with the Stripe API
 * just like a `Card` object: once chargeable, they can be charged, or can be
 * attached to customers.
 *
 * Related guides: [Sources API](https://stripe.com/docs/sources) and [Sources & Customers](https://stripe.com/docs/sources/customers).
 */
export type Source12 = {
  achCreditTransfer?: Maybe<SourceTypeAchCreditTransfer>;
  achDebit?: Maybe<SourceTypeAchDebit>;
  acssDebit?: Maybe<SourceTypeAcssDebit>;
  alipay?: Maybe<SourceTypeAlipay>;
  /** A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount associated with the source. This is the amount for which the source will be chargeable once ready. Required for `single_use` sources. */
  amount?: Maybe<Scalars['Int']>;
  auBecsDebit?: Maybe<SourceTypeAuBecsDebit>;
  bancontact?: Maybe<SourceTypeBancontact>;
  card?: Maybe<SourceTypeCard>;
  cardPresent?: Maybe<SourceTypeCardPresent>;
  /** The client secret of the source. Used for client-side retrieval using a publishable key. */
  clientSecret: Scalars['String'];
  codeVerification?: Maybe<SourceCodeVerificationFlow>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created: Scalars['Int'];
  /** Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) associated with the source. This is the currency for which the source will be chargeable once ready. Required for `single_use` sources. */
  currency?: Maybe<Scalars['String']>;
  /** The ID of the customer to which this source is attached. This will not be present when the source has not been attached to a customer. */
  customer?: Maybe<Scalars['String']>;
  eps?: Maybe<SourceTypeEps>;
  /** The authentication `flow` of the source. `flow` is one of `redirect`, `receiver`, `code_verification`, `none`. */
  flow: Scalars['String'];
  giropay?: Maybe<SourceTypeGiropay>;
  /** Unique identifier for the object. */
  id: Scalars['String'];
  ideal?: Maybe<SourceTypeIdeal>;
  klarna?: Maybe<SourceTypeKlarna>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: Scalars['Boolean'];
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Maybe<Scalars['JSON']>;
  multibanco?: Maybe<SourceTypeMultibanco>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object76;
  /** Information about the owner of the payment instrument that may be used or required by particular source types. */
  owner?: Maybe<Owner3>;
  p24?: Maybe<SourceTypeP24>;
  receiver?: Maybe<SourceReceiverFlow>;
  redirect?: Maybe<SourceRedirectFlow>;
  sepaDebit?: Maybe<SourceTypeSepaDebit>;
  sofort?: Maybe<SourceTypeSofort>;
  sourceOrder?: Maybe<SourceOrder>;
  /** Extra information about a source. This will appear on your customer's statement every time you charge the source. */
  statementDescriptor?: Maybe<Scalars['String']>;
  /** The status of the source, one of `canceled`, `chargeable`, `consumed`, `failed`, or `pending`. Only `chargeable` sources can be used to create a charge. */
  status: Scalars['String'];
  threeDSecure?: Maybe<SourceTypeThreeDSecure>;
  /** The `type` of the source. The `type` is a payment method, one of `ach_credit_transfer`, `ach_debit`, `alipay`, `bancontact`, `card`, `card_present`, `eps`, `giropay`, `ideal`, `multibanco`, `klarna`, `p24`, `sepa_debit`, `sofort`, `three_d_secure`, or `wechat`. An additional hash is included on the source with a name matching this value. It contains additional information specific to the [payment method](https://stripe.com/docs/sources) used. */
  type: Type18;
  /** Either `reusable` or `single_use`. Whether this source should be reusable or not. Some source types may or may not be reusable by construction, while others may leave the option at creation. If an incompatible value is passed, an error will be returned. */
  usage?: Maybe<Scalars['String']>;
  wechat?: Maybe<SourceTypeWechat>;
};

export type SourceTypeAchCreditTransfer = {
  accountNumber?: Maybe<Scalars['String']>;
  bankName?: Maybe<Scalars['String']>;
  fingerprint?: Maybe<Scalars['String']>;
  refundAccountHolderName?: Maybe<Scalars['String']>;
  refundAccountHolderType?: Maybe<Scalars['String']>;
  refundRoutingNumber?: Maybe<Scalars['String']>;
  routingNumber?: Maybe<Scalars['String']>;
  swiftCode?: Maybe<Scalars['String']>;
};

export type SourceTypeAchDebit = {
  bankName?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  fingerprint?: Maybe<Scalars['String']>;
  last4?: Maybe<Scalars['String']>;
  routingNumber?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};

export type SourceTypeAcssDebit = {
  bankAddressCity?: Maybe<Scalars['String']>;
  bankAddressLine1?: Maybe<Scalars['String']>;
  bankAddressLine2?: Maybe<Scalars['String']>;
  bankAddressPostalCode?: Maybe<Scalars['String']>;
  bankName?: Maybe<Scalars['String']>;
  category?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  fingerprint?: Maybe<Scalars['String']>;
  last4?: Maybe<Scalars['String']>;
  routingNumber?: Maybe<Scalars['String']>;
};

export type SourceTypeAlipay = {
  dataString?: Maybe<Scalars['String']>;
  nativeUrl?: Maybe<Scalars['String']>;
  statementDescriptor?: Maybe<Scalars['String']>;
};

export type SourceTypeAuBecsDebit = {
  bsbNumber?: Maybe<Scalars['String']>;
  fingerprint?: Maybe<Scalars['String']>;
  last4?: Maybe<Scalars['String']>;
};

export type SourceTypeBancontact = {
  bankCode?: Maybe<Scalars['String']>;
  bankName?: Maybe<Scalars['String']>;
  bic?: Maybe<Scalars['String']>;
  ibanLast4?: Maybe<Scalars['String']>;
  preferredLanguage?: Maybe<Scalars['String']>;
  statementDescriptor?: Maybe<Scalars['String']>;
};

export type SourceTypeCard = {
  addressLine1Check?: Maybe<Scalars['String']>;
  addressZipCheck?: Maybe<Scalars['String']>;
  brand?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  cvcCheck?: Maybe<Scalars['String']>;
  dynamicLast4?: Maybe<Scalars['String']>;
  expMonth?: Maybe<Scalars['Int']>;
  expYear?: Maybe<Scalars['Int']>;
  fingerprint?: Maybe<Scalars['String']>;
  funding?: Maybe<Scalars['String']>;
  last4?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  threeDSecure?: Maybe<Scalars['String']>;
  tokenizationMethod?: Maybe<Scalars['String']>;
};

export type SourceTypeCardPresent = {
  applicationCryptogram?: Maybe<Scalars['String']>;
  applicationPreferredName?: Maybe<Scalars['String']>;
  authorizationCode?: Maybe<Scalars['String']>;
  authorizationResponseCode?: Maybe<Scalars['String']>;
  brand?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  cvmType?: Maybe<Scalars['String']>;
  dataType?: Maybe<Scalars['String']>;
  dedicatedFileName?: Maybe<Scalars['String']>;
  emvAuthData?: Maybe<Scalars['String']>;
  evidenceCustomerSignature?: Maybe<Scalars['String']>;
  evidenceTransactionCertificate?: Maybe<Scalars['String']>;
  expMonth?: Maybe<Scalars['Int']>;
  expYear?: Maybe<Scalars['Int']>;
  fingerprint?: Maybe<Scalars['String']>;
  funding?: Maybe<Scalars['String']>;
  last4?: Maybe<Scalars['String']>;
  posDeviceId?: Maybe<Scalars['String']>;
  posEntryMode?: Maybe<Scalars['String']>;
  readMethod?: Maybe<Scalars['String']>;
  reader?: Maybe<Scalars['String']>;
  terminalVerificationResults?: Maybe<Scalars['String']>;
  transactionStatusInformation?: Maybe<Scalars['String']>;
};

export type SourceCodeVerificationFlow = {
  /** The number of attempts remaining to authenticate the source object with a verification code. */
  attemptsRemaining: Scalars['Int'];
  /** The status of the code verification, either `pending` (awaiting verification, `attempts_remaining` should be greater than 0), `succeeded` (successful verification) or `failed` (failed verification, cannot be verified anymore as `attempts_remaining` should be 0). */
  status: Scalars['String'];
};

export type SourceTypeEps = {
  reference?: Maybe<Scalars['String']>;
  statementDescriptor?: Maybe<Scalars['String']>;
};

export type SourceTypeGiropay = {
  bankCode?: Maybe<Scalars['String']>;
  bankName?: Maybe<Scalars['String']>;
  bic?: Maybe<Scalars['String']>;
  statementDescriptor?: Maybe<Scalars['String']>;
};

export type SourceTypeIdeal = {
  bank?: Maybe<Scalars['String']>;
  bic?: Maybe<Scalars['String']>;
  ibanLast4?: Maybe<Scalars['String']>;
  statementDescriptor?: Maybe<Scalars['String']>;
};

export type SourceTypeKlarna = {
  backgroundImageUrl?: Maybe<Scalars['String']>;
  clientToken?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  locale?: Maybe<Scalars['String']>;
  logoUrl?: Maybe<Scalars['String']>;
  pageTitle?: Maybe<Scalars['String']>;
  payLaterAssetUrlsDescriptive?: Maybe<Scalars['String']>;
  payLaterAssetUrlsStandard?: Maybe<Scalars['String']>;
  payLaterName?: Maybe<Scalars['String']>;
  payLaterRedirectUrl?: Maybe<Scalars['String']>;
  payNowAssetUrlsDescriptive?: Maybe<Scalars['String']>;
  payNowAssetUrlsStandard?: Maybe<Scalars['String']>;
  payNowName?: Maybe<Scalars['String']>;
  payNowRedirectUrl?: Maybe<Scalars['String']>;
  payOverTimeAssetUrlsDescriptive?: Maybe<Scalars['String']>;
  payOverTimeAssetUrlsStandard?: Maybe<Scalars['String']>;
  payOverTimeName?: Maybe<Scalars['String']>;
  payOverTimeRedirectUrl?: Maybe<Scalars['String']>;
  paymentMethodCategories?: Maybe<Scalars['String']>;
  purchaseCountry?: Maybe<Scalars['String']>;
  purchaseType?: Maybe<Scalars['String']>;
  redirectUrl?: Maybe<Scalars['String']>;
  shippingDelay?: Maybe<Scalars['Int']>;
  shippingFirstName?: Maybe<Scalars['String']>;
  shippingLastName?: Maybe<Scalars['String']>;
};

export type SourceTypeMultibanco = {
  entity?: Maybe<Scalars['String']>;
  reference?: Maybe<Scalars['String']>;
  refundAccountHolderAddressCity?: Maybe<Scalars['String']>;
  refundAccountHolderAddressCountry?: Maybe<Scalars['String']>;
  refundAccountHolderAddressLine1?: Maybe<Scalars['String']>;
  refundAccountHolderAddressLine2?: Maybe<Scalars['String']>;
  refundAccountHolderAddressPostalCode?: Maybe<Scalars['String']>;
  refundAccountHolderAddressState?: Maybe<Scalars['String']>;
  refundAccountHolderName?: Maybe<Scalars['String']>;
  refundIban?: Maybe<Scalars['String']>;
};

export enum Object76 {
  SOURCE = 'source'
}

export type SourceTypeP24 = {
  reference?: Maybe<Scalars['String']>;
};

export type SourceReceiverFlow = {
  /** The address of the receiver source. This is the value that should be communicated to the customer to send their funds to. */
  address?: Maybe<Scalars['String']>;
  /** The total amount that was moved to your balance. This is almost always equal to the amount charged. In rare cases when customers deposit excess funds and we are unable to refund those, those funds get moved to your balance and show up in amount_charged as well. The amount charged is expressed in the source's currency. */
  amountCharged: Scalars['Int'];
  /** The total amount received by the receiver source. `amount_received = amount_returned + amount_charged` should be true for consumed sources unless customers deposit excess funds. The amount received is expressed in the source's currency. */
  amountReceived: Scalars['Int'];
  /** The total amount that was returned to the customer. The amount returned is expressed in the source's currency. */
  amountReturned: Scalars['Int'];
  /** Type of refund attribute method, one of `email`, `manual`, or `none`. */
  refundAttributesMethod: Scalars['String'];
  /** Type of refund attribute status, one of `missing`, `requested`, or `available`. */
  refundAttributesStatus: Scalars['String'];
};

export type SourceRedirectFlow = {
  /** The failure reason for the redirect, either `user_abort` (the customer aborted or dropped out of the redirect flow), `declined` (the authentication failed or the transaction was declined), or `processing_error` (the redirect failed due to a technical error). Present only if the redirect status is `failed`. */
  failureReason?: Maybe<Scalars['String']>;
  /** The URL you provide to redirect the customer to after they authenticated their payment. */
  returnUrl: Scalars['String'];
  /** The status of the redirect, either `pending` (ready to be used by your customer to authenticate the transaction), `succeeded` (succesful authentication, cannot be reused) or `not_required` (redirect should not be used) or `failed` (failed authentication, cannot be reused). */
  status: Scalars['String'];
  /** The URL provided to you to redirect a customer to as part of a `redirect` authentication flow. */
  url: Scalars['String'];
};

export type SourceTypeSepaDebit = {
  bankCode?: Maybe<Scalars['String']>;
  branchCode?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  fingerprint?: Maybe<Scalars['String']>;
  last4?: Maybe<Scalars['String']>;
  mandateReference?: Maybe<Scalars['String']>;
  mandateUrl?: Maybe<Scalars['String']>;
};

export type SourceTypeSofort = {
  bankCode?: Maybe<Scalars['String']>;
  bankName?: Maybe<Scalars['String']>;
  bic?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  ibanLast4?: Maybe<Scalars['String']>;
  preferredLanguage?: Maybe<Scalars['String']>;
  statementDescriptor?: Maybe<Scalars['String']>;
};

export type SourceTypeThreeDSecure = {
  addressLine1Check?: Maybe<Scalars['String']>;
  addressZipCheck?: Maybe<Scalars['String']>;
  authenticated?: Maybe<Scalars['Boolean']>;
  brand?: Maybe<Scalars['String']>;
  card?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  customer?: Maybe<Scalars['String']>;
  cvcCheck?: Maybe<Scalars['String']>;
  dynamicLast4?: Maybe<Scalars['String']>;
  expMonth?: Maybe<Scalars['Int']>;
  expYear?: Maybe<Scalars['Int']>;
  fingerprint?: Maybe<Scalars['String']>;
  funding?: Maybe<Scalars['String']>;
  last4?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  threeDSecure?: Maybe<Scalars['String']>;
  tokenizationMethod?: Maybe<Scalars['String']>;
};

export type SourceTypeWechat = {
  prepayId?: Maybe<Scalars['String']>;
  qrCodeUrl?: Maybe<Scalars['String']>;
  statementDescriptor?: Maybe<Scalars['String']>;
};

/**
 * Source mandate notifications should be created when a notification related to
 * a source mandate must be sent to the payer. They will trigger a webhook or
 * deliver an email to the customer.
 */
export type SourceMandateNotification = {
  acssDebit?: Maybe<SourceMandateNotificationAcssDebitData>;
  /** A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the amount associated with the mandate notification. The amount is expressed in the currency of the underlying source. Required if the notification type is `debit_initiated`. */
  amount?: Maybe<Scalars['Int']>;
  bacsDebit?: Maybe<SourceMandateNotificationBacsDebitData>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created: Scalars['Int'];
  /** Unique identifier for the object. */
  id: Scalars['String'];
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object77;
  /** The reason of the mandate notification. Valid reasons are `mandate_confirmed` or `debit_initiated`. */
  reason: Scalars['String'];
  sepaDebit?: Maybe<SourceMandateNotificationSepaDebitData>;
  /**
   * `Source` objects allow you to accept a variety of payment methods. They
   * represent a customer's payment instrument, and can be used with the Stripe API
   * just like a `Card` object: once chargeable, they can be charged, or can be
   * attached to customers.
   *
   * Related guides: [Sources API](https://stripe.com/docs/sources) and [Sources & Customers](https://stripe.com/docs/sources/customers).
   */
  source: Source12;
  /** The status of the mandate notification. Valid statuses are `pending` or `submitted`. */
  status: Scalars['String'];
  /** The type of source this mandate notification is attached to. Should be the source type identifier code for the payment method, such as `three_d_secure`. */
  type: Scalars['String'];
};

export type SourceMandateNotificationAcssDebitData = {
  /** The statement descriptor associate with the debit. */
  statementDescriptor?: Maybe<Scalars['String']>;
};

export type SourceMandateNotificationBacsDebitData = {
  /** Last 4 digits of the account number associated with the debit. */
  last4?: Maybe<Scalars['String']>;
};

export enum Object77 {
  SOURCE_MANDATE_NOTIFICATION = 'source_mandate_notification'
}

export type SourceMandateNotificationSepaDebitData = {
  /** SEPA creditor ID. */
  creditorIdentifier?: Maybe<Scalars['String']>;
  /** Last 4 digits of the account number associated with the debit. */
  last4?: Maybe<Scalars['String']>;
  /** Mandate reference associated with the debit. */
  mandateReference?: Maybe<Scalars['String']>;
};

export type ApmsSourcesSourceTransactionList = {
  data: Array<Maybe<SourceTransaction>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

/**
 * Some payment methods have no required amount that a customer must send.
 * Customers can be instructed to send any amount, and it can be made up of
 * multiple transactions. As such, sources can have multiple associated
 * transactions.
 */
export type SourceTransaction = {
  achCreditTransfer?: Maybe<SourceTransactionAchCreditTransferData>;
  /** A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the amount your customer has pushed to the receiver. */
  amount: Scalars['Int'];
  chfCreditTransfer?: Maybe<SourceTransactionChfCreditTransferData>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created: Scalars['Int'];
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency: Scalars['String'];
  gbpCreditTransfer?: Maybe<SourceTransactionGbpCreditTransferData>;
  /** Unique identifier for the object. */
  id: Scalars['String'];
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object78;
  paperCheck?: Maybe<SourceTransactionPaperCheckData>;
  sepaCreditTransfer?: Maybe<SourceTransactionSepaCreditTransferData>;
  /** The ID of the source this transaction is attached to. */
  source: Scalars['String'];
  /** The status of the transaction, one of `succeeded`, `pending`, or `failed`. */
  status: Scalars['String'];
  /** The type of source this transaction is attached to. */
  type: Type63;
};

export type SourceTransactionAchCreditTransferData = {
  /** Customer data associated with the transfer. */
  customerData?: Maybe<Scalars['String']>;
  /** Bank account fingerprint associated with the transfer. */
  fingerprint?: Maybe<Scalars['String']>;
  /** Last 4 digits of the account number associated with the transfer. */
  last4?: Maybe<Scalars['String']>;
  /** Routing number associated with the transfer. */
  routingNumber?: Maybe<Scalars['String']>;
};

export type SourceTransactionChfCreditTransferData = {
  /** Reference associated with the transfer. */
  reference?: Maybe<Scalars['String']>;
  /** Sender's country address. */
  senderAddressCountry?: Maybe<Scalars['String']>;
  /** Sender's line 1 address. */
  senderAddressLine1?: Maybe<Scalars['String']>;
  /** Sender's bank account IBAN. */
  senderIban?: Maybe<Scalars['String']>;
  /** Sender's name. */
  senderName?: Maybe<Scalars['String']>;
};

export type SourceTransactionGbpCreditTransferData = {
  /** Bank account fingerprint associated with the Stripe owned bank account receiving the transfer. */
  fingerprint?: Maybe<Scalars['String']>;
  /** The credit transfer rails the sender used to push this transfer. The possible rails are: Faster Payments, BACS, CHAPS, and wire transfers. Currently only Faster Payments is supported. */
  fundingMethod?: Maybe<Scalars['String']>;
  /** Last 4 digits of sender account number associated with the transfer. */
  last4?: Maybe<Scalars['String']>;
  /** Sender entered arbitrary information about the transfer. */
  reference?: Maybe<Scalars['String']>;
  /** Sender account number associated with the transfer. */
  senderAccountNumber?: Maybe<Scalars['String']>;
  /** Sender name associated with the transfer. */
  senderName?: Maybe<Scalars['String']>;
  /** Sender sort code associated with the transfer. */
  senderSortCode?: Maybe<Scalars['String']>;
};

export enum Object78 {
  SOURCE_TRANSACTION = 'source_transaction'
}

export type SourceTransactionPaperCheckData = {
  /** Time at which the deposited funds will be available for use. Measured in seconds since the Unix epoch. */
  availableAt?: Maybe<Scalars['String']>;
  /** Comma-separated list of invoice IDs associated with the paper check. */
  invoices?: Maybe<Scalars['String']>;
};

export type SourceTransactionSepaCreditTransferData = {
  /** Reference associated with the transfer. */
  reference?: Maybe<Scalars['String']>;
  /** Sender's bank account IBAN. */
  senderIban?: Maybe<Scalars['String']>;
  /** Sender's name. */
  senderName?: Maybe<Scalars['String']>;
};

export enum Type63 {
  ACH_CREDIT_TRANSFER = 'ach_credit_transfer',
  ACH_DEBIT = 'ach_debit',
  ALIPAY = 'alipay',
  BANCONTACT = 'bancontact',
  CARD = 'card',
  CARD_PRESENT = 'card_present',
  EPS = 'eps',
  GIROPAY = 'giropay',
  IDEAL = 'ideal',
  KLARNA = 'klarna',
  MULTIBANCO = 'multibanco',
  P24 = 'p24',
  SEPA_DEBIT = 'sepa_debit',
  SOFORT = 'sofort',
  THREE_D_SECURE = 'three_d_secure',
  WECHAT = 'wechat'
}

export type V1SubscriptionItems2 = {
  data: Array<Maybe<SubscriptionItem>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

export type V1SubscriptionItemUsageRecordSummaries2 = {
  data: Array<Maybe<UsageRecordSummary>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

export type UsageRecordSummary = {
  /** Unique identifier for the object. */
  id: Scalars['String'];
  /** The invoice in which this usage period has been billed for. */
  invoice?: Maybe<Scalars['String']>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object79;
  period: Period2;
  /** The ID of the subscription item this summary is describing. */
  subscriptionItem: Scalars['String'];
  /** The total usage within this usage period. */
  totalUsage: Scalars['Int'];
};

export enum Object79 {
  USAGE_RECORD_SUMMARY = 'usage_record_summary'
}

export type Period2 = {
  /** The end date of this usage period. All usage up to and including this point in time is included. */
  end?: Maybe<Scalars['Int']>;
  /** The start date of this usage period. All usage after this point in time is included. */
  start?: Maybe<Scalars['Int']>;
};

export type V1SubscriptionSchedules2 = {
  data: Array<Maybe<SubscriptionSchedule2>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

/**
 * A subscription schedule allows you to create and manage the lifecycle of a subscription by predefining expected changes.
 *
 * Related guide: [Subscription Schedules](https://stripe.com/docs/billing/subscriptions/subscription-schedules).
 */
export type SubscriptionSchedule2 = {
  /** Time at which the subscription schedule was canceled. Measured in seconds since the Unix epoch. */
  canceledAt?: Maybe<Scalars['Int']>;
  /** Time at which the subscription schedule was completed. Measured in seconds since the Unix epoch. */
  completedAt?: Maybe<Scalars['Int']>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created: Scalars['Int'];
  /** Object representing the start and end dates for the current phase of the subscription schedule, if it is `active`. */
  currentPhase?: Maybe<CurrentPhase>;
  /** ID of the customer who owns the subscription schedule. */
  customer: Scalars['JSON'];
  defaultSettings: SubscriptionSchedulesResourceDefaultSettings;
  /** Behavior of the subscription schedule and underlying subscription when it ends. Possible values are `release` and `cancel`. */
  endBehavior: EndBehavior;
  /** Unique identifier for the object. */
  id: Scalars['String'];
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: Scalars['Boolean'];
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Maybe<Scalars['JSON']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object81;
  /** Configuration for the subscription schedule's phases. */
  phases: Array<Maybe<SubscriptionSchedulePhaseConfiguration>>;
  /** Time at which the subscription schedule was released. Measured in seconds since the Unix epoch. */
  releasedAt?: Maybe<Scalars['Int']>;
  /** ID of the subscription once managed by the subscription schedule (if it is released). */
  releasedSubscription?: Maybe<Scalars['String']>;
  /** The present status of the subscription schedule. Possible values are `not_started`, `active`, `completed`, `released`, and `canceled`. You can read more about the different states in our [behavior guide](https://stripe.com/docs/billing/subscriptions/subscription-schedules). */
  status: Status51;
  /** ID of the subscription managed by the subscription schedule. */
  subscription?: Maybe<Scalars['JSON']>;
};

/** Object representing the start and end dates for the current phase of the subscription schedule, if it is `active`. */
export type CurrentPhase = {
  /** The end of this phase of the subscription schedule. */
  endDate?: Maybe<Scalars['Int']>;
  /** The start of this phase of the subscription schedule. */
  startDate?: Maybe<Scalars['Int']>;
};

export type SubscriptionSchedulesResourceDefaultSettings = {
  /** A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account during this phase of the schedule. */
  applicationFeePercent?: Maybe<Scalars['Float']>;
  automaticTax?: Maybe<SubscriptionSchedulesResourceDefaultSettingsAutomaticTax>;
  /** Possible values are `phase_start` or `automatic`. If `phase_start` then billing cycle anchor of the subscription is set to the start of the phase when entering the phase. If `automatic` then the billing cycle anchor is automatically modified as needed when entering the phase. For more information, see the billing cycle [documentation](https://stripe.com/docs/billing/subscriptions/billing-cycle). */
  billingCycleAnchor: BillingCycleAnchor5;
  /** Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period */
  billingThresholds?: Maybe<BillingThresholds>;
  /** Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay the underlying subscription at the end of each billing cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions. */
  collectionMethod?: Maybe<CollectionMethod8>;
  /** ID of the default payment method for the subscription schedule. If not set, invoices will use the default payment method in the customer's invoice settings. */
  defaultPaymentMethod?: Maybe<Scalars['JSON']>;
  /** The subscription schedule's default invoice settings. */
  invoiceSettings?: Maybe<InvoiceSettings4>;
  /** The account (if any) the associated subscription's payments will be attributed to for tax reporting, and where funds from each payment will be transferred to for each of the subscription's invoices. */
  transferData?: Maybe<TransferData15>;
};

export type SubscriptionSchedulesResourceDefaultSettingsAutomaticTax = {
  /** Whether Stripe automatically computes tax on invoices created during this phase. */
  enabled: Scalars['Boolean'];
};

export enum BillingCycleAnchor5 {
  AUTOMATIC = 'automatic',
  PHASE_START = 'phase_start'
}

export enum CollectionMethod8 {
  CHARGE_AUTOMATICALLY = 'charge_automatically',
  SEND_INVOICE = 'send_invoice'
}

/** The subscription schedule's default invoice settings. */
export type InvoiceSettings4 = {
  /** Number of days within which a customer must pay invoices generated by this subscription schedule. This value will be `null` for subscription schedules where `billing=charge_automatically`. */
  daysUntilDue?: Maybe<Scalars['Int']>;
};

/** The account (if any) the associated subscription's payments will be attributed to for tax reporting, and where funds from each payment will be transferred to for each of the subscription's invoices. */
export type TransferData15 = {
  /** A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the destination account. By default, the entire amount is transferred to the destination. */
  amountPercent?: Maybe<Scalars['Float']>;
  /** The account where funds from the payment will be transferred to upon payment success. */
  destination?: Maybe<Scalars['JSON']>;
};

export enum EndBehavior {
  CANCEL = 'cancel',
  NONE = 'none',
  RELEASE = 'release',
  RENEW = 'renew'
}

export enum Object81 {
  SUBSCRIPTION_SCHEDULE = 'subscription_schedule'
}

/** A phase describes the plans, coupon, and trialing status of a subscription for a predefined time period. */
export type SubscriptionSchedulePhaseConfiguration = {
  /** A list of prices and quantities that will generate invoice items appended to the first invoice for this phase. */
  addInvoiceItems: Array<Maybe<SubscriptionScheduleAddInvoiceItem>>;
  /** A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account during this phase of the schedule. */
  applicationFeePercent?: Maybe<Scalars['Float']>;
  automaticTax?: Maybe<SchedulesPhaseAutomaticTax>;
  /** Possible values are `phase_start` or `automatic`. If `phase_start` then billing cycle anchor of the subscription is set to the start of the phase when entering the phase. If `automatic` then the billing cycle anchor is automatically modified as needed when entering the phase. For more information, see the billing cycle [documentation](https://stripe.com/docs/billing/subscriptions/billing-cycle). */
  billingCycleAnchor?: Maybe<BillingCycleAnchor6>;
  /** Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period */
  billingThresholds?: Maybe<BillingThresholds>;
  /** Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay the underlying subscription at the end of each billing cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions. */
  collectionMethod?: Maybe<CollectionMethod8>;
  /** ID of the coupon to use during this phase of the subscription schedule. */
  coupon?: Maybe<Scalars['JSON']>;
  /** ID of the default payment method for the subscription schedule. It must belong to the customer associated with the subscription schedule. If not set, invoices will use the default payment method in the customer's invoice settings. */
  defaultPaymentMethod?: Maybe<Scalars['JSON']>;
  /** The default tax rates to apply to the subscription during this phase of the subscription schedule. */
  defaultTaxRates?: Maybe<Array<Maybe<TaxRate>>>;
  /** The end of this phase of the subscription schedule. */
  endDate: Scalars['Int'];
  /** The invoice settings applicable during this phase. */
  invoiceSettings?: Maybe<InvoiceSettings5>;
  /** Subscription items to configure the subscription to during this phase of the subscription schedule. */
  items: Array<Maybe<SubscriptionScheduleConfigurationItem>>;
  /** If the subscription schedule will prorate when transitioning to this phase. Possible values are `create_prorations` and `none`. */
  prorationBehavior: ProrationBehavior6;
  /** The start of this phase of the subscription schedule. */
  startDate: Scalars['Int'];
  /** The account (if any) the associated subscription's payments will be attributed to for tax reporting, and where funds from each payment will be transferred to for each of the subscription's invoices. */
  transferData?: Maybe<TransferData15>;
  /** When the trial ends within the phase. */
  trialEnd?: Maybe<Scalars['Int']>;
};

/** An Add Invoice Item describes the prices and quantities that will be added as pending invoice items when entering a phase. */
export type SubscriptionScheduleAddInvoiceItem = {
  /** ID of the price used to generate the invoice item. */
  price: Scalars['JSON'];
  /** The quantity of the invoice item. */
  quantity?: Maybe<Scalars['Int']>;
  /** The tax rates which apply to the item. When set, the `default_tax_rates` do not apply to this item. */
  taxRates?: Maybe<Array<Maybe<TaxRate>>>;
};

export type SchedulesPhaseAutomaticTax = {
  /** Whether Stripe automatically computes tax on invoices created during this phase. */
  enabled: Scalars['Boolean'];
};

export enum BillingCycleAnchor6 {
  AUTOMATIC = 'automatic',
  PHASE_START = 'phase_start'
}

/** The invoice settings applicable during this phase. */
export type InvoiceSettings5 = {
  /** Number of days within which a customer must pay invoices generated by this subscription schedule. This value will be `null` for subscription schedules where `billing=charge_automatically`. */
  daysUntilDue?: Maybe<Scalars['Int']>;
};

/** A phase item describes the price and quantity of a phase. */
export type SubscriptionScheduleConfigurationItem = {
  /** Define thresholds at which an invoice will be sent, and the related subscription advanced to a new billing period */
  billingThresholds?: Maybe<BillingThresholds2>;
  /** ID of the price to which the customer should be subscribed. */
  price: Scalars['JSON'];
  /** Quantity of the plan to which the customer should be subscribed. */
  quantity?: Maybe<Scalars['Int']>;
  /** The tax rates which apply to this `phase_item`. When set, the `default_tax_rates` on the phase do not apply to this `phase_item`. */
  taxRates?: Maybe<Array<Maybe<TaxRate>>>;
};

export enum ProrationBehavior6 {
  ALWAYS_INVOICE = 'always_invoice',
  CREATE_PRORATIONS = 'create_prorations',
  NONE = 'none'
}

export enum Status51 {
  ACTIVE = 'active',
  CANCELED = 'canceled',
  COMPLETED = 'completed',
  NOT_STARTED = 'not_started',
  RELEASED = 'released'
}

export type V1Subscriptions2 = {
  data: Array<Maybe<Subscription5>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

export enum Status64 {
  ACTIVE = 'active',
  ALL = 'all',
  CANCELED = 'canceled',
  ENDED = 'ended',
  INCOMPLETE = 'incomplete',
  INCOMPLETE_EXPIRED = 'incomplete_expired',
  PAST_DUE = 'past_due',
  TRIALING = 'trialing',
  UNPAID = 'unpaid'
}

export type TaxProductResourceTaxCodeList = {
  data: Array<Maybe<TaxCode6>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

/** [Tax codes](https://stripe.com/docs/tax/tax-codes) classify goods and services for tax purposes. */
export type TaxCode6 = {
  /** A detailed description of which types of products the tax code represents. */
  description: Scalars['String'];
  /** Unique identifier for the object. */
  id: Scalars['String'];
  /** A short name for the tax code. */
  name: Scalars['String'];
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object82;
};

export enum Object82 {
  TAX_CODE = 'tax_code'
}

export type V1TaxRates2 = {
  data: Array<Maybe<TaxRate>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

export type TerminalLocationLocationList = {
  data: Array<Maybe<TerminalLocation>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

/**
 * A Location represents a grouping of readers.
 *
 * Related guide: [Fleet Management](https://stripe.com/docs/terminal/creating-locations).
 */
export type TerminalLocation = {
  address: Address;
  /** The display name of the location. */
  displayName: Scalars['String'];
  /** Unique identifier for the object. */
  id: Scalars['String'];
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: Scalars['Boolean'];
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata: Scalars['JSON'];
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object84;
};

export enum Object84 {
  TERMINAL_LOCATION = 'terminal.location'
}

export type TerminalReaderRetrieveReader = {
  /** A list of readers */
  data: Array<Maybe<TerminalReader>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

/**
 * A Reader represents a physical device for accepting payment details.
 *
 * Related guide: [Connecting to a Reader](https://stripe.com/docs/terminal/readers/connecting).
 */
export type TerminalReader = {
  /** The current software version of the reader. */
  deviceSwVersion?: Maybe<Scalars['String']>;
  /** Type of reader, one of `bbpos_chipper2x` or `verifone_P400`. */
  deviceType: DeviceType;
  /** Unique identifier for the object. */
  id: Scalars['String'];
  /** The local IP address of the reader. */
  ipAddress?: Maybe<Scalars['String']>;
  /** Custom label given to the reader for easier identification. */
  label: Scalars['String'];
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: Scalars['Boolean'];
  /** The location identifier of the reader. */
  location?: Maybe<Scalars['JSON']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata: Scalars['JSON'];
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object85;
  /** Serial number of the reader. */
  serialNumber: Scalars['String'];
  /** The networking status of the reader. */
  status?: Maybe<Scalars['String']>;
};

export enum DeviceType {
  BBPOS_CHIPPER2X = 'bbpos_chipper2x',
  VERIFONE_P400 = 'verifone_P400'
}

export enum Object85 {
  TERMINAL_READER = 'terminal.reader'
}

export enum DeviceType2 {
  BBPOS_CHIPPER2X = 'bbpos_chipper2x',
  VERIFONE_P400 = 'verifone_P400'
}

export enum Status65 {
  OFFLINE = 'offline',
  ONLINE = 'online'
}

/**
 * Tokenization is the process Stripe uses to collect sensitive card or bank
 * account details, or personally identifiable information (PII), directly from
 * your customers in a secure manner. A token representing this information is
 * returned to your server to use. You should use our
 * [recommended payments integrations](https://stripe.com/docs/payments) to perform this process
 * client-side. This ensures that no sensitive card data touches your server,
 * and allows your integration to operate in a PCI-compliant way.
 *
 * If you cannot use client-side tokenization, you can also create tokens using
 * the API with either your publishable or secret API key. Keep in mind that if
 * your integration uses this method, you are responsible for any PCI compliance
 * that may be required, and you must keep your secret API key safe. Unlike with
 * client-side tokenization, your customer's information is not sent directly to
 * Stripe, so we cannot determine how it is handled or stored.
 *
 * Tokens cannot be stored or used more than once. To store card or bank account
 * information for later use, you can create [Customer](https://stripe.com/docs/api#customers)
 * objects or [Custom accounts](https://stripe.com/docs/api#external_accounts). Note that
 * [Radar](https://stripe.com/docs/radar), our integrated solution for automatic fraud protection,
 * performs best with integrations that use client-side tokenization.
 *
 * Related guide: [Accept a payment](https://stripe.com/docs/payments/accept-a-payment-charges#web-create-token)
 */
export type Token3 = {
  /**
   * These bank accounts are payment methods on `Customer` objects.
   *
   * On the other hand [External Accounts](https://stripe.com/docs/api#external_accounts) are transfer
   * destinations on `Account` objects for [Custom accounts](https://stripe.com/docs/connect/custom-accounts).
   * They can be bank accounts or debit cards as well, and are documented in the links above.
   *
   * Related guide: [Bank Debits and Transfers](https://stripe.com/docs/payments/bank-debits-transfers).
   */
  bankAccount?: Maybe<BankAccount7>;
  /**
   * You can store multiple cards on a customer in order to charge the customer
   * later. You can also store multiple debit cards on a recipient in order to
   * transfer to those cards later.
   *
   * Related guide: [Card Payments with Sources](https://stripe.com/docs/sources/cards).
   */
  card?: Maybe<Card2>;
  /** IP address of the client that generated the token. */
  clientIp?: Maybe<Scalars['String']>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created: Scalars['Int'];
  /** Unique identifier for the object. */
  id: Scalars['String'];
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object86;
  /** Type of the token: `account`, `bank_account`, `card`, or `pii`. */
  type: Scalars['String'];
  /** Whether this token has already been used (tokens can be used only once). */
  used: Scalars['Boolean'];
};

export enum Object86 {
  TOKEN = 'token'
}

export type TopupList = {
  data: Array<Maybe<Topup>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

/**
 * To top up your Stripe balance, you create a top-up object. You can retrieve
 * individual top-ups, as well as list all top-ups. Top-ups are identified by a
 * unique, random ID.
 *
 * Related guide: [Topping Up your Platform Account](https://stripe.com/docs/connect/top-ups).
 */
export type Topup = {
  /** Amount transferred. */
  amount: Scalars['Int'];
  /** ID of the balance transaction that describes the impact of this top-up on your account balance. May not be specified depending on status of top-up. */
  balanceTransaction?: Maybe<Scalars['JSON']>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created: Scalars['Int'];
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency: Scalars['String'];
  /** An arbitrary string attached to the object. Often useful for displaying to users. */
  description?: Maybe<Scalars['String']>;
  /** Date the funds are expected to arrive in your Stripe account for payouts. This factors in delays like weekends or bank holidays. May not be specified depending on status of top-up. */
  expectedAvailabilityDate?: Maybe<Scalars['Int']>;
  /** Error code explaining reason for top-up failure if available (see [the errors section](https://stripe.com/docs/api#errors) for a list of codes). */
  failureCode?: Maybe<Scalars['String']>;
  /** Message to user further explaining reason for top-up failure if available. */
  failureMessage?: Maybe<Scalars['String']>;
  /** Unique identifier for the object. */
  id: Scalars['String'];
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: Scalars['Boolean'];
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata: Scalars['JSON'];
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object87;
  /**
   * `Source` objects allow you to accept a variety of payment methods. They
   * represent a customer's payment instrument, and can be used with the Stripe API
   * just like a `Card` object: once chargeable, they can be charged, or can be
   * attached to customers.
   *
   * Related guides: [Sources API](https://stripe.com/docs/sources) and [Sources & Customers](https://stripe.com/docs/sources/customers).
   */
  source: Source12;
  /** Extra information about a top-up. This will appear on your source's bank statement. It must contain at least one letter. */
  statementDescriptor?: Maybe<Scalars['String']>;
  /** The status of the top-up is either `canceled`, `failed`, `pending`, `reversed`, or `succeeded`. */
  status: Status53;
  /** A string that identifies this top-up as part of a group. */
  transferGroup?: Maybe<Scalars['String']>;
};

export enum Object87 {
  TOPUP = 'topup'
}

export enum Status53 {
  CANCELED = 'canceled',
  FAILED = 'failed',
  PENDING = 'pending',
  REVERSED = 'reversed',
  SUCCEEDED = 'succeeded'
}

export enum Status66 {
  CANCELED = 'canceled',
  FAILED = 'failed',
  PENDING = 'pending',
  SUCCEEDED = 'succeeded'
}

export type TransferList = {
  /** Details about each object. */
  data: Array<Maybe<Transfer2>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

/**
 * A `Transfer` object is created when you move funds between Stripe accounts as
 * part of Connect.
 *
 * Before April 6, 2017, transfers also represented movement of funds from a
 * Stripe account to a card or bank account. This behavior has since been split
 * out into a [Payout](https://stripe.com/docs/api#payout_object) object, with corresponding payout endpoints. For more
 * information, read about the
 * [transfer/payout split](https://stripe.com/docs/transfer-payout-split).
 *
 * Related guide: [Creating Separate Charges and Transfers](https://stripe.com/docs/connect/charges-transfers).
 */
export type Transfer2 = {
  /** Amount in %s to be transferred. */
  amount: Scalars['Int'];
  /** Amount in %s reversed (can be less than the amount attribute on the transfer if a partial reversal was issued). */
  amountReversed: Scalars['Int'];
  /** Balance transaction that describes the impact of this transfer on your account balance. */
  balanceTransaction?: Maybe<Scalars['JSON']>;
  /** Time that this record of the transfer was first created. */
  created: Scalars['Int'];
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency: Scalars['String'];
  /** An arbitrary string attached to the object. Often useful for displaying to users. */
  description?: Maybe<Scalars['String']>;
  /** ID of the Stripe account the transfer was sent to. */
  destination?: Maybe<Scalars['JSON']>;
  /** If the destination is a Stripe account, this will be the ID of the payment that the destination account received for the transfer. */
  destinationPayment?: Maybe<Scalars['JSON']>;
  /** Unique identifier for the object. */
  id: Scalars['String'];
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: Scalars['Boolean'];
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata: Scalars['JSON'];
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object88;
  /** A list of reversals that have been applied to the transfer. */
  reversals: Reversals;
  /** Whether the transfer has been fully reversed. If the transfer is only partially reversed, this attribute will still be false. */
  reversed: Scalars['Boolean'];
  /** ID of the charge or payment that was used to fund the transfer. If null, the transfer was funded from the available balance. */
  sourceTransaction?: Maybe<Scalars['JSON']>;
  /** The source balance this transfer came from. One of `card`, `fpx`, or `bank_account`. */
  sourceType?: Maybe<Scalars['String']>;
  /** A string that identifies this transaction as part of a group. See the [Connect documentation](https://stripe.com/docs/connect/charges-transfers#transfer-options) for details. */
  transferGroup?: Maybe<Scalars['String']>;
};

export enum Object88 {
  TRANSFER = 'transfer'
}

/** A list of reversals that have been applied to the transfer. */
export type Reversals = {
  /** Details about each object. */
  data: Array<Maybe<TransferReversal2>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

/**
 * [Stripe Connect](https://stripe.com/docs/connect) platforms can reverse transfers made to a
 * connected account, either entirely or partially, and can also specify whether
 * to refund any related application fees. Transfer reversals add to the
 * platform's balance and subtract from the destination account's balance.
 *
 * Reversing a transfer that was made for a [destination
 * charge](/docs/connect/destination-charges) is allowed only up to the amount of
 * the charge. It is possible to reverse a
 * [transfer_group](https://stripe.com/docs/connect/charges-transfers#transfer-options)
 * transfer only if the destination account has enough balance to cover the
 * reversal.
 *
 * Related guide: [Reversing Transfers](https://stripe.com/docs/connect/charges-transfers#reversing-transfers).
 */
export type TransferReversal2 = {
  /** Amount, in %s. */
  amount: Scalars['Int'];
  /** Balance transaction that describes the impact on your account balance. */
  balanceTransaction?: Maybe<Scalars['JSON']>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created: Scalars['Int'];
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency: Scalars['String'];
  /** Linked payment refund for the transfer reversal. */
  destinationPaymentRefund?: Maybe<Scalars['JSON']>;
  /** Unique identifier for the object. */
  id: Scalars['String'];
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Maybe<Scalars['JSON']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object89;
  /** ID of the refund responsible for the transfer reversal. */
  sourceRefund?: Maybe<Scalars['JSON']>;
  /** ID of the transfer that was reversed. */
  transfer: Scalars['JSON'];
};

export enum Object89 {
  TRANSFER_REVERSAL = 'transfer_reversal'
}

export type TransferReversalList = {
  /** Details about each object. */
  data: Array<Maybe<TransferReversal2>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

export type V1WebhookEndpoints2 = {
  data: Array<Maybe<WebhookEndpoint>>;
  /** True if this list has another page of items after this one that can be fetched. */
  hasMore: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. Always has the value `list`. */
  object: Object4;
  /** The URL where this list can be accessed. */
  url: Scalars['String'];
};

/**
 * You can configure [webhook endpoints](https://stripe.com/docs/webhooks/) via the API to be
 * notified about events that happen in your Stripe account or connected
 * accounts.
 *
 * Most users configure webhooks from [the dashboard](https://dashboard.stripe.com/webhooks), which provides a user interface for registering and testing your webhook endpoints.
 *
 * Related guide: [Setting up Webhooks](https://stripe.com/docs/webhooks/configure).
 */
export type WebhookEndpoint = {
  /** The API version events are rendered as for this webhook endpoint. */
  apiVersion?: Maybe<Scalars['String']>;
  /** The ID of the associated Connect application. */
  application?: Maybe<Scalars['String']>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created: Scalars['Int'];
  /** An optional description of what the webhook is used for. */
  description?: Maybe<Scalars['String']>;
  /** The list of events to enable for this endpoint. `['*']` indicates that all events are enabled, except those that require explicit selection. */
  enabledEvents: Array<Maybe<Scalars['String']>>;
  /** Unique identifier for the object. */
  id: Scalars['String'];
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: Scalars['Boolean'];
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata: Scalars['JSON'];
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object90;
  /** The endpoint's secret, used to generate [webhook signatures](https://stripe.com/docs/webhooks/signatures). Only returned at creation. */
  secret?: Maybe<Scalars['String']>;
  /** The status of the webhook. It can be `enabled` or `disabled`. */
  status: Scalars['String'];
  /** The URL of the webhook endpoint. */
  url: Scalars['String'];
};

export enum Object90 {
  WEBHOOK_ENDPOINT = 'webhook_endpoint'
}

export type DeletedAccount = {
  /** Always true for a deleted object */
  deleted: Deleted;
  /** Unique identifier for the object. */
  id: Scalars['String'];
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object3;
};

export type V1AccountInput = {
  account?: Maybe<Scalars['String']>;
};

export type DeletedExternalAccount = {
  /** Three-letter [ISO code for the currency](https://stripe.com/docs/payouts) paid out to the bank account. */
  currency?: Maybe<Scalars['String']>;
  /** Always true for a deleted object */
  deleted?: Maybe<Deleted>;
  /** Unique identifier for the object. */
  id?: Maybe<Scalars['String']>;
  object?: Maybe<Scalars['JSON']>;
};

export type DeletedPerson = {
  /** Always true for a deleted object */
  deleted: Deleted;
  /** Unique identifier for the object. */
  id: Scalars['String'];
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object5;
};

export type DeletedApplePayDomain = {
  /** Always true for a deleted object */
  deleted: Deleted;
  /** Unique identifier for the object. */
  id: Scalars['String'];
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object9;
};

export type DeletedCoupon = {
  /** Always true for a deleted object */
  deleted: Deleted;
  /** Unique identifier for the object. */
  id: Scalars['String'];
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object21;
};

export type DeletedCustomer = {
  /** Always true for a deleted object */
  deleted: Deleted;
  /** Unique identifier for the object. */
  id: Scalars['String'];
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object30;
};

export type V1CustomerBankAccountInput = {
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type V1CustomerCardInput = {
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type DeletedDiscount = {
  /** The Checkout session that this coupon is applied to, if it is applied to a particular session in payment mode. Will not be present for subscription mode. */
  checkoutSession?: Maybe<Scalars['String']>;
  /**
   * A coupon contains information about a percent-off or amount-off discount you
   * might want to apply to a customer. Coupons may be applied to [invoices](https://stripe.com/docs/api#invoices) or
   * [orders](https://stripe.com/docs/api#create_order-coupon). Coupons do not work with conventional one-off [charges](https://stripe.com/docs/api#create_charge).
   */
  coupon: Coupon;
  /** The ID of the customer associated with this discount. */
  customer?: Maybe<Scalars['JSON']>;
  /** Always true for a deleted object */
  deleted: Deleted;
  /** The ID of the discount object. Discounts cannot be fetched by ID. Use `expand[]=discounts` in API calls to expand discount IDs in an array. */
  id: Scalars['String'];
  /** The invoice that the discount's coupon was applied to, if it was applied directly to a particular invoice. */
  invoice?: Maybe<Scalars['String']>;
  /** The invoice item `id` (or invoice line item `id` for invoice line items of type='subscription') that the discount's coupon was applied to, if it was applied directly to a particular invoice item or invoice line item. */
  invoiceItem?: Maybe<Scalars['String']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object22;
  /** The promotion code applied to create this discount. */
  promotionCode?: Maybe<Scalars['JSON']>;
  /** Date that the coupon was applied. */
  start: Scalars['Int'];
  /** The subscription that this coupon is applied to, if it is applied to a particular subscription. */
  subscription?: Maybe<Scalars['String']>;
};

export type V1CustomerSourceInput = {
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type V1CustomerSubscriptionInput = {
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Can be set to `true` if `at_period_end` is not set to `true`. Will generate a final invoice that invoices for any un-invoiced metered usage and new/pending proration invoice items. */
  invoiceNow?: Maybe<Scalars['Boolean']>;
  /** Can be set to `true` if `at_period_end` is not set to `true`. Will generate a proration invoice item that credits remaining unused time until the subscription period end. */
  prorate?: Maybe<Scalars['Boolean']>;
};

export type DeletedTaxId = {
  /** Always true for a deleted object */
  deleted: Deleted;
  /** Unique identifier for the object. */
  id: Scalars['String'];
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object33;
};

export type EphemeralKey = {
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created: Scalars['Int'];
  /** Time at which the key will expire. Measured in seconds since the Unix epoch. */
  expires: Scalars['Int'];
  /** Unique identifier for the object. */
  id: Scalars['String'];
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object36;
  /** The key's secret. You can use this value to make authorized requests to the Stripe API. */
  secret?: Maybe<Scalars['String']>;
};

export enum Object36 {
  EPHEMERAL_KEY = 'ephemeral_key'
}

export type V1EphemeralKeyInput = {
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type DeletedInvoiceitem = {
  /** Always true for a deleted object */
  deleted: Deleted;
  /** Unique identifier for the object. */
  id: Scalars['String'];
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object44;
};

export type DeletedInvoice = {
  /** Always true for a deleted object */
  deleted: Deleted;
  /** Unique identifier for the object. */
  id: Scalars['String'];
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object49;
};

export type DeletedPlan = {
  /** Always true for a deleted object */
  deleted: Deleted;
  /** Unique identifier for the object. */
  id: Scalars['String'];
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object62;
};

export type DeletedProduct = {
  /** Always true for a deleted object */
  deleted: Deleted;
  /** Unique identifier for the object. */
  id: Scalars['String'];
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object63;
};

export type DeletedRadarValueListItem = {
  /** Always true for a deleted object */
  deleted: Deleted;
  /** Unique identifier for the object. */
  id: Scalars['String'];
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object67;
};

export type DeletedRadarValueList = {
  /** Always true for a deleted object */
  deleted: Deleted;
  /** Unique identifier for the object. */
  id: Scalars['String'];
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object68;
};

export type DeletedRecipient = {
  /** Always true for a deleted object */
  deleted: Deleted;
  /** Unique identifier for the object. */
  id: Scalars['String'];
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object69;
};

export type DeletedSku = {
  /** Always true for a deleted object */
  deleted: Deleted;
  /** Unique identifier for the object. */
  id: Scalars['String'];
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object75;
};

export type DeletedSubscriptionItem = {
  /** Always true for a deleted object */
  deleted: Deleted;
  /** Unique identifier for the object. */
  id: Scalars['String'];
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object31;
};

export type V1SubscriptionItems4Input = {
  /** Delete all usage for the given subscription item. Allowed only when the current plan's `usage_type` is `metered`. */
  clearUsage?: Maybe<Scalars['Boolean']>;
  /**
   * Determines how to handle [prorations](https://stripe.com/docs/subscriptions/billing-cycle#prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item's `quantity` changes. Valid values are `create_prorations`, `none`, or `always_invoice`.
   *
   * Passing `create_prorations` will cause proration invoice items to be created when applicable. These proration items will only be invoiced immediately under [certain conditions](https://stripe.com/docs/subscriptions/upgrading-downgrading#immediate-payment). In order to always invoice immediately for prorations, pass `always_invoice`.
   *
   * Prorations can be disabled by passing `none`.
   */
  prorationBehavior?: Maybe<ProrationBehavior5>;
  /** If set, the proration will be calculated as though the subscription was updated at the given time. This can be used to apply the same proration that was previewed with the [upcoming invoice](https://stripe.com/docs/api#retrieve_customer_invoice) endpoint. */
  prorationDate?: Maybe<Scalars['Int']>;
};

export enum ProrationBehavior5 {
  ALWAYS_INVOICE = 'always_invoice',
  CREATE_PRORATIONS = 'create_prorations',
  NONE = 'none'
}

export type V1SubscriptionInput = {
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Will generate a final invoice that invoices for any un-invoiced metered usage and new/pending proration invoice items. */
  invoiceNow?: Maybe<Scalars['Boolean']>;
  /** Will generate a proration invoice item that credits remaining unused time until the subscription period end. */
  prorate?: Maybe<Scalars['Boolean']>;
};

export type DeletedTerminalLocation = {
  /** Always true for a deleted object */
  deleted: Deleted;
  /** Unique identifier for the object. */
  id: Scalars['String'];
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object84;
};

export type DeletedTerminalReader = {
  /** Always true for a deleted object */
  deleted: Deleted;
  /** Unique identifier for the object. */
  id: Scalars['String'];
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object85;
};

export type DeletedWebhookEndpoint = {
  /** Always true for a deleted object */
  deleted: Deleted;
  /** Unique identifier for the object. */
  id: Scalars['String'];
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object90;
};

export type V13dSecureInput = {
  /** Amount of the charge that you will create when authentication completes. */
  amount: Scalars['Int'];
  /** The ID of a card token, or the ID of a card belonging to the given customer. */
  card?: Maybe<Scalars['String']>;
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency: Scalars['String'];
  /** The customer associated with this 3D secure authentication. */
  customer?: Maybe<Scalars['String']>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** The URL that the cardholder's browser will be returned to when authentication completes. */
  returnUrl: Scalars['String'];
};

export type V1Account3Input = {
  /** An [account token](https://stripe.com/docs/api#create_account_token), used to securely provide details to the account. */
  accountToken?: Maybe<Scalars['String']>;
  /** Either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/js), or a dictionary containing a user's bank account details. */
  bankAccount?: Maybe<Scalars['JSON']>;
  /** Business information about the account. */
  businessProfile?: Maybe<BusinessProfileSpecsInput>;
  /** The business type. */
  businessType?: Maybe<BusinessType2>;
  /** Each key of the dictionary represents a capability, and each capability maps to its settings (e.g. whether it has been requested or not). Each capability will be inactive until you have provided its specific requirements and Stripe has verified them. An account may have some of its requested capabilities be active and some be inactive. */
  capabilities?: Maybe<CapabilitiesInput>;
  /** Information about the company or business. This field is available for any `business_type`. */
  company?: Maybe<CompanyInput>;
  /** Three-letter ISO currency code representing the default currency for the account. This must be a currency that [Stripe supports in the account's country](https://stripe.com/docs/payouts). */
  defaultCurrency?: Maybe<Scalars['String']>;
  /** Documents that may be submitted to satisfy various informational requests. */
  documents?: Maybe<DocumentsInput>;
  /** The email address of the account holder. This is only to make the account easier to identify to you. Stripe will never directly email Custom accounts. */
  email?: Maybe<Scalars['String']>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** A card or bank account to attach to the account for receiving [payouts](https://stripe.com/docs/connect/bank-debit-card-payouts) (you won’t be able to use it for top-ups). You can provide either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/stripe-js), or a dictionary, as documented in the `external_account` parameter for [bank account](https://stripe.com/docs/api#account_create_bank_account) creation. <br><br>By default, providing an external account sets it as the new default external account for its currency, and deletes the old default if one exists. To add additional external accounts without replacing the existing default for the currency, use the bank account or card creation API. */
  externalAccount?: Maybe<Scalars['String']>;
  /** Information about the person represented by the account. This field is null unless `business_type` is set to `individual`. */
  individual?: Maybe<IndividualInput>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
  /** Options for customizing how the account functions within Stripe. */
  settings?: Maybe<SettingsSpecsUpdateInput>;
  /** Details on the account's acceptance of the [Stripe Services Agreement](https://stripe.com/docs/connect/updating-accounts#tos-acceptance). */
  tosAcceptance?: Maybe<TosAcceptanceSpecsInput>;
};

/** Business information about the account. */
export type BusinessProfileSpecsInput = {
  mcc?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  productDescription?: Maybe<Scalars['String']>;
  supportAddress?: Maybe<AddressSpecsInput>;
  supportEmail?: Maybe<Scalars['String']>;
  supportPhone?: Maybe<Scalars['String']>;
  supportUrl?: Maybe<Scalars['JSON']>;
  url?: Maybe<Scalars['String']>;
};

export type AddressSpecsInput = {
  city?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  line1?: Maybe<Scalars['String']>;
  line2?: Maybe<Scalars['String']>;
  postalCode?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
};

export enum BusinessType2 {
  COMPANY = 'company',
  GOVERNMENT_ENTITY = 'government_entity',
  INDIVIDUAL = 'individual',
  NON_PROFIT = 'non_profit'
}

/** Each key of the dictionary represents a capability, and each capability maps to its settings (e.g. whether it has been requested or not). Each capability will be inactive until you have provided its specific requirements and Stripe has verified them. An account may have some of its requested capabilities be active and some be inactive. */
export type CapabilitiesInput = {
  acssDebitPayments?: Maybe<CapabilityParamInput>;
  afterpayClearpayPayments?: Maybe<AfterpayClearpayPayments2Input>;
  auBecsDebitPayments?: Maybe<AuBecsDebitPayments2Input>;
  bacsDebitPayments?: Maybe<BacsDebitPayments3Input>;
  bancontactPayments?: Maybe<BancontactPayments2Input>;
  boletoPayments?: Maybe<BoletoPayments2Input>;
  cardIssuing?: Maybe<CardIssuing3Input>;
  cardPayments?: Maybe<CardPayments3Input>;
  cartesBancairesPayments?: Maybe<CartesBancairesPayments2Input>;
  epsPayments?: Maybe<EpsPayments2Input>;
  fpxPayments?: Maybe<FpxPayments2Input>;
  giropayPayments?: Maybe<GiropayPayments2Input>;
  grabpayPayments?: Maybe<GrabpayPayments2Input>;
  idealPayments?: Maybe<IdealPayments2Input>;
  jcbPayments?: Maybe<JcbPayments2Input>;
  legacyPayments?: Maybe<LegacyPayments2Input>;
  oxxoPayments?: Maybe<OxxoPayments2Input>;
  p24Payments?: Maybe<P24Payments2Input>;
  sepaDebitPayments?: Maybe<SepaDebitPayments3Input>;
  sofortPayments?: Maybe<SofortPayments2Input>;
  taxReportingUs1099K?: Maybe<TaxReportingUs1099K2Input>;
  taxReportingUs1099Misc?: Maybe<TaxReportingUs1099Misc2Input>;
  transfers?: Maybe<Transfers2Input>;
};

export type CapabilityParamInput = {
  requested?: Maybe<Scalars['Boolean']>;
};

export type AfterpayClearpayPayments2Input = {
  requested?: Maybe<Scalars['Boolean']>;
};

export type AuBecsDebitPayments2Input = {
  requested?: Maybe<Scalars['Boolean']>;
};

export type BacsDebitPayments3Input = {
  requested?: Maybe<Scalars['Boolean']>;
};

export type BancontactPayments2Input = {
  requested?: Maybe<Scalars['Boolean']>;
};

export type BoletoPayments2Input = {
  requested?: Maybe<Scalars['Boolean']>;
};

export type CardIssuing3Input = {
  requested?: Maybe<Scalars['Boolean']>;
};

export type CardPayments3Input = {
  requested?: Maybe<Scalars['Boolean']>;
};

export type CartesBancairesPayments2Input = {
  requested?: Maybe<Scalars['Boolean']>;
};

export type EpsPayments2Input = {
  requested?: Maybe<Scalars['Boolean']>;
};

export type FpxPayments2Input = {
  requested?: Maybe<Scalars['Boolean']>;
};

export type GiropayPayments2Input = {
  requested?: Maybe<Scalars['Boolean']>;
};

export type GrabpayPayments2Input = {
  requested?: Maybe<Scalars['Boolean']>;
};

export type IdealPayments2Input = {
  requested?: Maybe<Scalars['Boolean']>;
};

export type JcbPayments2Input = {
  requested?: Maybe<Scalars['Boolean']>;
};

export type LegacyPayments2Input = {
  requested?: Maybe<Scalars['Boolean']>;
};

export type OxxoPayments2Input = {
  requested?: Maybe<Scalars['Boolean']>;
};

export type P24Payments2Input = {
  requested?: Maybe<Scalars['Boolean']>;
};

export type SepaDebitPayments3Input = {
  requested?: Maybe<Scalars['Boolean']>;
};

export type SofortPayments2Input = {
  requested?: Maybe<Scalars['Boolean']>;
};

export type TaxReportingUs1099K2Input = {
  requested?: Maybe<Scalars['Boolean']>;
};

export type TaxReportingUs1099Misc2Input = {
  requested?: Maybe<Scalars['Boolean']>;
};

export type Transfers2Input = {
  requested?: Maybe<Scalars['Boolean']>;
};

/** Information about the company or business. This field is available for any `business_type`. */
export type CompanyInput = {
  address?: Maybe<Address2Input>;
  addressKana?: Maybe<JapanAddressKanaSpecsInput>;
  addressKanji?: Maybe<JapanAddressKanjiSpecsInput>;
  directorsProvided?: Maybe<Scalars['Boolean']>;
  executivesProvided?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['String']>;
  nameKana?: Maybe<Scalars['String']>;
  nameKanji?: Maybe<Scalars['String']>;
  ownersProvided?: Maybe<Scalars['Boolean']>;
  phone?: Maybe<Scalars['String']>;
  registrationNumber?: Maybe<Scalars['String']>;
  structure?: Maybe<Structure2>;
  taxId?: Maybe<Scalars['String']>;
  taxIdRegistrar?: Maybe<Scalars['String']>;
  vatId?: Maybe<Scalars['String']>;
  verification?: Maybe<VerificationSpecsInput>;
};

export type Address2Input = {
  city?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  line1?: Maybe<Scalars['String']>;
  line2?: Maybe<Scalars['String']>;
  postalCode?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
};

export type JapanAddressKanaSpecsInput = {
  city?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  line1?: Maybe<Scalars['String']>;
  line2?: Maybe<Scalars['String']>;
  postalCode?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  town?: Maybe<Scalars['String']>;
};

export type JapanAddressKanjiSpecsInput = {
  city?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  line1?: Maybe<Scalars['String']>;
  line2?: Maybe<Scalars['String']>;
  postalCode?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  town?: Maybe<Scalars['String']>;
};

export enum Structure2 {
  _ = '',
  FREE_ZONE_ESTABLISHMENT = 'free_zone_establishment',
  FREE_ZONE_LLC = 'free_zone_llc',
  GOVERNMENT_INSTRUMENTALITY = 'government_instrumentality',
  GOVERNMENTAL_UNIT = 'governmental_unit',
  INCORPORATED_NON_PROFIT = 'incorporated_non_profit',
  LIMITED_LIABILITY_PARTNERSHIP = 'limited_liability_partnership',
  LLC = 'llc',
  MULTI_MEMBER_LLC = 'multi_member_llc',
  PRIVATE_COMPANY = 'private_company',
  PRIVATE_CORPORATION = 'private_corporation',
  PRIVATE_PARTNERSHIP = 'private_partnership',
  PUBLIC_COMPANY = 'public_company',
  PUBLIC_CORPORATION = 'public_corporation',
  PUBLIC_PARTNERSHIP = 'public_partnership',
  SINGLE_MEMBER_LLC = 'single_member_llc',
  SOLE_ESTABLISHMENT = 'sole_establishment',
  SOLE_PROPRIETORSHIP = 'sole_proprietorship',
  TAX_EXEMPT_GOVERNMENT_INSTRUMENTALITY = 'tax_exempt_government_instrumentality',
  UNINCORPORATED_ASSOCIATION = 'unincorporated_association',
  UNINCORPORATED_NON_PROFIT = 'unincorporated_non_profit'
}

export type VerificationSpecsInput = {
  document?: Maybe<VerificationDocumentSpecsInput>;
};

export type VerificationDocumentSpecsInput = {
  back?: Maybe<Scalars['String']>;
  front?: Maybe<Scalars['String']>;
};

/** Documents that may be submitted to satisfy various informational requests. */
export type DocumentsInput = {
  bankAccountOwnershipVerification?: Maybe<BankAccountOwnershipVerificationInput>;
  companyLicense?: Maybe<CompanyLicenseInput>;
  companyMemorandumOfAssociation?: Maybe<CompanyMemorandumOfAssociationInput>;
  companyMinisterialDecree?: Maybe<CompanyMinisterialDecreeInput>;
  companyRegistrationVerification?: Maybe<CompanyRegistrationVerificationInput>;
  companyTaxIdVerification?: Maybe<CompanyTaxIdVerificationInput>;
};

export type BankAccountOwnershipVerificationInput = {
  files?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type CompanyLicenseInput = {
  files?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type CompanyMemorandumOfAssociationInput = {
  files?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type CompanyMinisterialDecreeInput = {
  files?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type CompanyRegistrationVerificationInput = {
  files?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type CompanyTaxIdVerificationInput = {
  files?: Maybe<Array<Maybe<Scalars['String']>>>;
};

/** Information about the person represented by the account. This field is null unless `business_type` is set to `individual`. */
export type IndividualInput = {
  address?: Maybe<Address2Input>;
  addressKana?: Maybe<JapanAddressKanaSpecsInput>;
  addressKanji?: Maybe<JapanAddressKanjiSpecsInput>;
  dob?: Maybe<Scalars['JSON']>;
  email?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  firstNameKana?: Maybe<Scalars['String']>;
  firstNameKanji?: Maybe<Scalars['String']>;
  gender?: Maybe<Scalars['String']>;
  idNumber?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  lastNameKana?: Maybe<Scalars['String']>;
  lastNameKanji?: Maybe<Scalars['String']>;
  maidenName?: Maybe<Scalars['String']>;
  metadata?: Maybe<Scalars['JSON']>;
  phone?: Maybe<Scalars['String']>;
  politicalExposure?: Maybe<PoliticalExposure2>;
  ssnLast4?: Maybe<Scalars['String']>;
  verification?: Maybe<PersonVerificationSpecsInput>;
};

export enum PoliticalExposure2 {
  EXISTING = 'existing',
  NONE = 'none'
}

export type PersonVerificationSpecsInput = {
  additionalDocument?: Maybe<PersonVerificationDocumentSpecsInput>;
  document?: Maybe<Document2Input>;
};

export type PersonVerificationDocumentSpecsInput = {
  back?: Maybe<Scalars['String']>;
  front?: Maybe<Scalars['String']>;
};

export type Document2Input = {
  back?: Maybe<Scalars['String']>;
  front?: Maybe<Scalars['String']>;
};

/** Options for customizing how the account functions within Stripe. */
export type SettingsSpecsUpdateInput = {
  branding?: Maybe<BrandingSettingsSpecsInput>;
  cardIssuing?: Maybe<CardIssuingSettingsSpecsInput>;
  cardPayments?: Maybe<CardPaymentsSettingsSpecsInput>;
  payments?: Maybe<PaymentsSettingsSpecsInput>;
  payouts?: Maybe<PayoutSettingsSpecsInput>;
};

export type BrandingSettingsSpecsInput = {
  icon?: Maybe<Scalars['String']>;
  logo?: Maybe<Scalars['String']>;
  primaryColor?: Maybe<Scalars['String']>;
  secondaryColor?: Maybe<Scalars['String']>;
};

export type CardIssuingSettingsSpecsInput = {
  tosAcceptance?: Maybe<TosAcceptanceInput>;
};

export type TosAcceptanceInput = {
  date?: Maybe<Scalars['Int']>;
  ip?: Maybe<Scalars['String']>;
  userAgent?: Maybe<Scalars['String']>;
};

export type CardPaymentsSettingsSpecsInput = {
  declineOn?: Maybe<DeclineOnInput>;
  statementDescriptorPrefix?: Maybe<Scalars['String']>;
};

export type DeclineOnInput = {
  avsFailure?: Maybe<Scalars['Boolean']>;
  cvcFailure?: Maybe<Scalars['Boolean']>;
};

export type PaymentsSettingsSpecsInput = {
  statementDescriptor?: Maybe<Scalars['String']>;
  statementDescriptorKana?: Maybe<Scalars['String']>;
  statementDescriptorKanji?: Maybe<Scalars['String']>;
};

export type PayoutSettingsSpecsInput = {
  debitNegativeBalances?: Maybe<Scalars['Boolean']>;
  schedule?: Maybe<ScheduleInput>;
  statementDescriptor?: Maybe<Scalars['String']>;
};

export type ScheduleInput = {
  delayDays?: Maybe<Scalars['JSON']>;
  interval?: Maybe<Interval2>;
  monthlyAnchor?: Maybe<Scalars['Int']>;
  weeklyAnchor?: Maybe<WeeklyAnchor2>;
};

export enum Interval2 {
  DAILY = 'daily',
  MANUAL = 'manual',
  MONTHLY = 'monthly',
  WEEKLY = 'weekly'
}

export enum WeeklyAnchor2 {
  FRIDAY = 'friday',
  MONDAY = 'monday',
  SATURDAY = 'saturday',
  SUNDAY = 'sunday',
  THURSDAY = 'thursday',
  TUESDAY = 'tuesday',
  WEDNESDAY = 'wednesday'
}

/** Details on the account's acceptance of the [Stripe Services Agreement](https://stripe.com/docs/connect/updating-accounts#tos-acceptance). */
export type TosAcceptanceSpecsInput = {
  date?: Maybe<Scalars['Int']>;
  ip?: Maybe<Scalars['String']>;
  serviceAgreement?: Maybe<Scalars['String']>;
  userAgent?: Maybe<Scalars['String']>;
};

export type V1AccountBankAccountsInput = {
  /** Either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/js), or a dictionary containing a user's bank account details. */
  bankAccount?: Maybe<Scalars['JSON']>;
  /** When set to true, or if this is the first external account added in this currency, this account becomes the default external account for its currency. */
  defaultForCurrency?: Maybe<Scalars['Boolean']>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Please refer to full [documentation](https://stripe.com/docs/api) instead. */
  externalAccount?: Maybe<Scalars['String']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
};

export type V1AccountBankAccount2Input = {
  /** The name of the person or business that owns the bank account. */
  accountHolderName?: Maybe<Scalars['String']>;
  /** The type of entity that holds the account. This can be either `individual` or `company`. */
  accountHolderType?: Maybe<AccountHolderType3>;
  /** The bank account type. This can only be `checking` or `savings` in most countries. In Japan, this can only be `futsu` or `toza`. */
  accountType?: Maybe<AccountType3>;
  /** City/District/Suburb/Town/Village. */
  addressCity?: Maybe<Scalars['String']>;
  /** Billing address country, if provided when creating card. */
  addressCountry?: Maybe<Scalars['String']>;
  /** Address line 1 (Street address/PO Box/Company name). */
  addressLine1?: Maybe<Scalars['String']>;
  /** Address line 2 (Apartment/Suite/Unit/Building). */
  addressLine2?: Maybe<Scalars['String']>;
  /** State/County/Province/Region. */
  addressState?: Maybe<Scalars['String']>;
  /** ZIP or postal code. */
  addressZip?: Maybe<Scalars['String']>;
  /** When set to true, this becomes the default external account for its currency. */
  defaultForCurrency?: Maybe<Scalars['Boolean']>;
  /** Two digit number representing the card’s expiration month. */
  expMonth?: Maybe<Scalars['String']>;
  /** Four digit number representing the card’s expiration year. */
  expYear?: Maybe<Scalars['String']>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
  /** Cardholder name. */
  name?: Maybe<Scalars['String']>;
};

export enum AccountHolderType3 {
  _ = '',
  COMPANY = 'company',
  INDIVIDUAL = 'individual'
}

export enum AccountType3 {
  CHECKING = 'checking',
  FUTSU = 'futsu',
  SAVINGS = 'savings',
  TOZA = 'toza'
}

export type V1AccountCapability2Input = {
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Passing true requests the capability for the account, if it is not already requested. A requested capability may not immediately become active. Any requirements to activate the capability are returned in the `requirements` arrays. */
  requested?: Maybe<Scalars['Boolean']>;
};

export type V1AccountExternalAccounts2Input = {
  /** Either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/js), or a dictionary containing a user's bank account details. */
  bankAccount?: Maybe<Scalars['JSON']>;
  /** When set to true, or if this is the first external account added in this currency, this account becomes the default external account for its currency. */
  defaultForCurrency?: Maybe<Scalars['Boolean']>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Please refer to full [documentation](https://stripe.com/docs/api) instead. */
  externalAccount?: Maybe<Scalars['String']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
};

export type V1AccountExternalAccount2Input = {
  /** The name of the person or business that owns the bank account. */
  accountHolderName?: Maybe<Scalars['String']>;
  /** The type of entity that holds the account. This can be either `individual` or `company`. */
  accountHolderType?: Maybe<AccountHolderType3>;
  /** The bank account type. This can only be `checking` or `savings` in most countries. In Japan, this can only be `futsu` or `toza`. */
  accountType?: Maybe<AccountType3>;
  /** City/District/Suburb/Town/Village. */
  addressCity?: Maybe<Scalars['String']>;
  /** Billing address country, if provided when creating card. */
  addressCountry?: Maybe<Scalars['String']>;
  /** Address line 1 (Street address/PO Box/Company name). */
  addressLine1?: Maybe<Scalars['String']>;
  /** Address line 2 (Apartment/Suite/Unit/Building). */
  addressLine2?: Maybe<Scalars['String']>;
  /** State/County/Province/Region. */
  addressState?: Maybe<Scalars['String']>;
  /** ZIP or postal code. */
  addressZip?: Maybe<Scalars['String']>;
  /** When set to true, this becomes the default external account for its currency. */
  defaultForCurrency?: Maybe<Scalars['Boolean']>;
  /** Two digit number representing the card’s expiration month. */
  expMonth?: Maybe<Scalars['String']>;
  /** Four digit number representing the card’s expiration year. */
  expYear?: Maybe<Scalars['String']>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
  /** Cardholder name. */
  name?: Maybe<Scalars['String']>;
};

/**
 * Account Links are the means by which a Connect platform grants a connected account permission to access
 * Stripe-hosted applications, such as Connect Onboarding.
 *
 * Related guide: [Connect Onboarding](https://stripe.com/docs/connect/connect-onboarding).
 */
export type AccountLink = {
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created: Scalars['Int'];
  /** The timestamp at which this account link will expire. */
  expiresAt: Scalars['Int'];
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object8;
  /** The URL for the account link. */
  url: Scalars['String'];
};

export enum Object8 {
  ACCOUNT_LINK = 'account_link'
}

export type V1AccountLinksInput = {
  /** The identifier of the account to create an account link for. */
  account: Scalars['String'];
  /** Which information the platform needs to collect from the user. One of `currently_due` or `eventually_due`. Default is `currently_due`. */
  collect?: Maybe<Collect>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** The URL the user will be redirected to if the account link is expired, has been previously-visited, or is otherwise invalid. The URL you specify should attempt to generate a new account link with the same parameters used to create the original account link, then redirect the user to the new account link's URL so they can continue with Connect Onboarding. If a new account link cannot be generated or the redirect fails you should display a useful error to the user. */
  refreshUrl?: Maybe<Scalars['String']>;
  /** The URL that the user will be redirected to upon leaving or completing the linked flow. */
  returnUrl?: Maybe<Scalars['String']>;
  /** The type of account link the user is requesting. Possible values are `account_onboarding` or `account_update`. */
  type: Type3;
};

export enum Collect {
  CURRENTLY_DUE = 'currently_due',
  EVENTUALLY_DUE = 'eventually_due'
}

export enum Type3 {
  ACCOUNT_ONBOARDING = 'account_onboarding',
  ACCOUNT_UPDATE = 'account_update'
}

export type LoginLink = {
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created: Scalars['Int'];
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object7;
  /** The URL for the login link. */
  url: Scalars['String'];
};

export enum Object7 {
  LOGIN_LINK = 'login_link'
}

export type V1AccountLoginLinksInput = {
  account: Scalars['String'];
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Where to redirect the user after they log out of their dashboard. */
  redirectUrl?: Maybe<Scalars['String']>;
};

export type V1AccountPeople3Input = {
  account?: Maybe<Scalars['String']>;
  /** The person's address. */
  address?: Maybe<Address3Input>;
  /** The Kana variation of the person's address (Japan only). */
  addressKana?: Maybe<AddressKana3Input>;
  /** The Kanji variation of the person's address (Japan only). */
  addressKanji?: Maybe<AddressKanji3Input>;
  /** The person's date of birth. */
  dob?: Maybe<Scalars['JSON']>;
  /** Documents that may be submitted to satisfy various informational requests. */
  documents?: Maybe<PersonDocumentsSpecsInput>;
  /** The person's email address. */
  email?: Maybe<Scalars['String']>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** The person's first name. */
  firstName?: Maybe<Scalars['String']>;
  /** The Kana variation of the person's first name (Japan only). */
  firstNameKana?: Maybe<Scalars['String']>;
  /** The Kanji variation of the person's first name (Japan only). */
  firstNameKanji?: Maybe<Scalars['String']>;
  /** The person's gender (International regulations require either "male" or "female"). */
  gender?: Maybe<Scalars['String']>;
  /** The person's ID number, as appropriate for their country. For example, a social security number in the U.S., social insurance number in Canada, etc. Instead of the number itself, you can also provide a [PII token provided by Stripe.js](https://stripe.com/docs/js/tokens_sources/create_token?type=pii). */
  idNumber?: Maybe<Scalars['String']>;
  /** The person's last name. */
  lastName?: Maybe<Scalars['String']>;
  /** The Kana variation of the person's last name (Japan only). */
  lastNameKana?: Maybe<Scalars['String']>;
  /** The Kanji variation of the person's last name (Japan only). */
  lastNameKanji?: Maybe<Scalars['String']>;
  /** The person's maiden name. */
  maidenName?: Maybe<Scalars['String']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
  /** The country where the person is a national. Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)), or "XX" if unavailable. */
  nationality?: Maybe<Scalars['String']>;
  /** A [person token](https://stripe.com/docs/connect/account-tokens), used to securely provide details to the person. */
  personToken?: Maybe<Scalars['String']>;
  /** The person's phone number. */
  phone?: Maybe<Scalars['String']>;
  /** Indicates if the person or any of their representatives, family members, or other closely related persons, declares that they hold or have held an important public job or function, in any jurisdiction. */
  politicalExposure?: Maybe<Scalars['String']>;
  /** The relationship that this person has with the account's legal entity. */
  relationship?: Maybe<RelationshipInput>;
  /** The last four digits of the person's Social Security number (U.S. only). */
  ssnLast4?: Maybe<Scalars['String']>;
  /** The person's verification status. */
  verification?: Maybe<Verification2Input>;
};

/** The person's address. */
export type Address3Input = {
  city?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  line1?: Maybe<Scalars['String']>;
  line2?: Maybe<Scalars['String']>;
  postalCode?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
};

/** The Kana variation of the person's address (Japan only). */
export type AddressKana3Input = {
  city?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  line1?: Maybe<Scalars['String']>;
  line2?: Maybe<Scalars['String']>;
  postalCode?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  town?: Maybe<Scalars['String']>;
};

/** The Kanji variation of the person's address (Japan only). */
export type AddressKanji3Input = {
  city?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  line1?: Maybe<Scalars['String']>;
  line2?: Maybe<Scalars['String']>;
  postalCode?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  town?: Maybe<Scalars['String']>;
};

/** Documents that may be submitted to satisfy various informational requests. */
export type PersonDocumentsSpecsInput = {
  companyAuthorization?: Maybe<CompanyAuthorizationInput>;
  passport?: Maybe<PassportInput>;
  visa?: Maybe<VisaInput>;
};

export type CompanyAuthorizationInput = {
  files?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type PassportInput = {
  files?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type VisaInput = {
  files?: Maybe<Array<Maybe<Scalars['String']>>>;
};

/** The relationship that this person has with the account's legal entity. */
export type RelationshipInput = {
  director?: Maybe<Scalars['Boolean']>;
  executive?: Maybe<Scalars['Boolean']>;
  owner?: Maybe<Scalars['Boolean']>;
  percentOwnership?: Maybe<Scalars['JSON']>;
  representative?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Scalars['String']>;
};

/** The person's verification status. */
export type Verification2Input = {
  additionalDocument?: Maybe<PersonVerificationDocumentSpecsInput>;
  document?: Maybe<Document2Input>;
};

export type V1AccountPerson2Input = {
  account?: Maybe<Scalars['String']>;
  /** The person's address. */
  address?: Maybe<Address3Input>;
  /** The Kana variation of the person's address (Japan only). */
  addressKana?: Maybe<AddressKana3Input>;
  /** The Kanji variation of the person's address (Japan only). */
  addressKanji?: Maybe<AddressKanji3Input>;
  /** The person's date of birth. */
  dob?: Maybe<Scalars['JSON']>;
  /** Documents that may be submitted to satisfy various informational requests. */
  documents?: Maybe<PersonDocumentsSpecsInput>;
  /** The person's email address. */
  email?: Maybe<Scalars['String']>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** The person's first name. */
  firstName?: Maybe<Scalars['String']>;
  /** The Kana variation of the person's first name (Japan only). */
  firstNameKana?: Maybe<Scalars['String']>;
  /** The Kanji variation of the person's first name (Japan only). */
  firstNameKanji?: Maybe<Scalars['String']>;
  /** The person's gender (International regulations require either "male" or "female"). */
  gender?: Maybe<Scalars['String']>;
  /** The person's ID number, as appropriate for their country. For example, a social security number in the U.S., social insurance number in Canada, etc. Instead of the number itself, you can also provide a [PII token provided by Stripe.js](https://stripe.com/docs/js/tokens_sources/create_token?type=pii). */
  idNumber?: Maybe<Scalars['String']>;
  /** The person's last name. */
  lastName?: Maybe<Scalars['String']>;
  /** The Kana variation of the person's last name (Japan only). */
  lastNameKana?: Maybe<Scalars['String']>;
  /** The Kanji variation of the person's last name (Japan only). */
  lastNameKanji?: Maybe<Scalars['String']>;
  /** The person's maiden name. */
  maidenName?: Maybe<Scalars['String']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
  /** The country where the person is a national. Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)), or "XX" if unavailable. */
  nationality?: Maybe<Scalars['String']>;
  /** A [person token](https://stripe.com/docs/connect/account-tokens), used to securely provide details to the person. */
  personToken?: Maybe<Scalars['String']>;
  /** The person's phone number. */
  phone?: Maybe<Scalars['String']>;
  /** Indicates if the person or any of their representatives, family members, or other closely related persons, declares that they hold or have held an important public job or function, in any jurisdiction. */
  politicalExposure?: Maybe<Scalars['String']>;
  /** The relationship that this person has with the account's legal entity. */
  relationship?: Maybe<RelationshipInput>;
  /** The last four digits of the person's Social Security number (U.S. only). */
  ssnLast4?: Maybe<Scalars['String']>;
  /** The person's verification status. */
  verification?: Maybe<Verification2Input>;
};

export type V1AccountPersons3Input = {
  account?: Maybe<Scalars['String']>;
  /** The person's address. */
  address?: Maybe<Address3Input>;
  /** The Kana variation of the person's address (Japan only). */
  addressKana?: Maybe<AddressKana3Input>;
  /** The Kanji variation of the person's address (Japan only). */
  addressKanji?: Maybe<AddressKanji3Input>;
  /** The person's date of birth. */
  dob?: Maybe<Scalars['JSON']>;
  /** Documents that may be submitted to satisfy various informational requests. */
  documents?: Maybe<PersonDocumentsSpecsInput>;
  /** The person's email address. */
  email?: Maybe<Scalars['String']>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** The person's first name. */
  firstName?: Maybe<Scalars['String']>;
  /** The Kana variation of the person's first name (Japan only). */
  firstNameKana?: Maybe<Scalars['String']>;
  /** The Kanji variation of the person's first name (Japan only). */
  firstNameKanji?: Maybe<Scalars['String']>;
  /** The person's gender (International regulations require either "male" or "female"). */
  gender?: Maybe<Scalars['String']>;
  /** The person's ID number, as appropriate for their country. For example, a social security number in the U.S., social insurance number in Canada, etc. Instead of the number itself, you can also provide a [PII token provided by Stripe.js](https://stripe.com/docs/js/tokens_sources/create_token?type=pii). */
  idNumber?: Maybe<Scalars['String']>;
  /** The person's last name. */
  lastName?: Maybe<Scalars['String']>;
  /** The Kana variation of the person's last name (Japan only). */
  lastNameKana?: Maybe<Scalars['String']>;
  /** The Kanji variation of the person's last name (Japan only). */
  lastNameKanji?: Maybe<Scalars['String']>;
  /** The person's maiden name. */
  maidenName?: Maybe<Scalars['String']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
  /** The country where the person is a national. Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)), or "XX" if unavailable. */
  nationality?: Maybe<Scalars['String']>;
  /** A [person token](https://stripe.com/docs/connect/account-tokens), used to securely provide details to the person. */
  personToken?: Maybe<Scalars['String']>;
  /** The person's phone number. */
  phone?: Maybe<Scalars['String']>;
  /** Indicates if the person or any of their representatives, family members, or other closely related persons, declares that they hold or have held an important public job or function, in any jurisdiction. */
  politicalExposure?: Maybe<Scalars['String']>;
  /** The relationship that this person has with the account's legal entity. */
  relationship?: Maybe<RelationshipInput>;
  /** The last four digits of the person's Social Security number (U.S. only). */
  ssnLast4?: Maybe<Scalars['String']>;
  /** The person's verification status. */
  verification?: Maybe<Verification2Input>;
};

export type V1Accounts3Input = {
  /** An [account token](https://stripe.com/docs/api#create_account_token), used to securely provide details to the account. */
  accountToken?: Maybe<Scalars['String']>;
  /** Either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/js), or a dictionary containing a user's bank account details. */
  bankAccount?: Maybe<Scalars['JSON']>;
  /** Business information about the account. */
  businessProfile?: Maybe<BusinessProfileSpecsInput>;
  /** The business type. */
  businessType?: Maybe<BusinessType2>;
  /** Each key of the dictionary represents a capability, and each capability maps to its settings (e.g. whether it has been requested or not). Each capability will be inactive until you have provided its specific requirements and Stripe has verified them. An account may have some of its requested capabilities be active and some be inactive. */
  capabilities?: Maybe<CapabilitiesInput>;
  /** Information about the company or business. This field is available for any `business_type`. */
  company?: Maybe<CompanyInput>;
  /** The country in which the account holder resides, or in which the business is legally established. This should be an ISO 3166-1 alpha-2 country code. For example, if you are in the United States and the business for which you're creating an account is legally represented in Canada, you would use `CA` as the country for the account being created. */
  country?: Maybe<Scalars['String']>;
  /** Three-letter ISO currency code representing the default currency for the account. This must be a currency that [Stripe supports in the account's country](https://stripe.com/docs/payouts). */
  defaultCurrency?: Maybe<Scalars['String']>;
  /** Documents that may be submitted to satisfy various informational requests. */
  documents?: Maybe<DocumentsInput>;
  /** The email address of the account holder. This is only to make the account easier to identify to you. Stripe will never directly email Custom accounts. */
  email?: Maybe<Scalars['String']>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** A card or bank account to attach to the account for receiving [payouts](https://stripe.com/docs/connect/bank-debit-card-payouts) (you won’t be able to use it for top-ups). You can provide either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/stripe-js), or a dictionary, as documented in the `external_account` parameter for [bank account](https://stripe.com/docs/api#account_create_bank_account) creation. <br><br>By default, providing an external account sets it as the new default external account for its currency, and deletes the old default if one exists. To add additional external accounts without replacing the existing default for the currency, use the bank account or card creation API. */
  externalAccount?: Maybe<Scalars['String']>;
  /** Information about the person represented by the account. This field is null unless `business_type` is set to `individual`. */
  individual?: Maybe<IndividualInput>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
  /** Options for customizing how the account functions within Stripe. */
  settings?: Maybe<SettingsSpecsInput>;
  /** Details on the account's acceptance of the [Stripe Services Agreement](https://stripe.com/docs/connect/updating-accounts#tos-acceptance). */
  tosAcceptance?: Maybe<TosAcceptanceSpecsInput>;
  /** The type of Stripe account to create. May be one of `custom`, `express` or `standard`. */
  type?: Maybe<Type4>;
};

/** Options for customizing how the account functions within Stripe. */
export type SettingsSpecsInput = {
  branding?: Maybe<BrandingSettingsSpecsInput>;
  cardIssuing?: Maybe<CardIssuingSettingsSpecsInput>;
  cardPayments?: Maybe<CardPaymentsSettingsSpecsInput>;
  payments?: Maybe<PaymentsSettingsSpecsInput>;
  payouts?: Maybe<PayoutSettingsSpecsInput>;
};

export enum Type4 {
  CUSTOM = 'custom',
  EXPRESS = 'express',
  STANDARD = 'standard'
}

export type V1AccountLoginLinks2Input = {
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Where to redirect the user after they log out of their dashboard. */
  redirectUrl?: Maybe<Scalars['String']>;
};

export type V1AccountPeople4Input = {
  /** The person's address. */
  address?: Maybe<Address3Input>;
  /** The Kana variation of the person's address (Japan only). */
  addressKana?: Maybe<AddressKana3Input>;
  /** The Kanji variation of the person's address (Japan only). */
  addressKanji?: Maybe<AddressKanji3Input>;
  /** The person's date of birth. */
  dob?: Maybe<Scalars['JSON']>;
  /** Documents that may be submitted to satisfy various informational requests. */
  documents?: Maybe<PersonDocumentsSpecsInput>;
  /** The person's email address. */
  email?: Maybe<Scalars['String']>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** The person's first name. */
  firstName?: Maybe<Scalars['String']>;
  /** The Kana variation of the person's first name (Japan only). */
  firstNameKana?: Maybe<Scalars['String']>;
  /** The Kanji variation of the person's first name (Japan only). */
  firstNameKanji?: Maybe<Scalars['String']>;
  /** The person's gender (International regulations require either "male" or "female"). */
  gender?: Maybe<Scalars['String']>;
  /** The person's ID number, as appropriate for their country. For example, a social security number in the U.S., social insurance number in Canada, etc. Instead of the number itself, you can also provide a [PII token provided by Stripe.js](https://stripe.com/docs/js/tokens_sources/create_token?type=pii). */
  idNumber?: Maybe<Scalars['String']>;
  /** The person's last name. */
  lastName?: Maybe<Scalars['String']>;
  /** The Kana variation of the person's last name (Japan only). */
  lastNameKana?: Maybe<Scalars['String']>;
  /** The Kanji variation of the person's last name (Japan only). */
  lastNameKanji?: Maybe<Scalars['String']>;
  /** The person's maiden name. */
  maidenName?: Maybe<Scalars['String']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
  /** The country where the person is a national. Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)), or "XX" if unavailable. */
  nationality?: Maybe<Scalars['String']>;
  /** A [person token](https://stripe.com/docs/connect/account-tokens), used to securely provide details to the person. */
  personToken?: Maybe<Scalars['String']>;
  /** The person's phone number. */
  phone?: Maybe<Scalars['String']>;
  /** Indicates if the person or any of their representatives, family members, or other closely related persons, declares that they hold or have held an important public job or function, in any jurisdiction. */
  politicalExposure?: Maybe<Scalars['String']>;
  /** The relationship that this person has with the account's legal entity. */
  relationship?: Maybe<RelationshipInput>;
  /** The last four digits of the person's Social Security number (U.S. only). */
  ssnLast4?: Maybe<Scalars['String']>;
  /** The person's verification status. */
  verification?: Maybe<Verification2Input>;
};

export type V1AccountPerson3Input = {
  /** The person's address. */
  address?: Maybe<Address3Input>;
  /** The Kana variation of the person's address (Japan only). */
  addressKana?: Maybe<AddressKana3Input>;
  /** The Kanji variation of the person's address (Japan only). */
  addressKanji?: Maybe<AddressKanji3Input>;
  /** The person's date of birth. */
  dob?: Maybe<Scalars['JSON']>;
  /** Documents that may be submitted to satisfy various informational requests. */
  documents?: Maybe<PersonDocumentsSpecsInput>;
  /** The person's email address. */
  email?: Maybe<Scalars['String']>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** The person's first name. */
  firstName?: Maybe<Scalars['String']>;
  /** The Kana variation of the person's first name (Japan only). */
  firstNameKana?: Maybe<Scalars['String']>;
  /** The Kanji variation of the person's first name (Japan only). */
  firstNameKanji?: Maybe<Scalars['String']>;
  /** The person's gender (International regulations require either "male" or "female"). */
  gender?: Maybe<Scalars['String']>;
  /** The person's ID number, as appropriate for their country. For example, a social security number in the U.S., social insurance number in Canada, etc. Instead of the number itself, you can also provide a [PII token provided by Stripe.js](https://stripe.com/docs/js/tokens_sources/create_token?type=pii). */
  idNumber?: Maybe<Scalars['String']>;
  /** The person's last name. */
  lastName?: Maybe<Scalars['String']>;
  /** The Kana variation of the person's last name (Japan only). */
  lastNameKana?: Maybe<Scalars['String']>;
  /** The Kanji variation of the person's last name (Japan only). */
  lastNameKanji?: Maybe<Scalars['String']>;
  /** The person's maiden name. */
  maidenName?: Maybe<Scalars['String']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
  /** The country where the person is a national. Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)), or "XX" if unavailable. */
  nationality?: Maybe<Scalars['String']>;
  /** A [person token](https://stripe.com/docs/connect/account-tokens), used to securely provide details to the person. */
  personToken?: Maybe<Scalars['String']>;
  /** The person's phone number. */
  phone?: Maybe<Scalars['String']>;
  /** Indicates if the person or any of their representatives, family members, or other closely related persons, declares that they hold or have held an important public job or function, in any jurisdiction. */
  politicalExposure?: Maybe<Scalars['String']>;
  /** The relationship that this person has with the account's legal entity. */
  relationship?: Maybe<RelationshipInput>;
  /** The last four digits of the person's Social Security number (U.S. only). */
  ssnLast4?: Maybe<Scalars['String']>;
  /** The person's verification status. */
  verification?: Maybe<Verification2Input>;
};

export type V1AccountPersons4Input = {
  /** The person's address. */
  address?: Maybe<Address3Input>;
  /** The Kana variation of the person's address (Japan only). */
  addressKana?: Maybe<AddressKana3Input>;
  /** The Kanji variation of the person's address (Japan only). */
  addressKanji?: Maybe<AddressKanji3Input>;
  /** The person's date of birth. */
  dob?: Maybe<Scalars['JSON']>;
  /** Documents that may be submitted to satisfy various informational requests. */
  documents?: Maybe<PersonDocumentsSpecsInput>;
  /** The person's email address. */
  email?: Maybe<Scalars['String']>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** The person's first name. */
  firstName?: Maybe<Scalars['String']>;
  /** The Kana variation of the person's first name (Japan only). */
  firstNameKana?: Maybe<Scalars['String']>;
  /** The Kanji variation of the person's first name (Japan only). */
  firstNameKanji?: Maybe<Scalars['String']>;
  /** The person's gender (International regulations require either "male" or "female"). */
  gender?: Maybe<Scalars['String']>;
  /** The person's ID number, as appropriate for their country. For example, a social security number in the U.S., social insurance number in Canada, etc. Instead of the number itself, you can also provide a [PII token provided by Stripe.js](https://stripe.com/docs/js/tokens_sources/create_token?type=pii). */
  idNumber?: Maybe<Scalars['String']>;
  /** The person's last name. */
  lastName?: Maybe<Scalars['String']>;
  /** The Kana variation of the person's last name (Japan only). */
  lastNameKana?: Maybe<Scalars['String']>;
  /** The Kanji variation of the person's last name (Japan only). */
  lastNameKanji?: Maybe<Scalars['String']>;
  /** The person's maiden name. */
  maidenName?: Maybe<Scalars['String']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
  /** The country where the person is a national. Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)), or "XX" if unavailable. */
  nationality?: Maybe<Scalars['String']>;
  /** A [person token](https://stripe.com/docs/connect/account-tokens), used to securely provide details to the person. */
  personToken?: Maybe<Scalars['String']>;
  /** The person's phone number. */
  phone?: Maybe<Scalars['String']>;
  /** Indicates if the person or any of their representatives, family members, or other closely related persons, declares that they hold or have held an important public job or function, in any jurisdiction. */
  politicalExposure?: Maybe<Scalars['String']>;
  /** The relationship that this person has with the account's legal entity. */
  relationship?: Maybe<RelationshipInput>;
  /** The last four digits of the person's Social Security number (U.S. only). */
  ssnLast4?: Maybe<Scalars['String']>;
  /** The person's verification status. */
  verification?: Maybe<Verification2Input>;
};

export type V1AccountRejectInput = {
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** The reason for rejecting the account. Can be `fraud`, `terms_of_service`, or `other`. */
  reason: Scalars['String'];
};

export type V1ApplePayDomains2Input = {
  domainName: Scalars['String'];
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type V1ApplicationFeesRefund2Input = {
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
};

export type V1ApplicationFeeRefundInput = {
  amount?: Maybe<Scalars['Int']>;
  directive?: Maybe<Scalars['String']>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type V1ApplicationFeeRefunds2Input = {
  /** A positive integer, in _%s_, representing how much of this fee to refund. Can refund only up to the remaining unrefunded amount of the fee. */
  amount?: Maybe<Scalars['Int']>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
};

export type V1BillingPortalConfigurations3Input = {
  /** The business information shown to customers in the portal. */
  businessProfile: BusinessProfileCreateParamInput;
  /** The default URL to redirect customers to when they click on the portal's link to return to your website. This can be [overriden](https://stripe.com/docs/api/customer_portal/sessions/create#create_portal_session-return_url) when creating the session. */
  defaultReturnUrl?: Maybe<Scalars['JSON']>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Information about the features available in the portal. */
  features: FeaturesInput;
};

/** The business information shown to customers in the portal. */
export type BusinessProfileCreateParamInput = {
  headline?: Maybe<Scalars['String']>;
  privacyPolicyUrl: Scalars['String'];
  termsOfServiceUrl: Scalars['String'];
};

/** Information about the features available in the portal. */
export type FeaturesInput = {
  customerUpdate?: Maybe<CustomerUpdateInput>;
  invoiceHistory?: Maybe<InvoiceHistoryInput>;
  paymentMethodUpdate?: Maybe<PaymentMethodUpdateInput>;
  subscriptionCancel?: Maybe<SubscriptionCancelInput>;
  subscriptionPause?: Maybe<SubscriptionPauseInput>;
  subscriptionUpdate?: Maybe<SubscriptionUpdateInput>;
};

export type CustomerUpdateInput = {
  allowedUpdates: Scalars['JSON'];
  enabled: Scalars['Boolean'];
};

export type InvoiceHistoryInput = {
  enabled: Scalars['Boolean'];
};

export type PaymentMethodUpdateInput = {
  enabled: Scalars['Boolean'];
};

export type SubscriptionCancelInput = {
  enabled: Scalars['Boolean'];
  mode?: Maybe<Mode2>;
  prorationBehavior?: Maybe<ProrationBehavior3>;
};

export enum Mode2 {
  AT_PERIOD_END = 'at_period_end',
  IMMEDIATELY = 'immediately'
}

export enum ProrationBehavior3 {
  ALWAYS_INVOICE = 'always_invoice',
  CREATE_PRORATIONS = 'create_prorations',
  NONE = 'none'
}

export type SubscriptionPauseInput = {
  enabled?: Maybe<Scalars['Boolean']>;
};

export type SubscriptionUpdateInput = {
  defaultAllowedUpdates: Scalars['JSON'];
  enabled: Scalars['Boolean'];
  products: Scalars['JSON'];
  prorationBehavior?: Maybe<ProrationBehavior3>;
};

export type V1BillingPortalConfiguration2Input = {
  /** Whether the configuration is active and can be used to create portal sessions. */
  active?: Maybe<Scalars['Boolean']>;
  /** The business information shown to customers in the portal. */
  businessProfile?: Maybe<BusinessProfileUpdateParamInput>;
  /** The default URL to redirect customers to when they click on the portal's link to return to your website. This can be [overriden](https://stripe.com/docs/api/customer_portal/sessions/create#create_portal_session-return_url) when creating the session. */
  defaultReturnUrl?: Maybe<Scalars['JSON']>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Information about the features available in the portal. */
  features?: Maybe<FeaturesUpdatingParamInput>;
};

/** The business information shown to customers in the portal. */
export type BusinessProfileUpdateParamInput = {
  headline?: Maybe<Scalars['String']>;
  privacyPolicyUrl?: Maybe<Scalars['String']>;
  termsOfServiceUrl?: Maybe<Scalars['String']>;
};

/** Information about the features available in the portal. */
export type FeaturesUpdatingParamInput = {
  customerUpdate?: Maybe<CustomerUpdateUpdatingParamInput>;
  invoiceHistory?: Maybe<InvoiceHistoryInput>;
  paymentMethodUpdate?: Maybe<PaymentMethodUpdateInput>;
  subscriptionCancel?: Maybe<SubscriptionCancelUpdatingParamInput>;
  subscriptionPause?: Maybe<SubscriptionPauseInput>;
  subscriptionUpdate?: Maybe<SubscriptionUpdateUpdatingParamInput>;
};

export type CustomerUpdateUpdatingParamInput = {
  allowedUpdates?: Maybe<Scalars['JSON']>;
  enabled?: Maybe<Scalars['Boolean']>;
};

export type SubscriptionCancelUpdatingParamInput = {
  enabled?: Maybe<Scalars['Boolean']>;
  mode?: Maybe<Mode2>;
  prorationBehavior?: Maybe<ProrationBehavior3>;
};

export type SubscriptionUpdateUpdatingParamInput = {
  defaultAllowedUpdates?: Maybe<Scalars['JSON']>;
  enabled?: Maybe<Scalars['Boolean']>;
  products?: Maybe<Scalars['JSON']>;
  prorationBehavior?: Maybe<ProrationBehavior3>;
};

/**
 * The Billing customer portal is a Stripe-hosted UI for subscription and
 * billing management.
 *
 * A portal configuration describes the functionality and features that you
 * want to provide to your customers through the portal.
 *
 * A portal session describes the instantiation of the customer portal for
 * a particular customer. By visiting the session's URL, the customer
 * can manage their subscriptions and billing details. For security reasons,
 * sessions are short-lived and will expire if the customer does not visit the URL.
 * Create sessions on-demand when customers intend to manage their subscriptions
 * and billing details.
 *
 * Learn more in the [product overview](https://stripe.com/docs/billing/subscriptions/customer-portal)
 * and [integration guide](https://stripe.com/docs/billing/subscriptions/integrating-customer-portal).
 */
export type BillingPortalSession = {
  /** The configuration used by this session, describing the features available. */
  configuration: Scalars['JSON'];
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created: Scalars['Int'];
  /** The ID of the customer for this session. */
  customer: Scalars['String'];
  /** Unique identifier for the object. */
  id: Scalars['String'];
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object15;
  /** The account for which the session was created on behalf of. When specified, only subscriptions and invoices with this `on_behalf_of` account appear in the portal. For more information, see the [docs](https://stripe.com/docs/connect/charges-transfers#on-behalf-of). Use the [Accounts API](https://stripe.com/docs/api/accounts/object#account_object-settings-branding) to modify the `on_behalf_of` account's branding settings, which the portal displays. */
  onBehalfOf?: Maybe<Scalars['String']>;
  /** The URL to redirect customers to when they click on the portal's link to return to your website. */
  returnUrl: Scalars['String'];
  /** The short-lived URL of the session that gives customers access to the customer portal. */
  url: Scalars['String'];
};

export enum Object15 {
  BILLING_PORTAL_SESSION = 'billing_portal.session'
}

export type V1BillingPortalSessionsInput = {
  /** The ID of an existing [configuration](https://stripe.com/docs/api/customer_portal/configuration) to use for this session, describing its functionality and features. If not specified, the session uses the default configuration. */
  configuration?: Maybe<Scalars['String']>;
  /** The ID of an existing customer. */
  customer: Scalars['String'];
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** The `on_behalf_of` account to use for this session. When specified, only subscriptions and invoices with this `on_behalf_of` account appear in the portal. For more information, see the [docs](https://stripe.com/docs/connect/charges-transfers#on-behalf-of). Use the [Accounts API](https://stripe.com/docs/api/accounts/object#account_object-settings-branding) to modify the `on_behalf_of` account's branding settings, which the portal displays. */
  onBehalfOf?: Maybe<Scalars['String']>;
  /** The default URL to redirect customers to when they click on the portal's link to return to your website. */
  returnUrl?: Maybe<Scalars['String']>;
};

export type V1Charges3Input = {
  /** Amount intended to be collected by this payment. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99). */
  amount?: Maybe<Scalars['Int']>;
  applicationFee?: Maybe<Scalars['Int']>;
  /** A fee in %s that will be applied to the charge and transferred to the application owner's Stripe account. The request must be made with an OAuth key or the `Stripe-Account` header in order to take an application fee. For more information, see the application fees [documentation](https://stripe.com/docs/connect/direct-charges#collecting-fees). */
  applicationFeeAmount?: Maybe<Scalars['Int']>;
  /** Whether to immediately capture the charge. Defaults to `true`. When `false`, the charge issues an authorization (or pre-authorization), and will need to be [captured](https://stripe.com/docs/api#capture_charge) later. Uncaptured charges expire in _seven days_. For more information, see the [authorizing charges and settling later](https://stripe.com/docs/charges/placing-a-hold) documentation. */
  capture?: Maybe<Scalars['Boolean']>;
  /** A token, like the ones returned by [Stripe.js](https://stripe.com/docs/js). */
  card?: Maybe<Scalars['JSON']>;
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency?: Maybe<Scalars['String']>;
  /** The ID of an existing customer that will be charged in this request. */
  customer?: Maybe<Scalars['String']>;
  /** An arbitrary string which you can attach to a `Charge` object. It is displayed when in the web interface alongside the charge. Note that if you use Stripe to send automatic email receipts to your customers, your receipt emails will include the `description` of the charge(s) that they are describing. */
  description?: Maybe<Scalars['String']>;
  destination?: Maybe<Scalars['JSON']>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
  /** The Stripe account ID for which these funds are intended. Automatically set if you use the `destination` parameter. For details, see [Creating Separate Charges and Transfers](https://stripe.com/docs/connect/charges-transfers#on-behalf-of). */
  onBehalfOf?: Maybe<Scalars['String']>;
  /** The email address to which this charge's [receipt](https://stripe.com/docs/dashboard/receipts) will be sent. The receipt will not be sent until the charge is paid, and no receipts will be sent for test mode charges. If this charge is for a [Customer](https://stripe.com/docs/api/customers/object), the email address specified here will override the customer's email address. If `receipt_email` is specified for a charge in live mode, a receipt will be sent regardless of your [email settings](https://dashboard.stripe.com/account/emails). */
  receiptEmail?: Maybe<Scalars['String']>;
  /** Shipping information for the charge. Helps prevent fraud on charges for physical goods. */
  shipping?: Maybe<OptionalFieldsShippingInput>;
  /** A payment source to be charged. This can be the ID of a [card](https://stripe.com/docs/api#cards) (i.e., credit or debit card), a [bank account](https://stripe.com/docs/api#bank_accounts), a [source](https://stripe.com/docs/api#sources), a [token](https://stripe.com/docs/api#tokens), or a [connected account](https://stripe.com/docs/connect/account-debits#charging-a-connected-account). For certain sources---namely, [cards](https://stripe.com/docs/api#cards), [bank accounts](https://stripe.com/docs/api#bank_accounts), and attached [sources](https://stripe.com/docs/api#sources)---you must also pass the ID of the associated customer. */
  source?: Maybe<Scalars['String']>;
  /** For card charges, use `statement_descriptor_suffix` instead. Otherwise, you can use this value as the complete description of a charge on your customers’ statements. Must contain at least one letter, maximum 22 characters. */
  statementDescriptor?: Maybe<Scalars['String']>;
  /** Provides information about the charge that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor. */
  statementDescriptorSuffix?: Maybe<Scalars['String']>;
  /** An optional dictionary including the account to automatically transfer to as part of a destination charge. [See the Connect documentation](https://stripe.com/docs/connect/destination-charges) for details. */
  transferData?: Maybe<TransferDataSpecsInput>;
  /** A string that identifies this transaction as part of a group. For details, see [Grouping transactions](https://stripe.com/docs/connect/charges-transfers#transfer-options). */
  transferGroup?: Maybe<Scalars['String']>;
};

/** Shipping information for the charge. Helps prevent fraud on charges for physical goods. */
export type OptionalFieldsShippingInput = {
  address: OptionalFieldsAddressInput;
  carrier?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  phone?: Maybe<Scalars['String']>;
  trackingNumber?: Maybe<Scalars['String']>;
};

export type OptionalFieldsAddressInput = {
  city?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  line1?: Maybe<Scalars['String']>;
  line2?: Maybe<Scalars['String']>;
  postalCode?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
};

/** An optional dictionary including the account to automatically transfer to as part of a destination charge. [See the Connect documentation](https://stripe.com/docs/connect/destination-charges) for details. */
export type TransferDataSpecsInput = {
  amount?: Maybe<Scalars['Int']>;
  destination: Scalars['String'];
};

export type V1Charge2Input = {
  /** The ID of an existing customer that will be associated with this request. This field may only be updated if there is no existing associated customer with this charge. */
  customer?: Maybe<Scalars['String']>;
  /** An arbitrary string which you can attach to a charge object. It is displayed when in the web interface alongside the charge. Note that if you use Stripe to send automatic email receipts to your customers, your receipt emails will include the `description` of the charge(s) that they are describing. */
  description?: Maybe<Scalars['String']>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** A set of key-value pairs you can attach to a charge giving information about its riskiness. If you believe a charge is fraudulent, include a `user_report` key with a value of `fraudulent`. If you believe a charge is safe, include a `user_report` key with a value of `safe`. Stripe will use the information you send to improve our fraud detection algorithms. */
  fraudDetails?: Maybe<FraudDetails2Input>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
  /** This is the email address that the receipt for this charge will be sent to. If this field is updated, then a new email receipt will be sent to the updated address. */
  receiptEmail?: Maybe<Scalars['String']>;
  /** Shipping information for the charge. Helps prevent fraud on charges for physical goods. */
  shipping?: Maybe<OptionalFieldsShippingInput>;
  /** A string that identifies this transaction as part of a group. `transfer_group` may only be provided if it has not been set. See the [Connect documentation](https://stripe.com/docs/connect/charges-transfers#transfer-options) for details. */
  transferGroup?: Maybe<Scalars['String']>;
};

/** A set of key-value pairs you can attach to a charge giving information about its riskiness. If you believe a charge is fraudulent, include a `user_report` key with a value of `fraudulent`. If you believe a charge is safe, include a `user_report` key with a value of `safe`. Stripe will use the information you send to improve our fraud detection algorithms. */
export type FraudDetails2Input = {
  userReport: UserReport2;
};

export enum UserReport2 {
  _ = '',
  FRAUDULENT = 'fraudulent',
  SAFE = 'safe'
}

export type V1ChargeCaptureInput = {
  /** The amount to capture, which must be less than or equal to the original amount. Any additional amount will be automatically refunded. */
  amount?: Maybe<Scalars['Int']>;
  /** An application fee to add on to this charge. */
  applicationFee?: Maybe<Scalars['Int']>;
  /** An application fee amount to add on to this charge, which must be less than or equal to the original amount. */
  applicationFeeAmount?: Maybe<Scalars['Int']>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** The email address to send this charge's receipt to. This will override the previously-specified email address for this charge, if one was set. Receipts will not be sent in test mode. */
  receiptEmail?: Maybe<Scalars['String']>;
  /** For card charges, use `statement_descriptor_suffix` instead. Otherwise, you can use this value as the complete description of a charge on your customers’ statements. Must contain at least one letter, maximum 22 characters. */
  statementDescriptor?: Maybe<Scalars['String']>;
  /** Provides information about the charge that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor. */
  statementDescriptorSuffix?: Maybe<Scalars['String']>;
  /** An optional dictionary including the account to automatically transfer to as part of a destination charge. [See the Connect documentation](https://stripe.com/docs/connect/destination-charges) for details. */
  transferData?: Maybe<TransferData2Input>;
  /** A string that identifies this transaction as part of a group. `transfer_group` may only be provided if it has not been set. See the [Connect documentation](https://stripe.com/docs/connect/charges-transfers#transfer-options) for details. */
  transferGroup?: Maybe<Scalars['String']>;
};

/** An optional dictionary including the account to automatically transfer to as part of a destination charge. [See the Connect documentation](https://stripe.com/docs/connect/destination-charges) for details. */
export type TransferData2Input = {
  amount?: Maybe<Scalars['Int']>;
};

export type V1ChargeDispute2Input = {
  /** Evidence to upload, to respond to a dispute. Updating any field in the hash will submit all fields in the hash for review. The combined character count of all fields is limited to 150,000. */
  evidence?: Maybe<EvidenceInput>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
  /** Whether to immediately submit evidence to the bank. If `false`, evidence is staged on the dispute. Staged evidence is visible in the API and Dashboard, and can be submitted to the bank by making another request with this attribute set to `true` (the default). */
  submit?: Maybe<Scalars['Boolean']>;
};

/** Evidence to upload, to respond to a dispute. Updating any field in the hash will submit all fields in the hash for review. The combined character count of all fields is limited to 150,000. */
export type EvidenceInput = {
  accessActivityLog?: Maybe<Scalars['String']>;
  billingAddress?: Maybe<Scalars['String']>;
  cancellationPolicy?: Maybe<Scalars['String']>;
  cancellationPolicyDisclosure?: Maybe<Scalars['String']>;
  cancellationRebuttal?: Maybe<Scalars['String']>;
  customerCommunication?: Maybe<Scalars['String']>;
  customerEmailAddress?: Maybe<Scalars['String']>;
  customerName?: Maybe<Scalars['String']>;
  customerPurchaseIp?: Maybe<Scalars['String']>;
  customerSignature?: Maybe<Scalars['String']>;
  duplicateChargeDocumentation?: Maybe<Scalars['String']>;
  duplicateChargeExplanation?: Maybe<Scalars['String']>;
  duplicateChargeId?: Maybe<Scalars['String']>;
  productDescription?: Maybe<Scalars['String']>;
  receipt?: Maybe<Scalars['String']>;
  refundPolicy?: Maybe<Scalars['String']>;
  refundPolicyDisclosure?: Maybe<Scalars['String']>;
  refundRefusalExplanation?: Maybe<Scalars['String']>;
  serviceDate?: Maybe<Scalars['String']>;
  serviceDocumentation?: Maybe<Scalars['String']>;
  shippingAddress?: Maybe<Scalars['String']>;
  shippingCarrier?: Maybe<Scalars['String']>;
  shippingDate?: Maybe<Scalars['String']>;
  shippingDocumentation?: Maybe<Scalars['String']>;
  shippingTrackingNumber?: Maybe<Scalars['String']>;
  uncategorizedFile?: Maybe<Scalars['String']>;
  uncategorizedText?: Maybe<Scalars['String']>;
};

export type V1ChargeDisputeCloseInput = {
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type V1ChargeRefundInput = {
  amount?: Maybe<Scalars['Int']>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
  paymentIntent?: Maybe<Scalars['String']>;
  reason?: Maybe<Reason6>;
  refundApplicationFee?: Maybe<Scalars['Boolean']>;
  reverseTransfer?: Maybe<Scalars['Boolean']>;
};

export enum Reason6 {
  DUPLICATE = 'duplicate',
  FRAUDULENT = 'fraudulent',
  REQUESTED_BY_CUSTOMER = 'requested_by_customer'
}

export type V1ChargeRefunds2Input = {
  amount?: Maybe<Scalars['Int']>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
  paymentIntent?: Maybe<Scalars['String']>;
  reason?: Maybe<Reason6>;
  refundApplicationFee?: Maybe<Scalars['Boolean']>;
  reverseTransfer?: Maybe<Scalars['Boolean']>;
};

export type V1ChargeRefund3Input = {
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  metadata?: Maybe<Scalars['JSON']>;
};

export type V1CheckoutSessions2Input = {
  /** Enables user redeemable promotion codes. */
  allowPromotionCodes?: Maybe<Scalars['Boolean']>;
  /** Settings for automatic tax lookup for this session and resulting payments, invoices, and subscriptions. */
  automaticTax?: Maybe<AutomaticTaxInput>;
  /** Specify whether Checkout should collect the customer's billing address. */
  billingAddressCollection?: Maybe<BillingAddressCollection2>;
  /** The URL the customer will be directed to if they decide to cancel payment and return to your website. */
  cancelUrl: Scalars['String'];
  /**
   * A unique string to reference the Checkout Session. This can be a
   * customer ID, a cart ID, or similar, and can be used to reconcile the
   * session with your internal systems.
   */
  clientReferenceId?: Maybe<Scalars['String']>;
  /**
   * ID of an existing Customer, if one exists. In `payment` mode, the customer’s most recent card
   * payment method will be used to prefill the email, name, card details, and billing address
   * on the Checkout page. In `subscription` mode, the customer’s [default payment method](https://stripe.com/docs/api/customers/update#update_customer-invoice_settings-default_payment_method)
   * will be used if it’s a card, and otherwise the most recent card will be used. A valid billing address is required for Checkout to prefill the customer's card details.
   *
   * If the customer changes their email on the Checkout page, the Customer object will be updated with the new email.
   *
   * If blank for Checkout Sessions in `payment` or `subscription` mode, Checkout will create a new Customer object based on information provided during the payment flow.
   *
   * You can set [`payment_intent_data.setup_future_usage`](https://stripe.com/docs/api/checkout/sessions/create#create_checkout_session-payment_intent_data-setup_future_usage) to have Checkout automatically attach the payment method to the Customer you pass in for future reuse.
   */
  customer?: Maybe<Scalars['String']>;
  /**
   * If provided, this value will be used when the Customer object is created.
   * If not provided, customers will be asked to enter their email address.
   * Use this parameter to prefill customer data if you already have an email
   * on file. To access information about the customer once a session is
   * complete, use the `customer` field.
   */
  customerEmail?: Maybe<Scalars['String']>;
  /** Controls what fields on Customer can be updated by the Checkout Session. Can only be provided when `customer` is provided. */
  customerUpdate?: Maybe<CustomerUpdateParamsInput>;
  /** The coupon or promotion code to apply to this Session. Currently, only up to one may be specified. */
  discounts?: Maybe<Array<Maybe<Discounts3ListItemInput>>>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /**
   * A list of items the customer is purchasing. Use this parameter to pass one-time or recurring [Prices](https://stripe.com/docs/api/prices).
   *
   * For `payment` mode, there is a maximum of 100 line items, however it is recommended to consolidate line items if there are more than a few dozen.
   *
   * For `subscription` mode, there is a maximum of 20 line items with recurring Prices and 20 line items with one-time Prices. Line items with one-time Prices in will be on the initial invoice only.
   */
  lineItems?: Maybe<Array<Maybe<LineItems2ListItemInput>>>;
  /** The IETF language tag of the locale Checkout is displayed in. If blank or `auto`, the browser's locale is used. */
  locale?: Maybe<Locale2>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
  /** The mode of the Checkout Session. Required when using prices or `setup` mode. Pass `subscription` if the Checkout Session includes at least one recurring item. */
  mode?: Maybe<Mode4>;
  /** A subset of parameters to be passed to PaymentIntent creation for Checkout Sessions in `payment` mode. */
  paymentIntentData?: Maybe<PaymentIntentDataInput>;
  /** Payment-method-specific configuration. */
  paymentMethodOptions?: Maybe<PaymentMethodOptionsParamInput>;
  /**
   * A list of the types of payment methods (e.g., `card`) this Checkout Session can accept.
   *
   * Read more about the supported payment methods and their requirements in our [payment
   * method details guide](/docs/payments/checkout/payment-methods).
   *
   * If multiple payment methods are passed, Checkout will dynamically reorder them to
   * prioritize the most relevant payment methods based on the customer's location and
   * other characteristics.
   */
  paymentMethodTypes?: Maybe<Array<Maybe<PaymentMethodTypes2ListItem>>>;
  /** A subset of parameters to be passed to SetupIntent creation for Checkout Sessions in `setup` mode. */
  setupIntentData?: Maybe<SetupIntentDataInput>;
  /** When set, provides configuration for Checkout to collect a shipping address from a customer. */
  shippingAddressCollection?: Maybe<ShippingAddressCollectionParamsInput>;
  /** The shipping rate to apply to this Session. Currently, only up to one may be specified. */
  shippingRates?: Maybe<Array<Maybe<Scalars['String']>>>;
  /**
   * Describes the type of transaction being performed by Checkout in order to customize
   * relevant text on the page, such as the submit button. `submit_type` can only be
   * specified on Checkout Sessions in `payment` mode, but not Checkout Sessions
   * in `subscription` or `setup` mode.
   */
  submitType?: Maybe<SubmitType2>;
  /** A subset of parameters to be passed to subscription creation for Checkout Sessions in `subscription` mode. */
  subscriptionData?: Maybe<SubscriptionDataInput>;
  /**
   * The URL to which Stripe should send customers when payment or setup
   * is complete.
   * If you’d like access to the Checkout Session for the successful
   * payment, read more about it in the guide on [fulfilling orders](https://stripe.com/docs/payments/checkout/fulfill-orders).
   */
  successUrl: Scalars['String'];
  /** Controls tax ID collection settings for the session. */
  taxIdCollection?: Maybe<TaxIdCollectionInput>;
};

/** Settings for automatic tax lookup for this session and resulting payments, invoices, and subscriptions. */
export type AutomaticTaxInput = {
  enabled: Scalars['Boolean'];
};

export enum BillingAddressCollection2 {
  AUTO = 'auto',
  REQUIRED = 'required'
}

/** Controls what fields on Customer can be updated by the Checkout Session. Can only be provided when `customer` is provided. */
export type CustomerUpdateParamsInput = {
  address?: Maybe<Address5>;
  name?: Maybe<Name17>;
  shipping?: Maybe<Shipping3>;
};

export enum Address5 {
  AUTO = 'auto',
  NEVER = 'never'
}

export enum Name17 {
  AUTO = 'auto',
  NEVER = 'never'
}

export enum Shipping3 {
  AUTO = 'auto',
  NEVER = 'never'
}

export type Discounts3ListItemInput = {
  coupon?: Maybe<Scalars['String']>;
  promotionCode?: Maybe<Scalars['String']>;
};

export type LineItems2ListItemInput = {
  adjustableQuantity?: Maybe<AdjustableQuantityInput>;
  amount?: Maybe<Scalars['Int']>;
  currency?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  dynamicTaxRates?: Maybe<Array<Maybe<Scalars['String']>>>;
  images?: Maybe<Array<Maybe<Scalars['String']>>>;
  name?: Maybe<Scalars['String']>;
  price?: Maybe<Scalars['String']>;
  priceData?: Maybe<PriceDataInput>;
  quantity?: Maybe<Scalars['Int']>;
  taxRates?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type AdjustableQuantityInput = {
  enabled: Scalars['Boolean'];
  maximum?: Maybe<Scalars['Int']>;
  minimum?: Maybe<Scalars['Int']>;
};

export type PriceDataInput = {
  currency: Scalars['String'];
  product?: Maybe<Scalars['String']>;
  productData?: Maybe<ProductDataInput>;
  recurring?: Maybe<RecurringAdhocInput>;
  taxBehavior?: Maybe<TaxBehavior2>;
  unitAmount?: Maybe<Scalars['Int']>;
  unitAmountDecimal?: Maybe<Scalars['String']>;
};

export type ProductDataInput = {
  description?: Maybe<Scalars['String']>;
  images?: Maybe<Array<Maybe<Scalars['String']>>>;
  metadata?: Maybe<Scalars['JSON']>;
  name: Scalars['String'];
  taxCode?: Maybe<Scalars['String']>;
};

export enum Locale2 {
  AUTO = 'auto',
  BG = 'bg',
  CS = 'cs',
  DA = 'da',
  DE = 'de',
  EL = 'el',
  EN = 'en',
  EN_GB = 'en-GB',
  ES = 'es',
  ES_419 = 'es-419',
  ET = 'et',
  FI = 'fi',
  FR = 'fr',
  FR_CA = 'fr-CA',
  HR = 'hr',
  HU = 'hu',
  ID = 'id',
  IT = 'it',
  JA = 'ja',
  KO = 'ko',
  LT = 'lt',
  LV = 'lv',
  MS = 'ms',
  MT = 'mt',
  NB = 'nb',
  NL = 'nl',
  PL = 'pl',
  PT = 'pt',
  PT_BR = 'pt-BR',
  RO = 'ro',
  RU = 'ru',
  SK = 'sk',
  SL = 'sl',
  SV = 'sv',
  TH = 'th',
  TR = 'tr',
  VI = 'vi',
  ZH = 'zh',
  ZH_HK = 'zh-HK',
  ZH_TW = 'zh-TW'
}

export enum Mode4 {
  PAYMENT = 'payment',
  SETUP = 'setup',
  SUBSCRIPTION = 'subscription'
}

/** A subset of parameters to be passed to PaymentIntent creation for Checkout Sessions in `payment` mode. */
export type PaymentIntentDataInput = {
  applicationFeeAmount?: Maybe<Scalars['Int']>;
  captureMethod?: Maybe<CaptureMethod>;
  description?: Maybe<Scalars['String']>;
  metadata?: Maybe<Scalars['JSON']>;
  onBehalfOf?: Maybe<Scalars['String']>;
  receiptEmail?: Maybe<Scalars['String']>;
  setupFutureUsage?: Maybe<SetupFutureUsage>;
  shipping?: Maybe<Shipping4Input>;
  statementDescriptor?: Maybe<Scalars['String']>;
  statementDescriptorSuffix?: Maybe<Scalars['String']>;
  transferData?: Maybe<TransferDataParamsInput>;
  transferGroup?: Maybe<Scalars['String']>;
};

export enum CaptureMethod {
  AUTOMATIC = 'automatic',
  MANUAL = 'manual'
}

export enum SetupFutureUsage {
  OFF_SESSION = 'off_session',
  ON_SESSION = 'on_session'
}

export type Shipping4Input = {
  address: Address6Input;
  carrier?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  phone?: Maybe<Scalars['String']>;
  trackingNumber?: Maybe<Scalars['String']>;
};

export type Address6Input = {
  city?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  line1: Scalars['String'];
  line2?: Maybe<Scalars['String']>;
  postalCode?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
};

export type TransferDataParamsInput = {
  amount?: Maybe<Scalars['Int']>;
  destination: Scalars['String'];
};

/** Payment-method-specific configuration. */
export type PaymentMethodOptionsParamInput = {
  acssDebit?: Maybe<AcssDebit3Input>;
  boleto?: Maybe<Boleto3Input>;
  oxxo?: Maybe<Oxxo3Input>;
  wechatPay?: Maybe<WechatPay2Input>;
};

export type AcssDebit3Input = {
  currency?: Maybe<Currency24>;
  mandateOptions?: Maybe<MandateOptionsInput>;
  verificationMethod?: Maybe<VerificationMethod2>;
};

export enum Currency24 {
  CAD = 'cad',
  USD = 'usd'
}

export type MandateOptionsInput = {
  customMandateUrl?: Maybe<Scalars['JSON']>;
  intervalDescription?: Maybe<Scalars['String']>;
  paymentSchedule?: Maybe<PaymentSchedule2>;
  transactionType?: Maybe<TransactionType2>;
};

export enum PaymentSchedule2 {
  COMBINED = 'combined',
  INTERVAL = 'interval',
  SPORADIC = 'sporadic'
}

export enum TransactionType2 {
  BUSINESS = 'business',
  PERSONAL = 'personal'
}

export enum VerificationMethod2 {
  AUTOMATIC = 'automatic',
  INSTANT = 'instant',
  MICRODEPOSITS = 'microdeposits'
}

export type Boleto3Input = {
  expiresAfterDays?: Maybe<Scalars['Int']>;
};

export type Oxxo3Input = {
  expiresAfterDays?: Maybe<Scalars['Int']>;
};

export type WechatPay2Input = {
  appId?: Maybe<Scalars['String']>;
  client: Client;
};

export enum Client {
  ANDROID = 'android',
  IOS = 'ios',
  WEB = 'web'
}

export enum PaymentMethodTypes2ListItem {
  ACSS_DEBIT = 'acss_debit',
  AFTERPAY_CLEARPAY = 'afterpay_clearpay',
  ALIPAY = 'alipay',
  BACS_DEBIT = 'bacs_debit',
  BANCONTACT = 'bancontact',
  BOLETO = 'boleto',
  CARD = 'card',
  EPS = 'eps',
  FPX = 'fpx',
  GIROPAY = 'giropay',
  GRABPAY = 'grabpay',
  IDEAL = 'ideal',
  OXXO = 'oxxo',
  P24 = 'p24',
  SEPA_DEBIT = 'sepa_debit',
  SOFORT = 'sofort',
  WECHAT_PAY = 'wechat_pay'
}

/** A subset of parameters to be passed to SetupIntent creation for Checkout Sessions in `setup` mode. */
export type SetupIntentDataInput = {
  description?: Maybe<Scalars['String']>;
  metadata?: Maybe<Scalars['JSON']>;
  onBehalfOf?: Maybe<Scalars['String']>;
};

/** When set, provides configuration for Checkout to collect a shipping address from a customer. */
export type ShippingAddressCollectionParamsInput = {
  allowedCountries: Array<Maybe<AllowedCountries2ListItem>>;
};

export enum AllowedCountries2ListItem {
  AC = 'AC',
  AD = 'AD',
  AE = 'AE',
  AF = 'AF',
  AG = 'AG',
  AI = 'AI',
  AL = 'AL',
  AM = 'AM',
  AO = 'AO',
  AQ = 'AQ',
  AR = 'AR',
  AT = 'AT',
  AU = 'AU',
  AW = 'AW',
  AX = 'AX',
  AZ = 'AZ',
  BA = 'BA',
  BB = 'BB',
  BD = 'BD',
  BE = 'BE',
  BF = 'BF',
  BG = 'BG',
  BH = 'BH',
  BI = 'BI',
  BJ = 'BJ',
  BL = 'BL',
  BM = 'BM',
  BN = 'BN',
  BO = 'BO',
  BQ = 'BQ',
  BR = 'BR',
  BS = 'BS',
  BT = 'BT',
  BV = 'BV',
  BW = 'BW',
  BY = 'BY',
  BZ = 'BZ',
  CA = 'CA',
  CD = 'CD',
  CF = 'CF',
  CG = 'CG',
  CH = 'CH',
  CI = 'CI',
  CK = 'CK',
  CL = 'CL',
  CM = 'CM',
  CN = 'CN',
  CO = 'CO',
  CR = 'CR',
  CV = 'CV',
  CW = 'CW',
  CY = 'CY',
  CZ = 'CZ',
  DE = 'DE',
  DJ = 'DJ',
  DK = 'DK',
  DM = 'DM',
  DO = 'DO',
  DZ = 'DZ',
  EC = 'EC',
  EE = 'EE',
  EG = 'EG',
  EH = 'EH',
  ER = 'ER',
  ES = 'ES',
  ET = 'ET',
  FI = 'FI',
  FJ = 'FJ',
  FK = 'FK',
  FO = 'FO',
  FR = 'FR',
  GA = 'GA',
  GB = 'GB',
  GD = 'GD',
  GE = 'GE',
  GF = 'GF',
  GG = 'GG',
  GH = 'GH',
  GI = 'GI',
  GL = 'GL',
  GM = 'GM',
  GN = 'GN',
  GP = 'GP',
  GQ = 'GQ',
  GR = 'GR',
  GS = 'GS',
  GT = 'GT',
  GU = 'GU',
  GW = 'GW',
  GY = 'GY',
  HK = 'HK',
  HN = 'HN',
  HR = 'HR',
  HT = 'HT',
  HU = 'HU',
  ID = 'ID',
  IE = 'IE',
  IL = 'IL',
  IM = 'IM',
  IN = 'IN',
  IO = 'IO',
  IQ = 'IQ',
  IS = 'IS',
  IT = 'IT',
  JE = 'JE',
  JM = 'JM',
  JO = 'JO',
  JP = 'JP',
  KE = 'KE',
  KG = 'KG',
  KH = 'KH',
  KI = 'KI',
  KM = 'KM',
  KN = 'KN',
  KR = 'KR',
  KW = 'KW',
  KY = 'KY',
  KZ = 'KZ',
  LA = 'LA',
  LB = 'LB',
  LC = 'LC',
  LI = 'LI',
  LK = 'LK',
  LR = 'LR',
  LS = 'LS',
  LT = 'LT',
  LU = 'LU',
  LV = 'LV',
  LY = 'LY',
  MA = 'MA',
  MC = 'MC',
  MD = 'MD',
  ME = 'ME',
  MF = 'MF',
  MG = 'MG',
  MK = 'MK',
  ML = 'ML',
  MM = 'MM',
  MN = 'MN',
  MO = 'MO',
  MQ = 'MQ',
  MR = 'MR',
  MS = 'MS',
  MT = 'MT',
  MU = 'MU',
  MV = 'MV',
  MW = 'MW',
  MX = 'MX',
  MY = 'MY',
  MZ = 'MZ',
  NA = 'NA',
  NC = 'NC',
  NE = 'NE',
  NG = 'NG',
  NI = 'NI',
  NL = 'NL',
  NO = 'NO',
  NP = 'NP',
  NR = 'NR',
  NU = 'NU',
  NZ = 'NZ',
  OM = 'OM',
  PA = 'PA',
  PE = 'PE',
  PF = 'PF',
  PG = 'PG',
  PH = 'PH',
  PK = 'PK',
  PL = 'PL',
  PM = 'PM',
  PN = 'PN',
  PR = 'PR',
  PS = 'PS',
  PT = 'PT',
  PY = 'PY',
  QA = 'QA',
  RE = 'RE',
  RO = 'RO',
  RS = 'RS',
  RU = 'RU',
  RW = 'RW',
  SA = 'SA',
  SB = 'SB',
  SC = 'SC',
  SE = 'SE',
  SG = 'SG',
  SH = 'SH',
  SI = 'SI',
  SJ = 'SJ',
  SK = 'SK',
  SL = 'SL',
  SM = 'SM',
  SN = 'SN',
  SO = 'SO',
  SR = 'SR',
  SS = 'SS',
  ST = 'ST',
  SV = 'SV',
  SX = 'SX',
  SZ = 'SZ',
  TA = 'TA',
  TC = 'TC',
  TD = 'TD',
  TF = 'TF',
  TG = 'TG',
  TH = 'TH',
  TJ = 'TJ',
  TK = 'TK',
  TL = 'TL',
  TM = 'TM',
  TN = 'TN',
  TO = 'TO',
  TR = 'TR',
  TT = 'TT',
  TV = 'TV',
  TW = 'TW',
  TZ = 'TZ',
  UA = 'UA',
  UG = 'UG',
  US = 'US',
  UY = 'UY',
  UZ = 'UZ',
  VA = 'VA',
  VC = 'VC',
  VE = 'VE',
  VG = 'VG',
  VN = 'VN',
  VU = 'VU',
  WF = 'WF',
  WS = 'WS',
  XK = 'XK',
  YE = 'YE',
  YT = 'YT',
  ZA = 'ZA',
  ZM = 'ZM',
  ZW = 'ZW',
  ZZ = 'ZZ'
}

export enum SubmitType2 {
  AUTO = 'auto',
  BOOK = 'book',
  DONATE = 'donate',
  PAY = 'pay'
}

/** A subset of parameters to be passed to subscription creation for Checkout Sessions in `subscription` mode. */
export type SubscriptionDataInput = {
  applicationFeePercent?: Maybe<Scalars['Float']>;
  defaultTaxRates?: Maybe<Array<Maybe<Scalars['String']>>>;
  items?: Maybe<Array<Maybe<ItemsListItemInput>>>;
  metadata?: Maybe<Scalars['JSON']>;
  transferData?: Maybe<TransferData3Input>;
  trialEnd?: Maybe<Scalars['Int']>;
  trialPeriodDays?: Maybe<Scalars['Int']>;
};

export type ItemsListItemInput = {
  plan: Scalars['String'];
  quantity?: Maybe<Scalars['Int']>;
  taxRates?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type TransferData3Input = {
  amountPercent?: Maybe<Scalars['Float']>;
  destination: Scalars['String'];
};

/** Controls tax ID collection settings for the session. */
export type TaxIdCollectionInput = {
  enabled: Scalars['Boolean'];
};

export type V1Coupons3Input = {
  /** A positive integer representing the amount to subtract from an invoice total (required if `percent_off` is not passed). */
  amountOff?: Maybe<Scalars['Int']>;
  /** A hash containing directions for what this Coupon will apply discounts to. */
  appliesTo?: Maybe<AppliesToInput>;
  /** Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) of the `amount_off` parameter (required if `amount_off` is passed). */
  currency?: Maybe<Scalars['String']>;
  /** Specifies how long the discount will be in effect if used on a subscription. Can be `forever`, `once`, or `repeating`. Defaults to `once`. */
  duration?: Maybe<Duration2>;
  /** Required only if `duration` is `repeating`, in which case it must be a positive integer that specifies the number of months the discount will be in effect. */
  durationInMonths?: Maybe<Scalars['Int']>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Unique string of your choice that will be used to identify this coupon when applying it to a customer. If you don't want to specify a particular code, you can leave the ID blank and we'll generate a random code for you. */
  id?: Maybe<Scalars['String']>;
  /** A positive integer specifying the number of times the coupon can be redeemed before it's no longer valid. For example, you might have a 50% off coupon that the first 20 readers of your blog can use. */
  maxRedemptions?: Maybe<Scalars['Int']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
  /** Name of the coupon displayed to customers on, for instance invoices, or receipts. By default the `id` is shown if `name` is not set. */
  name?: Maybe<Scalars['String']>;
  /** A positive float larger than 0, and smaller or equal to 100, that represents the discount the coupon will apply (required if `amount_off` is not passed). */
  percentOff?: Maybe<Scalars['Float']>;
  /** Unix timestamp specifying the last time at which the coupon can be redeemed. After the redeem_by date, the coupon can no longer be applied to new customers. */
  redeemBy?: Maybe<Scalars['Int']>;
};

/** A hash containing directions for what this Coupon will apply discounts to. */
export type AppliesToInput = {
  products?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export enum Duration2 {
  FOREVER = 'forever',
  ONCE = 'once',
  REPEATING = 'repeating'
}

export type V1Coupon2Input = {
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
  /** Name of the coupon displayed to customers on, for instance invoices, or receipts. By default the `id` is shown if `name` is not set. */
  name?: Maybe<Scalars['String']>;
};

export type V1CreditNotes2Input = {
  /** The integer amount in %s representing the total amount of the credit note. */
  amount?: Maybe<Scalars['Int']>;
  /** The integer amount in %s representing the amount to credit the customer's balance, which will be automatically applied to their next invoice. */
  creditAmount?: Maybe<Scalars['Int']>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** ID of the invoice. */
  invoice: Scalars['String'];
  /** Line items that make up the credit note. */
  lines?: Maybe<Array<Maybe<Lines2ListItemInput>>>;
  /** The credit note's memo appears on the credit note PDF. */
  memo?: Maybe<Scalars['String']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
  /** The integer amount in %s representing the amount that is credited outside of Stripe. */
  outOfBandAmount?: Maybe<Scalars['Int']>;
  /** Reason for issuing this credit note, one of `duplicate`, `fraudulent`, `order_change`, or `product_unsatisfactory` */
  reason?: Maybe<Reason8>;
  /** ID of an existing refund to link this credit note to. */
  refund?: Maybe<Scalars['String']>;
  /** The integer amount in %s representing the amount to refund. If set, a refund will be created for the charge associated with the invoice. */
  refundAmount?: Maybe<Scalars['Int']>;
};

export type Lines2ListItemInput = {
  amount?: Maybe<Scalars['Int']>;
  description?: Maybe<Scalars['String']>;
  invoiceLineItem?: Maybe<Scalars['String']>;
  quantity?: Maybe<Scalars['Int']>;
  taxRates?: Maybe<Scalars['JSON']>;
  type: Type15;
  unitAmount?: Maybe<Scalars['Int']>;
  unitAmountDecimal?: Maybe<Scalars['String']>;
};

export enum Reason8 {
  DUPLICATE = 'duplicate',
  FRAUDULENT = 'fraudulent',
  ORDER_CHANGE = 'order_change',
  PRODUCT_UNSATISFACTORY = 'product_unsatisfactory'
}

export type V1CreditNote2Input = {
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Credit note memo. */
  memo?: Maybe<Scalars['String']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
};

export type V1CreditNoteVoidInput = {
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type V1Customers3Input = {
  /** The customer's address. */
  address?: Maybe<Scalars['JSON']>;
  /** An integer amount in %s that represents the customer's current balance, which affect the customer's future invoices. A negative amount represents a credit that decreases the amount due on an invoice; a positive amount increases the amount due on an invoice. */
  balance?: Maybe<Scalars['Int']>;
  coupon?: Maybe<Scalars['String']>;
  /** An arbitrary string that you can attach to a customer object. It is displayed alongside the customer in the dashboard. */
  description?: Maybe<Scalars['String']>;
  /** Customer's email address. It's displayed alongside the customer in your dashboard and can be useful for searching and tracking. This may be up to *512 characters*. */
  email?: Maybe<Scalars['String']>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** The prefix for the customer used to generate unique invoice numbers. Must be 3–12 uppercase letters or numbers. */
  invoicePrefix?: Maybe<Scalars['String']>;
  /** Default invoice settings for this customer. */
  invoiceSettings?: Maybe<InvoiceSettingsInput>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
  /** The customer's full name or business name. */
  name?: Maybe<Scalars['String']>;
  /** The sequence to be used on the customer's next invoice. Defaults to 1. */
  nextInvoiceSequence?: Maybe<Scalars['Int']>;
  paymentMethod?: Maybe<Scalars['String']>;
  /** The customer's phone number. */
  phone?: Maybe<Scalars['String']>;
  /** Customer's preferred languages, ordered by preference. */
  preferredLocales?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** The API ID of a promotion code to apply to the customer. The customer will have a discount applied on all recurring payments. Charges you create through the API will not have the discount. */
  promotionCode?: Maybe<Scalars['String']>;
  /** The customer's shipping information. Appears on invoices emailed to this customer. */
  shipping?: Maybe<Scalars['JSON']>;
  source?: Maybe<Scalars['String']>;
  /** Tax details about the customer. */
  tax?: Maybe<TaxInput>;
  /** The customer's tax exemption. One of `none`, `exempt`, or `reverse`. */
  taxExempt?: Maybe<TaxExempt3>;
  /** The customer's tax IDs. */
  taxIdData?: Maybe<Array<Maybe<TaxIdDataListItemInput>>>;
};

/** Default invoice settings for this customer. */
export type InvoiceSettingsInput = {
  customFields?: Maybe<Scalars['JSON']>;
  defaultPaymentMethod?: Maybe<Scalars['String']>;
  footer?: Maybe<Scalars['String']>;
};

/** Tax details about the customer. */
export type TaxInput = {
  ipAddress?: Maybe<Scalars['JSON']>;
};

export enum TaxExempt3 {
  _ = '',
  EXEMPT = 'exempt',
  NONE = 'none',
  REVERSE = 'reverse'
}

export type TaxIdDataListItemInput = {
  type: Type20;
  value: Scalars['String'];
};

export type V1Customer3Input = {
  /** The customer's address. */
  address?: Maybe<Scalars['JSON']>;
  /** An integer amount in %s that represents the customer's current balance, which affect the customer's future invoices. A negative amount represents a credit that decreases the amount due on an invoice; a positive amount increases the amount due on an invoice. */
  balance?: Maybe<Scalars['Int']>;
  /** Either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/js), or a dictionary containing a user's bank account details. */
  bankAccount?: Maybe<Scalars['JSON']>;
  /** A token, like the ones returned by [Stripe.js](https://stripe.com/docs/js). */
  card?: Maybe<Scalars['JSON']>;
  coupon?: Maybe<Scalars['String']>;
  /** ID of Alipay account to make the customer's new default for invoice payments. */
  defaultAlipayAccount?: Maybe<Scalars['String']>;
  /** ID of bank account to make the customer's new default for invoice payments. */
  defaultBankAccount?: Maybe<Scalars['String']>;
  /** ID of card to make the customer's new default for invoice payments. */
  defaultCard?: Maybe<Scalars['String']>;
  /**
   * If you are using payment methods created via the PaymentMethods API, see the [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/update#update_customer-invoice_settings-default_payment_method) parameter.
   *
   * Provide the ID of a payment source already attached to this customer to make it this customer's default payment source.
   *
   * If you want to add a new payment source and make it the default, see the [source](https://stripe.com/docs/api/customers/update#update_customer-source) property.
   */
  defaultSource?: Maybe<Scalars['String']>;
  /** An arbitrary string that you can attach to a customer object. It is displayed alongside the customer in the dashboard. */
  description?: Maybe<Scalars['String']>;
  /** Customer's email address. It's displayed alongside the customer in your dashboard and can be useful for searching and tracking. This may be up to *512 characters*. */
  email?: Maybe<Scalars['String']>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** The prefix for the customer used to generate unique invoice numbers. Must be 3–12 uppercase letters or numbers. */
  invoicePrefix?: Maybe<Scalars['String']>;
  /** Default invoice settings for this customer. */
  invoiceSettings?: Maybe<InvoiceSettingsInput>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
  /** The customer's full name or business name. */
  name?: Maybe<Scalars['String']>;
  /** The sequence to be used on the customer's next invoice. Defaults to 1. */
  nextInvoiceSequence?: Maybe<Scalars['Int']>;
  /** The customer's phone number. */
  phone?: Maybe<Scalars['String']>;
  /** Customer's preferred languages, ordered by preference. */
  preferredLocales?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** The API ID of a promotion code to apply to the customer. The customer will have a discount applied on all recurring payments. Charges you create through the API will not have the discount. */
  promotionCode?: Maybe<Scalars['String']>;
  /** The customer's shipping information. Appears on invoices emailed to this customer. */
  shipping?: Maybe<Scalars['JSON']>;
  source?: Maybe<Scalars['String']>;
  /** Tax details about the customer. */
  tax?: Maybe<TaxInput>;
  /** The customer's tax exemption. One of `none`, `exempt`, or `reverse`. */
  taxExempt?: Maybe<TaxExempt3>;
  /** Unix timestamp representing the end of the trial period the customer will get before being charged for the first time. This will always overwrite any trials that might apply via a subscribed plan. If set, trial_end will override the default trial period of the plan the customer is being subscribed to. The special value `now` can be provided to end the customer's trial immediately. Can be at most two years from `billing_cycle_anchor`. */
  trialEnd?: Maybe<Scalars['JSON']>;
};

export type V1CustomerBalanceTransactions2Input = {
  /** The integer amount in **%s** to apply to the customer's credit balance. */
  amount: Scalars['Int'];
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). If the customer's [`currency`](https://stripe.com/docs/api/customers/object#customer_object-currency) is set, this value must match it. If the customer's `currency` is not set, it will be updated to this value. */
  currency: Scalars['String'];
  /** An arbitrary string attached to the object. Often useful for displaying to users. */
  description?: Maybe<Scalars['String']>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
};

export type V1CustomerBalanceTransactions3Input = {
  /** An arbitrary string attached to the object. Often useful for displaying to users. */
  description?: Maybe<Scalars['String']>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
};

export type V1CustomerBankAccounts2Input = {
  /** A token returned by [Stripe.js](https://stripe.com/docs/js) representing the user’s Alipay account details. */
  alipayAccount?: Maybe<Scalars['String']>;
  /** Either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/js), or a dictionary containing a user's bank account details. */
  bankAccount?: Maybe<Scalars['JSON']>;
  /** A token, like the ones returned by [Stripe.js](https://stripe.com/docs/js). */
  card?: Maybe<Scalars['JSON']>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
  /** Please refer to full [documentation](https://stripe.com/docs/api) instead. */
  source?: Maybe<Scalars['String']>;
};

export type V1CustomerBankAccount5 = {
  account?: Maybe<Scalars['JSON']>;
  /** The name of the person or business that owns the bank account. */
  accountHolderName?: Maybe<Scalars['String']>;
  /** The type of entity that holds the account. This can be either `individual` or `company`. */
  accountHolderType?: Maybe<Scalars['String']>;
  /** The bank account type. This can only be `checking` or `savings` in most countries. In Japan, this can only be `futsu` or `toza`. */
  accountType?: Maybe<Scalars['String']>;
  achCreditTransfer?: Maybe<AchCreditTransfer2>;
  achDebit?: Maybe<AchDebit2>;
  acssDebit?: Maybe<AcssDebit4>;
  /** City/District/Suburb/Town/Village. */
  addressCity?: Maybe<Scalars['String']>;
  /** Billing address country, if provided when creating card. */
  addressCountry?: Maybe<Scalars['String']>;
  /** Address line 1 (Street address/PO Box/Company name). */
  addressLine1?: Maybe<Scalars['String']>;
  /** If `address_line1` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. */
  addressLine1Check?: Maybe<Scalars['String']>;
  /** Address line 2 (Apartment/Suite/Unit/Building). */
  addressLine2?: Maybe<Scalars['String']>;
  /** State/County/Province/Region. */
  addressState?: Maybe<Scalars['String']>;
  /** ZIP or postal code. */
  addressZip?: Maybe<Scalars['String']>;
  /** If `address_zip` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. */
  addressZipCheck?: Maybe<Scalars['String']>;
  alipay?: Maybe<Alipay2>;
  /** A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount associated with the source. This is the amount for which the source will be chargeable once ready. Required for `single_use` sources. */
  amount?: Maybe<Scalars['Int']>;
  auBecsDebit?: Maybe<AuBecsDebit2>;
  availablePayoutMethods?: Maybe<Scalars['JSON']>;
  bancontact?: Maybe<Bancontact2>;
  /** Name of the bank associated with the routing number (e.g., `WELLS FARGO`). */
  bankName?: Maybe<Scalars['String']>;
  /** Card brand. Can be `American Express`, `Diners Club`, `Discover`, `JCB`, `MasterCard`, `UnionPay`, `Visa`, or `Unknown`. */
  brand?: Maybe<Scalars['String']>;
  card?: Maybe<Card6>;
  cardPresent?: Maybe<CardPresent2>;
  /** The client secret of the source. Used for client-side retrieval using a publishable key. */
  clientSecret?: Maybe<Scalars['String']>;
  codeVerification?: Maybe<CodeVerification>;
  country?: Maybe<Scalars['JSON']>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: Maybe<Scalars['Int']>;
  currency?: Maybe<Scalars['JSON']>;
  customer?: Maybe<Scalars['JSON']>;
  /** If a CVC was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. A result of unchecked indicates that CVC was provided but hasn't been checked yet. Checks are typically performed when attaching a card to a Customer object, or when creating a charge. For more details, see [Check if a card is valid without a charge](https://support.stripe.com/questions/check-if-a-card-is-valid-without-a-charge). */
  cvcCheck?: Maybe<Scalars['String']>;
  defaultForCurrency?: Maybe<Scalars['JSON']>;
  /** (For tokenized numbers only.) The last four digits of the device account number. */
  dynamicLast4?: Maybe<Scalars['String']>;
  eps?: Maybe<Eps2>;
  /** Two-digit number representing the card's expiration month. */
  expMonth?: Maybe<Scalars['Int']>;
  /** Four-digit number representing the card's expiration year. */
  expYear?: Maybe<Scalars['Int']>;
  fingerprint?: Maybe<Scalars['JSON']>;
  /** The authentication `flow` of the source. `flow` is one of `redirect`, `receiver`, `code_verification`, `none`. */
  flow?: Maybe<Scalars['String']>;
  /** Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`. */
  funding?: Maybe<Scalars['String']>;
  giropay?: Maybe<Giropay2>;
  /** Unique identifier for the object. */
  id?: Maybe<Scalars['String']>;
  ideal?: Maybe<Ideal2>;
  klarna?: Maybe<Klarna2>;
  last4?: Maybe<Scalars['JSON']>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: Maybe<Scalars['Boolean']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Maybe<Scalars['JSON']>;
  multibanco?: Maybe<Multibanco2>;
  /** Cardholder name. */
  name?: Maybe<Scalars['String']>;
  object?: Maybe<Scalars['JSON']>;
  /** Information about the owner of the payment instrument that may be used or required by particular source types. */
  owner?: Maybe<Owner3>;
  p24?: Maybe<P242>;
  receiver?: Maybe<Receiver2>;
  /** The recipient that this card belongs to. This attribute will not be in the card object if the card belongs to a customer or account instead. */
  recipient?: Maybe<Scalars['JSON']>;
  redirect?: Maybe<Redirect>;
  /** The routing transit number for the bank account. */
  routingNumber?: Maybe<Scalars['String']>;
  sepaDebit?: Maybe<SepaDebit2>;
  sofort?: Maybe<Sofort2>;
  sourceOrder?: Maybe<SourceOrder>;
  /** Extra information about a source. This will appear on your customer's statement every time you charge the source. */
  statementDescriptor?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['JSON']>;
  threeDSecure?: Maybe<ThreeDSecure4>;
  /** If the card number is tokenized, this is the method that was used. Can be `android_pay` (includes Google Pay), `apple_pay`, `masterpass`, `visa_checkout`, or null. */
  tokenizationMethod?: Maybe<Scalars['String']>;
  /** The `type` of the source. The `type` is a payment method, one of `ach_credit_transfer`, `ach_debit`, `alipay`, `bancontact`, `card`, `card_present`, `eps`, `giropay`, `ideal`, `multibanco`, `klarna`, `p24`, `sepa_debit`, `sofort`, `three_d_secure`, or `wechat`. An additional hash is included on the source with a name matching this value. It contains additional information specific to the [payment method](https://stripe.com/docs/sources) used. */
  type?: Maybe<Type18>;
  /** Either `reusable` or `single_use`. Whether this source should be reusable or not. Some source types may or may not be reusable by construction, while others may leave the option at creation. If an incompatible value is passed, an error will be returned. */
  usage?: Maybe<Scalars['String']>;
  wechat?: Maybe<Wechat2>;
};

export type V1CustomerBankAccount4Input = {
  /** The name of the person or business that owns the bank account. */
  accountHolderName?: Maybe<Scalars['String']>;
  /** The type of entity that holds the account. This can be either `individual` or `company`. */
  accountHolderType?: Maybe<AccountHolderType8>;
  /** City/District/Suburb/Town/Village. */
  addressCity?: Maybe<Scalars['String']>;
  /** Billing address country, if provided when creating card. */
  addressCountry?: Maybe<Scalars['String']>;
  /** Address line 1 (Street address/PO Box/Company name). */
  addressLine1?: Maybe<Scalars['String']>;
  /** Address line 2 (Apartment/Suite/Unit/Building). */
  addressLine2?: Maybe<Scalars['String']>;
  /** State/County/Province/Region. */
  addressState?: Maybe<Scalars['String']>;
  /** ZIP or postal code. */
  addressZip?: Maybe<Scalars['String']>;
  /** Two digit number representing the card’s expiration month. */
  expMonth?: Maybe<Scalars['String']>;
  /** Four digit number representing the card’s expiration year. */
  expYear?: Maybe<Scalars['String']>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
  /** Cardholder name. */
  name?: Maybe<Scalars['String']>;
  owner?: Maybe<Owner4Input>;
};

export enum AccountHolderType8 {
  COMPANY = 'company',
  INDIVIDUAL = 'individual'
}

export type Owner4Input = {
  address?: Maybe<SourceAddressInput>;
  email?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
};

export type SourceAddressInput = {
  city?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  line1?: Maybe<Scalars['String']>;
  line2?: Maybe<Scalars['String']>;
  postalCode?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
};

export type V1CustomerBankAccountVerifyInput = {
  /** Two positive integers, in *cents*, equal to the values of the microdeposits sent to the bank account. */
  amounts?: Maybe<Array<Maybe<Scalars['Int']>>>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type V1CustomerCards2Input = {
  /** A token returned by [Stripe.js](https://stripe.com/docs/js) representing the user’s Alipay account details. */
  alipayAccount?: Maybe<Scalars['String']>;
  /** Either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/js), or a dictionary containing a user's bank account details. */
  bankAccount?: Maybe<Scalars['JSON']>;
  /** A token, like the ones returned by [Stripe.js](https://stripe.com/docs/js). */
  card?: Maybe<Scalars['JSON']>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
  /** Please refer to full [documentation](https://stripe.com/docs/api) instead. */
  source?: Maybe<Scalars['String']>;
};

export type V1CustomerCard5 = {
  account?: Maybe<Scalars['JSON']>;
  /** The name of the person or business that owns the bank account. */
  accountHolderName?: Maybe<Scalars['String']>;
  /** The type of entity that holds the account. This can be either `individual` or `company`. */
  accountHolderType?: Maybe<Scalars['String']>;
  /** The bank account type. This can only be `checking` or `savings` in most countries. In Japan, this can only be `futsu` or `toza`. */
  accountType?: Maybe<Scalars['String']>;
  achCreditTransfer?: Maybe<AchCreditTransfer2>;
  achDebit?: Maybe<AchDebit2>;
  acssDebit?: Maybe<AcssDebit4>;
  /** City/District/Suburb/Town/Village. */
  addressCity?: Maybe<Scalars['String']>;
  /** Billing address country, if provided when creating card. */
  addressCountry?: Maybe<Scalars['String']>;
  /** Address line 1 (Street address/PO Box/Company name). */
  addressLine1?: Maybe<Scalars['String']>;
  /** If `address_line1` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. */
  addressLine1Check?: Maybe<Scalars['String']>;
  /** Address line 2 (Apartment/Suite/Unit/Building). */
  addressLine2?: Maybe<Scalars['String']>;
  /** State/County/Province/Region. */
  addressState?: Maybe<Scalars['String']>;
  /** ZIP or postal code. */
  addressZip?: Maybe<Scalars['String']>;
  /** If `address_zip` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. */
  addressZipCheck?: Maybe<Scalars['String']>;
  alipay?: Maybe<Alipay2>;
  /** A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount associated with the source. This is the amount for which the source will be chargeable once ready. Required for `single_use` sources. */
  amount?: Maybe<Scalars['Int']>;
  auBecsDebit?: Maybe<AuBecsDebit2>;
  availablePayoutMethods?: Maybe<Scalars['JSON']>;
  bancontact?: Maybe<Bancontact2>;
  /** Name of the bank associated with the routing number (e.g., `WELLS FARGO`). */
  bankName?: Maybe<Scalars['String']>;
  /** Card brand. Can be `American Express`, `Diners Club`, `Discover`, `JCB`, `MasterCard`, `UnionPay`, `Visa`, or `Unknown`. */
  brand?: Maybe<Scalars['String']>;
  card?: Maybe<Card6>;
  cardPresent?: Maybe<CardPresent2>;
  /** The client secret of the source. Used for client-side retrieval using a publishable key. */
  clientSecret?: Maybe<Scalars['String']>;
  codeVerification?: Maybe<CodeVerification>;
  country?: Maybe<Scalars['JSON']>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: Maybe<Scalars['Int']>;
  currency?: Maybe<Scalars['JSON']>;
  customer?: Maybe<Scalars['JSON']>;
  /** If a CVC was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. A result of unchecked indicates that CVC was provided but hasn't been checked yet. Checks are typically performed when attaching a card to a Customer object, or when creating a charge. For more details, see [Check if a card is valid without a charge](https://support.stripe.com/questions/check-if-a-card-is-valid-without-a-charge). */
  cvcCheck?: Maybe<Scalars['String']>;
  defaultForCurrency?: Maybe<Scalars['JSON']>;
  /** (For tokenized numbers only.) The last four digits of the device account number. */
  dynamicLast4?: Maybe<Scalars['String']>;
  eps?: Maybe<Eps2>;
  /** Two-digit number representing the card's expiration month. */
  expMonth?: Maybe<Scalars['Int']>;
  /** Four-digit number representing the card's expiration year. */
  expYear?: Maybe<Scalars['Int']>;
  fingerprint?: Maybe<Scalars['JSON']>;
  /** The authentication `flow` of the source. `flow` is one of `redirect`, `receiver`, `code_verification`, `none`. */
  flow?: Maybe<Scalars['String']>;
  /** Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`. */
  funding?: Maybe<Scalars['String']>;
  giropay?: Maybe<Giropay2>;
  /** Unique identifier for the object. */
  id?: Maybe<Scalars['String']>;
  ideal?: Maybe<Ideal2>;
  klarna?: Maybe<Klarna2>;
  last4?: Maybe<Scalars['JSON']>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: Maybe<Scalars['Boolean']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Maybe<Scalars['JSON']>;
  multibanco?: Maybe<Multibanco2>;
  /** Cardholder name. */
  name?: Maybe<Scalars['String']>;
  object?: Maybe<Scalars['JSON']>;
  /** Information about the owner of the payment instrument that may be used or required by particular source types. */
  owner?: Maybe<Owner3>;
  p24?: Maybe<P242>;
  receiver?: Maybe<Receiver2>;
  /** The recipient that this card belongs to. This attribute will not be in the card object if the card belongs to a customer or account instead. */
  recipient?: Maybe<Scalars['JSON']>;
  redirect?: Maybe<Redirect>;
  /** The routing transit number for the bank account. */
  routingNumber?: Maybe<Scalars['String']>;
  sepaDebit?: Maybe<SepaDebit2>;
  sofort?: Maybe<Sofort2>;
  sourceOrder?: Maybe<SourceOrder>;
  /** Extra information about a source. This will appear on your customer's statement every time you charge the source. */
  statementDescriptor?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['JSON']>;
  threeDSecure?: Maybe<ThreeDSecure4>;
  /** If the card number is tokenized, this is the method that was used. Can be `android_pay` (includes Google Pay), `apple_pay`, `masterpass`, `visa_checkout`, or null. */
  tokenizationMethod?: Maybe<Scalars['String']>;
  /** The `type` of the source. The `type` is a payment method, one of `ach_credit_transfer`, `ach_debit`, `alipay`, `bancontact`, `card`, `card_present`, `eps`, `giropay`, `ideal`, `multibanco`, `klarna`, `p24`, `sepa_debit`, `sofort`, `three_d_secure`, or `wechat`. An additional hash is included on the source with a name matching this value. It contains additional information specific to the [payment method](https://stripe.com/docs/sources) used. */
  type?: Maybe<Type18>;
  /** Either `reusable` or `single_use`. Whether this source should be reusable or not. Some source types may or may not be reusable by construction, while others may leave the option at creation. If an incompatible value is passed, an error will be returned. */
  usage?: Maybe<Scalars['String']>;
  wechat?: Maybe<Wechat2>;
};

export type V1CustomerCard4Input = {
  /** The name of the person or business that owns the bank account. */
  accountHolderName?: Maybe<Scalars['String']>;
  /** The type of entity that holds the account. This can be either `individual` or `company`. */
  accountHolderType?: Maybe<AccountHolderType8>;
  /** City/District/Suburb/Town/Village. */
  addressCity?: Maybe<Scalars['String']>;
  /** Billing address country, if provided when creating card. */
  addressCountry?: Maybe<Scalars['String']>;
  /** Address line 1 (Street address/PO Box/Company name). */
  addressLine1?: Maybe<Scalars['String']>;
  /** Address line 2 (Apartment/Suite/Unit/Building). */
  addressLine2?: Maybe<Scalars['String']>;
  /** State/County/Province/Region. */
  addressState?: Maybe<Scalars['String']>;
  /** ZIP or postal code. */
  addressZip?: Maybe<Scalars['String']>;
  /** Two digit number representing the card’s expiration month. */
  expMonth?: Maybe<Scalars['String']>;
  /** Four digit number representing the card’s expiration year. */
  expYear?: Maybe<Scalars['String']>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
  /** Cardholder name. */
  name?: Maybe<Scalars['String']>;
  owner?: Maybe<Owner4Input>;
};

export type V1CustomerSources2Input = {
  /** A token returned by [Stripe.js](https://stripe.com/docs/js) representing the user’s Alipay account details. */
  alipayAccount?: Maybe<Scalars['String']>;
  /** Either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/js), or a dictionary containing a user's bank account details. */
  bankAccount?: Maybe<Scalars['JSON']>;
  /** A token, like the ones returned by [Stripe.js](https://stripe.com/docs/js). */
  card?: Maybe<Scalars['JSON']>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
  /** Please refer to full [documentation](https://stripe.com/docs/api) instead. */
  source?: Maybe<Scalars['String']>;
};

export type V1CustomerSource5 = {
  account?: Maybe<Scalars['JSON']>;
  /** The name of the person or business that owns the bank account. */
  accountHolderName?: Maybe<Scalars['String']>;
  /** The type of entity that holds the account. This can be either `individual` or `company`. */
  accountHolderType?: Maybe<Scalars['String']>;
  /** The bank account type. This can only be `checking` or `savings` in most countries. In Japan, this can only be `futsu` or `toza`. */
  accountType?: Maybe<Scalars['String']>;
  achCreditTransfer?: Maybe<AchCreditTransfer2>;
  achDebit?: Maybe<AchDebit2>;
  acssDebit?: Maybe<AcssDebit4>;
  /** City/District/Suburb/Town/Village. */
  addressCity?: Maybe<Scalars['String']>;
  /** Billing address country, if provided when creating card. */
  addressCountry?: Maybe<Scalars['String']>;
  /** Address line 1 (Street address/PO Box/Company name). */
  addressLine1?: Maybe<Scalars['String']>;
  /** If `address_line1` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. */
  addressLine1Check?: Maybe<Scalars['String']>;
  /** Address line 2 (Apartment/Suite/Unit/Building). */
  addressLine2?: Maybe<Scalars['String']>;
  /** State/County/Province/Region. */
  addressState?: Maybe<Scalars['String']>;
  /** ZIP or postal code. */
  addressZip?: Maybe<Scalars['String']>;
  /** If `address_zip` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. */
  addressZipCheck?: Maybe<Scalars['String']>;
  alipay?: Maybe<Alipay2>;
  /** A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount associated with the source. This is the amount for which the source will be chargeable once ready. Required for `single_use` sources. */
  amount?: Maybe<Scalars['Int']>;
  auBecsDebit?: Maybe<AuBecsDebit2>;
  availablePayoutMethods?: Maybe<Scalars['JSON']>;
  bancontact?: Maybe<Bancontact2>;
  /** Name of the bank associated with the routing number (e.g., `WELLS FARGO`). */
  bankName?: Maybe<Scalars['String']>;
  /** Card brand. Can be `American Express`, `Diners Club`, `Discover`, `JCB`, `MasterCard`, `UnionPay`, `Visa`, or `Unknown`. */
  brand?: Maybe<Scalars['String']>;
  card?: Maybe<Card6>;
  cardPresent?: Maybe<CardPresent2>;
  /** The client secret of the source. Used for client-side retrieval using a publishable key. */
  clientSecret?: Maybe<Scalars['String']>;
  codeVerification?: Maybe<CodeVerification>;
  country?: Maybe<Scalars['JSON']>;
  /** Time at which the object was created. Measured in seconds since the Unix epoch. */
  created?: Maybe<Scalars['Int']>;
  currency?: Maybe<Scalars['JSON']>;
  customer?: Maybe<Scalars['JSON']>;
  /** If a CVC was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. A result of unchecked indicates that CVC was provided but hasn't been checked yet. Checks are typically performed when attaching a card to a Customer object, or when creating a charge. For more details, see [Check if a card is valid without a charge](https://support.stripe.com/questions/check-if-a-card-is-valid-without-a-charge). */
  cvcCheck?: Maybe<Scalars['String']>;
  defaultForCurrency?: Maybe<Scalars['JSON']>;
  /** (For tokenized numbers only.) The last four digits of the device account number. */
  dynamicLast4?: Maybe<Scalars['String']>;
  eps?: Maybe<Eps2>;
  /** Two-digit number representing the card's expiration month. */
  expMonth?: Maybe<Scalars['Int']>;
  /** Four-digit number representing the card's expiration year. */
  expYear?: Maybe<Scalars['Int']>;
  fingerprint?: Maybe<Scalars['JSON']>;
  /** The authentication `flow` of the source. `flow` is one of `redirect`, `receiver`, `code_verification`, `none`. */
  flow?: Maybe<Scalars['String']>;
  /** Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`. */
  funding?: Maybe<Scalars['String']>;
  giropay?: Maybe<Giropay2>;
  /** Unique identifier for the object. */
  id?: Maybe<Scalars['String']>;
  ideal?: Maybe<Ideal2>;
  klarna?: Maybe<Klarna2>;
  last4?: Maybe<Scalars['JSON']>;
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode?: Maybe<Scalars['Boolean']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
  metadata?: Maybe<Scalars['JSON']>;
  multibanco?: Maybe<Multibanco2>;
  /** Cardholder name. */
  name?: Maybe<Scalars['String']>;
  object?: Maybe<Scalars['JSON']>;
  /** Information about the owner of the payment instrument that may be used or required by particular source types. */
  owner?: Maybe<Owner3>;
  p24?: Maybe<P242>;
  receiver?: Maybe<Receiver2>;
  /** The recipient that this card belongs to. This attribute will not be in the card object if the card belongs to a customer or account instead. */
  recipient?: Maybe<Scalars['JSON']>;
  redirect?: Maybe<Redirect>;
  /** The routing transit number for the bank account. */
  routingNumber?: Maybe<Scalars['String']>;
  sepaDebit?: Maybe<SepaDebit2>;
  sofort?: Maybe<Sofort2>;
  sourceOrder?: Maybe<SourceOrder>;
  /** Extra information about a source. This will appear on your customer's statement every time you charge the source. */
  statementDescriptor?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['JSON']>;
  threeDSecure?: Maybe<ThreeDSecure4>;
  /** If the card number is tokenized, this is the method that was used. Can be `android_pay` (includes Google Pay), `apple_pay`, `masterpass`, `visa_checkout`, or null. */
  tokenizationMethod?: Maybe<Scalars['String']>;
  /** The `type` of the source. The `type` is a payment method, one of `ach_credit_transfer`, `ach_debit`, `alipay`, `bancontact`, `card`, `card_present`, `eps`, `giropay`, `ideal`, `multibanco`, `klarna`, `p24`, `sepa_debit`, `sofort`, `three_d_secure`, or `wechat`. An additional hash is included on the source with a name matching this value. It contains additional information specific to the [payment method](https://stripe.com/docs/sources) used. */
  type?: Maybe<Type18>;
  /** Either `reusable` or `single_use`. Whether this source should be reusable or not. Some source types may or may not be reusable by construction, while others may leave the option at creation. If an incompatible value is passed, an error will be returned. */
  usage?: Maybe<Scalars['String']>;
  wechat?: Maybe<Wechat2>;
};

export type V1CustomerSource4Input = {
  /** The name of the person or business that owns the bank account. */
  accountHolderName?: Maybe<Scalars['String']>;
  /** The type of entity that holds the account. This can be either `individual` or `company`. */
  accountHolderType?: Maybe<AccountHolderType8>;
  /** City/District/Suburb/Town/Village. */
  addressCity?: Maybe<Scalars['String']>;
  /** Billing address country, if provided when creating card. */
  addressCountry?: Maybe<Scalars['String']>;
  /** Address line 1 (Street address/PO Box/Company name). */
  addressLine1?: Maybe<Scalars['String']>;
  /** Address line 2 (Apartment/Suite/Unit/Building). */
  addressLine2?: Maybe<Scalars['String']>;
  /** State/County/Province/Region. */
  addressState?: Maybe<Scalars['String']>;
  /** ZIP or postal code. */
  addressZip?: Maybe<Scalars['String']>;
  /** Two digit number representing the card’s expiration month. */
  expMonth?: Maybe<Scalars['String']>;
  /** Four digit number representing the card’s expiration year. */
  expYear?: Maybe<Scalars['String']>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
  /** Cardholder name. */
  name?: Maybe<Scalars['String']>;
  owner?: Maybe<Owner4Input>;
};

export type V1CustomerSourceVerifyInput = {
  /** Two positive integers, in *cents*, equal to the values of the microdeposits sent to the bank account. */
  amounts?: Maybe<Array<Maybe<Scalars['Int']>>>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type V1CustomerSubscriptions2Input = {
  /** A list of prices and quantities that will generate invoice items appended to the first invoice for this subscription. You may pass up to 20 items. */
  addInvoiceItems?: Maybe<Array<Maybe<AddInvoiceItemsListItemInput>>>;
  /** A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account. The request must be made by a platform account on a connected account in order to set an application fee percentage. For more information, see the application fees [documentation](https://stripe.com/docs/connect/subscriptions#collecting-fees-on-subscriptions). */
  applicationFeePercent?: Maybe<Scalars['Float']>;
  /** Automatic tax settings for this subscription. */
  automaticTax?: Maybe<AutomaticTaxConfigInput>;
  /** For new subscriptions, a past timestamp to backdate the subscription's start date to. If set, the first invoice will contain a proration for the timespan between the start date and the current time. Can be combined with trials and the billing cycle anchor. */
  backdateStartDate?: Maybe<Scalars['Int']>;
  /** A future timestamp to anchor the subscription's [billing cycle](https://stripe.com/docs/subscriptions/billing-cycle). This is used to determine the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices. */
  billingCycleAnchor?: Maybe<Scalars['Int']>;
  /** Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period. Pass an empty string to remove previously-defined thresholds. */
  billingThresholds?: Maybe<Scalars['JSON']>;
  /** A timestamp at which the subscription should cancel. If set to a date before the current period ends, this will cause a proration if prorations have been enabled using `proration_behavior`. If set during a future period, this will always cause a proration for that period. */
  cancelAt?: Maybe<Scalars['Int']>;
  /** Boolean indicating whether this subscription should cancel at the end of the current period. */
  cancelAtPeriodEnd?: Maybe<Scalars['Boolean']>;
  /** Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions. Defaults to `charge_automatically`. */
  collectionMethod?: Maybe<CollectionMethod2>;
  /** The ID of the coupon to apply to this subscription. A coupon applied to a subscription will only affect invoices created for that particular subscription. */
  coupon?: Maybe<Scalars['String']>;
  /** Number of days a customer has to pay invoices generated by this subscription. Valid only for subscriptions where `collection_method` is set to `send_invoice`. */
  daysUntilDue?: Maybe<Scalars['Int']>;
  /** ID of the default payment method for the subscription. It must belong to the customer associated with the subscription. This takes precedence over `default_source`. If neither are set, invoices will use the customer's [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source). */
  defaultPaymentMethod?: Maybe<Scalars['String']>;
  /** ID of the default payment source for the subscription. It must belong to the customer associated with the subscription and be in a chargeable state. If `default_payment_method` is also set, `default_payment_method` will take precedence. If neither are set, invoices will use the customer's [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source). */
  defaultSource?: Maybe<Scalars['String']>;
  /** The tax rates that will apply to any subscription item that does not have `tax_rates` set. Invoices created will have their `default_tax_rates` populated from the subscription. */
  defaultTaxRates?: Maybe<Scalars['JSON']>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** A list of up to 20 subscription items, each with an attached price. */
  items?: Maybe<Array<Maybe<Items3ListItemInput>>>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
  /** Indicates if a customer is on or off-session while an invoice payment is attempted. */
  offSession?: Maybe<Scalars['Boolean']>;
  /**
   * Use `allow_incomplete` to create subscriptions with `status=incomplete` if the first invoice cannot be paid. Creating subscriptions with this status allows you to manage scenarios where additional user actions are needed to pay a subscription's invoice. For example, SCA regulation may require 3DS authentication to complete payment. See the [SCA Migration Guide](https://stripe.com/docs/billing/migration/strong-customer-authentication) for Billing to learn more. This is the default behavior.
   *
   * Use `default_incomplete` to create Subscriptions with `status=incomplete` when the first invoice requires payment, otherwise start as active. Subscriptions transition to `status=active` when successfully confirming the payment intent on the first invoice. This allows simpler management of scenarios where additional user actions are needed to pay a subscription’s invoice. Such as failed payments, [SCA regulation](https://stripe.com/docs/billing/migration/strong-customer-authentication), or collecting a mandate for a bank debit payment method. If the payment intent is not confirmed within 23 hours subscriptions transition to `status=incomplete_expired`, which is a terminal state.
   *
   * Use `error_if_incomplete` if you want Stripe to return an HTTP 402 status code if a subscription's first invoice cannot be paid. For example, if a payment method requires 3DS authentication due to SCA regulation and further user action is needed, this parameter does not create a subscription and returns an error instead. This was the default behavior for API versions prior to 2019-03-14. See the [changelog](https://stripe.com/docs/upgrades#2019-03-14) to learn more.
   *
   * `pending_if_incomplete` is only used with updates and cannot be passed when creating a subscription.
   */
  paymentBehavior?: Maybe<PaymentBehavior>;
  /** Payment settings to pass to invoices created by the subscription. */
  paymentSettings?: Maybe<PaymentSettings2Input>;
  /** Specifies an interval for how often to bill for any pending invoice items. It is analogous to calling [Create an invoice](https://stripe.com/docs/api#create_invoice) for the given subscription at the specified interval. */
  pendingInvoiceItemInterval?: Maybe<Scalars['JSON']>;
  /** The API ID of a promotion code to apply to this subscription. A promotion code applied to a subscription will only affect invoices created for that particular subscription. */
  promotionCode?: Maybe<Scalars['String']>;
  /**
   * Determines how to handle [prorations](https://stripe.com/docs/subscriptions/billing-cycle#prorations) resulting from the `billing_cycle_anchor`. Valid values are `create_prorations` or `none`.
   *
   * Passing `create_prorations` will cause proration invoice items to be created when applicable. Prorations can be disabled by passing `none`. If no value is passed, the default is `create_prorations`.
   */
  prorationBehavior?: Maybe<ProrationBehavior4>;
  /** If specified, the funds from the subscription's invoices will be transferred to the destination and the ID of the resulting transfers will be found on the resulting charges. */
  transferData?: Maybe<TransferData5Input>;
  /** Unix timestamp representing the end of the trial period the customer will get before being charged for the first time. This will always overwrite any trials that might apply via a subscribed plan. If set, trial_end will override the default trial period of the plan the customer is being subscribed to. The special value `now` can be provided to end the customer's trial immediately. Can be at most two years from `billing_cycle_anchor`. */
  trialEnd?: Maybe<Scalars['JSON']>;
  /** Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `trial_end` is not allowed. */
  trialFromPlan?: Maybe<Scalars['Boolean']>;
  /** Integer representing the number of trial period days before the customer is charged for the first time. This will always overwrite any trials that might apply via a subscribed plan. */
  trialPeriodDays?: Maybe<Scalars['Int']>;
};

export type AddInvoiceItemsListItemInput = {
  price?: Maybe<Scalars['String']>;
  priceData?: Maybe<OneTimePriceDataInput>;
  quantity?: Maybe<Scalars['Int']>;
  taxRates?: Maybe<Scalars['JSON']>;
};

/** Automatic tax settings for this subscription. */
export type AutomaticTaxConfigInput = {
  enabled: Scalars['Boolean'];
};

export enum CollectionMethod2 {
  CHARGE_AUTOMATICALLY = 'charge_automatically',
  SEND_INVOICE = 'send_invoice'
}

export type Items3ListItemInput = {
  billingThresholds?: Maybe<Scalars['JSON']>;
  metadata?: Maybe<Scalars['JSON']>;
  price?: Maybe<Scalars['String']>;
  priceData?: Maybe<RecurringPriceDataInput>;
  quantity?: Maybe<Scalars['Int']>;
  taxRates?: Maybe<Scalars['JSON']>;
};

export enum PaymentBehavior {
  ALLOW_INCOMPLETE = 'allow_incomplete',
  DEFAULT_INCOMPLETE = 'default_incomplete',
  ERROR_IF_INCOMPLETE = 'error_if_incomplete',
  PENDING_IF_INCOMPLETE = 'pending_if_incomplete'
}

/** Payment settings to pass to invoices created by the subscription. */
export type PaymentSettings2Input = {
  paymentMethodOptions?: Maybe<PaymentMethodOptions3Input>;
  paymentMethodTypes?: Maybe<Scalars['JSON']>;
};

export type PaymentMethodOptions3Input = {
  bancontact?: Maybe<Scalars['JSON']>;
  card?: Maybe<Scalars['JSON']>;
};

export enum ProrationBehavior4 {
  ALWAYS_INVOICE = 'always_invoice',
  CREATE_PRORATIONS = 'create_prorations',
  NONE = 'none'
}

/** If specified, the funds from the subscription's invoices will be transferred to the destination and the ID of the resulting transfers will be found on the resulting charges. */
export type TransferData5Input = {
  amountPercent?: Maybe<Scalars['Float']>;
  destination: Scalars['String'];
};

export type V1CustomerSubscription3Input = {
  /** A list of prices and quantities that will generate invoice items appended to the first invoice for this subscription. You may pass up to 20 items. */
  addInvoiceItems?: Maybe<Array<Maybe<AddInvoiceItemsListItemInput>>>;
  /** A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account. The request must be made by a platform account on a connected account in order to set an application fee percentage. For more information, see the application fees [documentation](https://stripe.com/docs/connect/subscriptions#collecting-fees-on-subscriptions). */
  applicationFeePercent?: Maybe<Scalars['Float']>;
  /** Automatic tax settings for this subscription. */
  automaticTax?: Maybe<AutomaticTaxConfigInput>;
  /** Either `now` or `unchanged`. Setting the value to `now` resets the subscription's billing cycle anchor to the current time. For more information, see the billing cycle [documentation](https://stripe.com/docs/billing/subscriptions/billing-cycle). */
  billingCycleAnchor?: Maybe<BillingCycleAnchor4>;
  /** Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period. Pass an empty string to remove previously-defined thresholds. */
  billingThresholds?: Maybe<Scalars['JSON']>;
  /** A timestamp at which the subscription should cancel. If set to a date before the current period ends, this will cause a proration if prorations have been enabled using `proration_behavior`. If set during a future period, this will always cause a proration for that period. */
  cancelAt?: Maybe<Scalars['JSON']>;
  /** Boolean indicating whether this subscription should cancel at the end of the current period. */
  cancelAtPeriodEnd?: Maybe<Scalars['Boolean']>;
  /** Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions. Defaults to `charge_automatically`. */
  collectionMethod?: Maybe<CollectionMethod2>;
  /** The ID of the coupon to apply to this subscription. A coupon applied to a subscription will only affect invoices created for that particular subscription. */
  coupon?: Maybe<Scalars['String']>;
  /** Number of days a customer has to pay invoices generated by this subscription. Valid only for subscriptions where `collection_method` is set to `send_invoice`. */
  daysUntilDue?: Maybe<Scalars['Int']>;
  /** ID of the default payment method for the subscription. It must belong to the customer associated with the subscription. This takes precedence over `default_source`. If neither are set, invoices will use the customer's [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source). */
  defaultPaymentMethod?: Maybe<Scalars['String']>;
  /** ID of the default payment source for the subscription. It must belong to the customer associated with the subscription and be in a chargeable state. If `default_payment_method` is also set, `default_payment_method` will take precedence. If neither are set, invoices will use the customer's [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source). */
  defaultSource?: Maybe<Scalars['String']>;
  /** The tax rates that will apply to any subscription item that does not have `tax_rates` set. Invoices created will have their `default_tax_rates` populated from the subscription. Pass an empty string to remove previously-defined tax rates. */
  defaultTaxRates?: Maybe<Scalars['JSON']>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** A list of up to 20 subscription items, each with an attached price. */
  items?: Maybe<Array<Maybe<Items4ListItemInput>>>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
  /** Indicates if a customer is on or off-session while an invoice payment is attempted. */
  offSession?: Maybe<Scalars['Boolean']>;
  /** If specified, payment collection for this subscription will be paused. */
  pauseCollection?: Maybe<Scalars['JSON']>;
  /**
   * Use `allow_incomplete` to transition the subscription to `status=past_due` if a payment is required but cannot be paid. This allows you to manage scenarios where additional user actions are needed to pay a subscription's invoice. For example, SCA regulation may require 3DS authentication to complete payment. See the [SCA Migration Guide](https://stripe.com/docs/billing/migration/strong-customer-authentication) for Billing to learn more. This is the default behavior.
   *
   * Use `default_incomplete` to transition the subscription to `status=past_due` when payment is required and await explicit confirmation of the invoice's payment intent. This allows simpler management of scenarios where additional user actions are needed to pay a subscription’s invoice. Such as failed payments, [SCA regulation](https://stripe.com/docs/billing/migration/strong-customer-authentication), or collecting a mandate for a bank debit payment method.
   *
   * Use `pending_if_incomplete` to update the subscription using [pending updates](https://stripe.com/docs/billing/subscriptions/pending-updates). When you use `pending_if_incomplete` you can only pass the parameters [supported by pending updates](https://stripe.com/docs/billing/pending-updates-reference#supported-attributes).
   *
   * Use `error_if_incomplete` if you want Stripe to return an HTTP 402 status code if a subscription's invoice cannot be paid. For example, if a payment method requires 3DS authentication due to SCA regulation and further user action is needed, this parameter does not update the subscription and returns an error instead. This was the default behavior for API versions prior to 2019-03-14. See the [changelog](https://stripe.com/docs/upgrades#2019-03-14) to learn more.
   */
  paymentBehavior?: Maybe<PaymentBehavior2>;
  /** Payment settings to pass to invoices created by the subscription. */
  paymentSettings?: Maybe<PaymentSettings2Input>;
  /** Specifies an interval for how often to bill for any pending invoice items. It is analogous to calling [Create an invoice](https://stripe.com/docs/api#create_invoice) for the given subscription at the specified interval. */
  pendingInvoiceItemInterval?: Maybe<Scalars['JSON']>;
  /** The promotion code to apply to this subscription. A promotion code applied to a subscription will only affect invoices created for that particular subscription. */
  promotionCode?: Maybe<Scalars['String']>;
  /**
   * Determines how to handle [prorations](https://stripe.com/docs/subscriptions/billing-cycle#prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item's `quantity` changes. Valid values are `create_prorations`, `none`, or `always_invoice`.
   *
   * Passing `create_prorations` will cause proration invoice items to be created when applicable. These proration items will only be invoiced immediately under [certain conditions](https://stripe.com/docs/subscriptions/upgrading-downgrading#immediate-payment). In order to always invoice immediately for prorations, pass `always_invoice`.
   *
   * Prorations can be disabled by passing `none`.
   */
  prorationBehavior?: Maybe<ProrationBehavior5>;
  /** If set, the proration will be calculated as though the subscription was updated at the given time. This can be used to apply exactly the same proration that was previewed with [upcoming invoice](https://stripe.com/docs/api#retrieve_customer_invoice) endpoint. It can also be used to implement custom proration logic, such as prorating by day instead of by second, by providing the time that you wish to use for proration calculations. */
  prorationDate?: Maybe<Scalars['Int']>;
  /** If specified, the funds from the subscription's invoices will be transferred to the destination and the ID of the resulting transfers will be found on the resulting charges. This will be unset if you POST an empty value. */
  transferData?: Maybe<Scalars['JSON']>;
  /** Unix timestamp representing the end of the trial period the customer will get before being charged for the first time. This will always overwrite any trials that might apply via a subscribed plan. If set, trial_end will override the default trial period of the plan the customer is being subscribed to. The special value `now` can be provided to end the customer's trial immediately. Can be at most two years from `billing_cycle_anchor`. */
  trialEnd?: Maybe<Scalars['JSON']>;
  /** Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `trial_end` is not allowed. */
  trialFromPlan?: Maybe<Scalars['Boolean']>;
};

export enum BillingCycleAnchor4 {
  NOW = 'now',
  UNCHANGED = 'unchanged'
}

export type Items4ListItemInput = {
  billingThresholds?: Maybe<Scalars['JSON']>;
  clearUsage?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['String']>;
  metadata?: Maybe<Scalars['JSON']>;
  price?: Maybe<Scalars['String']>;
  priceData?: Maybe<RecurringPriceDataInput>;
  quantity?: Maybe<Scalars['Int']>;
  taxRates?: Maybe<Scalars['JSON']>;
};

export enum PaymentBehavior2 {
  ALLOW_INCOMPLETE = 'allow_incomplete',
  DEFAULT_INCOMPLETE = 'default_incomplete',
  ERROR_IF_INCOMPLETE = 'error_if_incomplete',
  PENDING_IF_INCOMPLETE = 'pending_if_incomplete'
}

export type V1CustomerTaxIds2Input = {
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Type of the tax ID, one of `ae_trn`, `au_abn`, `br_cnpj`, `br_cpf`, `ca_bn`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `ca_qst`, `ch_vat`, `cl_tin`, `es_cif`, `eu_vat`, `gb_vat`, `hk_br`, `id_npwp`, `il_vat`, `in_gst`, `jp_cn`, `jp_rn`, `kr_brn`, `li_uid`, `mx_rfc`, `my_frp`, `my_itn`, `my_sst`, `no_vat`, `nz_gst`, `ru_inn`, `ru_kpp`, `sa_vat`, `sg_gst`, `sg_uen`, `th_vat`, `tw_vat`, `us_ein`, or `za_vat` */
  type: Type22;
  /** Value of the tax ID. */
  value: Scalars['String'];
};

export enum Type22 {
  AE_TRN = 'ae_trn',
  AU_ABN = 'au_abn',
  BR_CNPJ = 'br_cnpj',
  BR_CPF = 'br_cpf',
  CA_BN = 'ca_bn',
  CA_GST_HST = 'ca_gst_hst',
  CA_PST_BC = 'ca_pst_bc',
  CA_PST_MB = 'ca_pst_mb',
  CA_PST_SK = 'ca_pst_sk',
  CA_QST = 'ca_qst',
  CH_VAT = 'ch_vat',
  CL_TIN = 'cl_tin',
  ES_CIF = 'es_cif',
  EU_VAT = 'eu_vat',
  GB_VAT = 'gb_vat',
  HK_BR = 'hk_br',
  ID_NPWP = 'id_npwp',
  IL_VAT = 'il_vat',
  IN_GST = 'in_gst',
  JP_CN = 'jp_cn',
  JP_RN = 'jp_rn',
  KR_BRN = 'kr_brn',
  LI_UID = 'li_uid',
  MX_RFC = 'mx_rfc',
  MY_FRP = 'my_frp',
  MY_ITN = 'my_itn',
  MY_SST = 'my_sst',
  NO_VAT = 'no_vat',
  NZ_GST = 'nz_gst',
  RU_INN = 'ru_inn',
  RU_KPP = 'ru_kpp',
  SA_VAT = 'sa_vat',
  SG_GST = 'sg_gst',
  SG_UEN = 'sg_uen',
  TH_VAT = 'th_vat',
  TW_VAT = 'tw_vat',
  US_EIN = 'us_ein',
  ZA_VAT = 'za_vat'
}

export type V1Dispute2Input = {
  /** Evidence to upload, to respond to a dispute. Updating any field in the hash will submit all fields in the hash for review. The combined character count of all fields is limited to 150,000. */
  evidence?: Maybe<EvidenceInput>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
  /** Whether to immediately submit evidence to the bank. If `false`, evidence is staged on the dispute. Staged evidence is visible in the API and Dashboard, and can be submitted to the bank by making another request with this attribute set to `true` (the default). */
  submit?: Maybe<Scalars['Boolean']>;
};

export type V1DisputeCloseInput = {
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type V1EphemeralKeysInput = {
  /** The ID of the Customer you'd like to modify using the resulting ephemeral key. */
  customer?: Maybe<Scalars['String']>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** The ID of the Issuing Card you'd like to access using the resulting ephemeral key. */
  issuingCard?: Maybe<Scalars['String']>;
};

export type V1FileLinks3Input = {
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** A future timestamp after which the link will no longer be usable. */
  expiresAt?: Maybe<Scalars['Int']>;
  /** The ID of the file. The file's `purpose` must be one of the following: `business_icon`, `business_logo`, `customer_signature`, `dispute_evidence`, `finance_report_run`, `identity_document_downloadable`, `pci_document`, `selfie`, `sigma_scheduled_query`, or `tax_document_user_upload`. */
  file: Scalars['String'];
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
};

export type V1FileLinks4Input = {
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** A future timestamp after which the link will no longer be usable, or `now` to expire the link immediately. */
  expiresAt?: Maybe<Scalars['JSON']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
};

export type V1IdentityVerificationSessions3Input = {
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
  /** A set of options for the session’s verification checks. */
  options?: Maybe<OptionsInput>;
  /** The URL that the user will be redirected to upon completing the verification flow. */
  returnUrl?: Maybe<Scalars['String']>;
  /** The type of [verification check](https://stripe.com/docs/identity/verification-checks) to be performed. */
  type: Type27;
};

/** A set of options for the session’s verification checks. */
export type OptionsInput = {
  document?: Maybe<Scalars['JSON']>;
};

export type V1IdentityVerificationSessions4Input = {
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
  /** A set of options for the session’s verification checks. */
  options?: Maybe<OptionsInput>;
  /** The type of [verification check](https://stripe.com/docs/identity/verification-checks) to be performed. */
  type?: Maybe<Type27>;
};

export type V1IdentityVerificationSessionsCancelInput = {
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type V1IdentityVerificationSessionsRedactInput = {
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type V1Invoiceitems3Input = {
  /** The integer amount in %s of the charge to be applied to the upcoming invoice. Passing in a negative `amount` will reduce the `amount_due` on the invoice. */
  amount?: Maybe<Scalars['Int']>;
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency?: Maybe<Scalars['String']>;
  /** The ID of the customer who will be billed when this invoice item is billed. */
  customer: Scalars['String'];
  /** An arbitrary string which you can attach to the invoice item. The description is displayed in the invoice for easy tracking. */
  description?: Maybe<Scalars['String']>;
  /** Controls whether discounts apply to this invoice item. Defaults to false for prorations or negative invoice items, and true for all other invoice items. */
  discountable?: Maybe<Scalars['Boolean']>;
  /** The coupons to redeem into discounts for the invoice item or invoice line item. */
  discounts?: Maybe<Scalars['JSON']>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** The ID of an existing invoice to add this invoice item to. When left blank, the invoice item will be added to the next upcoming scheduled invoice. This is useful when adding invoice items in response to an invoice.created webhook. You can only add invoice items to draft invoices and there is a maximum of 250 items per invoice. */
  invoice?: Maybe<Scalars['String']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
  /** The period associated with this invoice item. */
  period?: Maybe<PeriodInput>;
  /** The ID of the price object. */
  price?: Maybe<Scalars['String']>;
  /** Data used to generate a new [Price](https://stripe.com/docs/api/prices) object inline. */
  priceData?: Maybe<PriceData2Input>;
  /** Non-negative integer. The quantity of units for the invoice item. */
  quantity?: Maybe<Scalars['Int']>;
  /** The ID of a subscription to add this invoice item to. When left blank, the invoice item will be be added to the next upcoming scheduled invoice. When set, scheduled invoices for subscriptions other than the specified subscription will ignore the invoice item. Use this when you want to express that an invoice item has been accrued within the context of a particular subscription. */
  subscription?: Maybe<Scalars['String']>;
  /** The tax rates which apply to the invoice item. When set, the `default_tax_rates` on the invoice do not apply to this invoice item. */
  taxRates?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** The integer unit amount in %s of the charge to be applied to the upcoming invoice. This `unit_amount` will be multiplied by the quantity to get the full amount. Passing in a negative `unit_amount` will reduce the `amount_due` on the invoice. */
  unitAmount?: Maybe<Scalars['Int']>;
  /** Same as `unit_amount`, but accepts a decimal value in %s with at most 12 decimal places. Only one of `unit_amount` and `unit_amount_decimal` can be set. */
  unitAmountDecimal?: Maybe<Scalars['String']>;
};

/** The period associated with this invoice item. */
export type PeriodInput = {
  end: Scalars['Int'];
  start: Scalars['Int'];
};

/** Data used to generate a new [Price](https://stripe.com/docs/api/prices) object inline. */
export type PriceData2Input = {
  currency: Scalars['String'];
  product: Scalars['String'];
  taxBehavior?: Maybe<TaxBehavior2>;
  unitAmount?: Maybe<Scalars['Int']>;
  unitAmountDecimal?: Maybe<Scalars['String']>;
};

export type V1Invoiceitem2Input = {
  /** The integer amount in %s of the charge to be applied to the upcoming invoice. If you want to apply a credit to the customer's account, pass a negative amount. */
  amount?: Maybe<Scalars['Int']>;
  /** An arbitrary string which you can attach to the invoice item. The description is displayed in the invoice for easy tracking. */
  description?: Maybe<Scalars['String']>;
  /** Controls whether discounts apply to this invoice item. Defaults to false for prorations or negative invoice items, and true for all other invoice items. Cannot be set to true for prorations. */
  discountable?: Maybe<Scalars['Boolean']>;
  /** The coupons & existing discounts which apply to the invoice item or invoice line item. Item discounts are applied before invoice discounts. Pass an empty string to remove previously-defined discounts. */
  discounts?: Maybe<Scalars['JSON']>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
  /** The period associated with this invoice item. */
  period?: Maybe<PeriodInput>;
  /** The ID of the price object. */
  price?: Maybe<Scalars['String']>;
  /** Data used to generate a new [Price](https://stripe.com/docs/api/prices) object inline. */
  priceData?: Maybe<PriceData2Input>;
  /** Non-negative integer. The quantity of units for the invoice item. */
  quantity?: Maybe<Scalars['Int']>;
  /** The tax rates which apply to the invoice item. When set, the `default_tax_rates` on the invoice do not apply to this invoice item. Pass an empty string to remove previously-defined tax rates. */
  taxRates?: Maybe<Scalars['JSON']>;
  /** The integer unit amount in %s of the charge to be applied to the upcoming invoice. This unit_amount will be multiplied by the quantity to get the full amount. If you want to apply a credit to the customer's account, pass a negative unit_amount. */
  unitAmount?: Maybe<Scalars['Int']>;
  /** Same as `unit_amount`, but accepts a decimal value in %s with at most 12 decimal places. Only one of `unit_amount` and `unit_amount_decimal` can be set. */
  unitAmountDecimal?: Maybe<Scalars['String']>;
};

export type V1Invoices2Input = {
  /** The account tax IDs associated with the invoice. Only editable when the invoice is a draft. */
  accountTaxIds?: Maybe<Scalars['JSON']>;
  /** A fee in %s that will be applied to the invoice and transferred to the application owner's Stripe account. The request must be made with an OAuth key or the Stripe-Account header in order to take an application fee. For more information, see the application fees [documentation](https://stripe.com/docs/billing/invoices/connect#collecting-fees). */
  applicationFeeAmount?: Maybe<Scalars['Int']>;
  /** Controls whether Stripe will perform [automatic collection](https://stripe.com/docs/billing/invoices/workflow/#auto_advance) of the invoice. When `false`, the invoice's state will not automatically advance without an explicit action. */
  autoAdvance?: Maybe<Scalars['Boolean']>;
  /** Settings for automatic tax lookup for this invoice. */
  automaticTax?: Maybe<AutomaticTaxParamInput>;
  /** Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this invoice using the default source attached to the customer. When sending an invoice, Stripe will email this invoice to the customer with payment instructions. Defaults to `charge_automatically`. */
  collectionMethod?: Maybe<CollectionMethod4>;
  /** A list of up to 4 custom fields to be displayed on the invoice. */
  customFields?: Maybe<Scalars['JSON']>;
  /** The ID of the customer who will be billed. */
  customer: Scalars['String'];
  /** The number of days from when the invoice is created until it is due. Valid only for invoices where `collection_method=send_invoice`. */
  daysUntilDue?: Maybe<Scalars['Int']>;
  /** ID of the default payment method for the invoice. It must belong to the customer associated with the invoice. If not set, defaults to the subscription's default payment method, if any, or to the default payment method in the customer's invoice settings. */
  defaultPaymentMethod?: Maybe<Scalars['String']>;
  /** ID of the default payment source for the invoice. It must belong to the customer associated with the invoice and be in a chargeable state. If not set, defaults to the subscription's default source, if any, or to the customer's default source. */
  defaultSource?: Maybe<Scalars['String']>;
  /** The tax rates that will apply to any line item that does not have `tax_rates` set. */
  defaultTaxRates?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** An arbitrary string attached to the object. Often useful for displaying to users. Referenced as 'memo' in the Dashboard. */
  description?: Maybe<Scalars['String']>;
  /** The coupons to redeem into discounts for the invoice. If not specified, inherits the discount from the invoice's customer. Pass an empty string to avoid inheriting any discounts. */
  discounts?: Maybe<Scalars['JSON']>;
  /** The date on which payment for this invoice is due. Valid only for invoices where `collection_method=send_invoice`. */
  dueDate?: Maybe<Scalars['Int']>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Footer to be displayed on the invoice. */
  footer?: Maybe<Scalars['String']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
  /** The account (if any) for which the funds of the invoice payment are intended. If set, the invoice will be presented with the branding and support information of the specified account. See the [Invoices with Connect](https://stripe.com/docs/billing/invoices/connect) documentation for details. */
  onBehalfOf?: Maybe<Scalars['String']>;
  /** Configuration settings for the PaymentIntent that is generated when the invoice is finalized. */
  paymentSettings?: Maybe<PaymentSettings3Input>;
  /** Extra information about a charge for the customer's credit card statement. It must contain at least one letter. If not specified and this invoice is part of a subscription, the default `statement_descriptor` will be set to the first subscription item's product's `statement_descriptor`. */
  statementDescriptor?: Maybe<Scalars['String']>;
  /** The ID of the subscription to invoice, if any. If not set, the created invoice will include all pending invoice items for the customer. If set, the created invoice will only include pending invoice items for that subscription and pending invoice items not associated with any subscription. The subscription's billing cycle and regular subscription events won't be affected. */
  subscription?: Maybe<Scalars['String']>;
  /** If specified, the funds from the invoice will be transferred to the destination and the ID of the resulting transfer will be found on the invoice's charge. */
  transferData?: Maybe<TransferData9Input>;
};

/** Settings for automatic tax lookup for this invoice. */
export type AutomaticTaxParamInput = {
  enabled: Scalars['Boolean'];
};

export enum CollectionMethod4 {
  CHARGE_AUTOMATICALLY = 'charge_automatically',
  SEND_INVOICE = 'send_invoice'
}

/** Configuration settings for the PaymentIntent that is generated when the invoice is finalized. */
export type PaymentSettings3Input = {
  paymentMethodOptions?: Maybe<PaymentMethodOptions3Input>;
  paymentMethodTypes?: Maybe<Scalars['JSON']>;
};

/** If specified, the funds from the invoice will be transferred to the destination and the ID of the resulting transfer will be found on the invoice's charge. */
export type TransferData9Input = {
  amount?: Maybe<Scalars['Int']>;
  destination: Scalars['String'];
};

export type V1Invoice2Input = {
  /** The account tax IDs associated with the invoice. Only editable when the invoice is a draft. */
  accountTaxIds?: Maybe<Scalars['JSON']>;
  /** A fee in %s that will be applied to the invoice and transferred to the application owner's Stripe account. The request must be made with an OAuth key or the Stripe-Account header in order to take an application fee. For more information, see the application fees [documentation](https://stripe.com/docs/billing/invoices/connect#collecting-fees). */
  applicationFeeAmount?: Maybe<Scalars['Int']>;
  /** Controls whether Stripe will perform [automatic collection](https://stripe.com/docs/billing/invoices/workflow/#auto_advance) of the invoice. */
  autoAdvance?: Maybe<Scalars['Boolean']>;
  /** Settings for automatic tax lookup for this invoice. */
  automaticTax?: Maybe<AutomaticTaxParamInput>;
  /** Either `charge_automatically` or `send_invoice`. This field can be updated only on `draft` invoices. */
  collectionMethod?: Maybe<CollectionMethod5>;
  /** A list of up to 4 custom fields to be displayed on the invoice. If a value for `custom_fields` is specified, the list specified will replace the existing custom field list on this invoice. Pass an empty string to remove previously-defined fields. */
  customFields?: Maybe<Scalars['JSON']>;
  /** The number of days from which the invoice is created until it is due. Only valid for invoices where `collection_method=send_invoice`. This field can only be updated on `draft` invoices. */
  daysUntilDue?: Maybe<Scalars['Int']>;
  /** ID of the default payment method for the invoice. It must belong to the customer associated with the invoice. If not set, defaults to the subscription's default payment method, if any, or to the default payment method in the customer's invoice settings. */
  defaultPaymentMethod?: Maybe<Scalars['String']>;
  /** ID of the default payment source for the invoice. It must belong to the customer associated with the invoice and be in a chargeable state. If not set, defaults to the subscription's default source, if any, or to the customer's default source. */
  defaultSource?: Maybe<Scalars['String']>;
  /** The tax rates that will apply to any line item that does not have `tax_rates` set. Pass an empty string to remove previously-defined tax rates. */
  defaultTaxRates?: Maybe<Scalars['JSON']>;
  /** An arbitrary string attached to the object. Often useful for displaying to users. Referenced as 'memo' in the Dashboard. */
  description?: Maybe<Scalars['String']>;
  /** The discounts that will apply to the invoice. Pass an empty string to remove previously-defined discounts. */
  discounts?: Maybe<Scalars['JSON']>;
  /** The date on which payment for this invoice is due. Only valid for invoices where `collection_method=send_invoice`. This field can only be updated on `draft` invoices. */
  dueDate?: Maybe<Scalars['Int']>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Footer to be displayed on the invoice. */
  footer?: Maybe<Scalars['String']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
  /** The account (if any) for which the funds of the invoice payment are intended. If set, the invoice will be presented with the branding and support information of the specified account. See the [Invoices with Connect](https://stripe.com/docs/billing/invoices/connect) documentation for details. */
  onBehalfOf?: Maybe<Scalars['JSON']>;
  /** Configuration settings for the PaymentIntent that is generated when the invoice is finalized. */
  paymentSettings?: Maybe<PaymentSettings3Input>;
  /** Extra information about a charge for the customer's credit card statement. It must contain at least one letter. If not specified and this invoice is part of a subscription, the default `statement_descriptor` will be set to the first subscription item's product's `statement_descriptor`. */
  statementDescriptor?: Maybe<Scalars['String']>;
  /** If specified, the funds from the invoice will be transferred to the destination and the ID of the resulting transfer will be found on the invoice's charge. This will be unset if you POST an empty value. */
  transferData?: Maybe<Scalars['JSON']>;
};

export enum CollectionMethod5 {
  CHARGE_AUTOMATICALLY = 'charge_automatically',
  SEND_INVOICE = 'send_invoice'
}

export type V1InvoiceFinalizeInput = {
  /** Controls whether Stripe will perform [automatic collection](https://stripe.com/docs/billing/invoices/overview#auto-advance) of the invoice. When `false`, the invoice's state will not automatically advance without an explicit action. */
  autoAdvance?: Maybe<Scalars['Boolean']>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type V1InvoiceMarkUncollectibleInput = {
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type V1InvoicePayInput = {
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /**
   * In cases where the source used to pay the invoice has insufficient funds, passing `forgive=true` controls whether a charge should be attempted for the full amount available on the source, up to the amount to fully pay the invoice. This effectively forgives the difference between the amount available on the source and the amount due.
   *
   * Passing `forgive=false` will fail the charge if the source hasn't been pre-funded with the right amount. An example for this case is with ACH Credit Transfers and wires: if the amount wired is less than the amount due by a small amount, you might want to forgive the difference. Defaults to `false`.
   */
  forgive?: Maybe<Scalars['Boolean']>;
  /** Indicates if a customer is on or off-session while an invoice payment is attempted. Defaults to `true` (off-session). */
  offSession?: Maybe<Scalars['Boolean']>;
  /** Boolean representing whether an invoice is paid outside of Stripe. This will result in no charge being made. Defaults to `false`. */
  paidOutOfBand?: Maybe<Scalars['Boolean']>;
  /** A PaymentMethod to be charged. The PaymentMethod must be the ID of a PaymentMethod belonging to the customer associated with the invoice being paid. */
  paymentMethod?: Maybe<Scalars['String']>;
  /** A payment source to be charged. The source must be the ID of a source belonging to the customer associated with the invoice being paid. */
  source?: Maybe<Scalars['String']>;
};

export type V1InvoiceSendInput = {
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type V1InvoiceVoidInput = {
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type V1IssuingAuthorization2Input = {
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
};

export type V1IssuingAuthorizationApproveInput = {
  /** If the authorization's `pending_request.is_amount_controllable` property is `true`, you may provide this value to control how much to hold for the authorization. Must be positive (use [`decline`](https://stripe.com/docs/api/issuing/authorizations/decline) to decline an authorization request). */
  amount?: Maybe<Scalars['Int']>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
};

export type V1IssuingAuthorizationDeclineInput = {
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
};

export type V1IssuingCardholders3Input = {
  /** The cardholder's billing address. */
  billing: BillingInput;
  /** Additional information about a `company` cardholder. */
  company?: Maybe<CompanyParamInput>;
  /** The cardholder's email address. */
  email?: Maybe<Scalars['String']>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Additional information about an `individual` cardholder. */
  individual?: Maybe<IndividualParamInput>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
  /** The cardholder's name. This will be printed on cards issued to them. */
  name: Scalars['String'];
  /** The cardholder's phone number. This will be transformed to [E.164](https://en.wikipedia.org/wiki/E.164) if it is not provided in that format already. */
  phoneNumber?: Maybe<Scalars['String']>;
  /** Rules that control spending across this cardholder's cards. Refer to our [documentation](https://stripe.com/docs/issuing/controls/spending-controls) for more details. */
  spendingControls?: Maybe<AuthorizationControlsParamV2Input>;
  /** Specifies whether to permit authorizations on this cardholder's cards. Defaults to `active`. */
  status?: Maybe<Status30>;
  /** One of `individual` or `company`. */
  type: Type34;
};

/** The cardholder's billing address. */
export type BillingInput = {
  address: RequiredAddressInput;
};

export type RequiredAddressInput = {
  city: Scalars['String'];
  country: Scalars['String'];
  line1: Scalars['String'];
  line2?: Maybe<Scalars['String']>;
  postalCode: Scalars['String'];
  state?: Maybe<Scalars['String']>;
};

/** Additional information about a `company` cardholder. */
export type CompanyParamInput = {
  taxId?: Maybe<Scalars['String']>;
};

/** Additional information about an `individual` cardholder. */
export type IndividualParamInput = {
  dob?: Maybe<DateOfBirthSpecsInput>;
  firstName: Scalars['String'];
  lastName: Scalars['String'];
  verification?: Maybe<PersonVerificationParamInput>;
};

export type DateOfBirthSpecsInput = {
  day: Scalars['Int'];
  month: Scalars['Int'];
  year: Scalars['Int'];
};

export type PersonVerificationParamInput = {
  document?: Maybe<PersonVerificationDocumentParamInput>;
};

export type PersonVerificationDocumentParamInput = {
  back?: Maybe<Scalars['String']>;
  front?: Maybe<Scalars['String']>;
};

/** Rules that control spending across this cardholder's cards. Refer to our [documentation](https://stripe.com/docs/issuing/controls/spending-controls) for more details. */
export type AuthorizationControlsParamV2Input = {
  allowedCategories?: Maybe<Array<Maybe<AllowedCategories2ListItem>>>;
  blockedCategories?: Maybe<Array<Maybe<BlockedCategories2ListItem>>>;
  spendingLimits?: Maybe<Array<Maybe<SpendingLimits3ListItemInput>>>;
  spendingLimitsCurrency?: Maybe<Scalars['String']>;
};

export enum AllowedCategories2ListItem {
  AC_REFRIGERATION_REPAIR = 'ac_refrigeration_repair',
  ACCOUNTING_BOOKKEEPING_SERVICES = 'accounting_bookkeeping_services',
  ADVERTISING_SERVICES = 'advertising_services',
  AGRICULTURAL_COOPERATIVE = 'agricultural_cooperative',
  AIRLINES_AIR_CARRIERS = 'airlines_air_carriers',
  AIRPORTS_FLYING_FIELDS = 'airports_flying_fields',
  AMBULANCE_SERVICES = 'ambulance_services',
  AMUSEMENT_PARKS_CARNIVALS = 'amusement_parks_carnivals',
  ANTIQUE_REPRODUCTIONS = 'antique_reproductions',
  ANTIQUE_SHOPS = 'antique_shops',
  AQUARIUMS = 'aquariums',
  ARCHITECTURAL_SURVEYING_SERVICES = 'architectural_surveying_services',
  ART_DEALERS_AND_GALLERIES = 'art_dealers_and_galleries',
  ARTISTS_SUPPLY_AND_CRAFT_SHOPS = 'artists_supply_and_craft_shops',
  AUTO_AND_HOME_SUPPLY_STORES = 'auto_and_home_supply_stores',
  AUTO_BODY_REPAIR_SHOPS = 'auto_body_repair_shops',
  AUTO_PAINT_SHOPS = 'auto_paint_shops',
  AUTO_SERVICE_SHOPS = 'auto_service_shops',
  AUTOMATED_CASH_DISBURSE = 'automated_cash_disburse',
  AUTOMATED_FUEL_DISPENSERS = 'automated_fuel_dispensers',
  AUTOMOBILE_ASSOCIATIONS = 'automobile_associations',
  AUTOMOTIVE_PARTS_AND_ACCESSORIES_STORES = 'automotive_parts_and_accessories_stores',
  AUTOMOTIVE_TIRE_STORES = 'automotive_tire_stores',
  BAIL_AND_BOND_PAYMENTS = 'bail_and_bond_payments',
  BAKERIES = 'bakeries',
  BANDS_ORCHESTRAS = 'bands_orchestras',
  BARBER_AND_BEAUTY_SHOPS = 'barber_and_beauty_shops',
  BETTING_CASINO_GAMBLING = 'betting_casino_gambling',
  BICYCLE_SHOPS = 'bicycle_shops',
  BILLIARD_POOL_ESTABLISHMENTS = 'billiard_pool_establishments',
  BOAT_DEALERS = 'boat_dealers',
  BOAT_RENTALS_AND_LEASES = 'boat_rentals_and_leases',
  BOOK_STORES = 'book_stores',
  BOOKS_PERIODICALS_AND_NEWSPAPERS = 'books_periodicals_and_newspapers',
  BOWLING_ALLEYS = 'bowling_alleys',
  BUS_LINES = 'bus_lines',
  BUSINESS_SECRETARIAL_SCHOOLS = 'business_secretarial_schools',
  BUYING_SHOPPING_SERVICES = 'buying_shopping_services',
  CABLE_SATELLITE_AND_OTHER_PAY_TELEVISION_AND_RADIO = 'cable_satellite_and_other_pay_television_and_radio',
  CAMERA_AND_PHOTOGRAPHIC_SUPPLY_STORES = 'camera_and_photographic_supply_stores',
  CANDY_NUT_AND_CONFECTIONERY_STORES = 'candy_nut_and_confectionery_stores',
  CAR_AND_TRUCK_DEALERS_NEW_USED = 'car_and_truck_dealers_new_used',
  CAR_AND_TRUCK_DEALERS_USED_ONLY = 'car_and_truck_dealers_used_only',
  CAR_RENTAL_AGENCIES = 'car_rental_agencies',
  CAR_WASHES = 'car_washes',
  CARPENTRY_SERVICES = 'carpentry_services',
  CARPET_UPHOLSTERY_CLEANING = 'carpet_upholstery_cleaning',
  CATERERS = 'caterers',
  CHARITABLE_AND_SOCIAL_SERVICE_ORGANIZATIONS_FUNDRAISING = 'charitable_and_social_service_organizations_fundraising',
  CHEMICALS_AND_ALLIED_PRODUCTS = 'chemicals_and_allied_products',
  CHILD_CARE_SERVICES = 'child_care_services',
  CHILDRENS_AND_INFANTS_WEAR_STORES = 'childrens_and_infants_wear_stores',
  CHIROPODISTS_PODIATRISTS = 'chiropodists_podiatrists',
  CHIROPRACTORS = 'chiropractors',
  CIGAR_STORES_AND_STANDS = 'cigar_stores_and_stands',
  CIVIC_SOCIAL_FRATERNAL_ASSOCIATIONS = 'civic_social_fraternal_associations',
  CLEANING_AND_MAINTENANCE = 'cleaning_and_maintenance',
  CLOTHING_RENTAL = 'clothing_rental',
  COLLEGES_UNIVERSITIES = 'colleges_universities',
  COMMERCIAL_EQUIPMENT = 'commercial_equipment',
  COMMERCIAL_FOOTWEAR = 'commercial_footwear',
  COMMERCIAL_PHOTOGRAPHY_ART_AND_GRAPHICS = 'commercial_photography_art_and_graphics',
  COMMUTER_TRANSPORT_AND_FERRIES = 'commuter_transport_and_ferries',
  COMPUTER_NETWORK_SERVICES = 'computer_network_services',
  COMPUTER_PROGRAMMING = 'computer_programming',
  COMPUTER_REPAIR = 'computer_repair',
  COMPUTER_SOFTWARE_STORES = 'computer_software_stores',
  COMPUTERS_PERIPHERALS_AND_SOFTWARE = 'computers_peripherals_and_software',
  CONCRETE_WORK_SERVICES = 'concrete_work_services',
  CONSTRUCTION_MATERIALS = 'construction_materials',
  CONSULTING_PUBLIC_RELATIONS = 'consulting_public_relations',
  CORRESPONDENCE_SCHOOLS = 'correspondence_schools',
  COSMETIC_STORES = 'cosmetic_stores',
  COUNSELING_SERVICES = 'counseling_services',
  COUNTRY_CLUBS = 'country_clubs',
  COURIER_SERVICES = 'courier_services',
  COURT_COSTS = 'court_costs',
  CREDIT_REPORTING_AGENCIES = 'credit_reporting_agencies',
  CRUISE_LINES = 'cruise_lines',
  DAIRY_PRODUCTS_STORES = 'dairy_products_stores',
  DANCE_HALL_STUDIOS_SCHOOLS = 'dance_hall_studios_schools',
  DATING_ESCORT_SERVICES = 'dating_escort_services',
  DENTISTS_ORTHODONTISTS = 'dentists_orthodontists',
  DEPARTMENT_STORES = 'department_stores',
  DETECTIVE_AGENCIES = 'detective_agencies',
  DIGITAL_GOODS_APPLICATIONS = 'digital_goods_applications',
  DIGITAL_GOODS_GAMES = 'digital_goods_games',
  DIGITAL_GOODS_LARGE_VOLUME = 'digital_goods_large_volume',
  DIGITAL_GOODS_MEDIA = 'digital_goods_media',
  DIRECT_MARKETING_CATALOG_MERCHANT = 'direct_marketing_catalog_merchant',
  DIRECT_MARKETING_COMBINATION_CATALOG_AND_RETAIL_MERCHANT = 'direct_marketing_combination_catalog_and_retail_merchant',
  DIRECT_MARKETING_INBOUND_TELEMARKETING = 'direct_marketing_inbound_telemarketing',
  DIRECT_MARKETING_INSURANCE_SERVICES = 'direct_marketing_insurance_services',
  DIRECT_MARKETING_OTHER = 'direct_marketing_other',
  DIRECT_MARKETING_OUTBOUND_TELEMARKETING = 'direct_marketing_outbound_telemarketing',
  DIRECT_MARKETING_SUBSCRIPTION = 'direct_marketing_subscription',
  DIRECT_MARKETING_TRAVEL = 'direct_marketing_travel',
  DISCOUNT_STORES = 'discount_stores',
  DOCTORS = 'doctors',
  DOOR_TO_DOOR_SALES = 'door_to_door_sales',
  DRAPERY_WINDOW_COVERING_AND_UPHOLSTERY_STORES = 'drapery_window_covering_and_upholstery_stores',
  DRINKING_PLACES = 'drinking_places',
  DRUG_STORES_AND_PHARMACIES = 'drug_stores_and_pharmacies',
  DRUGS_DRUG_PROPRIETARIES_AND_DRUGGIST_SUNDRIES = 'drugs_drug_proprietaries_and_druggist_sundries',
  DRY_CLEANERS = 'dry_cleaners',
  DURABLE_GOODS = 'durable_goods',
  DUTY_FREE_STORES = 'duty_free_stores',
  EATING_PLACES_RESTAURANTS = 'eating_places_restaurants',
  EDUCATIONAL_SERVICES = 'educational_services',
  ELECTRIC_RAZOR_STORES = 'electric_razor_stores',
  ELECTRICAL_PARTS_AND_EQUIPMENT = 'electrical_parts_and_equipment',
  ELECTRICAL_SERVICES = 'electrical_services',
  ELECTRONICS_REPAIR_SHOPS = 'electronics_repair_shops',
  ELECTRONICS_STORES = 'electronics_stores',
  ELEMENTARY_SECONDARY_SCHOOLS = 'elementary_secondary_schools',
  EMPLOYMENT_TEMP_AGENCIES = 'employment_temp_agencies',
  EQUIPMENT_RENTAL = 'equipment_rental',
  EXTERMINATING_SERVICES = 'exterminating_services',
  FAMILY_CLOTHING_STORES = 'family_clothing_stores',
  FAST_FOOD_RESTAURANTS = 'fast_food_restaurants',
  FINANCIAL_INSTITUTIONS = 'financial_institutions',
  FINES_GOVERNMENT_ADMINISTRATIVE_ENTITIES = 'fines_government_administrative_entities',
  FIREPLACE_FIREPLACE_SCREENS_AND_ACCESSORIES_STORES = 'fireplace_fireplace_screens_and_accessories_stores',
  FLOOR_COVERING_STORES = 'floor_covering_stores',
  FLORISTS = 'florists',
  FLORISTS_SUPPLIES_NURSERY_STOCK_AND_FLOWERS = 'florists_supplies_nursery_stock_and_flowers',
  FREEZER_AND_LOCKER_MEAT_PROVISIONERS = 'freezer_and_locker_meat_provisioners',
  FUEL_DEALERS_NON_AUTOMOTIVE = 'fuel_dealers_non_automotive',
  FUNERAL_SERVICES_CREMATORIES = 'funeral_services_crematories',
  FURNITURE_HOME_FURNISHINGS_AND_EQUIPMENT_STORES_EXCEPT_APPLIANCES = 'furniture_home_furnishings_and_equipment_stores_except_appliances',
  FURNITURE_REPAIR_REFINISHING = 'furniture_repair_refinishing',
  FURRIERS_AND_FUR_SHOPS = 'furriers_and_fur_shops',
  GENERAL_SERVICES = 'general_services',
  GIFT_CARD_NOVELTY_AND_SOUVENIR_SHOPS = 'gift_card_novelty_and_souvenir_shops',
  GLASS_PAINT_AND_WALLPAPER_STORES = 'glass_paint_and_wallpaper_stores',
  GLASSWARE_CRYSTAL_STORES = 'glassware_crystal_stores',
  GOLF_COURSES_PUBLIC = 'golf_courses_public',
  GOVERNMENT_SERVICES = 'government_services',
  GROCERY_STORES_SUPERMARKETS = 'grocery_stores_supermarkets',
  HARDWARE_EQUIPMENT_AND_SUPPLIES = 'hardware_equipment_and_supplies',
  HARDWARE_STORES = 'hardware_stores',
  HEALTH_AND_BEAUTY_SPAS = 'health_and_beauty_spas',
  HEARING_AIDS_SALES_AND_SUPPLIES = 'hearing_aids_sales_and_supplies',
  HEATING_PLUMBING_A_C = 'heating_plumbing_a_c',
  HOBBY_TOY_AND_GAME_SHOPS = 'hobby_toy_and_game_shops',
  HOME_SUPPLY_WAREHOUSE_STORES = 'home_supply_warehouse_stores',
  HOSPITALS = 'hospitals',
  HOTELS_MOTELS_AND_RESORTS = 'hotels_motels_and_resorts',
  HOUSEHOLD_APPLIANCE_STORES = 'household_appliance_stores',
  INDUSTRIAL_SUPPLIES = 'industrial_supplies',
  INFORMATION_RETRIEVAL_SERVICES = 'information_retrieval_services',
  INSURANCE_DEFAULT = 'insurance_default',
  INSURANCE_UNDERWRITING_PREMIUMS = 'insurance_underwriting_premiums',
  INTRA_COMPANY_PURCHASES = 'intra_company_purchases',
  JEWELRY_STORES_WATCHES_CLOCKS_AND_SILVERWARE_STORES = 'jewelry_stores_watches_clocks_and_silverware_stores',
  LANDSCAPING_SERVICES = 'landscaping_services',
  LAUNDRIES = 'laundries',
  LAUNDRY_CLEANING_SERVICES = 'laundry_cleaning_services',
  LEGAL_SERVICES_ATTORNEYS = 'legal_services_attorneys',
  LUGGAGE_AND_LEATHER_GOODS_STORES = 'luggage_and_leather_goods_stores',
  LUMBER_BUILDING_MATERIALS_STORES = 'lumber_building_materials_stores',
  MANUAL_CASH_DISBURSE = 'manual_cash_disburse',
  MARINAS_SERVICE_AND_SUPPLIES = 'marinas_service_and_supplies',
  MASONRY_STONEWORK_AND_PLASTER = 'masonry_stonework_and_plaster',
  MASSAGE_PARLORS = 'massage_parlors',
  MEDICAL_AND_DENTAL_LABS = 'medical_and_dental_labs',
  MEDICAL_DENTAL_OPHTHALMIC_AND_HOSPITAL_EQUIPMENT_AND_SUPPLIES = 'medical_dental_ophthalmic_and_hospital_equipment_and_supplies',
  MEDICAL_SERVICES = 'medical_services',
  MEMBERSHIP_ORGANIZATIONS = 'membership_organizations',
  MENS_AND_BOYS_CLOTHING_AND_ACCESSORIES_STORES = 'mens_and_boys_clothing_and_accessories_stores',
  MENS_WOMENS_CLOTHING_STORES = 'mens_womens_clothing_stores',
  METAL_SERVICE_CENTERS = 'metal_service_centers',
  MISCELLANEOUS = 'miscellaneous',
  MISCELLANEOUS_APPAREL_AND_ACCESSORY_SHOPS = 'miscellaneous_apparel_and_accessory_shops',
  MISCELLANEOUS_AUTO_DEALERS = 'miscellaneous_auto_dealers',
  MISCELLANEOUS_BUSINESS_SERVICES = 'miscellaneous_business_services',
  MISCELLANEOUS_FOOD_STORES = 'miscellaneous_food_stores',
  MISCELLANEOUS_GENERAL_MERCHANDISE = 'miscellaneous_general_merchandise',
  MISCELLANEOUS_GENERAL_SERVICES = 'miscellaneous_general_services',
  MISCELLANEOUS_HOME_FURNISHING_SPECIALTY_STORES = 'miscellaneous_home_furnishing_specialty_stores',
  MISCELLANEOUS_PUBLISHING_AND_PRINTING = 'miscellaneous_publishing_and_printing',
  MISCELLANEOUS_RECREATION_SERVICES = 'miscellaneous_recreation_services',
  MISCELLANEOUS_REPAIR_SHOPS = 'miscellaneous_repair_shops',
  MISCELLANEOUS_SPECIALTY_RETAIL = 'miscellaneous_specialty_retail',
  MOBILE_HOME_DEALERS = 'mobile_home_dealers',
  MOTION_PICTURE_THEATERS = 'motion_picture_theaters',
  MOTOR_FREIGHT_CARRIERS_AND_TRUCKING = 'motor_freight_carriers_and_trucking',
  MOTOR_HOMES_DEALERS = 'motor_homes_dealers',
  MOTOR_VEHICLE_SUPPLIES_AND_NEW_PARTS = 'motor_vehicle_supplies_and_new_parts',
  MOTORCYCLE_SHOPS_AND_DEALERS = 'motorcycle_shops_and_dealers',
  MOTORCYCLE_SHOPS_DEALERS = 'motorcycle_shops_dealers',
  MUSIC_STORES_MUSICAL_INSTRUMENTS_PIANOS_AND_SHEET_MUSIC = 'music_stores_musical_instruments_pianos_and_sheet_music',
  NEWS_DEALERS_AND_NEWSSTANDS = 'news_dealers_and_newsstands',
  NON_FI_MONEY_ORDERS = 'non_fi_money_orders',
  NON_FI_STORED_VALUE_CARD_PURCHASE_LOAD = 'non_fi_stored_value_card_purchase_load',
  NONDURABLE_GOODS = 'nondurable_goods',
  NURSERIES_LAWN_AND_GARDEN_SUPPLY_STORES = 'nurseries_lawn_and_garden_supply_stores',
  NURSING_PERSONAL_CARE = 'nursing_personal_care',
  OFFICE_AND_COMMERCIAL_FURNITURE = 'office_and_commercial_furniture',
  OPTICIANS_EYEGLASSES = 'opticians_eyeglasses',
  OPTOMETRISTS_OPHTHALMOLOGIST = 'optometrists_ophthalmologist',
  ORTHOPEDIC_GOODS_PROSTHETIC_DEVICES = 'orthopedic_goods_prosthetic_devices',
  OSTEOPATHS = 'osteopaths',
  PACKAGE_STORES_BEER_WINE_AND_LIQUOR = 'package_stores_beer_wine_and_liquor',
  PAINTS_VARNISHES_AND_SUPPLIES = 'paints_varnishes_and_supplies',
  PARKING_LOTS_GARAGES = 'parking_lots_garages',
  PASSENGER_RAILWAYS = 'passenger_railways',
  PAWN_SHOPS = 'pawn_shops',
  PET_SHOPS_PET_FOOD_AND_SUPPLIES = 'pet_shops_pet_food_and_supplies',
  PETROLEUM_AND_PETROLEUM_PRODUCTS = 'petroleum_and_petroleum_products',
  PHOTO_DEVELOPING = 'photo_developing',
  PHOTOGRAPHIC_PHOTOCOPY_MICROFILM_EQUIPMENT_AND_SUPPLIES = 'photographic_photocopy_microfilm_equipment_and_supplies',
  PHOTOGRAPHIC_STUDIOS = 'photographic_studios',
  PICTURE_VIDEO_PRODUCTION = 'picture_video_production',
  PIECE_GOODS_NOTIONS_AND_OTHER_DRY_GOODS = 'piece_goods_notions_and_other_dry_goods',
  PLUMBING_HEATING_EQUIPMENT_AND_SUPPLIES = 'plumbing_heating_equipment_and_supplies',
  POLITICAL_ORGANIZATIONS = 'political_organizations',
  POSTAL_SERVICES_GOVERNMENT_ONLY = 'postal_services_government_only',
  PRECIOUS_STONES_AND_METALS_WATCHES_AND_JEWELRY = 'precious_stones_and_metals_watches_and_jewelry',
  PROFESSIONAL_SERVICES = 'professional_services',
  PUBLIC_WAREHOUSING_AND_STORAGE = 'public_warehousing_and_storage',
  QUICK_COPY_REPRO_AND_BLUEPRINT = 'quick_copy_repro_and_blueprint',
  RAILROADS = 'railroads',
  REAL_ESTATE_AGENTS_AND_MANAGERS_RENTALS = 'real_estate_agents_and_managers_rentals',
  RECORD_STORES = 'record_stores',
  RECREATIONAL_VEHICLE_RENTALS = 'recreational_vehicle_rentals',
  RELIGIOUS_GOODS_STORES = 'religious_goods_stores',
  RELIGIOUS_ORGANIZATIONS = 'religious_organizations',
  ROOFING_SIDING_SHEET_METAL = 'roofing_siding_sheet_metal',
  SECRETARIAL_SUPPORT_SERVICES = 'secretarial_support_services',
  SECURITY_BROKERS_DEALERS = 'security_brokers_dealers',
  SERVICE_STATIONS = 'service_stations',
  SEWING_NEEDLEWORK_FABRIC_AND_PIECE_GOODS_STORES = 'sewing_needlework_fabric_and_piece_goods_stores',
  SHOE_REPAIR_HAT_CLEANING = 'shoe_repair_hat_cleaning',
  SHOE_STORES = 'shoe_stores',
  SMALL_APPLIANCE_REPAIR = 'small_appliance_repair',
  SNOWMOBILE_DEALERS = 'snowmobile_dealers',
  SPECIAL_TRADE_SERVICES = 'special_trade_services',
  SPECIALTY_CLEANING = 'specialty_cleaning',
  SPORTING_GOODS_STORES = 'sporting_goods_stores',
  SPORTING_RECREATION_CAMPS = 'sporting_recreation_camps',
  SPORTS_AND_RIDING_APPAREL_STORES = 'sports_and_riding_apparel_stores',
  SPORTS_CLUBS_FIELDS = 'sports_clubs_fields',
  STAMP_AND_COIN_STORES = 'stamp_and_coin_stores',
  STATIONARY_OFFICE_SUPPLIES_PRINTING_AND_WRITING_PAPER = 'stationary_office_supplies_printing_and_writing_paper',
  STATIONERY_STORES_OFFICE_AND_SCHOOL_SUPPLY_STORES = 'stationery_stores_office_and_school_supply_stores',
  SWIMMING_POOLS_SALES = 'swimming_pools_sales',
  T_UI_TRAVEL_GERMANY = 't_ui_travel_germany',
  TAILORS_ALTERATIONS = 'tailors_alterations',
  TAX_PAYMENTS_GOVERNMENT_AGENCIES = 'tax_payments_government_agencies',
  TAX_PREPARATION_SERVICES = 'tax_preparation_services',
  TAXICABS_LIMOUSINES = 'taxicabs_limousines',
  TELECOMMUNICATION_EQUIPMENT_AND_TELEPHONE_SALES = 'telecommunication_equipment_and_telephone_sales',
  TELECOMMUNICATION_SERVICES = 'telecommunication_services',
  TELEGRAPH_SERVICES = 'telegraph_services',
  TENT_AND_AWNING_SHOPS = 'tent_and_awning_shops',
  TESTING_LABORATORIES = 'testing_laboratories',
  THEATRICAL_TICKET_AGENCIES = 'theatrical_ticket_agencies',
  TIMESHARES = 'timeshares',
  TIRE_RETREADING_AND_REPAIR = 'tire_retreading_and_repair',
  TOLLS_BRIDGE_FEES = 'tolls_bridge_fees',
  TOURIST_ATTRACTIONS_AND_EXHIBITS = 'tourist_attractions_and_exhibits',
  TOWING_SERVICES = 'towing_services',
  TRAILER_PARKS_CAMPGROUNDS = 'trailer_parks_campgrounds',
  TRANSPORTATION_SERVICES = 'transportation_services',
  TRAVEL_AGENCIES_TOUR_OPERATORS = 'travel_agencies_tour_operators',
  TRUCK_STOP_ITERATION = 'truck_stop_iteration',
  TRUCK_UTILITY_TRAILER_RENTALS = 'truck_utility_trailer_rentals',
  TYPESETTING_PLATE_MAKING_AND_RELATED_SERVICES = 'typesetting_plate_making_and_related_services',
  TYPEWRITER_STORES = 'typewriter_stores',
  U_S_FEDERAL_GOVERNMENT_AGENCIES_OR_DEPARTMENTS = 'u_s_federal_government_agencies_or_departments',
  UNIFORMS_COMMERCIAL_CLOTHING = 'uniforms_commercial_clothing',
  USED_MERCHANDISE_AND_SECONDHAND_STORES = 'used_merchandise_and_secondhand_stores',
  UTILITIES = 'utilities',
  VARIETY_STORES = 'variety_stores',
  VETERINARY_SERVICES = 'veterinary_services',
  VIDEO_AMUSEMENT_GAME_SUPPLIES = 'video_amusement_game_supplies',
  VIDEO_GAME_ARCADES = 'video_game_arcades',
  VIDEO_TAPE_RENTAL_STORES = 'video_tape_rental_stores',
  VOCATIONAL_TRADE_SCHOOLS = 'vocational_trade_schools',
  WATCH_JEWELRY_REPAIR = 'watch_jewelry_repair',
  WELDING_REPAIR = 'welding_repair',
  WHOLESALE_CLUBS = 'wholesale_clubs',
  WIG_AND_TOUPEE_STORES = 'wig_and_toupee_stores',
  WIRES_MONEY_ORDERS = 'wires_money_orders',
  WOMENS_ACCESSORY_AND_SPECIALTY_SHOPS = 'womens_accessory_and_specialty_shops',
  WOMENS_READY_TO_WEAR_STORES = 'womens_ready_to_wear_stores',
  WRECKING_AND_SALVAGE_YARDS = 'wrecking_and_salvage_yards'
}

export enum BlockedCategories2ListItem {
  AC_REFRIGERATION_REPAIR = 'ac_refrigeration_repair',
  ACCOUNTING_BOOKKEEPING_SERVICES = 'accounting_bookkeeping_services',
  ADVERTISING_SERVICES = 'advertising_services',
  AGRICULTURAL_COOPERATIVE = 'agricultural_cooperative',
  AIRLINES_AIR_CARRIERS = 'airlines_air_carriers',
  AIRPORTS_FLYING_FIELDS = 'airports_flying_fields',
  AMBULANCE_SERVICES = 'ambulance_services',
  AMUSEMENT_PARKS_CARNIVALS = 'amusement_parks_carnivals',
  ANTIQUE_REPRODUCTIONS = 'antique_reproductions',
  ANTIQUE_SHOPS = 'antique_shops',
  AQUARIUMS = 'aquariums',
  ARCHITECTURAL_SURVEYING_SERVICES = 'architectural_surveying_services',
  ART_DEALERS_AND_GALLERIES = 'art_dealers_and_galleries',
  ARTISTS_SUPPLY_AND_CRAFT_SHOPS = 'artists_supply_and_craft_shops',
  AUTO_AND_HOME_SUPPLY_STORES = 'auto_and_home_supply_stores',
  AUTO_BODY_REPAIR_SHOPS = 'auto_body_repair_shops',
  AUTO_PAINT_SHOPS = 'auto_paint_shops',
  AUTO_SERVICE_SHOPS = 'auto_service_shops',
  AUTOMATED_CASH_DISBURSE = 'automated_cash_disburse',
  AUTOMATED_FUEL_DISPENSERS = 'automated_fuel_dispensers',
  AUTOMOBILE_ASSOCIATIONS = 'automobile_associations',
  AUTOMOTIVE_PARTS_AND_ACCESSORIES_STORES = 'automotive_parts_and_accessories_stores',
  AUTOMOTIVE_TIRE_STORES = 'automotive_tire_stores',
  BAIL_AND_BOND_PAYMENTS = 'bail_and_bond_payments',
  BAKERIES = 'bakeries',
  BANDS_ORCHESTRAS = 'bands_orchestras',
  BARBER_AND_BEAUTY_SHOPS = 'barber_and_beauty_shops',
  BETTING_CASINO_GAMBLING = 'betting_casino_gambling',
  BICYCLE_SHOPS = 'bicycle_shops',
  BILLIARD_POOL_ESTABLISHMENTS = 'billiard_pool_establishments',
  BOAT_DEALERS = 'boat_dealers',
  BOAT_RENTALS_AND_LEASES = 'boat_rentals_and_leases',
  BOOK_STORES = 'book_stores',
  BOOKS_PERIODICALS_AND_NEWSPAPERS = 'books_periodicals_and_newspapers',
  BOWLING_ALLEYS = 'bowling_alleys',
  BUS_LINES = 'bus_lines',
  BUSINESS_SECRETARIAL_SCHOOLS = 'business_secretarial_schools',
  BUYING_SHOPPING_SERVICES = 'buying_shopping_services',
  CABLE_SATELLITE_AND_OTHER_PAY_TELEVISION_AND_RADIO = 'cable_satellite_and_other_pay_television_and_radio',
  CAMERA_AND_PHOTOGRAPHIC_SUPPLY_STORES = 'camera_and_photographic_supply_stores',
  CANDY_NUT_AND_CONFECTIONERY_STORES = 'candy_nut_and_confectionery_stores',
  CAR_AND_TRUCK_DEALERS_NEW_USED = 'car_and_truck_dealers_new_used',
  CAR_AND_TRUCK_DEALERS_USED_ONLY = 'car_and_truck_dealers_used_only',
  CAR_RENTAL_AGENCIES = 'car_rental_agencies',
  CAR_WASHES = 'car_washes',
  CARPENTRY_SERVICES = 'carpentry_services',
  CARPET_UPHOLSTERY_CLEANING = 'carpet_upholstery_cleaning',
  CATERERS = 'caterers',
  CHARITABLE_AND_SOCIAL_SERVICE_ORGANIZATIONS_FUNDRAISING = 'charitable_and_social_service_organizations_fundraising',
  CHEMICALS_AND_ALLIED_PRODUCTS = 'chemicals_and_allied_products',
  CHILD_CARE_SERVICES = 'child_care_services',
  CHILDRENS_AND_INFANTS_WEAR_STORES = 'childrens_and_infants_wear_stores',
  CHIROPODISTS_PODIATRISTS = 'chiropodists_podiatrists',
  CHIROPRACTORS = 'chiropractors',
  CIGAR_STORES_AND_STANDS = 'cigar_stores_and_stands',
  CIVIC_SOCIAL_FRATERNAL_ASSOCIATIONS = 'civic_social_fraternal_associations',
  CLEANING_AND_MAINTENANCE = 'cleaning_and_maintenance',
  CLOTHING_RENTAL = 'clothing_rental',
  COLLEGES_UNIVERSITIES = 'colleges_universities',
  COMMERCIAL_EQUIPMENT = 'commercial_equipment',
  COMMERCIAL_FOOTWEAR = 'commercial_footwear',
  COMMERCIAL_PHOTOGRAPHY_ART_AND_GRAPHICS = 'commercial_photography_art_and_graphics',
  COMMUTER_TRANSPORT_AND_FERRIES = 'commuter_transport_and_ferries',
  COMPUTER_NETWORK_SERVICES = 'computer_network_services',
  COMPUTER_PROGRAMMING = 'computer_programming',
  COMPUTER_REPAIR = 'computer_repair',
  COMPUTER_SOFTWARE_STORES = 'computer_software_stores',
  COMPUTERS_PERIPHERALS_AND_SOFTWARE = 'computers_peripherals_and_software',
  CONCRETE_WORK_SERVICES = 'concrete_work_services',
  CONSTRUCTION_MATERIALS = 'construction_materials',
  CONSULTING_PUBLIC_RELATIONS = 'consulting_public_relations',
  CORRESPONDENCE_SCHOOLS = 'correspondence_schools',
  COSMETIC_STORES = 'cosmetic_stores',
  COUNSELING_SERVICES = 'counseling_services',
  COUNTRY_CLUBS = 'country_clubs',
  COURIER_SERVICES = 'courier_services',
  COURT_COSTS = 'court_costs',
  CREDIT_REPORTING_AGENCIES = 'credit_reporting_agencies',
  CRUISE_LINES = 'cruise_lines',
  DAIRY_PRODUCTS_STORES = 'dairy_products_stores',
  DANCE_HALL_STUDIOS_SCHOOLS = 'dance_hall_studios_schools',
  DATING_ESCORT_SERVICES = 'dating_escort_services',
  DENTISTS_ORTHODONTISTS = 'dentists_orthodontists',
  DEPARTMENT_STORES = 'department_stores',
  DETECTIVE_AGENCIES = 'detective_agencies',
  DIGITAL_GOODS_APPLICATIONS = 'digital_goods_applications',
  DIGITAL_GOODS_GAMES = 'digital_goods_games',
  DIGITAL_GOODS_LARGE_VOLUME = 'digital_goods_large_volume',
  DIGITAL_GOODS_MEDIA = 'digital_goods_media',
  DIRECT_MARKETING_CATALOG_MERCHANT = 'direct_marketing_catalog_merchant',
  DIRECT_MARKETING_COMBINATION_CATALOG_AND_RETAIL_MERCHANT = 'direct_marketing_combination_catalog_and_retail_merchant',
  DIRECT_MARKETING_INBOUND_TELEMARKETING = 'direct_marketing_inbound_telemarketing',
  DIRECT_MARKETING_INSURANCE_SERVICES = 'direct_marketing_insurance_services',
  DIRECT_MARKETING_OTHER = 'direct_marketing_other',
  DIRECT_MARKETING_OUTBOUND_TELEMARKETING = 'direct_marketing_outbound_telemarketing',
  DIRECT_MARKETING_SUBSCRIPTION = 'direct_marketing_subscription',
  DIRECT_MARKETING_TRAVEL = 'direct_marketing_travel',
  DISCOUNT_STORES = 'discount_stores',
  DOCTORS = 'doctors',
  DOOR_TO_DOOR_SALES = 'door_to_door_sales',
  DRAPERY_WINDOW_COVERING_AND_UPHOLSTERY_STORES = 'drapery_window_covering_and_upholstery_stores',
  DRINKING_PLACES = 'drinking_places',
  DRUG_STORES_AND_PHARMACIES = 'drug_stores_and_pharmacies',
  DRUGS_DRUG_PROPRIETARIES_AND_DRUGGIST_SUNDRIES = 'drugs_drug_proprietaries_and_druggist_sundries',
  DRY_CLEANERS = 'dry_cleaners',
  DURABLE_GOODS = 'durable_goods',
  DUTY_FREE_STORES = 'duty_free_stores',
  EATING_PLACES_RESTAURANTS = 'eating_places_restaurants',
  EDUCATIONAL_SERVICES = 'educational_services',
  ELECTRIC_RAZOR_STORES = 'electric_razor_stores',
  ELECTRICAL_PARTS_AND_EQUIPMENT = 'electrical_parts_and_equipment',
  ELECTRICAL_SERVICES = 'electrical_services',
  ELECTRONICS_REPAIR_SHOPS = 'electronics_repair_shops',
  ELECTRONICS_STORES = 'electronics_stores',
  ELEMENTARY_SECONDARY_SCHOOLS = 'elementary_secondary_schools',
  EMPLOYMENT_TEMP_AGENCIES = 'employment_temp_agencies',
  EQUIPMENT_RENTAL = 'equipment_rental',
  EXTERMINATING_SERVICES = 'exterminating_services',
  FAMILY_CLOTHING_STORES = 'family_clothing_stores',
  FAST_FOOD_RESTAURANTS = 'fast_food_restaurants',
  FINANCIAL_INSTITUTIONS = 'financial_institutions',
  FINES_GOVERNMENT_ADMINISTRATIVE_ENTITIES = 'fines_government_administrative_entities',
  FIREPLACE_FIREPLACE_SCREENS_AND_ACCESSORIES_STORES = 'fireplace_fireplace_screens_and_accessories_stores',
  FLOOR_COVERING_STORES = 'floor_covering_stores',
  FLORISTS = 'florists',
  FLORISTS_SUPPLIES_NURSERY_STOCK_AND_FLOWERS = 'florists_supplies_nursery_stock_and_flowers',
  FREEZER_AND_LOCKER_MEAT_PROVISIONERS = 'freezer_and_locker_meat_provisioners',
  FUEL_DEALERS_NON_AUTOMOTIVE = 'fuel_dealers_non_automotive',
  FUNERAL_SERVICES_CREMATORIES = 'funeral_services_crematories',
  FURNITURE_HOME_FURNISHINGS_AND_EQUIPMENT_STORES_EXCEPT_APPLIANCES = 'furniture_home_furnishings_and_equipment_stores_except_appliances',
  FURNITURE_REPAIR_REFINISHING = 'furniture_repair_refinishing',
  FURRIERS_AND_FUR_SHOPS = 'furriers_and_fur_shops',
  GENERAL_SERVICES = 'general_services',
  GIFT_CARD_NOVELTY_AND_SOUVENIR_SHOPS = 'gift_card_novelty_and_souvenir_shops',
  GLASS_PAINT_AND_WALLPAPER_STORES = 'glass_paint_and_wallpaper_stores',
  GLASSWARE_CRYSTAL_STORES = 'glassware_crystal_stores',
  GOLF_COURSES_PUBLIC = 'golf_courses_public',
  GOVERNMENT_SERVICES = 'government_services',
  GROCERY_STORES_SUPERMARKETS = 'grocery_stores_supermarkets',
  HARDWARE_EQUIPMENT_AND_SUPPLIES = 'hardware_equipment_and_supplies',
  HARDWARE_STORES = 'hardware_stores',
  HEALTH_AND_BEAUTY_SPAS = 'health_and_beauty_spas',
  HEARING_AIDS_SALES_AND_SUPPLIES = 'hearing_aids_sales_and_supplies',
  HEATING_PLUMBING_A_C = 'heating_plumbing_a_c',
  HOBBY_TOY_AND_GAME_SHOPS = 'hobby_toy_and_game_shops',
  HOME_SUPPLY_WAREHOUSE_STORES = 'home_supply_warehouse_stores',
  HOSPITALS = 'hospitals',
  HOTELS_MOTELS_AND_RESORTS = 'hotels_motels_and_resorts',
  HOUSEHOLD_APPLIANCE_STORES = 'household_appliance_stores',
  INDUSTRIAL_SUPPLIES = 'industrial_supplies',
  INFORMATION_RETRIEVAL_SERVICES = 'information_retrieval_services',
  INSURANCE_DEFAULT = 'insurance_default',
  INSURANCE_UNDERWRITING_PREMIUMS = 'insurance_underwriting_premiums',
  INTRA_COMPANY_PURCHASES = 'intra_company_purchases',
  JEWELRY_STORES_WATCHES_CLOCKS_AND_SILVERWARE_STORES = 'jewelry_stores_watches_clocks_and_silverware_stores',
  LANDSCAPING_SERVICES = 'landscaping_services',
  LAUNDRIES = 'laundries',
  LAUNDRY_CLEANING_SERVICES = 'laundry_cleaning_services',
  LEGAL_SERVICES_ATTORNEYS = 'legal_services_attorneys',
  LUGGAGE_AND_LEATHER_GOODS_STORES = 'luggage_and_leather_goods_stores',
  LUMBER_BUILDING_MATERIALS_STORES = 'lumber_building_materials_stores',
  MANUAL_CASH_DISBURSE = 'manual_cash_disburse',
  MARINAS_SERVICE_AND_SUPPLIES = 'marinas_service_and_supplies',
  MASONRY_STONEWORK_AND_PLASTER = 'masonry_stonework_and_plaster',
  MASSAGE_PARLORS = 'massage_parlors',
  MEDICAL_AND_DENTAL_LABS = 'medical_and_dental_labs',
  MEDICAL_DENTAL_OPHTHALMIC_AND_HOSPITAL_EQUIPMENT_AND_SUPPLIES = 'medical_dental_ophthalmic_and_hospital_equipment_and_supplies',
  MEDICAL_SERVICES = 'medical_services',
  MEMBERSHIP_ORGANIZATIONS = 'membership_organizations',
  MENS_AND_BOYS_CLOTHING_AND_ACCESSORIES_STORES = 'mens_and_boys_clothing_and_accessories_stores',
  MENS_WOMENS_CLOTHING_STORES = 'mens_womens_clothing_stores',
  METAL_SERVICE_CENTERS = 'metal_service_centers',
  MISCELLANEOUS = 'miscellaneous',
  MISCELLANEOUS_APPAREL_AND_ACCESSORY_SHOPS = 'miscellaneous_apparel_and_accessory_shops',
  MISCELLANEOUS_AUTO_DEALERS = 'miscellaneous_auto_dealers',
  MISCELLANEOUS_BUSINESS_SERVICES = 'miscellaneous_business_services',
  MISCELLANEOUS_FOOD_STORES = 'miscellaneous_food_stores',
  MISCELLANEOUS_GENERAL_MERCHANDISE = 'miscellaneous_general_merchandise',
  MISCELLANEOUS_GENERAL_SERVICES = 'miscellaneous_general_services',
  MISCELLANEOUS_HOME_FURNISHING_SPECIALTY_STORES = 'miscellaneous_home_furnishing_specialty_stores',
  MISCELLANEOUS_PUBLISHING_AND_PRINTING = 'miscellaneous_publishing_and_printing',
  MISCELLANEOUS_RECREATION_SERVICES = 'miscellaneous_recreation_services',
  MISCELLANEOUS_REPAIR_SHOPS = 'miscellaneous_repair_shops',
  MISCELLANEOUS_SPECIALTY_RETAIL = 'miscellaneous_specialty_retail',
  MOBILE_HOME_DEALERS = 'mobile_home_dealers',
  MOTION_PICTURE_THEATERS = 'motion_picture_theaters',
  MOTOR_FREIGHT_CARRIERS_AND_TRUCKING = 'motor_freight_carriers_and_trucking',
  MOTOR_HOMES_DEALERS = 'motor_homes_dealers',
  MOTOR_VEHICLE_SUPPLIES_AND_NEW_PARTS = 'motor_vehicle_supplies_and_new_parts',
  MOTORCYCLE_SHOPS_AND_DEALERS = 'motorcycle_shops_and_dealers',
  MOTORCYCLE_SHOPS_DEALERS = 'motorcycle_shops_dealers',
  MUSIC_STORES_MUSICAL_INSTRUMENTS_PIANOS_AND_SHEET_MUSIC = 'music_stores_musical_instruments_pianos_and_sheet_music',
  NEWS_DEALERS_AND_NEWSSTANDS = 'news_dealers_and_newsstands',
  NON_FI_MONEY_ORDERS = 'non_fi_money_orders',
  NON_FI_STORED_VALUE_CARD_PURCHASE_LOAD = 'non_fi_stored_value_card_purchase_load',
  NONDURABLE_GOODS = 'nondurable_goods',
  NURSERIES_LAWN_AND_GARDEN_SUPPLY_STORES = 'nurseries_lawn_and_garden_supply_stores',
  NURSING_PERSONAL_CARE = 'nursing_personal_care',
  OFFICE_AND_COMMERCIAL_FURNITURE = 'office_and_commercial_furniture',
  OPTICIANS_EYEGLASSES = 'opticians_eyeglasses',
  OPTOMETRISTS_OPHTHALMOLOGIST = 'optometrists_ophthalmologist',
  ORTHOPEDIC_GOODS_PROSTHETIC_DEVICES = 'orthopedic_goods_prosthetic_devices',
  OSTEOPATHS = 'osteopaths',
  PACKAGE_STORES_BEER_WINE_AND_LIQUOR = 'package_stores_beer_wine_and_liquor',
  PAINTS_VARNISHES_AND_SUPPLIES = 'paints_varnishes_and_supplies',
  PARKING_LOTS_GARAGES = 'parking_lots_garages',
  PASSENGER_RAILWAYS = 'passenger_railways',
  PAWN_SHOPS = 'pawn_shops',
  PET_SHOPS_PET_FOOD_AND_SUPPLIES = 'pet_shops_pet_food_and_supplies',
  PETROLEUM_AND_PETROLEUM_PRODUCTS = 'petroleum_and_petroleum_products',
  PHOTO_DEVELOPING = 'photo_developing',
  PHOTOGRAPHIC_PHOTOCOPY_MICROFILM_EQUIPMENT_AND_SUPPLIES = 'photographic_photocopy_microfilm_equipment_and_supplies',
  PHOTOGRAPHIC_STUDIOS = 'photographic_studios',
  PICTURE_VIDEO_PRODUCTION = 'picture_video_production',
  PIECE_GOODS_NOTIONS_AND_OTHER_DRY_GOODS = 'piece_goods_notions_and_other_dry_goods',
  PLUMBING_HEATING_EQUIPMENT_AND_SUPPLIES = 'plumbing_heating_equipment_and_supplies',
  POLITICAL_ORGANIZATIONS = 'political_organizations',
  POSTAL_SERVICES_GOVERNMENT_ONLY = 'postal_services_government_only',
  PRECIOUS_STONES_AND_METALS_WATCHES_AND_JEWELRY = 'precious_stones_and_metals_watches_and_jewelry',
  PROFESSIONAL_SERVICES = 'professional_services',
  PUBLIC_WAREHOUSING_AND_STORAGE = 'public_warehousing_and_storage',
  QUICK_COPY_REPRO_AND_BLUEPRINT = 'quick_copy_repro_and_blueprint',
  RAILROADS = 'railroads',
  REAL_ESTATE_AGENTS_AND_MANAGERS_RENTALS = 'real_estate_agents_and_managers_rentals',
  RECORD_STORES = 'record_stores',
  RECREATIONAL_VEHICLE_RENTALS = 'recreational_vehicle_rentals',
  RELIGIOUS_GOODS_STORES = 'religious_goods_stores',
  RELIGIOUS_ORGANIZATIONS = 'religious_organizations',
  ROOFING_SIDING_SHEET_METAL = 'roofing_siding_sheet_metal',
  SECRETARIAL_SUPPORT_SERVICES = 'secretarial_support_services',
  SECURITY_BROKERS_DEALERS = 'security_brokers_dealers',
  SERVICE_STATIONS = 'service_stations',
  SEWING_NEEDLEWORK_FABRIC_AND_PIECE_GOODS_STORES = 'sewing_needlework_fabric_and_piece_goods_stores',
  SHOE_REPAIR_HAT_CLEANING = 'shoe_repair_hat_cleaning',
  SHOE_STORES = 'shoe_stores',
  SMALL_APPLIANCE_REPAIR = 'small_appliance_repair',
  SNOWMOBILE_DEALERS = 'snowmobile_dealers',
  SPECIAL_TRADE_SERVICES = 'special_trade_services',
  SPECIALTY_CLEANING = 'specialty_cleaning',
  SPORTING_GOODS_STORES = 'sporting_goods_stores',
  SPORTING_RECREATION_CAMPS = 'sporting_recreation_camps',
  SPORTS_AND_RIDING_APPAREL_STORES = 'sports_and_riding_apparel_stores',
  SPORTS_CLUBS_FIELDS = 'sports_clubs_fields',
  STAMP_AND_COIN_STORES = 'stamp_and_coin_stores',
  STATIONARY_OFFICE_SUPPLIES_PRINTING_AND_WRITING_PAPER = 'stationary_office_supplies_printing_and_writing_paper',
  STATIONERY_STORES_OFFICE_AND_SCHOOL_SUPPLY_STORES = 'stationery_stores_office_and_school_supply_stores',
  SWIMMING_POOLS_SALES = 'swimming_pools_sales',
  T_UI_TRAVEL_GERMANY = 't_ui_travel_germany',
  TAILORS_ALTERATIONS = 'tailors_alterations',
  TAX_PAYMENTS_GOVERNMENT_AGENCIES = 'tax_payments_government_agencies',
  TAX_PREPARATION_SERVICES = 'tax_preparation_services',
  TAXICABS_LIMOUSINES = 'taxicabs_limousines',
  TELECOMMUNICATION_EQUIPMENT_AND_TELEPHONE_SALES = 'telecommunication_equipment_and_telephone_sales',
  TELECOMMUNICATION_SERVICES = 'telecommunication_services',
  TELEGRAPH_SERVICES = 'telegraph_services',
  TENT_AND_AWNING_SHOPS = 'tent_and_awning_shops',
  TESTING_LABORATORIES = 'testing_laboratories',
  THEATRICAL_TICKET_AGENCIES = 'theatrical_ticket_agencies',
  TIMESHARES = 'timeshares',
  TIRE_RETREADING_AND_REPAIR = 'tire_retreading_and_repair',
  TOLLS_BRIDGE_FEES = 'tolls_bridge_fees',
  TOURIST_ATTRACTIONS_AND_EXHIBITS = 'tourist_attractions_and_exhibits',
  TOWING_SERVICES = 'towing_services',
  TRAILER_PARKS_CAMPGROUNDS = 'trailer_parks_campgrounds',
  TRANSPORTATION_SERVICES = 'transportation_services',
  TRAVEL_AGENCIES_TOUR_OPERATORS = 'travel_agencies_tour_operators',
  TRUCK_STOP_ITERATION = 'truck_stop_iteration',
  TRUCK_UTILITY_TRAILER_RENTALS = 'truck_utility_trailer_rentals',
  TYPESETTING_PLATE_MAKING_AND_RELATED_SERVICES = 'typesetting_plate_making_and_related_services',
  TYPEWRITER_STORES = 'typewriter_stores',
  U_S_FEDERAL_GOVERNMENT_AGENCIES_OR_DEPARTMENTS = 'u_s_federal_government_agencies_or_departments',
  UNIFORMS_COMMERCIAL_CLOTHING = 'uniforms_commercial_clothing',
  USED_MERCHANDISE_AND_SECONDHAND_STORES = 'used_merchandise_and_secondhand_stores',
  UTILITIES = 'utilities',
  VARIETY_STORES = 'variety_stores',
  VETERINARY_SERVICES = 'veterinary_services',
  VIDEO_AMUSEMENT_GAME_SUPPLIES = 'video_amusement_game_supplies',
  VIDEO_GAME_ARCADES = 'video_game_arcades',
  VIDEO_TAPE_RENTAL_STORES = 'video_tape_rental_stores',
  VOCATIONAL_TRADE_SCHOOLS = 'vocational_trade_schools',
  WATCH_JEWELRY_REPAIR = 'watch_jewelry_repair',
  WELDING_REPAIR = 'welding_repair',
  WHOLESALE_CLUBS = 'wholesale_clubs',
  WIG_AND_TOUPEE_STORES = 'wig_and_toupee_stores',
  WIRES_MONEY_ORDERS = 'wires_money_orders',
  WOMENS_ACCESSORY_AND_SPECIALTY_SHOPS = 'womens_accessory_and_specialty_shops',
  WOMENS_READY_TO_WEAR_STORES = 'womens_ready_to_wear_stores',
  WRECKING_AND_SALVAGE_YARDS = 'wrecking_and_salvage_yards'
}

export type SpendingLimits3ListItemInput = {
  amount: Scalars['Int'];
  categories?: Maybe<Array<Maybe<Categories2ListItem>>>;
  interval: Interval8;
};

export enum Categories2ListItem {
  AC_REFRIGERATION_REPAIR = 'ac_refrigeration_repair',
  ACCOUNTING_BOOKKEEPING_SERVICES = 'accounting_bookkeeping_services',
  ADVERTISING_SERVICES = 'advertising_services',
  AGRICULTURAL_COOPERATIVE = 'agricultural_cooperative',
  AIRLINES_AIR_CARRIERS = 'airlines_air_carriers',
  AIRPORTS_FLYING_FIELDS = 'airports_flying_fields',
  AMBULANCE_SERVICES = 'ambulance_services',
  AMUSEMENT_PARKS_CARNIVALS = 'amusement_parks_carnivals',
  ANTIQUE_REPRODUCTIONS = 'antique_reproductions',
  ANTIQUE_SHOPS = 'antique_shops',
  AQUARIUMS = 'aquariums',
  ARCHITECTURAL_SURVEYING_SERVICES = 'architectural_surveying_services',
  ART_DEALERS_AND_GALLERIES = 'art_dealers_and_galleries',
  ARTISTS_SUPPLY_AND_CRAFT_SHOPS = 'artists_supply_and_craft_shops',
  AUTO_AND_HOME_SUPPLY_STORES = 'auto_and_home_supply_stores',
  AUTO_BODY_REPAIR_SHOPS = 'auto_body_repair_shops',
  AUTO_PAINT_SHOPS = 'auto_paint_shops',
  AUTO_SERVICE_SHOPS = 'auto_service_shops',
  AUTOMATED_CASH_DISBURSE = 'automated_cash_disburse',
  AUTOMATED_FUEL_DISPENSERS = 'automated_fuel_dispensers',
  AUTOMOBILE_ASSOCIATIONS = 'automobile_associations',
  AUTOMOTIVE_PARTS_AND_ACCESSORIES_STORES = 'automotive_parts_and_accessories_stores',
  AUTOMOTIVE_TIRE_STORES = 'automotive_tire_stores',
  BAIL_AND_BOND_PAYMENTS = 'bail_and_bond_payments',
  BAKERIES = 'bakeries',
  BANDS_ORCHESTRAS = 'bands_orchestras',
  BARBER_AND_BEAUTY_SHOPS = 'barber_and_beauty_shops',
  BETTING_CASINO_GAMBLING = 'betting_casino_gambling',
  BICYCLE_SHOPS = 'bicycle_shops',
  BILLIARD_POOL_ESTABLISHMENTS = 'billiard_pool_establishments',
  BOAT_DEALERS = 'boat_dealers',
  BOAT_RENTALS_AND_LEASES = 'boat_rentals_and_leases',
  BOOK_STORES = 'book_stores',
  BOOKS_PERIODICALS_AND_NEWSPAPERS = 'books_periodicals_and_newspapers',
  BOWLING_ALLEYS = 'bowling_alleys',
  BUS_LINES = 'bus_lines',
  BUSINESS_SECRETARIAL_SCHOOLS = 'business_secretarial_schools',
  BUYING_SHOPPING_SERVICES = 'buying_shopping_services',
  CABLE_SATELLITE_AND_OTHER_PAY_TELEVISION_AND_RADIO = 'cable_satellite_and_other_pay_television_and_radio',
  CAMERA_AND_PHOTOGRAPHIC_SUPPLY_STORES = 'camera_and_photographic_supply_stores',
  CANDY_NUT_AND_CONFECTIONERY_STORES = 'candy_nut_and_confectionery_stores',
  CAR_AND_TRUCK_DEALERS_NEW_USED = 'car_and_truck_dealers_new_used',
  CAR_AND_TRUCK_DEALERS_USED_ONLY = 'car_and_truck_dealers_used_only',
  CAR_RENTAL_AGENCIES = 'car_rental_agencies',
  CAR_WASHES = 'car_washes',
  CARPENTRY_SERVICES = 'carpentry_services',
  CARPET_UPHOLSTERY_CLEANING = 'carpet_upholstery_cleaning',
  CATERERS = 'caterers',
  CHARITABLE_AND_SOCIAL_SERVICE_ORGANIZATIONS_FUNDRAISING = 'charitable_and_social_service_organizations_fundraising',
  CHEMICALS_AND_ALLIED_PRODUCTS = 'chemicals_and_allied_products',
  CHILD_CARE_SERVICES = 'child_care_services',
  CHILDRENS_AND_INFANTS_WEAR_STORES = 'childrens_and_infants_wear_stores',
  CHIROPODISTS_PODIATRISTS = 'chiropodists_podiatrists',
  CHIROPRACTORS = 'chiropractors',
  CIGAR_STORES_AND_STANDS = 'cigar_stores_and_stands',
  CIVIC_SOCIAL_FRATERNAL_ASSOCIATIONS = 'civic_social_fraternal_associations',
  CLEANING_AND_MAINTENANCE = 'cleaning_and_maintenance',
  CLOTHING_RENTAL = 'clothing_rental',
  COLLEGES_UNIVERSITIES = 'colleges_universities',
  COMMERCIAL_EQUIPMENT = 'commercial_equipment',
  COMMERCIAL_FOOTWEAR = 'commercial_footwear',
  COMMERCIAL_PHOTOGRAPHY_ART_AND_GRAPHICS = 'commercial_photography_art_and_graphics',
  COMMUTER_TRANSPORT_AND_FERRIES = 'commuter_transport_and_ferries',
  COMPUTER_NETWORK_SERVICES = 'computer_network_services',
  COMPUTER_PROGRAMMING = 'computer_programming',
  COMPUTER_REPAIR = 'computer_repair',
  COMPUTER_SOFTWARE_STORES = 'computer_software_stores',
  COMPUTERS_PERIPHERALS_AND_SOFTWARE = 'computers_peripherals_and_software',
  CONCRETE_WORK_SERVICES = 'concrete_work_services',
  CONSTRUCTION_MATERIALS = 'construction_materials',
  CONSULTING_PUBLIC_RELATIONS = 'consulting_public_relations',
  CORRESPONDENCE_SCHOOLS = 'correspondence_schools',
  COSMETIC_STORES = 'cosmetic_stores',
  COUNSELING_SERVICES = 'counseling_services',
  COUNTRY_CLUBS = 'country_clubs',
  COURIER_SERVICES = 'courier_services',
  COURT_COSTS = 'court_costs',
  CREDIT_REPORTING_AGENCIES = 'credit_reporting_agencies',
  CRUISE_LINES = 'cruise_lines',
  DAIRY_PRODUCTS_STORES = 'dairy_products_stores',
  DANCE_HALL_STUDIOS_SCHOOLS = 'dance_hall_studios_schools',
  DATING_ESCORT_SERVICES = 'dating_escort_services',
  DENTISTS_ORTHODONTISTS = 'dentists_orthodontists',
  DEPARTMENT_STORES = 'department_stores',
  DETECTIVE_AGENCIES = 'detective_agencies',
  DIGITAL_GOODS_APPLICATIONS = 'digital_goods_applications',
  DIGITAL_GOODS_GAMES = 'digital_goods_games',
  DIGITAL_GOODS_LARGE_VOLUME = 'digital_goods_large_volume',
  DIGITAL_GOODS_MEDIA = 'digital_goods_media',
  DIRECT_MARKETING_CATALOG_MERCHANT = 'direct_marketing_catalog_merchant',
  DIRECT_MARKETING_COMBINATION_CATALOG_AND_RETAIL_MERCHANT = 'direct_marketing_combination_catalog_and_retail_merchant',
  DIRECT_MARKETING_INBOUND_TELEMARKETING = 'direct_marketing_inbound_telemarketing',
  DIRECT_MARKETING_INSURANCE_SERVICES = 'direct_marketing_insurance_services',
  DIRECT_MARKETING_OTHER = 'direct_marketing_other',
  DIRECT_MARKETING_OUTBOUND_TELEMARKETING = 'direct_marketing_outbound_telemarketing',
  DIRECT_MARKETING_SUBSCRIPTION = 'direct_marketing_subscription',
  DIRECT_MARKETING_TRAVEL = 'direct_marketing_travel',
  DISCOUNT_STORES = 'discount_stores',
  DOCTORS = 'doctors',
  DOOR_TO_DOOR_SALES = 'door_to_door_sales',
  DRAPERY_WINDOW_COVERING_AND_UPHOLSTERY_STORES = 'drapery_window_covering_and_upholstery_stores',
  DRINKING_PLACES = 'drinking_places',
  DRUG_STORES_AND_PHARMACIES = 'drug_stores_and_pharmacies',
  DRUGS_DRUG_PROPRIETARIES_AND_DRUGGIST_SUNDRIES = 'drugs_drug_proprietaries_and_druggist_sundries',
  DRY_CLEANERS = 'dry_cleaners',
  DURABLE_GOODS = 'durable_goods',
  DUTY_FREE_STORES = 'duty_free_stores',
  EATING_PLACES_RESTAURANTS = 'eating_places_restaurants',
  EDUCATIONAL_SERVICES = 'educational_services',
  ELECTRIC_RAZOR_STORES = 'electric_razor_stores',
  ELECTRICAL_PARTS_AND_EQUIPMENT = 'electrical_parts_and_equipment',
  ELECTRICAL_SERVICES = 'electrical_services',
  ELECTRONICS_REPAIR_SHOPS = 'electronics_repair_shops',
  ELECTRONICS_STORES = 'electronics_stores',
  ELEMENTARY_SECONDARY_SCHOOLS = 'elementary_secondary_schools',
  EMPLOYMENT_TEMP_AGENCIES = 'employment_temp_agencies',
  EQUIPMENT_RENTAL = 'equipment_rental',
  EXTERMINATING_SERVICES = 'exterminating_services',
  FAMILY_CLOTHING_STORES = 'family_clothing_stores',
  FAST_FOOD_RESTAURANTS = 'fast_food_restaurants',
  FINANCIAL_INSTITUTIONS = 'financial_institutions',
  FINES_GOVERNMENT_ADMINISTRATIVE_ENTITIES = 'fines_government_administrative_entities',
  FIREPLACE_FIREPLACE_SCREENS_AND_ACCESSORIES_STORES = 'fireplace_fireplace_screens_and_accessories_stores',
  FLOOR_COVERING_STORES = 'floor_covering_stores',
  FLORISTS = 'florists',
  FLORISTS_SUPPLIES_NURSERY_STOCK_AND_FLOWERS = 'florists_supplies_nursery_stock_and_flowers',
  FREEZER_AND_LOCKER_MEAT_PROVISIONERS = 'freezer_and_locker_meat_provisioners',
  FUEL_DEALERS_NON_AUTOMOTIVE = 'fuel_dealers_non_automotive',
  FUNERAL_SERVICES_CREMATORIES = 'funeral_services_crematories',
  FURNITURE_HOME_FURNISHINGS_AND_EQUIPMENT_STORES_EXCEPT_APPLIANCES = 'furniture_home_furnishings_and_equipment_stores_except_appliances',
  FURNITURE_REPAIR_REFINISHING = 'furniture_repair_refinishing',
  FURRIERS_AND_FUR_SHOPS = 'furriers_and_fur_shops',
  GENERAL_SERVICES = 'general_services',
  GIFT_CARD_NOVELTY_AND_SOUVENIR_SHOPS = 'gift_card_novelty_and_souvenir_shops',
  GLASS_PAINT_AND_WALLPAPER_STORES = 'glass_paint_and_wallpaper_stores',
  GLASSWARE_CRYSTAL_STORES = 'glassware_crystal_stores',
  GOLF_COURSES_PUBLIC = 'golf_courses_public',
  GOVERNMENT_SERVICES = 'government_services',
  GROCERY_STORES_SUPERMARKETS = 'grocery_stores_supermarkets',
  HARDWARE_EQUIPMENT_AND_SUPPLIES = 'hardware_equipment_and_supplies',
  HARDWARE_STORES = 'hardware_stores',
  HEALTH_AND_BEAUTY_SPAS = 'health_and_beauty_spas',
  HEARING_AIDS_SALES_AND_SUPPLIES = 'hearing_aids_sales_and_supplies',
  HEATING_PLUMBING_A_C = 'heating_plumbing_a_c',
  HOBBY_TOY_AND_GAME_SHOPS = 'hobby_toy_and_game_shops',
  HOME_SUPPLY_WAREHOUSE_STORES = 'home_supply_warehouse_stores',
  HOSPITALS = 'hospitals',
  HOTELS_MOTELS_AND_RESORTS = 'hotels_motels_and_resorts',
  HOUSEHOLD_APPLIANCE_STORES = 'household_appliance_stores',
  INDUSTRIAL_SUPPLIES = 'industrial_supplies',
  INFORMATION_RETRIEVAL_SERVICES = 'information_retrieval_services',
  INSURANCE_DEFAULT = 'insurance_default',
  INSURANCE_UNDERWRITING_PREMIUMS = 'insurance_underwriting_premiums',
  INTRA_COMPANY_PURCHASES = 'intra_company_purchases',
  JEWELRY_STORES_WATCHES_CLOCKS_AND_SILVERWARE_STORES = 'jewelry_stores_watches_clocks_and_silverware_stores',
  LANDSCAPING_SERVICES = 'landscaping_services',
  LAUNDRIES = 'laundries',
  LAUNDRY_CLEANING_SERVICES = 'laundry_cleaning_services',
  LEGAL_SERVICES_ATTORNEYS = 'legal_services_attorneys',
  LUGGAGE_AND_LEATHER_GOODS_STORES = 'luggage_and_leather_goods_stores',
  LUMBER_BUILDING_MATERIALS_STORES = 'lumber_building_materials_stores',
  MANUAL_CASH_DISBURSE = 'manual_cash_disburse',
  MARINAS_SERVICE_AND_SUPPLIES = 'marinas_service_and_supplies',
  MASONRY_STONEWORK_AND_PLASTER = 'masonry_stonework_and_plaster',
  MASSAGE_PARLORS = 'massage_parlors',
  MEDICAL_AND_DENTAL_LABS = 'medical_and_dental_labs',
  MEDICAL_DENTAL_OPHTHALMIC_AND_HOSPITAL_EQUIPMENT_AND_SUPPLIES = 'medical_dental_ophthalmic_and_hospital_equipment_and_supplies',
  MEDICAL_SERVICES = 'medical_services',
  MEMBERSHIP_ORGANIZATIONS = 'membership_organizations',
  MENS_AND_BOYS_CLOTHING_AND_ACCESSORIES_STORES = 'mens_and_boys_clothing_and_accessories_stores',
  MENS_WOMENS_CLOTHING_STORES = 'mens_womens_clothing_stores',
  METAL_SERVICE_CENTERS = 'metal_service_centers',
  MISCELLANEOUS = 'miscellaneous',
  MISCELLANEOUS_APPAREL_AND_ACCESSORY_SHOPS = 'miscellaneous_apparel_and_accessory_shops',
  MISCELLANEOUS_AUTO_DEALERS = 'miscellaneous_auto_dealers',
  MISCELLANEOUS_BUSINESS_SERVICES = 'miscellaneous_business_services',
  MISCELLANEOUS_FOOD_STORES = 'miscellaneous_food_stores',
  MISCELLANEOUS_GENERAL_MERCHANDISE = 'miscellaneous_general_merchandise',
  MISCELLANEOUS_GENERAL_SERVICES = 'miscellaneous_general_services',
  MISCELLANEOUS_HOME_FURNISHING_SPECIALTY_STORES = 'miscellaneous_home_furnishing_specialty_stores',
  MISCELLANEOUS_PUBLISHING_AND_PRINTING = 'miscellaneous_publishing_and_printing',
  MISCELLANEOUS_RECREATION_SERVICES = 'miscellaneous_recreation_services',
  MISCELLANEOUS_REPAIR_SHOPS = 'miscellaneous_repair_shops',
  MISCELLANEOUS_SPECIALTY_RETAIL = 'miscellaneous_specialty_retail',
  MOBILE_HOME_DEALERS = 'mobile_home_dealers',
  MOTION_PICTURE_THEATERS = 'motion_picture_theaters',
  MOTOR_FREIGHT_CARRIERS_AND_TRUCKING = 'motor_freight_carriers_and_trucking',
  MOTOR_HOMES_DEALERS = 'motor_homes_dealers',
  MOTOR_VEHICLE_SUPPLIES_AND_NEW_PARTS = 'motor_vehicle_supplies_and_new_parts',
  MOTORCYCLE_SHOPS_AND_DEALERS = 'motorcycle_shops_and_dealers',
  MOTORCYCLE_SHOPS_DEALERS = 'motorcycle_shops_dealers',
  MUSIC_STORES_MUSICAL_INSTRUMENTS_PIANOS_AND_SHEET_MUSIC = 'music_stores_musical_instruments_pianos_and_sheet_music',
  NEWS_DEALERS_AND_NEWSSTANDS = 'news_dealers_and_newsstands',
  NON_FI_MONEY_ORDERS = 'non_fi_money_orders',
  NON_FI_STORED_VALUE_CARD_PURCHASE_LOAD = 'non_fi_stored_value_card_purchase_load',
  NONDURABLE_GOODS = 'nondurable_goods',
  NURSERIES_LAWN_AND_GARDEN_SUPPLY_STORES = 'nurseries_lawn_and_garden_supply_stores',
  NURSING_PERSONAL_CARE = 'nursing_personal_care',
  OFFICE_AND_COMMERCIAL_FURNITURE = 'office_and_commercial_furniture',
  OPTICIANS_EYEGLASSES = 'opticians_eyeglasses',
  OPTOMETRISTS_OPHTHALMOLOGIST = 'optometrists_ophthalmologist',
  ORTHOPEDIC_GOODS_PROSTHETIC_DEVICES = 'orthopedic_goods_prosthetic_devices',
  OSTEOPATHS = 'osteopaths',
  PACKAGE_STORES_BEER_WINE_AND_LIQUOR = 'package_stores_beer_wine_and_liquor',
  PAINTS_VARNISHES_AND_SUPPLIES = 'paints_varnishes_and_supplies',
  PARKING_LOTS_GARAGES = 'parking_lots_garages',
  PASSENGER_RAILWAYS = 'passenger_railways',
  PAWN_SHOPS = 'pawn_shops',
  PET_SHOPS_PET_FOOD_AND_SUPPLIES = 'pet_shops_pet_food_and_supplies',
  PETROLEUM_AND_PETROLEUM_PRODUCTS = 'petroleum_and_petroleum_products',
  PHOTO_DEVELOPING = 'photo_developing',
  PHOTOGRAPHIC_PHOTOCOPY_MICROFILM_EQUIPMENT_AND_SUPPLIES = 'photographic_photocopy_microfilm_equipment_and_supplies',
  PHOTOGRAPHIC_STUDIOS = 'photographic_studios',
  PICTURE_VIDEO_PRODUCTION = 'picture_video_production',
  PIECE_GOODS_NOTIONS_AND_OTHER_DRY_GOODS = 'piece_goods_notions_and_other_dry_goods',
  PLUMBING_HEATING_EQUIPMENT_AND_SUPPLIES = 'plumbing_heating_equipment_and_supplies',
  POLITICAL_ORGANIZATIONS = 'political_organizations',
  POSTAL_SERVICES_GOVERNMENT_ONLY = 'postal_services_government_only',
  PRECIOUS_STONES_AND_METALS_WATCHES_AND_JEWELRY = 'precious_stones_and_metals_watches_and_jewelry',
  PROFESSIONAL_SERVICES = 'professional_services',
  PUBLIC_WAREHOUSING_AND_STORAGE = 'public_warehousing_and_storage',
  QUICK_COPY_REPRO_AND_BLUEPRINT = 'quick_copy_repro_and_blueprint',
  RAILROADS = 'railroads',
  REAL_ESTATE_AGENTS_AND_MANAGERS_RENTALS = 'real_estate_agents_and_managers_rentals',
  RECORD_STORES = 'record_stores',
  RECREATIONAL_VEHICLE_RENTALS = 'recreational_vehicle_rentals',
  RELIGIOUS_GOODS_STORES = 'religious_goods_stores',
  RELIGIOUS_ORGANIZATIONS = 'religious_organizations',
  ROOFING_SIDING_SHEET_METAL = 'roofing_siding_sheet_metal',
  SECRETARIAL_SUPPORT_SERVICES = 'secretarial_support_services',
  SECURITY_BROKERS_DEALERS = 'security_brokers_dealers',
  SERVICE_STATIONS = 'service_stations',
  SEWING_NEEDLEWORK_FABRIC_AND_PIECE_GOODS_STORES = 'sewing_needlework_fabric_and_piece_goods_stores',
  SHOE_REPAIR_HAT_CLEANING = 'shoe_repair_hat_cleaning',
  SHOE_STORES = 'shoe_stores',
  SMALL_APPLIANCE_REPAIR = 'small_appliance_repair',
  SNOWMOBILE_DEALERS = 'snowmobile_dealers',
  SPECIAL_TRADE_SERVICES = 'special_trade_services',
  SPECIALTY_CLEANING = 'specialty_cleaning',
  SPORTING_GOODS_STORES = 'sporting_goods_stores',
  SPORTING_RECREATION_CAMPS = 'sporting_recreation_camps',
  SPORTS_AND_RIDING_APPAREL_STORES = 'sports_and_riding_apparel_stores',
  SPORTS_CLUBS_FIELDS = 'sports_clubs_fields',
  STAMP_AND_COIN_STORES = 'stamp_and_coin_stores',
  STATIONARY_OFFICE_SUPPLIES_PRINTING_AND_WRITING_PAPER = 'stationary_office_supplies_printing_and_writing_paper',
  STATIONERY_STORES_OFFICE_AND_SCHOOL_SUPPLY_STORES = 'stationery_stores_office_and_school_supply_stores',
  SWIMMING_POOLS_SALES = 'swimming_pools_sales',
  T_UI_TRAVEL_GERMANY = 't_ui_travel_germany',
  TAILORS_ALTERATIONS = 'tailors_alterations',
  TAX_PAYMENTS_GOVERNMENT_AGENCIES = 'tax_payments_government_agencies',
  TAX_PREPARATION_SERVICES = 'tax_preparation_services',
  TAXICABS_LIMOUSINES = 'taxicabs_limousines',
  TELECOMMUNICATION_EQUIPMENT_AND_TELEPHONE_SALES = 'telecommunication_equipment_and_telephone_sales',
  TELECOMMUNICATION_SERVICES = 'telecommunication_services',
  TELEGRAPH_SERVICES = 'telegraph_services',
  TENT_AND_AWNING_SHOPS = 'tent_and_awning_shops',
  TESTING_LABORATORIES = 'testing_laboratories',
  THEATRICAL_TICKET_AGENCIES = 'theatrical_ticket_agencies',
  TIMESHARES = 'timeshares',
  TIRE_RETREADING_AND_REPAIR = 'tire_retreading_and_repair',
  TOLLS_BRIDGE_FEES = 'tolls_bridge_fees',
  TOURIST_ATTRACTIONS_AND_EXHIBITS = 'tourist_attractions_and_exhibits',
  TOWING_SERVICES = 'towing_services',
  TRAILER_PARKS_CAMPGROUNDS = 'trailer_parks_campgrounds',
  TRANSPORTATION_SERVICES = 'transportation_services',
  TRAVEL_AGENCIES_TOUR_OPERATORS = 'travel_agencies_tour_operators',
  TRUCK_STOP_ITERATION = 'truck_stop_iteration',
  TRUCK_UTILITY_TRAILER_RENTALS = 'truck_utility_trailer_rentals',
  TYPESETTING_PLATE_MAKING_AND_RELATED_SERVICES = 'typesetting_plate_making_and_related_services',
  TYPEWRITER_STORES = 'typewriter_stores',
  U_S_FEDERAL_GOVERNMENT_AGENCIES_OR_DEPARTMENTS = 'u_s_federal_government_agencies_or_departments',
  UNIFORMS_COMMERCIAL_CLOTHING = 'uniforms_commercial_clothing',
  USED_MERCHANDISE_AND_SECONDHAND_STORES = 'used_merchandise_and_secondhand_stores',
  UTILITIES = 'utilities',
  VARIETY_STORES = 'variety_stores',
  VETERINARY_SERVICES = 'veterinary_services',
  VIDEO_AMUSEMENT_GAME_SUPPLIES = 'video_amusement_game_supplies',
  VIDEO_GAME_ARCADES = 'video_game_arcades',
  VIDEO_TAPE_RENTAL_STORES = 'video_tape_rental_stores',
  VOCATIONAL_TRADE_SCHOOLS = 'vocational_trade_schools',
  WATCH_JEWELRY_REPAIR = 'watch_jewelry_repair',
  WELDING_REPAIR = 'welding_repair',
  WHOLESALE_CLUBS = 'wholesale_clubs',
  WIG_AND_TOUPEE_STORES = 'wig_and_toupee_stores',
  WIRES_MONEY_ORDERS = 'wires_money_orders',
  WOMENS_ACCESSORY_AND_SPECIALTY_SHOPS = 'womens_accessory_and_specialty_shops',
  WOMENS_READY_TO_WEAR_STORES = 'womens_ready_to_wear_stores',
  WRECKING_AND_SALVAGE_YARDS = 'wrecking_and_salvage_yards'
}

export enum Interval8 {
  ALL_TIME = 'all_time',
  DAILY = 'daily',
  MONTHLY = 'monthly',
  PER_AUTHORIZATION = 'per_authorization',
  WEEKLY = 'weekly',
  YEARLY = 'yearly'
}

export enum Status30 {
  ACTIVE = 'active',
  INACTIVE = 'inactive'
}

export type V1IssuingCardholder2Input = {
  /** The cardholder's billing address. */
  billing?: Maybe<BillingInput>;
  /** Additional information about a `company` cardholder. */
  company?: Maybe<CompanyParamInput>;
  /** The cardholder's email address. */
  email?: Maybe<Scalars['String']>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Additional information about an `individual` cardholder. */
  individual?: Maybe<IndividualParamInput>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
  /** The cardholder's phone number. */
  phoneNumber?: Maybe<Scalars['String']>;
  /** Rules that control spending across this cardholder's cards. Refer to our [documentation](https://stripe.com/docs/issuing/controls/spending-controls) for more details. */
  spendingControls?: Maybe<AuthorizationControlsParamV2Input>;
  /** Specifies whether to permit authorizations on this cardholder's cards. */
  status?: Maybe<Status31>;
};

export enum Status31 {
  ACTIVE = 'active',
  INACTIVE = 'inactive'
}

export type V1IssuingCards3Input = {
  /** The [Cardholder](https://stripe.com/docs/api#issuing_cardholder_object) object with which the card will be associated. */
  cardholder?: Maybe<Scalars['String']>;
  /** The currency for the card. */
  currency: Scalars['String'];
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
  /** The card this is meant to be a replacement for (if any). */
  replacementFor?: Maybe<Scalars['String']>;
  /** If `replacement_for` is specified, this should indicate why that card is being replaced. */
  replacementReason?: Maybe<ReplacementReason2>;
  /** The address where the card will be shipped. */
  shipping?: Maybe<ShippingSpecsInput>;
  /** Rules that control spending for this card. Refer to our [documentation](https://stripe.com/docs/issuing/controls/spending-controls) for more details. */
  spendingControls?: Maybe<AuthorizationControlsParamInput>;
  /** Whether authorizations can be approved on this card. Defaults to `inactive`. */
  status?: Maybe<Status32>;
  /** The type of card to issue. Possible values are `physical` or `virtual`. */
  type: Type40;
};

export enum ReplacementReason2 {
  DAMAGED = 'damaged',
  EXPIRED = 'expired',
  LOST = 'lost',
  STOLEN = 'stolen'
}

/** The address where the card will be shipped. */
export type ShippingSpecsInput = {
  address: RequiredAddressInput;
  name: Scalars['String'];
  service?: Maybe<Service2>;
  type?: Maybe<Type39>;
};

export enum Service2 {
  EXPRESS = 'express',
  PRIORITY = 'priority',
  STANDARD = 'standard'
}

export enum Type39 {
  BULK = 'bulk',
  INDIVIDUAL = 'individual'
}

/** Rules that control spending for this card. Refer to our [documentation](https://stripe.com/docs/issuing/controls/spending-controls) for more details. */
export type AuthorizationControlsParamInput = {
  allowedCategories?: Maybe<Array<Maybe<AllowedCategories2ListItem>>>;
  blockedCategories?: Maybe<Array<Maybe<BlockedCategories2ListItem>>>;
  spendingLimits?: Maybe<Array<Maybe<SpendingLimits3ListItemInput>>>;
};

export enum Status32 {
  ACTIVE = 'active',
  INACTIVE = 'inactive'
}

export enum Type40 {
  PHYSICAL = 'physical',
  VIRTUAL = 'virtual'
}

export type V1IssuingCard2Input = {
  /** Reason why the `status` of this card is `canceled`. */
  cancellationReason?: Maybe<CancellationReason4>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
  /** Rules that control spending for this card. Refer to our [documentation](https://stripe.com/docs/issuing/controls/spending-controls) for more details. */
  spendingControls?: Maybe<AuthorizationControlsParamInput>;
  /** Dictates whether authorizations can be approved on this card. If this card is being canceled because it was lost or stolen, this information should be provided as `cancellation_reason`. */
  status?: Maybe<Status33>;
};

export enum CancellationReason4 {
  LOST = 'lost',
  STOLEN = 'stolen'
}

export enum Status33 {
  ACTIVE = 'active',
  CANCELED = 'canceled',
  INACTIVE = 'inactive'
}

export type V1IssuingDisputes2Input = {
  /** Evidence provided for the dispute. */
  evidence?: Maybe<EvidenceParamInput>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
  /** The ID of the issuing transaction to create a dispute for. */
  transaction: Scalars['String'];
};

/** Evidence provided for the dispute. */
export type EvidenceParamInput = {
  canceled?: Maybe<Scalars['JSON']>;
  duplicate?: Maybe<Scalars['JSON']>;
  fraudulent?: Maybe<Scalars['JSON']>;
  merchandiseNotAsDescribed?: Maybe<Scalars['JSON']>;
  notReceived?: Maybe<Scalars['JSON']>;
  other?: Maybe<Scalars['JSON']>;
  reason?: Maybe<Reason15>;
  serviceNotAsDescribed?: Maybe<Scalars['JSON']>;
};

export enum Reason15 {
  CANCELED = 'canceled',
  DUPLICATE = 'duplicate',
  FRAUDULENT = 'fraudulent',
  MERCHANDISE_NOT_AS_DESCRIBED = 'merchandise_not_as_described',
  NOT_RECEIVED = 'not_received',
  OTHER = 'other',
  SERVICE_NOT_AS_DESCRIBED = 'service_not_as_described'
}

export type V1IssuingDispute2Input = {
  /** Evidence provided for the dispute. */
  evidence?: Maybe<EvidenceParamInput>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
};

export type V1IssuingDisputeSubmitInput = {
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
};

export type V1IssuingSettlement2Input = {
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
};

export type V1IssuingTransaction2Input = {
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
};

export type V1Orders3Input = {
  /** A coupon code that represents a discount to be applied to this order. Must be one-time duration and in same currency as the order. An order can have multiple coupons. */
  coupon?: Maybe<Scalars['String']>;
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency: Scalars['String'];
  /** The ID of an existing customer to use for this order. If provided, the customer email and shipping address will be used to create the order. Subsequently, the customer will also be charged to pay the order. If `email` or `shipping` are also provided, they will override the values retrieved from the customer object. */
  customer?: Maybe<Scalars['String']>;
  /** The email address of the customer placing the order. */
  email?: Maybe<Scalars['String']>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** List of items constituting the order. An order can have up to 25 items. */
  items?: Maybe<Array<Maybe<Items7ListItemInput>>>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
  /** Shipping address for the order. Required if any of the SKUs are for products that have `shippable` set to true. */
  shipping?: Maybe<Shipping12Input>;
};

export type Items7ListItemInput = {
  amount?: Maybe<Scalars['Int']>;
  currency?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  parent?: Maybe<Scalars['String']>;
  quantity?: Maybe<Scalars['Int']>;
  type?: Maybe<Type46>;
};

export enum Type46 {
  DISCOUNT = 'discount',
  SHIPPING = 'shipping',
  SKU = 'sku',
  TAX = 'tax'
}

/** Shipping address for the order. Required if any of the SKUs are for products that have `shippable` set to true. */
export type Shipping12Input = {
  address: OptionalFieldsAddressInput;
  name: Scalars['String'];
  phone?: Maybe<Scalars['String']>;
};

export type V1Order2Input = {
  /** A coupon code that represents a discount to be applied to this order. Must be one-time duration and in same currency as the order. An order can have multiple coupons. */
  coupon?: Maybe<Scalars['String']>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
  /** The shipping method to select for fulfilling this order. If specified, must be one of the `id`s of a shipping method in the `shipping_methods` array. If specified, will overwrite the existing selected shipping method, updating `items` as necessary. */
  selectedShippingMethod?: Maybe<Scalars['String']>;
  /** Tracking information once the order has been fulfilled. */
  shipping?: Maybe<ShippingTrackingParamsInput>;
  /** Current order status. One of `created`, `paid`, `canceled`, `fulfilled`, or `returned`. More detail in the [Orders Guide](https://stripe.com/docs/orders/guide#understanding-order-statuses). */
  status?: Maybe<Status37>;
};

/** Tracking information once the order has been fulfilled. */
export type ShippingTrackingParamsInput = {
  carrier: Scalars['String'];
  trackingNumber: Scalars['String'];
};

export enum Status37 {
  CANCELED = 'canceled',
  CREATED = 'created',
  FULFILLED = 'fulfilled',
  PAID = 'paid',
  RETURNED = 'returned'
}

export type V1OrderPayInput = {
  /** A fee in %s that will be applied to the order and transferred to the application owner's Stripe account. The request must be made with an OAuth key or the `Stripe-Account` header in order to take an application fee. For more information, see the application fees [documentation](https://stripe.com/docs/connect/direct-charges#collecting-fees). */
  applicationFee?: Maybe<Scalars['Int']>;
  /** The ID of an existing customer that will be charged for this order. If no customer was attached to the order at creation, either `source` or `customer` is required. Otherwise, the specified customer will be charged instead of the one attached to the order. */
  customer?: Maybe<Scalars['String']>;
  /** The email address of the customer placing the order. Required if not previously specified for the order. */
  email?: Maybe<Scalars['String']>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
  /** A [Token](https://stripe.com/docs/api#tokens)'s or a [Source](https://stripe.com/docs/api#sources)'s ID, as returned by [Elements](https://stripe.com/docs/elements). If no customer was attached to the order at creation, either `source` or `customer` is required. Otherwise, the specified source will be charged intead of the customer attached to the order. */
  source?: Maybe<Scalars['String']>;
};

export type V1OrderReturns3Input = {
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** List of items to return. */
  items?: Maybe<Scalars['JSON']>;
};

export type V1PaymentIntents2Input = {
  /** Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99). */
  amount: Scalars['Int'];
  /** The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. The amount of the application fee collected will be capped at the total payment amount. For more information, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts). */
  applicationFeeAmount?: Maybe<Scalars['Int']>;
  /** Controls when the funds will be captured from the customer's account. */
  captureMethod?: Maybe<CaptureMethod2>;
  /** Set to `true` to attempt to [confirm](https://stripe.com/docs/api/payment_intents/confirm) this PaymentIntent immediately. This parameter defaults to `false`. When creating and confirming a PaymentIntent at the same time, parameters available in the [confirm](https://stripe.com/docs/api/payment_intents/confirm) API may also be provided. */
  confirm?: Maybe<Scalars['Boolean']>;
  confirmationMethod?: Maybe<ConfirmationMethod>;
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency: Scalars['String'];
  /**
   * ID of the Customer this PaymentIntent belongs to, if one exists.
   *
   * Payment methods attached to other Customers cannot be used with this PaymentIntent.
   *
   * If present in combination with [setup_future_usage](https://stripe.com/docs/api#payment_intent_object-setup_future_usage), this PaymentIntent's payment method will be attached to the Customer after the PaymentIntent has been confirmed and any required actions from the user are complete.
   */
  customer?: Maybe<Scalars['String']>;
  /** An arbitrary string attached to the object. Often useful for displaying to users. */
  description?: Maybe<Scalars['String']>;
  /** Set to `true` to fail the payment attempt if the PaymentIntent transitions into `requires_action`. This parameter is intended for simpler integrations that do not handle customer actions, like [saving cards without authentication](https://stripe.com/docs/payments/save-card-without-authentication). This parameter can only be used with [`confirm=true`](https://stripe.com/docs/api/payment_intents/create#create_payment_intent-confirm). */
  errorOnRequiresAction?: Maybe<Scalars['Boolean']>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** ID of the mandate to be used for this payment. This parameter can only be used with [`confirm=true`](https://stripe.com/docs/api/payment_intents/create#create_payment_intent-confirm). */
  mandate?: Maybe<Scalars['String']>;
  /** This hash contains details about the Mandate to create. This parameter can only be used with [`confirm=true`](https://stripe.com/docs/api/payment_intents/create#create_payment_intent-confirm). */
  mandateData?: Maybe<MandateDataInput>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
  /** Set to `true` to indicate that the customer is not in your checkout flow during this payment attempt, and therefore is unable to authenticate. This parameter is intended for scenarios where you collect card details and [charge them later](https://stripe.com/docs/payments/cards/charging-saved-cards). This parameter can only be used with [`confirm=true`](https://stripe.com/docs/api/payment_intents/create#create_payment_intent-confirm). */
  offSession?: Maybe<Scalars['JSON']>;
  /** The Stripe account ID for which these funds are intended. For details, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts). */
  onBehalfOf?: Maybe<Scalars['String']>;
  /**
   * ID of the payment method (a PaymentMethod, Card, or [compatible Source](https://stripe.com/docs/payments/payment-methods/transitioning#compatibility) object) to attach to this PaymentIntent.
   *
   * If this parameter is omitted with `confirm=true`, `customer.default_source` will be attached as this PaymentIntent's payment instrument to improve the migration experience for users of the Charges API. We recommend that you explicitly provide the `payment_method` going forward.
   */
  paymentMethod?: Maybe<Scalars['String']>;
  /**
   * If provided, this hash will be used to create a PaymentMethod. The new PaymentMethod will appear
   * in the [payment_method](https://stripe.com/docs/api/payment_intents/object#payment_intent_object-payment_method)
   * property on the PaymentIntent.
   */
  paymentMethodData?: Maybe<PaymentMethodDataInput>;
  /** Payment-method-specific configuration for this PaymentIntent. */
  paymentMethodOptions?: Maybe<PaymentMethodOptions7Input>;
  /** The list of payment method types (e.g. card) that this PaymentIntent is allowed to use. If this is not provided, defaults to ["card"]. */
  paymentMethodTypes?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Email address that the receipt for the resulting payment will be sent to. If `receipt_email` is specified for a payment in live mode, a receipt will be sent regardless of your [email settings](https://dashboard.stripe.com/account/emails). */
  receiptEmail?: Maybe<Scalars['String']>;
  /** The URL to redirect your customer back to after they authenticate or cancel their payment on the payment method's app or site. If you'd prefer to redirect to a mobile application, you can alternatively supply an application URI scheme. This parameter can only be used with [`confirm=true`](https://stripe.com/docs/api/payment_intents/create#create_payment_intent-confirm). */
  returnUrl?: Maybe<Scalars['String']>;
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
   *
   * When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
   */
  setupFutureUsage?: Maybe<SetupFutureUsage3>;
  /** Shipping information for this PaymentIntent. */
  shipping?: Maybe<Shipping13Input>;
  /** For non-card charges, you can use this value as the complete description that appears on your customers’ statements. Must contain at least one letter, maximum 22 characters. */
  statementDescriptor?: Maybe<Scalars['String']>;
  /** Provides information about a card payment that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor. */
  statementDescriptorSuffix?: Maybe<Scalars['String']>;
  /**
   * The parameters used to automatically create a Transfer when the payment succeeds.
   * For more information, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts).
   */
  transferData?: Maybe<TransferDataCreationParamsInput>;
  /** A string that identifies the resulting payment as part of a group. See the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts) for details. */
  transferGroup?: Maybe<Scalars['String']>;
  /** Set to `true` only when using manual confirmation and the iOS or Android SDKs to handle additional authentication steps. */
  useStripeSdk?: Maybe<Scalars['Boolean']>;
};

/** This hash contains details about the Mandate to create. This parameter can only be used with [`confirm=true`](https://stripe.com/docs/api/payment_intents/create#create_payment_intent-confirm). */
export type MandateDataInput = {
  customerAcceptance: CustomerAcceptanceParamInput;
};

export type CustomerAcceptanceParamInput = {
  acceptedAt?: Maybe<Scalars['Int']>;
  offline?: Maybe<Scalars['JSON']>;
  online?: Maybe<OnlineInput>;
  type: Type47;
};

export type OnlineInput = {
  ipAddress: Scalars['String'];
  userAgent: Scalars['String'];
};

export enum Type47 {
  OFFLINE = 'offline',
  ONLINE = 'online'
}

/**
 * If provided, this hash will be used to create a PaymentMethod. The new PaymentMethod will appear
 * in the [payment_method](https://stripe.com/docs/api/payment_intents/object#payment_intent_object-payment_method)
 * property on the PaymentIntent.
 */
export type PaymentMethodDataInput = {
  acssDebit?: Maybe<PaymentMethodParamInput>;
  afterpayClearpay?: Maybe<Scalars['JSON']>;
  alipay?: Maybe<Scalars['JSON']>;
  auBecsDebit?: Maybe<AuBecsDebit3Input>;
  bacsDebit?: Maybe<BacsDebit2Input>;
  bancontact?: Maybe<Scalars['JSON']>;
  billingDetails?: Maybe<BillingDetailsInnerParamsInput>;
  boleto?: Maybe<Boleto4Input>;
  eps?: Maybe<Eps3Input>;
  fpx?: Maybe<Fpx3Input>;
  giropay?: Maybe<Scalars['JSON']>;
  grabpay?: Maybe<Scalars['JSON']>;
  ideal?: Maybe<Ideal4Input>;
  interacPresent?: Maybe<Scalars['JSON']>;
  metadata?: Maybe<Scalars['JSON']>;
  oxxo?: Maybe<Scalars['JSON']>;
  p24?: Maybe<P244Input>;
  sepaDebit?: Maybe<SepaDebit5Input>;
  sofort?: Maybe<Sofort4Input>;
  type: Type48;
  wechatPay?: Maybe<Scalars['JSON']>;
};

export type PaymentMethodParamInput = {
  accountNumber: Scalars['String'];
  institutionNumber: Scalars['String'];
  transitNumber: Scalars['String'];
};

export type AuBecsDebit3Input = {
  accountNumber: Scalars['String'];
  bsbNumber: Scalars['String'];
};

export type BacsDebit2Input = {
  accountNumber?: Maybe<Scalars['String']>;
  sortCode?: Maybe<Scalars['String']>;
};

export type BillingDetailsInnerParamsInput = {
  address?: Maybe<Scalars['JSON']>;
  email?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
};

export type Boleto4Input = {
  taxId: Scalars['String'];
};

export type Eps3Input = {
  bank?: Maybe<Bank9>;
};

export enum Bank9 {
  ARZTE_UND_APOTHEKER_BANK = 'arzte_und_apotheker_bank',
  AUSTRIAN_ANADI_BANK_AG = 'austrian_anadi_bank_ag',
  BANK_AUSTRIA = 'bank_austria',
  BANKHAUS_CARL_SPANGLER = 'bankhaus_carl_spangler',
  BANKHAUS_SCHELHAMMER_UND_SCHATTERA_AG = 'bankhaus_schelhammer_und_schattera_ag',
  BAWAG_PSK_AG = 'bawag_psk_ag',
  BKS_BANK_AG = 'bks_bank_ag',
  BRULL_KALLMUS_BANK_AG = 'brull_kallmus_bank_ag',
  BTV_VIER_LANDER_BANK = 'btv_vier_lander_bank',
  CAPITAL_BANK_GRAWE_GRUPPE_AG = 'capital_bank_grawe_gruppe_ag',
  DOLOMITENBANK = 'dolomitenbank',
  EASYBANK_AG = 'easybank_ag',
  ERSTE_BANK_UND_SPARKASSEN = 'erste_bank_und_sparkassen',
  HYPO_ALPEADRIABANK_INTERNATIONAL_AG = 'hypo_alpeadriabank_international_ag',
  HYPO_BANK_BURGENLAND_AKTIENGESELLSCHAFT = 'hypo_bank_burgenland_aktiengesellschaft',
  HYPO_NOE_LB_FUR_NIEDEROSTERREICH_U_WIEN = 'hypo_noe_lb_fur_niederosterreich_u_wien',
  HYPO_OBEROSTERREICH_SALZBURG_STEIERMARK = 'hypo_oberosterreich_salzburg_steiermark',
  HYPO_TIROL_BANK_AG = 'hypo_tirol_bank_ag',
  HYPO_VORARLBERG_BANK_AG = 'hypo_vorarlberg_bank_ag',
  MARCHFELDER_BANK = 'marchfelder_bank',
  OBERBANK_AG = 'oberbank_ag',
  RAIFFEISEN_BANKENGRUPPE_OSTERREICH = 'raiffeisen_bankengruppe_osterreich',
  SCHOELLERBANK_AG = 'schoellerbank_ag',
  SPARDA_BANK_WIEN = 'sparda_bank_wien',
  VOLKSBANK_GRUPPE = 'volksbank_gruppe',
  VOLKSKREDITBANK_AG = 'volkskreditbank_ag',
  VR_BANK_BRAUNAU = 'vr_bank_braunau'
}

export type Fpx3Input = {
  bank: Bank10;
};

export enum Bank10 {
  AFFIN_BANK = 'affin_bank',
  ALLIANCE_BANK = 'alliance_bank',
  AMBANK = 'ambank',
  BANK_ISLAM = 'bank_islam',
  BANK_MUAMALAT = 'bank_muamalat',
  BANK_RAKYAT = 'bank_rakyat',
  BSN = 'bsn',
  CIMB = 'cimb',
  DEUTSCHE_BANK = 'deutsche_bank',
  HONG_LEONG_BANK = 'hong_leong_bank',
  HSBC = 'hsbc',
  KFH = 'kfh',
  MAYBANK2E = 'maybank2e',
  MAYBANK2U = 'maybank2u',
  OCBC = 'ocbc',
  PB_ENTERPRISE = 'pb_enterprise',
  PUBLIC_BANK = 'public_bank',
  RHB = 'rhb',
  STANDARD_CHARTERED = 'standard_chartered',
  UOB = 'uob'
}

export type Ideal4Input = {
  bank?: Maybe<Bank11>;
};

export enum Bank11 {
  ABN_AMRO = 'abn_amro',
  ASN_BANK = 'asn_bank',
  BUNQ = 'bunq',
  HANDELSBANKEN = 'handelsbanken',
  ING = 'ing',
  KNAB = 'knab',
  MONEYOU = 'moneyou',
  RABOBANK = 'rabobank',
  REGIOBANK = 'regiobank',
  REVOLUT = 'revolut',
  SNS_BANK = 'sns_bank',
  TRIODOS_BANK = 'triodos_bank',
  VAN_LANSCHOT = 'van_lanschot'
}

export type P244Input = {
  bank?: Maybe<Bank12>;
};

export enum Bank12 {
  ALIOR_BANK = 'alior_bank',
  BANK_MILLENNIUM = 'bank_millennium',
  BANK_NOWY_BFG_SA = 'bank_nowy_bfg_sa',
  BANK_PEKAO_SA = 'bank_pekao_sa',
  BANKI_SPBDZIELCZE = 'banki_spbdzielcze',
  BLIK = 'blik',
  BNP_PARIBAS = 'bnp_paribas',
  BOZ = 'boz',
  CITI_HANDLOWY = 'citi_handlowy',
  CREDIT_AGRICOLE = 'credit_agricole',
  ENVELOBANK = 'envelobank',
  ETRANSFER_POCZTOWY24 = 'etransfer_pocztowy24',
  GETIN_BANK = 'getin_bank',
  IDEABANK = 'ideabank',
  ING = 'ing',
  INTELIGO = 'inteligo',
  MBANK_MTRANSFER = 'mbank_mtransfer',
  NEST_PRZELEW = 'nest_przelew',
  NOBLE_PAY = 'noble_pay',
  PBAC_Z_IPKO = 'pbac_z_ipko',
  PLUS_BANK = 'plus_bank',
  SANTANDER_PRZELEW24 = 'santander_przelew24',
  TMOBILE_USBUGI_BANKOWE = 'tmobile_usbugi_bankowe',
  TOYOTA_BANK = 'toyota_bank',
  VOLKSWAGEN_BANK = 'volkswagen_bank'
}

export type SepaDebit5Input = {
  iban: Scalars['String'];
};

export type Sofort4Input = {
  country: Country51;
};

export enum Country51 {
  AT = 'AT',
  BE = 'BE',
  DE = 'DE',
  ES = 'ES',
  IT = 'IT',
  NL = 'NL'
}

export enum Type48 {
  ACSS_DEBIT = 'acss_debit',
  AFTERPAY_CLEARPAY = 'afterpay_clearpay',
  ALIPAY = 'alipay',
  AU_BECS_DEBIT = 'au_becs_debit',
  BACS_DEBIT = 'bacs_debit',
  BANCONTACT = 'bancontact',
  BOLETO = 'boleto',
  EPS = 'eps',
  FPX = 'fpx',
  GIROPAY = 'giropay',
  GRABPAY = 'grabpay',
  IDEAL = 'ideal',
  OXXO = 'oxxo',
  P24 = 'p24',
  SEPA_DEBIT = 'sepa_debit',
  SOFORT = 'sofort',
  WECHAT_PAY = 'wechat_pay'
}

/** Payment-method-specific configuration for this PaymentIntent. */
export type PaymentMethodOptions7Input = {
  acssDebit?: Maybe<Scalars['JSON']>;
  afterpayClearpay?: Maybe<Scalars['JSON']>;
  alipay?: Maybe<Scalars['JSON']>;
  bancontact?: Maybe<Scalars['JSON']>;
  boleto?: Maybe<Scalars['JSON']>;
  card?: Maybe<Scalars['JSON']>;
  cardPresent?: Maybe<Scalars['JSON']>;
  ideal?: Maybe<Scalars['JSON']>;
  oxxo?: Maybe<Scalars['JSON']>;
  p24?: Maybe<Scalars['JSON']>;
  sepaDebit?: Maybe<Scalars['JSON']>;
  sofort?: Maybe<Scalars['JSON']>;
  wechatPay?: Maybe<Scalars['JSON']>;
};

export enum SetupFutureUsage3 {
  OFF_SESSION = 'off_session',
  ON_SESSION = 'on_session'
}

/** Shipping information for this PaymentIntent. */
export type Shipping13Input = {
  address: OptionalFieldsAddressInput;
  carrier?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  phone?: Maybe<Scalars['String']>;
  trackingNumber?: Maybe<Scalars['String']>;
};

/**
 * The parameters used to automatically create a Transfer when the payment succeeds.
 * For more information, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts).
 */
export type TransferDataCreationParamsInput = {
  amount?: Maybe<Scalars['Int']>;
  destination: Scalars['String'];
};

export type V1PaymentIntents3Input = {
  /** Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99). */
  amount?: Maybe<Scalars['Int']>;
  /** The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. The amount of the application fee collected will be capped at the total payment amount. For more information, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts). */
  applicationFeeAmount?: Maybe<Scalars['JSON']>;
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency?: Maybe<Scalars['String']>;
  /**
   * ID of the Customer this PaymentIntent belongs to, if one exists.
   *
   * Payment methods attached to other Customers cannot be used with this PaymentIntent.
   *
   * If present in combination with [setup_future_usage](https://stripe.com/docs/api#payment_intent_object-setup_future_usage), this PaymentIntent's payment method will be attached to the Customer after the PaymentIntent has been confirmed and any required actions from the user are complete.
   */
  customer?: Maybe<Scalars['String']>;
  /** An arbitrary string attached to the object. Often useful for displaying to users. */
  description?: Maybe<Scalars['String']>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
  /** ID of the payment method (a PaymentMethod, Card, or [compatible Source](https://stripe.com/docs/payments/payment-methods/transitioning#compatibility) object) to attach to this PaymentIntent. */
  paymentMethod?: Maybe<Scalars['String']>;
  /**
   * If provided, this hash will be used to create a PaymentMethod. The new PaymentMethod will appear
   * in the [payment_method](https://stripe.com/docs/api/payment_intents/object#payment_intent_object-payment_method)
   * property on the PaymentIntent.
   */
  paymentMethodData?: Maybe<PaymentMethodDataInput>;
  /** Payment-method-specific configuration for this PaymentIntent. */
  paymentMethodOptions?: Maybe<PaymentMethodOptions7Input>;
  /** The list of payment method types (e.g. card) that this PaymentIntent is allowed to use. */
  paymentMethodTypes?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Email address that the receipt for the resulting payment will be sent to. If `receipt_email` is specified for a payment in live mode, a receipt will be sent regardless of your [email settings](https://dashboard.stripe.com/account/emails). */
  receiptEmail?: Maybe<Scalars['JSON']>;
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
   *
   * When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
   *
   * If `setup_future_usage` is already set and you are performing a request using a publishable key, you may only update the value from `on_session` to `off_session`.
   */
  setupFutureUsage?: Maybe<SetupFutureUsage4>;
  /** Shipping information for this PaymentIntent. */
  shipping?: Maybe<Scalars['JSON']>;
  /** For non-card charges, you can use this value as the complete description that appears on your customers’ statements. Must contain at least one letter, maximum 22 characters. */
  statementDescriptor?: Maybe<Scalars['String']>;
  /** Provides information about a card payment that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor. */
  statementDescriptorSuffix?: Maybe<Scalars['String']>;
  /** The parameters used to automatically create a Transfer when the payment succeeds. For more information, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts). */
  transferData?: Maybe<TransferDataUpdateParamsInput>;
  /** A string that identifies the resulting payment as part of a group. `transfer_group` may only be provided if it has not been set. See the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts) for details. */
  transferGroup?: Maybe<Scalars['String']>;
};

export enum SetupFutureUsage4 {
  _ = '',
  OFF_SESSION = 'off_session',
  ON_SESSION = 'on_session'
}

/** The parameters used to automatically create a Transfer when the payment succeeds. For more information, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts). */
export type TransferDataUpdateParamsInput = {
  amount?: Maybe<Scalars['Int']>;
};

export type V1PaymentIntentsCancelInput = {
  /** Reason for canceling this PaymentIntent. Possible values are `duplicate`, `fraudulent`, `requested_by_customer`, or `abandoned` */
  cancellationReason?: Maybe<CancellationReason7>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export enum CancellationReason7 {
  ABANDONED = 'abandoned',
  DUPLICATE = 'duplicate',
  FRAUDULENT = 'fraudulent',
  REQUESTED_BY_CUSTOMER = 'requested_by_customer'
}

export type V1PaymentIntentsCaptureInput = {
  /** The amount to capture from the PaymentIntent, which must be less than or equal to the original amount. Any additional amount will be automatically refunded. Defaults to the full `amount_capturable` if not provided. */
  amountToCapture?: Maybe<Scalars['Int']>;
  /** The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. The amount of the application fee collected will be capped at the total payment amount. For more information, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts). */
  applicationFeeAmount?: Maybe<Scalars['Int']>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** For non-card charges, you can use this value as the complete description that appears on your customers’ statements. Must contain at least one letter, maximum 22 characters. */
  statementDescriptor?: Maybe<Scalars['String']>;
  /** Provides information about a card payment that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor. */
  statementDescriptorSuffix?: Maybe<Scalars['String']>;
  /**
   * The parameters used to automatically create a Transfer when the payment
   * is captured. For more information, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts).
   */
  transferData?: Maybe<TransferData11Input>;
};

/**
 * The parameters used to automatically create a Transfer when the payment
 * is captured. For more information, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts).
 */
export type TransferData11Input = {
  amount?: Maybe<Scalars['Int']>;
};

export type V1PaymentIntentsConfirmInput = {
  /** The client secret of the PaymentIntent. */
  clientSecret?: Maybe<Scalars['String']>;
  /** Set to `true` to fail the payment attempt if the PaymentIntent transitions into `requires_action`. This parameter is intended for simpler integrations that do not handle customer actions, like [saving cards without authentication](https://stripe.com/docs/payments/save-card-without-authentication). */
  errorOnRequiresAction?: Maybe<Scalars['Boolean']>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** ID of the mandate to be used for this payment. */
  mandate?: Maybe<Scalars['String']>;
  /** This hash contains details about the Mandate to create */
  mandateData?: Maybe<MandateData2Input>;
  /** Set to `true` to indicate that the customer is not in your checkout flow during this payment attempt, and therefore is unable to authenticate. This parameter is intended for scenarios where you collect card details and [charge them later](https://stripe.com/docs/payments/cards/charging-saved-cards). */
  offSession?: Maybe<Scalars['JSON']>;
  /** ID of the payment method (a PaymentMethod, Card, or [compatible Source](https://stripe.com/docs/payments/payment-methods/transitioning#compatibility) object) to attach to this PaymentIntent. */
  paymentMethod?: Maybe<Scalars['String']>;
  /**
   * If provided, this hash will be used to create a PaymentMethod. The new PaymentMethod will appear
   * in the [payment_method](https://stripe.com/docs/api/payment_intents/object#payment_intent_object-payment_method)
   * property on the PaymentIntent.
   */
  paymentMethodData?: Maybe<PaymentMethodDataInput>;
  /** Payment-method-specific configuration for this PaymentIntent. */
  paymentMethodOptions?: Maybe<PaymentMethodOptions7Input>;
  /** The list of payment method types (e.g. card) that this PaymentIntent is allowed to use. */
  paymentMethodTypes?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Email address that the receipt for the resulting payment will be sent to. If `receipt_email` is specified for a payment in live mode, a receipt will be sent regardless of your [email settings](https://dashboard.stripe.com/account/emails). */
  receiptEmail?: Maybe<Scalars['JSON']>;
  /**
   * The URL to redirect your customer back to after they authenticate or cancel their payment on the payment method's app or site.
   * If you'd prefer to redirect to a mobile application, you can alternatively supply an application URI scheme.
   * This parameter is only used for cards and other redirect-based payment methods.
   */
  returnUrl?: Maybe<Scalars['String']>;
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
   *
   * When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
   *
   * If `setup_future_usage` is already set and you are performing a request using a publishable key, you may only update the value from `on_session` to `off_session`.
   */
  setupFutureUsage?: Maybe<SetupFutureUsage4>;
  /** Shipping information for this PaymentIntent. */
  shipping?: Maybe<Scalars['JSON']>;
  /** Set to `true` only when using manual confirmation and the iOS or Android SDKs to handle additional authentication steps. */
  useStripeSdk?: Maybe<Scalars['Boolean']>;
};

/** This hash contains details about the Mandate to create */
export type MandateData2Input = {
  customerAcceptance?: Maybe<Scalars['JSON']>;
};

export type V1PaymentMethods2Input = {
  /** If this is an `acss_debit` PaymentMethod, this hash contains details about the ACSS Debit payment method. */
  acssDebit?: Maybe<AcssDebit8Input>;
  /** If this is an `AfterpayClearpay` PaymentMethod, this hash contains details about the AfterpayClearpay payment method. */
  afterpayClearpay?: Maybe<Scalars['JSON']>;
  /** If this is an `Alipay` PaymentMethod, this hash contains details about the Alipay payment method. */
  alipay?: Maybe<Scalars['JSON']>;
  /** If this is an `au_becs_debit` PaymentMethod, this hash contains details about the bank account. */
  auBecsDebit?: Maybe<AuBecsDebit4Input>;
  /** If this is a `bacs_debit` PaymentMethod, this hash contains details about the Bacs Direct Debit bank account. */
  bacsDebit?: Maybe<BacsDebit3Input>;
  /** If this is a `bancontact` PaymentMethod, this hash contains details about the Bancontact payment method. */
  bancontact?: Maybe<Scalars['JSON']>;
  /** Billing information associated with the PaymentMethod that may be used or required by particular types of payment methods. */
  billingDetails?: Maybe<BillingDetails2Input>;
  /** If this is a `boleto` PaymentMethod, this hash contains details about the Boleto payment method. */
  boleto?: Maybe<Boleto6Input>;
  /** If this is a `card` PaymentMethod, this hash contains the user's card details. For backwards compatibility, you can alternatively provide a Stripe token (e.g., for Apple Pay, Amex Express Checkout, or legacy Checkout) into the card hash with format `card: {token: "tok_visa"}`. When providing a card number, you must meet the requirements for [PCI compliance](https://stripe.com/docs/security#validating-pci-compliance). We strongly recommend using Stripe.js instead of interacting with this API directly. */
  card?: Maybe<Card19Input>;
  /** The `Customer` to whom the original PaymentMethod is attached. */
  customer?: Maybe<Scalars['String']>;
  /** If this is an `eps` PaymentMethod, this hash contains details about the EPS payment method. */
  eps?: Maybe<Eps4Input>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** If this is an `fpx` PaymentMethod, this hash contains details about the FPX payment method. */
  fpx?: Maybe<Fpx4Input>;
  /** If this is a `giropay` PaymentMethod, this hash contains details about the Giropay payment method. */
  giropay?: Maybe<Scalars['JSON']>;
  /** If this is a `grabpay` PaymentMethod, this hash contains details about the GrabPay payment method. */
  grabpay?: Maybe<Scalars['JSON']>;
  /** If this is an `ideal` PaymentMethod, this hash contains details about the iDEAL payment method. */
  ideal?: Maybe<Ideal6Input>;
  /** If this is an `interac_present` PaymentMethod, this hash contains details about the Interac Present payment method. */
  interacPresent?: Maybe<Scalars['JSON']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
  /** If this is an `oxxo` PaymentMethod, this hash contains details about the OXXO payment method. */
  oxxo?: Maybe<Scalars['JSON']>;
  /** If this is a `p24` PaymentMethod, this hash contains details about the P24 payment method. */
  p24?: Maybe<P246Input>;
  /** The PaymentMethod to share. */
  paymentMethod?: Maybe<Scalars['String']>;
  /** If this is a `sepa_debit` PaymentMethod, this hash contains details about the SEPA debit bank account. */
  sepaDebit?: Maybe<SepaDebit7Input>;
  /** If this is a `sofort` PaymentMethod, this hash contains details about the SOFORT payment method. */
  sofort?: Maybe<Sofort6Input>;
  /** The type of the PaymentMethod. An additional hash is included on the PaymentMethod with a name matching this value. It contains additional information specific to the PaymentMethod type. */
  type?: Maybe<Type49>;
  /** If this is an `wechat_pay` PaymentMethod, this hash contains details about the wechat_pay payment method. */
  wechatPay?: Maybe<Scalars['JSON']>;
};

/** If this is an `acss_debit` PaymentMethod, this hash contains details about the ACSS Debit payment method. */
export type AcssDebit8Input = {
  accountNumber: Scalars['String'];
  institutionNumber: Scalars['String'];
  transitNumber: Scalars['String'];
};

/** If this is an `au_becs_debit` PaymentMethod, this hash contains details about the bank account. */
export type AuBecsDebit4Input = {
  accountNumber: Scalars['String'];
  bsbNumber: Scalars['String'];
};

/** If this is a `bacs_debit` PaymentMethod, this hash contains details about the Bacs Direct Debit bank account. */
export type BacsDebit3Input = {
  accountNumber?: Maybe<Scalars['String']>;
  sortCode?: Maybe<Scalars['String']>;
};

/** Billing information associated with the PaymentMethod that may be used or required by particular types of payment methods. */
export type BillingDetails2Input = {
  address?: Maybe<Scalars['JSON']>;
  email?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
};

/** If this is a `boleto` PaymentMethod, this hash contains details about the Boleto payment method. */
export type Boleto6Input = {
  taxId: Scalars['String'];
};

/** If this is a `card` PaymentMethod, this hash contains the user's card details. For backwards compatibility, you can alternatively provide a Stripe token (e.g., for Apple Pay, Amex Express Checkout, or legacy Checkout) into the card hash with format `card: {token: "tok_visa"}`. When providing a card number, you must meet the requirements for [PCI compliance](https://stripe.com/docs/security#validating-pci-compliance). We strongly recommend using Stripe.js instead of interacting with this API directly. */
export type Card19Input = {
  cvc?: Maybe<Scalars['String']>;
  expMonth?: Maybe<Scalars['Int']>;
  expYear?: Maybe<Scalars['Int']>;
  number?: Maybe<Scalars['String']>;
  token?: Maybe<Scalars['String']>;
};

/** If this is an `eps` PaymentMethod, this hash contains details about the EPS payment method. */
export type Eps4Input = {
  bank?: Maybe<Bank9>;
};

/** If this is an `fpx` PaymentMethod, this hash contains details about the FPX payment method. */
export type Fpx4Input = {
  bank: Bank10;
};

/** If this is an `ideal` PaymentMethod, this hash contains details about the iDEAL payment method. */
export type Ideal6Input = {
  bank?: Maybe<Bank11>;
};

/** If this is a `p24` PaymentMethod, this hash contains details about the P24 payment method. */
export type P246Input = {
  bank?: Maybe<Bank12>;
};

/** If this is a `sepa_debit` PaymentMethod, this hash contains details about the SEPA debit bank account. */
export type SepaDebit7Input = {
  iban: Scalars['String'];
};

/** If this is a `sofort` PaymentMethod, this hash contains details about the SOFORT payment method. */
export type Sofort6Input = {
  country: Country51;
};

export enum Type49 {
  ACSS_DEBIT = 'acss_debit',
  AFTERPAY_CLEARPAY = 'afterpay_clearpay',
  ALIPAY = 'alipay',
  AU_BECS_DEBIT = 'au_becs_debit',
  BACS_DEBIT = 'bacs_debit',
  BANCONTACT = 'bancontact',
  BOLETO = 'boleto',
  CARD = 'card',
  EPS = 'eps',
  FPX = 'fpx',
  GIROPAY = 'giropay',
  GRABPAY = 'grabpay',
  IDEAL = 'ideal',
  OXXO = 'oxxo',
  P24 = 'p24',
  SEPA_DEBIT = 'sepa_debit',
  SOFORT = 'sofort',
  WECHAT_PAY = 'wechat_pay'
}

export type V1PaymentMethod2Input = {
  /** Billing information associated with the PaymentMethod that may be used or required by particular types of payment methods. */
  billingDetails?: Maybe<BillingDetails2Input>;
  /** If this is a `card` PaymentMethod, this hash contains the user's card details. */
  card?: Maybe<UpdateApiParamInput>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
};

/** If this is a `card` PaymentMethod, this hash contains the user's card details. */
export type UpdateApiParamInput = {
  expMonth?: Maybe<Scalars['Int']>;
  expYear?: Maybe<Scalars['Int']>;
};

export type V1PaymentMethodAttachInput = {
  /** The ID of the customer to which to attach the PaymentMethod. */
  customer: Scalars['String'];
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type V1PaymentMethodDetachInput = {
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type V1Payouts2Input = {
  /** A positive integer in cents representing how much to payout. */
  amount: Scalars['Int'];
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency: Scalars['String'];
  /** An arbitrary string attached to the object. Often useful for displaying to users. */
  description?: Maybe<Scalars['String']>;
  /** The ID of a bank account or a card to send the payout to. If no destination is supplied, the default external account for the specified currency will be used. */
  destination?: Maybe<Scalars['String']>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
  /** The method used to send this payout, which can be `standard` or `instant`. `instant` is only supported for payouts to debit cards. (See [Instant payouts for marketplaces for more information](https://stripe.com/blog/instant-payouts-for-marketplaces).) */
  method?: Maybe<Method2>;
  /** The balance type of your Stripe balance to draw this payout from. Balances for different payment sources are kept separately. You can find the amounts with the balances API. One of `bank_account`, `card`, or `fpx`. */
  sourceType?: Maybe<SourceType2>;
  /** A string to be displayed on the recipient's bank or card statement. This may be at most 22 characters. Attempting to use a `statement_descriptor` longer than 22 characters will return an error. Note: Most banks will truncate this information and/or display it inconsistently. Some may not display it at all. */
  statementDescriptor?: Maybe<Scalars['String']>;
};

export enum Method2 {
  INSTANT = 'instant',
  STANDARD = 'standard'
}

export enum SourceType2 {
  BANK_ACCOUNT = 'bank_account',
  CARD = 'card',
  FPX = 'fpx'
}

export type V1Payout2Input = {
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
};

export type V1PayoutCancelInput = {
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type V1PayoutReverseInput = {
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
};

export type V1Plans2Input = {
  /** Whether the plan is currently available for new subscriptions. Defaults to `true`. */
  active?: Maybe<Scalars['Boolean']>;
  /** Specifies a usage aggregation strategy for plans of `usage_type=metered`. Allowed values are `sum` for summing up all usage during a period, `last_during_period` for using the last usage record reported within a period, `last_ever` for using the last usage record ever (across period bounds) or `max` which uses the usage record with the maximum reported usage during a period. Defaults to `sum`. */
  aggregateUsage?: Maybe<AggregateUsage3>;
  /** A positive integer in %s (or 0 for a free plan) representing how much to charge on a recurring basis. */
  amount?: Maybe<Scalars['Int']>;
  /** Same as `amount`, but accepts a decimal value with at most 12 decimal places. Only one of `amount` and `amount_decimal` can be set. */
  amountDecimal?: Maybe<Scalars['String']>;
  /** Describes how to compute the price per period. Either `per_unit` or `tiered`. `per_unit` indicates that the fixed amount (specified in `amount`) will be charged per unit in `quantity` (for plans with `usage_type=licensed`), or per unit of total usage (for plans with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as defined using the `tiers` and `tiers_mode` attributes. */
  billingScheme?: Maybe<BillingScheme2>;
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency: Scalars['String'];
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** An identifier randomly generated by Stripe. Used to identify this plan when subscribing a customer. You can optionally override this ID, but the ID must be unique across all plans in your Stripe account. You can, however, use the same plan ID in both live and test modes. */
  id?: Maybe<Scalars['String']>;
  /** Specifies billing frequency. Either `day`, `week`, `month` or `year`. */
  interval: Interval9;
  /** The number of intervals between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months. Maximum of one year interval allowed (1 year, 12 months, or 52 weeks). */
  intervalCount?: Maybe<Scalars['Int']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
  /** A brief description of the plan, hidden from customers. */
  nickname?: Maybe<Scalars['String']>;
  product?: Maybe<Scalars['JSON']>;
  /** Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`. */
  tiers?: Maybe<Array<Maybe<Tiers3ListItemInput>>>;
  /** Defines if the tiering price should be `graduated` or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per unit price, in `graduated` tiering pricing can successively change as the quantity grows. */
  tiersMode?: Maybe<TiersMode2>;
  /** Apply a transformation to the reported usage or set quantity before computing the billed price. Cannot be combined with `tiers`. */
  transformUsage?: Maybe<TransformUsageParamInput>;
  /** Default number of trial days when subscribing a customer to this plan using [`trial_from_plan=true`](https://stripe.com/docs/api#create_subscription-trial_from_plan). */
  trialPeriodDays?: Maybe<Scalars['Int']>;
  /** Configures how the quantity per period should be determined. Can be either `metered` or `licensed`. `licensed` automatically bills the `quantity` set when adding it to a subscription. `metered` aggregates the total usage based on usage records. Defaults to `licensed`. */
  usageType?: Maybe<UsageType>;
};

export enum AggregateUsage3 {
  LAST_DURING_PERIOD = 'last_during_period',
  LAST_EVER = 'last_ever',
  MAX = 'max',
  SUM = 'sum'
}

export enum Interval9 {
  DAY = 'day',
  MONTH = 'month',
  WEEK = 'week',
  YEAR = 'year'
}

export type Tiers3ListItemInput = {
  flatAmount?: Maybe<Scalars['Int']>;
  flatAmountDecimal?: Maybe<Scalars['String']>;
  unitAmount?: Maybe<Scalars['Int']>;
  unitAmountDecimal?: Maybe<Scalars['String']>;
  upTo: Scalars['JSON'];
};

export enum TiersMode2 {
  GRADUATED = 'graduated',
  VOLUME = 'volume'
}

/** Apply a transformation to the reported usage or set quantity before computing the billed price. Cannot be combined with `tiers`. */
export type TransformUsageParamInput = {
  divideBy: Scalars['Int'];
  round: Round2;
};

export enum Round2 {
  DOWN = 'down',
  UP = 'up'
}

export type V1Plan2Input = {
  /** Whether the plan is currently available for new subscriptions. */
  active?: Maybe<Scalars['Boolean']>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
  /** A brief description of the plan, hidden from customers. */
  nickname?: Maybe<Scalars['String']>;
  /** The product the plan belongs to. This cannot be changed once it has been used in a subscription or subscription schedule. */
  product?: Maybe<Scalars['String']>;
  /** Default number of trial days when subscribing a customer to this plan using [`trial_from_plan=true`](https://stripe.com/docs/api#create_subscription-trial_from_plan). */
  trialPeriodDays?: Maybe<Scalars['Int']>;
};

export type V1Prices2Input = {
  /** Whether the price can be used for new purchases. Defaults to `true`. */
  active?: Maybe<Scalars['Boolean']>;
  /** Describes how to compute the price per period. Either `per_unit` or `tiered`. `per_unit` indicates that the fixed amount (specified in `unit_amount` or `unit_amount_decimal`) will be charged per unit in `quantity` (for prices with `usage_type=licensed`), or per unit of total usage (for prices with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as defined using the `tiers` and `tiers_mode` attributes. */
  billingScheme?: Maybe<BillingScheme>;
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency: Scalars['String'];
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** A lookup key used to retrieve prices dynamically from a static string. */
  lookupKey?: Maybe<Scalars['String']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
  /** A brief description of the price, hidden from customers. */
  nickname?: Maybe<Scalars['String']>;
  /** The ID of the product that this price will belong to. */
  product?: Maybe<Scalars['String']>;
  /** These fields can be used to create a new product that this price will belong to. */
  productData?: Maybe<InlineProductParamsInput>;
  /** The recurring components of a price such as `interval` and `usage_type`. */
  recurring?: Maybe<Recurring2Input>;
  /** Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`. Once specified as either `inclusive` or `exclusive`, it cannot be changed. */
  taxBehavior?: Maybe<TaxBehavior3>;
  /** Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`. */
  tiers?: Maybe<Array<Maybe<Tiers3ListItemInput>>>;
  /** Defines if the tiering price should be `graduated` or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per unit price, in `graduated` tiering pricing can successively change as the quantity grows. */
  tiersMode?: Maybe<TiersMode2>;
  /** If set to true, will atomically remove the lookup key from the existing price, and assign it to this price. */
  transferLookupKey?: Maybe<Scalars['Boolean']>;
  /** Apply a transformation to the reported usage or set quantity before computing the billed price. Cannot be combined with `tiers`. */
  transformQuantity?: Maybe<TransformQuantity2Input>;
  /** A positive integer in %s (or 0 for a free price) representing how much to charge. */
  unitAmount?: Maybe<Scalars['Int']>;
  /** Same as `unit_amount`, but accepts a decimal value in %s with at most 12 decimal places. Only one of `unit_amount` and `unit_amount_decimal` can be set. */
  unitAmountDecimal?: Maybe<Scalars['String']>;
};

/** These fields can be used to create a new product that this price will belong to. */
export type InlineProductParamsInput = {
  active?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['String']>;
  metadata?: Maybe<Scalars['JSON']>;
  name: Scalars['String'];
  statementDescriptor?: Maybe<Scalars['String']>;
  taxCode?: Maybe<Scalars['String']>;
  unitLabel?: Maybe<Scalars['String']>;
};

/** The recurring components of a price such as `interval` and `usage_type`. */
export type Recurring2Input = {
  aggregateUsage?: Maybe<AggregateUsage4>;
  interval: Interval5;
  intervalCount?: Maybe<Scalars['Int']>;
  usageType?: Maybe<UsageType2>;
};

export enum AggregateUsage4 {
  LAST_DURING_PERIOD = 'last_during_period',
  LAST_EVER = 'last_ever',
  MAX = 'max',
  SUM = 'sum'
}

export enum TaxBehavior3 {
  EXCLUSIVE = 'exclusive',
  INCLUSIVE = 'inclusive',
  UNSPECIFIED = 'unspecified'
}

/** Apply a transformation to the reported usage or set quantity before computing the billed price. Cannot be combined with `tiers`. */
export type TransformQuantity2Input = {
  divideBy: Scalars['Int'];
  round: Round2;
};

export type V1Price2Input = {
  /** Whether the price can be used for new purchases. Defaults to `true`. */
  active?: Maybe<Scalars['Boolean']>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** A lookup key used to retrieve prices dynamically from a static string. */
  lookupKey?: Maybe<Scalars['String']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
  /** A brief description of the price, hidden from customers. */
  nickname?: Maybe<Scalars['String']>;
  /** Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`. Once specified as either `inclusive` or `exclusive`, it cannot be changed. */
  taxBehavior?: Maybe<TaxBehavior3>;
  /** If set to true, will atomically remove the lookup key from the existing price, and assign it to this price. */
  transferLookupKey?: Maybe<Scalars['Boolean']>;
};

export type V1Products3Input = {
  /** Whether the product is currently available for purchase. Defaults to `true`. */
  active?: Maybe<Scalars['Boolean']>;
  /** The product's description, meant to be displayable to the customer. Use this field to optionally store a long form explanation of the product being sold for your own rendering purposes. */
  description?: Maybe<Scalars['String']>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** An identifier will be randomly generated by Stripe. You can optionally override this ID, but the ID must be unique across all products in your Stripe account. */
  id?: Maybe<Scalars['String']>;
  /** A list of up to 8 URLs of images for this product, meant to be displayable to the customer. */
  images?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
  /** The product's name, meant to be displayable to the customer. Whenever this product is sold via a subscription, name will show up on associated invoice line item descriptions. */
  name: Scalars['String'];
  /** The dimensions of this product for shipping purposes. */
  packageDimensions?: Maybe<PackageDimensionsSpecsInput>;
  /** Whether this product is shipped (i.e., physical goods). */
  shippable?: Maybe<Scalars['Boolean']>;
  /**
   * An arbitrary string to be displayed on your customer's credit card or bank statement. While most banks display this information consistently, some may display it incorrectly or not at all.
   *
   * This may be up to 22 characters. The statement description may not include `<`, `>`, `\`, `"`, `'` characters, and will appear on your customer's statement in capital letters. Non-ASCII characters are automatically stripped.
   *  It must contain at least one letter.
   */
  statementDescriptor?: Maybe<Scalars['String']>;
  /** A [tax code](https://stripe.com/docs/tax/tax-codes) ID. */
  taxCode?: Maybe<Scalars['String']>;
  /** A label that represents units of this product in Stripe and on customers’ receipts and invoices. When set, this will be included in associated invoice line item descriptions. */
  unitLabel?: Maybe<Scalars['String']>;
  /** A URL of a publicly-accessible webpage for this product. */
  url?: Maybe<Scalars['String']>;
};

/** The dimensions of this product for shipping purposes. */
export type PackageDimensionsSpecsInput = {
  height: Scalars['Float'];
  length: Scalars['Float'];
  weight: Scalars['Float'];
  width: Scalars['Float'];
};

export type V1Product2Input = {
  /** Whether the product is available for purchase. */
  active?: Maybe<Scalars['Boolean']>;
  /** The product's description, meant to be displayable to the customer. Use this field to optionally store a long form explanation of the product being sold for your own rendering purposes. */
  description?: Maybe<Scalars['String']>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** A list of up to 8 URLs of images for this product, meant to be displayable to the customer. */
  images?: Maybe<Scalars['JSON']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
  /** The product's name, meant to be displayable to the customer. Whenever this product is sold via a subscription, name will show up on associated invoice line item descriptions. */
  name?: Maybe<Scalars['String']>;
  /** The dimensions of this product for shipping purposes. */
  packageDimensions?: Maybe<Scalars['JSON']>;
  /** Whether this product is shipped (i.e., physical goods). */
  shippable?: Maybe<Scalars['Boolean']>;
  /**
   * An arbitrary string to be displayed on your customer's credit card or bank statement. While most banks display this information consistently, some may display it incorrectly or not at all.
   *
   * This may be up to 22 characters. The statement description may not include `<`, `>`, `\`, `"`, `'` characters, and will appear on your customer's statement in capital letters. Non-ASCII characters are automatically stripped.
   *  It must contain at least one letter. May only be set if `type=service`.
   */
  statementDescriptor?: Maybe<Scalars['String']>;
  /** A [tax code](https://stripe.com/docs/tax/tax-codes) ID. */
  taxCode?: Maybe<Scalars['JSON']>;
  /** A label that represents units of this product in Stripe and on customers’ receipts and invoices. When set, this will be included in associated invoice line item descriptions. May only be set if `type=service`. */
  unitLabel?: Maybe<Scalars['String']>;
  /** A URL of a publicly-accessible webpage for this product. */
  url?: Maybe<Scalars['String']>;
};

export type V1PromotionCodes3Input = {
  /** Whether the promotion code is currently active. */
  active?: Maybe<Scalars['Boolean']>;
  /** The customer-facing code. Regardless of case, this code must be unique across all active promotion codes for a specific customer. If left blank, we will generate one automatically. */
  code?: Maybe<Scalars['String']>;
  /** The coupon for this promotion code. */
  coupon: Scalars['String'];
  /** The customer that this promotion code can be used by. If not set, the promotion code can be used by all customers. */
  customer?: Maybe<Scalars['String']>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** The timestamp at which this promotion code will expire. If the coupon has specified a `redeems_by`, then this value cannot be after the coupon's `redeems_by`. */
  expiresAt?: Maybe<Scalars['Int']>;
  /** A positive integer specifying the number of times the promotion code can be redeemed. If the coupon has specified a `max_redemptions`, then this value cannot be greater than the coupon's `max_redemptions`. */
  maxRedemptions?: Maybe<Scalars['Int']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
  /** Settings that restrict the redemption of the promotion code. */
  restrictions?: Maybe<RestrictionsInput>;
};

/** Settings that restrict the redemption of the promotion code. */
export type RestrictionsInput = {
  firstTimeTransaction?: Maybe<Scalars['Boolean']>;
  minimumAmount?: Maybe<Scalars['Int']>;
  minimumAmountCurrency?: Maybe<Scalars['String']>;
};

export type V1PromotionCode2Input = {
  /** Whether the promotion code is currently active. A promotion code can only be reactivated when the coupon is still valid and the promotion code is otherwise redeemable. */
  active?: Maybe<Scalars['Boolean']>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
};

export type V1Quotes3Input = {
  /** The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. There cannot be any line items with recurring prices when using this field. */
  applicationFeeAmount?: Maybe<Scalars['JSON']>;
  /** A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account. There must be at least 1 line item with a recurring price to use this field. */
  applicationFeePercent?: Maybe<Scalars['JSON']>;
  /** Settings for automatic tax lookup for this quote and resulting invoices and subscriptions. */
  automaticTax?: Maybe<AutomaticTax4Input>;
  /** Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay invoices at the end of the subscription cycle or at invoice finalization using the default payment method attached to the subscription or customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions. Defaults to `charge_automatically`. */
  collectionMethod?: Maybe<CollectionMethod7>;
  /** The customer for which this quote belongs to. A customer is required before finalizing the quote. Once specified, it cannot be changed. */
  customer?: Maybe<Scalars['String']>;
  /** The tax rates that will apply to any line item that does not have `tax_rates` set. */
  defaultTaxRates?: Maybe<Scalars['JSON']>;
  /** A description that will be displayed on the quote PDF. If no value is passed, the default description configured in your [quote template settings](https://dashboard.stripe.com/settings/billing/quote) will be used. */
  description?: Maybe<Scalars['String']>;
  /** The discounts applied to the quote. You can only set up to one discount. */
  discounts?: Maybe<Scalars['JSON']>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** A future timestamp on which the quote will be canceled if in `open` or `draft` status. Measured in seconds since the Unix epoch. If no value is passed, the default expiration date configured in your [quote template settings](https://dashboard.stripe.com/settings/billing/quote) will be used. */
  expiresAt?: Maybe<Scalars['Int']>;
  /** A footer that will be displayed on the quote PDF. If no value is passed, the default footer configured in your [quote template settings](https://dashboard.stripe.com/settings/billing/quote) will be used. */
  footer?: Maybe<Scalars['String']>;
  /** Clone an existing quote. The new quote will be created in `status=draft`. When using this parameter, you cannot specify any other parameters except for `expires_at`. */
  fromQuote?: Maybe<FromQuoteParamsInput>;
  /** A header that will be displayed on the quote PDF. If no value is passed, the default header configured in your [quote template settings](https://dashboard.stripe.com/settings/billing/quote) will be used. */
  header?: Maybe<Scalars['String']>;
  /** All invoices will be billed using the specified settings. */
  invoiceSettings?: Maybe<QuoteParamInput>;
  /** A list of line items the customer is being quoted for. Each line item includes information about the product, the quantity, and the resulting cost. */
  lineItems?: Maybe<Array<Maybe<LineItems4ListItemInput>>>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
  /** The account on behalf of which to charge. */
  onBehalfOf?: Maybe<Scalars['JSON']>;
  /** When creating a subscription or subscription schedule, the specified configuration data will be used. There must be at least one line item with a recurring price for a subscription or subscription schedule to be created. A subscription schedule is created if `subscription_data[effective_date]` is present and in the future, otherwise a subscription is created. */
  subscriptionData?: Maybe<SubscriptionDataCreateParamsInput>;
  /** The data with which to automatically create a Transfer for each of the invoices. */
  transferData?: Maybe<Scalars['JSON']>;
};

/** Settings for automatic tax lookup for this quote and resulting invoices and subscriptions. */
export type AutomaticTax4Input = {
  enabled: Scalars['Boolean'];
};

export enum CollectionMethod7 {
  CHARGE_AUTOMATICALLY = 'charge_automatically',
  SEND_INVOICE = 'send_invoice'
}

/** Clone an existing quote. The new quote will be created in `status=draft`. When using this parameter, you cannot specify any other parameters except for `expires_at`. */
export type FromQuoteParamsInput = {
  isRevision?: Maybe<Scalars['Boolean']>;
  quote: Scalars['String'];
};

/** All invoices will be billed using the specified settings. */
export type QuoteParamInput = {
  daysUntilDue?: Maybe<Scalars['Int']>;
};

export type LineItems4ListItemInput = {
  price?: Maybe<Scalars['String']>;
  priceData?: Maybe<PriceData3Input>;
  quantity?: Maybe<Scalars['Int']>;
  taxRates?: Maybe<Scalars['JSON']>;
};

export type PriceData3Input = {
  currency: Scalars['String'];
  product: Scalars['String'];
  recurring?: Maybe<RecurringAdhocInput>;
  taxBehavior?: Maybe<TaxBehavior2>;
  unitAmount?: Maybe<Scalars['Int']>;
  unitAmountDecimal?: Maybe<Scalars['String']>;
};

/** When creating a subscription or subscription schedule, the specified configuration data will be used. There must be at least one line item with a recurring price for a subscription or subscription schedule to be created. A subscription schedule is created if `subscription_data[effective_date]` is present and in the future, otherwise a subscription is created. */
export type SubscriptionDataCreateParamsInput = {
  effectiveDate?: Maybe<Scalars['JSON']>;
  trialPeriodDays?: Maybe<Scalars['JSON']>;
};

export type V1Quote2Input = {
  /** The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. There cannot be any line items with recurring prices when using this field. */
  applicationFeeAmount?: Maybe<Scalars['JSON']>;
  /** A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account. There must be at least 1 line item with a recurring price to use this field. */
  applicationFeePercent?: Maybe<Scalars['JSON']>;
  /** Settings for automatic tax lookup for this quote and resulting invoices and subscriptions. */
  automaticTax?: Maybe<AutomaticTax4Input>;
  /** Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay invoices at the end of the subscription cycle or at invoice finalization using the default payment method attached to the subscription or customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions. Defaults to `charge_automatically`. */
  collectionMethod?: Maybe<CollectionMethod7>;
  /** The customer for which this quote belongs to. A customer is required before finalizing the quote. Once specified, it cannot be changed. */
  customer?: Maybe<Scalars['String']>;
  /** The tax rates that will apply to any line item that does not have `tax_rates` set. */
  defaultTaxRates?: Maybe<Scalars['JSON']>;
  /** A description that will be displayed on the quote PDF. */
  description?: Maybe<Scalars['String']>;
  /** The discounts applied to the quote. You can only set up to one discount. */
  discounts?: Maybe<Scalars['JSON']>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** A future timestamp on which the quote will be canceled if in `open` or `draft` status. Measured in seconds since the Unix epoch. */
  expiresAt?: Maybe<Scalars['Int']>;
  /** A footer that will be displayed on the quote PDF. */
  footer?: Maybe<Scalars['String']>;
  /** A header that will be displayed on the quote PDF. */
  header?: Maybe<Scalars['String']>;
  /** All invoices will be billed using the specified settings. */
  invoiceSettings?: Maybe<QuoteParamInput>;
  /** A list of line items the customer is being quoted for. Each line item includes information about the product, the quantity, and the resulting cost. */
  lineItems?: Maybe<Array<Maybe<LineItems5ListItemInput>>>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
  /** The account on behalf of which to charge. */
  onBehalfOf?: Maybe<Scalars['JSON']>;
  /** When creating a subscription or subscription schedule, the specified configuration data will be used. There must be at least one line item with a recurring price for a subscription or subscription schedule to be created. A subscription schedule is created if `subscription_data[effective_date]` is present and in the future, otherwise a subscription is created. */
  subscriptionData?: Maybe<SubscriptionDataUpdateParamsInput>;
  /** The data with which to automatically create a Transfer for each of the invoices. */
  transferData?: Maybe<Scalars['JSON']>;
};

export type LineItems5ListItemInput = {
  id?: Maybe<Scalars['String']>;
  price?: Maybe<Scalars['String']>;
  priceData?: Maybe<PriceData3Input>;
  quantity?: Maybe<Scalars['Int']>;
  taxRates?: Maybe<Scalars['JSON']>;
};

/** When creating a subscription or subscription schedule, the specified configuration data will be used. There must be at least one line item with a recurring price for a subscription or subscription schedule to be created. A subscription schedule is created if `subscription_data[effective_date]` is present and in the future, otherwise a subscription is created. */
export type SubscriptionDataUpdateParamsInput = {
  effectiveDate?: Maybe<Scalars['JSON']>;
  trialPeriodDays?: Maybe<Scalars['JSON']>;
};

export type V1QuoteAcceptInput = {
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type V1QuoteCancelInput = {
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type V1QuoteFinalizeInput = {
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** A future timestamp on which the quote will be canceled if in `open` or `draft` status. Measured in seconds since the Unix epoch. */
  expiresAt?: Maybe<Scalars['Int']>;
};

export type V1RadarValueListItems3Input = {
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** The value of the item (whose type must match the type of the parent value list). */
  value: Scalars['String'];
  /** The identifier of the value list which the created item will be added to. */
  valueList: Scalars['String'];
};

export type V1RadarValueLists3Input = {
  /** The name of the value list for use in rules. */
  alias: Scalars['String'];
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Type of the items in the value list. One of `card_fingerprint`, `card_bin`, `email`, `ip_address`, `country`, `string`, or `case_sensitive_string`. Use `string` if the item type is unknown or mixed. */
  itemType?: Maybe<ItemType2>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
  /** The human-readable name of the value list. */
  name: Scalars['String'];
};

export enum ItemType2 {
  CARD_BIN = 'card_bin',
  CARD_FINGERPRINT = 'card_fingerprint',
  CASE_SENSITIVE_STRING = 'case_sensitive_string',
  COUNTRY = 'country',
  EMAIL = 'email',
  IP_ADDRESS = 'ip_address',
  STRING = 'string'
}

export type V1RadarValueList2Input = {
  /** The name of the value list for use in rules. */
  alias?: Maybe<Scalars['String']>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
  /** The human-readable name of the value list. */
  name?: Maybe<Scalars['String']>;
};

export type V1Recipients3Input = {
  /** A bank account to attach to the recipient. You can provide either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/stripe-js), or a dictionary containing a user's bank account details, with the options described below. */
  bankAccount?: Maybe<Scalars['String']>;
  /** A U.S. Visa or MasterCard debit card (_not_ prepaid) to attach to the recipient. If the debit card is not valid, recipient creation will fail. You can provide either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/stripe-js), or a dictionary containing a user's debit card details, with the options described below. Although not all information is required, the extra info helps prevent fraud. */
  card?: Maybe<Scalars['String']>;
  /** An arbitrary string which you can attach to a `Recipient` object. It is displayed alongside the recipient in the web interface. */
  description?: Maybe<Scalars['String']>;
  /** The recipient's email address. It is displayed alongside the recipient in the web interface, and can be useful for searching and tracking. */
  email?: Maybe<Scalars['String']>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
  /** The recipient's full, legal name. For type `individual`, should be in the format `First Last`, `First Middle Last`, or `First M Last` (no prefixes or suffixes). For `corporation`, the full, incorporated name. */
  name: Scalars['String'];
  /** The recipient's tax ID, as a string. For type `individual`, the full SSN; for type `corporation`, the full EIN. */
  taxId?: Maybe<Scalars['String']>;
  /** Type of the recipient: either `individual` or `corporation`. */
  type: Scalars['String'];
};

export type V1Recipient3Input = {
  /** A bank account to attach to the recipient. You can provide either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/stripe-js), or a dictionary containing a user's bank account details, with the options described below. */
  bankAccount?: Maybe<Scalars['String']>;
  /** A U.S. Visa or MasterCard debit card (not prepaid) to attach to the recipient. You can provide either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/stripe-js), or a dictionary containing a user's debit card details, with the options described below. Passing `card` will create a new card, make it the new recipient default card, and delete the old recipient default (if one exists). If you want to add additional debit cards instead of replacing the existing default, use the [card creation API](https://stripe.com/docs/api#create_card). Whenever you attach a card to a recipient, Stripe will automatically validate the debit card. */
  card?: Maybe<Scalars['String']>;
  /** ID of the card to set as the recipient's new default for payouts. */
  defaultCard?: Maybe<Scalars['String']>;
  /** An arbitrary string which you can attach to a `Recipient` object. It is displayed alongside the recipient in the web interface. */
  description?: Maybe<Scalars['String']>;
  /** The recipient's email address. It is displayed alongside the recipient in the web interface, and can be useful for searching and tracking. */
  email?: Maybe<Scalars['String']>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
  /** The recipient's full, legal name. For type `individual`, should be in the format `First Last`, `First Middle Last`, or `First M Last` (no prefixes or suffixes). For `corporation`, the full, incorporated name. */
  name?: Maybe<Scalars['String']>;
  /** The recipient's tax ID, as a string. For type `individual`, the full SSN; for type `corporation`, the full EIN. */
  taxId?: Maybe<Scalars['String']>;
};

export type V1Refunds3Input = {
  amount?: Maybe<Scalars['Int']>;
  charge?: Maybe<Scalars['String']>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
  paymentIntent?: Maybe<Scalars['String']>;
  reason?: Maybe<Reason6>;
  refundApplicationFee?: Maybe<Scalars['Boolean']>;
  reverseTransfer?: Maybe<Scalars['Boolean']>;
};

export type V1Refund2Input = {
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
};

export type V1ReportingReportRuns3Input = {
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Parameters specifying how the report should be run. Different Report Types have different required and optional parameters, listed in the [API Access to Reports](https://stripe.com/docs/reporting/statements/api) documentation. */
  parameters?: Maybe<ParametersInput>;
  /** The ID of the [report type](https://stripe.com/docs/reporting/statements/api#report-types) to run, such as `"balance.summary.1"`. */
  reportType: Scalars['String'];
};

/** Parameters specifying how the report should be run. Different Report Types have different required and optional parameters, listed in the [API Access to Reports](https://stripe.com/docs/reporting/statements/api) documentation. */
export type ParametersInput = {
  columns?: Maybe<Array<Maybe<Scalars['String']>>>;
  connectedAccount?: Maybe<Scalars['String']>;
  currency?: Maybe<Scalars['String']>;
  intervalEnd?: Maybe<Scalars['Int']>;
  intervalStart?: Maybe<Scalars['Int']>;
  payout?: Maybe<Scalars['String']>;
  reportingCategory?: Maybe<ReportingCategory3>;
  timezone?: Maybe<Timezone3>;
};

export enum ReportingCategory3 {
  ADVANCE = 'advance',
  ADVANCE_FUNDING = 'advance_funding',
  ANTICIPATION_REPAYMENT = 'anticipation_repayment',
  CHARGE = 'charge',
  CHARGE_FAILURE = 'charge_failure',
  CONNECT_COLLECTION_TRANSFER = 'connect_collection_transfer',
  CONNECT_RESERVED_FUNDS = 'connect_reserved_funds',
  CONTRIBUTION = 'contribution',
  DISPUTE = 'dispute',
  DISPUTE_REVERSAL = 'dispute_reversal',
  FEE = 'fee',
  FINANCING_PAYDOWN = 'financing_paydown',
  FINANCING_PAYDOWN_REVERSAL = 'financing_paydown_reversal',
  FINANCING_PAYOUT = 'financing_payout',
  FINANCING_PAYOUT_REVERSAL = 'financing_payout_reversal',
  ISSUING_AUTHORIZATION_HOLD = 'issuing_authorization_hold',
  ISSUING_AUTHORIZATION_RELEASE = 'issuing_authorization_release',
  ISSUING_DISPUTE = 'issuing_dispute',
  ISSUING_TRANSACTION = 'issuing_transaction',
  NETWORK_COST = 'network_cost',
  OTHER_ADJUSTMENT = 'other_adjustment',
  PARTIAL_CAPTURE_REVERSAL = 'partial_capture_reversal',
  PAYOUT = 'payout',
  PAYOUT_REVERSAL = 'payout_reversal',
  PLATFORM_EARNING = 'platform_earning',
  PLATFORM_EARNING_REFUND = 'platform_earning_refund',
  REFUND = 'refund',
  REFUND_FAILURE = 'refund_failure',
  RISK_RESERVED_FUNDS = 'risk_reserved_funds',
  TAX = 'tax',
  TOPUP = 'topup',
  TOPUP_REVERSAL = 'topup_reversal',
  TRANSFER = 'transfer',
  TRANSFER_REVERSAL = 'transfer_reversal'
}

export enum Timezone3 {
  AFRICA_ABIDJAN = 'Africa/Abidjan',
  AFRICA_ACCRA = 'Africa/Accra',
  AFRICA_ADDIS_ABABA = 'Africa/Addis_Ababa',
  AFRICA_ALGIERS = 'Africa/Algiers',
  AFRICA_ASMARA = 'Africa/Asmara',
  AFRICA_ASMERA = 'Africa/Asmera',
  AFRICA_BAMAKO = 'Africa/Bamako',
  AFRICA_BANGUI = 'Africa/Bangui',
  AFRICA_BANJUL = 'Africa/Banjul',
  AFRICA_BISSAU = 'Africa/Bissau',
  AFRICA_BLANTYRE = 'Africa/Blantyre',
  AFRICA_BRAZZAVILLE = 'Africa/Brazzaville',
  AFRICA_BUJUMBURA = 'Africa/Bujumbura',
  AFRICA_CAIRO = 'Africa/Cairo',
  AFRICA_CASABLANCA = 'Africa/Casablanca',
  AFRICA_CEUTA = 'Africa/Ceuta',
  AFRICA_CONAKRY = 'Africa/Conakry',
  AFRICA_DAKAR = 'Africa/Dakar',
  AFRICA_DAR_ES_SALAAM = 'Africa/Dar_es_Salaam',
  AFRICA_DJIBOUTI = 'Africa/Djibouti',
  AFRICA_DOUALA = 'Africa/Douala',
  AFRICA_EL_AAIUN = 'Africa/El_Aaiun',
  AFRICA_FREETOWN = 'Africa/Freetown',
  AFRICA_GABORONE = 'Africa/Gaborone',
  AFRICA_HARARE = 'Africa/Harare',
  AFRICA_JOHANNESBURG = 'Africa/Johannesburg',
  AFRICA_JUBA = 'Africa/Juba',
  AFRICA_KAMPALA = 'Africa/Kampala',
  AFRICA_KHARTOUM = 'Africa/Khartoum',
  AFRICA_KIGALI = 'Africa/Kigali',
  AFRICA_KINSHASA = 'Africa/Kinshasa',
  AFRICA_LAGOS = 'Africa/Lagos',
  AFRICA_LIBREVILLE = 'Africa/Libreville',
  AFRICA_LOME = 'Africa/Lome',
  AFRICA_LUANDA = 'Africa/Luanda',
  AFRICA_LUBUMBASHI = 'Africa/Lubumbashi',
  AFRICA_LUSAKA = 'Africa/Lusaka',
  AFRICA_MALABO = 'Africa/Malabo',
  AFRICA_MAPUTO = 'Africa/Maputo',
  AFRICA_MASERU = 'Africa/Maseru',
  AFRICA_MBABANE = 'Africa/Mbabane',
  AFRICA_MOGADISHU = 'Africa/Mogadishu',
  AFRICA_MONROVIA = 'Africa/Monrovia',
  AFRICA_NAIROBI = 'Africa/Nairobi',
  AFRICA_NDJAMENA = 'Africa/Ndjamena',
  AFRICA_NIAMEY = 'Africa/Niamey',
  AFRICA_NOUAKCHOTT = 'Africa/Nouakchott',
  AFRICA_OUAGADOUGOU = 'Africa/Ouagadougou',
  AFRICA_PORTO_NOVO = 'Africa/Porto-Novo',
  AFRICA_SAO_TOME = 'Africa/Sao_Tome',
  AFRICA_TIMBUKTU = 'Africa/Timbuktu',
  AFRICA_TRIPOLI = 'Africa/Tripoli',
  AFRICA_TUNIS = 'Africa/Tunis',
  AFRICA_WINDHOEK = 'Africa/Windhoek',
  AMERICA_ADAK = 'America/Adak',
  AMERICA_ANCHORAGE = 'America/Anchorage',
  AMERICA_ANGUILLA = 'America/Anguilla',
  AMERICA_ANTIGUA = 'America/Antigua',
  AMERICA_ARAGUAINA = 'America/Araguaina',
  AMERICA_ARGENTINA_BUENOS_AIRES = 'America/Argentina/Buenos_Aires',
  AMERICA_ARGENTINA_CATAMARCA = 'America/Argentina/Catamarca',
  AMERICA_ARGENTINA_COMODRIVADAVIA = 'America/Argentina/ComodRivadavia',
  AMERICA_ARGENTINA_CORDOBA = 'America/Argentina/Cordoba',
  AMERICA_ARGENTINA_JUJUY = 'America/Argentina/Jujuy',
  AMERICA_ARGENTINA_LA_RIOJA = 'America/Argentina/La_Rioja',
  AMERICA_ARGENTINA_MENDOZA = 'America/Argentina/Mendoza',
  AMERICA_ARGENTINA_RIO_GALLEGOS = 'America/Argentina/Rio_Gallegos',
  AMERICA_ARGENTINA_SALTA = 'America/Argentina/Salta',
  AMERICA_ARGENTINA_SAN_JUAN = 'America/Argentina/San_Juan',
  AMERICA_ARGENTINA_SAN_LUIS = 'America/Argentina/San_Luis',
  AMERICA_ARGENTINA_TUCUMAN = 'America/Argentina/Tucuman',
  AMERICA_ARGENTINA_USHUAIA = 'America/Argentina/Ushuaia',
  AMERICA_ARUBA = 'America/Aruba',
  AMERICA_ASUNCION = 'America/Asuncion',
  AMERICA_ATIKOKAN = 'America/Atikokan',
  AMERICA_ATKA = 'America/Atka',
  AMERICA_BAHIA = 'America/Bahia',
  AMERICA_BAHIA_BANDERAS = 'America/Bahia_Banderas',
  AMERICA_BARBADOS = 'America/Barbados',
  AMERICA_BELEM = 'America/Belem',
  AMERICA_BELIZE = 'America/Belize',
  AMERICA_BLANC_SABLON = 'America/Blanc-Sablon',
  AMERICA_BOA_VISTA = 'America/Boa_Vista',
  AMERICA_BOGOTA = 'America/Bogota',
  AMERICA_BOISE = 'America/Boise',
  AMERICA_BUENOS_AIRES = 'America/Buenos_Aires',
  AMERICA_CAMBRIDGE_BAY = 'America/Cambridge_Bay',
  AMERICA_CAMPO_GRANDE = 'America/Campo_Grande',
  AMERICA_CANCUN = 'America/Cancun',
  AMERICA_CARACAS = 'America/Caracas',
  AMERICA_CATAMARCA = 'America/Catamarca',
  AMERICA_CAYENNE = 'America/Cayenne',
  AMERICA_CAYMAN = 'America/Cayman',
  AMERICA_CHICAGO = 'America/Chicago',
  AMERICA_CHIHUAHUA = 'America/Chihuahua',
  AMERICA_CORAL_HARBOUR = 'America/Coral_Harbour',
  AMERICA_CORDOBA = 'America/Cordoba',
  AMERICA_COSTA_RICA = 'America/Costa_Rica',
  AMERICA_CRESTON = 'America/Creston',
  AMERICA_CUIABA = 'America/Cuiaba',
  AMERICA_CURACAO = 'America/Curacao',
  AMERICA_DANMARKSHAVN = 'America/Danmarkshavn',
  AMERICA_DAWSON = 'America/Dawson',
  AMERICA_DAWSON_CREEK = 'America/Dawson_Creek',
  AMERICA_DENVER = 'America/Denver',
  AMERICA_DETROIT = 'America/Detroit',
  AMERICA_DOMINICA = 'America/Dominica',
  AMERICA_EDMONTON = 'America/Edmonton',
  AMERICA_EIRUNEPE = 'America/Eirunepe',
  AMERICA_EL_SALVADOR = 'America/El_Salvador',
  AMERICA_ENSENADA = 'America/Ensenada',
  AMERICA_FORT_NELSON = 'America/Fort_Nelson',
  AMERICA_FORT_WAYNE = 'America/Fort_Wayne',
  AMERICA_FORTALEZA = 'America/Fortaleza',
  AMERICA_GLACE_BAY = 'America/Glace_Bay',
  AMERICA_GODTHAB = 'America/Godthab',
  AMERICA_GOOSE_BAY = 'America/Goose_Bay',
  AMERICA_GRAND_TURK = 'America/Grand_Turk',
  AMERICA_GRENADA = 'America/Grenada',
  AMERICA_GUADELOUPE = 'America/Guadeloupe',
  AMERICA_GUATEMALA = 'America/Guatemala',
  AMERICA_GUAYAQUIL = 'America/Guayaquil',
  AMERICA_GUYANA = 'America/Guyana',
  AMERICA_HALIFAX = 'America/Halifax',
  AMERICA_HAVANA = 'America/Havana',
  AMERICA_HERMOSILLO = 'America/Hermosillo',
  AMERICA_INDIANA_INDIANAPOLIS = 'America/Indiana/Indianapolis',
  AMERICA_INDIANA_KNOX = 'America/Indiana/Knox',
  AMERICA_INDIANA_MARENGO = 'America/Indiana/Marengo',
  AMERICA_INDIANA_PETERSBURG = 'America/Indiana/Petersburg',
  AMERICA_INDIANA_TELL_CITY = 'America/Indiana/Tell_City',
  AMERICA_INDIANA_VEVAY = 'America/Indiana/Vevay',
  AMERICA_INDIANA_VINCENNES = 'America/Indiana/Vincennes',
  AMERICA_INDIANA_WINAMAC = 'America/Indiana/Winamac',
  AMERICA_INDIANAPOLIS = 'America/Indianapolis',
  AMERICA_INUVIK = 'America/Inuvik',
  AMERICA_IQALUIT = 'America/Iqaluit',
  AMERICA_JAMAICA = 'America/Jamaica',
  AMERICA_JUJUY = 'America/Jujuy',
  AMERICA_JUNEAU = 'America/Juneau',
  AMERICA_KENTUCKY_LOUISVILLE = 'America/Kentucky/Louisville',
  AMERICA_KENTUCKY_MONTICELLO = 'America/Kentucky/Monticello',
  AMERICA_KNOX_IN = 'America/Knox_IN',
  AMERICA_KRALENDIJK = 'America/Kralendijk',
  AMERICA_LA_PAZ = 'America/La_Paz',
  AMERICA_LIMA = 'America/Lima',
  AMERICA_LOS_ANGELES = 'America/Los_Angeles',
  AMERICA_LOUISVILLE = 'America/Louisville',
  AMERICA_LOWER_PRINCES = 'America/Lower_Princes',
  AMERICA_MACEIO = 'America/Maceio',
  AMERICA_MANAGUA = 'America/Managua',
  AMERICA_MANAUS = 'America/Manaus',
  AMERICA_MARIGOT = 'America/Marigot',
  AMERICA_MARTINIQUE = 'America/Martinique',
  AMERICA_MATAMOROS = 'America/Matamoros',
  AMERICA_MAZATLAN = 'America/Mazatlan',
  AMERICA_MENDOZA = 'America/Mendoza',
  AMERICA_MENOMINEE = 'America/Menominee',
  AMERICA_MERIDA = 'America/Merida',
  AMERICA_METLAKATLA = 'America/Metlakatla',
  AMERICA_MEXICO_CITY = 'America/Mexico_City',
  AMERICA_MIQUELON = 'America/Miquelon',
  AMERICA_MONCTON = 'America/Moncton',
  AMERICA_MONTERREY = 'America/Monterrey',
  AMERICA_MONTEVIDEO = 'America/Montevideo',
  AMERICA_MONTREAL = 'America/Montreal',
  AMERICA_MONTSERRAT = 'America/Montserrat',
  AMERICA_NASSAU = 'America/Nassau',
  AMERICA_NEW_YORK = 'America/New_York',
  AMERICA_NIPIGON = 'America/Nipigon',
  AMERICA_NOME = 'America/Nome',
  AMERICA_NORONHA = 'America/Noronha',
  AMERICA_NORTH_DAKOTA_BEULAH = 'America/North_Dakota/Beulah',
  AMERICA_NORTH_DAKOTA_CENTER = 'America/North_Dakota/Center',
  AMERICA_NORTH_DAKOTA_NEW_SALEM = 'America/North_Dakota/New_Salem',
  AMERICA_OJINAGA = 'America/Ojinaga',
  AMERICA_PANAMA = 'America/Panama',
  AMERICA_PANGNIRTUNG = 'America/Pangnirtung',
  AMERICA_PARAMARIBO = 'America/Paramaribo',
  AMERICA_PHOENIX = 'America/Phoenix',
  AMERICA_PORT_AU_PRINCE = 'America/Port-au-Prince',
  AMERICA_PORT_OF_SPAIN = 'America/Port_of_Spain',
  AMERICA_PORTO_ACRE = 'America/Porto_Acre',
  AMERICA_PORTO_VELHO = 'America/Porto_Velho',
  AMERICA_PUERTO_RICO = 'America/Puerto_Rico',
  AMERICA_PUNTA_ARENAS = 'America/Punta_Arenas',
  AMERICA_RAINY_RIVER = 'America/Rainy_River',
  AMERICA_RANKIN_INLET = 'America/Rankin_Inlet',
  AMERICA_RECIFE = 'America/Recife',
  AMERICA_REGINA = 'America/Regina',
  AMERICA_RESOLUTE = 'America/Resolute',
  AMERICA_RIO_BRANCO = 'America/Rio_Branco',
  AMERICA_ROSARIO = 'America/Rosario',
  AMERICA_SANTA_ISABEL = 'America/Santa_Isabel',
  AMERICA_SANTAREM = 'America/Santarem',
  AMERICA_SANTIAGO = 'America/Santiago',
  AMERICA_SANTO_DOMINGO = 'America/Santo_Domingo',
  AMERICA_SAO_PAULO = 'America/Sao_Paulo',
  AMERICA_SCORESBYSUND = 'America/Scoresbysund',
  AMERICA_SHIPROCK = 'America/Shiprock',
  AMERICA_SITKA = 'America/Sitka',
  AMERICA_ST_BARTHELEMY = 'America/St_Barthelemy',
  AMERICA_ST_JOHNS = 'America/St_Johns',
  AMERICA_ST_KITTS = 'America/St_Kitts',
  AMERICA_ST_LUCIA = 'America/St_Lucia',
  AMERICA_ST_THOMAS = 'America/St_Thomas',
  AMERICA_ST_VINCENT = 'America/St_Vincent',
  AMERICA_SWIFT_CURRENT = 'America/Swift_Current',
  AMERICA_TEGUCIGALPA = 'America/Tegucigalpa',
  AMERICA_THULE = 'America/Thule',
  AMERICA_THUNDER_BAY = 'America/Thunder_Bay',
  AMERICA_TIJUANA = 'America/Tijuana',
  AMERICA_TORONTO = 'America/Toronto',
  AMERICA_TORTOLA = 'America/Tortola',
  AMERICA_VANCOUVER = 'America/Vancouver',
  AMERICA_VIRGIN = 'America/Virgin',
  AMERICA_WHITEHORSE = 'America/Whitehorse',
  AMERICA_WINNIPEG = 'America/Winnipeg',
  AMERICA_YAKUTAT = 'America/Yakutat',
  AMERICA_YELLOWKNIFE = 'America/Yellowknife',
  ANTARCTICA_CASEY = 'Antarctica/Casey',
  ANTARCTICA_DAVIS = 'Antarctica/Davis',
  ANTARCTICA_DUMONTDURVILLE = 'Antarctica/DumontDUrville',
  ANTARCTICA_MACQUARIE = 'Antarctica/Macquarie',
  ANTARCTICA_MAWSON = 'Antarctica/Mawson',
  ANTARCTICA_MCMURDO = 'Antarctica/McMurdo',
  ANTARCTICA_PALMER = 'Antarctica/Palmer',
  ANTARCTICA_ROTHERA = 'Antarctica/Rothera',
  ANTARCTICA_SOUTH_POLE = 'Antarctica/South_Pole',
  ANTARCTICA_SYOWA = 'Antarctica/Syowa',
  ANTARCTICA_TROLL = 'Antarctica/Troll',
  ANTARCTICA_VOSTOK = 'Antarctica/Vostok',
  ARCTIC_LONGYEARBYEN = 'Arctic/Longyearbyen',
  ASIA_ADEN = 'Asia/Aden',
  ASIA_ALMATY = 'Asia/Almaty',
  ASIA_AMMAN = 'Asia/Amman',
  ASIA_ANADYR = 'Asia/Anadyr',
  ASIA_AQTAU = 'Asia/Aqtau',
  ASIA_AQTOBE = 'Asia/Aqtobe',
  ASIA_ASHGABAT = 'Asia/Ashgabat',
  ASIA_ASHKHABAD = 'Asia/Ashkhabad',
  ASIA_ATYRAU = 'Asia/Atyrau',
  ASIA_BAGHDAD = 'Asia/Baghdad',
  ASIA_BAHRAIN = 'Asia/Bahrain',
  ASIA_BAKU = 'Asia/Baku',
  ASIA_BANGKOK = 'Asia/Bangkok',
  ASIA_BARNAUL = 'Asia/Barnaul',
  ASIA_BEIRUT = 'Asia/Beirut',
  ASIA_BISHKEK = 'Asia/Bishkek',
  ASIA_BRUNEI = 'Asia/Brunei',
  ASIA_CALCUTTA = 'Asia/Calcutta',
  ASIA_CHITA = 'Asia/Chita',
  ASIA_CHOIBALSAN = 'Asia/Choibalsan',
  ASIA_CHONGQING = 'Asia/Chongqing',
  ASIA_CHUNGKING = 'Asia/Chungking',
  ASIA_COLOMBO = 'Asia/Colombo',
  ASIA_DACCA = 'Asia/Dacca',
  ASIA_DAMASCUS = 'Asia/Damascus',
  ASIA_DHAKA = 'Asia/Dhaka',
  ASIA_DILI = 'Asia/Dili',
  ASIA_DUBAI = 'Asia/Dubai',
  ASIA_DUSHANBE = 'Asia/Dushanbe',
  ASIA_FAMAGUSTA = 'Asia/Famagusta',
  ASIA_GAZA = 'Asia/Gaza',
  ASIA_HARBIN = 'Asia/Harbin',
  ASIA_HEBRON = 'Asia/Hebron',
  ASIA_HO_CHI_MINH = 'Asia/Ho_Chi_Minh',
  ASIA_HONG_KONG = 'Asia/Hong_Kong',
  ASIA_HOVD = 'Asia/Hovd',
  ASIA_IRKUTSK = 'Asia/Irkutsk',
  ASIA_ISTANBUL = 'Asia/Istanbul',
  ASIA_JAKARTA = 'Asia/Jakarta',
  ASIA_JAYAPURA = 'Asia/Jayapura',
  ASIA_JERUSALEM = 'Asia/Jerusalem',
  ASIA_KABUL = 'Asia/Kabul',
  ASIA_KAMCHATKA = 'Asia/Kamchatka',
  ASIA_KARACHI = 'Asia/Karachi',
  ASIA_KASHGAR = 'Asia/Kashgar',
  ASIA_KATHMANDU = 'Asia/Kathmandu',
  ASIA_KATMANDU = 'Asia/Katmandu',
  ASIA_KHANDYGA = 'Asia/Khandyga',
  ASIA_KOLKATA = 'Asia/Kolkata',
  ASIA_KRASNOYARSK = 'Asia/Krasnoyarsk',
  ASIA_KUALA_LUMPUR = 'Asia/Kuala_Lumpur',
  ASIA_KUCHING = 'Asia/Kuching',
  ASIA_KUWAIT = 'Asia/Kuwait',
  ASIA_MACAO = 'Asia/Macao',
  ASIA_MACAU = 'Asia/Macau',
  ASIA_MAGADAN = 'Asia/Magadan',
  ASIA_MAKASSAR = 'Asia/Makassar',
  ASIA_MANILA = 'Asia/Manila',
  ASIA_MUSCAT = 'Asia/Muscat',
  ASIA_NICOSIA = 'Asia/Nicosia',
  ASIA_NOVOKUZNETSK = 'Asia/Novokuznetsk',
  ASIA_NOVOSIBIRSK = 'Asia/Novosibirsk',
  ASIA_OMSK = 'Asia/Omsk',
  ASIA_ORAL = 'Asia/Oral',
  ASIA_PHNOM_PENH = 'Asia/Phnom_Penh',
  ASIA_PONTIANAK = 'Asia/Pontianak',
  ASIA_PYONGYANG = 'Asia/Pyongyang',
  ASIA_QATAR = 'Asia/Qatar',
  ASIA_QOSTANAY = 'Asia/Qostanay',
  ASIA_QYZYLORDA = 'Asia/Qyzylorda',
  ASIA_RANGOON = 'Asia/Rangoon',
  ASIA_RIYADH = 'Asia/Riyadh',
  ASIA_SAIGON = 'Asia/Saigon',
  ASIA_SAKHALIN = 'Asia/Sakhalin',
  ASIA_SAMARKAND = 'Asia/Samarkand',
  ASIA_SEOUL = 'Asia/Seoul',
  ASIA_SHANGHAI = 'Asia/Shanghai',
  ASIA_SINGAPORE = 'Asia/Singapore',
  ASIA_SREDNEKOLYMSK = 'Asia/Srednekolymsk',
  ASIA_TAIPEI = 'Asia/Taipei',
  ASIA_TASHKENT = 'Asia/Tashkent',
  ASIA_TBILISI = 'Asia/Tbilisi',
  ASIA_TEHRAN = 'Asia/Tehran',
  ASIA_TEL_AVIV = 'Asia/Tel_Aviv',
  ASIA_THIMBU = 'Asia/Thimbu',
  ASIA_THIMPHU = 'Asia/Thimphu',
  ASIA_TOKYO = 'Asia/Tokyo',
  ASIA_TOMSK = 'Asia/Tomsk',
  ASIA_UJUNG_PANDANG = 'Asia/Ujung_Pandang',
  ASIA_ULAANBAATAR = 'Asia/Ulaanbaatar',
  ASIA_ULAN_BATOR = 'Asia/Ulan_Bator',
  ASIA_URUMQI = 'Asia/Urumqi',
  ASIA_UST_NERA = 'Asia/Ust-Nera',
  ASIA_VIENTIANE = 'Asia/Vientiane',
  ASIA_VLADIVOSTOK = 'Asia/Vladivostok',
  ASIA_YAKUTSK = 'Asia/Yakutsk',
  ASIA_YANGON = 'Asia/Yangon',
  ASIA_YEKATERINBURG = 'Asia/Yekaterinburg',
  ASIA_YEREVAN = 'Asia/Yerevan',
  ATLANTIC_AZORES = 'Atlantic/Azores',
  ATLANTIC_BERMUDA = 'Atlantic/Bermuda',
  ATLANTIC_CANARY = 'Atlantic/Canary',
  ATLANTIC_CAPE_VERDE = 'Atlantic/Cape_Verde',
  ATLANTIC_FAEROE = 'Atlantic/Faeroe',
  ATLANTIC_FAROE = 'Atlantic/Faroe',
  ATLANTIC_JAN_MAYEN = 'Atlantic/Jan_Mayen',
  ATLANTIC_MADEIRA = 'Atlantic/Madeira',
  ATLANTIC_REYKJAVIK = 'Atlantic/Reykjavik',
  ATLANTIC_SOUTH_GEORGIA = 'Atlantic/South_Georgia',
  ATLANTIC_ST_HELENA = 'Atlantic/St_Helena',
  ATLANTIC_STANLEY = 'Atlantic/Stanley',
  AUSTRALIA_ACT = 'Australia/ACT',
  AUSTRALIA_ADELAIDE = 'Australia/Adelaide',
  AUSTRALIA_BRISBANE = 'Australia/Brisbane',
  AUSTRALIA_BROKEN_HILL = 'Australia/Broken_Hill',
  AUSTRALIA_CANBERRA = 'Australia/Canberra',
  AUSTRALIA_CURRIE = 'Australia/Currie',
  AUSTRALIA_DARWIN = 'Australia/Darwin',
  AUSTRALIA_EUCLA = 'Australia/Eucla',
  AUSTRALIA_HOBART = 'Australia/Hobart',
  AUSTRALIA_LHI = 'Australia/LHI',
  AUSTRALIA_LINDEMAN = 'Australia/Lindeman',
  AUSTRALIA_LORD_HOWE = 'Australia/Lord_Howe',
  AUSTRALIA_MELBOURNE = 'Australia/Melbourne',
  AUSTRALIA_NSW = 'Australia/NSW',
  AUSTRALIA_NORTH = 'Australia/North',
  AUSTRALIA_PERTH = 'Australia/Perth',
  AUSTRALIA_QUEENSLAND = 'Australia/Queensland',
  AUSTRALIA_SOUTH = 'Australia/South',
  AUSTRALIA_SYDNEY = 'Australia/Sydney',
  AUSTRALIA_TASMANIA = 'Australia/Tasmania',
  AUSTRALIA_VICTORIA = 'Australia/Victoria',
  AUSTRALIA_WEST = 'Australia/West',
  AUSTRALIA_YANCOWINNA = 'Australia/Yancowinna',
  BRAZIL_ACRE = 'Brazil/Acre',
  BRAZIL_DENORONHA = 'Brazil/DeNoronha',
  BRAZIL_EAST = 'Brazil/East',
  BRAZIL_WEST = 'Brazil/West',
  CET = 'CET',
  CST6CDT = 'CST6CDT',
  CANADA_ATLANTIC = 'Canada/Atlantic',
  CANADA_CENTRAL = 'Canada/Central',
  CANADA_EASTERN = 'Canada/Eastern',
  CANADA_MOUNTAIN = 'Canada/Mountain',
  CANADA_NEWFOUNDLAND = 'Canada/Newfoundland',
  CANADA_PACIFIC = 'Canada/Pacific',
  CANADA_SASKATCHEWAN = 'Canada/Saskatchewan',
  CANADA_YUKON = 'Canada/Yukon',
  CHILE_CONTINENTAL = 'Chile/Continental',
  CHILE_EASTERISLAND = 'Chile/EasterIsland',
  CUBA = 'Cuba',
  EET = 'EET',
  EST = 'EST',
  EST5EDT = 'EST5EDT',
  EGYPT = 'Egypt',
  EIRE = 'Eire',
  ETC_GMT = 'Etc/GMT',
  ETC_GMT_0 = 'Etc/GMT-0',
  ETC_GMT_1 = 'Etc/GMT-1',
  ETC_GMT_10 = 'Etc/GMT-10',
  ETC_GMT_11 = 'Etc/GMT-11',
  ETC_GMT_12 = 'Etc/GMT-12',
  ETC_GMT_2 = 'Etc/GMT-2',
  ETC_GMT_3 = 'Etc/GMT-3',
  ETC_GMT_4 = 'Etc/GMT-4',
  ETC_GMT_5 = 'Etc/GMT-5',
  ETC_GMT_6 = 'Etc/GMT-6',
  ETC_GMT_7 = 'Etc/GMT-7',
  ETC_GMT_8 = 'Etc/GMT-8',
  ETC_GMT_9 = 'Etc/GMT-9',
  ETC_GMT_13 = 'Etc/GMT-13',
  ETC_GMT_14 = 'Etc/GMT-14',
  ETC_GMT0 = 'Etc/GMT0',
  ETC_GREENWICH = 'Etc/Greenwich',
  ETC_UCT = 'Etc/UCT',
  ETC_UTC = 'Etc/UTC',
  ETC_UNIVERSAL = 'Etc/Universal',
  ETC_ZULU = 'Etc/Zulu',
  EUROPE_AMSTERDAM = 'Europe/Amsterdam',
  EUROPE_ANDORRA = 'Europe/Andorra',
  EUROPE_ASTRAKHAN = 'Europe/Astrakhan',
  EUROPE_ATHENS = 'Europe/Athens',
  EUROPE_BELFAST = 'Europe/Belfast',
  EUROPE_BELGRADE = 'Europe/Belgrade',
  EUROPE_BERLIN = 'Europe/Berlin',
  EUROPE_BRATISLAVA = 'Europe/Bratislava',
  EUROPE_BRUSSELS = 'Europe/Brussels',
  EUROPE_BUCHAREST = 'Europe/Bucharest',
  EUROPE_BUDAPEST = 'Europe/Budapest',
  EUROPE_BUSINGEN = 'Europe/Busingen',
  EUROPE_CHISINAU = 'Europe/Chisinau',
  EUROPE_COPENHAGEN = 'Europe/Copenhagen',
  EUROPE_DUBLIN = 'Europe/Dublin',
  EUROPE_GIBRALTAR = 'Europe/Gibraltar',
  EUROPE_GUERNSEY = 'Europe/Guernsey',
  EUROPE_HELSINKI = 'Europe/Helsinki',
  EUROPE_ISLE_OF_MAN = 'Europe/Isle_of_Man',
  EUROPE_ISTANBUL = 'Europe/Istanbul',
  EUROPE_JERSEY = 'Europe/Jersey',
  EUROPE_KALININGRAD = 'Europe/Kaliningrad',
  EUROPE_KIEV = 'Europe/Kiev',
  EUROPE_KIROV = 'Europe/Kirov',
  EUROPE_LISBON = 'Europe/Lisbon',
  EUROPE_LJUBLJANA = 'Europe/Ljubljana',
  EUROPE_LONDON = 'Europe/London',
  EUROPE_LUXEMBOURG = 'Europe/Luxembourg',
  EUROPE_MADRID = 'Europe/Madrid',
  EUROPE_MALTA = 'Europe/Malta',
  EUROPE_MARIEHAMN = 'Europe/Mariehamn',
  EUROPE_MINSK = 'Europe/Minsk',
  EUROPE_MONACO = 'Europe/Monaco',
  EUROPE_MOSCOW = 'Europe/Moscow',
  EUROPE_NICOSIA = 'Europe/Nicosia',
  EUROPE_OSLO = 'Europe/Oslo',
  EUROPE_PARIS = 'Europe/Paris',
  EUROPE_PODGORICA = 'Europe/Podgorica',
  EUROPE_PRAGUE = 'Europe/Prague',
  EUROPE_RIGA = 'Europe/Riga',
  EUROPE_ROME = 'Europe/Rome',
  EUROPE_SAMARA = 'Europe/Samara',
  EUROPE_SAN_MARINO = 'Europe/San_Marino',
  EUROPE_SARAJEVO = 'Europe/Sarajevo',
  EUROPE_SARATOV = 'Europe/Saratov',
  EUROPE_SIMFEROPOL = 'Europe/Simferopol',
  EUROPE_SKOPJE = 'Europe/Skopje',
  EUROPE_SOFIA = 'Europe/Sofia',
  EUROPE_STOCKHOLM = 'Europe/Stockholm',
  EUROPE_TALLINN = 'Europe/Tallinn',
  EUROPE_TIRANE = 'Europe/Tirane',
  EUROPE_TIRASPOL = 'Europe/Tiraspol',
  EUROPE_ULYANOVSK = 'Europe/Ulyanovsk',
  EUROPE_UZHGOROD = 'Europe/Uzhgorod',
  EUROPE_VADUZ = 'Europe/Vaduz',
  EUROPE_VATICAN = 'Europe/Vatican',
  EUROPE_VIENNA = 'Europe/Vienna',
  EUROPE_VILNIUS = 'Europe/Vilnius',
  EUROPE_VOLGOGRAD = 'Europe/Volgograd',
  EUROPE_WARSAW = 'Europe/Warsaw',
  EUROPE_ZAGREB = 'Europe/Zagreb',
  EUROPE_ZAPOROZHYE = 'Europe/Zaporozhye',
  EUROPE_ZURICH = 'Europe/Zurich',
  FACTORY = 'Factory',
  GB = 'GB',
  GB_EIRE = 'GB-Eire',
  GMT = 'GMT',
  GMT_0 = 'GMT-0',
  GMT0 = 'GMT0',
  GREENWICH = 'Greenwich',
  HST = 'HST',
  HONGKONG = 'Hongkong',
  ICELAND = 'Iceland',
  INDIAN_ANTANANARIVO = 'Indian/Antananarivo',
  INDIAN_CHAGOS = 'Indian/Chagos',
  INDIAN_CHRISTMAS = 'Indian/Christmas',
  INDIAN_COCOS = 'Indian/Cocos',
  INDIAN_COMORO = 'Indian/Comoro',
  INDIAN_KERGUELEN = 'Indian/Kerguelen',
  INDIAN_MAHE = 'Indian/Mahe',
  INDIAN_MALDIVES = 'Indian/Maldives',
  INDIAN_MAURITIUS = 'Indian/Mauritius',
  INDIAN_MAYOTTE = 'Indian/Mayotte',
  INDIAN_REUNION = 'Indian/Reunion',
  IRAN = 'Iran',
  ISRAEL = 'Israel',
  JAMAICA = 'Jamaica',
  JAPAN = 'Japan',
  KWAJALEIN = 'Kwajalein',
  LIBYA = 'Libya',
  MET = 'MET',
  MST = 'MST',
  MST7MDT = 'MST7MDT',
  MEXICO_BAJANORTE = 'Mexico/BajaNorte',
  MEXICO_BAJASUR = 'Mexico/BajaSur',
  MEXICO_GENERAL = 'Mexico/General',
  NZ = 'NZ',
  NZ_CHAT = 'NZ-CHAT',
  NAVAJO = 'Navajo',
  PRC = 'PRC',
  PST8PDT = 'PST8PDT',
  PACIFIC_APIA = 'Pacific/Apia',
  PACIFIC_AUCKLAND = 'Pacific/Auckland',
  PACIFIC_BOUGAINVILLE = 'Pacific/Bougainville',
  PACIFIC_CHATHAM = 'Pacific/Chatham',
  PACIFIC_CHUUK = 'Pacific/Chuuk',
  PACIFIC_EASTER = 'Pacific/Easter',
  PACIFIC_EFATE = 'Pacific/Efate',
  PACIFIC_ENDERBURY = 'Pacific/Enderbury',
  PACIFIC_FAKAOFO = 'Pacific/Fakaofo',
  PACIFIC_FIJI = 'Pacific/Fiji',
  PACIFIC_FUNAFUTI = 'Pacific/Funafuti',
  PACIFIC_GALAPAGOS = 'Pacific/Galapagos',
  PACIFIC_GAMBIER = 'Pacific/Gambier',
  PACIFIC_GUADALCANAL = 'Pacific/Guadalcanal',
  PACIFIC_GUAM = 'Pacific/Guam',
  PACIFIC_HONOLULU = 'Pacific/Honolulu',
  PACIFIC_JOHNSTON = 'Pacific/Johnston',
  PACIFIC_KIRITIMATI = 'Pacific/Kiritimati',
  PACIFIC_KOSRAE = 'Pacific/Kosrae',
  PACIFIC_KWAJALEIN = 'Pacific/Kwajalein',
  PACIFIC_MAJURO = 'Pacific/Majuro',
  PACIFIC_MARQUESAS = 'Pacific/Marquesas',
  PACIFIC_MIDWAY = 'Pacific/Midway',
  PACIFIC_NAURU = 'Pacific/Nauru',
  PACIFIC_NIUE = 'Pacific/Niue',
  PACIFIC_NORFOLK = 'Pacific/Norfolk',
  PACIFIC_NOUMEA = 'Pacific/Noumea',
  PACIFIC_PAGO_PAGO = 'Pacific/Pago_Pago',
  PACIFIC_PALAU = 'Pacific/Palau',
  PACIFIC_PITCAIRN = 'Pacific/Pitcairn',
  PACIFIC_POHNPEI = 'Pacific/Pohnpei',
  PACIFIC_PONAPE = 'Pacific/Ponape',
  PACIFIC_PORT_MORESBY = 'Pacific/Port_Moresby',
  PACIFIC_RAROTONGA = 'Pacific/Rarotonga',
  PACIFIC_SAIPAN = 'Pacific/Saipan',
  PACIFIC_SAMOA = 'Pacific/Samoa',
  PACIFIC_TAHITI = 'Pacific/Tahiti',
  PACIFIC_TARAWA = 'Pacific/Tarawa',
  PACIFIC_TONGATAPU = 'Pacific/Tongatapu',
  PACIFIC_TRUK = 'Pacific/Truk',
  PACIFIC_WAKE = 'Pacific/Wake',
  PACIFIC_WALLIS = 'Pacific/Wallis',
  PACIFIC_YAP = 'Pacific/Yap',
  POLAND = 'Poland',
  PORTUGAL = 'Portugal',
  ROC = 'ROC',
  ROK = 'ROK',
  SINGAPORE = 'Singapore',
  TURKEY = 'Turkey',
  UCT = 'UCT',
  US_ALASKA = 'US/Alaska',
  US_ALEUTIAN = 'US/Aleutian',
  US_ARIZONA = 'US/Arizona',
  US_CENTRAL = 'US/Central',
  US_EAST_INDIANA = 'US/East-Indiana',
  US_EASTERN = 'US/Eastern',
  US_HAWAII = 'US/Hawaii',
  US_INDIANA_STARKE = 'US/Indiana-Starke',
  US_MICHIGAN = 'US/Michigan',
  US_MOUNTAIN = 'US/Mountain',
  US_PACIFIC = 'US/Pacific',
  US_PACIFIC_NEW = 'US/Pacific-New',
  US_SAMOA = 'US/Samoa',
  UTC = 'UTC',
  UNIVERSAL = 'Universal',
  W_SU = 'W-SU',
  WET = 'WET',
  ZULU = 'Zulu'
}

export type V1ReviewApproveInput = {
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type V1SetupIntents2Input = {
  /** Set to `true` to attempt to confirm this SetupIntent immediately. This parameter defaults to `false`. If the payment method attached is a card, a return_url may be provided in case additional authentication is required. */
  confirm?: Maybe<Scalars['Boolean']>;
  /**
   * ID of the Customer this SetupIntent belongs to, if one exists.
   *
   * If present, the SetupIntent's payment method will be attached to the Customer on successful setup. Payment methods attached to other Customers cannot be used with this SetupIntent.
   */
  customer?: Maybe<Scalars['String']>;
  /** An arbitrary string attached to the object. Often useful for displaying to users. */
  description?: Maybe<Scalars['String']>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** This hash contains details about the Mandate to create. This parameter can only be used with [`confirm=true`](https://stripe.com/docs/api/setup_intents/create#create_setup_intent-confirm). */
  mandateData?: Maybe<SecretKeyParamInput>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
  /** The Stripe account ID for which this SetupIntent is created. */
  onBehalfOf?: Maybe<Scalars['String']>;
  /** ID of the payment method (a PaymentMethod, Card, or saved Source object) to attach to this SetupIntent. */
  paymentMethod?: Maybe<Scalars['String']>;
  /** Payment-method-specific configuration for this SetupIntent. */
  paymentMethodOptions?: Maybe<PaymentMethodOptions8Input>;
  /** The list of payment method types (e.g. card) that this SetupIntent is allowed to use. If this is not provided, defaults to ["card"]. */
  paymentMethodTypes?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** The URL to redirect your customer back to after they authenticate or cancel their payment on the payment method's app or site. If you'd prefer to redirect to a mobile application, you can alternatively supply an application URI scheme. This parameter can only be used with [`confirm=true`](https://stripe.com/docs/api/setup_intents/create#create_setup_intent-confirm). */
  returnUrl?: Maybe<Scalars['String']>;
  /** If this hash is populated, this SetupIntent will generate a single_use Mandate on success. */
  singleUse?: Maybe<SingleUseInput>;
  /** Indicates how the payment method is intended to be used in the future. If not provided, this value defaults to `off_session`. */
  usage?: Maybe<Usage9>;
};

/** This hash contains details about the Mandate to create. This parameter can only be used with [`confirm=true`](https://stripe.com/docs/api/setup_intents/create#create_setup_intent-confirm). */
export type SecretKeyParamInput = {
  customerAcceptance: CustomerAcceptanceParamInput;
};

/** Payment-method-specific configuration for this SetupIntent. */
export type PaymentMethodOptions8Input = {
  acssDebit?: Maybe<SetupIntentPaymentMethodOptionsParamInput>;
  card?: Maybe<SetupIntentParamInput>;
  sepaDebit?: Maybe<SepaDebit8Input>;
};

export type SetupIntentPaymentMethodOptionsParamInput = {
  currency?: Maybe<Currency24>;
  mandateOptions?: Maybe<SetupIntentPaymentMethodOptionsMandateOptionsParamInput>;
  verificationMethod?: Maybe<VerificationMethod2>;
};

export type SetupIntentPaymentMethodOptionsMandateOptionsParamInput = {
  customMandateUrl?: Maybe<Scalars['JSON']>;
  intervalDescription?: Maybe<Scalars['String']>;
  paymentSchedule?: Maybe<PaymentSchedule2>;
  transactionType?: Maybe<TransactionType2>;
};

export type SetupIntentParamInput = {
  requestThreeDSecure?: Maybe<RequestThreeDSecure3>;
};

export enum RequestThreeDSecure3 {
  ANY = 'any',
  AUTOMATIC = 'automatic'
}

export type SepaDebit8Input = {
  mandateOptions?: Maybe<Scalars['JSON']>;
};

/** If this hash is populated, this SetupIntent will generate a single_use Mandate on success. */
export type SingleUseInput = {
  amount: Scalars['Int'];
  currency: Scalars['String'];
};

export enum Usage9 {
  OFF_SESSION = 'off_session',
  ON_SESSION = 'on_session'
}

export type V1SetupIntents3Input = {
  /**
   * ID of the Customer this SetupIntent belongs to, if one exists.
   *
   * If present, the SetupIntent's payment method will be attached to the Customer on successful setup. Payment methods attached to other Customers cannot be used with this SetupIntent.
   */
  customer?: Maybe<Scalars['String']>;
  /** An arbitrary string attached to the object. Often useful for displaying to users. */
  description?: Maybe<Scalars['String']>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
  /** ID of the payment method (a PaymentMethod, Card, or saved Source object) to attach to this SetupIntent. */
  paymentMethod?: Maybe<Scalars['String']>;
  /** Payment-method-specific configuration for this SetupIntent. */
  paymentMethodOptions?: Maybe<PaymentMethodOptions8Input>;
  /** The list of payment method types (e.g. card) that this SetupIntent is allowed to set up. If this is not provided, defaults to ["card"]. */
  paymentMethodTypes?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type V1SetupIntentsCancelInput = {
  /** Reason for canceling this SetupIntent. Possible values are `abandoned`, `requested_by_customer`, or `duplicate` */
  cancellationReason?: Maybe<CancellationReason8>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export enum CancellationReason8 {
  ABANDONED = 'abandoned',
  DUPLICATE = 'duplicate',
  REQUESTED_BY_CUSTOMER = 'requested_by_customer'
}

export type V1SetupIntentsConfirmInput = {
  /** The client secret of the SetupIntent. */
  clientSecret?: Maybe<Scalars['String']>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** This hash contains details about the Mandate to create */
  mandateData?: Maybe<MandateData2Input>;
  /** ID of the payment method (a PaymentMethod, Card, or saved Source object) to attach to this SetupIntent. */
  paymentMethod?: Maybe<Scalars['String']>;
  /** Payment-method-specific configuration for this SetupIntent. */
  paymentMethodOptions?: Maybe<PaymentMethodOptions8Input>;
  /**
   * The URL to redirect your customer back to after they authenticate on the payment method's app or site.
   * If you'd prefer to redirect to a mobile application, you can alternatively supply an application URI scheme.
   * This parameter is only used for cards and other redirect-based payment methods.
   */
  returnUrl?: Maybe<Scalars['String']>;
};

export type V1Skus3Input = {
  /** Whether the SKU is available for purchase. Default to `true`. */
  active?: Maybe<Scalars['Boolean']>;
  /** A dictionary of attributes and values for the attributes defined by the product. If, for example, a product's attributes are `["size", "gender"]`, a valid SKU has the following dictionary of attributes: `{"size": "Medium", "gender": "Unisex"}`. */
  attributes?: Maybe<Scalars['JSON']>;
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency: Scalars['String'];
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** The identifier for the SKU. Must be unique. If not provided, an identifier will be randomly generated. */
  id?: Maybe<Scalars['String']>;
  /** The URL of an image for this SKU, meant to be displayable to the customer. */
  image?: Maybe<Scalars['String']>;
  /** Description of the SKU's inventory. */
  inventory: InventoryInput;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
  /** The dimensions of this SKU for shipping purposes. */
  packageDimensions?: Maybe<PackageDimensions4Input>;
  /** The cost of the item as a nonnegative integer in the smallest currency unit (that is, 100 cents to charge $1.00, or 100 to charge ¥100, Japanese Yen being a zero-decimal currency). */
  price: Scalars['Int'];
  /** The ID of the product this SKU is associated with. Must be a product with type `good`. */
  product: Scalars['String'];
};

/** Description of the SKU's inventory. */
export type InventoryInput = {
  quantity?: Maybe<Scalars['Int']>;
  type: Type58;
  value?: Maybe<Value10>;
};

export enum Type58 {
  BUCKET = 'bucket',
  FINITE = 'finite',
  INFINITE = 'infinite'
}

export enum Value10 {
  _ = '',
  IN_STOCK = 'in_stock',
  LIMITED = 'limited',
  OUT_OF_STOCK = 'out_of_stock'
}

/** The dimensions of this SKU for shipping purposes. */
export type PackageDimensions4Input = {
  height: Scalars['Float'];
  length: Scalars['Float'];
  weight: Scalars['Float'];
  width: Scalars['Float'];
};

export type V1Skus5Input = {
  /** Whether this SKU is available for purchase. */
  active?: Maybe<Scalars['Boolean']>;
  /** A dictionary of attributes and values for the attributes defined by the product. When specified, `attributes` will partially update the existing attributes dictionary on the product, with the postcondition that a value must be present for each attribute key on the product. */
  attributes?: Maybe<Scalars['JSON']>;
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency?: Maybe<Scalars['String']>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** The URL of an image for this SKU, meant to be displayable to the customer. */
  image?: Maybe<Scalars['String']>;
  /** Description of the SKU's inventory. */
  inventory?: Maybe<InventoryUpdateSpecsInput>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
  /** The dimensions of this SKU for shipping purposes. */
  packageDimensions?: Maybe<Scalars['JSON']>;
  /** The cost of the item as a positive integer in the smallest currency unit (that is, 100 cents to charge $1.00, or 100 to charge ¥100, Japanese Yen being a zero-decimal currency). */
  price?: Maybe<Scalars['Int']>;
  /** The ID of the product that this SKU should belong to. The product must exist, have the same set of attribute names as the SKU's current product, and be of type `good`. */
  product?: Maybe<Scalars['String']>;
};

/** Description of the SKU's inventory. */
export type InventoryUpdateSpecsInput = {
  quantity?: Maybe<Scalars['Int']>;
  type?: Maybe<Type58>;
  value?: Maybe<Value10>;
};

export type V1SourcesInput = {
  /** Amount associated with the source. This is the amount for which the source will be chargeable once ready. Required for `single_use` sources. Not supported for `receiver` type sources, where charge amount may not be specified until funds land. */
  amount?: Maybe<Scalars['Int']>;
  /** Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) associated with the source. This is the currency for which the source will be chargeable once ready. */
  currency?: Maybe<Scalars['String']>;
  /** The `Customer` to whom the original source is attached to. Must be set when the original source is not a `Source` (e.g., `Card`). */
  customer?: Maybe<Scalars['String']>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** The authentication `flow` of the source to create. `flow` is one of `redirect`, `receiver`, `code_verification`, `none`. It is generally inferred unless a type supports multiple flows. */
  flow?: Maybe<Flow7>;
  /** Information about a mandate possibility attached to a source object (generally for bank debits) as well as its acceptance status. */
  mandate?: Maybe<MandateParamsInput>;
  metadata?: Maybe<Scalars['JSON']>;
  /** The source to share. */
  originalSource?: Maybe<Scalars['String']>;
  /** Information about the owner of the payment instrument that may be used or required by particular source types. */
  owner?: Maybe<Owner5Input>;
  /** Optional parameters for the receiver flow. Can be set only if the source is a receiver (`flow` is `receiver`). */
  receiver?: Maybe<ReceiverParamsInput>;
  /** Parameters required for the redirect flow. Required if the source is authenticated by a redirect (`flow` is `redirect`). */
  redirect?: Maybe<RedirectParamsInput>;
  /** Information about the items and shipping associated with the source. Required for transactional credit (for example Klarna) sources before you can charge it. */
  sourceOrder?: Maybe<ShallowOrderSpecsInput>;
  /** An arbitrary string to be displayed on your customer's statement. As an example, if your website is `RunClub` and the item you're charging for is a race ticket, you may want to specify a `statement_descriptor` of `RunClub 5K race ticket.` While many payment types will display this information, some may not display it at all. */
  statementDescriptor?: Maybe<Scalars['String']>;
  /** An optional token used to create the source. When passed, token properties will override source parameters. */
  token?: Maybe<Scalars['String']>;
  /** The `type` of the source to create. Required unless `customer` and `original_source` are specified (see the [Cloning card Sources](https://stripe.com/docs/sources/connect#cloning-card-sources) guide) */
  type?: Maybe<Scalars['String']>;
  usage?: Maybe<Usage10>;
};

export enum Flow7 {
  CODE_VERIFICATION = 'code_verification',
  NONE = 'none',
  RECEIVER = 'receiver',
  REDIRECT = 'redirect'
}

/** Information about a mandate possibility attached to a source object (generally for bank debits) as well as its acceptance status. */
export type MandateParamsInput = {
  acceptance?: Maybe<AcceptanceInput>;
  amount?: Maybe<Scalars['JSON']>;
  currency?: Maybe<Scalars['String']>;
  interval?: Maybe<Interval10>;
  notificationMethod?: Maybe<NotificationMethod>;
};

export type AcceptanceInput = {
  date?: Maybe<Scalars['Int']>;
  ip?: Maybe<Scalars['String']>;
  offline?: Maybe<MandateOfflineAcceptanceParamsInput>;
  online?: Maybe<MandateOnlineAcceptanceParamsInput>;
  status: Status45;
  type?: Maybe<Type47>;
  userAgent?: Maybe<Scalars['String']>;
};

export type MandateOfflineAcceptanceParamsInput = {
  contactEmail: Scalars['String'];
};

export type MandateOnlineAcceptanceParamsInput = {
  date?: Maybe<Scalars['Int']>;
  ip?: Maybe<Scalars['String']>;
  userAgent?: Maybe<Scalars['String']>;
};

export enum Status45 {
  ACCEPTED = 'accepted',
  PENDING = 'pending',
  REFUSED = 'refused',
  REVOKED = 'revoked'
}

export enum Interval10 {
  ONE_TIME = 'one_time',
  SCHEDULED = 'scheduled',
  VARIABLE = 'variable'
}

export enum NotificationMethod {
  DEPRECATED_NONE = 'deprecated_none',
  EMAIL = 'email',
  MANUAL = 'manual',
  NONE = 'none',
  STRIPE_EMAIL = 'stripe_email'
}

/** Information about the owner of the payment instrument that may be used or required by particular source types. */
export type Owner5Input = {
  address?: Maybe<SourceAddressInput>;
  email?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
};

/** Optional parameters for the receiver flow. Can be set only if the source is a receiver (`flow` is `receiver`). */
export type ReceiverParamsInput = {
  refundAttributesMethod?: Maybe<RefundAttributesMethod2>;
};

export enum RefundAttributesMethod2 {
  EMAIL = 'email',
  MANUAL = 'manual',
  NONE = 'none'
}

/** Parameters required for the redirect flow. Required if the source is authenticated by a redirect (`flow` is `redirect`). */
export type RedirectParamsInput = {
  returnUrl: Scalars['String'];
};

/** Information about the items and shipping associated with the source. Required for transactional credit (for example Klarna) sources before you can charge it. */
export type ShallowOrderSpecsInput = {
  items?: Maybe<Array<Maybe<Items9ListItemInput>>>;
  shipping?: Maybe<OrderShippingInput>;
};

export type Items9ListItemInput = {
  amount?: Maybe<Scalars['Int']>;
  currency?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  parent?: Maybe<Scalars['String']>;
  quantity?: Maybe<Scalars['Int']>;
  type?: Maybe<Type46>;
};

export type OrderShippingInput = {
  address: Address6Input;
  carrier?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  trackingNumber?: Maybe<Scalars['String']>;
};

export enum Usage10 {
  REUSABLE = 'reusable',
  SINGLE_USE = 'single_use'
}

export type V1Source2Input = {
  /** Amount associated with the source. */
  amount?: Maybe<Scalars['Int']>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Information about a mandate possibility attached to a source object (generally for bank debits) as well as its acceptance status. */
  mandate?: Maybe<MandateParamsInput>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
  /** Information about the owner of the payment instrument that may be used or required by particular source types. */
  owner?: Maybe<Owner5Input>;
  /** Information about the items and shipping associated with the source. Required for transactional credit (for example Klarna) sources before you can charge it. */
  sourceOrder?: Maybe<OrderParamsInput>;
};

/** Information about the items and shipping associated with the source. Required for transactional credit (for example Klarna) sources before you can charge it. */
export type OrderParamsInput = {
  items?: Maybe<Array<Maybe<Items9ListItemInput>>>;
  shipping?: Maybe<OrderShippingInput>;
};

export type V1SourceVerifyInput = {
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** The values needed to verify the source. */
  values: Array<Maybe<Scalars['String']>>;
};

export type V1SubscriptionItems3Input = {
  /** Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period. When updating, pass an empty string to remove previously-defined thresholds. */
  billingThresholds?: Maybe<Scalars['JSON']>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
  /**
   * Use `allow_incomplete` to transition the subscription to `status=past_due` if a payment is required but cannot be paid. This allows you to manage scenarios where additional user actions are needed to pay a subscription's invoice. For example, SCA regulation may require 3DS authentication to complete payment. See the [SCA Migration Guide](https://stripe.com/docs/billing/migration/strong-customer-authentication) for Billing to learn more. This is the default behavior.
   *
   * Use `default_incomplete` to transition the subscription to `status=past_due` when payment is required and await explicit confirmation of the invoice's payment intent. This allows simpler management of scenarios where additional user actions are needed to pay a subscription’s invoice. Such as failed payments, [SCA regulation](https://stripe.com/docs/billing/migration/strong-customer-authentication), or collecting a mandate for a bank debit payment method.
   *
   * Use `pending_if_incomplete` to update the subscription using [pending updates](https://stripe.com/docs/billing/subscriptions/pending-updates). When you use `pending_if_incomplete` you can only pass the parameters [supported by pending updates](https://stripe.com/docs/billing/pending-updates-reference#supported-attributes).
   *
   * Use `error_if_incomplete` if you want Stripe to return an HTTP 402 status code if a subscription's invoice cannot be paid. For example, if a payment method requires 3DS authentication due to SCA regulation and further user action is needed, this parameter does not update the subscription and returns an error instead. This was the default behavior for API versions prior to 2019-03-14. See the [changelog](https://stripe.com/docs/upgrades#2019-03-14) to learn more.
   */
  paymentBehavior?: Maybe<PaymentBehavior2>;
  /** The ID of the price object. */
  price?: Maybe<Scalars['String']>;
  /** Data used to generate a new [Price](https://stripe.com/docs/api/prices) object inline. */
  priceData?: Maybe<PriceData4Input>;
  /**
   * Determines how to handle [prorations](https://stripe.com/docs/subscriptions/billing-cycle#prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item's `quantity` changes. Valid values are `create_prorations`, `none`, or `always_invoice`.
   *
   * Passing `create_prorations` will cause proration invoice items to be created when applicable. These proration items will only be invoiced immediately under [certain conditions](https://stripe.com/docs/subscriptions/upgrading-downgrading#immediate-payment). In order to always invoice immediately for prorations, pass `always_invoice`.
   *
   * Prorations can be disabled by passing `none`.
   */
  prorationBehavior?: Maybe<ProrationBehavior5>;
  /** If set, the proration will be calculated as though the subscription was updated at the given time. This can be used to apply the same proration that was previewed with the [upcoming invoice](https://stripe.com/docs/api#retrieve_customer_invoice) endpoint. */
  prorationDate?: Maybe<Scalars['Int']>;
  /** The quantity you'd like to apply to the subscription item you're creating. */
  quantity?: Maybe<Scalars['Int']>;
  /** The identifier of the subscription to modify. */
  subscription: Scalars['String'];
  /** A list of [Tax Rate](https://stripe.com/docs/api/tax_rates) ids. These Tax Rates will override the [`default_tax_rates`](https://stripe.com/docs/api/subscriptions/create#create_subscription-default_tax_rates) on the Subscription. When updating, pass an empty string to remove previously-defined tax rates. */
  taxRates?: Maybe<Scalars['JSON']>;
};

/** Data used to generate a new [Price](https://stripe.com/docs/api/prices) object inline. */
export type PriceData4Input = {
  currency: Scalars['String'];
  product: Scalars['String'];
  recurring: RecurringAdhocInput;
  taxBehavior?: Maybe<TaxBehavior2>;
  unitAmount?: Maybe<Scalars['Int']>;
  unitAmountDecimal?: Maybe<Scalars['String']>;
};

export type V1SubscriptionItems5Input = {
  /** Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period. When updating, pass an empty string to remove previously-defined thresholds. */
  billingThresholds?: Maybe<Scalars['JSON']>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
  /** Indicates if a customer is on or off-session while an invoice payment is attempted. */
  offSession?: Maybe<Scalars['Boolean']>;
  /**
   * Use `allow_incomplete` to transition the subscription to `status=past_due` if a payment is required but cannot be paid. This allows you to manage scenarios where additional user actions are needed to pay a subscription's invoice. For example, SCA regulation may require 3DS authentication to complete payment. See the [SCA Migration Guide](https://stripe.com/docs/billing/migration/strong-customer-authentication) for Billing to learn more. This is the default behavior.
   *
   * Use `default_incomplete` to transition the subscription to `status=past_due` when payment is required and await explicit confirmation of the invoice's payment intent. This allows simpler management of scenarios where additional user actions are needed to pay a subscription’s invoice. Such as failed payments, [SCA regulation](https://stripe.com/docs/billing/migration/strong-customer-authentication), or collecting a mandate for a bank debit payment method.
   *
   * Use `pending_if_incomplete` to update the subscription using [pending updates](https://stripe.com/docs/billing/subscriptions/pending-updates). When you use `pending_if_incomplete` you can only pass the parameters [supported by pending updates](https://stripe.com/docs/billing/pending-updates-reference#supported-attributes).
   *
   * Use `error_if_incomplete` if you want Stripe to return an HTTP 402 status code if a subscription's invoice cannot be paid. For example, if a payment method requires 3DS authentication due to SCA regulation and further user action is needed, this parameter does not update the subscription and returns an error instead. This was the default behavior for API versions prior to 2019-03-14. See the [changelog](https://stripe.com/docs/upgrades#2019-03-14) to learn more.
   */
  paymentBehavior?: Maybe<PaymentBehavior2>;
  /** The ID of the price object. When changing a subscription item's price, `quantity` is set to 1 unless a `quantity` parameter is provided. */
  price?: Maybe<Scalars['String']>;
  /** Data used to generate a new [Price](https://stripe.com/docs/api/prices) object inline. */
  priceData?: Maybe<PriceData4Input>;
  /**
   * Determines how to handle [prorations](https://stripe.com/docs/subscriptions/billing-cycle#prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item's `quantity` changes. Valid values are `create_prorations`, `none`, or `always_invoice`.
   *
   * Passing `create_prorations` will cause proration invoice items to be created when applicable. These proration items will only be invoiced immediately under [certain conditions](https://stripe.com/docs/subscriptions/upgrading-downgrading#immediate-payment). In order to always invoice immediately for prorations, pass `always_invoice`.
   *
   * Prorations can be disabled by passing `none`.
   */
  prorationBehavior?: Maybe<ProrationBehavior5>;
  /** If set, the proration will be calculated as though the subscription was updated at the given time. This can be used to apply the same proration that was previewed with the [upcoming invoice](https://stripe.com/docs/api#retrieve_customer_invoice) endpoint. */
  prorationDate?: Maybe<Scalars['Int']>;
  /** The quantity you'd like to apply to the subscription item you're creating. */
  quantity?: Maybe<Scalars['Int']>;
  /** A list of [Tax Rate](https://stripe.com/docs/api/tax_rates) ids. These Tax Rates will override the [`default_tax_rates`](https://stripe.com/docs/api/subscriptions/create#create_subscription-default_tax_rates) on the Subscription. When updating, pass an empty string to remove previously-defined tax rates. */
  taxRates?: Maybe<Scalars['JSON']>;
};

/**
 * Usage records allow you to report customer usage and metrics to Stripe for
 * metered billing of subscription prices.
 *
 * Related guide: [Metered Billing](https://stripe.com/docs/billing/subscriptions/metered-billing).
 */
export type UsageRecord = {
  /** Unique identifier for the object. */
  id: Scalars['String'];
  /** Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
  livemode: Scalars['Boolean'];
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object80;
  /** The usage quantity for the specified date. */
  quantity: Scalars['Int'];
  /** The ID of the subscription item this usage record contains data for. */
  subscriptionItem: Scalars['String'];
  /** The timestamp when this usage occurred. */
  timestamp: Scalars['Int'];
};

export enum Object80 {
  USAGE_RECORD = 'usage_record'
}

export type V1SubscriptionItemUsageRecordsInput = {
  /** Valid values are `increment` (default) or `set`. When using `increment` the specified `quantity` will be added to the usage at the specified timestamp. The `set` action will overwrite the usage quantity at that timestamp. If the subscription has [billing thresholds](https://stripe.com/docs/api/subscriptions/object#subscription_object-billing_thresholds), `increment` is the only allowed value. */
  action?: Maybe<Action>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** The usage quantity for the specified timestamp. */
  quantity: Scalars['Int'];
  /** The timestamp for the usage event. This timestamp must be within the current billing period of the subscription of the provided `subscription_item`. */
  timestamp: Scalars['Int'];
};

export enum Action {
  INCREMENT = 'increment',
  SET = 'set'
}

export type V1SubscriptionSchedules3Input = {
  /** The identifier of the customer to create the subscription schedule for. */
  customer?: Maybe<Scalars['String']>;
  /** Object representing the subscription schedule's default settings. */
  defaultSettings?: Maybe<DefaultSettingsInput>;
  /** Configures how the subscription schedule behaves when it ends. Possible values are `release` or `cancel` with the default being `release`. `release` will end the subscription schedule and keep the underlying subscription running.`cancel` will end the subscription schedule and cancel the underlying subscription. */
  endBehavior?: Maybe<EndBehavior2>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Migrate an existing subscription to be managed by a subscription schedule. If this parameter is set, a subscription schedule will be created using the subscription's item(s), set to auto-renew using the subscription's interval. When using this parameter, other parameters (such as phase values) cannot be set. To create a subscription schedule with other modifications, we recommend making two separate API calls. */
  fromSubscription?: Maybe<Scalars['String']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
  /** List representing phases of the subscription schedule. Each phase can be customized to have different durations, plans, and coupons. If there are multiple phases, the `end_date` of one phase will always equal the `start_date` of the next phase. */
  phases?: Maybe<Array<Maybe<Phases2ListItemInput>>>;
  /** When the subscription schedule starts. We recommend using `now` so that it starts the subscription immediately. You can also use a Unix timestamp to backdate the subscription so that it starts on a past date, or set a future date for the subscription to start on. */
  startDate?: Maybe<Scalars['JSON']>;
};

/** Object representing the subscription schedule's default settings. */
export type DefaultSettingsInput = {
  applicationFeePercent?: Maybe<Scalars['Float']>;
  automaticTax?: Maybe<AutomaticTax5Input>;
  billingCycleAnchor?: Maybe<BillingCycleAnchor7>;
  billingThresholds?: Maybe<Scalars['JSON']>;
  collectionMethod?: Maybe<CollectionMethod9>;
  defaultPaymentMethod?: Maybe<Scalars['String']>;
  invoiceSettings?: Maybe<SubscriptionSchedulesParamInput>;
  transferData?: Maybe<Scalars['JSON']>;
};

export type AutomaticTax5Input = {
  enabled: Scalars['Boolean'];
};

export enum BillingCycleAnchor7 {
  AUTOMATIC = 'automatic',
  PHASE_START = 'phase_start'
}

export type SubscriptionSchedulesParamInput = {
  daysUntilDue?: Maybe<Scalars['Int']>;
};

export enum EndBehavior2 {
  CANCEL = 'cancel',
  NONE = 'none',
  RELEASE = 'release',
  RENEW = 'renew'
}

export type Phases2ListItemInput = {
  addInvoiceItems?: Maybe<Array<Maybe<AddInvoiceItems3ListItemInput>>>;
  applicationFeePercent?: Maybe<Scalars['Float']>;
  automaticTax?: Maybe<AutomaticTax5Input>;
  billingCycleAnchor?: Maybe<BillingCycleAnchor7>;
  billingThresholds?: Maybe<Scalars['JSON']>;
  collectionMethod?: Maybe<CollectionMethod9>;
  coupon?: Maybe<Scalars['String']>;
  defaultPaymentMethod?: Maybe<Scalars['String']>;
  defaultTaxRates?: Maybe<Scalars['JSON']>;
  endDate?: Maybe<Scalars['Int']>;
  invoiceSettings?: Maybe<SubscriptionSchedulesParamInput>;
  items: Array<Maybe<Items11ListItemInput>>;
  iterations?: Maybe<Scalars['Int']>;
  prorationBehavior?: Maybe<ProrationBehavior3>;
  transferData?: Maybe<TransferData3Input>;
  trial?: Maybe<Scalars['Boolean']>;
  trialEnd?: Maybe<Scalars['Int']>;
};

export type AddInvoiceItems3ListItemInput = {
  price?: Maybe<Scalars['String']>;
  priceData?: Maybe<OneTimePriceDataInput>;
  quantity?: Maybe<Scalars['Int']>;
  taxRates?: Maybe<Scalars['JSON']>;
};

export type Items11ListItemInput = {
  billingThresholds?: Maybe<Scalars['JSON']>;
  price?: Maybe<Scalars['String']>;
  priceData?: Maybe<RecurringPriceDataInput>;
  quantity?: Maybe<Scalars['Int']>;
  taxRates?: Maybe<Scalars['JSON']>;
};

export type V1SubscriptionSchedules4Input = {
  /** Object representing the subscription schedule's default settings. */
  defaultSettings?: Maybe<DefaultSettingsInput>;
  /** Configures how the subscription schedule behaves when it ends. Possible values are `release` or `cancel` with the default being `release`. `release` will end the subscription schedule and keep the underlying subscription running.`cancel` will end the subscription schedule and cancel the underlying subscription. */
  endBehavior?: Maybe<EndBehavior2>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
  /** List representing phases of the subscription schedule. Each phase can be customized to have different durations, plans, and coupons. If there are multiple phases, the `end_date` of one phase will always equal the `start_date` of the next phase. Note that past phases can be omitted. */
  phases?: Maybe<Array<Maybe<Phases3ListItemInput>>>;
  /** If the update changes the current phase, indicates if the changes should be prorated. Possible values are `create_prorations` or `none`, and the default value is `create_prorations`. */
  prorationBehavior?: Maybe<ProrationBehavior7>;
};

export type Phases3ListItemInput = {
  addInvoiceItems?: Maybe<Array<Maybe<AddInvoiceItems3ListItemInput>>>;
  applicationFeePercent?: Maybe<Scalars['Float']>;
  automaticTax?: Maybe<AutomaticTax5Input>;
  billingCycleAnchor?: Maybe<BillingCycleAnchor7>;
  billingThresholds?: Maybe<Scalars['JSON']>;
  collectionMethod?: Maybe<CollectionMethod9>;
  coupon?: Maybe<Scalars['String']>;
  defaultPaymentMethod?: Maybe<Scalars['String']>;
  defaultTaxRates?: Maybe<Scalars['JSON']>;
  endDate?: Maybe<Scalars['JSON']>;
  invoiceSettings?: Maybe<SubscriptionSchedulesParamInput>;
  items: Array<Maybe<Items11ListItemInput>>;
  iterations?: Maybe<Scalars['Int']>;
  prorationBehavior?: Maybe<ProrationBehavior3>;
  startDate?: Maybe<Scalars['JSON']>;
  transferData?: Maybe<TransferData3Input>;
  trial?: Maybe<Scalars['Boolean']>;
  trialEnd?: Maybe<Scalars['JSON']>;
};

export enum ProrationBehavior7 {
  ALWAYS_INVOICE = 'always_invoice',
  CREATE_PRORATIONS = 'create_prorations',
  NONE = 'none'
}

export type V1SubscriptionSchedulesCancelInput = {
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** If the subscription schedule is `active`, indicates if a final invoice will be generated that contains any un-invoiced metered usage and new/pending proration invoice items. Defaults to `true`. */
  invoiceNow?: Maybe<Scalars['Boolean']>;
  /** If the subscription schedule is `active`, indicates if the cancellation should be prorated. Defaults to `true`. */
  prorate?: Maybe<Scalars['Boolean']>;
};

export type V1SubscriptionSchedulesReleaseInput = {
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Keep any cancellation on the subscription that the schedule has set */
  preserveCancelDate?: Maybe<Scalars['Boolean']>;
};

export type V1Subscriptions3Input = {
  /** A list of prices and quantities that will generate invoice items appended to the first invoice for this subscription. You may pass up to 20 items. */
  addInvoiceItems?: Maybe<Array<Maybe<AddInvoiceItemsListItemInput>>>;
  /** A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account. The request must be made by a platform account on a connected account in order to set an application fee percentage. For more information, see the application fees [documentation](https://stripe.com/docs/connect/subscriptions#collecting-fees-on-subscriptions). */
  applicationFeePercent?: Maybe<Scalars['Float']>;
  /** Automatic tax settings for this subscription. */
  automaticTax?: Maybe<AutomaticTaxConfigInput>;
  /** For new subscriptions, a past timestamp to backdate the subscription's start date to. If set, the first invoice will contain a proration for the timespan between the start date and the current time. Can be combined with trials and the billing cycle anchor. */
  backdateStartDate?: Maybe<Scalars['Int']>;
  /** A future timestamp to anchor the subscription's [billing cycle](https://stripe.com/docs/subscriptions/billing-cycle). This is used to determine the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices. */
  billingCycleAnchor?: Maybe<Scalars['Int']>;
  /** Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period. Pass an empty string to remove previously-defined thresholds. */
  billingThresholds?: Maybe<Scalars['JSON']>;
  /** A timestamp at which the subscription should cancel. If set to a date before the current period ends, this will cause a proration if prorations have been enabled using `proration_behavior`. If set during a future period, this will always cause a proration for that period. */
  cancelAt?: Maybe<Scalars['Int']>;
  /** Boolean indicating whether this subscription should cancel at the end of the current period. */
  cancelAtPeriodEnd?: Maybe<Scalars['Boolean']>;
  /** Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions. Defaults to `charge_automatically`. */
  collectionMethod?: Maybe<CollectionMethod2>;
  /** The ID of the coupon to apply to this subscription. A coupon applied to a subscription will only affect invoices created for that particular subscription. */
  coupon?: Maybe<Scalars['String']>;
  /** The identifier of the customer to subscribe. */
  customer: Scalars['String'];
  /** Number of days a customer has to pay invoices generated by this subscription. Valid only for subscriptions where `collection_method` is set to `send_invoice`. */
  daysUntilDue?: Maybe<Scalars['Int']>;
  /** ID of the default payment method for the subscription. It must belong to the customer associated with the subscription. This takes precedence over `default_source`. If neither are set, invoices will use the customer's [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source). */
  defaultPaymentMethod?: Maybe<Scalars['String']>;
  /** ID of the default payment source for the subscription. It must belong to the customer associated with the subscription and be in a chargeable state. If `default_payment_method` is also set, `default_payment_method` will take precedence. If neither are set, invoices will use the customer's [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source). */
  defaultSource?: Maybe<Scalars['String']>;
  /** The tax rates that will apply to any subscription item that does not have `tax_rates` set. Invoices created will have their `default_tax_rates` populated from the subscription. */
  defaultTaxRates?: Maybe<Scalars['JSON']>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** A list of up to 20 subscription items, each with an attached price. */
  items?: Maybe<Array<Maybe<Items3ListItemInput>>>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
  /** Indicates if a customer is on or off-session while an invoice payment is attempted. */
  offSession?: Maybe<Scalars['Boolean']>;
  /**
   * Use `allow_incomplete` to create subscriptions with `status=incomplete` if the first invoice cannot be paid. Creating subscriptions with this status allows you to manage scenarios where additional user actions are needed to pay a subscription's invoice. For example, SCA regulation may require 3DS authentication to complete payment. See the [SCA Migration Guide](https://stripe.com/docs/billing/migration/strong-customer-authentication) for Billing to learn more. This is the default behavior.
   *
   * Use `default_incomplete` to create Subscriptions with `status=incomplete` when the first invoice requires payment, otherwise start as active. Subscriptions transition to `status=active` when successfully confirming the payment intent on the first invoice. This allows simpler management of scenarios where additional user actions are needed to pay a subscription’s invoice. Such as failed payments, [SCA regulation](https://stripe.com/docs/billing/migration/strong-customer-authentication), or collecting a mandate for a bank debit payment method. If the payment intent is not confirmed within 23 hours subscriptions transition to `status=incomplete_expired`, which is a terminal state.
   *
   * Use `error_if_incomplete` if you want Stripe to return an HTTP 402 status code if a subscription's first invoice cannot be paid. For example, if a payment method requires 3DS authentication due to SCA regulation and further user action is needed, this parameter does not create a subscription and returns an error instead. This was the default behavior for API versions prior to 2019-03-14. See the [changelog](https://stripe.com/docs/upgrades#2019-03-14) to learn more.
   *
   * `pending_if_incomplete` is only used with updates and cannot be passed when creating a subscription.
   */
  paymentBehavior?: Maybe<PaymentBehavior>;
  /** Payment settings to pass to invoices created by the subscription. */
  paymentSettings?: Maybe<PaymentSettings2Input>;
  /** Specifies an interval for how often to bill for any pending invoice items. It is analogous to calling [Create an invoice](https://stripe.com/docs/api#create_invoice) for the given subscription at the specified interval. */
  pendingInvoiceItemInterval?: Maybe<Scalars['JSON']>;
  /** The API ID of a promotion code to apply to this subscription. A promotion code applied to a subscription will only affect invoices created for that particular subscription. */
  promotionCode?: Maybe<Scalars['String']>;
  /**
   * Determines how to handle [prorations](https://stripe.com/docs/subscriptions/billing-cycle#prorations) resulting from the `billing_cycle_anchor`. Valid values are `create_prorations` or `none`.
   *
   * Passing `create_prorations` will cause proration invoice items to be created when applicable. Prorations can be disabled by passing `none`. If no value is passed, the default is `create_prorations`.
   */
  prorationBehavior?: Maybe<ProrationBehavior4>;
  /** If specified, the funds from the subscription's invoices will be transferred to the destination and the ID of the resulting transfers will be found on the resulting charges. */
  transferData?: Maybe<TransferData5Input>;
  /** Unix timestamp representing the end of the trial period the customer will get before being charged for the first time. This will always overwrite any trials that might apply via a subscribed plan. If set, trial_end will override the default trial period of the plan the customer is being subscribed to. The special value `now` can be provided to end the customer's trial immediately. Can be at most two years from `billing_cycle_anchor`. */
  trialEnd?: Maybe<Scalars['JSON']>;
  /** Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `trial_end` is not allowed. */
  trialFromPlan?: Maybe<Scalars['Boolean']>;
  /** Integer representing the number of trial period days before the customer is charged for the first time. This will always overwrite any trials that might apply via a subscribed plan. */
  trialPeriodDays?: Maybe<Scalars['Int']>;
};

export type V1Subscription3Input = {
  /** A list of prices and quantities that will generate invoice items appended to the first invoice for this subscription. You may pass up to 20 items. */
  addInvoiceItems?: Maybe<Array<Maybe<AddInvoiceItemsListItemInput>>>;
  /** A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account. The request must be made by a platform account on a connected account in order to set an application fee percentage. For more information, see the application fees [documentation](https://stripe.com/docs/connect/subscriptions#collecting-fees-on-subscriptions). */
  applicationFeePercent?: Maybe<Scalars['Float']>;
  /** Automatic tax settings for this subscription. */
  automaticTax?: Maybe<AutomaticTaxConfigInput>;
  /** Either `now` or `unchanged`. Setting the value to `now` resets the subscription's billing cycle anchor to the current time. For more information, see the billing cycle [documentation](https://stripe.com/docs/billing/subscriptions/billing-cycle). */
  billingCycleAnchor?: Maybe<BillingCycleAnchor4>;
  /** Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period. Pass an empty string to remove previously-defined thresholds. */
  billingThresholds?: Maybe<Scalars['JSON']>;
  /** A timestamp at which the subscription should cancel. If set to a date before the current period ends, this will cause a proration if prorations have been enabled using `proration_behavior`. If set during a future period, this will always cause a proration for that period. */
  cancelAt?: Maybe<Scalars['JSON']>;
  /** Boolean indicating whether this subscription should cancel at the end of the current period. */
  cancelAtPeriodEnd?: Maybe<Scalars['Boolean']>;
  /** Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions. Defaults to `charge_automatically`. */
  collectionMethod?: Maybe<CollectionMethod2>;
  /** The ID of the coupon to apply to this subscription. A coupon applied to a subscription will only affect invoices created for that particular subscription. */
  coupon?: Maybe<Scalars['String']>;
  /** Number of days a customer has to pay invoices generated by this subscription. Valid only for subscriptions where `collection_method` is set to `send_invoice`. */
  daysUntilDue?: Maybe<Scalars['Int']>;
  /** ID of the default payment method for the subscription. It must belong to the customer associated with the subscription. This takes precedence over `default_source`. If neither are set, invoices will use the customer's [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source). */
  defaultPaymentMethod?: Maybe<Scalars['String']>;
  /** ID of the default payment source for the subscription. It must belong to the customer associated with the subscription and be in a chargeable state. If `default_payment_method` is also set, `default_payment_method` will take precedence. If neither are set, invoices will use the customer's [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source). */
  defaultSource?: Maybe<Scalars['String']>;
  /** The tax rates that will apply to any subscription item that does not have `tax_rates` set. Invoices created will have their `default_tax_rates` populated from the subscription. Pass an empty string to remove previously-defined tax rates. */
  defaultTaxRates?: Maybe<Scalars['JSON']>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** A list of up to 20 subscription items, each with an attached price. */
  items?: Maybe<Array<Maybe<Items4ListItemInput>>>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
  /** Indicates if a customer is on or off-session while an invoice payment is attempted. */
  offSession?: Maybe<Scalars['Boolean']>;
  /** If specified, payment collection for this subscription will be paused. */
  pauseCollection?: Maybe<Scalars['JSON']>;
  /**
   * Use `allow_incomplete` to transition the subscription to `status=past_due` if a payment is required but cannot be paid. This allows you to manage scenarios where additional user actions are needed to pay a subscription's invoice. For example, SCA regulation may require 3DS authentication to complete payment. See the [SCA Migration Guide](https://stripe.com/docs/billing/migration/strong-customer-authentication) for Billing to learn more. This is the default behavior.
   *
   * Use `default_incomplete` to transition the subscription to `status=past_due` when payment is required and await explicit confirmation of the invoice's payment intent. This allows simpler management of scenarios where additional user actions are needed to pay a subscription’s invoice. Such as failed payments, [SCA regulation](https://stripe.com/docs/billing/migration/strong-customer-authentication), or collecting a mandate for a bank debit payment method.
   *
   * Use `pending_if_incomplete` to update the subscription using [pending updates](https://stripe.com/docs/billing/subscriptions/pending-updates). When you use `pending_if_incomplete` you can only pass the parameters [supported by pending updates](https://stripe.com/docs/billing/pending-updates-reference#supported-attributes).
   *
   * Use `error_if_incomplete` if you want Stripe to return an HTTP 402 status code if a subscription's invoice cannot be paid. For example, if a payment method requires 3DS authentication due to SCA regulation and further user action is needed, this parameter does not update the subscription and returns an error instead. This was the default behavior for API versions prior to 2019-03-14. See the [changelog](https://stripe.com/docs/upgrades#2019-03-14) to learn more.
   */
  paymentBehavior?: Maybe<PaymentBehavior2>;
  /** Payment settings to pass to invoices created by the subscription. */
  paymentSettings?: Maybe<PaymentSettings2Input>;
  /** Specifies an interval for how often to bill for any pending invoice items. It is analogous to calling [Create an invoice](https://stripe.com/docs/api#create_invoice) for the given subscription at the specified interval. */
  pendingInvoiceItemInterval?: Maybe<Scalars['JSON']>;
  /** The promotion code to apply to this subscription. A promotion code applied to a subscription will only affect invoices created for that particular subscription. */
  promotionCode?: Maybe<Scalars['String']>;
  /**
   * Determines how to handle [prorations](https://stripe.com/docs/subscriptions/billing-cycle#prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item's `quantity` changes. Valid values are `create_prorations`, `none`, or `always_invoice`.
   *
   * Passing `create_prorations` will cause proration invoice items to be created when applicable. These proration items will only be invoiced immediately under [certain conditions](https://stripe.com/docs/subscriptions/upgrading-downgrading#immediate-payment). In order to always invoice immediately for prorations, pass `always_invoice`.
   *
   * Prorations can be disabled by passing `none`.
   */
  prorationBehavior?: Maybe<ProrationBehavior5>;
  /** If set, the proration will be calculated as though the subscription was updated at the given time. This can be used to apply exactly the same proration that was previewed with [upcoming invoice](https://stripe.com/docs/api#retrieve_customer_invoice) endpoint. It can also be used to implement custom proration logic, such as prorating by day instead of by second, by providing the time that you wish to use for proration calculations. */
  prorationDate?: Maybe<Scalars['Int']>;
  /** If specified, the funds from the subscription's invoices will be transferred to the destination and the ID of the resulting transfers will be found on the resulting charges. This will be unset if you POST an empty value. */
  transferData?: Maybe<Scalars['JSON']>;
  /** Unix timestamp representing the end of the trial period the customer will get before being charged for the first time. This will always overwrite any trials that might apply via a subscribed plan. If set, trial_end will override the default trial period of the plan the customer is being subscribed to. The special value `now` can be provided to end the customer's trial immediately. Can be at most two years from `billing_cycle_anchor`. */
  trialEnd?: Maybe<Scalars['JSON']>;
  /** Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `trial_end` is not allowed. */
  trialFromPlan?: Maybe<Scalars['Boolean']>;
};

export type V1TaxRates3Input = {
  /** Flag determining whether the tax rate is active or inactive (archived). Inactive tax rates cannot be used with new applications or Checkout Sessions, but will still work for subscriptions and invoices that already have it set. */
  active?: Maybe<Scalars['Boolean']>;
  /** Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)). */
  country?: Maybe<Scalars['String']>;
  /** An arbitrary string attached to the tax rate for your internal use only. It will not be visible to your customers. */
  description?: Maybe<Scalars['String']>;
  /** The display name of the tax rate, which will be shown to users. */
  displayName: Scalars['String'];
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** This specifies if the tax rate is inclusive or exclusive. */
  inclusive: Scalars['Boolean'];
  /** The jurisdiction for the tax rate. You can use this label field for tax reporting purposes. It also appears on your customer’s invoice. */
  jurisdiction?: Maybe<Scalars['String']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
  /** This represents the tax rate percent out of 100. */
  percentage: Scalars['Float'];
  /** [ISO 3166-2 subdivision code](https://en.wikipedia.org/wiki/ISO_3166-2:US), without country prefix. For example, "NY" for New York, United States. */
  state?: Maybe<Scalars['String']>;
  /** The high-level tax type, such as `vat` or `sales_tax`. */
  taxType?: Maybe<TaxType2>;
};

export enum TaxType2 {
  GST = 'gst',
  HST = 'hst',
  PST = 'pst',
  QST = 'qst',
  SALES_TAX = 'sales_tax',
  VAT = 'vat'
}

export type V1TaxRate2Input = {
  /** Flag determining whether the tax rate is active or inactive (archived). Inactive tax rates cannot be used with new applications or Checkout Sessions, but will still work for subscriptions and invoices that already have it set. */
  active?: Maybe<Scalars['Boolean']>;
  /** Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)). */
  country?: Maybe<Scalars['String']>;
  /** An arbitrary string attached to the tax rate for your internal use only. It will not be visible to your customers. */
  description?: Maybe<Scalars['String']>;
  /** The display name of the tax rate, which will be shown to users. */
  displayName?: Maybe<Scalars['String']>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** The jurisdiction for the tax rate. You can use this label field for tax reporting purposes. It also appears on your customer’s invoice. */
  jurisdiction?: Maybe<Scalars['String']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
  /** [ISO 3166-2 subdivision code](https://en.wikipedia.org/wiki/ISO_3166-2:US), without country prefix. For example, "NY" for New York, United States. */
  state?: Maybe<Scalars['String']>;
  /** The high-level tax type, such as `vat` or `sales_tax`. */
  taxType?: Maybe<TaxType2>;
};

/**
 * A Connection Token is used by the Stripe Terminal SDK to connect to a reader.
 *
 * Related guide: [Fleet Management](https://stripe.com/docs/terminal/creating-locations).
 */
export type TerminalConnectionToken = {
  /** The id of the location that this connection token is scoped to. Note that location scoping only applies to internet-connected readers. For more details, see [the docs on scoping connection tokens](https://stripe.com/docs/terminal/readers/fleet-management#connection-tokens). */
  location?: Maybe<Scalars['String']>;
  /** String representing the object's type. Objects of the same type share the same value. */
  object: Object83;
  /** Your application should pass this token to the Stripe Terminal SDK. */
  secret: Scalars['String'];
};

export enum Object83 {
  TERMINAL_CONNECTION_TOKEN = 'terminal.connection_token'
}

export type V1TerminalConnectionTokensInput = {
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** The id of the location that this connection token is scoped to. If specified the connection token will only be usable with readers assigned to that location, otherwise the connection token will be usable with all readers. Note that location scoping only applies to internet-connected readers. For more details, see [the docs on scoping connection tokens](https://stripe.com/docs/terminal/readers/fleet-management#connection-tokens). */
  location?: Maybe<Scalars['String']>;
};

export type V1TerminalLocations2Input = {
  /** The full address of the location. */
  address: CreateLocationAddressParamInput;
  /** A name for the location. */
  displayName: Scalars['String'];
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
};

/** The full address of the location. */
export type CreateLocationAddressParamInput = {
  city?: Maybe<Scalars['String']>;
  country: Scalars['String'];
  line1?: Maybe<Scalars['String']>;
  line2?: Maybe<Scalars['String']>;
  postalCode?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
};

export type V1TerminalLocation2Input = {
  /** The full address of the location. */
  address?: Maybe<Address17Input>;
  /** A name for the location. */
  displayName?: Maybe<Scalars['String']>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
};

/** The full address of the location. */
export type Address17Input = {
  city?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  line1?: Maybe<Scalars['String']>;
  line2?: Maybe<Scalars['String']>;
  postalCode?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
};

export type V1TerminalReaders2Input = {
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Custom label given to the reader for easier identification. If no label is specified, the registration code will be used. */
  label?: Maybe<Scalars['String']>;
  /** The location to assign the reader to. If no location is specified, the reader will be assigned to the account's default location. */
  location?: Maybe<Scalars['String']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
  /** A code generated by the reader used for registering to an account. */
  registrationCode: Scalars['String'];
};

export type V1TerminalReader2Input = {
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** The new label of the reader. */
  label?: Maybe<Scalars['String']>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
};

export type V1TokensInput = {
  /** Information for the account this token will represent. */
  account?: Maybe<ConnectJsAccountTokenSpecsInput>;
  /** The bank account this token will represent. */
  bankAccount?: Maybe<TokenCreateBankAccountInput>;
  card?: Maybe<Scalars['JSON']>;
  /** The customer (owned by the application's account) for which to create a token. This can be used only with an [OAuth access token](https://stripe.com/docs/connect/standard-accounts) or [Stripe-Account header](https://stripe.com/docs/connect/authentication). For more details, see [Cloning Saved Payment Methods](https://stripe.com/docs/connect/cloning-saved-payment-methods). */
  customer?: Maybe<Scalars['String']>;
  /** The updated CVC value this token will represent. */
  cvcUpdate?: Maybe<CvcUpdateInput>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Information for the person this token will represent. */
  person?: Maybe<PersonTokenSpecsInput>;
  /** The PII this token will represent. */
  pii?: Maybe<PiiInput>;
};

/** Information for the account this token will represent. */
export type ConnectJsAccountTokenSpecsInput = {
  businessType?: Maybe<BusinessType3>;
  company?: Maybe<CompanySpecsInput>;
  individual?: Maybe<IndividualSpecsInput>;
  tosShownAndAccepted?: Maybe<Scalars['Boolean']>;
};

export enum BusinessType3 {
  COMPANY = 'company',
  GOVERNMENT_ENTITY = 'government_entity',
  INDIVIDUAL = 'individual',
  NON_PROFIT = 'non_profit'
}

export type CompanySpecsInput = {
  address?: Maybe<Address2Input>;
  addressKana?: Maybe<JapanAddressKanaSpecsInput>;
  addressKanji?: Maybe<JapanAddressKanjiSpecsInput>;
  directorsProvided?: Maybe<Scalars['Boolean']>;
  executivesProvided?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['String']>;
  nameKana?: Maybe<Scalars['String']>;
  nameKanji?: Maybe<Scalars['String']>;
  ownersProvided?: Maybe<Scalars['Boolean']>;
  phone?: Maybe<Scalars['String']>;
  registrationNumber?: Maybe<Scalars['String']>;
  structure?: Maybe<Structure2>;
  taxId?: Maybe<Scalars['String']>;
  taxIdRegistrar?: Maybe<Scalars['String']>;
  vatId?: Maybe<Scalars['String']>;
  verification?: Maybe<VerificationSpecsInput>;
};

export type IndividualSpecsInput = {
  address?: Maybe<Address2Input>;
  addressKana?: Maybe<JapanAddressKanaSpecsInput>;
  addressKanji?: Maybe<JapanAddressKanjiSpecsInput>;
  dob?: Maybe<Scalars['JSON']>;
  email?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  firstNameKana?: Maybe<Scalars['String']>;
  firstNameKanji?: Maybe<Scalars['String']>;
  gender?: Maybe<Scalars['String']>;
  idNumber?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  lastNameKana?: Maybe<Scalars['String']>;
  lastNameKanji?: Maybe<Scalars['String']>;
  maidenName?: Maybe<Scalars['String']>;
  metadata?: Maybe<Scalars['JSON']>;
  phone?: Maybe<Scalars['String']>;
  politicalExposure?: Maybe<PoliticalExposure2>;
  ssnLast4?: Maybe<Scalars['String']>;
  verification?: Maybe<PersonVerificationSpecsInput>;
};

/** The bank account this token will represent. */
export type TokenCreateBankAccountInput = {
  accountHolderName?: Maybe<Scalars['String']>;
  accountHolderType?: Maybe<AccountHolderType14>;
  accountNumber: Scalars['String'];
  accountType?: Maybe<AccountType14>;
  country: Scalars['String'];
  currency?: Maybe<Scalars['String']>;
  routingNumber?: Maybe<Scalars['String']>;
};

export enum AccountHolderType14 {
  COMPANY = 'company',
  INDIVIDUAL = 'individual'
}

export enum AccountType14 {
  CHECKING = 'checking',
  FUTSU = 'futsu',
  SAVINGS = 'savings',
  TOZA = 'toza'
}

/** The updated CVC value this token will represent. */
export type CvcUpdateInput = {
  cvc: Scalars['String'];
};

/** Information for the person this token will represent. */
export type PersonTokenSpecsInput = {
  address?: Maybe<Address2Input>;
  addressKana?: Maybe<JapanAddressKanaSpecsInput>;
  addressKanji?: Maybe<JapanAddressKanjiSpecsInput>;
  dob?: Maybe<Scalars['JSON']>;
  documents?: Maybe<Documents2Input>;
  email?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  firstNameKana?: Maybe<Scalars['String']>;
  firstNameKanji?: Maybe<Scalars['String']>;
  gender?: Maybe<Scalars['String']>;
  idNumber?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  lastNameKana?: Maybe<Scalars['String']>;
  lastNameKanji?: Maybe<Scalars['String']>;
  maidenName?: Maybe<Scalars['String']>;
  metadata?: Maybe<Scalars['JSON']>;
  nationality?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  politicalExposure?: Maybe<Scalars['String']>;
  relationship?: Maybe<RelationshipSpecsInput>;
  ssnLast4?: Maybe<Scalars['String']>;
  verification?: Maybe<PersonVerificationSpecsInput>;
};

export type Documents2Input = {
  companyAuthorization?: Maybe<CompanyAuthorizationInput>;
  passport?: Maybe<PassportInput>;
  visa?: Maybe<VisaInput>;
};

export type RelationshipSpecsInput = {
  director?: Maybe<Scalars['Boolean']>;
  executive?: Maybe<Scalars['Boolean']>;
  owner?: Maybe<Scalars['Boolean']>;
  percentOwnership?: Maybe<Scalars['JSON']>;
  representative?: Maybe<Scalars['Boolean']>;
  title?: Maybe<Scalars['String']>;
};

/** The PII this token will represent. */
export type PiiInput = {
  idNumber?: Maybe<Scalars['String']>;
};

export type V1Topups2Input = {
  /** A positive integer representing how much to transfer. */
  amount: Scalars['Int'];
  /** Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
  currency: Scalars['String'];
  /** An arbitrary string attached to the object. Often useful for displaying to users. */
  description?: Maybe<Scalars['String']>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
  /** The ID of a source to transfer funds from. For most users, this should be left unspecified which will use the bank account that was set up in the dashboard for the specified currency. In test mode, this can be a test bank token (see [Testing Top-ups](https://stripe.com/docs/connect/testing#testing-top-ups)). */
  source?: Maybe<Scalars['String']>;
  /** Extra information about a top-up for the source's bank statement. Limited to 15 ASCII characters. */
  statementDescriptor?: Maybe<Scalars['String']>;
  /** A string that identifies this top-up as part of a group. */
  transferGroup?: Maybe<Scalars['String']>;
};

export type V1Topup2Input = {
  /** An arbitrary string attached to the object. Often useful for displaying to users. */
  description?: Maybe<Scalars['String']>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
};

export type V1TopupCancelInput = {
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type V1Transfers2Input = {
  /** A positive integer in %s representing how much to transfer. */
  amount?: Maybe<Scalars['Int']>;
  /** 3-letter [ISO code for currency](https://stripe.com/docs/payouts). */
  currency: Scalars['String'];
  /** An arbitrary string attached to the object. Often useful for displaying to users. */
  description?: Maybe<Scalars['String']>;
  /** The ID of a connected Stripe account. <a href="/docs/connect/charges-transfers">See the Connect documentation</a> for details. */
  destination: Scalars['String'];
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
  /** You can use this parameter to transfer funds from a charge before they are added to your available balance. A pending balance will transfer immediately but the funds will not become available until the original charge becomes available. [See the Connect documentation](https://stripe.com/docs/connect/charges-transfers#transfer-availability) for details. */
  sourceTransaction?: Maybe<Scalars['String']>;
  /** The source balance to use for this transfer. One of `bank_account`, `card`, or `fpx`. For most users, this will default to `card`. */
  sourceType?: Maybe<SourceType4>;
  /** A string that identifies this transaction as part of a group. See the [Connect documentation](https://stripe.com/docs/connect/charges-transfers#transfer-options) for details. */
  transferGroup?: Maybe<Scalars['String']>;
};

export enum SourceType4 {
  BANK_ACCOUNT = 'bank_account',
  CARD = 'card',
  FPX = 'fpx'
}

export type V1TransferReversals2Input = {
  /** A positive integer in %s representing how much of this transfer to reverse. Can only reverse up to the unreversed amount remaining of the transfer. Partial transfer reversals are only allowed for transfers to Stripe Accounts. Defaults to the entire transfer amount. */
  amount?: Maybe<Scalars['Int']>;
  /** An arbitrary string which you can attach to a reversal object. It is displayed alongside the reversal in the Dashboard. This will be unset if you POST an empty value. */
  description?: Maybe<Scalars['String']>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
  /** Boolean indicating whether the application fee should be refunded when reversing this transfer. If a full transfer reversal is given, the full application fee will be refunded. Otherwise, the application fee will be refunded with an amount proportional to the amount of the transfer reversed. */
  refundApplicationFee?: Maybe<Scalars['Boolean']>;
};

export type V1Transfer2Input = {
  /** An arbitrary string attached to the object. Often useful for displaying to users. */
  description?: Maybe<Scalars['String']>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
};

export type V1TransferReversal2Input = {
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
};

export type V1WebhookEndpoints3Input = {
  /** Events sent to this endpoint will be generated with this Stripe Version instead of your account's default Stripe Version. */
  apiVersion?: Maybe<ApiVersion3>;
  /** Whether this endpoint should receive events from connected accounts (`true`), or from your account (`false`). Defaults to `false`. */
  connect?: Maybe<Scalars['Boolean']>;
  /** An optional description of what the webhook is used for. */
  description?: Maybe<Scalars['String']>;
  /** The list of events to enable for this endpoint. You may specify `['*']` to enable all events, except those that require explicit selection. */
  enabledEvents: Array<Maybe<EnabledEvents2ListItem>>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
  /** The URL of the webhook endpoint. */
  url: Scalars['String'];
};

export enum ApiVersion3 {
  _2011_01_01 = '2011-01-01',
  _2011_06_21 = '2011-06-21',
  _2011_06_28 = '2011-06-28',
  _2011_08_01 = '2011-08-01',
  _2011_09_15 = '2011-09-15',
  _2011_11_17 = '2011-11-17',
  _2012_02_23 = '2012-02-23',
  _2012_03_25 = '2012-03-25',
  _2012_06_18 = '2012-06-18',
  _2012_06_28 = '2012-06-28',
  _2012_07_09 = '2012-07-09',
  _2012_09_24 = '2012-09-24',
  _2012_10_26 = '2012-10-26',
  _2012_11_07 = '2012-11-07',
  _2013_02_11 = '2013-02-11',
  _2013_02_13 = '2013-02-13',
  _2013_07_05 = '2013-07-05',
  _2013_08_12 = '2013-08-12',
  _2013_08_13 = '2013-08-13',
  _2013_10_29 = '2013-10-29',
  _2013_12_03 = '2013-12-03',
  _2014_01_31 = '2014-01-31',
  _2014_03_13 = '2014-03-13',
  _2014_03_28 = '2014-03-28',
  _2014_05_19 = '2014-05-19',
  _2014_06_13 = '2014-06-13',
  _2014_06_17 = '2014-06-17',
  _2014_07_22 = '2014-07-22',
  _2014_07_26 = '2014-07-26',
  _2014_08_04 = '2014-08-04',
  _2014_08_20 = '2014-08-20',
  _2014_09_08 = '2014-09-08',
  _2014_10_07 = '2014-10-07',
  _2014_11_05 = '2014-11-05',
  _2014_11_20 = '2014-11-20',
  _2014_12_08 = '2014-12-08',
  _2014_12_17 = '2014-12-17',
  _2014_12_22 = '2014-12-22',
  _2015_01_11 = '2015-01-11',
  _2015_01_26 = '2015-01-26',
  _2015_02_10 = '2015-02-10',
  _2015_02_16 = '2015-02-16',
  _2015_02_18 = '2015-02-18',
  _2015_03_24 = '2015-03-24',
  _2015_04_07 = '2015-04-07',
  _2015_06_15 = '2015-06-15',
  _2015_07_07 = '2015-07-07',
  _2015_07_13 = '2015-07-13',
  _2015_07_28 = '2015-07-28',
  _2015_08_07 = '2015-08-07',
  _2015_08_19 = '2015-08-19',
  _2015_09_03 = '2015-09-03',
  _2015_09_08 = '2015-09-08',
  _2015_09_23 = '2015-09-23',
  _2015_10_01 = '2015-10-01',
  _2015_10_12 = '2015-10-12',
  _2015_10_16 = '2015-10-16',
  _2016_02_03 = '2016-02-03',
  _2016_02_19 = '2016-02-19',
  _2016_02_22 = '2016-02-22',
  _2016_02_23 = '2016-02-23',
  _2016_02_29 = '2016-02-29',
  _2016_03_07 = '2016-03-07',
  _2016_06_15 = '2016-06-15',
  _2016_07_06 = '2016-07-06',
  _2016_10_19 = '2016-10-19',
  _2017_01_27 = '2017-01-27',
  _2017_02_14 = '2017-02-14',
  _2017_04_06 = '2017-04-06',
  _2017_05_25 = '2017-05-25',
  _2017_06_05 = '2017-06-05',
  _2017_08_15 = '2017-08-15',
  _2017_12_14 = '2017-12-14',
  _2018_01_23 = '2018-01-23',
  _2018_02_05 = '2018-02-05',
  _2018_02_06 = '2018-02-06',
  _2018_02_28 = '2018-02-28',
  _2018_05_21 = '2018-05-21',
  _2018_07_27 = '2018-07-27',
  _2018_08_23 = '2018-08-23',
  _2018_09_06 = '2018-09-06',
  _2018_09_24 = '2018-09-24',
  _2018_10_31 = '2018-10-31',
  _2018_11_08 = '2018-11-08',
  _2019_02_11 = '2019-02-11',
  _2019_02_19 = '2019-02-19',
  _2019_03_14 = '2019-03-14',
  _2019_05_16 = '2019-05-16',
  _2019_08_14 = '2019-08-14',
  _2019_09_09 = '2019-09-09',
  _2019_10_08 = '2019-10-08',
  _2019_10_17 = '2019-10-17',
  _2019_11_05 = '2019-11-05',
  _2019_12_03 = '2019-12-03',
  _2020_03_02 = '2020-03-02',
  _2020_08_27 = '2020-08-27'
}

export enum EnabledEvents2ListItem {
  _ = '*',
  ACCOUNT_APPLICATION_AUTHORIZED = 'account.application.authorized',
  ACCOUNT_APPLICATION_DEAUTHORIZED = 'account.application.deauthorized',
  ACCOUNT_EXTERNAL_ACCOUNT_CREATED = 'account.external_account.created',
  ACCOUNT_EXTERNAL_ACCOUNT_DELETED = 'account.external_account.deleted',
  ACCOUNT_EXTERNAL_ACCOUNT_UPDATED = 'account.external_account.updated',
  ACCOUNT_UPDATED = 'account.updated',
  APPLICATION_FEE_CREATED = 'application_fee.created',
  APPLICATION_FEE_REFUND_UPDATED = 'application_fee.refund.updated',
  APPLICATION_FEE_REFUNDED = 'application_fee.refunded',
  BALANCE_AVAILABLE = 'balance.available',
  BILLING_PORTAL_CONFIGURATION_CREATED = 'billing_portal.configuration.created',
  BILLING_PORTAL_CONFIGURATION_UPDATED = 'billing_portal.configuration.updated',
  CAPABILITY_UPDATED = 'capability.updated',
  CHARGE_CAPTURED = 'charge.captured',
  CHARGE_DISPUTE_CLOSED = 'charge.dispute.closed',
  CHARGE_DISPUTE_CREATED = 'charge.dispute.created',
  CHARGE_DISPUTE_FUNDS_REINSTATED = 'charge.dispute.funds_reinstated',
  CHARGE_DISPUTE_FUNDS_WITHDRAWN = 'charge.dispute.funds_withdrawn',
  CHARGE_DISPUTE_UPDATED = 'charge.dispute.updated',
  CHARGE_EXPIRED = 'charge.expired',
  CHARGE_FAILED = 'charge.failed',
  CHARGE_PENDING = 'charge.pending',
  CHARGE_REFUND_UPDATED = 'charge.refund.updated',
  CHARGE_REFUNDED = 'charge.refunded',
  CHARGE_SUCCEEDED = 'charge.succeeded',
  CHARGE_UPDATED = 'charge.updated',
  CHECKOUT_SESSION_ASYNC_PAYMENT_FAILED = 'checkout.session.async_payment_failed',
  CHECKOUT_SESSION_ASYNC_PAYMENT_SUCCEEDED = 'checkout.session.async_payment_succeeded',
  CHECKOUT_SESSION_COMPLETED = 'checkout.session.completed',
  COUPON_CREATED = 'coupon.created',
  COUPON_DELETED = 'coupon.deleted',
  COUPON_UPDATED = 'coupon.updated',
  CREDIT_NOTE_CREATED = 'credit_note.created',
  CREDIT_NOTE_UPDATED = 'credit_note.updated',
  CREDIT_NOTE_VOIDED = 'credit_note.voided',
  CUSTOMER_CREATED = 'customer.created',
  CUSTOMER_DELETED = 'customer.deleted',
  CUSTOMER_DISCOUNT_CREATED = 'customer.discount.created',
  CUSTOMER_DISCOUNT_DELETED = 'customer.discount.deleted',
  CUSTOMER_DISCOUNT_UPDATED = 'customer.discount.updated',
  CUSTOMER_SOURCE_CREATED = 'customer.source.created',
  CUSTOMER_SOURCE_DELETED = 'customer.source.deleted',
  CUSTOMER_SOURCE_EXPIRING = 'customer.source.expiring',
  CUSTOMER_SOURCE_UPDATED = 'customer.source.updated',
  CUSTOMER_SUBSCRIPTION_CREATED = 'customer.subscription.created',
  CUSTOMER_SUBSCRIPTION_DELETED = 'customer.subscription.deleted',
  CUSTOMER_SUBSCRIPTION_PENDING_UPDATE_APPLIED = 'customer.subscription.pending_update_applied',
  CUSTOMER_SUBSCRIPTION_PENDING_UPDATE_EXPIRED = 'customer.subscription.pending_update_expired',
  CUSTOMER_SUBSCRIPTION_TRIAL_WILL_END = 'customer.subscription.trial_will_end',
  CUSTOMER_SUBSCRIPTION_UPDATED = 'customer.subscription.updated',
  CUSTOMER_TAX_ID_CREATED = 'customer.tax_id.created',
  CUSTOMER_TAX_ID_DELETED = 'customer.tax_id.deleted',
  CUSTOMER_TAX_ID_UPDATED = 'customer.tax_id.updated',
  CUSTOMER_UPDATED = 'customer.updated',
  FILE_CREATED = 'file.created',
  IDENTITY_VERIFICATION_SESSION_CANCELED = 'identity.verification_session.canceled',
  IDENTITY_VERIFICATION_SESSION_CREATED = 'identity.verification_session.created',
  IDENTITY_VERIFICATION_SESSION_PROCESSING = 'identity.verification_session.processing',
  IDENTITY_VERIFICATION_SESSION_REDACTED = 'identity.verification_session.redacted',
  IDENTITY_VERIFICATION_SESSION_REQUIRES_INPUT = 'identity.verification_session.requires_input',
  IDENTITY_VERIFICATION_SESSION_VERIFIED = 'identity.verification_session.verified',
  INVOICE_CREATED = 'invoice.created',
  INVOICE_DELETED = 'invoice.deleted',
  INVOICE_FINALIZATION_FAILED = 'invoice.finalization_failed',
  INVOICE_FINALIZED = 'invoice.finalized',
  INVOICE_MARKED_UNCOLLECTIBLE = 'invoice.marked_uncollectible',
  INVOICE_PAID = 'invoice.paid',
  INVOICE_PAYMENT_ACTION_REQUIRED = 'invoice.payment_action_required',
  INVOICE_PAYMENT_FAILED = 'invoice.payment_failed',
  INVOICE_PAYMENT_SUCCEEDED = 'invoice.payment_succeeded',
  INVOICE_SENT = 'invoice.sent',
  INVOICE_UPCOMING = 'invoice.upcoming',
  INVOICE_UPDATED = 'invoice.updated',
  INVOICE_VOIDED = 'invoice.voided',
  INVOICEITEM_CREATED = 'invoiceitem.created',
  INVOICEITEM_DELETED = 'invoiceitem.deleted',
  INVOICEITEM_UPDATED = 'invoiceitem.updated',
  ISSUING_AUTHORIZATION_CREATED = 'issuing_authorization.created',
  ISSUING_AUTHORIZATION_REQUEST = 'issuing_authorization.request',
  ISSUING_AUTHORIZATION_UPDATED = 'issuing_authorization.updated',
  ISSUING_CARD_CREATED = 'issuing_card.created',
  ISSUING_CARD_UPDATED = 'issuing_card.updated',
  ISSUING_CARDHOLDER_CREATED = 'issuing_cardholder.created',
  ISSUING_CARDHOLDER_UPDATED = 'issuing_cardholder.updated',
  ISSUING_DISPUTE_CLOSED = 'issuing_dispute.closed',
  ISSUING_DISPUTE_CREATED = 'issuing_dispute.created',
  ISSUING_DISPUTE_FUNDS_REINSTATED = 'issuing_dispute.funds_reinstated',
  ISSUING_DISPUTE_SUBMITTED = 'issuing_dispute.submitted',
  ISSUING_DISPUTE_UPDATED = 'issuing_dispute.updated',
  ISSUING_TRANSACTION_CREATED = 'issuing_transaction.created',
  ISSUING_TRANSACTION_UPDATED = 'issuing_transaction.updated',
  MANDATE_UPDATED = 'mandate.updated',
  ORDER_CREATED = 'order.created',
  ORDER_PAYMENT_FAILED = 'order.payment_failed',
  ORDER_PAYMENT_SUCCEEDED = 'order.payment_succeeded',
  ORDER_UPDATED = 'order.updated',
  ORDER_RETURN_CREATED = 'order_return.created',
  PAYMENT_INTENT_AMOUNT_CAPTURABLE_UPDATED = 'payment_intent.amount_capturable_updated',
  PAYMENT_INTENT_CANCELED = 'payment_intent.canceled',
  PAYMENT_INTENT_CREATED = 'payment_intent.created',
  PAYMENT_INTENT_PAYMENT_FAILED = 'payment_intent.payment_failed',
  PAYMENT_INTENT_PROCESSING = 'payment_intent.processing',
  PAYMENT_INTENT_REQUIRES_ACTION = 'payment_intent.requires_action',
  PAYMENT_INTENT_SUCCEEDED = 'payment_intent.succeeded',
  PAYMENT_METHOD_ATTACHED = 'payment_method.attached',
  PAYMENT_METHOD_AUTOMATICALLY_UPDATED = 'payment_method.automatically_updated',
  PAYMENT_METHOD_DETACHED = 'payment_method.detached',
  PAYMENT_METHOD_UPDATED = 'payment_method.updated',
  PAYOUT_CANCELED = 'payout.canceled',
  PAYOUT_CREATED = 'payout.created',
  PAYOUT_FAILED = 'payout.failed',
  PAYOUT_PAID = 'payout.paid',
  PAYOUT_UPDATED = 'payout.updated',
  PERSON_CREATED = 'person.created',
  PERSON_DELETED = 'person.deleted',
  PERSON_UPDATED = 'person.updated',
  PLAN_CREATED = 'plan.created',
  PLAN_DELETED = 'plan.deleted',
  PLAN_UPDATED = 'plan.updated',
  PRICE_CREATED = 'price.created',
  PRICE_DELETED = 'price.deleted',
  PRICE_UPDATED = 'price.updated',
  PRODUCT_CREATED = 'product.created',
  PRODUCT_DELETED = 'product.deleted',
  PRODUCT_UPDATED = 'product.updated',
  PROMOTION_CODE_CREATED = 'promotion_code.created',
  PROMOTION_CODE_UPDATED = 'promotion_code.updated',
  QUOTE_ACCEPTED = 'quote.accepted',
  QUOTE_CANCELED = 'quote.canceled',
  QUOTE_CREATED = 'quote.created',
  QUOTE_FINALIZED = 'quote.finalized',
  RADAR_EARLY_FRAUD_WARNING_CREATED = 'radar.early_fraud_warning.created',
  RADAR_EARLY_FRAUD_WARNING_UPDATED = 'radar.early_fraud_warning.updated',
  RECIPIENT_CREATED = 'recipient.created',
  RECIPIENT_DELETED = 'recipient.deleted',
  RECIPIENT_UPDATED = 'recipient.updated',
  REPORTING_REPORT_RUN_FAILED = 'reporting.report_run.failed',
  REPORTING_REPORT_RUN_SUCCEEDED = 'reporting.report_run.succeeded',
  REPORTING_REPORT_TYPE_UPDATED = 'reporting.report_type.updated',
  REVIEW_CLOSED = 'review.closed',
  REVIEW_OPENED = 'review.opened',
  SETUP_INTENT_CANCELED = 'setup_intent.canceled',
  SETUP_INTENT_CREATED = 'setup_intent.created',
  SETUP_INTENT_REQUIRES_ACTION = 'setup_intent.requires_action',
  SETUP_INTENT_SETUP_FAILED = 'setup_intent.setup_failed',
  SETUP_INTENT_SUCCEEDED = 'setup_intent.succeeded',
  SIGMA_SCHEDULED_QUERY_RUN_CREATED = 'sigma.scheduled_query_run.created',
  SKU_CREATED = 'sku.created',
  SKU_DELETED = 'sku.deleted',
  SKU_UPDATED = 'sku.updated',
  SOURCE_CANCELED = 'source.canceled',
  SOURCE_CHARGEABLE = 'source.chargeable',
  SOURCE_FAILED = 'source.failed',
  SOURCE_MANDATE_NOTIFICATION = 'source.mandate_notification',
  SOURCE_REFUND_ATTRIBUTES_REQUIRED = 'source.refund_attributes_required',
  SOURCE_TRANSACTION_CREATED = 'source.transaction.created',
  SOURCE_TRANSACTION_UPDATED = 'source.transaction.updated',
  SUBSCRIPTION_SCHEDULE_ABORTED = 'subscription_schedule.aborted',
  SUBSCRIPTION_SCHEDULE_CANCELED = 'subscription_schedule.canceled',
  SUBSCRIPTION_SCHEDULE_COMPLETED = 'subscription_schedule.completed',
  SUBSCRIPTION_SCHEDULE_CREATED = 'subscription_schedule.created',
  SUBSCRIPTION_SCHEDULE_EXPIRING = 'subscription_schedule.expiring',
  SUBSCRIPTION_SCHEDULE_RELEASED = 'subscription_schedule.released',
  SUBSCRIPTION_SCHEDULE_UPDATED = 'subscription_schedule.updated',
  TAX_RATE_CREATED = 'tax_rate.created',
  TAX_RATE_UPDATED = 'tax_rate.updated',
  TOPUP_CANCELED = 'topup.canceled',
  TOPUP_CREATED = 'topup.created',
  TOPUP_FAILED = 'topup.failed',
  TOPUP_REVERSED = 'topup.reversed',
  TOPUP_SUCCEEDED = 'topup.succeeded',
  TRANSFER_CREATED = 'transfer.created',
  TRANSFER_FAILED = 'transfer.failed',
  TRANSFER_PAID = 'transfer.paid',
  TRANSFER_REVERSED = 'transfer.reversed',
  TRANSFER_UPDATED = 'transfer.updated'
}

export type V1WebhookEndpoint2Input = {
  /** An optional description of what the webhook is used for. */
  description?: Maybe<Scalars['String']>;
  /** Disable the webhook endpoint if set to true. */
  disabled?: Maybe<Scalars['Boolean']>;
  /** The list of events to enable for this endpoint. You may specify `['*']` to enable all events, except those that require explicit selection. */
  enabledEvents?: Maybe<Array<Maybe<EnabledEvents2ListItem>>>;
  /** Specifies which fields in the response should be expanded. */
  expand?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
  metadata?: Maybe<Scalars['JSON']>;
  /** The URL of the webhook endpoint. */
  url?: Maybe<Scalars['String']>;
};

export type WithIndex<TObject> = TObject & Record<string, any>;
export type ResolversObject<TObject> = WithIndex<TObject>;

export type ResolverTypeWrapper<T> = Promise<T> | T;


export type ResolverWithResolve<TResult, TParent, TContext, TArgs> = {
  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};

export type LegacyStitchingResolver<TResult, TParent, TContext, TArgs> = {
  fragment: string;
  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};

export type NewStitchingResolver<TResult, TParent, TContext, TArgs> = {
  selectionSet: string;
  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};
export type StitchingResolver<TResult, TParent, TContext, TArgs> = LegacyStitchingResolver<TResult, TParent, TContext, TArgs> | NewStitchingResolver<TResult, TParent, TContext, TArgs>;
export type Resolver<TResult, TParent = {}, TContext = {}, TArgs = {}> =
  | ResolverFn<TResult, TParent, TContext, TArgs>
  | ResolverWithResolve<TResult, TParent, TContext, TArgs>
  | StitchingResolver<TResult, TParent, TContext, TArgs>;

export type ResolverFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => Promise<TResult> | TResult;

export type SubscriptionSubscribeFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => AsyncIterator<TResult> | Promise<AsyncIterator<TResult>>;

export type SubscriptionResolveFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => TResult | Promise<TResult>;

export interface SubscriptionSubscriberObject<TResult, TKey extends string, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<{ [key in TKey]: TResult }, TParent, TContext, TArgs>;
  resolve?: SubscriptionResolveFn<TResult, { [key in TKey]: TResult }, TContext, TArgs>;
}

export interface SubscriptionResolverObject<TResult, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<any, TParent, TContext, TArgs>;
  resolve: SubscriptionResolveFn<TResult, any, TContext, TArgs>;
}

export type SubscriptionObject<TResult, TKey extends string, TParent, TContext, TArgs> =
  | SubscriptionSubscriberObject<TResult, TKey, TParent, TContext, TArgs>
  | SubscriptionResolverObject<TResult, TParent, TContext, TArgs>;

export type SubscriptionResolver<TResult, TKey extends string, TParent = {}, TContext = {}, TArgs = {}> =
  | ((...args: any[]) => SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>)
  | SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>;

export type TypeResolveFn<TTypes, TParent = {}, TContext = {}> = (
  parent: TParent,
  context: TContext,
  info: GraphQLResolveInfo
) => Maybe<TTypes> | Promise<Maybe<TTypes>>;

export type IsTypeOfResolverFn<T = {}, TContext = {}> = (obj: T, context: TContext, info: GraphQLResolveInfo) => boolean | Promise<boolean>;

export type NextResolverFn<T> = () => Promise<T>;

export type DirectiveResolverFn<TResult = {}, TParent = {}, TContext = {}, TArgs = {}> = (
  next: NextResolverFn<TResult>,
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => TResult | Promise<TResult>;

/** Mapping between all available schema types and the resolvers types */
export type ResolversTypes = ResolversObject<{
  Query: ResolverTypeWrapper<{}>;
  ContinentFilterInput: ContinentFilterInput;
  StringQueryOperatorInput: StringQueryOperatorInput;
  String: ResolverTypeWrapper<Scalars['String']>;
  Continent: ResolverTypeWrapper<Continent>;
  ID: ResolverTypeWrapper<Scalars['ID']>;
  Country: ResolverTypeWrapper<Country>;
  Language: ResolverTypeWrapper<Language>;
  Boolean: ResolverTypeWrapper<Scalars['Boolean']>;
  State: ResolverTypeWrapper<State>;
  CountryFilterInput: CountryFilterInput;
  LanguageFilterInput: LanguageFilterInput;
  CacheControlScope: CacheControlScope;
  Upload: ResolverTypeWrapper<Scalars['Upload']>;
  Int: ResolverTypeWrapper<Scalars['Int']>;
  Mutation: ResolverTypeWrapper<{}>;
  CurrencyInput: CurrencyInput;
  CurrencyCode: CurrencyCode;
  Cart: ResolverTypeWrapper<Cart>;
  Node: ResolversTypes['Cart'];
  Currency: ResolverTypeWrapper<Currency>;
  CartItem: ResolverTypeWrapper<CartItem>;
  CartItemType: CartItemType;
  Money: ResolverTypeWrapper<Money>;
  CustomCartAttribute: ResolverTypeWrapper<CustomCartAttribute>;
  Json: ResolverTypeWrapper<Scalars['Json']>;
  Date: ResolverTypeWrapper<Scalars['Date']>;
  AddToCartInput: AddToCartInput;
  CustomAttributeInput: CustomAttributeInput;
  SetCartItemsInput: SetCartItemsInput;
  SetCartItemInput: SetCartItemInput;
  UpdateCartItemInput: UpdateCartItemInput;
  UpdateItemQuantityInput: UpdateItemQuantityInput;
  RemoveCartItemInput: RemoveCartItemInput;
  EmptyCartInput: EmptyCartInput;
  UpdateCartInput: UpdateCartInput;
  DeleteCartInput: DeleteCartInput;
  DeletePayload: ResolverTypeWrapper<DeletePayload>;
  CheckoutInput: CheckoutInput;
  AddressInput: AddressInput;
  Order: ResolverTypeWrapper<Order>;
  Address: ResolverTypeWrapper<Address>;
  OrderItem: ResolverTypeWrapper<OrderItem>;
  CustomAttribute: ResolverTypeWrapper<CustomAttribute>;
  OrderStatus: OrderStatus;
  ThreeDSecure: ResolverTypeWrapper<ThreeDSecure>;
  Card2: ResolverTypeWrapper<Card2>;
  JSON: ResolverTypeWrapper<Scalars['JSON']>;
  AvailablePayoutMethodsListItem: AvailablePayoutMethodsListItem;
  Object: Object;
  Object2: Object2;
  Account3: ResolverTypeWrapper<Account3>;
  BusinessProfile: ResolverTypeWrapper<BusinessProfile>;
  SupportAddress: ResolverTypeWrapper<SupportAddress>;
  BusinessType: BusinessType;
  AccountCapabilities: ResolverTypeWrapper<AccountCapabilities>;
  AcssDebitPayments: AcssDebitPayments;
  AfterpayClearpayPayments: AfterpayClearpayPayments;
  AuBecsDebitPayments: AuBecsDebitPayments;
  BacsDebitPayments: BacsDebitPayments;
  BancontactPayments: BancontactPayments;
  BoletoPayments: BoletoPayments;
  CardIssuing: CardIssuing;
  CardPayments: CardPayments;
  CartesBancairesPayments: CartesBancairesPayments;
  EpsPayments: EpsPayments;
  FpxPayments: FpxPayments;
  GiropayPayments: GiropayPayments;
  GrabpayPayments: GrabpayPayments;
  IdealPayments: IdealPayments;
  JcbPayments: JcbPayments;
  LegacyPayments: LegacyPayments;
  OxxoPayments: OxxoPayments;
  P24Payments: P24Payments;
  SepaDebitPayments: SepaDebitPayments;
  SofortPayments: SofortPayments;
  TaxReportingUs1099K: TaxReportingUs1099K;
  TaxReportingUs1099Misc: TaxReportingUs1099Misc;
  Transfers: Transfers;
  LegalEntityCompany: ResolverTypeWrapper<LegalEntityCompany>;
  AddressKana: ResolverTypeWrapper<AddressKana>;
  AddressKanji: ResolverTypeWrapper<AddressKanji>;
  Structure: Structure;
  Verification: ResolverTypeWrapper<Verification>;
  Document: ResolverTypeWrapper<Document>;
  AccountController: ResolverTypeWrapper<AccountController>;
  Type: Type;
  ExternalAccounts: ResolverTypeWrapper<ExternalAccounts>;
  DataListItem: ResolverTypeWrapper<DataListItem>;
  Object4: Object4;
  Person: ResolverTypeWrapper<Person>;
  AddressKana2: ResolverTypeWrapper<AddressKana2>;
  AddressKanji2: ResolverTypeWrapper<AddressKanji2>;
  LegalEntityDob: ResolverTypeWrapper<LegalEntityDob>;
  Object5: Object5;
  PoliticalExposure: PoliticalExposure;
  PersonRelationship: ResolverTypeWrapper<PersonRelationship>;
  Float: ResolverTypeWrapper<Scalars['Float']>;
  Requirements: ResolverTypeWrapper<Requirements>;
  AccountRequirementsError: ResolverTypeWrapper<AccountRequirementsError>;
  Code: Code;
  LegalEntityPersonVerification: ResolverTypeWrapper<LegalEntityPersonVerification>;
  AdditionalDocument: ResolverTypeWrapper<AdditionalDocument>;
  LegalEntityPersonVerificationDocument: ResolverTypeWrapper<LegalEntityPersonVerificationDocument>;
  Object3: Object3;
  AccountRequirements: ResolverTypeWrapper<AccountRequirements>;
  Settings: ResolverTypeWrapper<Settings>;
  BacsDebitPayments2: ResolverTypeWrapper<BacsDebitPayments2>;
  Branding: ResolverTypeWrapper<Branding>;
  CardIssuing2: ResolverTypeWrapper<CardIssuing2>;
  CardIssuingAccountTermsOfService: ResolverTypeWrapper<CardIssuingAccountTermsOfService>;
  CardPayments2: ResolverTypeWrapper<CardPayments2>;
  AccountDeclineChargeOn: ResolverTypeWrapper<AccountDeclineChargeOn>;
  Dashboard: ResolverTypeWrapper<Dashboard>;
  Payments: ResolverTypeWrapper<Payments>;
  Payouts: ResolverTypeWrapper<Payouts>;
  TransferSchedule: ResolverTypeWrapper<TransferSchedule>;
  SepaDebitPayments2: ResolverTypeWrapper<SepaDebitPayments2>;
  AccountTosAcceptance: ResolverTypeWrapper<AccountTosAcceptance>;
  Type2: Type2;
  Polymorphic: ResolverTypeWrapper<Polymorphic>;
  ListAccountCapability: ResolverTypeWrapper<ListAccountCapability>;
  Capability: ResolverTypeWrapper<Capability>;
  Object6: Object6;
  AccountCapabilityRequirements: ResolverTypeWrapper<AccountCapabilityRequirements>;
  Status5: Status5;
  ExternalAccountList: ResolverTypeWrapper<ExternalAccountList>;
  V1AccountPeople2: ResolverTypeWrapper<V1AccountPeople2>;
  Relationship2Input: Relationship2Input;
  V1AccountPersons2: ResolverTypeWrapper<V1AccountPersons2>;
  V1Accounts2: ResolverTypeWrapper<V1Accounts2>;
  ApplePayDomainList: ResolverTypeWrapper<ApplePayDomainList>;
  ApplePayDomain: ResolverTypeWrapper<ApplePayDomain>;
  Object9: Object9;
  V1ApplicationFees2: ResolverTypeWrapper<V1ApplicationFees2>;
  ApplicationFee: ResolverTypeWrapper<ApplicationFee>;
  Object10: Object10;
  Refunds: ResolverTypeWrapper<Refunds>;
  FeeRefund: ResolverTypeWrapper<FeeRefund>;
  Object11: Object11;
  FeeRefundList: ResolverTypeWrapper<FeeRefundList>;
  Balance: ResolverTypeWrapper<Balance>;
  BalanceAmount: ResolverTypeWrapper<BalanceAmount>;
  BalanceAmountBySourceType: ResolverTypeWrapper<BalanceAmountBySourceType>;
  BalanceDetail: ResolverTypeWrapper<BalanceDetail>;
  Object12: Object12;
  BalanceTransactionsList: ResolverTypeWrapper<BalanceTransactionsList>;
  BalanceTransaction3: ResolverTypeWrapper<BalanceTransaction3>;
  Fee3: ResolverTypeWrapper<Fee3>;
  Object13: Object13;
  Type6: Type6;
  V1BillingPortalConfigurations2: ResolverTypeWrapper<V1BillingPortalConfigurations2>;
  BillingPortalConfiguration: ResolverTypeWrapper<BillingPortalConfiguration>;
  PortalBusinessProfile: ResolverTypeWrapper<PortalBusinessProfile>;
  PortalFeatures: ResolverTypeWrapper<PortalFeatures>;
  PortalCustomerUpdate: ResolverTypeWrapper<PortalCustomerUpdate>;
  AllowedUpdatesListItem: AllowedUpdatesListItem;
  PortalInvoiceList: ResolverTypeWrapper<PortalInvoiceList>;
  PortalPaymentMethodUpdate: ResolverTypeWrapper<PortalPaymentMethodUpdate>;
  PortalSubscriptionCancel: ResolverTypeWrapper<PortalSubscriptionCancel>;
  Mode: Mode;
  ProrationBehavior: ProrationBehavior;
  PortalSubscriptionPause: ResolverTypeWrapper<PortalSubscriptionPause>;
  PortalSubscriptionUpdate: ResolverTypeWrapper<PortalSubscriptionUpdate>;
  DefaultAllowedUpdatesListItem: DefaultAllowedUpdatesListItem;
  PortalSubscriptionUpdateProduct: ResolverTypeWrapper<PortalSubscriptionUpdateProduct>;
  ProrationBehavior2: ProrationBehavior2;
  Object14: Object14;
  V1BitcoinReceivers2: ResolverTypeWrapper<V1BitcoinReceivers2>;
  BitcoinReceiver: ResolverTypeWrapper<BitcoinReceiver>;
  Object16: Object16;
  Transactions: ResolverTypeWrapper<Transactions>;
  BitcoinTransaction: ResolverTypeWrapper<BitcoinTransaction>;
  Object17: Object17;
  BitcoinTransactionList: ResolverTypeWrapper<BitcoinTransactionList>;
  V1Charges2: ResolverTypeWrapper<V1Charges2>;
  Charge2: ResolverTypeWrapper<Charge2>;
  BillingDetails: ResolverTypeWrapper<BillingDetails>;
  Address4: ResolverTypeWrapper<Address4>;
  FraudDetails: ResolverTypeWrapper<FraudDetails>;
  Object18: Object18;
  Outcome: ResolverTypeWrapper<Outcome>;
  PaymentMethodDetails: ResolverTypeWrapper<PaymentMethodDetails>;
  AchCreditTransfer: ResolverTypeWrapper<AchCreditTransfer>;
  AchDebit: ResolverTypeWrapper<AchDebit>;
  AccountHolderType4: AccountHolderType4;
  AcssDebit: ResolverTypeWrapper<AcssDebit>;
  AfterpayClearpay: ResolverTypeWrapper<AfterpayClearpay>;
  Alipay: ResolverTypeWrapper<Alipay>;
  AuBecsDebit: ResolverTypeWrapper<AuBecsDebit>;
  BacsDebit: ResolverTypeWrapper<BacsDebit>;
  Bancontact: ResolverTypeWrapper<Bancontact>;
  PreferredLanguage: PreferredLanguage;
  Boleto: ResolverTypeWrapper<Boleto>;
  Card4: ResolverTypeWrapper<Card4>;
  Checks: ResolverTypeWrapper<Checks>;
  Installments: ResolverTypeWrapper<Installments>;
  Plan: ResolverTypeWrapper<Plan>;
  Interval3: Interval3;
  Type8: Type8;
  ThreeDSecure2: ResolverTypeWrapper<ThreeDSecure2>;
  AuthenticationFlow: AuthenticationFlow;
  Result: Result;
  ResultReason: ResultReason;
  Version: Version;
  Wallet: ResolverTypeWrapper<Wallet>;
  Masterpass: ResolverTypeWrapper<Masterpass>;
  BillingAddress: ResolverTypeWrapper<BillingAddress>;
  ShippingAddress: ResolverTypeWrapper<ShippingAddress>;
  Type9: Type9;
  VisaCheckout: ResolverTypeWrapper<VisaCheckout>;
  CardPresent: ResolverTypeWrapper<CardPresent>;
  ReadMethod: ReadMethod;
  Receipt: ResolverTypeWrapper<Receipt>;
  AccountType4: AccountType4;
  Eps: ResolverTypeWrapper<Eps>;
  Bank: Bank;
  Fpx2: ResolverTypeWrapper<Fpx2>;
  Bank2: Bank2;
  Giropay: ResolverTypeWrapper<Giropay>;
  Grabpay: ResolverTypeWrapper<Grabpay>;
  Ideal: ResolverTypeWrapper<Ideal>;
  Bank3: Bank3;
  Bic3: Bic3;
  InteracPresent: ResolverTypeWrapper<InteracPresent>;
  Receipt2: ResolverTypeWrapper<Receipt2>;
  AccountType5: AccountType5;
  Multibanco: ResolverTypeWrapper<Multibanco>;
  Oxxo: ResolverTypeWrapper<Oxxo>;
  P24: ResolverTypeWrapper<P24>;
  Bank4: Bank4;
  SepaDebit: ResolverTypeWrapper<SepaDebit>;
  Sofort: ResolverTypeWrapper<Sofort>;
  PreferredLanguage2: PreferredLanguage2;
  WechatPay: ResolverTypeWrapper<WechatPay>;
  RefundList: ResolverTypeWrapper<RefundList>;
  Refund: ResolverTypeWrapper<Refund>;
  Object19: Object19;
  Shipping: ResolverTypeWrapper<Shipping>;
  TransferData: ResolverTypeWrapper<TransferData>;
  Dispute: ResolverTypeWrapper<Dispute>;
  DisputeEvidence: ResolverTypeWrapper<DisputeEvidence>;
  DisputeEvidenceDetails: ResolverTypeWrapper<DisputeEvidenceDetails>;
  Object20: Object20;
  Status9: Status9;
  RefundList2: ResolverTypeWrapper<RefundList2>;
  PaymentPagesCheckoutSessionList: ResolverTypeWrapper<PaymentPagesCheckoutSessionList>;
  CheckoutSession: ResolverTypeWrapper<CheckoutSession>;
  PaymentPagesCheckoutSessionAutomaticTax: ResolverTypeWrapper<PaymentPagesCheckoutSessionAutomaticTax>;
  Status10: Status10;
  BillingAddressCollection: BillingAddressCollection;
  CustomerDetails: ResolverTypeWrapper<CustomerDetails>;
  TaxExempt: TaxExempt;
  PaymentPagesCheckoutSessionTaxId: ResolverTypeWrapper<PaymentPagesCheckoutSessionTaxId>;
  Type11: Type11;
  LineItems: ResolverTypeWrapper<LineItems>;
  Item: ResolverTypeWrapper<Item>;
  LineItemsDiscountAmount: ResolverTypeWrapper<LineItemsDiscountAmount>;
  Discount: ResolverTypeWrapper<Discount>;
  Coupon: ResolverTypeWrapper<Coupon>;
  CouponAppliesTo: ResolverTypeWrapper<CouponAppliesTo>;
  Duration: Duration;
  Object21: Object21;
  Object22: Object22;
  Object23: Object23;
  Price: ResolverTypeWrapper<Price>;
  BillingScheme: BillingScheme;
  Object24: Object24;
  Recurring: ResolverTypeWrapper<Recurring>;
  AggregateUsage: AggregateUsage;
  Interval4: Interval4;
  UsageType: UsageType;
  TaxBehavior: TaxBehavior;
  PriceTier: ResolverTypeWrapper<PriceTier>;
  TiersMode: TiersMode;
  TransformQuantity: ResolverTypeWrapper<TransformQuantity>;
  Round: Round;
  Type12: Type12;
  LineItemsTaxAmount: ResolverTypeWrapper<LineItemsTaxAmount>;
  TaxRate: ResolverTypeWrapper<TaxRate>;
  Object25: Object25;
  TaxType: TaxType;
  Locale: Locale;
  Mode3: Mode3;
  Object26: Object26;
  PaymentMethodOptions: ResolverTypeWrapper<PaymentMethodOptions>;
  AcssDebit2: ResolverTypeWrapper<AcssDebit2>;
  Currency21: Currency21;
  CheckoutAcssDebitMandateOptions: ResolverTypeWrapper<CheckoutAcssDebitMandateOptions>;
  PaymentSchedule: PaymentSchedule;
  TransactionType: TransactionType;
  VerificationMethod: VerificationMethod;
  Boleto2: ResolverTypeWrapper<Boleto2>;
  Oxxo2: ResolverTypeWrapper<Oxxo2>;
  PaymentStatus: PaymentStatus;
  Shipping2: ResolverTypeWrapper<Shipping2>;
  ShippingAddressCollection: ResolverTypeWrapper<ShippingAddressCollection>;
  AllowedCountriesListItem: AllowedCountriesListItem;
  SubmitType: SubmitType;
  PaymentPagesCheckoutSessionTaxIdCollection: ResolverTypeWrapper<PaymentPagesCheckoutSessionTaxIdCollection>;
  TotalDetails: ResolverTypeWrapper<TotalDetails>;
  Breakdown: ResolverTypeWrapper<Breakdown>;
  PaymentPagesCheckoutSessionListLineItems: ResolverTypeWrapper<PaymentPagesCheckoutSessionListLineItems>;
  V1CountrySpecs2: ResolverTypeWrapper<V1CountrySpecs2>;
  CountrySpec: ResolverTypeWrapper<CountrySpec>;
  Object27: Object27;
  CountrySpecVerificationFields: ResolverTypeWrapper<CountrySpecVerificationFields>;
  CountrySpecVerificationFieldDetails: ResolverTypeWrapper<CountrySpecVerificationFieldDetails>;
  V1Coupons2: ResolverTypeWrapper<V1Coupons2>;
  CreditNotesList: ResolverTypeWrapper<CreditNotesList>;
  CreditNote: ResolverTypeWrapper<CreditNote>;
  DiscountsResourceDiscountAmount: ResolverTypeWrapper<DiscountsResourceDiscountAmount>;
  Lines: ResolverTypeWrapper<Lines>;
  CreditNoteLineItem: ResolverTypeWrapper<CreditNoteLineItem>;
  Object28: Object28;
  CreditNoteTaxAmount: ResolverTypeWrapper<CreditNoteTaxAmount>;
  Type13: Type13;
  Object29: Object29;
  Reason7: Reason7;
  Status11: Status11;
  Type14: Type14;
  CreditNoteLinesList: ResolverTypeWrapper<CreditNoteLinesList>;
  Lines3ListItemInput: Lines3ListItemInput;
  Type15: Type15;
  Reason18: Reason18;
  V1Customers2: ResolverTypeWrapper<V1Customers2>;
  Customer13: ResolverTypeWrapper<Customer13>;
  Address7: ResolverTypeWrapper<Address7>;
  Discount3: ResolverTypeWrapper<Discount3>;
  InvoiceSettingCustomerSetting: ResolverTypeWrapper<InvoiceSettingCustomerSetting>;
  InvoiceSettingCustomField: ResolverTypeWrapper<InvoiceSettingCustomField>;
  Object30: Object30;
  Shipping5: ResolverTypeWrapper<Shipping5>;
  Sources: ResolverTypeWrapper<Sources>;
  Data21ListItem: ResolverTypeWrapper<Data21ListItem>;
  AchCreditTransfer2: ResolverTypeWrapper<AchCreditTransfer2>;
  AchDebit2: ResolverTypeWrapper<AchDebit2>;
  AcssDebit4: ResolverTypeWrapper<AcssDebit4>;
  Alipay2: ResolverTypeWrapper<Alipay2>;
  AuBecsDebit2: ResolverTypeWrapper<AuBecsDebit2>;
  Bancontact2: ResolverTypeWrapper<Bancontact2>;
  Card6: ResolverTypeWrapper<Card6>;
  CardPresent2: ResolverTypeWrapper<CardPresent2>;
  CodeVerification: ResolverTypeWrapper<CodeVerification>;
  Eps2: ResolverTypeWrapper<Eps2>;
  Giropay2: ResolverTypeWrapper<Giropay2>;
  Ideal2: ResolverTypeWrapper<Ideal2>;
  Klarna2: ResolverTypeWrapper<Klarna2>;
  Multibanco2: ResolverTypeWrapper<Multibanco2>;
  Owner3: ResolverTypeWrapper<Owner3>;
  Address8: ResolverTypeWrapper<Address8>;
  VerifiedAddress: ResolverTypeWrapper<VerifiedAddress>;
  P242: ResolverTypeWrapper<P242>;
  Receiver2: ResolverTypeWrapper<Receiver2>;
  Redirect: ResolverTypeWrapper<Redirect>;
  SepaDebit2: ResolverTypeWrapper<SepaDebit2>;
  Sofort2: ResolverTypeWrapper<Sofort2>;
  SourceOrder: ResolverTypeWrapper<SourceOrder>;
  SourceOrderItem: ResolverTypeWrapper<SourceOrderItem>;
  Shipping6: ResolverTypeWrapper<Shipping6>;
  ThreeDSecure4: ResolverTypeWrapper<ThreeDSecure4>;
  Type18: Type18;
  Wechat2: ResolverTypeWrapper<Wechat2>;
  Subscriptions: ResolverTypeWrapper<Subscriptions>;
  Subscription5: ResolverTypeWrapper<Subscription5>;
  SubscriptionAutomaticTax: ResolverTypeWrapper<SubscriptionAutomaticTax>;
  BillingThresholds: ResolverTypeWrapper<BillingThresholds>;
  CollectionMethod: CollectionMethod;
  Discount4: ResolverTypeWrapper<Discount4>;
  SubscriptionItemList: ResolverTypeWrapper<SubscriptionItemList>;
  SubscriptionItem: ResolverTypeWrapper<SubscriptionItem>;
  BillingThresholds2: ResolverTypeWrapper<BillingThresholds2>;
  Object31: Object31;
  Price3: ResolverTypeWrapper<Price3>;
  Object32: Object32;
  PauseCollection: ResolverTypeWrapper<PauseCollection>;
  Behavior: Behavior;
  PaymentSettings: ResolverTypeWrapper<PaymentSettings>;
  PaymentMethodOptions2: ResolverTypeWrapper<PaymentMethodOptions2>;
  Bancontact3: ResolverTypeWrapper<Bancontact3>;
  PreferredLanguage5: PreferredLanguage5;
  Card8: ResolverTypeWrapper<Card8>;
  RequestThreeDSecure: RequestThreeDSecure;
  PaymentMethodTypes3ListItem: PaymentMethodTypes3ListItem;
  PendingInvoiceItemInterval: ResolverTypeWrapper<PendingInvoiceItemInterval>;
  Interval6: Interval6;
  PendingUpdate: ResolverTypeWrapper<PendingUpdate>;
  Status14: Status14;
  TransferData4: ResolverTypeWrapper<TransferData4>;
  CustomerTax: ResolverTypeWrapper<CustomerTax>;
  AutomaticTax2: AutomaticTax2;
  Location: ResolverTypeWrapper<Location>;
  Source3: Source3;
  TaxExempt2: TaxExempt2;
  TaxIDsList: ResolverTypeWrapper<TaxIDsList>;
  TaxId3: ResolverTypeWrapper<TaxId3>;
  Object33: Object33;
  Type19: Type19;
  Verification3: ResolverTypeWrapper<Verification3>;
  Status15: Status15;
  V1Customer2: ResolverTypeWrapper<V1Customer2>;
  Deleted: Deleted;
  InvoiceSettings2: ResolverTypeWrapper<InvoiceSettings2>;
  Tax2: ResolverTypeWrapper<Tax2>;
  CustomerBalanceTransactionList: ResolverTypeWrapper<CustomerBalanceTransactionList>;
  CustomerBalanceTransaction2: ResolverTypeWrapper<CustomerBalanceTransaction2>;
  Object34: Object34;
  Type21: Type21;
  BankAccountList: ResolverTypeWrapper<BankAccountList>;
  BankAccount7: ResolverTypeWrapper<BankAccount7>;
  AvailablePayoutMethods2ListItem: AvailablePayoutMethods2ListItem;
  Object35: Object35;
  CardList: ResolverTypeWrapper<CardList>;
  ApmsSourcesSourceList: ResolverTypeWrapper<ApmsSourcesSourceList>;
  PaymentSource: ResolverTypeWrapper<PaymentSource>;
  Capabilities2: ResolverTypeWrapper<Capabilities2>;
  Company2: ResolverTypeWrapper<Company2>;
  Controller: ResolverTypeWrapper<Controller>;
  Individual2: ResolverTypeWrapper<Individual2>;
  Requirements2: ResolverTypeWrapper<Requirements2>;
  TosAcceptance2: ResolverTypeWrapper<TosAcceptance2>;
  SubscriptionList: ResolverTypeWrapper<SubscriptionList>;
  TaxIDsList2: ResolverTypeWrapper<TaxIDsList2>;
  V1Disputes2: ResolverTypeWrapper<V1Disputes2>;
  NotificationEventList: ResolverTypeWrapper<NotificationEventList>;
  Event: ResolverTypeWrapper<Event>;
  NotificationEventData: ResolverTypeWrapper<NotificationEventData>;
  Object38: Object38;
  Request: ResolverTypeWrapper<Request>;
  V1ExchangeRates2: ResolverTypeWrapper<V1ExchangeRates2>;
  ExchangeRate2: ResolverTypeWrapper<ExchangeRate2>;
  Object39: Object39;
  V1FileLinks2: ResolverTypeWrapper<V1FileLinks2>;
  FileLink: ResolverTypeWrapper<FileLink>;
  Object40: Object40;
  V1Files2: ResolverTypeWrapper<V1Files2>;
  File3: ResolverTypeWrapper<File3>;
  Links: ResolverTypeWrapper<Links>;
  Object41: Object41;
  Purpose: Purpose;
  Purpose2: Purpose2;
  V1IdentityVerificationReports2: ResolverTypeWrapper<V1IdentityVerificationReports2>;
  IdentityVerificationReport: ResolverTypeWrapper<IdentityVerificationReport>;
  GelatoDocumentReport: ResolverTypeWrapper<GelatoDocumentReport>;
  Address12: ResolverTypeWrapper<Address12>;
  Dob8: ResolverTypeWrapper<Dob8>;
  Error: ResolverTypeWrapper<Error>;
  Code2: Code2;
  ExpirationDate: ResolverTypeWrapper<ExpirationDate>;
  IssuedDate: ResolverTypeWrapper<IssuedDate>;
  Status17: Status17;
  Type25: Type25;
  GelatoIdNumberReport: ResolverTypeWrapper<GelatoIdNumberReport>;
  Dob9: ResolverTypeWrapper<Dob9>;
  Error2: ResolverTypeWrapper<Error2>;
  Code3: Code3;
  IdNumberType: IdNumberType;
  Status18: Status18;
  Object42: Object42;
  GelatoVerificationReportOptions: ResolverTypeWrapper<GelatoVerificationReportOptions>;
  GelatoReportDocumentOptions: ResolverTypeWrapper<GelatoReportDocumentOptions>;
  AllowedTypesListItem: AllowedTypesListItem;
  GelatoSelfieReport: ResolverTypeWrapper<GelatoSelfieReport>;
  Error3: ResolverTypeWrapper<Error3>;
  Code4: Code4;
  Status19: Status19;
  Type26: Type26;
  Type68: Type68;
  V1IdentityVerificationSessions2: ResolverTypeWrapper<V1IdentityVerificationSessions2>;
  IdentityVerificationSession: ResolverTypeWrapper<IdentityVerificationSession>;
  LastError: ResolverTypeWrapper<LastError>;
  Code5: Code5;
  Object43: Object43;
  GelatoVerificationSessionOptions: ResolverTypeWrapper<GelatoVerificationSessionOptions>;
  GelatoSessionDocumentOptions: ResolverTypeWrapper<GelatoSessionDocumentOptions>;
  Redaction: ResolverTypeWrapper<Redaction>;
  Status20: Status20;
  Status21: Status21;
  Type27: Type27;
  VerifiedOutputs: ResolverTypeWrapper<VerifiedOutputs>;
  Address13: ResolverTypeWrapper<Address13>;
  Dob10: ResolverTypeWrapper<Dob10>;
  IdNumberType2: IdNumberType2;
  Status55: Status55;
  V1Invoiceitems2: ResolverTypeWrapper<V1Invoiceitems2>;
  Invoiceitem: ResolverTypeWrapper<Invoiceitem>;
  Object44: Object44;
  InvoiceLineItemPeriod: ResolverTypeWrapper<InvoiceLineItemPeriod>;
  Price7: ResolverTypeWrapper<Price7>;
  InvoicesList: ResolverTypeWrapper<InvoicesList>;
  Invoice11: ResolverTypeWrapper<Invoice11>;
  AutomaticTax3: ResolverTypeWrapper<AutomaticTax3>;
  Status22: Status22;
  BillingReason: BillingReason;
  CollectionMethod3: CollectionMethod3;
  CustomerAddress: ResolverTypeWrapper<CustomerAddress>;
  CustomerShipping: ResolverTypeWrapper<CustomerShipping>;
  CustomerTaxExempt: CustomerTaxExempt;
  InvoicesResourceInvoiceTaxId: ResolverTypeWrapper<InvoicesResourceInvoiceTaxId>;
  Discount5: ResolverTypeWrapper<Discount5>;
  LastFinalizationError: ResolverTypeWrapper<LastFinalizationError>;
  PaymentIntent7: ResolverTypeWrapper<PaymentIntent7>;
  CancellationReason: CancellationReason;
  CaptureMethod2: CaptureMethod2;
  Charges: ResolverTypeWrapper<Charges>;
  ConfirmationMethod: ConfirmationMethod;
  LastPaymentError: ResolverTypeWrapper<LastPaymentError>;
  PaymentMethod3: ResolverTypeWrapper<PaymentMethod3>;
  PaymentMethodAcssDebit: ResolverTypeWrapper<PaymentMethodAcssDebit>;
  PaymentMethodAuBecsDebit: ResolverTypeWrapper<PaymentMethodAuBecsDebit>;
  PaymentMethodBacsDebit: ResolverTypeWrapper<PaymentMethodBacsDebit>;
  PaymentMethodBoleto: ResolverTypeWrapper<PaymentMethodBoleto>;
  PaymentMethodCard: ResolverTypeWrapper<PaymentMethodCard>;
  Checks2: ResolverTypeWrapper<Checks2>;
  GeneratedFrom: ResolverTypeWrapper<GeneratedFrom>;
  PaymentMethodDetails2: ResolverTypeWrapper<PaymentMethodDetails2>;
  Networks: ResolverTypeWrapper<Networks>;
  ThreeDSecureUsage: ResolverTypeWrapper<ThreeDSecureUsage>;
  Wallet2: ResolverTypeWrapper<Wallet2>;
  Masterpass2: ResolverTypeWrapper<Masterpass2>;
  VisaCheckout2: ResolverTypeWrapper<VisaCheckout2>;
  PaymentMethodEps: ResolverTypeWrapper<PaymentMethodEps>;
  PaymentMethodFpx: ResolverTypeWrapper<PaymentMethodFpx>;
  Bank6: Bank6;
  PaymentMethodIdeal: ResolverTypeWrapper<PaymentMethodIdeal>;
  Bank7: Bank7;
  Bic9: Bic9;
  Object45: Object45;
  PaymentMethodP24: ResolverTypeWrapper<PaymentMethodP24>;
  Bank8: Bank8;
  PaymentMethodSepaDebit: ResolverTypeWrapper<PaymentMethodSepaDebit>;
  GeneratedFrom2: ResolverTypeWrapper<GeneratedFrom2>;
  PaymentMethodSofort: ResolverTypeWrapper<PaymentMethodSofort>;
  Type29: Type29;
  SetupIntent2: ResolverTypeWrapper<SetupIntent2>;
  CancellationReason2: CancellationReason2;
  LastSetupError: ResolverTypeWrapper<LastSetupError>;
  Source9: ResolverTypeWrapper<Source9>;
  Type30: Type30;
  NextAction: ResolverTypeWrapper<NextAction>;
  RedirectToUrl: ResolverTypeWrapper<RedirectToUrl>;
  VerifyWithMicrodeposits: ResolverTypeWrapper<VerifyWithMicrodeposits>;
  Object46: Object46;
  PaymentMethodOptions4: ResolverTypeWrapper<PaymentMethodOptions4>;
  AcssDebit5: ResolverTypeWrapper<AcssDebit5>;
  Currency43: Currency43;
  SetupIntentPaymentMethodOptionsMandateOptionsAcssDebit: ResolverTypeWrapper<SetupIntentPaymentMethodOptionsMandateOptionsAcssDebit>;
  Card14: ResolverTypeWrapper<Card14>;
  RequestThreeDSecure2: RequestThreeDSecure2;
  SepaDebit3: ResolverTypeWrapper<SepaDebit3>;
  Status23: Status23;
  NextAction2: ResolverTypeWrapper<NextAction2>;
  AlipayHandleRedirect: ResolverTypeWrapper<AlipayHandleRedirect>;
  BoletoDisplayDetails: ResolverTypeWrapper<BoletoDisplayDetails>;
  OxxoDisplayDetails: ResolverTypeWrapper<OxxoDisplayDetails>;
  RedirectToUrl2: ResolverTypeWrapper<RedirectToUrl2>;
  VerifyWithMicrodeposits2: ResolverTypeWrapper<VerifyWithMicrodeposits2>;
  WechatPayDisplayQrCode: ResolverTypeWrapper<WechatPayDisplayQrCode>;
  WechatPayRedirectToAndroidApp: ResolverTypeWrapper<WechatPayRedirectToAndroidApp>;
  WechatPayRedirectToIosApp: ResolverTypeWrapper<WechatPayRedirectToIosApp>;
  Object47: Object47;
  PaymentMethodOptions5: ResolverTypeWrapper<PaymentMethodOptions5>;
  AcssDebit6: ResolverTypeWrapper<AcssDebit6>;
  PaymentIntentPaymentMethodOptionsMandateOptionsAcssDebit: ResolverTypeWrapper<PaymentIntentPaymentMethodOptionsMandateOptionsAcssDebit>;
  AfterpayClearpay2: ResolverTypeWrapper<AfterpayClearpay2>;
  Bancontact5: ResolverTypeWrapper<Bancontact5>;
  Card15: ResolverTypeWrapper<Card15>;
  Installments2: ResolverTypeWrapper<Installments2>;
  PaymentMethodDetailsCardInstallmentsPlan: ResolverTypeWrapper<PaymentMethodDetailsCardInstallmentsPlan>;
  Plan3: ResolverTypeWrapper<Plan3>;
  Network4: Network4;
  SepaDebit4: ResolverTypeWrapper<SepaDebit4>;
  Sofort3: ResolverTypeWrapper<Sofort3>;
  PreferredLanguage6: PreferredLanguage6;
  WechatPay3: ResolverTypeWrapper<WechatPay3>;
  Client2: Client2;
  SetupFutureUsage2: SetupFutureUsage2;
  Shipping9: ResolverTypeWrapper<Shipping9>;
  Status24: Status24;
  TransferData7: ResolverTypeWrapper<TransferData7>;
  InvoiceLinesList: ResolverTypeWrapper<InvoiceLinesList>;
  LineItem: ResolverTypeWrapper<LineItem>;
  Object48: Object48;
  Price10: ResolverTypeWrapper<Price10>;
  InvoiceTaxAmount: ResolverTypeWrapper<InvoiceTaxAmount>;
  Type33: Type33;
  Object49: Object49;
  InvoicesPaymentSettings: ResolverTypeWrapper<InvoicesPaymentSettings>;
  PaymentMethodOptions6: ResolverTypeWrapper<PaymentMethodOptions6>;
  Bancontact6: ResolverTypeWrapper<Bancontact6>;
  Card16: ResolverTypeWrapper<Card16>;
  PaymentMethodTypes7ListItem: PaymentMethodTypes7ListItem;
  Status25: Status25;
  InvoicesStatusTransitions: ResolverTypeWrapper<InvoicesStatusTransitions>;
  InvoiceThresholdReason: ResolverTypeWrapper<InvoiceThresholdReason>;
  InvoiceItemThresholdReason: ResolverTypeWrapper<InvoiceItemThresholdReason>;
  TransferData8: ResolverTypeWrapper<TransferData8>;
  CollectionMethod9: CollectionMethod9;
  Status56: Status56;
  InvoiceLinesList2: ResolverTypeWrapper<InvoiceLinesList2>;
  AutomaticTax6Input: AutomaticTax6Input;
  CustomerDetails2Input: CustomerDetails2Input;
  TaxParamInput: TaxParamInput;
  TaxExempt4: TaxExempt4;
  TaxIds2ListItemInput: TaxIds2ListItemInput;
  Type20: Type20;
  InvoiceItemsListItemInput: InvoiceItemsListItemInput;
  Period3Input: Period3Input;
  OneTimePriceDataInput: OneTimePriceDataInput;
  TaxBehavior2: TaxBehavior2;
  SubscriptionItems2ListItemInput: SubscriptionItems2ListItemInput;
  RecurringPriceDataInput: RecurringPriceDataInput;
  RecurringAdhocInput: RecurringAdhocInput;
  Interval5: Interval5;
  SubscriptionProrationBehavior: SubscriptionProrationBehavior;
  RadarIssuerFraudRecordList: ResolverTypeWrapper<RadarIssuerFraudRecordList>;
  IssuerFraudRecord: ResolverTypeWrapper<IssuerFraudRecord>;
  Object50: Object50;
  V1IssuingAuthorizations2: ResolverTypeWrapper<V1IssuingAuthorizations2>;
  IssuingAuthorization: ResolverTypeWrapper<IssuingAuthorization>;
  AmountDetails: ResolverTypeWrapper<AmountDetails>;
  AuthorizationMethod: AuthorizationMethod;
  IssuingCard2: ResolverTypeWrapper<IssuingCard2>;
  CancellationReason3: CancellationReason3;
  IssuingCardholder: ResolverTypeWrapper<IssuingCardholder>;
  IssuingCardholderAddress: ResolverTypeWrapper<IssuingCardholderAddress>;
  Company3: ResolverTypeWrapper<Company3>;
  Individual3: ResolverTypeWrapper<Individual3>;
  Dob11: ResolverTypeWrapper<Dob11>;
  Verification4: ResolverTypeWrapper<Verification4>;
  Document5: ResolverTypeWrapper<Document5>;
  Object51: Object51;
  IssuingCardholderRequirements: ResolverTypeWrapper<IssuingCardholderRequirements>;
  DisabledReason4: DisabledReason4;
  PastDue5ListItem: PastDue5ListItem;
  SpendingControls: ResolverTypeWrapper<SpendingControls>;
  AllowedCategoriesListItem: AllowedCategoriesListItem;
  BlockedCategoriesListItem: BlockedCategoriesListItem;
  IssuingCardholderSpendingLimit: ResolverTypeWrapper<IssuingCardholderSpendingLimit>;
  CategoriesListItem: CategoriesListItem;
  Interval7: Interval7;
  Status26: Status26;
  Type34: Type34;
  Object52: Object52;
  ReplacementReason: ReplacementReason;
  Shipping10: ResolverTypeWrapper<Shipping10>;
  Carrier9: Carrier9;
  Service: Service;
  Status27: Status27;
  Type35: Type35;
  IssuingCardAuthorizationControls: ResolverTypeWrapper<IssuingCardAuthorizationControls>;
  IssuingCardSpendingLimit: ResolverTypeWrapper<IssuingCardSpendingLimit>;
  Status28: Status28;
  Type36: Type36;
  IssuingAuthorizationMerchantData: ResolverTypeWrapper<IssuingAuthorizationMerchantData>;
  Object53: Object53;
  PendingRequest: ResolverTypeWrapper<PendingRequest>;
  IssuingAuthorizationRequest: ResolverTypeWrapper<IssuingAuthorizationRequest>;
  Reason13: Reason13;
  Status29: Status29;
  IssuingTransaction: ResolverTypeWrapper<IssuingTransaction>;
  AmountDetails2: ResolverTypeWrapper<AmountDetails2>;
  Object54: Object54;
  PurchaseDetails: ResolverTypeWrapper<PurchaseDetails>;
  Flight: ResolverTypeWrapper<Flight>;
  IssuingTransactionFlightDataLeg: ResolverTypeWrapper<IssuingTransactionFlightDataLeg>;
  Fuel: ResolverTypeWrapper<Fuel>;
  Lodging: ResolverTypeWrapper<Lodging>;
  IssuingTransactionReceiptData: ResolverTypeWrapper<IssuingTransactionReceiptData>;
  Type38: Type38;
  Wallet3: Wallet3;
  IssuingAuthorizationVerificationData: ResolverTypeWrapper<IssuingAuthorizationVerificationData>;
  AddressLine1Check14: AddressLine1Check14;
  AddressPostalCodeCheck3: AddressPostalCodeCheck3;
  CvcCheck14: CvcCheck14;
  ExpiryCheck: ExpiryCheck;
  Status57: Status57;
  V1IssuingCardholders2: ResolverTypeWrapper<V1IssuingCardholders2>;
  Status58: Status58;
  Type69: Type69;
  V1IssuingCards2: ResolverTypeWrapper<V1IssuingCards2>;
  Status59: Status59;
  Type70: Type70;
  IssuingDisputeList: ResolverTypeWrapper<IssuingDisputeList>;
  IssuingDispute: ResolverTypeWrapper<IssuingDispute>;
  IssuingDisputeEvidence: ResolverTypeWrapper<IssuingDisputeEvidence>;
  IssuingDisputeCanceledEvidence: ResolverTypeWrapper<IssuingDisputeCanceledEvidence>;
  ProductType: ProductType;
  ReturnStatus: ReturnStatus;
  IssuingDisputeDuplicateEvidence: ResolverTypeWrapper<IssuingDisputeDuplicateEvidence>;
  IssuingDisputeFraudulentEvidence: ResolverTypeWrapper<IssuingDisputeFraudulentEvidence>;
  IssuingDisputeMerchandiseNotAsDescribedEvidence: ResolverTypeWrapper<IssuingDisputeMerchandiseNotAsDescribedEvidence>;
  IssuingDisputeNotReceivedEvidence: ResolverTypeWrapper<IssuingDisputeNotReceivedEvidence>;
  IssuingDisputeOtherEvidence: ResolverTypeWrapper<IssuingDisputeOtherEvidence>;
  Reason14: Reason14;
  IssuingDisputeServiceNotAsDescribedEvidence: ResolverTypeWrapper<IssuingDisputeServiceNotAsDescribedEvidence>;
  Object55: Object55;
  Status34: Status34;
  Status60: Status60;
  V1IssuingSettlements2: ResolverTypeWrapper<V1IssuingSettlements2>;
  IssuingSettlement: ResolverTypeWrapper<IssuingSettlement>;
  Network5: Network5;
  Object56: Object56;
  V1IssuingTransactions2: ResolverTypeWrapper<V1IssuingTransactions2>;
  Type71: Type71;
  Mandate6: ResolverTypeWrapper<Mandate6>;
  CustomerAcceptance: ResolverTypeWrapper<CustomerAcceptance>;
  OnlineAcceptance: ResolverTypeWrapper<OnlineAcceptance>;
  Type41: Type41;
  Object57: Object57;
  MandatePaymentMethodDetails: ResolverTypeWrapper<MandatePaymentMethodDetails>;
  MandateAcssDebit: ResolverTypeWrapper<MandateAcssDebit>;
  PaymentSchedule3: PaymentSchedule3;
  TransactionType3: TransactionType3;
  MandateAuBecsDebit: ResolverTypeWrapper<MandateAuBecsDebit>;
  MandateBacsDebit: ResolverTypeWrapper<MandateBacsDebit>;
  NetworkStatus2: NetworkStatus2;
  MandateSepaDebit: ResolverTypeWrapper<MandateSepaDebit>;
  MandateSingleUse: ResolverTypeWrapper<MandateSingleUse>;
  Status35: Status35;
  Type43: Type43;
  V1OrderReturns2: ResolverTypeWrapper<V1OrderReturns2>;
  OrderReturn: ResolverTypeWrapper<OrderReturn>;
  Object58: Object58;
  Object59: Object59;
  V1Orders2: ResolverTypeWrapper<V1Orders2>;
  Order3: ResolverTypeWrapper<Order3>;
  Object60: Object60;
  Returns: ResolverTypeWrapper<Returns>;
  Shipping11: ResolverTypeWrapper<Shipping11>;
  ShippingMethod: ResolverTypeWrapper<ShippingMethod>;
  DeliveryEstimate: ResolverTypeWrapper<DeliveryEstimate>;
  StatusTransitions: ResolverTypeWrapper<StatusTransitions>;
  StatusTransitions2Input: StatusTransitions2Input;
  PaymentFlowsPaymentIntentList: ResolverTypeWrapper<PaymentFlowsPaymentIntentList>;
  PaymentFlowsPaymentMethodList: ResolverTypeWrapper<PaymentFlowsPaymentMethodList>;
  Type72: Type72;
  PayoutList: ResolverTypeWrapper<PayoutList>;
  Payout: ResolverTypeWrapper<Payout>;
  Object61: Object61;
  Type50: Type50;
  PlanList: ResolverTypeWrapper<PlanList>;
  Plan4: ResolverTypeWrapper<Plan4>;
  AggregateUsage2: AggregateUsage2;
  BillingScheme2: BillingScheme2;
  Object62: Object62;
  PlanTier: ResolverTypeWrapper<PlanTier>;
  TransformUsage: ResolverTypeWrapper<TransformUsage>;
  PriceList: ResolverTypeWrapper<PriceList>;
  Recurring4Input: Recurring4Input;
  UsageType2: UsageType2;
  Type73: Type73;
  V1Products2: ResolverTypeWrapper<V1Products2>;
  Product14: ResolverTypeWrapper<Product14>;
  Object63: Object63;
  PackageDimensions: ResolverTypeWrapper<PackageDimensions>;
  V1PromotionCodes2: ResolverTypeWrapper<V1PromotionCodes2>;
  PromotionCode11: ResolverTypeWrapper<PromotionCode11>;
  Object64: Object64;
  PromotionCodesResourceRestrictions: ResolverTypeWrapper<PromotionCodesResourceRestrictions>;
  V1Quotes2: ResolverTypeWrapper<V1Quotes2>;
  Quote2: ResolverTypeWrapper<Quote2>;
  QuotesResourceAutomaticTax: ResolverTypeWrapper<QuotesResourceAutomaticTax>;
  Status39: Status39;
  CollectionMethod6: CollectionMethod6;
  QuotesResourceComputed: ResolverTypeWrapper<QuotesResourceComputed>;
  Recurring3: ResolverTypeWrapper<Recurring3>;
  TotalDetails2: ResolverTypeWrapper<TotalDetails2>;
  QuotesResourceTotalDetailsResourceBreakdown: ResolverTypeWrapper<QuotesResourceTotalDetailsResourceBreakdown>;
  QuotesResourceUpfront: ResolverTypeWrapper<QuotesResourceUpfront>;
  QuotesResourceListLineItems: ResolverTypeWrapper<QuotesResourceListLineItems>;
  QuotesResourceTotalDetails: ResolverTypeWrapper<QuotesResourceTotalDetails>;
  FromQuote: ResolverTypeWrapper<FromQuote>;
  InvoiceSettings3: ResolverTypeWrapper<InvoiceSettings3>;
  LineItems3: ResolverTypeWrapper<LineItems3>;
  Object65: Object65;
  Status40: Status40;
  QuotesResourceStatusTransitions: ResolverTypeWrapper<QuotesResourceStatusTransitions>;
  QuotesResourceSubscriptionData: ResolverTypeWrapper<QuotesResourceSubscriptionData>;
  TransferData12: ResolverTypeWrapper<TransferData12>;
  Status63: Status63;
  QuotesResourceListLineItems2: ResolverTypeWrapper<QuotesResourceListLineItems2>;
  RadarEarlyFraudWarningList: ResolverTypeWrapper<RadarEarlyFraudWarningList>;
  RadarEarlyFraudWarning: ResolverTypeWrapper<RadarEarlyFraudWarning>;
  Object66: Object66;
  V1RadarValueListItems2: ResolverTypeWrapper<V1RadarValueListItems2>;
  RadarValueListItem: ResolverTypeWrapper<RadarValueListItem>;
  Object67: Object67;
  V1RadarValueLists2: ResolverTypeWrapper<V1RadarValueLists2>;
  RadarValueList: ResolverTypeWrapper<RadarValueList>;
  ItemType: ItemType;
  ListItems: ResolverTypeWrapper<ListItems>;
  Object68: Object68;
  V1Recipients2: ResolverTypeWrapper<V1Recipients2>;
  Recipient10: ResolverTypeWrapper<Recipient10>;
  ActiveAccount: ResolverTypeWrapper<ActiveAccount>;
  Cards: ResolverTypeWrapper<Cards>;
  Object69: Object69;
  Type74: Type74;
  V1Recipient2: ResolverTypeWrapper<V1Recipient2>;
  V1Refunds2: ResolverTypeWrapper<V1Refunds2>;
  V1ReportingReportRuns2: ResolverTypeWrapper<V1ReportingReportRuns2>;
  ReportingReportRun: ResolverTypeWrapper<ReportingReportRun>;
  Object70: Object70;
  FinancialReportingFinanceReportRunRunParameters: ResolverTypeWrapper<FinancialReportingFinanceReportRunRunParameters>;
  Result2: ResolverTypeWrapper<Result2>;
  FinancialReportingFinanceReportTypeList: ResolverTypeWrapper<FinancialReportingFinanceReportTypeList>;
  ReportingReportType: ResolverTypeWrapper<ReportingReportType>;
  Object71: Object71;
  V1Reviews2: ResolverTypeWrapper<V1Reviews2>;
  Review3: ResolverTypeWrapper<Review3>;
  ClosedReason: ClosedReason;
  IpAddressLocation: ResolverTypeWrapper<IpAddressLocation>;
  Object72: Object72;
  OpenedReason: OpenedReason;
  Session: ResolverTypeWrapper<Session>;
  PaymentFlowsSetupIntentSetupAttemptList: ResolverTypeWrapper<PaymentFlowsSetupIntentSetupAttemptList>;
  SetupAttempt3: ResolverTypeWrapper<SetupAttempt3>;
  Object73: Object73;
  SetupAttemptPaymentMethodDetails: ResolverTypeWrapper<SetupAttemptPaymentMethodDetails>;
  SetupAttemptPaymentMethodDetailsBancontact: ResolverTypeWrapper<SetupAttemptPaymentMethodDetailsBancontact>;
  SetupAttemptPaymentMethodDetailsCard: ResolverTypeWrapper<SetupAttemptPaymentMethodDetailsCard>;
  ThreeDSecure6: ResolverTypeWrapper<ThreeDSecure6>;
  SetupAttemptPaymentMethodDetailsCardPresent: ResolverTypeWrapper<SetupAttemptPaymentMethodDetailsCardPresent>;
  SetupAttemptPaymentMethodDetailsIdeal: ResolverTypeWrapper<SetupAttemptPaymentMethodDetailsIdeal>;
  SetupAttemptPaymentMethodDetailsSofort: ResolverTypeWrapper<SetupAttemptPaymentMethodDetailsSofort>;
  PreferredLanguage7: PreferredLanguage7;
  SetupError: ResolverTypeWrapper<SetupError>;
  PaymentFlowsSetupIntentList: ResolverTypeWrapper<PaymentFlowsSetupIntentList>;
  V1SigmaScheduledQueryRuns2: ResolverTypeWrapper<V1SigmaScheduledQueryRuns2>;
  ScheduledQueryRun: ResolverTypeWrapper<ScheduledQueryRun>;
  SigmaScheduledQueryRunError: ResolverTypeWrapper<SigmaScheduledQueryRunError>;
  File4: ResolverTypeWrapper<File4>;
  Object74: Object74;
  V1Skus2: ResolverTypeWrapper<V1Skus2>;
  Sku: ResolverTypeWrapper<Sku>;
  SkuInventory: ResolverTypeWrapper<SkuInventory>;
  Object75: Object75;
  PackageDimensions3: ResolverTypeWrapper<PackageDimensions3>;
  V1Skus4: ResolverTypeWrapper<V1Skus4>;
  Inventory2: ResolverTypeWrapper<Inventory2>;
  Source12: ResolverTypeWrapper<Source12>;
  SourceTypeAchCreditTransfer: ResolverTypeWrapper<SourceTypeAchCreditTransfer>;
  SourceTypeAchDebit: ResolverTypeWrapper<SourceTypeAchDebit>;
  SourceTypeAcssDebit: ResolverTypeWrapper<SourceTypeAcssDebit>;
  SourceTypeAlipay: ResolverTypeWrapper<SourceTypeAlipay>;
  SourceTypeAuBecsDebit: ResolverTypeWrapper<SourceTypeAuBecsDebit>;
  SourceTypeBancontact: ResolverTypeWrapper<SourceTypeBancontact>;
  SourceTypeCard: ResolverTypeWrapper<SourceTypeCard>;
  SourceTypeCardPresent: ResolverTypeWrapper<SourceTypeCardPresent>;
  SourceCodeVerificationFlow: ResolverTypeWrapper<SourceCodeVerificationFlow>;
  SourceTypeEps: ResolverTypeWrapper<SourceTypeEps>;
  SourceTypeGiropay: ResolverTypeWrapper<SourceTypeGiropay>;
  SourceTypeIdeal: ResolverTypeWrapper<SourceTypeIdeal>;
  SourceTypeKlarna: ResolverTypeWrapper<SourceTypeKlarna>;
  SourceTypeMultibanco: ResolverTypeWrapper<SourceTypeMultibanco>;
  Object76: Object76;
  SourceTypeP24: ResolverTypeWrapper<SourceTypeP24>;
  SourceReceiverFlow: ResolverTypeWrapper<SourceReceiverFlow>;
  SourceRedirectFlow: ResolverTypeWrapper<SourceRedirectFlow>;
  SourceTypeSepaDebit: ResolverTypeWrapper<SourceTypeSepaDebit>;
  SourceTypeSofort: ResolverTypeWrapper<SourceTypeSofort>;
  SourceTypeThreeDSecure: ResolverTypeWrapper<SourceTypeThreeDSecure>;
  SourceTypeWechat: ResolverTypeWrapper<SourceTypeWechat>;
  SourceMandateNotification: ResolverTypeWrapper<SourceMandateNotification>;
  SourceMandateNotificationAcssDebitData: ResolverTypeWrapper<SourceMandateNotificationAcssDebitData>;
  SourceMandateNotificationBacsDebitData: ResolverTypeWrapper<SourceMandateNotificationBacsDebitData>;
  Object77: Object77;
  SourceMandateNotificationSepaDebitData: ResolverTypeWrapper<SourceMandateNotificationSepaDebitData>;
  ApmsSourcesSourceTransactionList: ResolverTypeWrapper<ApmsSourcesSourceTransactionList>;
  SourceTransaction: ResolverTypeWrapper<SourceTransaction>;
  SourceTransactionAchCreditTransferData: ResolverTypeWrapper<SourceTransactionAchCreditTransferData>;
  SourceTransactionChfCreditTransferData: ResolverTypeWrapper<SourceTransactionChfCreditTransferData>;
  SourceTransactionGbpCreditTransferData: ResolverTypeWrapper<SourceTransactionGbpCreditTransferData>;
  Object78: Object78;
  SourceTransactionPaperCheckData: ResolverTypeWrapper<SourceTransactionPaperCheckData>;
  SourceTransactionSepaCreditTransferData: ResolverTypeWrapper<SourceTransactionSepaCreditTransferData>;
  Type63: Type63;
  V1SubscriptionItems2: ResolverTypeWrapper<V1SubscriptionItems2>;
  V1SubscriptionItemUsageRecordSummaries2: ResolverTypeWrapper<V1SubscriptionItemUsageRecordSummaries2>;
  UsageRecordSummary: ResolverTypeWrapper<UsageRecordSummary>;
  Object79: Object79;
  Period2: ResolverTypeWrapper<Period2>;
  V1SubscriptionSchedules2: ResolverTypeWrapper<V1SubscriptionSchedules2>;
  SubscriptionSchedule2: ResolverTypeWrapper<SubscriptionSchedule2>;
  CurrentPhase: ResolverTypeWrapper<CurrentPhase>;
  SubscriptionSchedulesResourceDefaultSettings: ResolverTypeWrapper<SubscriptionSchedulesResourceDefaultSettings>;
  SubscriptionSchedulesResourceDefaultSettingsAutomaticTax: ResolverTypeWrapper<SubscriptionSchedulesResourceDefaultSettingsAutomaticTax>;
  BillingCycleAnchor5: BillingCycleAnchor5;
  CollectionMethod8: CollectionMethod8;
  InvoiceSettings4: ResolverTypeWrapper<InvoiceSettings4>;
  TransferData15: ResolverTypeWrapper<TransferData15>;
  EndBehavior: EndBehavior;
  Object81: Object81;
  SubscriptionSchedulePhaseConfiguration: ResolverTypeWrapper<SubscriptionSchedulePhaseConfiguration>;
  SubscriptionScheduleAddInvoiceItem: ResolverTypeWrapper<SubscriptionScheduleAddInvoiceItem>;
  SchedulesPhaseAutomaticTax: ResolverTypeWrapper<SchedulesPhaseAutomaticTax>;
  BillingCycleAnchor6: BillingCycleAnchor6;
  InvoiceSettings5: ResolverTypeWrapper<InvoiceSettings5>;
  SubscriptionScheduleConfigurationItem: ResolverTypeWrapper<SubscriptionScheduleConfigurationItem>;
  ProrationBehavior6: ProrationBehavior6;
  Status51: Status51;
  V1Subscriptions2: ResolverTypeWrapper<V1Subscriptions2>;
  Status64: Status64;
  TaxProductResourceTaxCodeList: ResolverTypeWrapper<TaxProductResourceTaxCodeList>;
  TaxCode6: ResolverTypeWrapper<TaxCode6>;
  Object82: Object82;
  V1TaxRates2: ResolverTypeWrapper<V1TaxRates2>;
  TerminalLocationLocationList: ResolverTypeWrapper<TerminalLocationLocationList>;
  TerminalLocation: ResolverTypeWrapper<TerminalLocation>;
  Object84: Object84;
  TerminalReaderRetrieveReader: ResolverTypeWrapper<TerminalReaderRetrieveReader>;
  TerminalReader: ResolverTypeWrapper<TerminalReader>;
  DeviceType: DeviceType;
  Object85: Object85;
  DeviceType2: DeviceType2;
  Status65: Status65;
  Token3: ResolverTypeWrapper<Token3>;
  Object86: Object86;
  TopupList: ResolverTypeWrapper<TopupList>;
  Topup: ResolverTypeWrapper<Topup>;
  Object87: Object87;
  Status53: Status53;
  Status66: Status66;
  TransferList: ResolverTypeWrapper<TransferList>;
  Transfer2: ResolverTypeWrapper<Transfer2>;
  Object88: Object88;
  Reversals: ResolverTypeWrapper<Reversals>;
  TransferReversal2: ResolverTypeWrapper<TransferReversal2>;
  Object89: Object89;
  TransferReversalList: ResolverTypeWrapper<TransferReversalList>;
  V1WebhookEndpoints2: ResolverTypeWrapper<V1WebhookEndpoints2>;
  WebhookEndpoint: ResolverTypeWrapper<WebhookEndpoint>;
  Object90: Object90;
  DeletedAccount: ResolverTypeWrapper<DeletedAccount>;
  V1AccountInput: V1AccountInput;
  DeletedExternalAccount: ResolverTypeWrapper<DeletedExternalAccount>;
  DeletedPerson: ResolverTypeWrapper<DeletedPerson>;
  DeletedApplePayDomain: ResolverTypeWrapper<DeletedApplePayDomain>;
  DeletedCoupon: ResolverTypeWrapper<DeletedCoupon>;
  DeletedCustomer: ResolverTypeWrapper<DeletedCustomer>;
  V1CustomerBankAccountInput: V1CustomerBankAccountInput;
  V1CustomerCardInput: V1CustomerCardInput;
  DeletedDiscount: ResolverTypeWrapper<DeletedDiscount>;
  V1CustomerSourceInput: V1CustomerSourceInput;
  V1CustomerSubscriptionInput: V1CustomerSubscriptionInput;
  DeletedTaxId: ResolverTypeWrapper<DeletedTaxId>;
  EphemeralKey: ResolverTypeWrapper<EphemeralKey>;
  Object36: Object36;
  V1EphemeralKeyInput: V1EphemeralKeyInput;
  DeletedInvoiceitem: ResolverTypeWrapper<DeletedInvoiceitem>;
  DeletedInvoice: ResolverTypeWrapper<DeletedInvoice>;
  DeletedPlan: ResolverTypeWrapper<DeletedPlan>;
  DeletedProduct: ResolverTypeWrapper<DeletedProduct>;
  DeletedRadarValueListItem: ResolverTypeWrapper<DeletedRadarValueListItem>;
  DeletedRadarValueList: ResolverTypeWrapper<DeletedRadarValueList>;
  DeletedRecipient: ResolverTypeWrapper<DeletedRecipient>;
  DeletedSku: ResolverTypeWrapper<DeletedSku>;
  DeletedSubscriptionItem: ResolverTypeWrapper<DeletedSubscriptionItem>;
  V1SubscriptionItems4Input: V1SubscriptionItems4Input;
  ProrationBehavior5: ProrationBehavior5;
  V1SubscriptionInput: V1SubscriptionInput;
  DeletedTerminalLocation: ResolverTypeWrapper<DeletedTerminalLocation>;
  DeletedTerminalReader: ResolverTypeWrapper<DeletedTerminalReader>;
  DeletedWebhookEndpoint: ResolverTypeWrapper<DeletedWebhookEndpoint>;
  V13dSecureInput: V13dSecureInput;
  V1Account3Input: V1Account3Input;
  BusinessProfileSpecsInput: BusinessProfileSpecsInput;
  AddressSpecsInput: AddressSpecsInput;
  BusinessType2: BusinessType2;
  CapabilitiesInput: CapabilitiesInput;
  CapabilityParamInput: CapabilityParamInput;
  AfterpayClearpayPayments2Input: AfterpayClearpayPayments2Input;
  AuBecsDebitPayments2Input: AuBecsDebitPayments2Input;
  BacsDebitPayments3Input: BacsDebitPayments3Input;
  BancontactPayments2Input: BancontactPayments2Input;
  BoletoPayments2Input: BoletoPayments2Input;
  CardIssuing3Input: CardIssuing3Input;
  CardPayments3Input: CardPayments3Input;
  CartesBancairesPayments2Input: CartesBancairesPayments2Input;
  EpsPayments2Input: EpsPayments2Input;
  FpxPayments2Input: FpxPayments2Input;
  GiropayPayments2Input: GiropayPayments2Input;
  GrabpayPayments2Input: GrabpayPayments2Input;
  IdealPayments2Input: IdealPayments2Input;
  JcbPayments2Input: JcbPayments2Input;
  LegacyPayments2Input: LegacyPayments2Input;
  OxxoPayments2Input: OxxoPayments2Input;
  P24Payments2Input: P24Payments2Input;
  SepaDebitPayments3Input: SepaDebitPayments3Input;
  SofortPayments2Input: SofortPayments2Input;
  TaxReportingUs1099K2Input: TaxReportingUs1099K2Input;
  TaxReportingUs1099Misc2Input: TaxReportingUs1099Misc2Input;
  Transfers2Input: Transfers2Input;
  CompanyInput: CompanyInput;
  Address2Input: Address2Input;
  JapanAddressKanaSpecsInput: JapanAddressKanaSpecsInput;
  JapanAddressKanjiSpecsInput: JapanAddressKanjiSpecsInput;
  Structure2: Structure2;
  VerificationSpecsInput: VerificationSpecsInput;
  VerificationDocumentSpecsInput: VerificationDocumentSpecsInput;
  DocumentsInput: DocumentsInput;
  BankAccountOwnershipVerificationInput: BankAccountOwnershipVerificationInput;
  CompanyLicenseInput: CompanyLicenseInput;
  CompanyMemorandumOfAssociationInput: CompanyMemorandumOfAssociationInput;
  CompanyMinisterialDecreeInput: CompanyMinisterialDecreeInput;
  CompanyRegistrationVerificationInput: CompanyRegistrationVerificationInput;
  CompanyTaxIdVerificationInput: CompanyTaxIdVerificationInput;
  IndividualInput: IndividualInput;
  PoliticalExposure2: PoliticalExposure2;
  PersonVerificationSpecsInput: PersonVerificationSpecsInput;
  PersonVerificationDocumentSpecsInput: PersonVerificationDocumentSpecsInput;
  Document2Input: Document2Input;
  SettingsSpecsUpdateInput: SettingsSpecsUpdateInput;
  BrandingSettingsSpecsInput: BrandingSettingsSpecsInput;
  CardIssuingSettingsSpecsInput: CardIssuingSettingsSpecsInput;
  TosAcceptanceInput: TosAcceptanceInput;
  CardPaymentsSettingsSpecsInput: CardPaymentsSettingsSpecsInput;
  DeclineOnInput: DeclineOnInput;
  PaymentsSettingsSpecsInput: PaymentsSettingsSpecsInput;
  PayoutSettingsSpecsInput: PayoutSettingsSpecsInput;
  ScheduleInput: ScheduleInput;
  Interval2: Interval2;
  WeeklyAnchor2: WeeklyAnchor2;
  TosAcceptanceSpecsInput: TosAcceptanceSpecsInput;
  V1AccountBankAccountsInput: V1AccountBankAccountsInput;
  V1AccountBankAccount2Input: V1AccountBankAccount2Input;
  AccountHolderType3: AccountHolderType3;
  AccountType3: AccountType3;
  V1AccountCapability2Input: V1AccountCapability2Input;
  V1AccountExternalAccounts2Input: V1AccountExternalAccounts2Input;
  V1AccountExternalAccount2Input: V1AccountExternalAccount2Input;
  AccountLink: ResolverTypeWrapper<AccountLink>;
  Object8: Object8;
  V1AccountLinksInput: V1AccountLinksInput;
  Collect: Collect;
  Type3: Type3;
  LoginLink: ResolverTypeWrapper<LoginLink>;
  Object7: Object7;
  V1AccountLoginLinksInput: V1AccountLoginLinksInput;
  V1AccountPeople3Input: V1AccountPeople3Input;
  Address3Input: Address3Input;
  AddressKana3Input: AddressKana3Input;
  AddressKanji3Input: AddressKanji3Input;
  PersonDocumentsSpecsInput: PersonDocumentsSpecsInput;
  CompanyAuthorizationInput: CompanyAuthorizationInput;
  PassportInput: PassportInput;
  VisaInput: VisaInput;
  RelationshipInput: RelationshipInput;
  Verification2Input: Verification2Input;
  V1AccountPerson2Input: V1AccountPerson2Input;
  V1AccountPersons3Input: V1AccountPersons3Input;
  V1Accounts3Input: V1Accounts3Input;
  SettingsSpecsInput: SettingsSpecsInput;
  Type4: Type4;
  V1AccountLoginLinks2Input: V1AccountLoginLinks2Input;
  V1AccountPeople4Input: V1AccountPeople4Input;
  V1AccountPerson3Input: V1AccountPerson3Input;
  V1AccountPersons4Input: V1AccountPersons4Input;
  V1AccountRejectInput: V1AccountRejectInput;
  V1ApplePayDomains2Input: V1ApplePayDomains2Input;
  V1ApplicationFeesRefund2Input: V1ApplicationFeesRefund2Input;
  V1ApplicationFeeRefundInput: V1ApplicationFeeRefundInput;
  V1ApplicationFeeRefunds2Input: V1ApplicationFeeRefunds2Input;
  V1BillingPortalConfigurations3Input: V1BillingPortalConfigurations3Input;
  BusinessProfileCreateParamInput: BusinessProfileCreateParamInput;
  FeaturesInput: FeaturesInput;
  CustomerUpdateInput: CustomerUpdateInput;
  InvoiceHistoryInput: InvoiceHistoryInput;
  PaymentMethodUpdateInput: PaymentMethodUpdateInput;
  SubscriptionCancelInput: SubscriptionCancelInput;
  Mode2: Mode2;
  ProrationBehavior3: ProrationBehavior3;
  SubscriptionPauseInput: SubscriptionPauseInput;
  SubscriptionUpdateInput: SubscriptionUpdateInput;
  V1BillingPortalConfiguration2Input: V1BillingPortalConfiguration2Input;
  BusinessProfileUpdateParamInput: BusinessProfileUpdateParamInput;
  FeaturesUpdatingParamInput: FeaturesUpdatingParamInput;
  CustomerUpdateUpdatingParamInput: CustomerUpdateUpdatingParamInput;
  SubscriptionCancelUpdatingParamInput: SubscriptionCancelUpdatingParamInput;
  SubscriptionUpdateUpdatingParamInput: SubscriptionUpdateUpdatingParamInput;
  BillingPortalSession: ResolverTypeWrapper<BillingPortalSession>;
  Object15: Object15;
  V1BillingPortalSessionsInput: V1BillingPortalSessionsInput;
  V1Charges3Input: V1Charges3Input;
  OptionalFieldsShippingInput: OptionalFieldsShippingInput;
  OptionalFieldsAddressInput: OptionalFieldsAddressInput;
  TransferDataSpecsInput: TransferDataSpecsInput;
  V1Charge2Input: V1Charge2Input;
  FraudDetails2Input: FraudDetails2Input;
  UserReport2: UserReport2;
  V1ChargeCaptureInput: V1ChargeCaptureInput;
  TransferData2Input: TransferData2Input;
  V1ChargeDispute2Input: V1ChargeDispute2Input;
  EvidenceInput: EvidenceInput;
  V1ChargeDisputeCloseInput: V1ChargeDisputeCloseInput;
  V1ChargeRefundInput: V1ChargeRefundInput;
  Reason6: Reason6;
  V1ChargeRefunds2Input: V1ChargeRefunds2Input;
  V1ChargeRefund3Input: V1ChargeRefund3Input;
  V1CheckoutSessions2Input: V1CheckoutSessions2Input;
  AutomaticTaxInput: AutomaticTaxInput;
  BillingAddressCollection2: BillingAddressCollection2;
  CustomerUpdateParamsInput: CustomerUpdateParamsInput;
  Address5: Address5;
  Name17: Name17;
  Shipping3: Shipping3;
  Discounts3ListItemInput: Discounts3ListItemInput;
  LineItems2ListItemInput: LineItems2ListItemInput;
  AdjustableQuantityInput: AdjustableQuantityInput;
  PriceDataInput: PriceDataInput;
  ProductDataInput: ProductDataInput;
  Locale2: Locale2;
  Mode4: Mode4;
  PaymentIntentDataInput: PaymentIntentDataInput;
  CaptureMethod: CaptureMethod;
  SetupFutureUsage: SetupFutureUsage;
  Shipping4Input: Shipping4Input;
  Address6Input: Address6Input;
  TransferDataParamsInput: TransferDataParamsInput;
  PaymentMethodOptionsParamInput: PaymentMethodOptionsParamInput;
  AcssDebit3Input: AcssDebit3Input;
  Currency24: Currency24;
  MandateOptionsInput: MandateOptionsInput;
  PaymentSchedule2: PaymentSchedule2;
  TransactionType2: TransactionType2;
  VerificationMethod2: VerificationMethod2;
  Boleto3Input: Boleto3Input;
  Oxxo3Input: Oxxo3Input;
  WechatPay2Input: WechatPay2Input;
  Client: Client;
  PaymentMethodTypes2ListItem: PaymentMethodTypes2ListItem;
  SetupIntentDataInput: SetupIntentDataInput;
  ShippingAddressCollectionParamsInput: ShippingAddressCollectionParamsInput;
  AllowedCountries2ListItem: AllowedCountries2ListItem;
  SubmitType2: SubmitType2;
  SubscriptionDataInput: SubscriptionDataInput;
  ItemsListItemInput: ItemsListItemInput;
  TransferData3Input: TransferData3Input;
  TaxIdCollectionInput: TaxIdCollectionInput;
  V1Coupons3Input: V1Coupons3Input;
  AppliesToInput: AppliesToInput;
  Duration2: Duration2;
  V1Coupon2Input: V1Coupon2Input;
  V1CreditNotes2Input: V1CreditNotes2Input;
  Lines2ListItemInput: Lines2ListItemInput;
  Reason8: Reason8;
  V1CreditNote2Input: V1CreditNote2Input;
  V1CreditNoteVoidInput: V1CreditNoteVoidInput;
  V1Customers3Input: V1Customers3Input;
  InvoiceSettingsInput: InvoiceSettingsInput;
  TaxInput: TaxInput;
  TaxExempt3: TaxExempt3;
  TaxIdDataListItemInput: TaxIdDataListItemInput;
  V1Customer3Input: V1Customer3Input;
  V1CustomerBalanceTransactions2Input: V1CustomerBalanceTransactions2Input;
  V1CustomerBalanceTransactions3Input: V1CustomerBalanceTransactions3Input;
  V1CustomerBankAccounts2Input: V1CustomerBankAccounts2Input;
  V1CustomerBankAccount5: ResolverTypeWrapper<V1CustomerBankAccount5>;
  V1CustomerBankAccount4Input: V1CustomerBankAccount4Input;
  AccountHolderType8: AccountHolderType8;
  Owner4Input: Owner4Input;
  SourceAddressInput: SourceAddressInput;
  V1CustomerBankAccountVerifyInput: V1CustomerBankAccountVerifyInput;
  V1CustomerCards2Input: V1CustomerCards2Input;
  V1CustomerCard5: ResolverTypeWrapper<V1CustomerCard5>;
  V1CustomerCard4Input: V1CustomerCard4Input;
  V1CustomerSources2Input: V1CustomerSources2Input;
  V1CustomerSource5: ResolverTypeWrapper<V1CustomerSource5>;
  V1CustomerSource4Input: V1CustomerSource4Input;
  V1CustomerSourceVerifyInput: V1CustomerSourceVerifyInput;
  V1CustomerSubscriptions2Input: V1CustomerSubscriptions2Input;
  AddInvoiceItemsListItemInput: AddInvoiceItemsListItemInput;
  AutomaticTaxConfigInput: AutomaticTaxConfigInput;
  CollectionMethod2: CollectionMethod2;
  Items3ListItemInput: Items3ListItemInput;
  PaymentBehavior: PaymentBehavior;
  PaymentSettings2Input: PaymentSettings2Input;
  PaymentMethodOptions3Input: PaymentMethodOptions3Input;
  ProrationBehavior4: ProrationBehavior4;
  TransferData5Input: TransferData5Input;
  V1CustomerSubscription3Input: V1CustomerSubscription3Input;
  BillingCycleAnchor4: BillingCycleAnchor4;
  Items4ListItemInput: Items4ListItemInput;
  PaymentBehavior2: PaymentBehavior2;
  V1CustomerTaxIds2Input: V1CustomerTaxIds2Input;
  Type22: Type22;
  V1Dispute2Input: V1Dispute2Input;
  V1DisputeCloseInput: V1DisputeCloseInput;
  V1EphemeralKeysInput: V1EphemeralKeysInput;
  V1FileLinks3Input: V1FileLinks3Input;
  V1FileLinks4Input: V1FileLinks4Input;
  V1IdentityVerificationSessions3Input: V1IdentityVerificationSessions3Input;
  OptionsInput: OptionsInput;
  V1IdentityVerificationSessions4Input: V1IdentityVerificationSessions4Input;
  V1IdentityVerificationSessionsCancelInput: V1IdentityVerificationSessionsCancelInput;
  V1IdentityVerificationSessionsRedactInput: V1IdentityVerificationSessionsRedactInput;
  V1Invoiceitems3Input: V1Invoiceitems3Input;
  PeriodInput: PeriodInput;
  PriceData2Input: PriceData2Input;
  V1Invoiceitem2Input: V1Invoiceitem2Input;
  V1Invoices2Input: V1Invoices2Input;
  AutomaticTaxParamInput: AutomaticTaxParamInput;
  CollectionMethod4: CollectionMethod4;
  PaymentSettings3Input: PaymentSettings3Input;
  TransferData9Input: TransferData9Input;
  V1Invoice2Input: V1Invoice2Input;
  CollectionMethod5: CollectionMethod5;
  V1InvoiceFinalizeInput: V1InvoiceFinalizeInput;
  V1InvoiceMarkUncollectibleInput: V1InvoiceMarkUncollectibleInput;
  V1InvoicePayInput: V1InvoicePayInput;
  V1InvoiceSendInput: V1InvoiceSendInput;
  V1InvoiceVoidInput: V1InvoiceVoidInput;
  V1IssuingAuthorization2Input: V1IssuingAuthorization2Input;
  V1IssuingAuthorizationApproveInput: V1IssuingAuthorizationApproveInput;
  V1IssuingAuthorizationDeclineInput: V1IssuingAuthorizationDeclineInput;
  V1IssuingCardholders3Input: V1IssuingCardholders3Input;
  BillingInput: BillingInput;
  RequiredAddressInput: RequiredAddressInput;
  CompanyParamInput: CompanyParamInput;
  IndividualParamInput: IndividualParamInput;
  DateOfBirthSpecsInput: DateOfBirthSpecsInput;
  PersonVerificationParamInput: PersonVerificationParamInput;
  PersonVerificationDocumentParamInput: PersonVerificationDocumentParamInput;
  AuthorizationControlsParamV2Input: AuthorizationControlsParamV2Input;
  AllowedCategories2ListItem: AllowedCategories2ListItem;
  BlockedCategories2ListItem: BlockedCategories2ListItem;
  SpendingLimits3ListItemInput: SpendingLimits3ListItemInput;
  Categories2ListItem: Categories2ListItem;
  Interval8: Interval8;
  Status30: Status30;
  V1IssuingCardholder2Input: V1IssuingCardholder2Input;
  Status31: Status31;
  V1IssuingCards3Input: V1IssuingCards3Input;
  ReplacementReason2: ReplacementReason2;
  ShippingSpecsInput: ShippingSpecsInput;
  Service2: Service2;
  Type39: Type39;
  AuthorizationControlsParamInput: AuthorizationControlsParamInput;
  Status32: Status32;
  Type40: Type40;
  V1IssuingCard2Input: V1IssuingCard2Input;
  CancellationReason4: CancellationReason4;
  Status33: Status33;
  V1IssuingDisputes2Input: V1IssuingDisputes2Input;
  EvidenceParamInput: EvidenceParamInput;
  Reason15: Reason15;
  V1IssuingDispute2Input: V1IssuingDispute2Input;
  V1IssuingDisputeSubmitInput: V1IssuingDisputeSubmitInput;
  V1IssuingSettlement2Input: V1IssuingSettlement2Input;
  V1IssuingTransaction2Input: V1IssuingTransaction2Input;
  V1Orders3Input: V1Orders3Input;
  Items7ListItemInput: Items7ListItemInput;
  Type46: Type46;
  Shipping12Input: Shipping12Input;
  V1Order2Input: V1Order2Input;
  ShippingTrackingParamsInput: ShippingTrackingParamsInput;
  Status37: Status37;
  V1OrderPayInput: V1OrderPayInput;
  V1OrderReturns3Input: V1OrderReturns3Input;
  V1PaymentIntents2Input: V1PaymentIntents2Input;
  MandateDataInput: MandateDataInput;
  CustomerAcceptanceParamInput: CustomerAcceptanceParamInput;
  OnlineInput: OnlineInput;
  Type47: Type47;
  PaymentMethodDataInput: PaymentMethodDataInput;
  PaymentMethodParamInput: PaymentMethodParamInput;
  AuBecsDebit3Input: AuBecsDebit3Input;
  BacsDebit2Input: BacsDebit2Input;
  BillingDetailsInnerParamsInput: BillingDetailsInnerParamsInput;
  Boleto4Input: Boleto4Input;
  Eps3Input: Eps3Input;
  Bank9: Bank9;
  Fpx3Input: Fpx3Input;
  Bank10: Bank10;
  Ideal4Input: Ideal4Input;
  Bank11: Bank11;
  P244Input: P244Input;
  Bank12: Bank12;
  SepaDebit5Input: SepaDebit5Input;
  Sofort4Input: Sofort4Input;
  Country51: Country51;
  Type48: Type48;
  PaymentMethodOptions7Input: PaymentMethodOptions7Input;
  SetupFutureUsage3: SetupFutureUsage3;
  Shipping13Input: Shipping13Input;
  TransferDataCreationParamsInput: TransferDataCreationParamsInput;
  V1PaymentIntents3Input: V1PaymentIntents3Input;
  SetupFutureUsage4: SetupFutureUsage4;
  TransferDataUpdateParamsInput: TransferDataUpdateParamsInput;
  V1PaymentIntentsCancelInput: V1PaymentIntentsCancelInput;
  CancellationReason7: CancellationReason7;
  V1PaymentIntentsCaptureInput: V1PaymentIntentsCaptureInput;
  TransferData11Input: TransferData11Input;
  V1PaymentIntentsConfirmInput: V1PaymentIntentsConfirmInput;
  MandateData2Input: MandateData2Input;
  V1PaymentMethods2Input: V1PaymentMethods2Input;
  AcssDebit8Input: AcssDebit8Input;
  AuBecsDebit4Input: AuBecsDebit4Input;
  BacsDebit3Input: BacsDebit3Input;
  BillingDetails2Input: BillingDetails2Input;
  Boleto6Input: Boleto6Input;
  Card19Input: Card19Input;
  Eps4Input: Eps4Input;
  Fpx4Input: Fpx4Input;
  Ideal6Input: Ideal6Input;
  P246Input: P246Input;
  SepaDebit7Input: SepaDebit7Input;
  Sofort6Input: Sofort6Input;
  Type49: Type49;
  V1PaymentMethod2Input: V1PaymentMethod2Input;
  UpdateApiParamInput: UpdateApiParamInput;
  V1PaymentMethodAttachInput: V1PaymentMethodAttachInput;
  V1PaymentMethodDetachInput: V1PaymentMethodDetachInput;
  V1Payouts2Input: V1Payouts2Input;
  Method2: Method2;
  SourceType2: SourceType2;
  V1Payout2Input: V1Payout2Input;
  V1PayoutCancelInput: V1PayoutCancelInput;
  V1PayoutReverseInput: V1PayoutReverseInput;
  V1Plans2Input: V1Plans2Input;
  AggregateUsage3: AggregateUsage3;
  Interval9: Interval9;
  Tiers3ListItemInput: Tiers3ListItemInput;
  TiersMode2: TiersMode2;
  TransformUsageParamInput: TransformUsageParamInput;
  Round2: Round2;
  V1Plan2Input: V1Plan2Input;
  V1Prices2Input: V1Prices2Input;
  InlineProductParamsInput: InlineProductParamsInput;
  Recurring2Input: Recurring2Input;
  AggregateUsage4: AggregateUsage4;
  TaxBehavior3: TaxBehavior3;
  TransformQuantity2Input: TransformQuantity2Input;
  V1Price2Input: V1Price2Input;
  V1Products3Input: V1Products3Input;
  PackageDimensionsSpecsInput: PackageDimensionsSpecsInput;
  V1Product2Input: V1Product2Input;
  V1PromotionCodes3Input: V1PromotionCodes3Input;
  RestrictionsInput: RestrictionsInput;
  V1PromotionCode2Input: V1PromotionCode2Input;
  V1Quotes3Input: V1Quotes3Input;
  AutomaticTax4Input: AutomaticTax4Input;
  CollectionMethod7: CollectionMethod7;
  FromQuoteParamsInput: FromQuoteParamsInput;
  QuoteParamInput: QuoteParamInput;
  LineItems4ListItemInput: LineItems4ListItemInput;
  PriceData3Input: PriceData3Input;
  SubscriptionDataCreateParamsInput: SubscriptionDataCreateParamsInput;
  V1Quote2Input: V1Quote2Input;
  LineItems5ListItemInput: LineItems5ListItemInput;
  SubscriptionDataUpdateParamsInput: SubscriptionDataUpdateParamsInput;
  V1QuoteAcceptInput: V1QuoteAcceptInput;
  V1QuoteCancelInput: V1QuoteCancelInput;
  V1QuoteFinalizeInput: V1QuoteFinalizeInput;
  V1RadarValueListItems3Input: V1RadarValueListItems3Input;
  V1RadarValueLists3Input: V1RadarValueLists3Input;
  ItemType2: ItemType2;
  V1RadarValueList2Input: V1RadarValueList2Input;
  V1Recipients3Input: V1Recipients3Input;
  V1Recipient3Input: V1Recipient3Input;
  V1Refunds3Input: V1Refunds3Input;
  V1Refund2Input: V1Refund2Input;
  V1ReportingReportRuns3Input: V1ReportingReportRuns3Input;
  ParametersInput: ParametersInput;
  ReportingCategory3: ReportingCategory3;
  Timezone3: Timezone3;
  V1ReviewApproveInput: V1ReviewApproveInput;
  V1SetupIntents2Input: V1SetupIntents2Input;
  SecretKeyParamInput: SecretKeyParamInput;
  PaymentMethodOptions8Input: PaymentMethodOptions8Input;
  SetupIntentPaymentMethodOptionsParamInput: SetupIntentPaymentMethodOptionsParamInput;
  SetupIntentPaymentMethodOptionsMandateOptionsParamInput: SetupIntentPaymentMethodOptionsMandateOptionsParamInput;
  SetupIntentParamInput: SetupIntentParamInput;
  RequestThreeDSecure3: RequestThreeDSecure3;
  SepaDebit8Input: SepaDebit8Input;
  SingleUseInput: SingleUseInput;
  Usage9: Usage9;
  V1SetupIntents3Input: V1SetupIntents3Input;
  V1SetupIntentsCancelInput: V1SetupIntentsCancelInput;
  CancellationReason8: CancellationReason8;
  V1SetupIntentsConfirmInput: V1SetupIntentsConfirmInput;
  V1Skus3Input: V1Skus3Input;
  InventoryInput: InventoryInput;
  Type58: Type58;
  Value10: Value10;
  PackageDimensions4Input: PackageDimensions4Input;
  V1Skus5Input: V1Skus5Input;
  InventoryUpdateSpecsInput: InventoryUpdateSpecsInput;
  V1SourcesInput: V1SourcesInput;
  Flow7: Flow7;
  MandateParamsInput: MandateParamsInput;
  AcceptanceInput: AcceptanceInput;
  MandateOfflineAcceptanceParamsInput: MandateOfflineAcceptanceParamsInput;
  MandateOnlineAcceptanceParamsInput: MandateOnlineAcceptanceParamsInput;
  Status45: Status45;
  Interval10: Interval10;
  NotificationMethod: NotificationMethod;
  Owner5Input: Owner5Input;
  ReceiverParamsInput: ReceiverParamsInput;
  RefundAttributesMethod2: RefundAttributesMethod2;
  RedirectParamsInput: RedirectParamsInput;
  ShallowOrderSpecsInput: ShallowOrderSpecsInput;
  Items9ListItemInput: Items9ListItemInput;
  OrderShippingInput: OrderShippingInput;
  Usage10: Usage10;
  V1Source2Input: V1Source2Input;
  OrderParamsInput: OrderParamsInput;
  V1SourceVerifyInput: V1SourceVerifyInput;
  V1SubscriptionItems3Input: V1SubscriptionItems3Input;
  PriceData4Input: PriceData4Input;
  V1SubscriptionItems5Input: V1SubscriptionItems5Input;
  UsageRecord: ResolverTypeWrapper<UsageRecord>;
  Object80: Object80;
  V1SubscriptionItemUsageRecordsInput: V1SubscriptionItemUsageRecordsInput;
  Action: Action;
  V1SubscriptionSchedules3Input: V1SubscriptionSchedules3Input;
  DefaultSettingsInput: DefaultSettingsInput;
  AutomaticTax5Input: AutomaticTax5Input;
  BillingCycleAnchor7: BillingCycleAnchor7;
  SubscriptionSchedulesParamInput: SubscriptionSchedulesParamInput;
  EndBehavior2: EndBehavior2;
  Phases2ListItemInput: Phases2ListItemInput;
  AddInvoiceItems3ListItemInput: AddInvoiceItems3ListItemInput;
  Items11ListItemInput: Items11ListItemInput;
  V1SubscriptionSchedules4Input: V1SubscriptionSchedules4Input;
  Phases3ListItemInput: Phases3ListItemInput;
  ProrationBehavior7: ProrationBehavior7;
  V1SubscriptionSchedulesCancelInput: V1SubscriptionSchedulesCancelInput;
  V1SubscriptionSchedulesReleaseInput: V1SubscriptionSchedulesReleaseInput;
  V1Subscriptions3Input: V1Subscriptions3Input;
  V1Subscription3Input: V1Subscription3Input;
  V1TaxRates3Input: V1TaxRates3Input;
  TaxType2: TaxType2;
  V1TaxRate2Input: V1TaxRate2Input;
  TerminalConnectionToken: ResolverTypeWrapper<TerminalConnectionToken>;
  Object83: Object83;
  V1TerminalConnectionTokensInput: V1TerminalConnectionTokensInput;
  V1TerminalLocations2Input: V1TerminalLocations2Input;
  CreateLocationAddressParamInput: CreateLocationAddressParamInput;
  V1TerminalLocation2Input: V1TerminalLocation2Input;
  Address17Input: Address17Input;
  V1TerminalReaders2Input: V1TerminalReaders2Input;
  V1TerminalReader2Input: V1TerminalReader2Input;
  V1TokensInput: V1TokensInput;
  ConnectJsAccountTokenSpecsInput: ConnectJsAccountTokenSpecsInput;
  BusinessType3: BusinessType3;
  CompanySpecsInput: CompanySpecsInput;
  IndividualSpecsInput: IndividualSpecsInput;
  TokenCreateBankAccountInput: TokenCreateBankAccountInput;
  AccountHolderType14: AccountHolderType14;
  AccountType14: AccountType14;
  CvcUpdateInput: CvcUpdateInput;
  PersonTokenSpecsInput: PersonTokenSpecsInput;
  Documents2Input: Documents2Input;
  RelationshipSpecsInput: RelationshipSpecsInput;
  PiiInput: PiiInput;
  V1Topups2Input: V1Topups2Input;
  V1Topup2Input: V1Topup2Input;
  V1TopupCancelInput: V1TopupCancelInput;
  V1Transfers2Input: V1Transfers2Input;
  SourceType4: SourceType4;
  V1TransferReversals2Input: V1TransferReversals2Input;
  V1Transfer2Input: V1Transfer2Input;
  V1TransferReversal2Input: V1TransferReversal2Input;
  V1WebhookEndpoints3Input: V1WebhookEndpoints3Input;
  ApiVersion3: ApiVersion3;
  EnabledEvents2ListItem: EnabledEvents2ListItem;
  V1WebhookEndpoint2Input: V1WebhookEndpoint2Input;
}>;

/** Mapping between all available schema types and the resolvers parents */
export type ResolversParentTypes = ResolversObject<{
  Query: {};
  ContinentFilterInput: ContinentFilterInput;
  StringQueryOperatorInput: StringQueryOperatorInput;
  String: Scalars['String'];
  Continent: Continent;
  ID: Scalars['ID'];
  Country: Country;
  Language: Language;
  Boolean: Scalars['Boolean'];
  State: State;
  CountryFilterInput: CountryFilterInput;
  LanguageFilterInput: LanguageFilterInput;
  Upload: Scalars['Upload'];
  Int: Scalars['Int'];
  Mutation: {};
  CurrencyInput: CurrencyInput;
  Cart: Cart;
  Node: ResolversParentTypes['Cart'];
  Currency: Currency;
  CartItem: CartItem;
  Money: Money;
  CustomCartAttribute: CustomCartAttribute;
  Json: Scalars['Json'];
  Date: Scalars['Date'];
  AddToCartInput: AddToCartInput;
  CustomAttributeInput: CustomAttributeInput;
  SetCartItemsInput: SetCartItemsInput;
  SetCartItemInput: SetCartItemInput;
  UpdateCartItemInput: UpdateCartItemInput;
  UpdateItemQuantityInput: UpdateItemQuantityInput;
  RemoveCartItemInput: RemoveCartItemInput;
  EmptyCartInput: EmptyCartInput;
  UpdateCartInput: UpdateCartInput;
  DeleteCartInput: DeleteCartInput;
  DeletePayload: DeletePayload;
  CheckoutInput: CheckoutInput;
  AddressInput: AddressInput;
  Order: Order;
  Address: Address;
  OrderItem: OrderItem;
  CustomAttribute: CustomAttribute;
  ThreeDSecure: ThreeDSecure;
  Card2: Card2;
  JSON: Scalars['JSON'];
  Account3: Account3;
  BusinessProfile: BusinessProfile;
  SupportAddress: SupportAddress;
  AccountCapabilities: AccountCapabilities;
  LegalEntityCompany: LegalEntityCompany;
  AddressKana: AddressKana;
  AddressKanji: AddressKanji;
  Verification: Verification;
  Document: Document;
  AccountController: AccountController;
  ExternalAccounts: ExternalAccounts;
  DataListItem: DataListItem;
  Person: Person;
  AddressKana2: AddressKana2;
  AddressKanji2: AddressKanji2;
  LegalEntityDob: LegalEntityDob;
  PersonRelationship: PersonRelationship;
  Float: Scalars['Float'];
  Requirements: Requirements;
  AccountRequirementsError: AccountRequirementsError;
  LegalEntityPersonVerification: LegalEntityPersonVerification;
  AdditionalDocument: AdditionalDocument;
  LegalEntityPersonVerificationDocument: LegalEntityPersonVerificationDocument;
  AccountRequirements: AccountRequirements;
  Settings: Settings;
  BacsDebitPayments2: BacsDebitPayments2;
  Branding: Branding;
  CardIssuing2: CardIssuing2;
  CardIssuingAccountTermsOfService: CardIssuingAccountTermsOfService;
  CardPayments2: CardPayments2;
  AccountDeclineChargeOn: AccountDeclineChargeOn;
  Dashboard: Dashboard;
  Payments: Payments;
  Payouts: Payouts;
  TransferSchedule: TransferSchedule;
  SepaDebitPayments2: SepaDebitPayments2;
  AccountTosAcceptance: AccountTosAcceptance;
  Polymorphic: Polymorphic;
  ListAccountCapability: ListAccountCapability;
  Capability: Capability;
  AccountCapabilityRequirements: AccountCapabilityRequirements;
  ExternalAccountList: ExternalAccountList;
  V1AccountPeople2: V1AccountPeople2;
  Relationship2Input: Relationship2Input;
  V1AccountPersons2: V1AccountPersons2;
  V1Accounts2: V1Accounts2;
  ApplePayDomainList: ApplePayDomainList;
  ApplePayDomain: ApplePayDomain;
  V1ApplicationFees2: V1ApplicationFees2;
  ApplicationFee: ApplicationFee;
  Refunds: Refunds;
  FeeRefund: FeeRefund;
  FeeRefundList: FeeRefundList;
  Balance: Balance;
  BalanceAmount: BalanceAmount;
  BalanceAmountBySourceType: BalanceAmountBySourceType;
  BalanceDetail: BalanceDetail;
  BalanceTransactionsList: BalanceTransactionsList;
  BalanceTransaction3: BalanceTransaction3;
  Fee3: Fee3;
  V1BillingPortalConfigurations2: V1BillingPortalConfigurations2;
  BillingPortalConfiguration: BillingPortalConfiguration;
  PortalBusinessProfile: PortalBusinessProfile;
  PortalFeatures: PortalFeatures;
  PortalCustomerUpdate: PortalCustomerUpdate;
  PortalInvoiceList: PortalInvoiceList;
  PortalPaymentMethodUpdate: PortalPaymentMethodUpdate;
  PortalSubscriptionCancel: PortalSubscriptionCancel;
  PortalSubscriptionPause: PortalSubscriptionPause;
  PortalSubscriptionUpdate: PortalSubscriptionUpdate;
  PortalSubscriptionUpdateProduct: PortalSubscriptionUpdateProduct;
  V1BitcoinReceivers2: V1BitcoinReceivers2;
  BitcoinReceiver: BitcoinReceiver;
  Transactions: Transactions;
  BitcoinTransaction: BitcoinTransaction;
  BitcoinTransactionList: BitcoinTransactionList;
  V1Charges2: V1Charges2;
  Charge2: Charge2;
  BillingDetails: BillingDetails;
  Address4: Address4;
  FraudDetails: FraudDetails;
  Outcome: Outcome;
  PaymentMethodDetails: PaymentMethodDetails;
  AchCreditTransfer: AchCreditTransfer;
  AchDebit: AchDebit;
  AcssDebit: AcssDebit;
  AfterpayClearpay: AfterpayClearpay;
  Alipay: Alipay;
  AuBecsDebit: AuBecsDebit;
  BacsDebit: BacsDebit;
  Bancontact: Bancontact;
  Boleto: Boleto;
  Card4: Card4;
  Checks: Checks;
  Installments: Installments;
  Plan: Plan;
  ThreeDSecure2: ThreeDSecure2;
  Wallet: Wallet;
  Masterpass: Masterpass;
  BillingAddress: BillingAddress;
  ShippingAddress: ShippingAddress;
  VisaCheckout: VisaCheckout;
  CardPresent: CardPresent;
  Receipt: Receipt;
  Eps: Eps;
  Fpx2: Fpx2;
  Giropay: Giropay;
  Grabpay: Grabpay;
  Ideal: Ideal;
  InteracPresent: InteracPresent;
  Receipt2: Receipt2;
  Multibanco: Multibanco;
  Oxxo: Oxxo;
  P24: P24;
  SepaDebit: SepaDebit;
  Sofort: Sofort;
  WechatPay: WechatPay;
  RefundList: RefundList;
  Refund: Refund;
  Shipping: Shipping;
  TransferData: TransferData;
  Dispute: Dispute;
  DisputeEvidence: DisputeEvidence;
  DisputeEvidenceDetails: DisputeEvidenceDetails;
  RefundList2: RefundList2;
  PaymentPagesCheckoutSessionList: PaymentPagesCheckoutSessionList;
  CheckoutSession: CheckoutSession;
  PaymentPagesCheckoutSessionAutomaticTax: PaymentPagesCheckoutSessionAutomaticTax;
  CustomerDetails: CustomerDetails;
  PaymentPagesCheckoutSessionTaxId: PaymentPagesCheckoutSessionTaxId;
  LineItems: LineItems;
  Item: Item;
  LineItemsDiscountAmount: LineItemsDiscountAmount;
  Discount: Discount;
  Coupon: Coupon;
  CouponAppliesTo: CouponAppliesTo;
  Price: Price;
  Recurring: Recurring;
  PriceTier: PriceTier;
  TransformQuantity: TransformQuantity;
  LineItemsTaxAmount: LineItemsTaxAmount;
  TaxRate: TaxRate;
  PaymentMethodOptions: PaymentMethodOptions;
  AcssDebit2: AcssDebit2;
  CheckoutAcssDebitMandateOptions: CheckoutAcssDebitMandateOptions;
  Boleto2: Boleto2;
  Oxxo2: Oxxo2;
  Shipping2: Shipping2;
  ShippingAddressCollection: ShippingAddressCollection;
  PaymentPagesCheckoutSessionTaxIdCollection: PaymentPagesCheckoutSessionTaxIdCollection;
  TotalDetails: TotalDetails;
  Breakdown: Breakdown;
  PaymentPagesCheckoutSessionListLineItems: PaymentPagesCheckoutSessionListLineItems;
  V1CountrySpecs2: V1CountrySpecs2;
  CountrySpec: CountrySpec;
  CountrySpecVerificationFields: CountrySpecVerificationFields;
  CountrySpecVerificationFieldDetails: CountrySpecVerificationFieldDetails;
  V1Coupons2: V1Coupons2;
  CreditNotesList: CreditNotesList;
  CreditNote: CreditNote;
  DiscountsResourceDiscountAmount: DiscountsResourceDiscountAmount;
  Lines: Lines;
  CreditNoteLineItem: CreditNoteLineItem;
  CreditNoteTaxAmount: CreditNoteTaxAmount;
  CreditNoteLinesList: CreditNoteLinesList;
  Lines3ListItemInput: Lines3ListItemInput;
  V1Customers2: V1Customers2;
  Customer13: Customer13;
  Address7: Address7;
  Discount3: Discount3;
  InvoiceSettingCustomerSetting: InvoiceSettingCustomerSetting;
  InvoiceSettingCustomField: InvoiceSettingCustomField;
  Shipping5: Shipping5;
  Sources: Sources;
  Data21ListItem: Data21ListItem;
  AchCreditTransfer2: AchCreditTransfer2;
  AchDebit2: AchDebit2;
  AcssDebit4: AcssDebit4;
  Alipay2: Alipay2;
  AuBecsDebit2: AuBecsDebit2;
  Bancontact2: Bancontact2;
  Card6: Card6;
  CardPresent2: CardPresent2;
  CodeVerification: CodeVerification;
  Eps2: Eps2;
  Giropay2: Giropay2;
  Ideal2: Ideal2;
  Klarna2: Klarna2;
  Multibanco2: Multibanco2;
  Owner3: Owner3;
  Address8: Address8;
  VerifiedAddress: VerifiedAddress;
  P242: P242;
  Receiver2: Receiver2;
  Redirect: Redirect;
  SepaDebit2: SepaDebit2;
  Sofort2: Sofort2;
  SourceOrder: SourceOrder;
  SourceOrderItem: SourceOrderItem;
  Shipping6: Shipping6;
  ThreeDSecure4: ThreeDSecure4;
  Wechat2: Wechat2;
  Subscriptions: Subscriptions;
  Subscription5: Subscription5;
  SubscriptionAutomaticTax: SubscriptionAutomaticTax;
  BillingThresholds: BillingThresholds;
  Discount4: Discount4;
  SubscriptionItemList: SubscriptionItemList;
  SubscriptionItem: SubscriptionItem;
  BillingThresholds2: BillingThresholds2;
  Price3: Price3;
  PauseCollection: PauseCollection;
  PaymentSettings: PaymentSettings;
  PaymentMethodOptions2: PaymentMethodOptions2;
  Bancontact3: Bancontact3;
  Card8: Card8;
  PendingInvoiceItemInterval: PendingInvoiceItemInterval;
  PendingUpdate: PendingUpdate;
  TransferData4: TransferData4;
  CustomerTax: CustomerTax;
  Location: Location;
  TaxIDsList: TaxIDsList;
  TaxId3: TaxId3;
  Verification3: Verification3;
  V1Customer2: V1Customer2;
  InvoiceSettings2: InvoiceSettings2;
  Tax2: Tax2;
  CustomerBalanceTransactionList: CustomerBalanceTransactionList;
  CustomerBalanceTransaction2: CustomerBalanceTransaction2;
  BankAccountList: BankAccountList;
  BankAccount7: BankAccount7;
  CardList: CardList;
  ApmsSourcesSourceList: ApmsSourcesSourceList;
  PaymentSource: PaymentSource;
  Capabilities2: Capabilities2;
  Company2: Company2;
  Controller: Controller;
  Individual2: Individual2;
  Requirements2: Requirements2;
  TosAcceptance2: TosAcceptance2;
  SubscriptionList: SubscriptionList;
  TaxIDsList2: TaxIDsList2;
  V1Disputes2: V1Disputes2;
  NotificationEventList: NotificationEventList;
  Event: Event;
  NotificationEventData: NotificationEventData;
  Request: Request;
  V1ExchangeRates2: V1ExchangeRates2;
  ExchangeRate2: ExchangeRate2;
  V1FileLinks2: V1FileLinks2;
  FileLink: FileLink;
  V1Files2: V1Files2;
  File3: File3;
  Links: Links;
  V1IdentityVerificationReports2: V1IdentityVerificationReports2;
  IdentityVerificationReport: IdentityVerificationReport;
  GelatoDocumentReport: GelatoDocumentReport;
  Address12: Address12;
  Dob8: Dob8;
  Error: Error;
  ExpirationDate: ExpirationDate;
  IssuedDate: IssuedDate;
  GelatoIdNumberReport: GelatoIdNumberReport;
  Dob9: Dob9;
  Error2: Error2;
  GelatoVerificationReportOptions: GelatoVerificationReportOptions;
  GelatoReportDocumentOptions: GelatoReportDocumentOptions;
  GelatoSelfieReport: GelatoSelfieReport;
  Error3: Error3;
  V1IdentityVerificationSessions2: V1IdentityVerificationSessions2;
  IdentityVerificationSession: IdentityVerificationSession;
  LastError: LastError;
  GelatoVerificationSessionOptions: GelatoVerificationSessionOptions;
  GelatoSessionDocumentOptions: GelatoSessionDocumentOptions;
  Redaction: Redaction;
  VerifiedOutputs: VerifiedOutputs;
  Address13: Address13;
  Dob10: Dob10;
  V1Invoiceitems2: V1Invoiceitems2;
  Invoiceitem: Invoiceitem;
  InvoiceLineItemPeriod: InvoiceLineItemPeriod;
  Price7: Price7;
  InvoicesList: InvoicesList;
  Invoice11: Invoice11;
  AutomaticTax3: AutomaticTax3;
  CustomerAddress: CustomerAddress;
  CustomerShipping: CustomerShipping;
  InvoicesResourceInvoiceTaxId: InvoicesResourceInvoiceTaxId;
  Discount5: Discount5;
  LastFinalizationError: LastFinalizationError;
  PaymentIntent7: PaymentIntent7;
  Charges: Charges;
  LastPaymentError: LastPaymentError;
  PaymentMethod3: PaymentMethod3;
  PaymentMethodAcssDebit: PaymentMethodAcssDebit;
  PaymentMethodAuBecsDebit: PaymentMethodAuBecsDebit;
  PaymentMethodBacsDebit: PaymentMethodBacsDebit;
  PaymentMethodBoleto: PaymentMethodBoleto;
  PaymentMethodCard: PaymentMethodCard;
  Checks2: Checks2;
  GeneratedFrom: GeneratedFrom;
  PaymentMethodDetails2: PaymentMethodDetails2;
  Networks: Networks;
  ThreeDSecureUsage: ThreeDSecureUsage;
  Wallet2: Wallet2;
  Masterpass2: Masterpass2;
  VisaCheckout2: VisaCheckout2;
  PaymentMethodEps: PaymentMethodEps;
  PaymentMethodFpx: PaymentMethodFpx;
  PaymentMethodIdeal: PaymentMethodIdeal;
  PaymentMethodP24: PaymentMethodP24;
  PaymentMethodSepaDebit: PaymentMethodSepaDebit;
  GeneratedFrom2: GeneratedFrom2;
  PaymentMethodSofort: PaymentMethodSofort;
  SetupIntent2: SetupIntent2;
  LastSetupError: LastSetupError;
  Source9: Source9;
  NextAction: NextAction;
  RedirectToUrl: RedirectToUrl;
  VerifyWithMicrodeposits: VerifyWithMicrodeposits;
  PaymentMethodOptions4: PaymentMethodOptions4;
  AcssDebit5: AcssDebit5;
  SetupIntentPaymentMethodOptionsMandateOptionsAcssDebit: SetupIntentPaymentMethodOptionsMandateOptionsAcssDebit;
  Card14: Card14;
  SepaDebit3: SepaDebit3;
  NextAction2: NextAction2;
  AlipayHandleRedirect: AlipayHandleRedirect;
  BoletoDisplayDetails: BoletoDisplayDetails;
  OxxoDisplayDetails: OxxoDisplayDetails;
  RedirectToUrl2: RedirectToUrl2;
  VerifyWithMicrodeposits2: VerifyWithMicrodeposits2;
  WechatPayDisplayQrCode: WechatPayDisplayQrCode;
  WechatPayRedirectToAndroidApp: WechatPayRedirectToAndroidApp;
  WechatPayRedirectToIosApp: WechatPayRedirectToIosApp;
  PaymentMethodOptions5: PaymentMethodOptions5;
  AcssDebit6: AcssDebit6;
  PaymentIntentPaymentMethodOptionsMandateOptionsAcssDebit: PaymentIntentPaymentMethodOptionsMandateOptionsAcssDebit;
  AfterpayClearpay2: AfterpayClearpay2;
  Bancontact5: Bancontact5;
  Card15: Card15;
  Installments2: Installments2;
  PaymentMethodDetailsCardInstallmentsPlan: PaymentMethodDetailsCardInstallmentsPlan;
  Plan3: Plan3;
  SepaDebit4: SepaDebit4;
  Sofort3: Sofort3;
  WechatPay3: WechatPay3;
  Shipping9: Shipping9;
  TransferData7: TransferData7;
  InvoiceLinesList: InvoiceLinesList;
  LineItem: LineItem;
  Price10: Price10;
  InvoiceTaxAmount: InvoiceTaxAmount;
  InvoicesPaymentSettings: InvoicesPaymentSettings;
  PaymentMethodOptions6: PaymentMethodOptions6;
  Bancontact6: Bancontact6;
  Card16: Card16;
  InvoicesStatusTransitions: InvoicesStatusTransitions;
  InvoiceThresholdReason: InvoiceThresholdReason;
  InvoiceItemThresholdReason: InvoiceItemThresholdReason;
  TransferData8: TransferData8;
  InvoiceLinesList2: InvoiceLinesList2;
  AutomaticTax6Input: AutomaticTax6Input;
  CustomerDetails2Input: CustomerDetails2Input;
  TaxParamInput: TaxParamInput;
  TaxIds2ListItemInput: TaxIds2ListItemInput;
  InvoiceItemsListItemInput: InvoiceItemsListItemInput;
  Period3Input: Period3Input;
  OneTimePriceDataInput: OneTimePriceDataInput;
  SubscriptionItems2ListItemInput: SubscriptionItems2ListItemInput;
  RecurringPriceDataInput: RecurringPriceDataInput;
  RecurringAdhocInput: RecurringAdhocInput;
  RadarIssuerFraudRecordList: RadarIssuerFraudRecordList;
  IssuerFraudRecord: IssuerFraudRecord;
  V1IssuingAuthorizations2: V1IssuingAuthorizations2;
  IssuingAuthorization: IssuingAuthorization;
  AmountDetails: AmountDetails;
  IssuingCard2: IssuingCard2;
  IssuingCardholder: IssuingCardholder;
  IssuingCardholderAddress: IssuingCardholderAddress;
  Company3: Company3;
  Individual3: Individual3;
  Dob11: Dob11;
  Verification4: Verification4;
  Document5: Document5;
  IssuingCardholderRequirements: IssuingCardholderRequirements;
  SpendingControls: SpendingControls;
  IssuingCardholderSpendingLimit: IssuingCardholderSpendingLimit;
  Shipping10: Shipping10;
  IssuingCardAuthorizationControls: IssuingCardAuthorizationControls;
  IssuingCardSpendingLimit: IssuingCardSpendingLimit;
  IssuingAuthorizationMerchantData: IssuingAuthorizationMerchantData;
  PendingRequest: PendingRequest;
  IssuingAuthorizationRequest: IssuingAuthorizationRequest;
  IssuingTransaction: IssuingTransaction;
  AmountDetails2: AmountDetails2;
  PurchaseDetails: PurchaseDetails;
  Flight: Flight;
  IssuingTransactionFlightDataLeg: IssuingTransactionFlightDataLeg;
  Fuel: Fuel;
  Lodging: Lodging;
  IssuingTransactionReceiptData: IssuingTransactionReceiptData;
  IssuingAuthorizationVerificationData: IssuingAuthorizationVerificationData;
  V1IssuingCardholders2: V1IssuingCardholders2;
  V1IssuingCards2: V1IssuingCards2;
  IssuingDisputeList: IssuingDisputeList;
  IssuingDispute: IssuingDispute;
  IssuingDisputeEvidence: IssuingDisputeEvidence;
  IssuingDisputeCanceledEvidence: IssuingDisputeCanceledEvidence;
  IssuingDisputeDuplicateEvidence: IssuingDisputeDuplicateEvidence;
  IssuingDisputeFraudulentEvidence: IssuingDisputeFraudulentEvidence;
  IssuingDisputeMerchandiseNotAsDescribedEvidence: IssuingDisputeMerchandiseNotAsDescribedEvidence;
  IssuingDisputeNotReceivedEvidence: IssuingDisputeNotReceivedEvidence;
  IssuingDisputeOtherEvidence: IssuingDisputeOtherEvidence;
  IssuingDisputeServiceNotAsDescribedEvidence: IssuingDisputeServiceNotAsDescribedEvidence;
  V1IssuingSettlements2: V1IssuingSettlements2;
  IssuingSettlement: IssuingSettlement;
  V1IssuingTransactions2: V1IssuingTransactions2;
  Mandate6: Mandate6;
  CustomerAcceptance: CustomerAcceptance;
  OnlineAcceptance: OnlineAcceptance;
  MandatePaymentMethodDetails: MandatePaymentMethodDetails;
  MandateAcssDebit: MandateAcssDebit;
  MandateAuBecsDebit: MandateAuBecsDebit;
  MandateBacsDebit: MandateBacsDebit;
  MandateSepaDebit: MandateSepaDebit;
  MandateSingleUse: MandateSingleUse;
  V1OrderReturns2: V1OrderReturns2;
  OrderReturn: OrderReturn;
  V1Orders2: V1Orders2;
  Order3: Order3;
  Returns: Returns;
  Shipping11: Shipping11;
  ShippingMethod: ShippingMethod;
  DeliveryEstimate: DeliveryEstimate;
  StatusTransitions: StatusTransitions;
  StatusTransitions2Input: StatusTransitions2Input;
  PaymentFlowsPaymentIntentList: PaymentFlowsPaymentIntentList;
  PaymentFlowsPaymentMethodList: PaymentFlowsPaymentMethodList;
  PayoutList: PayoutList;
  Payout: Payout;
  PlanList: PlanList;
  Plan4: Plan4;
  PlanTier: PlanTier;
  TransformUsage: TransformUsage;
  PriceList: PriceList;
  Recurring4Input: Recurring4Input;
  V1Products2: V1Products2;
  Product14: Product14;
  PackageDimensions: PackageDimensions;
  V1PromotionCodes2: V1PromotionCodes2;
  PromotionCode11: PromotionCode11;
  PromotionCodesResourceRestrictions: PromotionCodesResourceRestrictions;
  V1Quotes2: V1Quotes2;
  Quote2: Quote2;
  QuotesResourceAutomaticTax: QuotesResourceAutomaticTax;
  QuotesResourceComputed: QuotesResourceComputed;
  Recurring3: Recurring3;
  TotalDetails2: TotalDetails2;
  QuotesResourceTotalDetailsResourceBreakdown: QuotesResourceTotalDetailsResourceBreakdown;
  QuotesResourceUpfront: QuotesResourceUpfront;
  QuotesResourceListLineItems: QuotesResourceListLineItems;
  QuotesResourceTotalDetails: QuotesResourceTotalDetails;
  FromQuote: FromQuote;
  InvoiceSettings3: InvoiceSettings3;
  LineItems3: LineItems3;
  QuotesResourceStatusTransitions: QuotesResourceStatusTransitions;
  QuotesResourceSubscriptionData: QuotesResourceSubscriptionData;
  TransferData12: TransferData12;
  QuotesResourceListLineItems2: QuotesResourceListLineItems2;
  RadarEarlyFraudWarningList: RadarEarlyFraudWarningList;
  RadarEarlyFraudWarning: RadarEarlyFraudWarning;
  V1RadarValueListItems2: V1RadarValueListItems2;
  RadarValueListItem: RadarValueListItem;
  V1RadarValueLists2: V1RadarValueLists2;
  RadarValueList: RadarValueList;
  ListItems: ListItems;
  V1Recipients2: V1Recipients2;
  Recipient10: Recipient10;
  ActiveAccount: ActiveAccount;
  Cards: Cards;
  V1Recipient2: V1Recipient2;
  V1Refunds2: V1Refunds2;
  V1ReportingReportRuns2: V1ReportingReportRuns2;
  ReportingReportRun: ReportingReportRun;
  FinancialReportingFinanceReportRunRunParameters: FinancialReportingFinanceReportRunRunParameters;
  Result2: Result2;
  FinancialReportingFinanceReportTypeList: FinancialReportingFinanceReportTypeList;
  ReportingReportType: ReportingReportType;
  V1Reviews2: V1Reviews2;
  Review3: Review3;
  IpAddressLocation: IpAddressLocation;
  Session: Session;
  PaymentFlowsSetupIntentSetupAttemptList: PaymentFlowsSetupIntentSetupAttemptList;
  SetupAttempt3: SetupAttempt3;
  SetupAttemptPaymentMethodDetails: SetupAttemptPaymentMethodDetails;
  SetupAttemptPaymentMethodDetailsBancontact: SetupAttemptPaymentMethodDetailsBancontact;
  SetupAttemptPaymentMethodDetailsCard: SetupAttemptPaymentMethodDetailsCard;
  ThreeDSecure6: ThreeDSecure6;
  SetupAttemptPaymentMethodDetailsCardPresent: SetupAttemptPaymentMethodDetailsCardPresent;
  SetupAttemptPaymentMethodDetailsIdeal: SetupAttemptPaymentMethodDetailsIdeal;
  SetupAttemptPaymentMethodDetailsSofort: SetupAttemptPaymentMethodDetailsSofort;
  SetupError: SetupError;
  PaymentFlowsSetupIntentList: PaymentFlowsSetupIntentList;
  V1SigmaScheduledQueryRuns2: V1SigmaScheduledQueryRuns2;
  ScheduledQueryRun: ScheduledQueryRun;
  SigmaScheduledQueryRunError: SigmaScheduledQueryRunError;
  File4: File4;
  V1Skus2: V1Skus2;
  Sku: Sku;
  SkuInventory: SkuInventory;
  PackageDimensions3: PackageDimensions3;
  V1Skus4: V1Skus4;
  Inventory2: Inventory2;
  Source12: Source12;
  SourceTypeAchCreditTransfer: SourceTypeAchCreditTransfer;
  SourceTypeAchDebit: SourceTypeAchDebit;
  SourceTypeAcssDebit: SourceTypeAcssDebit;
  SourceTypeAlipay: SourceTypeAlipay;
  SourceTypeAuBecsDebit: SourceTypeAuBecsDebit;
  SourceTypeBancontact: SourceTypeBancontact;
  SourceTypeCard: SourceTypeCard;
  SourceTypeCardPresent: SourceTypeCardPresent;
  SourceCodeVerificationFlow: SourceCodeVerificationFlow;
  SourceTypeEps: SourceTypeEps;
  SourceTypeGiropay: SourceTypeGiropay;
  SourceTypeIdeal: SourceTypeIdeal;
  SourceTypeKlarna: SourceTypeKlarna;
  SourceTypeMultibanco: SourceTypeMultibanco;
  SourceTypeP24: SourceTypeP24;
  SourceReceiverFlow: SourceReceiverFlow;
  SourceRedirectFlow: SourceRedirectFlow;
  SourceTypeSepaDebit: SourceTypeSepaDebit;
  SourceTypeSofort: SourceTypeSofort;
  SourceTypeThreeDSecure: SourceTypeThreeDSecure;
  SourceTypeWechat: SourceTypeWechat;
  SourceMandateNotification: SourceMandateNotification;
  SourceMandateNotificationAcssDebitData: SourceMandateNotificationAcssDebitData;
  SourceMandateNotificationBacsDebitData: SourceMandateNotificationBacsDebitData;
  SourceMandateNotificationSepaDebitData: SourceMandateNotificationSepaDebitData;
  ApmsSourcesSourceTransactionList: ApmsSourcesSourceTransactionList;
  SourceTransaction: SourceTransaction;
  SourceTransactionAchCreditTransferData: SourceTransactionAchCreditTransferData;
  SourceTransactionChfCreditTransferData: SourceTransactionChfCreditTransferData;
  SourceTransactionGbpCreditTransferData: SourceTransactionGbpCreditTransferData;
  SourceTransactionPaperCheckData: SourceTransactionPaperCheckData;
  SourceTransactionSepaCreditTransferData: SourceTransactionSepaCreditTransferData;
  V1SubscriptionItems2: V1SubscriptionItems2;
  V1SubscriptionItemUsageRecordSummaries2: V1SubscriptionItemUsageRecordSummaries2;
  UsageRecordSummary: UsageRecordSummary;
  Period2: Period2;
  V1SubscriptionSchedules2: V1SubscriptionSchedules2;
  SubscriptionSchedule2: SubscriptionSchedule2;
  CurrentPhase: CurrentPhase;
  SubscriptionSchedulesResourceDefaultSettings: SubscriptionSchedulesResourceDefaultSettings;
  SubscriptionSchedulesResourceDefaultSettingsAutomaticTax: SubscriptionSchedulesResourceDefaultSettingsAutomaticTax;
  InvoiceSettings4: InvoiceSettings4;
  TransferData15: TransferData15;
  SubscriptionSchedulePhaseConfiguration: SubscriptionSchedulePhaseConfiguration;
  SubscriptionScheduleAddInvoiceItem: SubscriptionScheduleAddInvoiceItem;
  SchedulesPhaseAutomaticTax: SchedulesPhaseAutomaticTax;
  InvoiceSettings5: InvoiceSettings5;
  SubscriptionScheduleConfigurationItem: SubscriptionScheduleConfigurationItem;
  V1Subscriptions2: V1Subscriptions2;
  TaxProductResourceTaxCodeList: TaxProductResourceTaxCodeList;
  TaxCode6: TaxCode6;
  V1TaxRates2: V1TaxRates2;
  TerminalLocationLocationList: TerminalLocationLocationList;
  TerminalLocation: TerminalLocation;
  TerminalReaderRetrieveReader: TerminalReaderRetrieveReader;
  TerminalReader: TerminalReader;
  Token3: Token3;
  TopupList: TopupList;
  Topup: Topup;
  TransferList: TransferList;
  Transfer2: Transfer2;
  Reversals: Reversals;
  TransferReversal2: TransferReversal2;
  TransferReversalList: TransferReversalList;
  V1WebhookEndpoints2: V1WebhookEndpoints2;
  WebhookEndpoint: WebhookEndpoint;
  DeletedAccount: DeletedAccount;
  V1AccountInput: V1AccountInput;
  DeletedExternalAccount: DeletedExternalAccount;
  DeletedPerson: DeletedPerson;
  DeletedApplePayDomain: DeletedApplePayDomain;
  DeletedCoupon: DeletedCoupon;
  DeletedCustomer: DeletedCustomer;
  V1CustomerBankAccountInput: V1CustomerBankAccountInput;
  V1CustomerCardInput: V1CustomerCardInput;
  DeletedDiscount: DeletedDiscount;
  V1CustomerSourceInput: V1CustomerSourceInput;
  V1CustomerSubscriptionInput: V1CustomerSubscriptionInput;
  DeletedTaxId: DeletedTaxId;
  EphemeralKey: EphemeralKey;
  V1EphemeralKeyInput: V1EphemeralKeyInput;
  DeletedInvoiceitem: DeletedInvoiceitem;
  DeletedInvoice: DeletedInvoice;
  DeletedPlan: DeletedPlan;
  DeletedProduct: DeletedProduct;
  DeletedRadarValueListItem: DeletedRadarValueListItem;
  DeletedRadarValueList: DeletedRadarValueList;
  DeletedRecipient: DeletedRecipient;
  DeletedSku: DeletedSku;
  DeletedSubscriptionItem: DeletedSubscriptionItem;
  V1SubscriptionItems4Input: V1SubscriptionItems4Input;
  V1SubscriptionInput: V1SubscriptionInput;
  DeletedTerminalLocation: DeletedTerminalLocation;
  DeletedTerminalReader: DeletedTerminalReader;
  DeletedWebhookEndpoint: DeletedWebhookEndpoint;
  V13dSecureInput: V13dSecureInput;
  V1Account3Input: V1Account3Input;
  BusinessProfileSpecsInput: BusinessProfileSpecsInput;
  AddressSpecsInput: AddressSpecsInput;
  CapabilitiesInput: CapabilitiesInput;
  CapabilityParamInput: CapabilityParamInput;
  AfterpayClearpayPayments2Input: AfterpayClearpayPayments2Input;
  AuBecsDebitPayments2Input: AuBecsDebitPayments2Input;
  BacsDebitPayments3Input: BacsDebitPayments3Input;
  BancontactPayments2Input: BancontactPayments2Input;
  BoletoPayments2Input: BoletoPayments2Input;
  CardIssuing3Input: CardIssuing3Input;
  CardPayments3Input: CardPayments3Input;
  CartesBancairesPayments2Input: CartesBancairesPayments2Input;
  EpsPayments2Input: EpsPayments2Input;
  FpxPayments2Input: FpxPayments2Input;
  GiropayPayments2Input: GiropayPayments2Input;
  GrabpayPayments2Input: GrabpayPayments2Input;
  IdealPayments2Input: IdealPayments2Input;
  JcbPayments2Input: JcbPayments2Input;
  LegacyPayments2Input: LegacyPayments2Input;
  OxxoPayments2Input: OxxoPayments2Input;
  P24Payments2Input: P24Payments2Input;
  SepaDebitPayments3Input: SepaDebitPayments3Input;
  SofortPayments2Input: SofortPayments2Input;
  TaxReportingUs1099K2Input: TaxReportingUs1099K2Input;
  TaxReportingUs1099Misc2Input: TaxReportingUs1099Misc2Input;
  Transfers2Input: Transfers2Input;
  CompanyInput: CompanyInput;
  Address2Input: Address2Input;
  JapanAddressKanaSpecsInput: JapanAddressKanaSpecsInput;
  JapanAddressKanjiSpecsInput: JapanAddressKanjiSpecsInput;
  VerificationSpecsInput: VerificationSpecsInput;
  VerificationDocumentSpecsInput: VerificationDocumentSpecsInput;
  DocumentsInput: DocumentsInput;
  BankAccountOwnershipVerificationInput: BankAccountOwnershipVerificationInput;
  CompanyLicenseInput: CompanyLicenseInput;
  CompanyMemorandumOfAssociationInput: CompanyMemorandumOfAssociationInput;
  CompanyMinisterialDecreeInput: CompanyMinisterialDecreeInput;
  CompanyRegistrationVerificationInput: CompanyRegistrationVerificationInput;
  CompanyTaxIdVerificationInput: CompanyTaxIdVerificationInput;
  IndividualInput: IndividualInput;
  PersonVerificationSpecsInput: PersonVerificationSpecsInput;
  PersonVerificationDocumentSpecsInput: PersonVerificationDocumentSpecsInput;
  Document2Input: Document2Input;
  SettingsSpecsUpdateInput: SettingsSpecsUpdateInput;
  BrandingSettingsSpecsInput: BrandingSettingsSpecsInput;
  CardIssuingSettingsSpecsInput: CardIssuingSettingsSpecsInput;
  TosAcceptanceInput: TosAcceptanceInput;
  CardPaymentsSettingsSpecsInput: CardPaymentsSettingsSpecsInput;
  DeclineOnInput: DeclineOnInput;
  PaymentsSettingsSpecsInput: PaymentsSettingsSpecsInput;
  PayoutSettingsSpecsInput: PayoutSettingsSpecsInput;
  ScheduleInput: ScheduleInput;
  TosAcceptanceSpecsInput: TosAcceptanceSpecsInput;
  V1AccountBankAccountsInput: V1AccountBankAccountsInput;
  V1AccountBankAccount2Input: V1AccountBankAccount2Input;
  V1AccountCapability2Input: V1AccountCapability2Input;
  V1AccountExternalAccounts2Input: V1AccountExternalAccounts2Input;
  V1AccountExternalAccount2Input: V1AccountExternalAccount2Input;
  AccountLink: AccountLink;
  V1AccountLinksInput: V1AccountLinksInput;
  LoginLink: LoginLink;
  V1AccountLoginLinksInput: V1AccountLoginLinksInput;
  V1AccountPeople3Input: V1AccountPeople3Input;
  Address3Input: Address3Input;
  AddressKana3Input: AddressKana3Input;
  AddressKanji3Input: AddressKanji3Input;
  PersonDocumentsSpecsInput: PersonDocumentsSpecsInput;
  CompanyAuthorizationInput: CompanyAuthorizationInput;
  PassportInput: PassportInput;
  VisaInput: VisaInput;
  RelationshipInput: RelationshipInput;
  Verification2Input: Verification2Input;
  V1AccountPerson2Input: V1AccountPerson2Input;
  V1AccountPersons3Input: V1AccountPersons3Input;
  V1Accounts3Input: V1Accounts3Input;
  SettingsSpecsInput: SettingsSpecsInput;
  V1AccountLoginLinks2Input: V1AccountLoginLinks2Input;
  V1AccountPeople4Input: V1AccountPeople4Input;
  V1AccountPerson3Input: V1AccountPerson3Input;
  V1AccountPersons4Input: V1AccountPersons4Input;
  V1AccountRejectInput: V1AccountRejectInput;
  V1ApplePayDomains2Input: V1ApplePayDomains2Input;
  V1ApplicationFeesRefund2Input: V1ApplicationFeesRefund2Input;
  V1ApplicationFeeRefundInput: V1ApplicationFeeRefundInput;
  V1ApplicationFeeRefunds2Input: V1ApplicationFeeRefunds2Input;
  V1BillingPortalConfigurations3Input: V1BillingPortalConfigurations3Input;
  BusinessProfileCreateParamInput: BusinessProfileCreateParamInput;
  FeaturesInput: FeaturesInput;
  CustomerUpdateInput: CustomerUpdateInput;
  InvoiceHistoryInput: InvoiceHistoryInput;
  PaymentMethodUpdateInput: PaymentMethodUpdateInput;
  SubscriptionCancelInput: SubscriptionCancelInput;
  SubscriptionPauseInput: SubscriptionPauseInput;
  SubscriptionUpdateInput: SubscriptionUpdateInput;
  V1BillingPortalConfiguration2Input: V1BillingPortalConfiguration2Input;
  BusinessProfileUpdateParamInput: BusinessProfileUpdateParamInput;
  FeaturesUpdatingParamInput: FeaturesUpdatingParamInput;
  CustomerUpdateUpdatingParamInput: CustomerUpdateUpdatingParamInput;
  SubscriptionCancelUpdatingParamInput: SubscriptionCancelUpdatingParamInput;
  SubscriptionUpdateUpdatingParamInput: SubscriptionUpdateUpdatingParamInput;
  BillingPortalSession: BillingPortalSession;
  V1BillingPortalSessionsInput: V1BillingPortalSessionsInput;
  V1Charges3Input: V1Charges3Input;
  OptionalFieldsShippingInput: OptionalFieldsShippingInput;
  OptionalFieldsAddressInput: OptionalFieldsAddressInput;
  TransferDataSpecsInput: TransferDataSpecsInput;
  V1Charge2Input: V1Charge2Input;
  FraudDetails2Input: FraudDetails2Input;
  V1ChargeCaptureInput: V1ChargeCaptureInput;
  TransferData2Input: TransferData2Input;
  V1ChargeDispute2Input: V1ChargeDispute2Input;
  EvidenceInput: EvidenceInput;
  V1ChargeDisputeCloseInput: V1ChargeDisputeCloseInput;
  V1ChargeRefundInput: V1ChargeRefundInput;
  V1ChargeRefunds2Input: V1ChargeRefunds2Input;
  V1ChargeRefund3Input: V1ChargeRefund3Input;
  V1CheckoutSessions2Input: V1CheckoutSessions2Input;
  AutomaticTaxInput: AutomaticTaxInput;
  CustomerUpdateParamsInput: CustomerUpdateParamsInput;
  Discounts3ListItemInput: Discounts3ListItemInput;
  LineItems2ListItemInput: LineItems2ListItemInput;
  AdjustableQuantityInput: AdjustableQuantityInput;
  PriceDataInput: PriceDataInput;
  ProductDataInput: ProductDataInput;
  PaymentIntentDataInput: PaymentIntentDataInput;
  Shipping4Input: Shipping4Input;
  Address6Input: Address6Input;
  TransferDataParamsInput: TransferDataParamsInput;
  PaymentMethodOptionsParamInput: PaymentMethodOptionsParamInput;
  AcssDebit3Input: AcssDebit3Input;
  MandateOptionsInput: MandateOptionsInput;
  Boleto3Input: Boleto3Input;
  Oxxo3Input: Oxxo3Input;
  WechatPay2Input: WechatPay2Input;
  SetupIntentDataInput: SetupIntentDataInput;
  ShippingAddressCollectionParamsInput: ShippingAddressCollectionParamsInput;
  SubscriptionDataInput: SubscriptionDataInput;
  ItemsListItemInput: ItemsListItemInput;
  TransferData3Input: TransferData3Input;
  TaxIdCollectionInput: TaxIdCollectionInput;
  V1Coupons3Input: V1Coupons3Input;
  AppliesToInput: AppliesToInput;
  V1Coupon2Input: V1Coupon2Input;
  V1CreditNotes2Input: V1CreditNotes2Input;
  Lines2ListItemInput: Lines2ListItemInput;
  V1CreditNote2Input: V1CreditNote2Input;
  V1CreditNoteVoidInput: V1CreditNoteVoidInput;
  V1Customers3Input: V1Customers3Input;
  InvoiceSettingsInput: InvoiceSettingsInput;
  TaxInput: TaxInput;
  TaxIdDataListItemInput: TaxIdDataListItemInput;
  V1Customer3Input: V1Customer3Input;
  V1CustomerBalanceTransactions2Input: V1CustomerBalanceTransactions2Input;
  V1CustomerBalanceTransactions3Input: V1CustomerBalanceTransactions3Input;
  V1CustomerBankAccounts2Input: V1CustomerBankAccounts2Input;
  V1CustomerBankAccount5: V1CustomerBankAccount5;
  V1CustomerBankAccount4Input: V1CustomerBankAccount4Input;
  Owner4Input: Owner4Input;
  SourceAddressInput: SourceAddressInput;
  V1CustomerBankAccountVerifyInput: V1CustomerBankAccountVerifyInput;
  V1CustomerCards2Input: V1CustomerCards2Input;
  V1CustomerCard5: V1CustomerCard5;
  V1CustomerCard4Input: V1CustomerCard4Input;
  V1CustomerSources2Input: V1CustomerSources2Input;
  V1CustomerSource5: V1CustomerSource5;
  V1CustomerSource4Input: V1CustomerSource4Input;
  V1CustomerSourceVerifyInput: V1CustomerSourceVerifyInput;
  V1CustomerSubscriptions2Input: V1CustomerSubscriptions2Input;
  AddInvoiceItemsListItemInput: AddInvoiceItemsListItemInput;
  AutomaticTaxConfigInput: AutomaticTaxConfigInput;
  Items3ListItemInput: Items3ListItemInput;
  PaymentSettings2Input: PaymentSettings2Input;
  PaymentMethodOptions3Input: PaymentMethodOptions3Input;
  TransferData5Input: TransferData5Input;
  V1CustomerSubscription3Input: V1CustomerSubscription3Input;
  Items4ListItemInput: Items4ListItemInput;
  V1CustomerTaxIds2Input: V1CustomerTaxIds2Input;
  V1Dispute2Input: V1Dispute2Input;
  V1DisputeCloseInput: V1DisputeCloseInput;
  V1EphemeralKeysInput: V1EphemeralKeysInput;
  V1FileLinks3Input: V1FileLinks3Input;
  V1FileLinks4Input: V1FileLinks4Input;
  V1IdentityVerificationSessions3Input: V1IdentityVerificationSessions3Input;
  OptionsInput: OptionsInput;
  V1IdentityVerificationSessions4Input: V1IdentityVerificationSessions4Input;
  V1IdentityVerificationSessionsCancelInput: V1IdentityVerificationSessionsCancelInput;
  V1IdentityVerificationSessionsRedactInput: V1IdentityVerificationSessionsRedactInput;
  V1Invoiceitems3Input: V1Invoiceitems3Input;
  PeriodInput: PeriodInput;
  PriceData2Input: PriceData2Input;
  V1Invoiceitem2Input: V1Invoiceitem2Input;
  V1Invoices2Input: V1Invoices2Input;
  AutomaticTaxParamInput: AutomaticTaxParamInput;
  PaymentSettings3Input: PaymentSettings3Input;
  TransferData9Input: TransferData9Input;
  V1Invoice2Input: V1Invoice2Input;
  V1InvoiceFinalizeInput: V1InvoiceFinalizeInput;
  V1InvoiceMarkUncollectibleInput: V1InvoiceMarkUncollectibleInput;
  V1InvoicePayInput: V1InvoicePayInput;
  V1InvoiceSendInput: V1InvoiceSendInput;
  V1InvoiceVoidInput: V1InvoiceVoidInput;
  V1IssuingAuthorization2Input: V1IssuingAuthorization2Input;
  V1IssuingAuthorizationApproveInput: V1IssuingAuthorizationApproveInput;
  V1IssuingAuthorizationDeclineInput: V1IssuingAuthorizationDeclineInput;
  V1IssuingCardholders3Input: V1IssuingCardholders3Input;
  BillingInput: BillingInput;
  RequiredAddressInput: RequiredAddressInput;
  CompanyParamInput: CompanyParamInput;
  IndividualParamInput: IndividualParamInput;
  DateOfBirthSpecsInput: DateOfBirthSpecsInput;
  PersonVerificationParamInput: PersonVerificationParamInput;
  PersonVerificationDocumentParamInput: PersonVerificationDocumentParamInput;
  AuthorizationControlsParamV2Input: AuthorizationControlsParamV2Input;
  SpendingLimits3ListItemInput: SpendingLimits3ListItemInput;
  V1IssuingCardholder2Input: V1IssuingCardholder2Input;
  V1IssuingCards3Input: V1IssuingCards3Input;
  ShippingSpecsInput: ShippingSpecsInput;
  AuthorizationControlsParamInput: AuthorizationControlsParamInput;
  V1IssuingCard2Input: V1IssuingCard2Input;
  V1IssuingDisputes2Input: V1IssuingDisputes2Input;
  EvidenceParamInput: EvidenceParamInput;
  V1IssuingDispute2Input: V1IssuingDispute2Input;
  V1IssuingDisputeSubmitInput: V1IssuingDisputeSubmitInput;
  V1IssuingSettlement2Input: V1IssuingSettlement2Input;
  V1IssuingTransaction2Input: V1IssuingTransaction2Input;
  V1Orders3Input: V1Orders3Input;
  Items7ListItemInput: Items7ListItemInput;
  Shipping12Input: Shipping12Input;
  V1Order2Input: V1Order2Input;
  ShippingTrackingParamsInput: ShippingTrackingParamsInput;
  V1OrderPayInput: V1OrderPayInput;
  V1OrderReturns3Input: V1OrderReturns3Input;
  V1PaymentIntents2Input: V1PaymentIntents2Input;
  MandateDataInput: MandateDataInput;
  CustomerAcceptanceParamInput: CustomerAcceptanceParamInput;
  OnlineInput: OnlineInput;
  PaymentMethodDataInput: PaymentMethodDataInput;
  PaymentMethodParamInput: PaymentMethodParamInput;
  AuBecsDebit3Input: AuBecsDebit3Input;
  BacsDebit2Input: BacsDebit2Input;
  BillingDetailsInnerParamsInput: BillingDetailsInnerParamsInput;
  Boleto4Input: Boleto4Input;
  Eps3Input: Eps3Input;
  Fpx3Input: Fpx3Input;
  Ideal4Input: Ideal4Input;
  P244Input: P244Input;
  SepaDebit5Input: SepaDebit5Input;
  Sofort4Input: Sofort4Input;
  PaymentMethodOptions7Input: PaymentMethodOptions7Input;
  Shipping13Input: Shipping13Input;
  TransferDataCreationParamsInput: TransferDataCreationParamsInput;
  V1PaymentIntents3Input: V1PaymentIntents3Input;
  TransferDataUpdateParamsInput: TransferDataUpdateParamsInput;
  V1PaymentIntentsCancelInput: V1PaymentIntentsCancelInput;
  V1PaymentIntentsCaptureInput: V1PaymentIntentsCaptureInput;
  TransferData11Input: TransferData11Input;
  V1PaymentIntentsConfirmInput: V1PaymentIntentsConfirmInput;
  MandateData2Input: MandateData2Input;
  V1PaymentMethods2Input: V1PaymentMethods2Input;
  AcssDebit8Input: AcssDebit8Input;
  AuBecsDebit4Input: AuBecsDebit4Input;
  BacsDebit3Input: BacsDebit3Input;
  BillingDetails2Input: BillingDetails2Input;
  Boleto6Input: Boleto6Input;
  Card19Input: Card19Input;
  Eps4Input: Eps4Input;
  Fpx4Input: Fpx4Input;
  Ideal6Input: Ideal6Input;
  P246Input: P246Input;
  SepaDebit7Input: SepaDebit7Input;
  Sofort6Input: Sofort6Input;
  V1PaymentMethod2Input: V1PaymentMethod2Input;
  UpdateApiParamInput: UpdateApiParamInput;
  V1PaymentMethodAttachInput: V1PaymentMethodAttachInput;
  V1PaymentMethodDetachInput: V1PaymentMethodDetachInput;
  V1Payouts2Input: V1Payouts2Input;
  V1Payout2Input: V1Payout2Input;
  V1PayoutCancelInput: V1PayoutCancelInput;
  V1PayoutReverseInput: V1PayoutReverseInput;
  V1Plans2Input: V1Plans2Input;
  Tiers3ListItemInput: Tiers3ListItemInput;
  TransformUsageParamInput: TransformUsageParamInput;
  V1Plan2Input: V1Plan2Input;
  V1Prices2Input: V1Prices2Input;
  InlineProductParamsInput: InlineProductParamsInput;
  Recurring2Input: Recurring2Input;
  TransformQuantity2Input: TransformQuantity2Input;
  V1Price2Input: V1Price2Input;
  V1Products3Input: V1Products3Input;
  PackageDimensionsSpecsInput: PackageDimensionsSpecsInput;
  V1Product2Input: V1Product2Input;
  V1PromotionCodes3Input: V1PromotionCodes3Input;
  RestrictionsInput: RestrictionsInput;
  V1PromotionCode2Input: V1PromotionCode2Input;
  V1Quotes3Input: V1Quotes3Input;
  AutomaticTax4Input: AutomaticTax4Input;
  FromQuoteParamsInput: FromQuoteParamsInput;
  QuoteParamInput: QuoteParamInput;
  LineItems4ListItemInput: LineItems4ListItemInput;
  PriceData3Input: PriceData3Input;
  SubscriptionDataCreateParamsInput: SubscriptionDataCreateParamsInput;
  V1Quote2Input: V1Quote2Input;
  LineItems5ListItemInput: LineItems5ListItemInput;
  SubscriptionDataUpdateParamsInput: SubscriptionDataUpdateParamsInput;
  V1QuoteAcceptInput: V1QuoteAcceptInput;
  V1QuoteCancelInput: V1QuoteCancelInput;
  V1QuoteFinalizeInput: V1QuoteFinalizeInput;
  V1RadarValueListItems3Input: V1RadarValueListItems3Input;
  V1RadarValueLists3Input: V1RadarValueLists3Input;
  V1RadarValueList2Input: V1RadarValueList2Input;
  V1Recipients3Input: V1Recipients3Input;
  V1Recipient3Input: V1Recipient3Input;
  V1Refunds3Input: V1Refunds3Input;
  V1Refund2Input: V1Refund2Input;
  V1ReportingReportRuns3Input: V1ReportingReportRuns3Input;
  ParametersInput: ParametersInput;
  V1ReviewApproveInput: V1ReviewApproveInput;
  V1SetupIntents2Input: V1SetupIntents2Input;
  SecretKeyParamInput: SecretKeyParamInput;
  PaymentMethodOptions8Input: PaymentMethodOptions8Input;
  SetupIntentPaymentMethodOptionsParamInput: SetupIntentPaymentMethodOptionsParamInput;
  SetupIntentPaymentMethodOptionsMandateOptionsParamInput: SetupIntentPaymentMethodOptionsMandateOptionsParamInput;
  SetupIntentParamInput: SetupIntentParamInput;
  SepaDebit8Input: SepaDebit8Input;
  SingleUseInput: SingleUseInput;
  V1SetupIntents3Input: V1SetupIntents3Input;
  V1SetupIntentsCancelInput: V1SetupIntentsCancelInput;
  V1SetupIntentsConfirmInput: V1SetupIntentsConfirmInput;
  V1Skus3Input: V1Skus3Input;
  InventoryInput: InventoryInput;
  PackageDimensions4Input: PackageDimensions4Input;
  V1Skus5Input: V1Skus5Input;
  InventoryUpdateSpecsInput: InventoryUpdateSpecsInput;
  V1SourcesInput: V1SourcesInput;
  MandateParamsInput: MandateParamsInput;
  AcceptanceInput: AcceptanceInput;
  MandateOfflineAcceptanceParamsInput: MandateOfflineAcceptanceParamsInput;
  MandateOnlineAcceptanceParamsInput: MandateOnlineAcceptanceParamsInput;
  Owner5Input: Owner5Input;
  ReceiverParamsInput: ReceiverParamsInput;
  RedirectParamsInput: RedirectParamsInput;
  ShallowOrderSpecsInput: ShallowOrderSpecsInput;
  Items9ListItemInput: Items9ListItemInput;
  OrderShippingInput: OrderShippingInput;
  V1Source2Input: V1Source2Input;
  OrderParamsInput: OrderParamsInput;
  V1SourceVerifyInput: V1SourceVerifyInput;
  V1SubscriptionItems3Input: V1SubscriptionItems3Input;
  PriceData4Input: PriceData4Input;
  V1SubscriptionItems5Input: V1SubscriptionItems5Input;
  UsageRecord: UsageRecord;
  V1SubscriptionItemUsageRecordsInput: V1SubscriptionItemUsageRecordsInput;
  V1SubscriptionSchedules3Input: V1SubscriptionSchedules3Input;
  DefaultSettingsInput: DefaultSettingsInput;
  AutomaticTax5Input: AutomaticTax5Input;
  SubscriptionSchedulesParamInput: SubscriptionSchedulesParamInput;
  Phases2ListItemInput: Phases2ListItemInput;
  AddInvoiceItems3ListItemInput: AddInvoiceItems3ListItemInput;
  Items11ListItemInput: Items11ListItemInput;
  V1SubscriptionSchedules4Input: V1SubscriptionSchedules4Input;
  Phases3ListItemInput: Phases3ListItemInput;
  V1SubscriptionSchedulesCancelInput: V1SubscriptionSchedulesCancelInput;
  V1SubscriptionSchedulesReleaseInput: V1SubscriptionSchedulesReleaseInput;
  V1Subscriptions3Input: V1Subscriptions3Input;
  V1Subscription3Input: V1Subscription3Input;
  V1TaxRates3Input: V1TaxRates3Input;
  V1TaxRate2Input: V1TaxRate2Input;
  TerminalConnectionToken: TerminalConnectionToken;
  V1TerminalConnectionTokensInput: V1TerminalConnectionTokensInput;
  V1TerminalLocations2Input: V1TerminalLocations2Input;
  CreateLocationAddressParamInput: CreateLocationAddressParamInput;
  V1TerminalLocation2Input: V1TerminalLocation2Input;
  Address17Input: Address17Input;
  V1TerminalReaders2Input: V1TerminalReaders2Input;
  V1TerminalReader2Input: V1TerminalReader2Input;
  V1TokensInput: V1TokensInput;
  ConnectJsAccountTokenSpecsInput: ConnectJsAccountTokenSpecsInput;
  CompanySpecsInput: CompanySpecsInput;
  IndividualSpecsInput: IndividualSpecsInput;
  TokenCreateBankAccountInput: TokenCreateBankAccountInput;
  CvcUpdateInput: CvcUpdateInput;
  PersonTokenSpecsInput: PersonTokenSpecsInput;
  Documents2Input: Documents2Input;
  RelationshipSpecsInput: RelationshipSpecsInput;
  PiiInput: PiiInput;
  V1Topups2Input: V1Topups2Input;
  V1Topup2Input: V1Topup2Input;
  V1TopupCancelInput: V1TopupCancelInput;
  V1Transfers2Input: V1Transfers2Input;
  V1TransferReversals2Input: V1TransferReversals2Input;
  V1Transfer2Input: V1Transfer2Input;
  V1TransferReversal2Input: V1TransferReversal2Input;
  V1WebhookEndpoints3Input: V1WebhookEndpoints3Input;
  V1WebhookEndpoint2Input: V1WebhookEndpoint2Input;
}>;

export type QueryResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Query'] = ResolversParentTypes['Query']> = ResolversObject<{
  continents?: Resolver<Array<ResolversTypes['Continent']>, ParentType, ContextType, RequireFields<QuerycontinentsArgs, never>>;
  continent?: Resolver<Maybe<ResolversTypes['Continent']>, ParentType, ContextType, RequireFields<QuerycontinentArgs, 'code'>>;
  countries?: Resolver<Array<ResolversTypes['Country']>, ParentType, ContextType, RequireFields<QuerycountriesArgs, never>>;
  country?: Resolver<Maybe<ResolversTypes['Country']>, ParentType, ContextType, RequireFields<QuerycountryArgs, 'code'>>;
  languages?: Resolver<Array<ResolversTypes['Language']>, ParentType, ContextType, RequireFields<QuerylanguagesArgs, never>>;
  language?: Resolver<Maybe<ResolversTypes['Language']>, ParentType, ContextType, RequireFields<QuerylanguageArgs, 'code'>>;
  cart?: Resolver<Maybe<ResolversTypes['Cart']>, ParentType, ContextType, RequireFields<QuerycartArgs, 'id'>>;
  node?: Resolver<Maybe<ResolversTypes['Node']>, ParentType, ContextType, RequireFields<QuerynodeArgs, 'id'>>;
  get3dSecureThreeDSecure?: Resolver<Maybe<ResolversTypes['ThreeDSecure']>, ParentType, ContextType, RequireFields<Queryget3dSecureThreeDSecureArgs, 'threeDSecure'>>;
  getAccount?: Resolver<Maybe<ResolversTypes['Account3']>, ParentType, ContextType, RequireFields<QuerygetAccountArgs, never>>;
  getAccountBankAccountsId?: Resolver<Maybe<ResolversTypes['Polymorphic']>, ParentType, ContextType, RequireFields<QuerygetAccountBankAccountsIdArgs, 'id'>>;
  getAccountCapabilities?: Resolver<Maybe<ResolversTypes['ListAccountCapability']>, ParentType, ContextType, RequireFields<QuerygetAccountCapabilitiesArgs, never>>;
  getAccountCapabilitiesCapability?: Resolver<Maybe<ResolversTypes['Capability']>, ParentType, ContextType, RequireFields<QuerygetAccountCapabilitiesCapabilityArgs, 'capability'>>;
  getAccountExternalAccounts?: Resolver<Maybe<ResolversTypes['ExternalAccountList']>, ParentType, ContextType, RequireFields<QuerygetAccountExternalAccountsArgs, never>>;
  getAccountExternalAccountsId?: Resolver<Maybe<ResolversTypes['Polymorphic']>, ParentType, ContextType, RequireFields<QuerygetAccountExternalAccountsIdArgs, 'id'>>;
  getAccountPeople?: Resolver<Maybe<ResolversTypes['V1AccountPeople2']>, ParentType, ContextType, RequireFields<QuerygetAccountPeopleArgs, never>>;
  getAccountPeoplePerson?: Resolver<Maybe<ResolversTypes['Person']>, ParentType, ContextType, RequireFields<QuerygetAccountPeoplePersonArgs, 'person'>>;
  getAccountPersons?: Resolver<Maybe<ResolversTypes['V1AccountPersons2']>, ParentType, ContextType, RequireFields<QuerygetAccountPersonsArgs, never>>;
  getAccountPersonsPerson?: Resolver<Maybe<ResolversTypes['Person']>, ParentType, ContextType, RequireFields<QuerygetAccountPersonsPersonArgs, 'person'>>;
  getAccounts?: Resolver<Maybe<ResolversTypes['V1Accounts2']>, ParentType, ContextType, RequireFields<QuerygetAccountsArgs, never>>;
  getAccountsAccount?: Resolver<Maybe<ResolversTypes['Account3']>, ParentType, ContextType, RequireFields<QuerygetAccountsAccountArgs, 'account'>>;
  getAccountsAccountBankAccountsId?: Resolver<Maybe<ResolversTypes['Polymorphic']>, ParentType, ContextType, RequireFields<QuerygetAccountsAccountBankAccountsIdArgs, 'account' | 'id'>>;
  getAccountsAccountCapabilities?: Resolver<Maybe<ResolversTypes['ListAccountCapability']>, ParentType, ContextType, RequireFields<QuerygetAccountsAccountCapabilitiesArgs, 'account'>>;
  getAccountsAccountCapabilitiesCapability?: Resolver<Maybe<ResolversTypes['Capability']>, ParentType, ContextType, RequireFields<QuerygetAccountsAccountCapabilitiesCapabilityArgs, 'account' | 'capability'>>;
  getAccountsAccountExternalAccounts?: Resolver<Maybe<ResolversTypes['ExternalAccountList']>, ParentType, ContextType, RequireFields<QuerygetAccountsAccountExternalAccountsArgs, 'account'>>;
  getAccountsAccountExternalAccountsId?: Resolver<Maybe<ResolversTypes['Polymorphic']>, ParentType, ContextType, RequireFields<QuerygetAccountsAccountExternalAccountsIdArgs, 'account' | 'id'>>;
  getAccountsAccountPeople?: Resolver<Maybe<ResolversTypes['V1AccountPeople2']>, ParentType, ContextType, RequireFields<QuerygetAccountsAccountPeopleArgs, 'account'>>;
  getAccountsAccountPeoplePerson?: Resolver<Maybe<ResolversTypes['Person']>, ParentType, ContextType, RequireFields<QuerygetAccountsAccountPeoplePersonArgs, 'account' | 'person'>>;
  getAccountsAccountPersons?: Resolver<Maybe<ResolversTypes['V1AccountPersons2']>, ParentType, ContextType, RequireFields<QuerygetAccountsAccountPersonsArgs, 'account'>>;
  getAccountsAccountPersonsPerson?: Resolver<Maybe<ResolversTypes['Person']>, ParentType, ContextType, RequireFields<QuerygetAccountsAccountPersonsPersonArgs, 'account' | 'person'>>;
  getApplePayDomains?: Resolver<Maybe<ResolversTypes['ApplePayDomainList']>, ParentType, ContextType, RequireFields<QuerygetApplePayDomainsArgs, never>>;
  getApplePayDomainsDomain?: Resolver<Maybe<ResolversTypes['ApplePayDomain']>, ParentType, ContextType, RequireFields<QuerygetApplePayDomainsDomainArgs, 'domain'>>;
  getApplicationFees?: Resolver<Maybe<ResolversTypes['V1ApplicationFees2']>, ParentType, ContextType, RequireFields<QuerygetApplicationFeesArgs, never>>;
  getApplicationFeesFeeRefundsId?: Resolver<Maybe<ResolversTypes['FeeRefund']>, ParentType, ContextType, RequireFields<QuerygetApplicationFeesFeeRefundsIdArgs, 'fee' | 'id'>>;
  getApplicationFeesId?: Resolver<Maybe<ResolversTypes['ApplicationFee']>, ParentType, ContextType, RequireFields<QuerygetApplicationFeesIdArgs, 'id'>>;
  getApplicationFeesIdRefunds?: Resolver<Maybe<ResolversTypes['FeeRefundList']>, ParentType, ContextType, RequireFields<QuerygetApplicationFeesIdRefundsArgs, 'id'>>;
  getBalance?: Resolver<Maybe<ResolversTypes['Balance']>, ParentType, ContextType, RequireFields<QuerygetBalanceArgs, never>>;
  getBalanceHistory?: Resolver<Maybe<ResolversTypes['BalanceTransactionsList']>, ParentType, ContextType, RequireFields<QuerygetBalanceHistoryArgs, never>>;
  getBalanceHistoryId?: Resolver<Maybe<ResolversTypes['BalanceTransaction3']>, ParentType, ContextType, RequireFields<QuerygetBalanceHistoryIdArgs, 'id'>>;
  getBalanceTransactions?: Resolver<Maybe<ResolversTypes['BalanceTransactionsList']>, ParentType, ContextType, RequireFields<QuerygetBalanceTransactionsArgs, never>>;
  getBalanceTransactionsId?: Resolver<Maybe<ResolversTypes['BalanceTransaction3']>, ParentType, ContextType, RequireFields<QuerygetBalanceTransactionsIdArgs, 'id'>>;
  getBillingPortalConfigurations?: Resolver<Maybe<ResolversTypes['V1BillingPortalConfigurations2']>, ParentType, ContextType, RequireFields<QuerygetBillingPortalConfigurationsArgs, never>>;
  getBillingPortalConfigurationsConfiguration?: Resolver<Maybe<ResolversTypes['BillingPortalConfiguration']>, ParentType, ContextType, RequireFields<QuerygetBillingPortalConfigurationsConfigurationArgs, 'configuration'>>;
  getBitcoinReceivers?: Resolver<Maybe<ResolversTypes['V1BitcoinReceivers2']>, ParentType, ContextType, RequireFields<QuerygetBitcoinReceiversArgs, never>>;
  getBitcoinReceiversId?: Resolver<Maybe<ResolversTypes['BitcoinReceiver']>, ParentType, ContextType, RequireFields<QuerygetBitcoinReceiversIdArgs, 'id'>>;
  getBitcoinReceiversReceiverTransactions?: Resolver<Maybe<ResolversTypes['BitcoinTransactionList']>, ParentType, ContextType, RequireFields<QuerygetBitcoinReceiversReceiverTransactionsArgs, 'receiver'>>;
  getBitcoinTransactions?: Resolver<Maybe<ResolversTypes['BitcoinTransactionList']>, ParentType, ContextType, RequireFields<QuerygetBitcoinTransactionsArgs, never>>;
  getCharges?: Resolver<Maybe<ResolversTypes['V1Charges2']>, ParentType, ContextType, RequireFields<QuerygetChargesArgs, never>>;
  getChargesCharge?: Resolver<Maybe<ResolversTypes['Charge2']>, ParentType, ContextType, RequireFields<QuerygetChargesChargeArgs, 'charge'>>;
  getChargesChargeDispute?: Resolver<Maybe<ResolversTypes['Dispute']>, ParentType, ContextType, RequireFields<QuerygetChargesChargeDisputeArgs, 'charge'>>;
  getChargesChargeRefunds?: Resolver<Maybe<ResolversTypes['RefundList2']>, ParentType, ContextType, RequireFields<QuerygetChargesChargeRefundsArgs, 'charge'>>;
  getChargesChargeRefundsRefund?: Resolver<Maybe<ResolversTypes['Refund']>, ParentType, ContextType, RequireFields<QuerygetChargesChargeRefundsRefundArgs, 'charge' | 'refund'>>;
  getCheckoutSessions?: Resolver<Maybe<ResolversTypes['PaymentPagesCheckoutSessionList']>, ParentType, ContextType, RequireFields<QuerygetCheckoutSessionsArgs, never>>;
  getCheckoutSessionsSession?: Resolver<Maybe<ResolversTypes['CheckoutSession']>, ParentType, ContextType, RequireFields<QuerygetCheckoutSessionsSessionArgs, 'session'>>;
  getCheckoutSessionsSessionLineItems?: Resolver<Maybe<ResolversTypes['PaymentPagesCheckoutSessionListLineItems']>, ParentType, ContextType, RequireFields<QuerygetCheckoutSessionsSessionLineItemsArgs, 'session'>>;
  getCountrySpecs?: Resolver<Maybe<ResolversTypes['V1CountrySpecs2']>, ParentType, ContextType, RequireFields<QuerygetCountrySpecsArgs, never>>;
  getCountrySpecsCountry?: Resolver<Maybe<ResolversTypes['CountrySpec']>, ParentType, ContextType, RequireFields<QuerygetCountrySpecsCountryArgs, 'country'>>;
  getCoupons?: Resolver<Maybe<ResolversTypes['V1Coupons2']>, ParentType, ContextType, RequireFields<QuerygetCouponsArgs, never>>;
  getCouponsCoupon?: Resolver<Maybe<ResolversTypes['Coupon']>, ParentType, ContextType, RequireFields<QuerygetCouponsCouponArgs, 'coupon'>>;
  getCreditNotes?: Resolver<Maybe<ResolversTypes['CreditNotesList']>, ParentType, ContextType, RequireFields<QuerygetCreditNotesArgs, never>>;
  getCreditNotesCreditNoteLines?: Resolver<Maybe<ResolversTypes['CreditNoteLinesList']>, ParentType, ContextType, RequireFields<QuerygetCreditNotesCreditNoteLinesArgs, 'creditNote'>>;
  getCreditNotesId?: Resolver<Maybe<ResolversTypes['CreditNote']>, ParentType, ContextType, RequireFields<QuerygetCreditNotesIdArgs, 'id'>>;
  getCreditNotesPreview?: Resolver<Maybe<ResolversTypes['CreditNote']>, ParentType, ContextType, RequireFields<QuerygetCreditNotesPreviewArgs, 'invoice'>>;
  getCreditNotesPreviewLines?: Resolver<Maybe<ResolversTypes['CreditNoteLinesList']>, ParentType, ContextType, RequireFields<QuerygetCreditNotesPreviewLinesArgs, 'invoice'>>;
  getCustomers?: Resolver<Maybe<ResolversTypes['V1Customers2']>, ParentType, ContextType, RequireFields<QuerygetCustomersArgs, never>>;
  getCustomersCustomer?: Resolver<Maybe<ResolversTypes['V1Customer2']>, ParentType, ContextType, RequireFields<QuerygetCustomersCustomerArgs, 'customer'>>;
  getCustomersCustomerBalanceTransactions?: Resolver<Maybe<ResolversTypes['CustomerBalanceTransactionList']>, ParentType, ContextType, RequireFields<QuerygetCustomersCustomerBalanceTransactionsArgs, 'customer'>>;
  getCustomersCustomerBalanceTransactionsTransaction?: Resolver<Maybe<ResolversTypes['CustomerBalanceTransaction2']>, ParentType, ContextType, RequireFields<QuerygetCustomersCustomerBalanceTransactionsTransactionArgs, 'customer' | 'transaction'>>;
  getCustomersCustomerBankAccounts?: Resolver<Maybe<ResolversTypes['BankAccountList']>, ParentType, ContextType, RequireFields<QuerygetCustomersCustomerBankAccountsArgs, 'customer'>>;
  getCustomersCustomerBankAccountsId?: Resolver<Maybe<ResolversTypes['BankAccount7']>, ParentType, ContextType, RequireFields<QuerygetCustomersCustomerBankAccountsIdArgs, 'customer' | 'id'>>;
  getCustomersCustomerCards?: Resolver<Maybe<ResolversTypes['CardList']>, ParentType, ContextType, RequireFields<QuerygetCustomersCustomerCardsArgs, 'customer'>>;
  getCustomersCustomerCardsId?: Resolver<Maybe<ResolversTypes['Card2']>, ParentType, ContextType, RequireFields<QuerygetCustomersCustomerCardsIdArgs, 'customer' | 'id'>>;
  getCustomersCustomerDiscount?: Resolver<Maybe<ResolversTypes['Discount']>, ParentType, ContextType, RequireFields<QuerygetCustomersCustomerDiscountArgs, 'customer'>>;
  getCustomersCustomerSources?: Resolver<Maybe<ResolversTypes['ApmsSourcesSourceList']>, ParentType, ContextType, RequireFields<QuerygetCustomersCustomerSourcesArgs, 'customer'>>;
  getCustomersCustomerSourcesId?: Resolver<Maybe<ResolversTypes['PaymentSource']>, ParentType, ContextType, RequireFields<QuerygetCustomersCustomerSourcesIdArgs, 'customer' | 'id'>>;
  getCustomersCustomerSubscriptions?: Resolver<Maybe<ResolversTypes['SubscriptionList']>, ParentType, ContextType, RequireFields<QuerygetCustomersCustomerSubscriptionsArgs, 'customer'>>;
  getCustomersCustomerSubscriptionsSubscriptionExposedId?: Resolver<Maybe<ResolversTypes['Subscription5']>, ParentType, ContextType, RequireFields<QuerygetCustomersCustomerSubscriptionsSubscriptionExposedIdArgs, 'customer' | 'subscriptionExposedId'>>;
  getCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount?: Resolver<Maybe<ResolversTypes['Discount']>, ParentType, ContextType, RequireFields<QuerygetCustomersCustomerSubscriptionsSubscriptionExposedIdDiscountArgs, 'customer' | 'subscriptionExposedId'>>;
  getCustomersCustomerTaxIds?: Resolver<Maybe<ResolversTypes['TaxIDsList2']>, ParentType, ContextType, RequireFields<QuerygetCustomersCustomerTaxIdsArgs, 'customer'>>;
  getCustomersCustomerTaxIdsId?: Resolver<Maybe<ResolversTypes['TaxId3']>, ParentType, ContextType, RequireFields<QuerygetCustomersCustomerTaxIdsIdArgs, 'customer' | 'id'>>;
  getDisputes?: Resolver<Maybe<ResolversTypes['V1Disputes2']>, ParentType, ContextType, RequireFields<QuerygetDisputesArgs, never>>;
  getDisputesDispute?: Resolver<Maybe<ResolversTypes['Dispute']>, ParentType, ContextType, RequireFields<QuerygetDisputesDisputeArgs, 'dispute'>>;
  getEvents?: Resolver<Maybe<ResolversTypes['NotificationEventList']>, ParentType, ContextType, RequireFields<QuerygetEventsArgs, never>>;
  getEventsId?: Resolver<Maybe<ResolversTypes['Event']>, ParentType, ContextType, RequireFields<QuerygetEventsIdArgs, 'id'>>;
  getExchangeRates?: Resolver<Maybe<ResolversTypes['V1ExchangeRates2']>, ParentType, ContextType, RequireFields<QuerygetExchangeRatesArgs, never>>;
  getExchangeRatesRateId?: Resolver<Maybe<ResolversTypes['ExchangeRate2']>, ParentType, ContextType, RequireFields<QuerygetExchangeRatesRateIdArgs, 'rateId'>>;
  getFileLinks?: Resolver<Maybe<ResolversTypes['V1FileLinks2']>, ParentType, ContextType, RequireFields<QuerygetFileLinksArgs, never>>;
  getFileLinksLink?: Resolver<Maybe<ResolversTypes['FileLink']>, ParentType, ContextType, RequireFields<QuerygetFileLinksLinkArgs, 'link'>>;
  getFiles?: Resolver<Maybe<ResolversTypes['V1Files2']>, ParentType, ContextType, RequireFields<QuerygetFilesArgs, never>>;
  getFilesFile?: Resolver<Maybe<ResolversTypes['File3']>, ParentType, ContextType, RequireFields<QuerygetFilesFileArgs, 'file'>>;
  getIdentityVerificationReports?: Resolver<Maybe<ResolversTypes['V1IdentityVerificationReports2']>, ParentType, ContextType, RequireFields<QuerygetIdentityVerificationReportsArgs, never>>;
  getIdentityVerificationReportsReport?: Resolver<Maybe<ResolversTypes['IdentityVerificationReport']>, ParentType, ContextType, RequireFields<QuerygetIdentityVerificationReportsReportArgs, 'report'>>;
  getIdentityVerificationSessions?: Resolver<Maybe<ResolversTypes['V1IdentityVerificationSessions2']>, ParentType, ContextType, RequireFields<QuerygetIdentityVerificationSessionsArgs, never>>;
  getIdentityVerificationSessionsSession?: Resolver<Maybe<ResolversTypes['IdentityVerificationSession']>, ParentType, ContextType, RequireFields<QuerygetIdentityVerificationSessionsSessionArgs, 'session'>>;
  getInvoiceitems?: Resolver<Maybe<ResolversTypes['V1Invoiceitems2']>, ParentType, ContextType, RequireFields<QuerygetInvoiceitemsArgs, never>>;
  getInvoiceitemsInvoiceitem?: Resolver<Maybe<ResolversTypes['Invoiceitem']>, ParentType, ContextType, RequireFields<QuerygetInvoiceitemsInvoiceitemArgs, 'invoiceitem'>>;
  getInvoices?: Resolver<Maybe<ResolversTypes['InvoicesList']>, ParentType, ContextType, RequireFields<QuerygetInvoicesArgs, never>>;
  getInvoicesInvoice?: Resolver<Maybe<ResolversTypes['Invoice11']>, ParentType, ContextType, RequireFields<QuerygetInvoicesInvoiceArgs, 'invoice'>>;
  getInvoicesInvoiceLines?: Resolver<Maybe<ResolversTypes['InvoiceLinesList2']>, ParentType, ContextType, RequireFields<QuerygetInvoicesInvoiceLinesArgs, 'invoice'>>;
  getInvoicesUpcoming?: Resolver<Maybe<ResolversTypes['Invoice11']>, ParentType, ContextType, RequireFields<QuerygetInvoicesUpcomingArgs, never>>;
  getInvoicesUpcomingLines?: Resolver<Maybe<ResolversTypes['InvoiceLinesList2']>, ParentType, ContextType, RequireFields<QuerygetInvoicesUpcomingLinesArgs, never>>;
  getIssuerFraudRecords?: Resolver<Maybe<ResolversTypes['RadarIssuerFraudRecordList']>, ParentType, ContextType, RequireFields<QuerygetIssuerFraudRecordsArgs, never>>;
  getIssuerFraudRecordsIssuerFraudRecord?: Resolver<Maybe<ResolversTypes['IssuerFraudRecord']>, ParentType, ContextType, RequireFields<QuerygetIssuerFraudRecordsIssuerFraudRecordArgs, 'issuerFraudRecord'>>;
  getIssuingAuthorizations?: Resolver<Maybe<ResolversTypes['V1IssuingAuthorizations2']>, ParentType, ContextType, RequireFields<QuerygetIssuingAuthorizationsArgs, never>>;
  getIssuingAuthorizationsAuthorization?: Resolver<Maybe<ResolversTypes['IssuingAuthorization']>, ParentType, ContextType, RequireFields<QuerygetIssuingAuthorizationsAuthorizationArgs, 'authorization'>>;
  getIssuingCardholders?: Resolver<Maybe<ResolversTypes['V1IssuingCardholders2']>, ParentType, ContextType, RequireFields<QuerygetIssuingCardholdersArgs, never>>;
  getIssuingCardholdersCardholder?: Resolver<Maybe<ResolversTypes['IssuingCardholder']>, ParentType, ContextType, RequireFields<QuerygetIssuingCardholdersCardholderArgs, 'cardholder'>>;
  getIssuingCards?: Resolver<Maybe<ResolversTypes['V1IssuingCards2']>, ParentType, ContextType, RequireFields<QuerygetIssuingCardsArgs, never>>;
  getIssuingCardsCard?: Resolver<Maybe<ResolversTypes['IssuingCard2']>, ParentType, ContextType, RequireFields<QuerygetIssuingCardsCardArgs, 'card'>>;
  getIssuingDisputes?: Resolver<Maybe<ResolversTypes['IssuingDisputeList']>, ParentType, ContextType, RequireFields<QuerygetIssuingDisputesArgs, never>>;
  getIssuingDisputesDispute?: Resolver<Maybe<ResolversTypes['IssuingDispute']>, ParentType, ContextType, RequireFields<QuerygetIssuingDisputesDisputeArgs, 'dispute'>>;
  getIssuingSettlements?: Resolver<Maybe<ResolversTypes['V1IssuingSettlements2']>, ParentType, ContextType, RequireFields<QuerygetIssuingSettlementsArgs, never>>;
  getIssuingSettlementsSettlement?: Resolver<Maybe<ResolversTypes['IssuingSettlement']>, ParentType, ContextType, RequireFields<QuerygetIssuingSettlementsSettlementArgs, 'settlement'>>;
  getIssuingTransactions?: Resolver<Maybe<ResolversTypes['V1IssuingTransactions2']>, ParentType, ContextType, RequireFields<QuerygetIssuingTransactionsArgs, never>>;
  getIssuingTransactionsTransaction?: Resolver<Maybe<ResolversTypes['IssuingTransaction']>, ParentType, ContextType, RequireFields<QuerygetIssuingTransactionsTransactionArgs, 'transaction'>>;
  getMandatesMandate?: Resolver<Maybe<ResolversTypes['Mandate6']>, ParentType, ContextType, RequireFields<QuerygetMandatesMandateArgs, 'mandate'>>;
  getOrderReturns?: Resolver<Maybe<ResolversTypes['V1OrderReturns2']>, ParentType, ContextType, RequireFields<QuerygetOrderReturnsArgs, never>>;
  getOrderReturnsId?: Resolver<Maybe<ResolversTypes['OrderReturn']>, ParentType, ContextType, RequireFields<QuerygetOrderReturnsIdArgs, 'id'>>;
  getOrders?: Resolver<Maybe<ResolversTypes['V1Orders2']>, ParentType, ContextType, RequireFields<QuerygetOrdersArgs, never>>;
  getOrdersId?: Resolver<Maybe<ResolversTypes['Order3']>, ParentType, ContextType, RequireFields<QuerygetOrdersIdArgs, 'id'>>;
  getPaymentIntents?: Resolver<Maybe<ResolversTypes['PaymentFlowsPaymentIntentList']>, ParentType, ContextType, RequireFields<QuerygetPaymentIntentsArgs, never>>;
  getPaymentIntentsIntent?: Resolver<Maybe<ResolversTypes['PaymentIntent7']>, ParentType, ContextType, RequireFields<QuerygetPaymentIntentsIntentArgs, 'intent'>>;
  getPaymentMethods?: Resolver<Maybe<ResolversTypes['PaymentFlowsPaymentMethodList']>, ParentType, ContextType, RequireFields<QuerygetPaymentMethodsArgs, 'customer' | 'type'>>;
  getPaymentMethodsPaymentMethod?: Resolver<Maybe<ResolversTypes['PaymentMethod3']>, ParentType, ContextType, RequireFields<QuerygetPaymentMethodsPaymentMethodArgs, 'paymentMethod'>>;
  getPayouts?: Resolver<Maybe<ResolversTypes['PayoutList']>, ParentType, ContextType, RequireFields<QuerygetPayoutsArgs, never>>;
  getPayoutsPayout?: Resolver<Maybe<ResolversTypes['Payout']>, ParentType, ContextType, RequireFields<QuerygetPayoutsPayoutArgs, 'payout'>>;
  getPlans?: Resolver<Maybe<ResolversTypes['PlanList']>, ParentType, ContextType, RequireFields<QuerygetPlansArgs, never>>;
  getPlansPlan?: Resolver<Maybe<ResolversTypes['Plan4']>, ParentType, ContextType, RequireFields<QuerygetPlansPlanArgs, 'plan'>>;
  getPrices?: Resolver<Maybe<ResolversTypes['PriceList']>, ParentType, ContextType, RequireFields<QuerygetPricesArgs, never>>;
  getPricesPrice?: Resolver<Maybe<ResolversTypes['Price3']>, ParentType, ContextType, RequireFields<QuerygetPricesPriceArgs, 'price'>>;
  getProducts?: Resolver<Maybe<ResolversTypes['V1Products2']>, ParentType, ContextType, RequireFields<QuerygetProductsArgs, never>>;
  getProductsId?: Resolver<Maybe<ResolversTypes['Product14']>, ParentType, ContextType, RequireFields<QuerygetProductsIdArgs, 'id'>>;
  getPromotionCodes?: Resolver<Maybe<ResolversTypes['V1PromotionCodes2']>, ParentType, ContextType, RequireFields<QuerygetPromotionCodesArgs, never>>;
  getPromotionCodesPromotionCode?: Resolver<Maybe<ResolversTypes['PromotionCode11']>, ParentType, ContextType, RequireFields<QuerygetPromotionCodesPromotionCodeArgs, 'promotionCode'>>;
  getQuotes?: Resolver<Maybe<ResolversTypes['V1Quotes2']>, ParentType, ContextType, RequireFields<QuerygetQuotesArgs, never>>;
  getQuotesQuote?: Resolver<Maybe<ResolversTypes['Quote2']>, ParentType, ContextType, RequireFields<QuerygetQuotesQuoteArgs, 'quote'>>;
  getQuotesQuoteComputedUpfrontLineItems?: Resolver<Maybe<ResolversTypes['QuotesResourceListLineItems2']>, ParentType, ContextType, RequireFields<QuerygetQuotesQuoteComputedUpfrontLineItemsArgs, 'quote'>>;
  getQuotesQuoteLineItems?: Resolver<Maybe<ResolversTypes['QuotesResourceListLineItems2']>, ParentType, ContextType, RequireFields<QuerygetQuotesQuoteLineItemsArgs, 'quote'>>;
  getQuotesQuotePdf?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, RequireFields<QuerygetQuotesQuotePdfArgs, 'quote'>>;
  getRadarEarlyFraudWarnings?: Resolver<Maybe<ResolversTypes['RadarEarlyFraudWarningList']>, ParentType, ContextType, RequireFields<QuerygetRadarEarlyFraudWarningsArgs, never>>;
  getRadarEarlyFraudWarningsEarlyFraudWarning?: Resolver<Maybe<ResolversTypes['RadarEarlyFraudWarning']>, ParentType, ContextType, RequireFields<QuerygetRadarEarlyFraudWarningsEarlyFraudWarningArgs, 'earlyFraudWarning'>>;
  getRadarValueListItems?: Resolver<Maybe<ResolversTypes['V1RadarValueListItems2']>, ParentType, ContextType, RequireFields<QuerygetRadarValueListItemsArgs, 'valueList'>>;
  getRadarValueListItemsItem?: Resolver<Maybe<ResolversTypes['RadarValueListItem']>, ParentType, ContextType, RequireFields<QuerygetRadarValueListItemsItemArgs, 'item'>>;
  getRadarValueLists?: Resolver<Maybe<ResolversTypes['V1RadarValueLists2']>, ParentType, ContextType, RequireFields<QuerygetRadarValueListsArgs, never>>;
  getRadarValueListsValueList?: Resolver<Maybe<ResolversTypes['RadarValueList']>, ParentType, ContextType, RequireFields<QuerygetRadarValueListsValueListArgs, 'valueList'>>;
  getRecipients?: Resolver<Maybe<ResolversTypes['V1Recipients2']>, ParentType, ContextType, RequireFields<QuerygetRecipientsArgs, never>>;
  getRecipientsId?: Resolver<Maybe<ResolversTypes['V1Recipient2']>, ParentType, ContextType, RequireFields<QuerygetRecipientsIdArgs, 'id'>>;
  getRefunds?: Resolver<Maybe<ResolversTypes['V1Refunds2']>, ParentType, ContextType, RequireFields<QuerygetRefundsArgs, never>>;
  getRefundsRefund?: Resolver<Maybe<ResolversTypes['Refund']>, ParentType, ContextType, RequireFields<QuerygetRefundsRefundArgs, 'refund'>>;
  getReportingReportRuns?: Resolver<Maybe<ResolversTypes['V1ReportingReportRuns2']>, ParentType, ContextType, RequireFields<QuerygetReportingReportRunsArgs, never>>;
  getReportingReportRunsReportRun?: Resolver<Maybe<ResolversTypes['ReportingReportRun']>, ParentType, ContextType, RequireFields<QuerygetReportingReportRunsReportRunArgs, 'reportRun'>>;
  getReportingReportTypes?: Resolver<Maybe<ResolversTypes['FinancialReportingFinanceReportTypeList']>, ParentType, ContextType, RequireFields<QuerygetReportingReportTypesArgs, never>>;
  getReportingReportTypesReportType?: Resolver<Maybe<ResolversTypes['ReportingReportType']>, ParentType, ContextType, RequireFields<QuerygetReportingReportTypesReportTypeArgs, 'reportType'>>;
  getReviews?: Resolver<Maybe<ResolversTypes['V1Reviews2']>, ParentType, ContextType, RequireFields<QuerygetReviewsArgs, never>>;
  getReviewsReview?: Resolver<Maybe<ResolversTypes['Review3']>, ParentType, ContextType, RequireFields<QuerygetReviewsReviewArgs, 'review'>>;
  getSetupAttempts?: Resolver<Maybe<ResolversTypes['PaymentFlowsSetupIntentSetupAttemptList']>, ParentType, ContextType, RequireFields<QuerygetSetupAttemptsArgs, 'setupIntent'>>;
  getSetupIntents?: Resolver<Maybe<ResolversTypes['PaymentFlowsSetupIntentList']>, ParentType, ContextType, RequireFields<QuerygetSetupIntentsArgs, never>>;
  getSetupIntentsIntent?: Resolver<Maybe<ResolversTypes['SetupIntent2']>, ParentType, ContextType, RequireFields<QuerygetSetupIntentsIntentArgs, 'intent'>>;
  getSigmaScheduledQueryRuns?: Resolver<Maybe<ResolversTypes['V1SigmaScheduledQueryRuns2']>, ParentType, ContextType, RequireFields<QuerygetSigmaScheduledQueryRunsArgs, never>>;
  getSigmaScheduledQueryRunsScheduledQueryRun?: Resolver<Maybe<ResolversTypes['ScheduledQueryRun']>, ParentType, ContextType, RequireFields<QuerygetSigmaScheduledQueryRunsScheduledQueryRunArgs, 'scheduledQueryRun'>>;
  getSkus?: Resolver<Maybe<ResolversTypes['V1Skus2']>, ParentType, ContextType, RequireFields<QuerygetSkusArgs, never>>;
  getSkusId?: Resolver<Maybe<ResolversTypes['V1Skus4']>, ParentType, ContextType, RequireFields<QuerygetSkusIdArgs, 'id'>>;
  getSourcesSource?: Resolver<Maybe<ResolversTypes['Source12']>, ParentType, ContextType, RequireFields<QuerygetSourcesSourceArgs, 'source'>>;
  getSourcesSourceMandateNotificationsMandateNotification?: Resolver<Maybe<ResolversTypes['SourceMandateNotification']>, ParentType, ContextType, RequireFields<QuerygetSourcesSourceMandateNotificationsMandateNotificationArgs, 'mandateNotification' | 'source'>>;
  getSourcesSourceSourceTransactions?: Resolver<Maybe<ResolversTypes['ApmsSourcesSourceTransactionList']>, ParentType, ContextType, RequireFields<QuerygetSourcesSourceSourceTransactionsArgs, 'source'>>;
  getSourcesSourceSourceTransactionsSourceTransaction?: Resolver<Maybe<ResolversTypes['SourceTransaction']>, ParentType, ContextType, RequireFields<QuerygetSourcesSourceSourceTransactionsSourceTransactionArgs, 'source' | 'sourceTransaction'>>;
  getSubscriptionItems?: Resolver<Maybe<ResolversTypes['V1SubscriptionItems2']>, ParentType, ContextType, RequireFields<QuerygetSubscriptionItemsArgs, 'subscription'>>;
  getSubscriptionItemsItem?: Resolver<Maybe<ResolversTypes['SubscriptionItem']>, ParentType, ContextType, RequireFields<QuerygetSubscriptionItemsItemArgs, 'item'>>;
  getSubscriptionItemsSubscriptionItemUsageRecordSummaries?: Resolver<Maybe<ResolversTypes['V1SubscriptionItemUsageRecordSummaries2']>, ParentType, ContextType, RequireFields<QuerygetSubscriptionItemsSubscriptionItemUsageRecordSummariesArgs, 'subscriptionItem'>>;
  getSubscriptionSchedules?: Resolver<Maybe<ResolversTypes['V1SubscriptionSchedules2']>, ParentType, ContextType, RequireFields<QuerygetSubscriptionSchedulesArgs, never>>;
  getSubscriptionSchedulesSchedule?: Resolver<Maybe<ResolversTypes['SubscriptionSchedule2']>, ParentType, ContextType, RequireFields<QuerygetSubscriptionSchedulesScheduleArgs, 'schedule'>>;
  getSubscriptions?: Resolver<Maybe<ResolversTypes['V1Subscriptions2']>, ParentType, ContextType, RequireFields<QuerygetSubscriptionsArgs, never>>;
  getSubscriptionsSubscriptionExposedId?: Resolver<Maybe<ResolversTypes['Subscription5']>, ParentType, ContextType, RequireFields<QuerygetSubscriptionsSubscriptionExposedIdArgs, 'subscriptionExposedId'>>;
  getTaxCodes?: Resolver<Maybe<ResolversTypes['TaxProductResourceTaxCodeList']>, ParentType, ContextType, RequireFields<QuerygetTaxCodesArgs, never>>;
  getTaxCodesId?: Resolver<Maybe<ResolversTypes['TaxCode6']>, ParentType, ContextType, RequireFields<QuerygetTaxCodesIdArgs, 'id'>>;
  getTaxRates?: Resolver<Maybe<ResolversTypes['V1TaxRates2']>, ParentType, ContextType, RequireFields<QuerygetTaxRatesArgs, never>>;
  getTaxRatesTaxRate?: Resolver<Maybe<ResolversTypes['TaxRate']>, ParentType, ContextType, RequireFields<QuerygetTaxRatesTaxRateArgs, 'taxRate'>>;
  getTerminalLocations?: Resolver<Maybe<ResolversTypes['TerminalLocationLocationList']>, ParentType, ContextType, RequireFields<QuerygetTerminalLocationsArgs, never>>;
  getTerminalLocationsLocation?: Resolver<Maybe<ResolversTypes['TerminalLocation']>, ParentType, ContextType, RequireFields<QuerygetTerminalLocationsLocationArgs, 'location'>>;
  getTerminalReaders?: Resolver<Maybe<ResolversTypes['TerminalReaderRetrieveReader']>, ParentType, ContextType, RequireFields<QuerygetTerminalReadersArgs, never>>;
  getTerminalReadersReader?: Resolver<Maybe<ResolversTypes['TerminalReader']>, ParentType, ContextType, RequireFields<QuerygetTerminalReadersReaderArgs, 'reader'>>;
  getTokensToken?: Resolver<Maybe<ResolversTypes['Token3']>, ParentType, ContextType, RequireFields<QuerygetTokensTokenArgs, 'token'>>;
  getTopups?: Resolver<Maybe<ResolversTypes['TopupList']>, ParentType, ContextType, RequireFields<QuerygetTopupsArgs, never>>;
  getTopupsTopup?: Resolver<Maybe<ResolversTypes['Topup']>, ParentType, ContextType, RequireFields<QuerygetTopupsTopupArgs, 'topup'>>;
  getTransfers?: Resolver<Maybe<ResolversTypes['TransferList']>, ParentType, ContextType, RequireFields<QuerygetTransfersArgs, never>>;
  getTransfersIdReversals?: Resolver<Maybe<ResolversTypes['TransferReversalList']>, ParentType, ContextType, RequireFields<QuerygetTransfersIdReversalsArgs, 'id'>>;
  getTransfersTransfer?: Resolver<Maybe<ResolversTypes['Transfer2']>, ParentType, ContextType, RequireFields<QuerygetTransfersTransferArgs, 'transfer'>>;
  getTransfersTransferReversalsId?: Resolver<Maybe<ResolversTypes['TransferReversal2']>, ParentType, ContextType, RequireFields<QuerygetTransfersTransferReversalsIdArgs, 'id' | 'transfer'>>;
  getWebhookEndpoints?: Resolver<Maybe<ResolversTypes['V1WebhookEndpoints2']>, ParentType, ContextType, RequireFields<QuerygetWebhookEndpointsArgs, never>>;
  getWebhookEndpointsWebhookEndpoint?: Resolver<Maybe<ResolversTypes['WebhookEndpoint']>, ParentType, ContextType, RequireFields<QuerygetWebhookEndpointsWebhookEndpointArgs, 'webhookEndpoint'>>;
}>;

export type ContinentResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Continent'] = ResolversParentTypes['Continent']> = ResolversObject<{
  code?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  countries?: Resolver<Array<ResolversTypes['Country']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CountryResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Country'] = ResolversParentTypes['Country']> = ResolversObject<{
  code?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  native?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  phone?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  continent?: Resolver<ResolversTypes['Continent'], ParentType, ContextType>;
  capital?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  currency?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  languages?: Resolver<Array<ResolversTypes['Language']>, ParentType, ContextType>;
  emoji?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  emojiU?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  states?: Resolver<Array<ResolversTypes['State']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type LanguageResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Language'] = ResolversParentTypes['Language']> = ResolversObject<{
  code?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  native?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  rtl?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type StateResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['State'] = ResolversParentTypes['State']> = ResolversObject<{
  code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  country?: Resolver<ResolversTypes['Country'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface UploadScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['Upload'], any> {
  name: 'Upload';
}

export type MutationResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Mutation'] = ResolversParentTypes['Mutation']> = ResolversObject<{
  addItem?: Resolver<ResolversTypes['Cart'], ParentType, ContextType, RequireFields<MutationaddItemArgs, 'input'>>;
  setItems?: Resolver<ResolversTypes['Cart'], ParentType, ContextType, RequireFields<MutationsetItemsArgs, 'input'>>;
  updateItem?: Resolver<ResolversTypes['Cart'], ParentType, ContextType, RequireFields<MutationupdateItemArgs, 'input'>>;
  incrementItemQuantity?: Resolver<ResolversTypes['Cart'], ParentType, ContextType, RequireFields<MutationincrementItemQuantityArgs, 'input'>>;
  decrementItemQuantity?: Resolver<ResolversTypes['Cart'], ParentType, ContextType, RequireFields<MutationdecrementItemQuantityArgs, 'input'>>;
  removeItem?: Resolver<ResolversTypes['Cart'], ParentType, ContextType, RequireFields<MutationremoveItemArgs, 'input'>>;
  emptyCart?: Resolver<ResolversTypes['Cart'], ParentType, ContextType, RequireFields<MutationemptyCartArgs, 'input'>>;
  updateCart?: Resolver<ResolversTypes['Cart'], ParentType, ContextType, RequireFields<MutationupdateCartArgs, 'input'>>;
  deleteCart?: Resolver<ResolversTypes['DeletePayload'], ParentType, ContextType, RequireFields<MutationdeleteCartArgs, 'input'>>;
  checkout?: Resolver<Maybe<ResolversTypes['Order']>, ParentType, ContextType, RequireFields<MutationcheckoutArgs, 'input'>>;
  deleteAccount?: Resolver<Maybe<ResolversTypes['DeletedAccount']>, ParentType, ContextType, RequireFields<MutationdeleteAccountArgs, never>>;
  deleteAccountBankAccountsId?: Resolver<Maybe<ResolversTypes['DeletedExternalAccount']>, ParentType, ContextType, RequireFields<MutationdeleteAccountBankAccountsIdArgs, 'id'>>;
  deleteAccountExternalAccountsId?: Resolver<Maybe<ResolversTypes['DeletedExternalAccount']>, ParentType, ContextType, RequireFields<MutationdeleteAccountExternalAccountsIdArgs, 'id'>>;
  deleteAccountPeoplePerson?: Resolver<Maybe<ResolversTypes['DeletedPerson']>, ParentType, ContextType, RequireFields<MutationdeleteAccountPeoplePersonArgs, 'person'>>;
  deleteAccountPersonsPerson?: Resolver<Maybe<ResolversTypes['DeletedPerson']>, ParentType, ContextType, RequireFields<MutationdeleteAccountPersonsPersonArgs, 'person'>>;
  deleteAccountsAccount?: Resolver<Maybe<ResolversTypes['DeletedAccount']>, ParentType, ContextType, RequireFields<MutationdeleteAccountsAccountArgs, 'account'>>;
  deleteAccountsAccountBankAccountsId?: Resolver<Maybe<ResolversTypes['DeletedExternalAccount']>, ParentType, ContextType, RequireFields<MutationdeleteAccountsAccountBankAccountsIdArgs, 'account' | 'id'>>;
  deleteAccountsAccountExternalAccountsId?: Resolver<Maybe<ResolversTypes['DeletedExternalAccount']>, ParentType, ContextType, RequireFields<MutationdeleteAccountsAccountExternalAccountsIdArgs, 'account' | 'id'>>;
  deleteAccountsAccountPeoplePerson?: Resolver<Maybe<ResolversTypes['DeletedPerson']>, ParentType, ContextType, RequireFields<MutationdeleteAccountsAccountPeoplePersonArgs, 'account' | 'person'>>;
  deleteAccountsAccountPersonsPerson?: Resolver<Maybe<ResolversTypes['DeletedPerson']>, ParentType, ContextType, RequireFields<MutationdeleteAccountsAccountPersonsPersonArgs, 'account' | 'person'>>;
  deleteApplePayDomainsDomain?: Resolver<Maybe<ResolversTypes['DeletedApplePayDomain']>, ParentType, ContextType, RequireFields<MutationdeleteApplePayDomainsDomainArgs, 'domain'>>;
  deleteCouponsCoupon?: Resolver<Maybe<ResolversTypes['DeletedCoupon']>, ParentType, ContextType, RequireFields<MutationdeleteCouponsCouponArgs, 'coupon'>>;
  deleteCustomersCustomer?: Resolver<Maybe<ResolversTypes['DeletedCustomer']>, ParentType, ContextType, RequireFields<MutationdeleteCustomersCustomerArgs, 'customer'>>;
  deleteCustomersCustomerBankAccountsId?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType, RequireFields<MutationdeleteCustomersCustomerBankAccountsIdArgs, 'customer' | 'id'>>;
  deleteCustomersCustomerCardsId?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType, RequireFields<MutationdeleteCustomersCustomerCardsIdArgs, 'customer' | 'id'>>;
  deleteCustomersCustomerDiscount?: Resolver<Maybe<ResolversTypes['DeletedDiscount']>, ParentType, ContextType, RequireFields<MutationdeleteCustomersCustomerDiscountArgs, 'customer'>>;
  deleteCustomersCustomerSourcesId?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType, RequireFields<MutationdeleteCustomersCustomerSourcesIdArgs, 'customer' | 'id'>>;
  deleteCustomersCustomerSubscriptionsSubscriptionExposedId?: Resolver<Maybe<ResolversTypes['Subscription5']>, ParentType, ContextType, RequireFields<MutationdeleteCustomersCustomerSubscriptionsSubscriptionExposedIdArgs, 'customer' | 'subscriptionExposedId'>>;
  deleteCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount?: Resolver<Maybe<ResolversTypes['DeletedDiscount']>, ParentType, ContextType, RequireFields<MutationdeleteCustomersCustomerSubscriptionsSubscriptionExposedIdDiscountArgs, 'customer' | 'subscriptionExposedId'>>;
  deleteCustomersCustomerTaxIdsId?: Resolver<Maybe<ResolversTypes['DeletedTaxId']>, ParentType, ContextType, RequireFields<MutationdeleteCustomersCustomerTaxIdsIdArgs, 'customer' | 'id'>>;
  deleteEphemeralKeysKey?: Resolver<Maybe<ResolversTypes['EphemeralKey']>, ParentType, ContextType, RequireFields<MutationdeleteEphemeralKeysKeyArgs, 'key'>>;
  deleteInvoiceitemsInvoiceitem?: Resolver<Maybe<ResolversTypes['DeletedInvoiceitem']>, ParentType, ContextType, RequireFields<MutationdeleteInvoiceitemsInvoiceitemArgs, 'invoiceitem'>>;
  deleteInvoicesInvoice?: Resolver<Maybe<ResolversTypes['DeletedInvoice']>, ParentType, ContextType, RequireFields<MutationdeleteInvoicesInvoiceArgs, 'invoice'>>;
  deletePlansPlan?: Resolver<Maybe<ResolversTypes['DeletedPlan']>, ParentType, ContextType, RequireFields<MutationdeletePlansPlanArgs, 'plan'>>;
  deleteProductsId?: Resolver<Maybe<ResolversTypes['DeletedProduct']>, ParentType, ContextType, RequireFields<MutationdeleteProductsIdArgs, 'id'>>;
  deleteRadarValueListItemsItem?: Resolver<Maybe<ResolversTypes['DeletedRadarValueListItem']>, ParentType, ContextType, RequireFields<MutationdeleteRadarValueListItemsItemArgs, 'item'>>;
  deleteRadarValueListsValueList?: Resolver<Maybe<ResolversTypes['DeletedRadarValueList']>, ParentType, ContextType, RequireFields<MutationdeleteRadarValueListsValueListArgs, 'valueList'>>;
  deleteRecipientsId?: Resolver<Maybe<ResolversTypes['DeletedRecipient']>, ParentType, ContextType, RequireFields<MutationdeleteRecipientsIdArgs, 'id'>>;
  deleteSkusId?: Resolver<Maybe<ResolversTypes['DeletedSku']>, ParentType, ContextType, RequireFields<MutationdeleteSkusIdArgs, 'id'>>;
  deleteSubscriptionItemsItem?: Resolver<Maybe<ResolversTypes['DeletedSubscriptionItem']>, ParentType, ContextType, RequireFields<MutationdeleteSubscriptionItemsItemArgs, 'item'>>;
  deleteSubscriptionsSubscriptionExposedId?: Resolver<Maybe<ResolversTypes['Subscription5']>, ParentType, ContextType, RequireFields<MutationdeleteSubscriptionsSubscriptionExposedIdArgs, 'subscriptionExposedId'>>;
  deleteSubscriptionsSubscriptionExposedIdDiscount?: Resolver<Maybe<ResolversTypes['DeletedDiscount']>, ParentType, ContextType, RequireFields<MutationdeleteSubscriptionsSubscriptionExposedIdDiscountArgs, 'subscriptionExposedId'>>;
  deleteTerminalLocationsLocation?: Resolver<Maybe<ResolversTypes['DeletedTerminalLocation']>, ParentType, ContextType, RequireFields<MutationdeleteTerminalLocationsLocationArgs, 'location'>>;
  deleteTerminalReadersReader?: Resolver<Maybe<ResolversTypes['DeletedTerminalReader']>, ParentType, ContextType, RequireFields<MutationdeleteTerminalReadersReaderArgs, 'reader'>>;
  deleteWebhookEndpointsWebhookEndpoint?: Resolver<Maybe<ResolversTypes['DeletedWebhookEndpoint']>, ParentType, ContextType, RequireFields<MutationdeleteWebhookEndpointsWebhookEndpointArgs, 'webhookEndpoint'>>;
  post3dSecure?: Resolver<Maybe<ResolversTypes['ThreeDSecure']>, ParentType, ContextType, RequireFields<Mutationpost3dSecureArgs, 'v13dSecureInput'>>;
  postAccount?: Resolver<Maybe<ResolversTypes['Account3']>, ParentType, ContextType, RequireFields<MutationpostAccountArgs, never>>;
  postAccountBankAccounts?: Resolver<Maybe<ResolversTypes['Polymorphic']>, ParentType, ContextType, RequireFields<MutationpostAccountBankAccountsArgs, never>>;
  postAccountBankAccountsId?: Resolver<Maybe<ResolversTypes['Polymorphic']>, ParentType, ContextType, RequireFields<MutationpostAccountBankAccountsIdArgs, 'id'>>;
  postAccountCapabilitiesCapability?: Resolver<Maybe<ResolversTypes['Capability']>, ParentType, ContextType, RequireFields<MutationpostAccountCapabilitiesCapabilityArgs, 'capability'>>;
  postAccountExternalAccounts?: Resolver<Maybe<ResolversTypes['Polymorphic']>, ParentType, ContextType, RequireFields<MutationpostAccountExternalAccountsArgs, never>>;
  postAccountExternalAccountsId?: Resolver<Maybe<ResolversTypes['Polymorphic']>, ParentType, ContextType, RequireFields<MutationpostAccountExternalAccountsIdArgs, 'id'>>;
  postAccountLinks?: Resolver<Maybe<ResolversTypes['AccountLink']>, ParentType, ContextType, RequireFields<MutationpostAccountLinksArgs, 'v1AccountLinksInput'>>;
  postAccountLoginLinks?: Resolver<Maybe<ResolversTypes['LoginLink']>, ParentType, ContextType, RequireFields<MutationpostAccountLoginLinksArgs, 'v1AccountLoginLinksInput'>>;
  postAccountPeople?: Resolver<Maybe<ResolversTypes['Person']>, ParentType, ContextType, RequireFields<MutationpostAccountPeopleArgs, never>>;
  postAccountPeoplePerson?: Resolver<Maybe<ResolversTypes['Person']>, ParentType, ContextType, RequireFields<MutationpostAccountPeoplePersonArgs, 'person'>>;
  postAccountPersons?: Resolver<Maybe<ResolversTypes['Person']>, ParentType, ContextType, RequireFields<MutationpostAccountPersonsArgs, never>>;
  postAccountPersonsPerson?: Resolver<Maybe<ResolversTypes['Person']>, ParentType, ContextType, RequireFields<MutationpostAccountPersonsPersonArgs, 'person'>>;
  postAccounts?: Resolver<Maybe<ResolversTypes['Account3']>, ParentType, ContextType, RequireFields<MutationpostAccountsArgs, never>>;
  postAccountsAccount?: Resolver<Maybe<ResolversTypes['Account3']>, ParentType, ContextType, RequireFields<MutationpostAccountsAccountArgs, 'account'>>;
  postAccountsAccountBankAccounts?: Resolver<Maybe<ResolversTypes['Polymorphic']>, ParentType, ContextType, RequireFields<MutationpostAccountsAccountBankAccountsArgs, 'account'>>;
  postAccountsAccountBankAccountsId?: Resolver<Maybe<ResolversTypes['Polymorphic']>, ParentType, ContextType, RequireFields<MutationpostAccountsAccountBankAccountsIdArgs, 'account' | 'id'>>;
  postAccountsAccountCapabilitiesCapability?: Resolver<Maybe<ResolversTypes['Capability']>, ParentType, ContextType, RequireFields<MutationpostAccountsAccountCapabilitiesCapabilityArgs, 'account' | 'capability'>>;
  postAccountsAccountExternalAccounts?: Resolver<Maybe<ResolversTypes['Polymorphic']>, ParentType, ContextType, RequireFields<MutationpostAccountsAccountExternalAccountsArgs, 'account'>>;
  postAccountsAccountExternalAccountsId?: Resolver<Maybe<ResolversTypes['Polymorphic']>, ParentType, ContextType, RequireFields<MutationpostAccountsAccountExternalAccountsIdArgs, 'account' | 'id'>>;
  postAccountsAccountLoginLinks?: Resolver<Maybe<ResolversTypes['LoginLink']>, ParentType, ContextType, RequireFields<MutationpostAccountsAccountLoginLinksArgs, 'account'>>;
  postAccountsAccountPeople?: Resolver<Maybe<ResolversTypes['Person']>, ParentType, ContextType, RequireFields<MutationpostAccountsAccountPeopleArgs, 'account'>>;
  postAccountsAccountPeoplePerson?: Resolver<Maybe<ResolversTypes['Person']>, ParentType, ContextType, RequireFields<MutationpostAccountsAccountPeoplePersonArgs, 'account' | 'person'>>;
  postAccountsAccountPersons?: Resolver<Maybe<ResolversTypes['Person']>, ParentType, ContextType, RequireFields<MutationpostAccountsAccountPersonsArgs, 'account'>>;
  postAccountsAccountPersonsPerson?: Resolver<Maybe<ResolversTypes['Person']>, ParentType, ContextType, RequireFields<MutationpostAccountsAccountPersonsPersonArgs, 'account' | 'person'>>;
  postAccountsAccountReject?: Resolver<Maybe<ResolversTypes['Account3']>, ParentType, ContextType, RequireFields<MutationpostAccountsAccountRejectArgs, 'account' | 'v1AccountRejectInput'>>;
  postApplePayDomains?: Resolver<Maybe<ResolversTypes['ApplePayDomain']>, ParentType, ContextType, RequireFields<MutationpostApplePayDomainsArgs, 'v1ApplePayDomains2Input'>>;
  postApplicationFeesFeeRefundsId?: Resolver<Maybe<ResolversTypes['FeeRefund']>, ParentType, ContextType, RequireFields<MutationpostApplicationFeesFeeRefundsIdArgs, 'fee' | 'id'>>;
  postApplicationFeesIdRefund?: Resolver<Maybe<ResolversTypes['ApplicationFee']>, ParentType, ContextType, RequireFields<MutationpostApplicationFeesIdRefundArgs, 'id'>>;
  postApplicationFeesIdRefunds?: Resolver<Maybe<ResolversTypes['FeeRefund']>, ParentType, ContextType, RequireFields<MutationpostApplicationFeesIdRefundsArgs, 'id'>>;
  postBillingPortalConfigurations?: Resolver<Maybe<ResolversTypes['BillingPortalConfiguration']>, ParentType, ContextType, RequireFields<MutationpostBillingPortalConfigurationsArgs, 'v1BillingPortalConfigurations3Input'>>;
  postBillingPortalConfigurationsConfiguration?: Resolver<Maybe<ResolversTypes['BillingPortalConfiguration']>, ParentType, ContextType, RequireFields<MutationpostBillingPortalConfigurationsConfigurationArgs, 'configuration'>>;
  postBillingPortalSessions?: Resolver<Maybe<ResolversTypes['BillingPortalSession']>, ParentType, ContextType, RequireFields<MutationpostBillingPortalSessionsArgs, 'v1BillingPortalSessionsInput'>>;
  postCharges?: Resolver<Maybe<ResolversTypes['Charge2']>, ParentType, ContextType, RequireFields<MutationpostChargesArgs, never>>;
  postChargesCharge?: Resolver<Maybe<ResolversTypes['Charge2']>, ParentType, ContextType, RequireFields<MutationpostChargesChargeArgs, 'charge'>>;
  postChargesChargeCapture?: Resolver<Maybe<ResolversTypes['Charge2']>, ParentType, ContextType, RequireFields<MutationpostChargesChargeCaptureArgs, 'charge'>>;
  postChargesChargeDispute?: Resolver<Maybe<ResolversTypes['Dispute']>, ParentType, ContextType, RequireFields<MutationpostChargesChargeDisputeArgs, 'charge'>>;
  postChargesChargeDisputeClose?: Resolver<Maybe<ResolversTypes['Dispute']>, ParentType, ContextType, RequireFields<MutationpostChargesChargeDisputeCloseArgs, 'charge'>>;
  postChargesChargeRefund?: Resolver<Maybe<ResolversTypes['Charge2']>, ParentType, ContextType, RequireFields<MutationpostChargesChargeRefundArgs, 'charge'>>;
  postChargesChargeRefunds?: Resolver<Maybe<ResolversTypes['Refund']>, ParentType, ContextType, RequireFields<MutationpostChargesChargeRefundsArgs, 'charge'>>;
  postChargesChargeRefundsRefund?: Resolver<Maybe<ResolversTypes['Refund']>, ParentType, ContextType, RequireFields<MutationpostChargesChargeRefundsRefundArgs, 'charge' | 'refund'>>;
  postCheckoutSessions?: Resolver<Maybe<ResolversTypes['CheckoutSession']>, ParentType, ContextType, RequireFields<MutationpostCheckoutSessionsArgs, 'v1CheckoutSessions2Input'>>;
  postCoupons?: Resolver<Maybe<ResolversTypes['Coupon']>, ParentType, ContextType, RequireFields<MutationpostCouponsArgs, never>>;
  postCouponsCoupon?: Resolver<Maybe<ResolversTypes['Coupon']>, ParentType, ContextType, RequireFields<MutationpostCouponsCouponArgs, 'coupon'>>;
  postCreditNotes?: Resolver<Maybe<ResolversTypes['CreditNote']>, ParentType, ContextType, RequireFields<MutationpostCreditNotesArgs, 'v1CreditNotes2Input'>>;
  postCreditNotesId?: Resolver<Maybe<ResolversTypes['CreditNote']>, ParentType, ContextType, RequireFields<MutationpostCreditNotesIdArgs, 'id'>>;
  postCreditNotesIdVoid?: Resolver<Maybe<ResolversTypes['CreditNote']>, ParentType, ContextType, RequireFields<MutationpostCreditNotesIdVoidArgs, 'id'>>;
  postCustomers?: Resolver<Maybe<ResolversTypes['Customer13']>, ParentType, ContextType, RequireFields<MutationpostCustomersArgs, never>>;
  postCustomersCustomer?: Resolver<Maybe<ResolversTypes['Customer13']>, ParentType, ContextType, RequireFields<MutationpostCustomersCustomerArgs, 'customer'>>;
  postCustomersCustomerBalanceTransactions?: Resolver<Maybe<ResolversTypes['CustomerBalanceTransaction2']>, ParentType, ContextType, RequireFields<MutationpostCustomersCustomerBalanceTransactionsArgs, 'customer' | 'v1CustomerBalanceTransactions2Input'>>;
  postCustomersCustomerBalanceTransactionsTransaction?: Resolver<Maybe<ResolversTypes['CustomerBalanceTransaction2']>, ParentType, ContextType, RequireFields<MutationpostCustomersCustomerBalanceTransactionsTransactionArgs, 'customer' | 'transaction'>>;
  postCustomersCustomerBankAccounts?: Resolver<Maybe<ResolversTypes['PaymentSource']>, ParentType, ContextType, RequireFields<MutationpostCustomersCustomerBankAccountsArgs, 'customer'>>;
  postCustomersCustomerBankAccountsId?: Resolver<Maybe<ResolversTypes['V1CustomerBankAccount5']>, ParentType, ContextType, RequireFields<MutationpostCustomersCustomerBankAccountsIdArgs, 'customer' | 'id'>>;
  postCustomersCustomerBankAccountsIdVerify?: Resolver<Maybe<ResolversTypes['BankAccount7']>, ParentType, ContextType, RequireFields<MutationpostCustomersCustomerBankAccountsIdVerifyArgs, 'customer' | 'id'>>;
  postCustomersCustomerCards?: Resolver<Maybe<ResolversTypes['PaymentSource']>, ParentType, ContextType, RequireFields<MutationpostCustomersCustomerCardsArgs, 'customer'>>;
  postCustomersCustomerCardsId?: Resolver<Maybe<ResolversTypes['V1CustomerCard5']>, ParentType, ContextType, RequireFields<MutationpostCustomersCustomerCardsIdArgs, 'customer' | 'id'>>;
  postCustomersCustomerSources?: Resolver<Maybe<ResolversTypes['PaymentSource']>, ParentType, ContextType, RequireFields<MutationpostCustomersCustomerSourcesArgs, 'customer'>>;
  postCustomersCustomerSourcesId?: Resolver<Maybe<ResolversTypes['V1CustomerSource5']>, ParentType, ContextType, RequireFields<MutationpostCustomersCustomerSourcesIdArgs, 'customer' | 'id'>>;
  postCustomersCustomerSourcesIdVerify?: Resolver<Maybe<ResolversTypes['BankAccount7']>, ParentType, ContextType, RequireFields<MutationpostCustomersCustomerSourcesIdVerifyArgs, 'customer' | 'id'>>;
  postCustomersCustomerSubscriptions?: Resolver<Maybe<ResolversTypes['Subscription5']>, ParentType, ContextType, RequireFields<MutationpostCustomersCustomerSubscriptionsArgs, 'customer'>>;
  postCustomersCustomerSubscriptionsSubscriptionExposedId?: Resolver<Maybe<ResolversTypes['Subscription5']>, ParentType, ContextType, RequireFields<MutationpostCustomersCustomerSubscriptionsSubscriptionExposedIdArgs, 'customer' | 'subscriptionExposedId'>>;
  postCustomersCustomerTaxIds?: Resolver<Maybe<ResolversTypes['TaxId3']>, ParentType, ContextType, RequireFields<MutationpostCustomersCustomerTaxIdsArgs, 'customer' | 'v1CustomerTaxIds2Input'>>;
  postDisputesDispute?: Resolver<Maybe<ResolversTypes['Dispute']>, ParentType, ContextType, RequireFields<MutationpostDisputesDisputeArgs, 'dispute'>>;
  postDisputesDisputeClose?: Resolver<Maybe<ResolversTypes['Dispute']>, ParentType, ContextType, RequireFields<MutationpostDisputesDisputeCloseArgs, 'dispute'>>;
  postEphemeralKeys?: Resolver<Maybe<ResolversTypes['EphemeralKey']>, ParentType, ContextType, RequireFields<MutationpostEphemeralKeysArgs, never>>;
  postFileLinks?: Resolver<Maybe<ResolversTypes['FileLink']>, ParentType, ContextType, RequireFields<MutationpostFileLinksArgs, 'v1FileLinks3Input'>>;
  postFileLinksLink?: Resolver<Maybe<ResolversTypes['FileLink']>, ParentType, ContextType, RequireFields<MutationpostFileLinksLinkArgs, 'link'>>;
  postFiles?: Resolver<Maybe<ResolversTypes['File3']>, ParentType, ContextType, RequireFields<MutationpostFilesArgs, 'multipartFormDataInput'>>;
  postIdentityVerificationSessions?: Resolver<Maybe<ResolversTypes['IdentityVerificationSession']>, ParentType, ContextType, RequireFields<MutationpostIdentityVerificationSessionsArgs, 'v1IdentityVerificationSessions3Input'>>;
  postIdentityVerificationSessionsSession?: Resolver<Maybe<ResolversTypes['IdentityVerificationSession']>, ParentType, ContextType, RequireFields<MutationpostIdentityVerificationSessionsSessionArgs, 'session'>>;
  postIdentityVerificationSessionsSessionCancel?: Resolver<Maybe<ResolversTypes['IdentityVerificationSession']>, ParentType, ContextType, RequireFields<MutationpostIdentityVerificationSessionsSessionCancelArgs, 'session'>>;
  postIdentityVerificationSessionsSessionRedact?: Resolver<Maybe<ResolversTypes['IdentityVerificationSession']>, ParentType, ContextType, RequireFields<MutationpostIdentityVerificationSessionsSessionRedactArgs, 'session'>>;
  postInvoiceitems?: Resolver<Maybe<ResolversTypes['Invoiceitem']>, ParentType, ContextType, RequireFields<MutationpostInvoiceitemsArgs, 'v1Invoiceitems3Input'>>;
  postInvoiceitemsInvoiceitem?: Resolver<Maybe<ResolversTypes['Invoiceitem']>, ParentType, ContextType, RequireFields<MutationpostInvoiceitemsInvoiceitemArgs, 'invoiceitem'>>;
  postInvoices?: Resolver<Maybe<ResolversTypes['Invoice11']>, ParentType, ContextType, RequireFields<MutationpostInvoicesArgs, 'v1Invoices2Input'>>;
  postInvoicesInvoice?: Resolver<Maybe<ResolversTypes['Invoice11']>, ParentType, ContextType, RequireFields<MutationpostInvoicesInvoiceArgs, 'invoice'>>;
  postInvoicesInvoiceFinalize?: Resolver<Maybe<ResolversTypes['Invoice11']>, ParentType, ContextType, RequireFields<MutationpostInvoicesInvoiceFinalizeArgs, 'invoice'>>;
  postInvoicesInvoiceMarkUncollectible?: Resolver<Maybe<ResolversTypes['Invoice11']>, ParentType, ContextType, RequireFields<MutationpostInvoicesInvoiceMarkUncollectibleArgs, 'invoice'>>;
  postInvoicesInvoicePay?: Resolver<Maybe<ResolversTypes['Invoice11']>, ParentType, ContextType, RequireFields<MutationpostInvoicesInvoicePayArgs, 'invoice'>>;
  postInvoicesInvoiceSend?: Resolver<Maybe<ResolversTypes['Invoice11']>, ParentType, ContextType, RequireFields<MutationpostInvoicesInvoiceSendArgs, 'invoice'>>;
  postInvoicesInvoiceVoid?: Resolver<Maybe<ResolversTypes['Invoice11']>, ParentType, ContextType, RequireFields<MutationpostInvoicesInvoiceVoidArgs, 'invoice'>>;
  postIssuingAuthorizationsAuthorization?: Resolver<Maybe<ResolversTypes['IssuingAuthorization']>, ParentType, ContextType, RequireFields<MutationpostIssuingAuthorizationsAuthorizationArgs, 'authorization'>>;
  postIssuingAuthorizationsAuthorizationApprove?: Resolver<Maybe<ResolversTypes['IssuingAuthorization']>, ParentType, ContextType, RequireFields<MutationpostIssuingAuthorizationsAuthorizationApproveArgs, 'authorization'>>;
  postIssuingAuthorizationsAuthorizationDecline?: Resolver<Maybe<ResolversTypes['IssuingAuthorization']>, ParentType, ContextType, RequireFields<MutationpostIssuingAuthorizationsAuthorizationDeclineArgs, 'authorization'>>;
  postIssuingCardholders?: Resolver<Maybe<ResolversTypes['IssuingCardholder']>, ParentType, ContextType, RequireFields<MutationpostIssuingCardholdersArgs, 'v1IssuingCardholders3Input'>>;
  postIssuingCardholdersCardholder?: Resolver<Maybe<ResolversTypes['IssuingCardholder']>, ParentType, ContextType, RequireFields<MutationpostIssuingCardholdersCardholderArgs, 'cardholder'>>;
  postIssuingCards?: Resolver<Maybe<ResolversTypes['IssuingCard2']>, ParentType, ContextType, RequireFields<MutationpostIssuingCardsArgs, 'v1IssuingCards3Input'>>;
  postIssuingCardsCard?: Resolver<Maybe<ResolversTypes['IssuingCard2']>, ParentType, ContextType, RequireFields<MutationpostIssuingCardsCardArgs, 'card'>>;
  postIssuingDisputes?: Resolver<Maybe<ResolversTypes['IssuingDispute']>, ParentType, ContextType, RequireFields<MutationpostIssuingDisputesArgs, 'v1IssuingDisputes2Input'>>;
  postIssuingDisputesDispute?: Resolver<Maybe<ResolversTypes['IssuingDispute']>, ParentType, ContextType, RequireFields<MutationpostIssuingDisputesDisputeArgs, 'dispute'>>;
  postIssuingDisputesDisputeSubmit?: Resolver<Maybe<ResolversTypes['IssuingDispute']>, ParentType, ContextType, RequireFields<MutationpostIssuingDisputesDisputeSubmitArgs, 'dispute'>>;
  postIssuingSettlementsSettlement?: Resolver<Maybe<ResolversTypes['IssuingSettlement']>, ParentType, ContextType, RequireFields<MutationpostIssuingSettlementsSettlementArgs, 'settlement'>>;
  postIssuingTransactionsTransaction?: Resolver<Maybe<ResolversTypes['IssuingTransaction']>, ParentType, ContextType, RequireFields<MutationpostIssuingTransactionsTransactionArgs, 'transaction'>>;
  postOrders?: Resolver<Maybe<ResolversTypes['Order3']>, ParentType, ContextType, RequireFields<MutationpostOrdersArgs, 'v1Orders3Input'>>;
  postOrdersId?: Resolver<Maybe<ResolversTypes['Order3']>, ParentType, ContextType, RequireFields<MutationpostOrdersIdArgs, 'id'>>;
  postOrdersIdPay?: Resolver<Maybe<ResolversTypes['Order3']>, ParentType, ContextType, RequireFields<MutationpostOrdersIdPayArgs, 'id'>>;
  postOrdersIdReturns?: Resolver<Maybe<ResolversTypes['OrderReturn']>, ParentType, ContextType, RequireFields<MutationpostOrdersIdReturnsArgs, 'id'>>;
  postPaymentIntents?: Resolver<Maybe<ResolversTypes['PaymentIntent7']>, ParentType, ContextType, RequireFields<MutationpostPaymentIntentsArgs, 'v1PaymentIntents2Input'>>;
  postPaymentIntentsIntent?: Resolver<Maybe<ResolversTypes['PaymentIntent7']>, ParentType, ContextType, RequireFields<MutationpostPaymentIntentsIntentArgs, 'intent'>>;
  postPaymentIntentsIntentCancel?: Resolver<Maybe<ResolversTypes['PaymentIntent7']>, ParentType, ContextType, RequireFields<MutationpostPaymentIntentsIntentCancelArgs, 'intent'>>;
  postPaymentIntentsIntentCapture?: Resolver<Maybe<ResolversTypes['PaymentIntent7']>, ParentType, ContextType, RequireFields<MutationpostPaymentIntentsIntentCaptureArgs, 'intent'>>;
  postPaymentIntentsIntentConfirm?: Resolver<Maybe<ResolversTypes['PaymentIntent7']>, ParentType, ContextType, RequireFields<MutationpostPaymentIntentsIntentConfirmArgs, 'intent'>>;
  postPaymentMethods?: Resolver<Maybe<ResolversTypes['PaymentMethod3']>, ParentType, ContextType, RequireFields<MutationpostPaymentMethodsArgs, never>>;
  postPaymentMethodsPaymentMethod?: Resolver<Maybe<ResolversTypes['PaymentMethod3']>, ParentType, ContextType, RequireFields<MutationpostPaymentMethodsPaymentMethodArgs, 'paymentMethod'>>;
  postPaymentMethodsPaymentMethodAttach?: Resolver<Maybe<ResolversTypes['PaymentMethod3']>, ParentType, ContextType, RequireFields<MutationpostPaymentMethodsPaymentMethodAttachArgs, 'paymentMethod' | 'v1PaymentMethodAttachInput'>>;
  postPaymentMethodsPaymentMethodDetach?: Resolver<Maybe<ResolversTypes['PaymentMethod3']>, ParentType, ContextType, RequireFields<MutationpostPaymentMethodsPaymentMethodDetachArgs, 'paymentMethod'>>;
  postPayouts?: Resolver<Maybe<ResolversTypes['Payout']>, ParentType, ContextType, RequireFields<MutationpostPayoutsArgs, 'v1Payouts2Input'>>;
  postPayoutsPayout?: Resolver<Maybe<ResolversTypes['Payout']>, ParentType, ContextType, RequireFields<MutationpostPayoutsPayoutArgs, 'payout'>>;
  postPayoutsPayoutCancel?: Resolver<Maybe<ResolversTypes['Payout']>, ParentType, ContextType, RequireFields<MutationpostPayoutsPayoutCancelArgs, 'payout'>>;
  postPayoutsPayoutReverse?: Resolver<Maybe<ResolversTypes['Payout']>, ParentType, ContextType, RequireFields<MutationpostPayoutsPayoutReverseArgs, 'payout'>>;
  postPlans?: Resolver<Maybe<ResolversTypes['Plan4']>, ParentType, ContextType, RequireFields<MutationpostPlansArgs, 'v1Plans2Input'>>;
  postPlansPlan?: Resolver<Maybe<ResolversTypes['Plan4']>, ParentType, ContextType, RequireFields<MutationpostPlansPlanArgs, 'plan'>>;
  postPrices?: Resolver<Maybe<ResolversTypes['Price3']>, ParentType, ContextType, RequireFields<MutationpostPricesArgs, 'v1Prices2Input'>>;
  postPricesPrice?: Resolver<Maybe<ResolversTypes['Price3']>, ParentType, ContextType, RequireFields<MutationpostPricesPriceArgs, 'price'>>;
  postProducts?: Resolver<Maybe<ResolversTypes['Product14']>, ParentType, ContextType, RequireFields<MutationpostProductsArgs, 'v1Products3Input'>>;
  postProductsId?: Resolver<Maybe<ResolversTypes['Product14']>, ParentType, ContextType, RequireFields<MutationpostProductsIdArgs, 'id'>>;
  postPromotionCodes?: Resolver<Maybe<ResolversTypes['PromotionCode11']>, ParentType, ContextType, RequireFields<MutationpostPromotionCodesArgs, 'v1PromotionCodes3Input'>>;
  postPromotionCodesPromotionCode?: Resolver<Maybe<ResolversTypes['PromotionCode11']>, ParentType, ContextType, RequireFields<MutationpostPromotionCodesPromotionCodeArgs, 'promotionCode'>>;
  postQuotes?: Resolver<Maybe<ResolversTypes['Quote2']>, ParentType, ContextType, RequireFields<MutationpostQuotesArgs, never>>;
  postQuotesQuote?: Resolver<Maybe<ResolversTypes['Quote2']>, ParentType, ContextType, RequireFields<MutationpostQuotesQuoteArgs, 'quote'>>;
  postQuotesQuoteAccept?: Resolver<Maybe<ResolversTypes['Quote2']>, ParentType, ContextType, RequireFields<MutationpostQuotesQuoteAcceptArgs, 'quote'>>;
  postQuotesQuoteCancel?: Resolver<Maybe<ResolversTypes['Quote2']>, ParentType, ContextType, RequireFields<MutationpostQuotesQuoteCancelArgs, 'quote'>>;
  postQuotesQuoteFinalize?: Resolver<Maybe<ResolversTypes['Quote2']>, ParentType, ContextType, RequireFields<MutationpostQuotesQuoteFinalizeArgs, 'quote'>>;
  postRadarValueListItems?: Resolver<Maybe<ResolversTypes['RadarValueListItem']>, ParentType, ContextType, RequireFields<MutationpostRadarValueListItemsArgs, 'v1RadarValueListItems3Input'>>;
  postRadarValueLists?: Resolver<Maybe<ResolversTypes['RadarValueList']>, ParentType, ContextType, RequireFields<MutationpostRadarValueListsArgs, 'v1RadarValueLists3Input'>>;
  postRadarValueListsValueList?: Resolver<Maybe<ResolversTypes['RadarValueList']>, ParentType, ContextType, RequireFields<MutationpostRadarValueListsValueListArgs, 'valueList'>>;
  postRecipients?: Resolver<Maybe<ResolversTypes['Recipient10']>, ParentType, ContextType, RequireFields<MutationpostRecipientsArgs, 'v1Recipients3Input'>>;
  postRecipientsId?: Resolver<Maybe<ResolversTypes['Recipient10']>, ParentType, ContextType, RequireFields<MutationpostRecipientsIdArgs, 'id'>>;
  postRefunds?: Resolver<Maybe<ResolversTypes['Refund']>, ParentType, ContextType, RequireFields<MutationpostRefundsArgs, never>>;
  postRefundsRefund?: Resolver<Maybe<ResolversTypes['Refund']>, ParentType, ContextType, RequireFields<MutationpostRefundsRefundArgs, 'refund'>>;
  postReportingReportRuns?: Resolver<Maybe<ResolversTypes['ReportingReportRun']>, ParentType, ContextType, RequireFields<MutationpostReportingReportRunsArgs, 'v1ReportingReportRuns3Input'>>;
  postReviewsReviewApprove?: Resolver<Maybe<ResolversTypes['Review3']>, ParentType, ContextType, RequireFields<MutationpostReviewsReviewApproveArgs, 'review'>>;
  postSetupIntents?: Resolver<Maybe<ResolversTypes['SetupIntent2']>, ParentType, ContextType, RequireFields<MutationpostSetupIntentsArgs, never>>;
  postSetupIntentsIntent?: Resolver<Maybe<ResolversTypes['SetupIntent2']>, ParentType, ContextType, RequireFields<MutationpostSetupIntentsIntentArgs, 'intent'>>;
  postSetupIntentsIntentCancel?: Resolver<Maybe<ResolversTypes['SetupIntent2']>, ParentType, ContextType, RequireFields<MutationpostSetupIntentsIntentCancelArgs, 'intent'>>;
  postSetupIntentsIntentConfirm?: Resolver<Maybe<ResolversTypes['SetupIntent2']>, ParentType, ContextType, RequireFields<MutationpostSetupIntentsIntentConfirmArgs, 'intent'>>;
  postSkus?: Resolver<Maybe<ResolversTypes['Sku']>, ParentType, ContextType, RequireFields<MutationpostSkusArgs, 'v1Skus3Input'>>;
  postSkusId?: Resolver<Maybe<ResolversTypes['Sku']>, ParentType, ContextType, RequireFields<MutationpostSkusIdArgs, 'id'>>;
  postSources?: Resolver<Maybe<ResolversTypes['Source12']>, ParentType, ContextType, RequireFields<MutationpostSourcesArgs, never>>;
  postSourcesSource?: Resolver<Maybe<ResolversTypes['Source12']>, ParentType, ContextType, RequireFields<MutationpostSourcesSourceArgs, 'source'>>;
  postSourcesSourceVerify?: Resolver<Maybe<ResolversTypes['Source12']>, ParentType, ContextType, RequireFields<MutationpostSourcesSourceVerifyArgs, 'source' | 'v1SourceVerifyInput'>>;
  postSubscriptionItems?: Resolver<Maybe<ResolversTypes['SubscriptionItem']>, ParentType, ContextType, RequireFields<MutationpostSubscriptionItemsArgs, 'v1SubscriptionItems3Input'>>;
  postSubscriptionItemsItem?: Resolver<Maybe<ResolversTypes['SubscriptionItem']>, ParentType, ContextType, RequireFields<MutationpostSubscriptionItemsItemArgs, 'item'>>;
  postSubscriptionItemsSubscriptionItemUsageRecords?: Resolver<Maybe<ResolversTypes['UsageRecord']>, ParentType, ContextType, RequireFields<MutationpostSubscriptionItemsSubscriptionItemUsageRecordsArgs, 'subscriptionItem' | 'v1SubscriptionItemUsageRecordsInput'>>;
  postSubscriptionSchedules?: Resolver<Maybe<ResolversTypes['SubscriptionSchedule2']>, ParentType, ContextType, RequireFields<MutationpostSubscriptionSchedulesArgs, never>>;
  postSubscriptionSchedulesSchedule?: Resolver<Maybe<ResolversTypes['SubscriptionSchedule2']>, ParentType, ContextType, RequireFields<MutationpostSubscriptionSchedulesScheduleArgs, 'schedule'>>;
  postSubscriptionSchedulesScheduleCancel?: Resolver<Maybe<ResolversTypes['SubscriptionSchedule2']>, ParentType, ContextType, RequireFields<MutationpostSubscriptionSchedulesScheduleCancelArgs, 'schedule'>>;
  postSubscriptionSchedulesScheduleRelease?: Resolver<Maybe<ResolversTypes['SubscriptionSchedule2']>, ParentType, ContextType, RequireFields<MutationpostSubscriptionSchedulesScheduleReleaseArgs, 'schedule'>>;
  postSubscriptions?: Resolver<Maybe<ResolversTypes['Subscription5']>, ParentType, ContextType, RequireFields<MutationpostSubscriptionsArgs, 'v1Subscriptions3Input'>>;
  postSubscriptionsSubscriptionExposedId?: Resolver<Maybe<ResolversTypes['Subscription5']>, ParentType, ContextType, RequireFields<MutationpostSubscriptionsSubscriptionExposedIdArgs, 'subscriptionExposedId'>>;
  postTaxRates?: Resolver<Maybe<ResolversTypes['TaxRate']>, ParentType, ContextType, RequireFields<MutationpostTaxRatesArgs, 'v1TaxRates3Input'>>;
  postTaxRatesTaxRate?: Resolver<Maybe<ResolversTypes['TaxRate']>, ParentType, ContextType, RequireFields<MutationpostTaxRatesTaxRateArgs, 'taxRate'>>;
  postTerminalConnectionTokens?: Resolver<Maybe<ResolversTypes['TerminalConnectionToken']>, ParentType, ContextType, RequireFields<MutationpostTerminalConnectionTokensArgs, never>>;
  postTerminalLocations?: Resolver<Maybe<ResolversTypes['TerminalLocation']>, ParentType, ContextType, RequireFields<MutationpostTerminalLocationsArgs, 'v1TerminalLocations2Input'>>;
  postTerminalLocationsLocation?: Resolver<Maybe<ResolversTypes['TerminalLocation']>, ParentType, ContextType, RequireFields<MutationpostTerminalLocationsLocationArgs, 'location'>>;
  postTerminalReaders?: Resolver<Maybe<ResolversTypes['TerminalReader']>, ParentType, ContextType, RequireFields<MutationpostTerminalReadersArgs, 'v1TerminalReaders2Input'>>;
  postTerminalReadersReader?: Resolver<Maybe<ResolversTypes['TerminalReader']>, ParentType, ContextType, RequireFields<MutationpostTerminalReadersReaderArgs, 'reader'>>;
  postTokens?: Resolver<Maybe<ResolversTypes['Token3']>, ParentType, ContextType, RequireFields<MutationpostTokensArgs, never>>;
  postTopups?: Resolver<Maybe<ResolversTypes['Topup']>, ParentType, ContextType, RequireFields<MutationpostTopupsArgs, 'v1Topups2Input'>>;
  postTopupsTopup?: Resolver<Maybe<ResolversTypes['Topup']>, ParentType, ContextType, RequireFields<MutationpostTopupsTopupArgs, 'topup'>>;
  postTopupsTopupCancel?: Resolver<Maybe<ResolversTypes['Topup']>, ParentType, ContextType, RequireFields<MutationpostTopupsTopupCancelArgs, 'topup'>>;
  postTransfers?: Resolver<Maybe<ResolversTypes['Transfer2']>, ParentType, ContextType, RequireFields<MutationpostTransfersArgs, 'v1Transfers2Input'>>;
  postTransfersIdReversals?: Resolver<Maybe<ResolversTypes['TransferReversal2']>, ParentType, ContextType, RequireFields<MutationpostTransfersIdReversalsArgs, 'id'>>;
  postTransfersTransfer?: Resolver<Maybe<ResolversTypes['Transfer2']>, ParentType, ContextType, RequireFields<MutationpostTransfersTransferArgs, 'transfer'>>;
  postTransfersTransferReversalsId?: Resolver<Maybe<ResolversTypes['TransferReversal2']>, ParentType, ContextType, RequireFields<MutationpostTransfersTransferReversalsIdArgs, 'id' | 'transfer'>>;
  postWebhookEndpoints?: Resolver<Maybe<ResolversTypes['WebhookEndpoint']>, ParentType, ContextType, RequireFields<MutationpostWebhookEndpointsArgs, 'v1WebhookEndpoints3Input'>>;
  postWebhookEndpointsWebhookEndpoint?: Resolver<Maybe<ResolversTypes['WebhookEndpoint']>, ParentType, ContextType, RequireFields<MutationpostWebhookEndpointsWebhookEndpointArgs, 'webhookEndpoint'>>;
}>;

export type CartResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Cart'] = ResolversParentTypes['Cart']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  currency?: Resolver<ResolversTypes['Currency'], ParentType, ContextType>;
  email?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  totalItems?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  totalUniqueItems?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  items?: Resolver<Array<ResolversTypes['CartItem']>, ParentType, ContextType>;
  subTotal?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  shippingTotal?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  taxTotal?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  grandTotal?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  isEmpty?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  abandoned?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  attributes?: Resolver<Array<ResolversTypes['CustomCartAttribute']>, ParentType, ContextType>;
  metadata?: Resolver<Maybe<ResolversTypes['Json']>, ParentType, ContextType>;
  notes?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['Date'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['Date'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type NodeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Node'] = ResolversParentTypes['Node']> = ResolversObject<{
  __resolveType: TypeResolveFn<'Cart', ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
}>;

export type CurrencyResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Currency'] = ResolversParentTypes['Currency']> = ResolversObject<{
  code?: Resolver<Maybe<ResolversTypes['CurrencyCode']>, ParentType, ContextType>;
  symbol?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  thousandsSeparator?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  decimalSeparator?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  decimalDigits?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CartItemResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CartItem'] = ResolversParentTypes['CartItem']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<ResolversTypes['CartItemType'], ParentType, ContextType>;
  images?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>;
  unitTotal?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  lineTotal?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  quantity?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  attributes?: Resolver<Array<ResolversTypes['CustomCartAttribute']>, ParentType, ContextType>;
  metadata?: Resolver<Maybe<ResolversTypes['Json']>, ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['Date'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['Date'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type MoneyResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Money'] = ResolversParentTypes['Money']> = ResolversObject<{
  amount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  currency?: Resolver<ResolversTypes['Currency'], ParentType, ContextType>;
  formatted?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CustomCartAttributeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CustomCartAttribute'] = ResolversParentTypes['CustomCartAttribute']> = ResolversObject<{
  key?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  value?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface JsonScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['Json'], any> {
  name: 'Json';
}

export interface DateScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['Date'], any> {
  name: 'Date';
}

export type DeletePayloadResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['DeletePayload'] = ResolversParentTypes['DeletePayload']> = ResolversObject<{
  success?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  message?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type OrderResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Order'] = ResolversParentTypes['Order']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  cartId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  email?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  shipping?: Resolver<ResolversTypes['Address'], ParentType, ContextType>;
  billing?: Resolver<ResolversTypes['Address'], ParentType, ContextType>;
  items?: Resolver<Array<ResolversTypes['OrderItem']>, ParentType, ContextType>;
  subTotal?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  shippingTotal?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  taxTotal?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  grandTotal?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  totalItems?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  totalUniqueItems?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  notes?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  attributes?: Resolver<Array<ResolversTypes['CustomAttribute']>, ParentType, ContextType>;
  metadata?: Resolver<Maybe<ResolversTypes['Json']>, ParentType, ContextType>;
  status?: Resolver<ResolversTypes['OrderStatus'], ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['Date'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['Date'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AddressResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Address'] = ResolversParentTypes['Address']> = ResolversObject<{
  company?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  line1?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  line2?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  city?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  state?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  postalCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  country?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type OrderItemResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['OrderItem'] = ResolversParentTypes['OrderItem']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  description?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  type?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  images?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>;
  unitTotal?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  lineTotal?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  quantity?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['Date'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['Date'], ParentType, ContextType>;
  attributes?: Resolver<Array<ResolversTypes['CustomCartAttribute']>, ParentType, ContextType>;
  metadata?: Resolver<Maybe<ResolversTypes['Json']>, ParentType, ContextType>;
  amount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  currency?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object58'], ParentType, ContextType>;
  parent?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CustomAttributeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CustomAttribute'] = ResolversParentTypes['CustomAttribute']> = ResolversObject<{
  key?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  value?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ThreeDSecureResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ThreeDSecure'] = ResolversParentTypes['ThreeDSecure']> = ResolversObject<{
  amount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  authenticated?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  card?: Resolver<ResolversTypes['Card2'], ParentType, ContextType>;
  created?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  currency?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  livemode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object2'], ParentType, ContextType>;
  redirectUrl?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  status?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Card2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Card2'] = ResolversParentTypes['Card2']> = ResolversObject<{
  account?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  addressCity?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  addressCountry?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  addressLine1?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  addressLine1Check?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  addressLine2?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  addressState?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  addressZip?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  addressZipCheck?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  availablePayoutMethods?: Resolver<Maybe<Array<Maybe<ResolversTypes['AvailablePayoutMethodsListItem']>>>, ParentType, ContextType>;
  brand?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  country?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  currency?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  customer?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  cvcCheck?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  defaultForCurrency?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  dynamicLast4?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  expMonth?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  expYear?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  fingerprint?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  funding?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  last4?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  metadata?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object'], ParentType, ContextType>;
  recipient?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  tokenizationMethod?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface JSONScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['JSON'], any> {
  name: 'JSON';
}

export type AvailablePayoutMethodsListItemResolvers = { INSTANT: 'instant', STANDARD: 'standard' };

export type ObjectResolvers = { CARD: 'card' };

export type Object2Resolvers = { THREE_D_SECURE: 'three_d_secure' };

export type Account3Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Account3'] = ResolversParentTypes['Account3']> = ResolversObject<{
  businessProfile?: Resolver<Maybe<ResolversTypes['BusinessProfile']>, ParentType, ContextType>;
  businessType?: Resolver<Maybe<ResolversTypes['BusinessType']>, ParentType, ContextType>;
  capabilities?: Resolver<Maybe<ResolversTypes['AccountCapabilities']>, ParentType, ContextType>;
  chargesEnabled?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  company?: Resolver<Maybe<ResolversTypes['LegalEntityCompany']>, ParentType, ContextType>;
  controller?: Resolver<Maybe<ResolversTypes['AccountController']>, ParentType, ContextType>;
  country?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  created?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  defaultCurrency?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  detailsSubmitted?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  email?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  externalAccounts?: Resolver<Maybe<ResolversTypes['ExternalAccounts']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  individual?: Resolver<Maybe<ResolversTypes['Person']>, ParentType, ContextType>;
  metadata?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object3'], ParentType, ContextType>;
  payoutsEnabled?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  requirements?: Resolver<Maybe<ResolversTypes['AccountRequirements']>, ParentType, ContextType>;
  settings?: Resolver<Maybe<ResolversTypes['Settings']>, ParentType, ContextType>;
  tosAcceptance?: Resolver<Maybe<ResolversTypes['AccountTosAcceptance']>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['Type2']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BusinessProfileResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['BusinessProfile'] = ResolversParentTypes['BusinessProfile']> = ResolversObject<{
  mcc?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  productDescription?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  supportAddress?: Resolver<Maybe<ResolversTypes['SupportAddress']>, ParentType, ContextType>;
  supportEmail?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  supportPhone?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  supportUrl?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SupportAddressResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SupportAddress'] = ResolversParentTypes['SupportAddress']> = ResolversObject<{
  city?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  country?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  line1?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  line2?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  postalCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  state?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BusinessTypeResolvers = { COMPANY: 'company', GOVERNMENT_ENTITY: 'government_entity', INDIVIDUAL: 'individual', NON_PROFIT: 'non_profit' };

export type AccountCapabilitiesResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['AccountCapabilities'] = ResolversParentTypes['AccountCapabilities']> = ResolversObject<{
  acssDebitPayments?: Resolver<Maybe<ResolversTypes['AcssDebitPayments']>, ParentType, ContextType>;
  afterpayClearpayPayments?: Resolver<Maybe<ResolversTypes['AfterpayClearpayPayments']>, ParentType, ContextType>;
  auBecsDebitPayments?: Resolver<Maybe<ResolversTypes['AuBecsDebitPayments']>, ParentType, ContextType>;
  bacsDebitPayments?: Resolver<Maybe<ResolversTypes['BacsDebitPayments']>, ParentType, ContextType>;
  bancontactPayments?: Resolver<Maybe<ResolversTypes['BancontactPayments']>, ParentType, ContextType>;
  boletoPayments?: Resolver<Maybe<ResolversTypes['BoletoPayments']>, ParentType, ContextType>;
  cardIssuing?: Resolver<Maybe<ResolversTypes['CardIssuing']>, ParentType, ContextType>;
  cardPayments?: Resolver<Maybe<ResolversTypes['CardPayments']>, ParentType, ContextType>;
  cartesBancairesPayments?: Resolver<Maybe<ResolversTypes['CartesBancairesPayments']>, ParentType, ContextType>;
  epsPayments?: Resolver<Maybe<ResolversTypes['EpsPayments']>, ParentType, ContextType>;
  fpxPayments?: Resolver<Maybe<ResolversTypes['FpxPayments']>, ParentType, ContextType>;
  giropayPayments?: Resolver<Maybe<ResolversTypes['GiropayPayments']>, ParentType, ContextType>;
  grabpayPayments?: Resolver<Maybe<ResolversTypes['GrabpayPayments']>, ParentType, ContextType>;
  idealPayments?: Resolver<Maybe<ResolversTypes['IdealPayments']>, ParentType, ContextType>;
  jcbPayments?: Resolver<Maybe<ResolversTypes['JcbPayments']>, ParentType, ContextType>;
  legacyPayments?: Resolver<Maybe<ResolversTypes['LegacyPayments']>, ParentType, ContextType>;
  oxxoPayments?: Resolver<Maybe<ResolversTypes['OxxoPayments']>, ParentType, ContextType>;
  p24Payments?: Resolver<Maybe<ResolversTypes['P24Payments']>, ParentType, ContextType>;
  sepaDebitPayments?: Resolver<Maybe<ResolversTypes['SepaDebitPayments']>, ParentType, ContextType>;
  sofortPayments?: Resolver<Maybe<ResolversTypes['SofortPayments']>, ParentType, ContextType>;
  taxReportingUs1099K?: Resolver<Maybe<ResolversTypes['TaxReportingUs1099K']>, ParentType, ContextType>;
  taxReportingUs1099Misc?: Resolver<Maybe<ResolversTypes['TaxReportingUs1099Misc']>, ParentType, ContextType>;
  transfers?: Resolver<Maybe<ResolversTypes['Transfers']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AcssDebitPaymentsResolvers = { ACTIVE: 'active', INACTIVE: 'inactive', PENDING: 'pending' };

export type AfterpayClearpayPaymentsResolvers = { ACTIVE: 'active', INACTIVE: 'inactive', PENDING: 'pending' };

export type AuBecsDebitPaymentsResolvers = { ACTIVE: 'active', INACTIVE: 'inactive', PENDING: 'pending' };

export type BacsDebitPaymentsResolvers = { ACTIVE: 'active', INACTIVE: 'inactive', PENDING: 'pending' };

export type BancontactPaymentsResolvers = { ACTIVE: 'active', INACTIVE: 'inactive', PENDING: 'pending' };

export type BoletoPaymentsResolvers = { ACTIVE: 'active', INACTIVE: 'inactive', PENDING: 'pending' };

export type CardIssuingResolvers = { ACTIVE: 'active', INACTIVE: 'inactive', PENDING: 'pending' };

export type CardPaymentsResolvers = { ACTIVE: 'active', INACTIVE: 'inactive', PENDING: 'pending' };

export type CartesBancairesPaymentsResolvers = { ACTIVE: 'active', INACTIVE: 'inactive', PENDING: 'pending' };

export type EpsPaymentsResolvers = { ACTIVE: 'active', INACTIVE: 'inactive', PENDING: 'pending' };

export type FpxPaymentsResolvers = { ACTIVE: 'active', INACTIVE: 'inactive', PENDING: 'pending' };

export type GiropayPaymentsResolvers = { ACTIVE: 'active', INACTIVE: 'inactive', PENDING: 'pending' };

export type GrabpayPaymentsResolvers = { ACTIVE: 'active', INACTIVE: 'inactive', PENDING: 'pending' };

export type IdealPaymentsResolvers = { ACTIVE: 'active', INACTIVE: 'inactive', PENDING: 'pending' };

export type JcbPaymentsResolvers = { ACTIVE: 'active', INACTIVE: 'inactive', PENDING: 'pending' };

export type LegacyPaymentsResolvers = { ACTIVE: 'active', INACTIVE: 'inactive', PENDING: 'pending' };

export type OxxoPaymentsResolvers = { ACTIVE: 'active', INACTIVE: 'inactive', PENDING: 'pending' };

export type P24PaymentsResolvers = { ACTIVE: 'active', INACTIVE: 'inactive', PENDING: 'pending' };

export type SepaDebitPaymentsResolvers = { ACTIVE: 'active', INACTIVE: 'inactive', PENDING: 'pending' };

export type SofortPaymentsResolvers = { ACTIVE: 'active', INACTIVE: 'inactive', PENDING: 'pending' };

export type TaxReportingUs1099KResolvers = { ACTIVE: 'active', INACTIVE: 'inactive', PENDING: 'pending' };

export type TaxReportingUs1099MiscResolvers = { ACTIVE: 'active', INACTIVE: 'inactive', PENDING: 'pending' };

export type TransfersResolvers = { ACTIVE: 'active', INACTIVE: 'inactive', PENDING: 'pending' };

export type LegalEntityCompanyResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['LegalEntityCompany'] = ResolversParentTypes['LegalEntityCompany']> = ResolversObject<{
  address?: Resolver<Maybe<ResolversTypes['Address']>, ParentType, ContextType>;
  addressKana?: Resolver<Maybe<ResolversTypes['AddressKana']>, ParentType, ContextType>;
  addressKanji?: Resolver<Maybe<ResolversTypes['AddressKanji']>, ParentType, ContextType>;
  directorsProvided?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  executivesProvided?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  nameKana?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  nameKanji?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  ownersProvided?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  phone?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  structure?: Resolver<Maybe<ResolversTypes['Structure']>, ParentType, ContextType>;
  taxIdProvided?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  taxIdRegistrar?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  vatIdProvided?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  verification?: Resolver<Maybe<ResolversTypes['Verification']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AddressKanaResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['AddressKana'] = ResolversParentTypes['AddressKana']> = ResolversObject<{
  city?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  country?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  line1?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  line2?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  postalCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  state?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  town?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AddressKanjiResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['AddressKanji'] = ResolversParentTypes['AddressKanji']> = ResolversObject<{
  city?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  country?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  line1?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  line2?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  postalCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  state?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  town?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type StructureResolvers = { FREE_ZONE_ESTABLISHMENT: 'free_zone_establishment', FREE_ZONE_LLC: 'free_zone_llc', GOVERNMENT_INSTRUMENTALITY: 'government_instrumentality', GOVERNMENTAL_UNIT: 'governmental_unit', INCORPORATED_NON_PROFIT: 'incorporated_non_profit', LIMITED_LIABILITY_PARTNERSHIP: 'limited_liability_partnership', LLC: 'llc', MULTI_MEMBER_LLC: 'multi_member_llc', PRIVATE_COMPANY: 'private_company', PRIVATE_CORPORATION: 'private_corporation', PRIVATE_PARTNERSHIP: 'private_partnership', PUBLIC_COMPANY: 'public_company', PUBLIC_CORPORATION: 'public_corporation', PUBLIC_PARTNERSHIP: 'public_partnership', SINGLE_MEMBER_LLC: 'single_member_llc', SOLE_ESTABLISHMENT: 'sole_establishment', SOLE_PROPRIETORSHIP: 'sole_proprietorship', TAX_EXEMPT_GOVERNMENT_INSTRUMENTALITY: 'tax_exempt_government_instrumentality', UNINCORPORATED_ASSOCIATION: 'unincorporated_association', UNINCORPORATED_NON_PROFIT: 'unincorporated_non_profit' };

export type VerificationResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Verification'] = ResolversParentTypes['Verification']> = ResolversObject<{
  document?: Resolver<Maybe<ResolversTypes['Document']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type DocumentResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Document'] = ResolversParentTypes['Document']> = ResolversObject<{
  back?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  details?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  detailsCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  front?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AccountControllerResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['AccountController'] = ResolversParentTypes['AccountController']> = ResolversObject<{
  isController?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['Type']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type TypeResolvers = { ACCOUNT: 'account', APPLICATION: 'application' };

export type ExternalAccountsResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ExternalAccounts'] = ResolversParentTypes['ExternalAccounts']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['DataListItem']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type DataListItemResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['DataListItem'] = ResolversParentTypes['DataListItem']> = ResolversObject<{
  account?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  accountHolderName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  accountHolderType?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  accountType?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  addressCity?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  addressCountry?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  addressLine1?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  addressLine1Check?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  addressLine2?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  addressState?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  addressZip?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  addressZipCheck?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  availablePayoutMethods?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  bankName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  brand?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  country?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  currency?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  customer?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  cvcCheck?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  defaultForCurrency?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  dynamicLast4?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  expMonth?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  expYear?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  fingerprint?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  funding?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  last4?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  metadata?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  object?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  recipient?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  routingNumber?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  tokenizationMethod?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Object4Resolvers = { LIST: 'list' };

export type PersonResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Person'] = ResolversParentTypes['Person']> = ResolversObject<{
  account?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  address?: Resolver<Maybe<ResolversTypes['Address']>, ParentType, ContextType>;
  addressKana?: Resolver<Maybe<ResolversTypes['AddressKana2']>, ParentType, ContextType>;
  addressKanji?: Resolver<Maybe<ResolversTypes['AddressKanji2']>, ParentType, ContextType>;
  created?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  dob?: Resolver<Maybe<ResolversTypes['LegalEntityDob']>, ParentType, ContextType>;
  email?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  firstName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  firstNameKana?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  firstNameKanji?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  gender?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  idNumberProvided?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  lastName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  lastNameKana?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  lastNameKanji?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  maidenName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  metadata?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  nationality?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object5'], ParentType, ContextType>;
  phone?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  politicalExposure?: Resolver<Maybe<ResolversTypes['PoliticalExposure']>, ParentType, ContextType>;
  relationship?: Resolver<Maybe<ResolversTypes['PersonRelationship']>, ParentType, ContextType>;
  requirements?: Resolver<Maybe<ResolversTypes['Requirements']>, ParentType, ContextType>;
  ssnLast4Provided?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  verification?: Resolver<Maybe<ResolversTypes['LegalEntityPersonVerification']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AddressKana2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['AddressKana2'] = ResolversParentTypes['AddressKana2']> = ResolversObject<{
  city?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  country?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  line1?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  line2?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  postalCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  state?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  town?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AddressKanji2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['AddressKanji2'] = ResolversParentTypes['AddressKanji2']> = ResolversObject<{
  city?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  country?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  line1?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  line2?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  postalCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  state?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  town?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type LegalEntityDobResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['LegalEntityDob'] = ResolversParentTypes['LegalEntityDob']> = ResolversObject<{
  day?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  month?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  year?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Object5Resolvers = { PERSON: 'person' };

export type PoliticalExposureResolvers = { EXISTING: 'existing', NONE: 'none' };

export type PersonRelationshipResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PersonRelationship'] = ResolversParentTypes['PersonRelationship']> = ResolversObject<{
  director?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  executive?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  owner?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  percentOwnership?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  representative?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type RequirementsResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Requirements'] = ResolversParentTypes['Requirements']> = ResolversObject<{
  currentlyDue?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>;
  errors?: Resolver<Maybe<Array<Maybe<ResolversTypes['AccountRequirementsError']>>>, ParentType, ContextType>;
  eventuallyDue?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>;
  pastDue?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>;
  pendingVerification?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AccountRequirementsErrorResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['AccountRequirementsError'] = ResolversParentTypes['AccountRequirementsError']> = ResolversObject<{
  code?: Resolver<ResolversTypes['Code'], ParentType, ContextType>;
  reason?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  requirement?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CodeResolvers = { INVALID_ADDRESS_CITY_STATE_POSTAL_CODE: 'invalid_address_city_state_postal_code', INVALID_STREET_ADDRESS: 'invalid_street_address', INVALID_VALUE_OTHER: 'invalid_value_other', VERIFICATION_DOCUMENT_ADDRESS_MISMATCH: 'verification_document_address_mismatch', VERIFICATION_DOCUMENT_ADDRESS_MISSING: 'verification_document_address_missing', VERIFICATION_DOCUMENT_CORRUPT: 'verification_document_corrupt', VERIFICATION_DOCUMENT_COUNTRY_NOT_SUPPORTED: 'verification_document_country_not_supported', VERIFICATION_DOCUMENT_DOB_MISMATCH: 'verification_document_dob_mismatch', VERIFICATION_DOCUMENT_DUPLICATE_TYPE: 'verification_document_duplicate_type', VERIFICATION_DOCUMENT_EXPIRED: 'verification_document_expired', VERIFICATION_DOCUMENT_FAILED_COPY: 'verification_document_failed_copy', VERIFICATION_DOCUMENT_FAILED_GREYSCALE: 'verification_document_failed_greyscale', VERIFICATION_DOCUMENT_FAILED_OTHER: 'verification_document_failed_other', VERIFICATION_DOCUMENT_FAILED_TEST_MODE: 'verification_document_failed_test_mode', VERIFICATION_DOCUMENT_FRAUDULENT: 'verification_document_fraudulent', VERIFICATION_DOCUMENT_ID_NUMBER_MISMATCH: 'verification_document_id_number_mismatch', VERIFICATION_DOCUMENT_ID_NUMBER_MISSING: 'verification_document_id_number_missing', VERIFICATION_DOCUMENT_INCOMPLETE: 'verification_document_incomplete', VERIFICATION_DOCUMENT_INVALID: 'verification_document_invalid', VERIFICATION_DOCUMENT_ISSUE_OR_EXPIRY_DATE_MISSING: 'verification_document_issue_or_expiry_date_missing', VERIFICATION_DOCUMENT_MANIPULATED: 'verification_document_manipulated', VERIFICATION_DOCUMENT_MISSING_BACK: 'verification_document_missing_back', VERIFICATION_DOCUMENT_MISSING_FRONT: 'verification_document_missing_front', VERIFICATION_DOCUMENT_NAME_MISMATCH: 'verification_document_name_mismatch', VERIFICATION_DOCUMENT_NAME_MISSING: 'verification_document_name_missing', VERIFICATION_DOCUMENT_NATIONALITY_MISMATCH: 'verification_document_nationality_mismatch', VERIFICATION_DOCUMENT_NOT_READABLE: 'verification_document_not_readable', VERIFICATION_DOCUMENT_NOT_SIGNED: 'verification_document_not_signed', VERIFICATION_DOCUMENT_NOT_UPLOADED: 'verification_document_not_uploaded', VERIFICATION_DOCUMENT_PHOTO_MISMATCH: 'verification_document_photo_mismatch', VERIFICATION_DOCUMENT_TOO_LARGE: 'verification_document_too_large', VERIFICATION_DOCUMENT_TYPE_NOT_SUPPORTED: 'verification_document_type_not_supported', VERIFICATION_FAILED_ADDRESS_MATCH: 'verification_failed_address_match', VERIFICATION_FAILED_BUSINESS_IEC_NUMBER: 'verification_failed_business_iec_number', VERIFICATION_FAILED_DOCUMENT_MATCH: 'verification_failed_document_match', VERIFICATION_FAILED_ID_NUMBER_MATCH: 'verification_failed_id_number_match', VERIFICATION_FAILED_KEYED_IDENTITY: 'verification_failed_keyed_identity', VERIFICATION_FAILED_KEYED_MATCH: 'verification_failed_keyed_match', VERIFICATION_FAILED_NAME_MATCH: 'verification_failed_name_match', VERIFICATION_FAILED_OTHER: 'verification_failed_other', VERIFICATION_FAILED_TAX_ID_MATCH: 'verification_failed_tax_id_match', VERIFICATION_FAILED_TAX_ID_NOT_ISSUED: 'verification_failed_tax_id_not_issued', VERIFICATION_MISSING_EXECUTIVES: 'verification_missing_executives', VERIFICATION_MISSING_OWNERS: 'verification_missing_owners', VERIFICATION_REQUIRES_ADDITIONAL_MEMORANDUM_OF_ASSOCIATIONS: 'verification_requires_additional_memorandum_of_associations' };

export type LegalEntityPersonVerificationResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['LegalEntityPersonVerification'] = ResolversParentTypes['LegalEntityPersonVerification']> = ResolversObject<{
  additionalDocument?: Resolver<Maybe<ResolversTypes['AdditionalDocument']>, ParentType, ContextType>;
  details?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  detailsCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  document?: Resolver<Maybe<ResolversTypes['LegalEntityPersonVerificationDocument']>, ParentType, ContextType>;
  status?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AdditionalDocumentResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['AdditionalDocument'] = ResolversParentTypes['AdditionalDocument']> = ResolversObject<{
  back?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  details?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  detailsCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  front?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type LegalEntityPersonVerificationDocumentResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['LegalEntityPersonVerificationDocument'] = ResolversParentTypes['LegalEntityPersonVerificationDocument']> = ResolversObject<{
  back?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  details?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  detailsCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  front?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Object3Resolvers = { ACCOUNT: 'account' };

export type AccountRequirementsResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['AccountRequirements'] = ResolversParentTypes['AccountRequirements']> = ResolversObject<{
  currentDeadline?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  currentlyDue?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>;
  disabledReason?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  errors?: Resolver<Maybe<Array<Maybe<ResolversTypes['AccountRequirementsError']>>>, ParentType, ContextType>;
  eventuallyDue?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>;
  pastDue?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>;
  pendingVerification?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SettingsResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Settings'] = ResolversParentTypes['Settings']> = ResolversObject<{
  bacsDebitPayments?: Resolver<Maybe<ResolversTypes['BacsDebitPayments2']>, ParentType, ContextType>;
  branding?: Resolver<Maybe<ResolversTypes['Branding']>, ParentType, ContextType>;
  cardIssuing?: Resolver<Maybe<ResolversTypes['CardIssuing2']>, ParentType, ContextType>;
  cardPayments?: Resolver<Maybe<ResolversTypes['CardPayments2']>, ParentType, ContextType>;
  dashboard?: Resolver<Maybe<ResolversTypes['Dashboard']>, ParentType, ContextType>;
  payments?: Resolver<Maybe<ResolversTypes['Payments']>, ParentType, ContextType>;
  payouts?: Resolver<Maybe<ResolversTypes['Payouts']>, ParentType, ContextType>;
  sepaDebitPayments?: Resolver<Maybe<ResolversTypes['SepaDebitPayments2']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BacsDebitPayments2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['BacsDebitPayments2'] = ResolversParentTypes['BacsDebitPayments2']> = ResolversObject<{
  displayName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BrandingResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Branding'] = ResolversParentTypes['Branding']> = ResolversObject<{
  icon?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  logo?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  primaryColor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  secondaryColor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CardIssuing2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CardIssuing2'] = ResolversParentTypes['CardIssuing2']> = ResolversObject<{
  tosAcceptance?: Resolver<Maybe<ResolversTypes['CardIssuingAccountTermsOfService']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CardIssuingAccountTermsOfServiceResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CardIssuingAccountTermsOfService'] = ResolversParentTypes['CardIssuingAccountTermsOfService']> = ResolversObject<{
  date?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  ip?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  userAgent?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CardPayments2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CardPayments2'] = ResolversParentTypes['CardPayments2']> = ResolversObject<{
  declineOn?: Resolver<Maybe<ResolversTypes['AccountDeclineChargeOn']>, ParentType, ContextType>;
  statementDescriptorPrefix?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AccountDeclineChargeOnResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['AccountDeclineChargeOn'] = ResolversParentTypes['AccountDeclineChargeOn']> = ResolversObject<{
  avsFailure?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  cvcFailure?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type DashboardResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Dashboard'] = ResolversParentTypes['Dashboard']> = ResolversObject<{
  displayName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  timezone?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type PaymentsResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Payments'] = ResolversParentTypes['Payments']> = ResolversObject<{
  statementDescriptor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  statementDescriptorKana?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  statementDescriptorKanji?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type PayoutsResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Payouts'] = ResolversParentTypes['Payouts']> = ResolversObject<{
  debitNegativeBalances?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  schedule?: Resolver<ResolversTypes['TransferSchedule'], ParentType, ContextType>;
  statementDescriptor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type TransferScheduleResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['TransferSchedule'] = ResolversParentTypes['TransferSchedule']> = ResolversObject<{
  delayDays?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  interval?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  monthlyAnchor?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  weeklyAnchor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SepaDebitPayments2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SepaDebitPayments2'] = ResolversParentTypes['SepaDebitPayments2']> = ResolversObject<{
  creditorId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AccountTosAcceptanceResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['AccountTosAcceptance'] = ResolversParentTypes['AccountTosAcceptance']> = ResolversObject<{
  date?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  ip?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  serviceAgreement?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  userAgent?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Type2Resolvers = { CUSTOM: 'custom', EXPRESS: 'express', STANDARD: 'standard' };

export type PolymorphicResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Polymorphic'] = ResolversParentTypes['Polymorphic']> = ResolversObject<{
  account?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  accountHolderName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  accountHolderType?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  accountType?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  addressCity?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  addressCountry?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  addressLine1?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  addressLine1Check?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  addressLine2?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  addressState?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  addressZip?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  addressZipCheck?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  availablePayoutMethods?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  bankName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  brand?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  country?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  currency?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  customer?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  cvcCheck?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  defaultForCurrency?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  dynamicLast4?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  expMonth?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  expYear?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  fingerprint?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  funding?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  last4?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  metadata?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  object?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  recipient?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  routingNumber?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  tokenizationMethod?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ListAccountCapabilityResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ListAccountCapability'] = ResolversParentTypes['ListAccountCapability']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['Capability']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CapabilityResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Capability'] = ResolversParentTypes['Capability']> = ResolversObject<{
  account?: Resolver<ResolversTypes['JSON'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object6'], ParentType, ContextType>;
  requested?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  requestedAt?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  requirements?: Resolver<Maybe<ResolversTypes['AccountCapabilityRequirements']>, ParentType, ContextType>;
  status?: Resolver<ResolversTypes['Status5'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Object6Resolvers = { CAPABILITY: 'capability' };

export type AccountCapabilityRequirementsResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['AccountCapabilityRequirements'] = ResolversParentTypes['AccountCapabilityRequirements']> = ResolversObject<{
  currentDeadline?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  currentlyDue?: Resolver<Array<Maybe<ResolversTypes['String']>>, ParentType, ContextType>;
  disabledReason?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  errors?: Resolver<Array<Maybe<ResolversTypes['AccountRequirementsError']>>, ParentType, ContextType>;
  eventuallyDue?: Resolver<Array<Maybe<ResolversTypes['String']>>, ParentType, ContextType>;
  pastDue?: Resolver<Array<Maybe<ResolversTypes['String']>>, ParentType, ContextType>;
  pendingVerification?: Resolver<Array<Maybe<ResolversTypes['String']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Status5Resolvers = { ACTIVE: 'active', DISABLED: 'disabled', INACTIVE: 'inactive', PENDING: 'pending', UNREQUESTED: 'unrequested' };

export type ExternalAccountListResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ExternalAccountList'] = ResolversParentTypes['ExternalAccountList']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['DataListItem']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type V1AccountPeople2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['V1AccountPeople2'] = ResolversParentTypes['V1AccountPeople2']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['Person']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type V1AccountPersons2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['V1AccountPersons2'] = ResolversParentTypes['V1AccountPersons2']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['Person']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type V1Accounts2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['V1Accounts2'] = ResolversParentTypes['V1Accounts2']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['Account3']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ApplePayDomainListResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ApplePayDomainList'] = ResolversParentTypes['ApplePayDomainList']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['ApplePayDomain']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ApplePayDomainResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ApplePayDomain'] = ResolversParentTypes['ApplePayDomain']> = ResolversObject<{
  created?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  domainName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  livemode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object9'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Object9Resolvers = { APPLE_PAY_DOMAIN: 'apple_pay_domain' };

export type V1ApplicationFees2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['V1ApplicationFees2'] = ResolversParentTypes['V1ApplicationFees2']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['ApplicationFee']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ApplicationFeeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ApplicationFee'] = ResolversParentTypes['ApplicationFee']> = ResolversObject<{
  account?: Resolver<ResolversTypes['JSON'], ParentType, ContextType>;
  amount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  amountRefunded?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  application?: Resolver<ResolversTypes['JSON'], ParentType, ContextType>;
  balanceTransaction?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  charge?: Resolver<ResolversTypes['JSON'], ParentType, ContextType>;
  created?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  currency?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  livemode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object10'], ParentType, ContextType>;
  originatingTransaction?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  refunded?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  refunds?: Resolver<ResolversTypes['Refunds'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Object10Resolvers = { APPLICATION_FEE: 'application_fee' };

export type RefundsResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Refunds'] = ResolversParentTypes['Refunds']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['FeeRefund']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type FeeRefundResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['FeeRefund'] = ResolversParentTypes['FeeRefund']> = ResolversObject<{
  amount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  balanceTransaction?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  created?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  currency?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  fee?: Resolver<ResolversTypes['JSON'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  metadata?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object11'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Object11Resolvers = { FEE_REFUND: 'fee_refund' };

export type FeeRefundListResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['FeeRefundList'] = ResolversParentTypes['FeeRefundList']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['FeeRefund']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BalanceResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Balance'] = ResolversParentTypes['Balance']> = ResolversObject<{
  available?: Resolver<Array<Maybe<ResolversTypes['BalanceAmount']>>, ParentType, ContextType>;
  connectReserved?: Resolver<Maybe<Array<Maybe<ResolversTypes['BalanceAmount']>>>, ParentType, ContextType>;
  instantAvailable?: Resolver<Maybe<Array<Maybe<ResolversTypes['BalanceAmount']>>>, ParentType, ContextType>;
  issuing?: Resolver<Maybe<ResolversTypes['BalanceDetail']>, ParentType, ContextType>;
  livemode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object12'], ParentType, ContextType>;
  pending?: Resolver<Array<Maybe<ResolversTypes['BalanceAmount']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BalanceAmountResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['BalanceAmount'] = ResolversParentTypes['BalanceAmount']> = ResolversObject<{
  amount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  currency?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  sourceTypes?: Resolver<Maybe<ResolversTypes['BalanceAmountBySourceType']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BalanceAmountBySourceTypeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['BalanceAmountBySourceType'] = ResolversParentTypes['BalanceAmountBySourceType']> = ResolversObject<{
  bankAccount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  card?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  fpx?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BalanceDetailResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['BalanceDetail'] = ResolversParentTypes['BalanceDetail']> = ResolversObject<{
  available?: Resolver<Array<Maybe<ResolversTypes['BalanceAmount']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Object12Resolvers = { BALANCE: 'balance' };

export type BalanceTransactionsListResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['BalanceTransactionsList'] = ResolversParentTypes['BalanceTransactionsList']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['BalanceTransaction3']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BalanceTransaction3Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['BalanceTransaction3'] = ResolversParentTypes['BalanceTransaction3']> = ResolversObject<{
  amount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  availableOn?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  created?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  currency?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  exchangeRate?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  fee?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  feeDetails?: Resolver<Array<Maybe<ResolversTypes['Fee3']>>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  net?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object13'], ParentType, ContextType>;
  reportingCategory?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  source?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  status?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  type?: Resolver<ResolversTypes['Type6'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Fee3Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Fee3'] = ResolversParentTypes['Fee3']> = ResolversObject<{
  amount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  application?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  currency?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Object13Resolvers = { BALANCE_TRANSACTION: 'balance_transaction' };

export type Type6Resolvers = { ADJUSTMENT: 'adjustment', ADVANCE: 'advance', ADVANCE_FUNDING: 'advance_funding', ANTICIPATION_REPAYMENT: 'anticipation_repayment', APPLICATION_FEE: 'application_fee', APPLICATION_FEE_REFUND: 'application_fee_refund', CHARGE: 'charge', CONNECT_COLLECTION_TRANSFER: 'connect_collection_transfer', CONTRIBUTION: 'contribution', ISSUING_AUTHORIZATION_HOLD: 'issuing_authorization_hold', ISSUING_AUTHORIZATION_RELEASE: 'issuing_authorization_release', ISSUING_DISPUTE: 'issuing_dispute', ISSUING_TRANSACTION: 'issuing_transaction', PAYMENT: 'payment', PAYMENT_FAILURE_REFUND: 'payment_failure_refund', PAYMENT_REFUND: 'payment_refund', PAYOUT: 'payout', PAYOUT_CANCEL: 'payout_cancel', PAYOUT_FAILURE: 'payout_failure', REFUND: 'refund', REFUND_FAILURE: 'refund_failure', RESERVE_TRANSACTION: 'reserve_transaction', RESERVED_FUNDS: 'reserved_funds', STRIPE_FEE: 'stripe_fee', STRIPE_FX_FEE: 'stripe_fx_fee', TAX_FEE: 'tax_fee', TOPUP: 'topup', TOPUP_REVERSAL: 'topup_reversal', TRANSFER: 'transfer', TRANSFER_CANCEL: 'transfer_cancel', TRANSFER_FAILURE: 'transfer_failure', TRANSFER_REFUND: 'transfer_refund' };

export type V1BillingPortalConfigurations2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['V1BillingPortalConfigurations2'] = ResolversParentTypes['V1BillingPortalConfigurations2']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['BillingPortalConfiguration']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BillingPortalConfigurationResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['BillingPortalConfiguration'] = ResolversParentTypes['BillingPortalConfiguration']> = ResolversObject<{
  active?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  application?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  businessProfile?: Resolver<ResolversTypes['PortalBusinessProfile'], ParentType, ContextType>;
  created?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  defaultReturnUrl?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  features?: Resolver<ResolversTypes['PortalFeatures'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  isDefault?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  livemode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object14'], ParentType, ContextType>;
  updated?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type PortalBusinessProfileResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PortalBusinessProfile'] = ResolversParentTypes['PortalBusinessProfile']> = ResolversObject<{
  headline?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  privacyPolicyUrl?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  termsOfServiceUrl?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type PortalFeaturesResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PortalFeatures'] = ResolversParentTypes['PortalFeatures']> = ResolversObject<{
  customerUpdate?: Resolver<ResolversTypes['PortalCustomerUpdate'], ParentType, ContextType>;
  invoiceHistory?: Resolver<ResolversTypes['PortalInvoiceList'], ParentType, ContextType>;
  paymentMethodUpdate?: Resolver<ResolversTypes['PortalPaymentMethodUpdate'], ParentType, ContextType>;
  subscriptionCancel?: Resolver<ResolversTypes['PortalSubscriptionCancel'], ParentType, ContextType>;
  subscriptionPause?: Resolver<ResolversTypes['PortalSubscriptionPause'], ParentType, ContextType>;
  subscriptionUpdate?: Resolver<ResolversTypes['PortalSubscriptionUpdate'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type PortalCustomerUpdateResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PortalCustomerUpdate'] = ResolversParentTypes['PortalCustomerUpdate']> = ResolversObject<{
  allowedUpdates?: Resolver<Array<Maybe<ResolversTypes['AllowedUpdatesListItem']>>, ParentType, ContextType>;
  enabled?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AllowedUpdatesListItemResolvers = { ADDRESS: 'address', EMAIL: 'email', PHONE: 'phone', SHIPPING: 'shipping', TAX_ID: 'tax_id' };

export type PortalInvoiceListResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PortalInvoiceList'] = ResolversParentTypes['PortalInvoiceList']> = ResolversObject<{
  enabled?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type PortalPaymentMethodUpdateResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PortalPaymentMethodUpdate'] = ResolversParentTypes['PortalPaymentMethodUpdate']> = ResolversObject<{
  enabled?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type PortalSubscriptionCancelResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PortalSubscriptionCancel'] = ResolversParentTypes['PortalSubscriptionCancel']> = ResolversObject<{
  enabled?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  mode?: Resolver<ResolversTypes['Mode'], ParentType, ContextType>;
  prorationBehavior?: Resolver<ResolversTypes['ProrationBehavior'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ModeResolvers = { AT_PERIOD_END: 'at_period_end', IMMEDIATELY: 'immediately' };

export type ProrationBehaviorResolvers = { ALWAYS_INVOICE: 'always_invoice', CREATE_PRORATIONS: 'create_prorations', NONE: 'none' };

export type PortalSubscriptionPauseResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PortalSubscriptionPause'] = ResolversParentTypes['PortalSubscriptionPause']> = ResolversObject<{
  enabled?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type PortalSubscriptionUpdateResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PortalSubscriptionUpdate'] = ResolversParentTypes['PortalSubscriptionUpdate']> = ResolversObject<{
  defaultAllowedUpdates?: Resolver<Array<Maybe<ResolversTypes['DefaultAllowedUpdatesListItem']>>, ParentType, ContextType>;
  enabled?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  products?: Resolver<Maybe<Array<Maybe<ResolversTypes['PortalSubscriptionUpdateProduct']>>>, ParentType, ContextType>;
  prorationBehavior?: Resolver<ResolversTypes['ProrationBehavior2'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type DefaultAllowedUpdatesListItemResolvers = { PRICE: 'price', PROMOTION_CODE: 'promotion_code', QUANTITY: 'quantity' };

export type PortalSubscriptionUpdateProductResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PortalSubscriptionUpdateProduct'] = ResolversParentTypes['PortalSubscriptionUpdateProduct']> = ResolversObject<{
  prices?: Resolver<Array<Maybe<ResolversTypes['String']>>, ParentType, ContextType>;
  product?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ProrationBehavior2Resolvers = { ALWAYS_INVOICE: 'always_invoice', CREATE_PRORATIONS: 'create_prorations', NONE: 'none' };

export type Object14Resolvers = { BILLING_PORTAL_CONFIGURATION: 'billing_portal.configuration' };

export type V1BitcoinReceivers2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['V1BitcoinReceivers2'] = ResolversParentTypes['V1BitcoinReceivers2']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['BitcoinReceiver']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BitcoinReceiverResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['BitcoinReceiver'] = ResolversParentTypes['BitcoinReceiver']> = ResolversObject<{
  active?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  amount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  amountReceived?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  bitcoinAmount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  bitcoinAmountReceived?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  bitcoinUri?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  created?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  currency?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  customer?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  email?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  filled?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  inboundAddress?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  livemode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  metadata?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object16'], ParentType, ContextType>;
  payment?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  refundAddress?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  transactions?: Resolver<Maybe<ResolversTypes['Transactions']>, ParentType, ContextType>;
  uncapturedFunds?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  usedForPayment?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Object16Resolvers = { BITCOIN_RECEIVER: 'bitcoin_receiver' };

export type TransactionsResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Transactions'] = ResolversParentTypes['Transactions']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['BitcoinTransaction']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BitcoinTransactionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['BitcoinTransaction'] = ResolversParentTypes['BitcoinTransaction']> = ResolversObject<{
  amount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  bitcoinAmount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  created?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  currency?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object17'], ParentType, ContextType>;
  receiver?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Object17Resolvers = { BITCOIN_TRANSACTION: 'bitcoin_transaction' };

export type BitcoinTransactionListResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['BitcoinTransactionList'] = ResolversParentTypes['BitcoinTransactionList']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['BitcoinTransaction']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type V1Charges2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['V1Charges2'] = ResolversParentTypes['V1Charges2']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['Charge2']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Charge2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Charge2'] = ResolversParentTypes['Charge2']> = ResolversObject<{
  amount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  amountCaptured?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  amountRefunded?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  application?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  applicationFee?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  applicationFeeAmount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  balanceTransaction?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  billingDetails?: Resolver<ResolversTypes['BillingDetails'], ParentType, ContextType>;
  calculatedStatementDescriptor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  captured?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  created?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  currency?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  customer?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  disputed?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  failureCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  failureMessage?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  fraudDetails?: Resolver<Maybe<ResolversTypes['FraudDetails']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  invoice?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  livemode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  metadata?: Resolver<ResolversTypes['JSON'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object18'], ParentType, ContextType>;
  onBehalfOf?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  order?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  outcome?: Resolver<Maybe<ResolversTypes['Outcome']>, ParentType, ContextType>;
  paid?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  paymentIntent?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  paymentMethod?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  paymentMethodDetails?: Resolver<Maybe<ResolversTypes['PaymentMethodDetails']>, ParentType, ContextType>;
  receiptEmail?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  receiptNumber?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  receiptUrl?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  refunded?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  refunds?: Resolver<ResolversTypes['RefundList'], ParentType, ContextType>;
  review?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  shipping?: Resolver<Maybe<ResolversTypes['Shipping']>, ParentType, ContextType>;
  sourceTransfer?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  statementDescriptor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  statementDescriptorSuffix?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  status?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  transfer?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  transferData?: Resolver<Maybe<ResolversTypes['TransferData']>, ParentType, ContextType>;
  transferGroup?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BillingDetailsResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['BillingDetails'] = ResolversParentTypes['BillingDetails']> = ResolversObject<{
  address?: Resolver<Maybe<ResolversTypes['Address4']>, ParentType, ContextType>;
  email?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  phone?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Address4Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Address4'] = ResolversParentTypes['Address4']> = ResolversObject<{
  city?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  country?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  line1?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  line2?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  postalCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  state?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type FraudDetailsResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['FraudDetails'] = ResolversParentTypes['FraudDetails']> = ResolversObject<{
  stripeReport?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  userReport?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Object18Resolvers = { CHARGE: 'charge' };

export type OutcomeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Outcome'] = ResolversParentTypes['Outcome']> = ResolversObject<{
  networkStatus?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  reason?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  riskLevel?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  riskScore?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  rule?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  sellerMessage?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type PaymentMethodDetailsResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PaymentMethodDetails'] = ResolversParentTypes['PaymentMethodDetails']> = ResolversObject<{
  achCreditTransfer?: Resolver<Maybe<ResolversTypes['AchCreditTransfer']>, ParentType, ContextType>;
  achDebit?: Resolver<Maybe<ResolversTypes['AchDebit']>, ParentType, ContextType>;
  acssDebit?: Resolver<Maybe<ResolversTypes['AcssDebit']>, ParentType, ContextType>;
  afterpayClearpay?: Resolver<Maybe<ResolversTypes['AfterpayClearpay']>, ParentType, ContextType>;
  alipay?: Resolver<Maybe<ResolversTypes['Alipay']>, ParentType, ContextType>;
  auBecsDebit?: Resolver<Maybe<ResolversTypes['AuBecsDebit']>, ParentType, ContextType>;
  bacsDebit?: Resolver<Maybe<ResolversTypes['BacsDebit']>, ParentType, ContextType>;
  bancontact?: Resolver<Maybe<ResolversTypes['Bancontact']>, ParentType, ContextType>;
  boleto?: Resolver<Maybe<ResolversTypes['Boleto']>, ParentType, ContextType>;
  card?: Resolver<Maybe<ResolversTypes['Card4']>, ParentType, ContextType>;
  cardPresent?: Resolver<Maybe<ResolversTypes['CardPresent']>, ParentType, ContextType>;
  eps?: Resolver<Maybe<ResolversTypes['Eps']>, ParentType, ContextType>;
  fpx?: Resolver<Maybe<ResolversTypes['Fpx2']>, ParentType, ContextType>;
  giropay?: Resolver<Maybe<ResolversTypes['Giropay']>, ParentType, ContextType>;
  grabpay?: Resolver<Maybe<ResolversTypes['Grabpay']>, ParentType, ContextType>;
  ideal?: Resolver<Maybe<ResolversTypes['Ideal']>, ParentType, ContextType>;
  interacPresent?: Resolver<Maybe<ResolversTypes['InteracPresent']>, ParentType, ContextType>;
  klarna?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  multibanco?: Resolver<Maybe<ResolversTypes['Multibanco']>, ParentType, ContextType>;
  oxxo?: Resolver<Maybe<ResolversTypes['Oxxo']>, ParentType, ContextType>;
  p24?: Resolver<Maybe<ResolversTypes['P24']>, ParentType, ContextType>;
  sepaDebit?: Resolver<Maybe<ResolversTypes['SepaDebit']>, ParentType, ContextType>;
  sofort?: Resolver<Maybe<ResolversTypes['Sofort']>, ParentType, ContextType>;
  stripeAccount?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  wechat?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  wechatPay?: Resolver<Maybe<ResolversTypes['WechatPay']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AchCreditTransferResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['AchCreditTransfer'] = ResolversParentTypes['AchCreditTransfer']> = ResolversObject<{
  accountNumber?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  bankName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  routingNumber?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  swiftCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AchDebitResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['AchDebit'] = ResolversParentTypes['AchDebit']> = ResolversObject<{
  accountHolderType?: Resolver<Maybe<ResolversTypes['AccountHolderType4']>, ParentType, ContextType>;
  bankName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  country?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  fingerprint?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  last4?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  routingNumber?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AccountHolderType4Resolvers = { COMPANY: 'company', INDIVIDUAL: 'individual' };

export type AcssDebitResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['AcssDebit'] = ResolversParentTypes['AcssDebit']> = ResolversObject<{
  bankName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  fingerprint?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  institutionNumber?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  last4?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  mandate?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  transitNumber?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AfterpayClearpayResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['AfterpayClearpay'] = ResolversParentTypes['AfterpayClearpay']> = ResolversObject<{
  reference?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AlipayResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Alipay'] = ResolversParentTypes['Alipay']> = ResolversObject<{
  fingerprint?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  transactionId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AuBecsDebitResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['AuBecsDebit'] = ResolversParentTypes['AuBecsDebit']> = ResolversObject<{
  bsbNumber?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  fingerprint?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  last4?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  mandate?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BacsDebitResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['BacsDebit'] = ResolversParentTypes['BacsDebit']> = ResolversObject<{
  fingerprint?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  last4?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  mandate?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  sortCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BancontactResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Bancontact'] = ResolversParentTypes['Bancontact']> = ResolversObject<{
  bankCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  bankName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  bic?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  generatedSepaDebit?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  generatedSepaDebitMandate?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  ibanLast4?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  preferredLanguage?: Resolver<Maybe<ResolversTypes['PreferredLanguage']>, ParentType, ContextType>;
  verifiedName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type PreferredLanguageResolvers = { DE: 'de', EN: 'en', FR: 'fr', NL: 'nl' };

export type BoletoResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Boleto'] = ResolversParentTypes['Boleto']> = ResolversObject<{
  taxId?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Card4Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Card4'] = ResolversParentTypes['Card4']> = ResolversObject<{
  brand?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  checks?: Resolver<Maybe<ResolversTypes['Checks']>, ParentType, ContextType>;
  country?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  expMonth?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  expYear?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  fingerprint?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  funding?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  installments?: Resolver<Maybe<ResolversTypes['Installments']>, ParentType, ContextType>;
  last4?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  network?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  threeDSecure?: Resolver<Maybe<ResolversTypes['ThreeDSecure2']>, ParentType, ContextType>;
  wallet?: Resolver<Maybe<ResolversTypes['Wallet']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ChecksResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Checks'] = ResolversParentTypes['Checks']> = ResolversObject<{
  addressLine1Check?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  addressPostalCodeCheck?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  cvcCheck?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type InstallmentsResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Installments'] = ResolversParentTypes['Installments']> = ResolversObject<{
  plan?: Resolver<Maybe<ResolversTypes['Plan']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type PlanResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Plan'] = ResolversParentTypes['Plan']> = ResolversObject<{
  count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  interval?: Resolver<Maybe<ResolversTypes['Interval3']>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['Type8']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Interval3Resolvers = { MONTH: 'month' };

export type Type8Resolvers = { FIXED_COUNT: 'fixed_count' };

export type ThreeDSecure2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ThreeDSecure2'] = ResolversParentTypes['ThreeDSecure2']> = ResolversObject<{
  authenticationFlow?: Resolver<Maybe<ResolversTypes['AuthenticationFlow']>, ParentType, ContextType>;
  result?: Resolver<Maybe<ResolversTypes['Result']>, ParentType, ContextType>;
  resultReason?: Resolver<Maybe<ResolversTypes['ResultReason']>, ParentType, ContextType>;
  version?: Resolver<Maybe<ResolversTypes['Version']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AuthenticationFlowResolvers = { CHALLENGE: 'challenge', FRICTIONLESS: 'frictionless' };

export type ResultResolvers = { ATTEMPT_ACKNOWLEDGED: 'attempt_acknowledged', AUTHENTICATED: 'authenticated', FAILED: 'failed', NOT_SUPPORTED: 'not_supported', PROCESSING_ERROR: 'processing_error' };

export type ResultReasonResolvers = { ABANDONED: 'abandoned', BYPASSED: 'bypassed', CANCELED: 'canceled', CARD_NOT_ENROLLED: 'card_not_enrolled', NETWORK_NOT_SUPPORTED: 'network_not_supported', PROTOCOL_ERROR: 'protocol_error', REJECTED: 'rejected' };

export type VersionResolvers = { _1_0_2: '1.0.2', _2_1_0: '2.1.0', _2_2_0: '2.2.0' };

export type WalletResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Wallet'] = ResolversParentTypes['Wallet']> = ResolversObject<{
  amexExpressCheckout?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  applePay?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  dynamicLast4?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  googlePay?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  masterpass?: Resolver<Maybe<ResolversTypes['Masterpass']>, ParentType, ContextType>;
  samsungPay?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['Type9']>, ParentType, ContextType>;
  visaCheckout?: Resolver<Maybe<ResolversTypes['VisaCheckout']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type MasterpassResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Masterpass'] = ResolversParentTypes['Masterpass']> = ResolversObject<{
  billingAddress?: Resolver<Maybe<ResolversTypes['BillingAddress']>, ParentType, ContextType>;
  email?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  shippingAddress?: Resolver<Maybe<ResolversTypes['ShippingAddress']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BillingAddressResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['BillingAddress'] = ResolversParentTypes['BillingAddress']> = ResolversObject<{
  city?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  country?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  line1?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  line2?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  postalCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  state?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ShippingAddressResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ShippingAddress'] = ResolversParentTypes['ShippingAddress']> = ResolversObject<{
  city?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  country?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  line1?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  line2?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  postalCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  state?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Type9Resolvers = { AMEX_EXPRESS_CHECKOUT: 'amex_express_checkout', APPLE_PAY: 'apple_pay', GOOGLE_PAY: 'google_pay', MASTERPASS: 'masterpass', SAMSUNG_PAY: 'samsung_pay', VISA_CHECKOUT: 'visa_checkout' };

export type VisaCheckoutResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['VisaCheckout'] = ResolversParentTypes['VisaCheckout']> = ResolversObject<{
  billingAddress?: Resolver<Maybe<ResolversTypes['BillingAddress']>, ParentType, ContextType>;
  email?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  shippingAddress?: Resolver<Maybe<ResolversTypes['ShippingAddress']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CardPresentResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CardPresent'] = ResolversParentTypes['CardPresent']> = ResolversObject<{
  brand?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  cardholderName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  country?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  emvAuthData?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  expMonth?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  expYear?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  fingerprint?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  funding?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  generatedCard?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  last4?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  network?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  readMethod?: Resolver<Maybe<ResolversTypes['ReadMethod']>, ParentType, ContextType>;
  receipt?: Resolver<Maybe<ResolversTypes['Receipt']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ReadMethodResolvers = { CONTACT_EMV: 'contact_emv', CONTACTLESS_EMV: 'contactless_emv', CONTACTLESS_MAGSTRIPE_MODE: 'contactless_magstripe_mode', MAGNETIC_STRIPE_FALLBACK: 'magnetic_stripe_fallback', MAGNETIC_STRIPE_TRACK2: 'magnetic_stripe_track2' };

export type ReceiptResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Receipt'] = ResolversParentTypes['Receipt']> = ResolversObject<{
  accountType?: Resolver<Maybe<ResolversTypes['AccountType4']>, ParentType, ContextType>;
  applicationCryptogram?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  applicationPreferredName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  authorizationCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  authorizationResponseCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  cardholderVerificationMethod?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  dedicatedFileName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  terminalVerificationResults?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  transactionStatusInformation?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AccountType4Resolvers = { CHECKING: 'checking', CREDIT: 'credit', PREPAID: 'prepaid', UNKNOWN: 'unknown' };

export type EpsResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Eps'] = ResolversParentTypes['Eps']> = ResolversObject<{
  bank?: Resolver<Maybe<ResolversTypes['Bank']>, ParentType, ContextType>;
  verifiedName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BankResolvers = { ARZTE_UND_APOTHEKER_BANK: 'arzte_und_apotheker_bank', AUSTRIAN_ANADI_BANK_AG: 'austrian_anadi_bank_ag', BANK_AUSTRIA: 'bank_austria', BANKHAUS_CARL_SPANGLER: 'bankhaus_carl_spangler', BANKHAUS_SCHELHAMMER_UND_SCHATTERA_AG: 'bankhaus_schelhammer_und_schattera_ag', BAWAG_PSK_AG: 'bawag_psk_ag', BKS_BANK_AG: 'bks_bank_ag', BRULL_KALLMUS_BANK_AG: 'brull_kallmus_bank_ag', BTV_VIER_LANDER_BANK: 'btv_vier_lander_bank', CAPITAL_BANK_GRAWE_GRUPPE_AG: 'capital_bank_grawe_gruppe_ag', DOLOMITENBANK: 'dolomitenbank', EASYBANK_AG: 'easybank_ag', ERSTE_BANK_UND_SPARKASSEN: 'erste_bank_und_sparkassen', HYPO_ALPEADRIABANK_INTERNATIONAL_AG: 'hypo_alpeadriabank_international_ag', HYPO_BANK_BURGENLAND_AKTIENGESELLSCHAFT: 'hypo_bank_burgenland_aktiengesellschaft', HYPO_NOE_LB_FUR_NIEDEROSTERREICH_U_WIEN: 'hypo_noe_lb_fur_niederosterreich_u_wien', HYPO_OBEROSTERREICH_SALZBURG_STEIERMARK: 'hypo_oberosterreich_salzburg_steiermark', HYPO_TIROL_BANK_AG: 'hypo_tirol_bank_ag', HYPO_VORARLBERG_BANK_AG: 'hypo_vorarlberg_bank_ag', MARCHFELDER_BANK: 'marchfelder_bank', OBERBANK_AG: 'oberbank_ag', RAIFFEISEN_BANKENGRUPPE_OSTERREICH: 'raiffeisen_bankengruppe_osterreich', SCHOELLERBANK_AG: 'schoellerbank_ag', SPARDA_BANK_WIEN: 'sparda_bank_wien', VOLKSBANK_GRUPPE: 'volksbank_gruppe', VOLKSKREDITBANK_AG: 'volkskreditbank_ag', VR_BANK_BRAUNAU: 'vr_bank_braunau' };

export type Fpx2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Fpx2'] = ResolversParentTypes['Fpx2']> = ResolversObject<{
  bank?: Resolver<ResolversTypes['Bank2'], ParentType, ContextType>;
  transactionId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Bank2Resolvers = { AFFIN_BANK: 'affin_bank', ALLIANCE_BANK: 'alliance_bank', AMBANK: 'ambank', BANK_ISLAM: 'bank_islam', BANK_MUAMALAT: 'bank_muamalat', BANK_RAKYAT: 'bank_rakyat', BSN: 'bsn', CIMB: 'cimb', DEUTSCHE_BANK: 'deutsche_bank', HONG_LEONG_BANK: 'hong_leong_bank', HSBC: 'hsbc', KFH: 'kfh', MAYBANK2E: 'maybank2e', MAYBANK2U: 'maybank2u', OCBC: 'ocbc', PB_ENTERPRISE: 'pb_enterprise', PUBLIC_BANK: 'public_bank', RHB: 'rhb', STANDARD_CHARTERED: 'standard_chartered', UOB: 'uob' };

export type GiropayResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Giropay'] = ResolversParentTypes['Giropay']> = ResolversObject<{
  bankCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  bankName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  bic?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  verifiedName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type GrabpayResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Grabpay'] = ResolversParentTypes['Grabpay']> = ResolversObject<{
  transactionId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type IdealResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Ideal'] = ResolversParentTypes['Ideal']> = ResolversObject<{
  bank?: Resolver<Maybe<ResolversTypes['Bank3']>, ParentType, ContextType>;
  bic?: Resolver<Maybe<ResolversTypes['Bic3']>, ParentType, ContextType>;
  generatedSepaDebit?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  generatedSepaDebitMandate?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  ibanLast4?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  verifiedName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Bank3Resolvers = { ABN_AMRO: 'abn_amro', ASN_BANK: 'asn_bank', BUNQ: 'bunq', HANDELSBANKEN: 'handelsbanken', ING: 'ing', KNAB: 'knab', MONEYOU: 'moneyou', RABOBANK: 'rabobank', REGIOBANK: 'regiobank', REVOLUT: 'revolut', SNS_BANK: 'sns_bank', TRIODOS_BANK: 'triodos_bank', VAN_LANSCHOT: 'van_lanschot' };

export type InteracPresentResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['InteracPresent'] = ResolversParentTypes['InteracPresent']> = ResolversObject<{
  brand?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  cardholderName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  country?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  emvAuthData?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  expMonth?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  expYear?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  fingerprint?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  funding?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  generatedCard?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  last4?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  network?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  preferredLocales?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>;
  readMethod?: Resolver<Maybe<ResolversTypes['ReadMethod']>, ParentType, ContextType>;
  receipt?: Resolver<Maybe<ResolversTypes['Receipt2']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Receipt2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Receipt2'] = ResolversParentTypes['Receipt2']> = ResolversObject<{
  accountType?: Resolver<Maybe<ResolversTypes['AccountType5']>, ParentType, ContextType>;
  applicationCryptogram?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  applicationPreferredName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  authorizationCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  authorizationResponseCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  cardholderVerificationMethod?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  dedicatedFileName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  terminalVerificationResults?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  transactionStatusInformation?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AccountType5Resolvers = { CHECKING: 'checking', SAVINGS: 'savings', UNKNOWN: 'unknown' };

export type MultibancoResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Multibanco'] = ResolversParentTypes['Multibanco']> = ResolversObject<{
  entity?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  reference?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type OxxoResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Oxxo'] = ResolversParentTypes['Oxxo']> = ResolversObject<{
  number?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type P24Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['P24'] = ResolversParentTypes['P24']> = ResolversObject<{
  bank?: Resolver<Maybe<ResolversTypes['Bank4']>, ParentType, ContextType>;
  reference?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  verifiedName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Bank4Resolvers = { ALIOR_BANK: 'alior_bank', BANK_MILLENNIUM: 'bank_millennium', BANK_NOWY_BFG_SA: 'bank_nowy_bfg_sa', BANK_PEKAO_SA: 'bank_pekao_sa', BANKI_SPBDZIELCZE: 'banki_spbdzielcze', BLIK: 'blik', BNP_PARIBAS: 'bnp_paribas', BOZ: 'boz', CITI_HANDLOWY: 'citi_handlowy', CREDIT_AGRICOLE: 'credit_agricole', ENVELOBANK: 'envelobank', ETRANSFER_POCZTOWY24: 'etransfer_pocztowy24', GETIN_BANK: 'getin_bank', IDEABANK: 'ideabank', ING: 'ing', INTELIGO: 'inteligo', MBANK_MTRANSFER: 'mbank_mtransfer', NEST_PRZELEW: 'nest_przelew', NOBLE_PAY: 'noble_pay', PBAC_Z_IPKO: 'pbac_z_ipko', PLUS_BANK: 'plus_bank', SANTANDER_PRZELEW24: 'santander_przelew24', TMOBILE_USBUGI_BANKOWE: 'tmobile_usbugi_bankowe', TOYOTA_BANK: 'toyota_bank', VOLKSWAGEN_BANK: 'volkswagen_bank' };

export type SepaDebitResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SepaDebit'] = ResolversParentTypes['SepaDebit']> = ResolversObject<{
  bankCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  branchCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  country?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  fingerprint?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  last4?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  mandate?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SofortResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Sofort'] = ResolversParentTypes['Sofort']> = ResolversObject<{
  bankCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  bankName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  bic?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  country?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  generatedSepaDebit?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  generatedSepaDebitMandate?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  ibanLast4?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  preferredLanguage?: Resolver<Maybe<ResolversTypes['PreferredLanguage2']>, ParentType, ContextType>;
  verifiedName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type PreferredLanguage2Resolvers = { DE: 'de', EN: 'en', ES: 'es', FR: 'fr', IT: 'it', NL: 'nl', PL: 'pl' };

export type WechatPayResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['WechatPay'] = ResolversParentTypes['WechatPay']> = ResolversObject<{
  fingerprint?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  transactionId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type RefundListResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RefundList'] = ResolversParentTypes['RefundList']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['Refund']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type RefundResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Refund'] = ResolversParentTypes['Refund']> = ResolversObject<{
  amount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  balanceTransaction?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  charge?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  created?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  currency?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  failureBalanceTransaction?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  failureReason?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  metadata?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object19'], ParentType, ContextType>;
  paymentIntent?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  reason?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  receiptNumber?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  sourceTransferReversal?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  transferReversal?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Object19Resolvers = { REFUND: 'refund' };

export type ShippingResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Shipping'] = ResolversParentTypes['Shipping']> = ResolversObject<{
  address?: Resolver<Maybe<ResolversTypes['Address']>, ParentType, ContextType>;
  carrier?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  phone?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  trackingNumber?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type TransferDataResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['TransferData'] = ResolversParentTypes['TransferData']> = ResolversObject<{
  amount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  destination?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type DisputeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Dispute'] = ResolversParentTypes['Dispute']> = ResolversObject<{
  amount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  balanceTransactions?: Resolver<Array<Maybe<ResolversTypes['BalanceTransaction3']>>, ParentType, ContextType>;
  charge?: Resolver<ResolversTypes['JSON'], ParentType, ContextType>;
  created?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  currency?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  evidence?: Resolver<ResolversTypes['DisputeEvidence'], ParentType, ContextType>;
  evidenceDetails?: Resolver<ResolversTypes['DisputeEvidenceDetails'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  isChargeRefundable?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  livemode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  metadata?: Resolver<ResolversTypes['JSON'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object20'], ParentType, ContextType>;
  paymentIntent?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  reason?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  status?: Resolver<ResolversTypes['Status9'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type DisputeEvidenceResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['DisputeEvidence'] = ResolversParentTypes['DisputeEvidence']> = ResolversObject<{
  accessActivityLog?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  billingAddress?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  cancellationPolicy?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  cancellationPolicyDisclosure?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  cancellationRebuttal?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  customerCommunication?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  customerEmailAddress?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  customerName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  customerPurchaseIp?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  customerSignature?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  duplicateChargeDocumentation?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  duplicateChargeExplanation?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  duplicateChargeId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  productDescription?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  receipt?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  refundPolicy?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  refundPolicyDisclosure?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  refundRefusalExplanation?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  serviceDate?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  serviceDocumentation?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  shippingAddress?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  shippingCarrier?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  shippingDate?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  shippingDocumentation?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  shippingTrackingNumber?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  uncategorizedFile?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  uncategorizedText?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type DisputeEvidenceDetailsResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['DisputeEvidenceDetails'] = ResolversParentTypes['DisputeEvidenceDetails']> = ResolversObject<{
  dueBy?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  hasEvidence?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  pastDue?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  submissionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Object20Resolvers = { DISPUTE: 'dispute' };

export type Status9Resolvers = { CHARGE_REFUNDED: 'charge_refunded', LOST: 'lost', NEEDS_RESPONSE: 'needs_response', UNDER_REVIEW: 'under_review', WARNING_CLOSED: 'warning_closed', WARNING_NEEDS_RESPONSE: 'warning_needs_response', WARNING_UNDER_REVIEW: 'warning_under_review', WON: 'won' };

export type RefundList2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RefundList2'] = ResolversParentTypes['RefundList2']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['Refund']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type PaymentPagesCheckoutSessionListResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PaymentPagesCheckoutSessionList'] = ResolversParentTypes['PaymentPagesCheckoutSessionList']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['CheckoutSession']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CheckoutSessionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CheckoutSession'] = ResolversParentTypes['CheckoutSession']> = ResolversObject<{
  allowPromotionCodes?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  amountSubtotal?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  amountTotal?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  automaticTax?: Resolver<ResolversTypes['PaymentPagesCheckoutSessionAutomaticTax'], ParentType, ContextType>;
  billingAddressCollection?: Resolver<Maybe<ResolversTypes['BillingAddressCollection']>, ParentType, ContextType>;
  cancelUrl?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  clientReferenceId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  currency?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  customer?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  customerDetails?: Resolver<Maybe<ResolversTypes['CustomerDetails']>, ParentType, ContextType>;
  customerEmail?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  lineItems?: Resolver<Maybe<ResolversTypes['LineItems']>, ParentType, ContextType>;
  livemode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  locale?: Resolver<Maybe<ResolversTypes['Locale']>, ParentType, ContextType>;
  metadata?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  mode?: Resolver<ResolversTypes['Mode3'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object26'], ParentType, ContextType>;
  paymentIntent?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  paymentMethodOptions?: Resolver<Maybe<ResolversTypes['PaymentMethodOptions']>, ParentType, ContextType>;
  paymentMethodTypes?: Resolver<Array<Maybe<ResolversTypes['String']>>, ParentType, ContextType>;
  paymentStatus?: Resolver<ResolversTypes['PaymentStatus'], ParentType, ContextType>;
  setupIntent?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  shipping?: Resolver<Maybe<ResolversTypes['Shipping2']>, ParentType, ContextType>;
  shippingAddressCollection?: Resolver<Maybe<ResolversTypes['ShippingAddressCollection']>, ParentType, ContextType>;
  submitType?: Resolver<Maybe<ResolversTypes['SubmitType']>, ParentType, ContextType>;
  subscription?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  successUrl?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  taxIdCollection?: Resolver<Maybe<ResolversTypes['PaymentPagesCheckoutSessionTaxIdCollection']>, ParentType, ContextType>;
  totalDetails?: Resolver<Maybe<ResolversTypes['TotalDetails']>, ParentType, ContextType>;
  url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type PaymentPagesCheckoutSessionAutomaticTaxResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PaymentPagesCheckoutSessionAutomaticTax'] = ResolversParentTypes['PaymentPagesCheckoutSessionAutomaticTax']> = ResolversObject<{
  enabled?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['Status10']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Status10Resolvers = { COMPLETE: 'complete', FAILED: 'failed', REQUIRES_LOCATION_INPUTS: 'requires_location_inputs' };

export type BillingAddressCollectionResolvers = { AUTO: 'auto', REQUIRED: 'required' };

export type CustomerDetailsResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CustomerDetails'] = ResolversParentTypes['CustomerDetails']> = ResolversObject<{
  email?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  taxExempt?: Resolver<Maybe<ResolversTypes['TaxExempt']>, ParentType, ContextType>;
  taxIds?: Resolver<Maybe<Array<Maybe<ResolversTypes['PaymentPagesCheckoutSessionTaxId']>>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type TaxExemptResolvers = { EXEMPT: 'exempt', NONE: 'none', REVERSE: 'reverse' };

export type PaymentPagesCheckoutSessionTaxIdResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PaymentPagesCheckoutSessionTaxId'] = ResolversParentTypes['PaymentPagesCheckoutSessionTaxId']> = ResolversObject<{
  type?: Resolver<ResolversTypes['Type11'], ParentType, ContextType>;
  value?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Type11Resolvers = { AE_TRN: 'ae_trn', AU_ABN: 'au_abn', BR_CNPJ: 'br_cnpj', BR_CPF: 'br_cpf', CA_BN: 'ca_bn', CA_GST_HST: 'ca_gst_hst', CA_PST_BC: 'ca_pst_bc', CA_PST_MB: 'ca_pst_mb', CA_PST_SK: 'ca_pst_sk', CA_QST: 'ca_qst', CH_VAT: 'ch_vat', CL_TIN: 'cl_tin', ES_CIF: 'es_cif', EU_VAT: 'eu_vat', GB_VAT: 'gb_vat', HK_BR: 'hk_br', ID_NPWP: 'id_npwp', IL_VAT: 'il_vat', IN_GST: 'in_gst', JP_CN: 'jp_cn', JP_RN: 'jp_rn', KR_BRN: 'kr_brn', LI_UID: 'li_uid', MX_RFC: 'mx_rfc', MY_FRP: 'my_frp', MY_ITN: 'my_itn', MY_SST: 'my_sst', NO_VAT: 'no_vat', NZ_GST: 'nz_gst', RU_INN: 'ru_inn', RU_KPP: 'ru_kpp', SA_VAT: 'sa_vat', SG_GST: 'sg_gst', SG_UEN: 'sg_uen', TH_VAT: 'th_vat', TW_VAT: 'tw_vat', UNKNOWN: 'unknown', US_EIN: 'us_ein', ZA_VAT: 'za_vat' };

export type LineItemsResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['LineItems'] = ResolversParentTypes['LineItems']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['Item']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ItemResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Item'] = ResolversParentTypes['Item']> = ResolversObject<{
  amountSubtotal?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  amountTotal?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  currency?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  description?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  discounts?: Resolver<Maybe<Array<Maybe<ResolversTypes['LineItemsDiscountAmount']>>>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object23'], ParentType, ContextType>;
  price?: Resolver<Maybe<ResolversTypes['Price']>, ParentType, ContextType>;
  quantity?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  taxes?: Resolver<Maybe<Array<Maybe<ResolversTypes['LineItemsTaxAmount']>>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type LineItemsDiscountAmountResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['LineItemsDiscountAmount'] = ResolversParentTypes['LineItemsDiscountAmount']> = ResolversObject<{
  amount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  discount?: Resolver<ResolversTypes['Discount'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type DiscountResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Discount'] = ResolversParentTypes['Discount']> = ResolversObject<{
  checkoutSession?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  coupon?: Resolver<ResolversTypes['Coupon'], ParentType, ContextType>;
  customer?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  end?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  invoice?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  invoiceItem?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object22'], ParentType, ContextType>;
  promotionCode?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  start?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  subscription?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CouponResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Coupon'] = ResolversParentTypes['Coupon']> = ResolversObject<{
  amountOff?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  appliesTo?: Resolver<Maybe<ResolversTypes['CouponAppliesTo']>, ParentType, ContextType>;
  created?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  currency?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  duration?: Resolver<ResolversTypes['Duration'], ParentType, ContextType>;
  durationInMonths?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  livemode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  maxRedemptions?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  metadata?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object21'], ParentType, ContextType>;
  percentOff?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  redeemBy?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  timesRedeemed?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  valid?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CouponAppliesToResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CouponAppliesTo'] = ResolversParentTypes['CouponAppliesTo']> = ResolversObject<{
  products?: Resolver<Array<Maybe<ResolversTypes['String']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type DurationResolvers = { FOREVER: 'forever', ONCE: 'once', REPEATING: 'repeating' };

export type Object21Resolvers = { COUPON: 'coupon' };

export type Object22Resolvers = { DISCOUNT: 'discount' };

export type Object23Resolvers = { ITEM: 'item' };

export type PriceResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Price'] = ResolversParentTypes['Price']> = ResolversObject<{
  active?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  billingScheme?: Resolver<Maybe<ResolversTypes['BillingScheme']>, ParentType, ContextType>;
  created?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  currency?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  livemode?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  lookupKey?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  metadata?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  nickname?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  object?: Resolver<Maybe<ResolversTypes['Object24']>, ParentType, ContextType>;
  product?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  recurring?: Resolver<Maybe<ResolversTypes['Recurring']>, ParentType, ContextType>;
  taxBehavior?: Resolver<Maybe<ResolversTypes['TaxBehavior']>, ParentType, ContextType>;
  tiers?: Resolver<Maybe<Array<Maybe<ResolversTypes['PriceTier']>>>, ParentType, ContextType>;
  tiersMode?: Resolver<Maybe<ResolversTypes['TiersMode']>, ParentType, ContextType>;
  transformQuantity?: Resolver<Maybe<ResolversTypes['TransformQuantity']>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['Type12']>, ParentType, ContextType>;
  unitAmount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  unitAmountDecimal?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BillingSchemeResolvers = { PER_UNIT: 'per_unit', TIERED: 'tiered' };

export type Object24Resolvers = { PRICE: 'price' };

export type RecurringResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Recurring'] = ResolversParentTypes['Recurring']> = ResolversObject<{
  aggregateUsage?: Resolver<Maybe<ResolversTypes['AggregateUsage']>, ParentType, ContextType>;
  interval?: Resolver<Maybe<ResolversTypes['Interval4']>, ParentType, ContextType>;
  intervalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  usageType?: Resolver<Maybe<ResolversTypes['UsageType']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AggregateUsageResolvers = { LAST_DURING_PERIOD: 'last_during_period', LAST_EVER: 'last_ever', MAX: 'max', SUM: 'sum' };

export type Interval4Resolvers = { DAY: 'day', MONTH: 'month', WEEK: 'week', YEAR: 'year' };

export type UsageTypeResolvers = { LICENSED: 'licensed', METERED: 'metered' };

export type TaxBehaviorResolvers = { EXCLUSIVE: 'exclusive', INCLUSIVE: 'inclusive', UNSPECIFIED: 'unspecified' };

export type PriceTierResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PriceTier'] = ResolversParentTypes['PriceTier']> = ResolversObject<{
  flatAmount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  flatAmountDecimal?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  unitAmount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  unitAmountDecimal?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  upTo?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type TiersModeResolvers = { GRADUATED: 'graduated', VOLUME: 'volume' };

export type TransformQuantityResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['TransformQuantity'] = ResolversParentTypes['TransformQuantity']> = ResolversObject<{
  divideBy?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  round?: Resolver<Maybe<ResolversTypes['Round']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type RoundResolvers = { DOWN: 'down', UP: 'up' };

export type Type12Resolvers = { ONE_TIME: 'one_time', RECURRING: 'recurring' };

export type LineItemsTaxAmountResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['LineItemsTaxAmount'] = ResolversParentTypes['LineItemsTaxAmount']> = ResolversObject<{
  amount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  rate?: Resolver<ResolversTypes['TaxRate'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type TaxRateResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['TaxRate'] = ResolversParentTypes['TaxRate']> = ResolversObject<{
  active?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  country?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  created?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  displayName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  inclusive?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  jurisdiction?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  livemode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  metadata?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object25'], ParentType, ContextType>;
  percentage?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  state?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  taxType?: Resolver<Maybe<ResolversTypes['TaxType']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Object25Resolvers = { TAX_RATE: 'tax_rate' };

export type TaxTypeResolvers = { GST: 'gst', HST: 'hst', PST: 'pst', QST: 'qst', SALES_TAX: 'sales_tax', VAT: 'vat' };

export type LocaleResolvers = { AUTO: 'auto', BG: 'bg', CS: 'cs', DA: 'da', DE: 'de', EL: 'el', EN: 'en', EN_GB: 'en-GB', ES: 'es', ES_419: 'es-419', ET: 'et', FI: 'fi', FR: 'fr', FR_CA: 'fr-CA', HR: 'hr', HU: 'hu', ID: 'id', IT: 'it', JA: 'ja', KO: 'ko', LT: 'lt', LV: 'lv', MS: 'ms', MT: 'mt', NB: 'nb', NL: 'nl', PL: 'pl', PT: 'pt', PT_BR: 'pt-BR', RO: 'ro', RU: 'ru', SK: 'sk', SL: 'sl', SV: 'sv', TH: 'th', TR: 'tr', VI: 'vi', ZH: 'zh', ZH_HK: 'zh-HK', ZH_TW: 'zh-TW' };

export type Mode3Resolvers = { PAYMENT: 'payment', SETUP: 'setup', SUBSCRIPTION: 'subscription' };

export type Object26Resolvers = { CHECKOUT_SESSION: 'checkout.session' };

export type PaymentMethodOptionsResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PaymentMethodOptions'] = ResolversParentTypes['PaymentMethodOptions']> = ResolversObject<{
  acssDebit?: Resolver<Maybe<ResolversTypes['AcssDebit2']>, ParentType, ContextType>;
  boleto?: Resolver<Maybe<ResolversTypes['Boleto2']>, ParentType, ContextType>;
  oxxo?: Resolver<Maybe<ResolversTypes['Oxxo2']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AcssDebit2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['AcssDebit2'] = ResolversParentTypes['AcssDebit2']> = ResolversObject<{
  currency?: Resolver<Maybe<ResolversTypes['Currency21']>, ParentType, ContextType>;
  mandateOptions?: Resolver<Maybe<ResolversTypes['CheckoutAcssDebitMandateOptions']>, ParentType, ContextType>;
  verificationMethod?: Resolver<Maybe<ResolversTypes['VerificationMethod']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Currency21Resolvers = { CAD: 'cad', USD: 'usd' };

export type CheckoutAcssDebitMandateOptionsResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CheckoutAcssDebitMandateOptions'] = ResolversParentTypes['CheckoutAcssDebitMandateOptions']> = ResolversObject<{
  customMandateUrl?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  intervalDescription?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  paymentSchedule?: Resolver<Maybe<ResolversTypes['PaymentSchedule']>, ParentType, ContextType>;
  transactionType?: Resolver<Maybe<ResolversTypes['TransactionType']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type PaymentScheduleResolvers = { COMBINED: 'combined', INTERVAL: 'interval', SPORADIC: 'sporadic' };

export type TransactionTypeResolvers = { BUSINESS: 'business', PERSONAL: 'personal' };

export type VerificationMethodResolvers = { AUTOMATIC: 'automatic', INSTANT: 'instant', MICRODEPOSITS: 'microdeposits' };

export type Boleto2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Boleto2'] = ResolversParentTypes['Boleto2']> = ResolversObject<{
  expiresAfterDays?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Oxxo2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Oxxo2'] = ResolversParentTypes['Oxxo2']> = ResolversObject<{
  expiresAfterDays?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type PaymentStatusResolvers = { NO_PAYMENT_REQUIRED: 'no_payment_required', PAID: 'paid', UNPAID: 'unpaid' };

export type Shipping2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Shipping2'] = ResolversParentTypes['Shipping2']> = ResolversObject<{
  address?: Resolver<Maybe<ResolversTypes['Address']>, ParentType, ContextType>;
  carrier?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  phone?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  trackingNumber?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ShippingAddressCollectionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ShippingAddressCollection'] = ResolversParentTypes['ShippingAddressCollection']> = ResolversObject<{
  allowedCountries?: Resolver<Maybe<Array<Maybe<ResolversTypes['AllowedCountriesListItem']>>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SubmitTypeResolvers = { AUTO: 'auto', BOOK: 'book', DONATE: 'donate', PAY: 'pay' };

export type PaymentPagesCheckoutSessionTaxIdCollectionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PaymentPagesCheckoutSessionTaxIdCollection'] = ResolversParentTypes['PaymentPagesCheckoutSessionTaxIdCollection']> = ResolversObject<{
  enabled?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type TotalDetailsResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['TotalDetails'] = ResolversParentTypes['TotalDetails']> = ResolversObject<{
  amountDiscount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  amountShipping?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  amountTax?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  breakdown?: Resolver<Maybe<ResolversTypes['Breakdown']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BreakdownResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Breakdown'] = ResolversParentTypes['Breakdown']> = ResolversObject<{
  discounts?: Resolver<Array<Maybe<ResolversTypes['LineItemsDiscountAmount']>>, ParentType, ContextType>;
  taxes?: Resolver<Array<Maybe<ResolversTypes['LineItemsTaxAmount']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type PaymentPagesCheckoutSessionListLineItemsResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PaymentPagesCheckoutSessionListLineItems'] = ResolversParentTypes['PaymentPagesCheckoutSessionListLineItems']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['Item']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type V1CountrySpecs2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['V1CountrySpecs2'] = ResolversParentTypes['V1CountrySpecs2']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['CountrySpec']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CountrySpecResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CountrySpec'] = ResolversParentTypes['CountrySpec']> = ResolversObject<{
  defaultCurrency?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object27'], ParentType, ContextType>;
  supportedBankAccountCurrencies?: Resolver<ResolversTypes['JSON'], ParentType, ContextType>;
  supportedPaymentCurrencies?: Resolver<Array<Maybe<ResolversTypes['String']>>, ParentType, ContextType>;
  supportedPaymentMethods?: Resolver<Array<Maybe<ResolversTypes['String']>>, ParentType, ContextType>;
  supportedTransferCountries?: Resolver<Array<Maybe<ResolversTypes['String']>>, ParentType, ContextType>;
  verificationFields?: Resolver<ResolversTypes['CountrySpecVerificationFields'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Object27Resolvers = { COUNTRY_SPEC: 'country_spec' };

export type CountrySpecVerificationFieldsResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CountrySpecVerificationFields'] = ResolversParentTypes['CountrySpecVerificationFields']> = ResolversObject<{
  company?: Resolver<ResolversTypes['CountrySpecVerificationFieldDetails'], ParentType, ContextType>;
  individual?: Resolver<ResolversTypes['CountrySpecVerificationFieldDetails'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CountrySpecVerificationFieldDetailsResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CountrySpecVerificationFieldDetails'] = ResolversParentTypes['CountrySpecVerificationFieldDetails']> = ResolversObject<{
  additional?: Resolver<Array<Maybe<ResolversTypes['String']>>, ParentType, ContextType>;
  minimum?: Resolver<Array<Maybe<ResolversTypes['String']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type V1Coupons2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['V1Coupons2'] = ResolversParentTypes['V1Coupons2']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['Coupon']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CreditNotesListResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CreditNotesList'] = ResolversParentTypes['CreditNotesList']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['CreditNote']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CreditNoteResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CreditNote'] = ResolversParentTypes['CreditNote']> = ResolversObject<{
  amount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  created?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  currency?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  customer?: Resolver<ResolversTypes['JSON'], ParentType, ContextType>;
  customerBalanceTransaction?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  discountAmount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  discountAmounts?: Resolver<Array<Maybe<ResolversTypes['DiscountsResourceDiscountAmount']>>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  invoice?: Resolver<ResolversTypes['JSON'], ParentType, ContextType>;
  lines?: Resolver<ResolversTypes['Lines'], ParentType, ContextType>;
  livemode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  memo?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  metadata?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  number?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object29'], ParentType, ContextType>;
  outOfBandAmount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  pdf?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  reason?: Resolver<Maybe<ResolversTypes['Reason7']>, ParentType, ContextType>;
  refund?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  status?: Resolver<ResolversTypes['Status11'], ParentType, ContextType>;
  subtotal?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  taxAmounts?: Resolver<Array<Maybe<ResolversTypes['CreditNoteTaxAmount']>>, ParentType, ContextType>;
  total?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  type?: Resolver<ResolversTypes['Type14'], ParentType, ContextType>;
  voidedAt?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type DiscountsResourceDiscountAmountResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['DiscountsResourceDiscountAmount'] = ResolversParentTypes['DiscountsResourceDiscountAmount']> = ResolversObject<{
  amount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  discount?: Resolver<ResolversTypes['JSON'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type LinesResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Lines'] = ResolversParentTypes['Lines']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['CreditNoteLineItem']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CreditNoteLineItemResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CreditNoteLineItem'] = ResolversParentTypes['CreditNoteLineItem']> = ResolversObject<{
  amount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  discountAmount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  discountAmounts?: Resolver<Array<Maybe<ResolversTypes['DiscountsResourceDiscountAmount']>>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  invoiceLineItem?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  livemode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object28'], ParentType, ContextType>;
  quantity?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  taxAmounts?: Resolver<Array<Maybe<ResolversTypes['CreditNoteTaxAmount']>>, ParentType, ContextType>;
  taxRates?: Resolver<Array<Maybe<ResolversTypes['TaxRate']>>, ParentType, ContextType>;
  type?: Resolver<ResolversTypes['Type13'], ParentType, ContextType>;
  unitAmount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  unitAmountDecimal?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Object28Resolvers = { CREDIT_NOTE_LINE_ITEM: 'credit_note_line_item' };

export type CreditNoteTaxAmountResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CreditNoteTaxAmount'] = ResolversParentTypes['CreditNoteTaxAmount']> = ResolversObject<{
  amount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  inclusive?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  taxRate?: Resolver<ResolversTypes['JSON'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Type13Resolvers = { CUSTOM_LINE_ITEM: 'custom_line_item', INVOICE_LINE_ITEM: 'invoice_line_item' };

export type Object29Resolvers = { CREDIT_NOTE: 'credit_note' };

export type Reason7Resolvers = { DUPLICATE: 'duplicate', FRAUDULENT: 'fraudulent', ORDER_CHANGE: 'order_change', PRODUCT_UNSATISFACTORY: 'product_unsatisfactory' };

export type Status11Resolvers = { ISSUED: 'issued', VOID: 'void' };

export type Type14Resolvers = { POST_PAYMENT: 'post_payment', PRE_PAYMENT: 'pre_payment' };

export type CreditNoteLinesListResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CreditNoteLinesList'] = ResolversParentTypes['CreditNoteLinesList']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['CreditNoteLineItem']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Type15Resolvers = { CUSTOM_LINE_ITEM: 'custom_line_item', INVOICE_LINE_ITEM: 'invoice_line_item' };

export type Reason18Resolvers = { DUPLICATE: 'duplicate', FRAUDULENT: 'fraudulent', ORDER_CHANGE: 'order_change', PRODUCT_UNSATISFACTORY: 'product_unsatisfactory' };

export type V1Customers2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['V1Customers2'] = ResolversParentTypes['V1Customers2']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['Customer13']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Customer13Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Customer13'] = ResolversParentTypes['Customer13']> = ResolversObject<{
  address?: Resolver<Maybe<ResolversTypes['Address7']>, ParentType, ContextType>;
  balance?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  created?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  currency?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  defaultSource?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  delinquent?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  discount?: Resolver<Maybe<ResolversTypes['Discount3']>, ParentType, ContextType>;
  email?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  invoicePrefix?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  invoiceSettings?: Resolver<Maybe<ResolversTypes['InvoiceSettingCustomerSetting']>, ParentType, ContextType>;
  livemode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  metadata?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  nextInvoiceSequence?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object30'], ParentType, ContextType>;
  phone?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  preferredLocales?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>;
  shipping?: Resolver<Maybe<ResolversTypes['Shipping5']>, ParentType, ContextType>;
  sources?: Resolver<Maybe<ResolversTypes['Sources']>, ParentType, ContextType>;
  subscriptions?: Resolver<Maybe<ResolversTypes['Subscriptions']>, ParentType, ContextType>;
  tax?: Resolver<Maybe<ResolversTypes['CustomerTax']>, ParentType, ContextType>;
  taxExempt?: Resolver<Maybe<ResolversTypes['TaxExempt2']>, ParentType, ContextType>;
  taxIds?: Resolver<Maybe<ResolversTypes['TaxIDsList']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Address7Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Address7'] = ResolversParentTypes['Address7']> = ResolversObject<{
  city?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  country?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  line1?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  line2?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  postalCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  state?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Discount3Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Discount3'] = ResolversParentTypes['Discount3']> = ResolversObject<{
  checkoutSession?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  coupon?: Resolver<Maybe<ResolversTypes['Coupon']>, ParentType, ContextType>;
  customer?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  end?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  invoice?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  invoiceItem?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  object?: Resolver<Maybe<ResolversTypes['Object22']>, ParentType, ContextType>;
  promotionCode?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  start?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  subscription?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type InvoiceSettingCustomerSettingResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['InvoiceSettingCustomerSetting'] = ResolversParentTypes['InvoiceSettingCustomerSetting']> = ResolversObject<{
  customFields?: Resolver<Maybe<Array<Maybe<ResolversTypes['InvoiceSettingCustomField']>>>, ParentType, ContextType>;
  defaultPaymentMethod?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  footer?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type InvoiceSettingCustomFieldResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['InvoiceSettingCustomField'] = ResolversParentTypes['InvoiceSettingCustomField']> = ResolversObject<{
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  value?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Object30Resolvers = { CUSTOMER: 'customer' };

export type Shipping5Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Shipping5'] = ResolversParentTypes['Shipping5']> = ResolversObject<{
  address?: Resolver<Maybe<ResolversTypes['Address']>, ParentType, ContextType>;
  carrier?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  phone?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  trackingNumber?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SourcesResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Sources'] = ResolversParentTypes['Sources']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['Data21ListItem']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Data21ListItemResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Data21ListItem'] = ResolversParentTypes['Data21ListItem']> = ResolversObject<{
  account?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  accountHolderName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  accountHolderType?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  accountType?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  achCreditTransfer?: Resolver<Maybe<ResolversTypes['AchCreditTransfer2']>, ParentType, ContextType>;
  achDebit?: Resolver<Maybe<ResolversTypes['AchDebit2']>, ParentType, ContextType>;
  acssDebit?: Resolver<Maybe<ResolversTypes['AcssDebit4']>, ParentType, ContextType>;
  active?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  addressCity?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  addressCountry?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  addressLine1?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  addressLine1Check?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  addressLine2?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  addressState?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  addressZip?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  addressZipCheck?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  alipay?: Resolver<Maybe<ResolversTypes['Alipay2']>, ParentType, ContextType>;
  amount?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  amountReceived?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  auBecsDebit?: Resolver<Maybe<ResolversTypes['AuBecsDebit2']>, ParentType, ContextType>;
  availablePayoutMethods?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  bancontact?: Resolver<Maybe<ResolversTypes['Bancontact2']>, ParentType, ContextType>;
  bankName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  bitcoinAmount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  bitcoinAmountReceived?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  bitcoinUri?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  brand?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  card?: Resolver<Maybe<ResolversTypes['Card6']>, ParentType, ContextType>;
  cardPresent?: Resolver<Maybe<ResolversTypes['CardPresent2']>, ParentType, ContextType>;
  clientSecret?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  codeVerification?: Resolver<Maybe<ResolversTypes['CodeVerification']>, ParentType, ContextType>;
  country?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  created?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  currency?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  customer?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  cvcCheck?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  defaultForCurrency?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  dynamicLast4?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  email?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  eps?: Resolver<Maybe<ResolversTypes['Eps2']>, ParentType, ContextType>;
  expMonth?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  expYear?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  filled?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  fingerprint?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  flow?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  funding?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  giropay?: Resolver<Maybe<ResolversTypes['Giropay2']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  ideal?: Resolver<Maybe<ResolversTypes['Ideal2']>, ParentType, ContextType>;
  inboundAddress?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  klarna?: Resolver<Maybe<ResolversTypes['Klarna2']>, ParentType, ContextType>;
  last4?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  livemode?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  metadata?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  multibanco?: Resolver<Maybe<ResolversTypes['Multibanco2']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  object?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  owner?: Resolver<Maybe<ResolversTypes['Owner3']>, ParentType, ContextType>;
  p24?: Resolver<Maybe<ResolversTypes['P242']>, ParentType, ContextType>;
  payment?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  paymentAmount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  paymentCurrency?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  receiver?: Resolver<Maybe<ResolversTypes['Receiver2']>, ParentType, ContextType>;
  recipient?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  redirect?: Resolver<Maybe<ResolversTypes['Redirect']>, ParentType, ContextType>;
  refundAddress?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  reusable?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  routingNumber?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  sepaDebit?: Resolver<Maybe<ResolversTypes['SepaDebit2']>, ParentType, ContextType>;
  sofort?: Resolver<Maybe<ResolversTypes['Sofort2']>, ParentType, ContextType>;
  sourceOrder?: Resolver<Maybe<ResolversTypes['SourceOrder']>, ParentType, ContextType>;
  statementDescriptor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  threeDSecure?: Resolver<Maybe<ResolversTypes['ThreeDSecure4']>, ParentType, ContextType>;
  tokenizationMethod?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  transactions?: Resolver<Maybe<ResolversTypes['Transactions']>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['Type18']>, ParentType, ContextType>;
  uncapturedFunds?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  usage?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  used?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  usedForPayment?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  username?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  wechat?: Resolver<Maybe<ResolversTypes['Wechat2']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AchCreditTransfer2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['AchCreditTransfer2'] = ResolversParentTypes['AchCreditTransfer2']> = ResolversObject<{
  accountNumber?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  bankName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  fingerprint?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  refundAccountHolderName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  refundAccountHolderType?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  refundRoutingNumber?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  routingNumber?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  swiftCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AchDebit2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['AchDebit2'] = ResolversParentTypes['AchDebit2']> = ResolversObject<{
  bankName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  country?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  fingerprint?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  last4?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  routingNumber?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AcssDebit4Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['AcssDebit4'] = ResolversParentTypes['AcssDebit4']> = ResolversObject<{
  bankAddressCity?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  bankAddressLine1?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  bankAddressLine2?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  bankAddressPostalCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  bankName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  category?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  country?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  fingerprint?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  last4?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  routingNumber?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Alipay2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Alipay2'] = ResolversParentTypes['Alipay2']> = ResolversObject<{
  dataString?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  nativeUrl?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  statementDescriptor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AuBecsDebit2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['AuBecsDebit2'] = ResolversParentTypes['AuBecsDebit2']> = ResolversObject<{
  bsbNumber?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  fingerprint?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  last4?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Bancontact2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Bancontact2'] = ResolversParentTypes['Bancontact2']> = ResolversObject<{
  bankCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  bankName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  bic?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  ibanLast4?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  preferredLanguage?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  statementDescriptor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Card6Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Card6'] = ResolversParentTypes['Card6']> = ResolversObject<{
  addressLine1Check?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  addressZipCheck?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  brand?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  country?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  cvcCheck?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  dynamicLast4?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  expMonth?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  expYear?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  fingerprint?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  funding?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  last4?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  threeDSecure?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  tokenizationMethod?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CardPresent2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CardPresent2'] = ResolversParentTypes['CardPresent2']> = ResolversObject<{
  applicationCryptogram?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  applicationPreferredName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  authorizationCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  authorizationResponseCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  brand?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  country?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  cvmType?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  dataType?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  dedicatedFileName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  emvAuthData?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  evidenceCustomerSignature?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  evidenceTransactionCertificate?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  expMonth?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  expYear?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  fingerprint?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  funding?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  last4?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  posDeviceId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  posEntryMode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  readMethod?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  reader?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  terminalVerificationResults?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  transactionStatusInformation?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CodeVerificationResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CodeVerification'] = ResolversParentTypes['CodeVerification']> = ResolversObject<{
  attemptsRemaining?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  status?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Eps2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Eps2'] = ResolversParentTypes['Eps2']> = ResolversObject<{
  reference?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  statementDescriptor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Giropay2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Giropay2'] = ResolversParentTypes['Giropay2']> = ResolversObject<{
  bankCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  bankName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  bic?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  statementDescriptor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Ideal2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Ideal2'] = ResolversParentTypes['Ideal2']> = ResolversObject<{
  bank?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  bic?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  ibanLast4?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  statementDescriptor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Klarna2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Klarna2'] = ResolversParentTypes['Klarna2']> = ResolversObject<{
  backgroundImageUrl?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  clientToken?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  firstName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  lastName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  locale?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  logoUrl?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  pageTitle?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  payLaterAssetUrlsDescriptive?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  payLaterAssetUrlsStandard?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  payLaterName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  payLaterRedirectUrl?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  payNowAssetUrlsDescriptive?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  payNowAssetUrlsStandard?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  payNowName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  payNowRedirectUrl?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  payOverTimeAssetUrlsDescriptive?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  payOverTimeAssetUrlsStandard?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  payOverTimeName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  payOverTimeRedirectUrl?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  paymentMethodCategories?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  purchaseCountry?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  purchaseType?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  redirectUrl?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  shippingDelay?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  shippingFirstName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  shippingLastName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Multibanco2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Multibanco2'] = ResolversParentTypes['Multibanco2']> = ResolversObject<{
  entity?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  reference?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  refundAccountHolderAddressCity?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  refundAccountHolderAddressCountry?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  refundAccountHolderAddressLine1?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  refundAccountHolderAddressLine2?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  refundAccountHolderAddressPostalCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  refundAccountHolderAddressState?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  refundAccountHolderName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  refundIban?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Owner3Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Owner3'] = ResolversParentTypes['Owner3']> = ResolversObject<{
  address?: Resolver<Maybe<ResolversTypes['Address8']>, ParentType, ContextType>;
  email?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  phone?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  verifiedAddress?: Resolver<Maybe<ResolversTypes['VerifiedAddress']>, ParentType, ContextType>;
  verifiedEmail?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  verifiedName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  verifiedPhone?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Address8Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Address8'] = ResolversParentTypes['Address8']> = ResolversObject<{
  city?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  country?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  line1?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  line2?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  postalCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  state?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type VerifiedAddressResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['VerifiedAddress'] = ResolversParentTypes['VerifiedAddress']> = ResolversObject<{
  city?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  country?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  line1?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  line2?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  postalCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  state?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type P242Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['P242'] = ResolversParentTypes['P242']> = ResolversObject<{
  reference?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Receiver2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Receiver2'] = ResolversParentTypes['Receiver2']> = ResolversObject<{
  address?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  amountCharged?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  amountReceived?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  amountReturned?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  refundAttributesMethod?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  refundAttributesStatus?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type RedirectResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Redirect'] = ResolversParentTypes['Redirect']> = ResolversObject<{
  failureReason?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  returnUrl?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  status?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SepaDebit2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SepaDebit2'] = ResolversParentTypes['SepaDebit2']> = ResolversObject<{
  bankCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  branchCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  country?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  fingerprint?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  last4?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  mandateReference?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  mandateUrl?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Sofort2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Sofort2'] = ResolversParentTypes['Sofort2']> = ResolversObject<{
  bankCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  bankName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  bic?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  country?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  ibanLast4?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  preferredLanguage?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  statementDescriptor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SourceOrderResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SourceOrder'] = ResolversParentTypes['SourceOrder']> = ResolversObject<{
  amount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  currency?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  email?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  items?: Resolver<Maybe<Array<Maybe<ResolversTypes['SourceOrderItem']>>>, ParentType, ContextType>;
  shipping?: Resolver<Maybe<ResolversTypes['Shipping6']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SourceOrderItemResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SourceOrderItem'] = ResolversParentTypes['SourceOrderItem']> = ResolversObject<{
  amount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  currency?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  parent?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  quantity?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Shipping6Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Shipping6'] = ResolversParentTypes['Shipping6']> = ResolversObject<{
  address?: Resolver<Maybe<ResolversTypes['Address']>, ParentType, ContextType>;
  carrier?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  phone?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  trackingNumber?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ThreeDSecure4Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ThreeDSecure4'] = ResolversParentTypes['ThreeDSecure4']> = ResolversObject<{
  addressLine1Check?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  addressZipCheck?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  authenticated?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  brand?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  card?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  country?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  customer?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  cvcCheck?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  dynamicLast4?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  expMonth?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  expYear?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  fingerprint?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  funding?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  last4?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  threeDSecure?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  tokenizationMethod?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Type18Resolvers = { ACH_CREDIT_TRANSFER: 'ach_credit_transfer', ACH_DEBIT: 'ach_debit', ACSS_DEBIT: 'acss_debit', ALIPAY: 'alipay', AU_BECS_DEBIT: 'au_becs_debit', BANCONTACT: 'bancontact', CARD: 'card', CARD_PRESENT: 'card_present', EPS: 'eps', GIROPAY: 'giropay', IDEAL: 'ideal', KLARNA: 'klarna', MULTIBANCO: 'multibanco', P24: 'p24', SEPA_DEBIT: 'sepa_debit', SOFORT: 'sofort', THREE_D_SECURE: 'three_d_secure', WECHAT: 'wechat' };

export type Wechat2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Wechat2'] = ResolversParentTypes['Wechat2']> = ResolversObject<{
  prepayId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  qrCodeUrl?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  statementDescriptor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SubscriptionsResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Subscriptions'] = ResolversParentTypes['Subscriptions']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['Subscription5']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Subscription5Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Subscription5'] = ResolversParentTypes['Subscription5']> = ResolversObject<{
  applicationFeePercent?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  automaticTax?: Resolver<ResolversTypes['SubscriptionAutomaticTax'], ParentType, ContextType>;
  billingCycleAnchor?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  billingThresholds?: Resolver<Maybe<ResolversTypes['BillingThresholds']>, ParentType, ContextType>;
  cancelAt?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  cancelAtPeriodEnd?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  canceledAt?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  collectionMethod?: Resolver<Maybe<ResolversTypes['CollectionMethod']>, ParentType, ContextType>;
  created?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  currentPeriodEnd?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  currentPeriodStart?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  customer?: Resolver<ResolversTypes['JSON'], ParentType, ContextType>;
  daysUntilDue?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  defaultPaymentMethod?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  defaultSource?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  defaultTaxRates?: Resolver<Maybe<Array<Maybe<ResolversTypes['TaxRate']>>>, ParentType, ContextType>;
  discount?: Resolver<Maybe<ResolversTypes['Discount4']>, ParentType, ContextType>;
  endedAt?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  items?: Resolver<ResolversTypes['SubscriptionItemList'], ParentType, ContextType>;
  latestInvoice?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  livemode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  metadata?: Resolver<ResolversTypes['JSON'], ParentType, ContextType>;
  nextPendingInvoiceItemInvoice?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object32'], ParentType, ContextType>;
  pauseCollection?: Resolver<Maybe<ResolversTypes['PauseCollection']>, ParentType, ContextType>;
  paymentSettings?: Resolver<Maybe<ResolversTypes['PaymentSettings']>, ParentType, ContextType>;
  pendingInvoiceItemInterval?: Resolver<Maybe<ResolversTypes['PendingInvoiceItemInterval']>, ParentType, ContextType>;
  pendingSetupIntent?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  pendingUpdate?: Resolver<Maybe<ResolversTypes['PendingUpdate']>, ParentType, ContextType>;
  schedule?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  startDate?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  status?: Resolver<ResolversTypes['Status14'], ParentType, ContextType>;
  transferData?: Resolver<Maybe<ResolversTypes['TransferData4']>, ParentType, ContextType>;
  trialEnd?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  trialStart?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SubscriptionAutomaticTaxResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SubscriptionAutomaticTax'] = ResolversParentTypes['SubscriptionAutomaticTax']> = ResolversObject<{
  enabled?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BillingThresholdsResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['BillingThresholds'] = ResolversParentTypes['BillingThresholds']> = ResolversObject<{
  amountGte?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  resetBillingCycleAnchor?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CollectionMethodResolvers = { CHARGE_AUTOMATICALLY: 'charge_automatically', SEND_INVOICE: 'send_invoice' };

export type Discount4Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Discount4'] = ResolversParentTypes['Discount4']> = ResolversObject<{
  checkoutSession?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  coupon?: Resolver<Maybe<ResolversTypes['Coupon']>, ParentType, ContextType>;
  customer?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  end?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  invoice?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  invoiceItem?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  object?: Resolver<Maybe<ResolversTypes['Object22']>, ParentType, ContextType>;
  promotionCode?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  start?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  subscription?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SubscriptionItemListResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SubscriptionItemList'] = ResolversParentTypes['SubscriptionItemList']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['SubscriptionItem']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SubscriptionItemResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SubscriptionItem'] = ResolversParentTypes['SubscriptionItem']> = ResolversObject<{
  billingThresholds?: Resolver<Maybe<ResolversTypes['BillingThresholds2']>, ParentType, ContextType>;
  created?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  metadata?: Resolver<ResolversTypes['JSON'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object31'], ParentType, ContextType>;
  price?: Resolver<ResolversTypes['Price3'], ParentType, ContextType>;
  quantity?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  subscription?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  taxRates?: Resolver<Maybe<Array<Maybe<ResolversTypes['TaxRate']>>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BillingThresholds2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['BillingThresholds2'] = ResolversParentTypes['BillingThresholds2']> = ResolversObject<{
  usageGte?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Object31Resolvers = { SUBSCRIPTION_ITEM: 'subscription_item' };

export type Price3Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Price3'] = ResolversParentTypes['Price3']> = ResolversObject<{
  active?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  billingScheme?: Resolver<ResolversTypes['BillingScheme'], ParentType, ContextType>;
  created?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  currency?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  livemode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  lookupKey?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  metadata?: Resolver<ResolversTypes['JSON'], ParentType, ContextType>;
  nickname?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object24'], ParentType, ContextType>;
  product?: Resolver<ResolversTypes['JSON'], ParentType, ContextType>;
  recurring?: Resolver<Maybe<ResolversTypes['Recurring']>, ParentType, ContextType>;
  taxBehavior?: Resolver<Maybe<ResolversTypes['TaxBehavior']>, ParentType, ContextType>;
  tiers?: Resolver<Maybe<Array<Maybe<ResolversTypes['PriceTier']>>>, ParentType, ContextType>;
  tiersMode?: Resolver<Maybe<ResolversTypes['TiersMode']>, ParentType, ContextType>;
  transformQuantity?: Resolver<Maybe<ResolversTypes['TransformQuantity']>, ParentType, ContextType>;
  type?: Resolver<ResolversTypes['Type12'], ParentType, ContextType>;
  unitAmount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  unitAmountDecimal?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Object32Resolvers = { SUBSCRIPTION: 'subscription' };

export type PauseCollectionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PauseCollection'] = ResolversParentTypes['PauseCollection']> = ResolversObject<{
  behavior?: Resolver<Maybe<ResolversTypes['Behavior']>, ParentType, ContextType>;
  resumesAt?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BehaviorResolvers = { KEEP_AS_DRAFT: 'keep_as_draft', MARK_UNCOLLECTIBLE: 'mark_uncollectible', VOID: 'void' };

export type PaymentSettingsResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PaymentSettings'] = ResolversParentTypes['PaymentSettings']> = ResolversObject<{
  paymentMethodOptions?: Resolver<Maybe<ResolversTypes['PaymentMethodOptions2']>, ParentType, ContextType>;
  paymentMethodTypes?: Resolver<Maybe<Array<Maybe<ResolversTypes['PaymentMethodTypes3ListItem']>>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type PaymentMethodOptions2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PaymentMethodOptions2'] = ResolversParentTypes['PaymentMethodOptions2']> = ResolversObject<{
  bancontact?: Resolver<Maybe<ResolversTypes['Bancontact3']>, ParentType, ContextType>;
  card?: Resolver<Maybe<ResolversTypes['Card8']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Bancontact3Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Bancontact3'] = ResolversParentTypes['Bancontact3']> = ResolversObject<{
  preferredLanguage?: Resolver<Maybe<ResolversTypes['PreferredLanguage5']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type PreferredLanguage5Resolvers = { DE: 'de', EN: 'en', FR: 'fr', NL: 'nl' };

export type Card8Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Card8'] = ResolversParentTypes['Card8']> = ResolversObject<{
  requestThreeDSecure?: Resolver<Maybe<ResolversTypes['RequestThreeDSecure']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type RequestThreeDSecureResolvers = { ANY: 'any', AUTOMATIC: 'automatic' };

export type PaymentMethodTypes3ListItemResolvers = { ACH_CREDIT_TRANSFER: 'ach_credit_transfer', ACH_DEBIT: 'ach_debit', AU_BECS_DEBIT: 'au_becs_debit', BACS_DEBIT: 'bacs_debit', BANCONTACT: 'bancontact', BOLETO: 'boleto', CARD: 'card', FPX: 'fpx', GIROPAY: 'giropay', IDEAL: 'ideal', SEPA_DEBIT: 'sepa_debit', SOFORT: 'sofort', WECHAT_PAY: 'wechat_pay' };

export type PendingInvoiceItemIntervalResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PendingInvoiceItemInterval'] = ResolversParentTypes['PendingInvoiceItemInterval']> = ResolversObject<{
  interval?: Resolver<Maybe<ResolversTypes['Interval6']>, ParentType, ContextType>;
  intervalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Interval6Resolvers = { DAY: 'day', MONTH: 'month', WEEK: 'week', YEAR: 'year' };

export type PendingUpdateResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PendingUpdate'] = ResolversParentTypes['PendingUpdate']> = ResolversObject<{
  billingCycleAnchor?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  expiresAt?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  subscriptionItems?: Resolver<Maybe<Array<Maybe<ResolversTypes['SubscriptionItem']>>>, ParentType, ContextType>;
  trialEnd?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  trialFromPlan?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Status14Resolvers = { ACTIVE: 'active', CANCELED: 'canceled', INCOMPLETE: 'incomplete', INCOMPLETE_EXPIRED: 'incomplete_expired', PAST_DUE: 'past_due', TRIALING: 'trialing', UNPAID: 'unpaid' };

export type TransferData4Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['TransferData4'] = ResolversParentTypes['TransferData4']> = ResolversObject<{
  amountPercent?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  destination?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CustomerTaxResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CustomerTax'] = ResolversParentTypes['CustomerTax']> = ResolversObject<{
  automaticTax?: Resolver<ResolversTypes['AutomaticTax2'], ParentType, ContextType>;
  ipAddress?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  location?: Resolver<Maybe<ResolversTypes['Location']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AutomaticTax2Resolvers = { FAILED: 'failed', NOT_COLLECTING: 'not_collecting', SUPPORTED: 'supported', UNRECOGNIZED_LOCATION: 'unrecognized_location' };

export type LocationResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Location'] = ResolversParentTypes['Location']> = ResolversObject<{
  country?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  source?: Resolver<Maybe<ResolversTypes['Source3']>, ParentType, ContextType>;
  state?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Source3Resolvers = { BILLING_ADDRESS: 'billing_address', IP_ADDRESS: 'ip_address', PAYMENT_METHOD: 'payment_method', SHIPPING_DESTINATION: 'shipping_destination' };

export type TaxExempt2Resolvers = { EXEMPT: 'exempt', NONE: 'none', REVERSE: 'reverse' };

export type TaxIDsListResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['TaxIDsList'] = ResolversParentTypes['TaxIDsList']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['TaxId3']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type TaxId3Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['TaxId3'] = ResolversParentTypes['TaxId3']> = ResolversObject<{
  country?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  created?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  customer?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  livemode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object33'], ParentType, ContextType>;
  type?: Resolver<ResolversTypes['Type19'], ParentType, ContextType>;
  value?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  verification?: Resolver<Maybe<ResolversTypes['Verification3']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Object33Resolvers = { TAX_ID: 'tax_id' };

export type Type19Resolvers = { AE_TRN: 'ae_trn', AU_ABN: 'au_abn', BR_CNPJ: 'br_cnpj', BR_CPF: 'br_cpf', CA_BN: 'ca_bn', CA_GST_HST: 'ca_gst_hst', CA_PST_BC: 'ca_pst_bc', CA_PST_MB: 'ca_pst_mb', CA_PST_SK: 'ca_pst_sk', CA_QST: 'ca_qst', CH_VAT: 'ch_vat', CL_TIN: 'cl_tin', ES_CIF: 'es_cif', EU_VAT: 'eu_vat', GB_VAT: 'gb_vat', HK_BR: 'hk_br', ID_NPWP: 'id_npwp', IL_VAT: 'il_vat', IN_GST: 'in_gst', JP_CN: 'jp_cn', JP_RN: 'jp_rn', KR_BRN: 'kr_brn', LI_UID: 'li_uid', MX_RFC: 'mx_rfc', MY_FRP: 'my_frp', MY_ITN: 'my_itn', MY_SST: 'my_sst', NO_VAT: 'no_vat', NZ_GST: 'nz_gst', RU_INN: 'ru_inn', RU_KPP: 'ru_kpp', SA_VAT: 'sa_vat', SG_GST: 'sg_gst', SG_UEN: 'sg_uen', TH_VAT: 'th_vat', TW_VAT: 'tw_vat', UNKNOWN: 'unknown', US_EIN: 'us_ein', ZA_VAT: 'za_vat' };

export type Verification3Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Verification3'] = ResolversParentTypes['Verification3']> = ResolversObject<{
  status?: Resolver<Maybe<ResolversTypes['Status15']>, ParentType, ContextType>;
  verifiedAddress?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  verifiedName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Status15Resolvers = { PENDING: 'pending', UNAVAILABLE: 'unavailable', UNVERIFIED: 'unverified', VERIFIED: 'verified' };

export type V1Customer2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['V1Customer2'] = ResolversParentTypes['V1Customer2']> = ResolversObject<{
  address?: Resolver<Maybe<ResolversTypes['Address7']>, ParentType, ContextType>;
  balance?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  created?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  currency?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  defaultSource?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  deleted?: Resolver<Maybe<ResolversTypes['Deleted']>, ParentType, ContextType>;
  delinquent?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  discount?: Resolver<Maybe<ResolversTypes['Discount3']>, ParentType, ContextType>;
  email?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  invoicePrefix?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  invoiceSettings?: Resolver<Maybe<ResolversTypes['InvoiceSettings2']>, ParentType, ContextType>;
  livemode?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  metadata?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  nextInvoiceSequence?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  object?: Resolver<Maybe<ResolversTypes['Object30']>, ParentType, ContextType>;
  phone?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  preferredLocales?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>;
  shipping?: Resolver<Maybe<ResolversTypes['Shipping5']>, ParentType, ContextType>;
  sources?: Resolver<Maybe<ResolversTypes['Sources']>, ParentType, ContextType>;
  subscriptions?: Resolver<Maybe<ResolversTypes['Subscriptions']>, ParentType, ContextType>;
  tax?: Resolver<Maybe<ResolversTypes['Tax2']>, ParentType, ContextType>;
  taxExempt?: Resolver<Maybe<ResolversTypes['TaxExempt2']>, ParentType, ContextType>;
  taxIds?: Resolver<Maybe<ResolversTypes['TaxIDsList']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type DeletedResolvers = { TRUE: 'true' };

export type InvoiceSettings2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['InvoiceSettings2'] = ResolversParentTypes['InvoiceSettings2']> = ResolversObject<{
  customFields?: Resolver<Maybe<Array<Maybe<ResolversTypes['InvoiceSettingCustomField']>>>, ParentType, ContextType>;
  defaultPaymentMethod?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  footer?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Tax2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Tax2'] = ResolversParentTypes['Tax2']> = ResolversObject<{
  automaticTax?: Resolver<ResolversTypes['AutomaticTax2'], ParentType, ContextType>;
  ipAddress?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  location?: Resolver<Maybe<ResolversTypes['Location']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CustomerBalanceTransactionListResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CustomerBalanceTransactionList'] = ResolversParentTypes['CustomerBalanceTransactionList']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['CustomerBalanceTransaction2']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CustomerBalanceTransaction2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CustomerBalanceTransaction2'] = ResolversParentTypes['CustomerBalanceTransaction2']> = ResolversObject<{
  amount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  created?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  creditNote?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  currency?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  customer?: Resolver<ResolversTypes['JSON'], ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  endingBalance?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  invoice?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  livemode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  metadata?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object34'], ParentType, ContextType>;
  type?: Resolver<ResolversTypes['Type21'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Object34Resolvers = { CUSTOMER_BALANCE_TRANSACTION: 'customer_balance_transaction' };

export type Type21Resolvers = { ADJUSTMENT: 'adjustment', APPLIED_TO_INVOICE: 'applied_to_invoice', CREDIT_NOTE: 'credit_note', INITIAL: 'initial', INVOICE_TOO_LARGE: 'invoice_too_large', INVOICE_TOO_SMALL: 'invoice_too_small', MIGRATION: 'migration', UNAPPLIED_FROM_INVOICE: 'unapplied_from_invoice', UNSPENT_RECEIVER_CREDIT: 'unspent_receiver_credit' };

export type BankAccountListResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['BankAccountList'] = ResolversParentTypes['BankAccountList']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['BankAccount7']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BankAccount7Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['BankAccount7'] = ResolversParentTypes['BankAccount7']> = ResolversObject<{
  account?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  accountHolderName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  accountHolderType?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  accountType?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  availablePayoutMethods?: Resolver<Maybe<Array<Maybe<ResolversTypes['AvailablePayoutMethods2ListItem']>>>, ParentType, ContextType>;
  bankName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  country?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  currency?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  customer?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  defaultForCurrency?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  fingerprint?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  last4?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  metadata?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object35'], ParentType, ContextType>;
  routingNumber?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  status?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AvailablePayoutMethods2ListItemResolvers = { INSTANT: 'instant', STANDARD: 'standard' };

export type Object35Resolvers = { BANK_ACCOUNT: 'bank_account' };

export type CardListResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CardList'] = ResolversParentTypes['CardList']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['Card2']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ApmsSourcesSourceListResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ApmsSourcesSourceList'] = ResolversParentTypes['ApmsSourcesSourceList']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['Data21ListItem']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type PaymentSourceResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PaymentSource'] = ResolversParentTypes['PaymentSource']> = ResolversObject<{
  account?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  accountHolderName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  accountHolderType?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  accountType?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  achCreditTransfer?: Resolver<Maybe<ResolversTypes['AchCreditTransfer2']>, ParentType, ContextType>;
  achDebit?: Resolver<Maybe<ResolversTypes['AchDebit2']>, ParentType, ContextType>;
  acssDebit?: Resolver<Maybe<ResolversTypes['AcssDebit4']>, ParentType, ContextType>;
  active?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  addressCity?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  addressCountry?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  addressLine1?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  addressLine1Check?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  addressLine2?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  addressState?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  addressZip?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  addressZipCheck?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  alipay?: Resolver<Maybe<ResolversTypes['Alipay2']>, ParentType, ContextType>;
  amount?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  amountReceived?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  auBecsDebit?: Resolver<Maybe<ResolversTypes['AuBecsDebit2']>, ParentType, ContextType>;
  availablePayoutMethods?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  bancontact?: Resolver<Maybe<ResolversTypes['Bancontact2']>, ParentType, ContextType>;
  bankName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  bitcoinAmount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  bitcoinAmountReceived?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  bitcoinUri?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  brand?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  businessProfile?: Resolver<Maybe<ResolversTypes['BusinessProfile']>, ParentType, ContextType>;
  businessType?: Resolver<Maybe<ResolversTypes['BusinessType']>, ParentType, ContextType>;
  capabilities?: Resolver<Maybe<ResolversTypes['Capabilities2']>, ParentType, ContextType>;
  card?: Resolver<Maybe<ResolversTypes['Card6']>, ParentType, ContextType>;
  cardPresent?: Resolver<Maybe<ResolversTypes['CardPresent2']>, ParentType, ContextType>;
  chargesEnabled?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  clientSecret?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  codeVerification?: Resolver<Maybe<ResolversTypes['CodeVerification']>, ParentType, ContextType>;
  company?: Resolver<Maybe<ResolversTypes['Company2']>, ParentType, ContextType>;
  controller?: Resolver<Maybe<ResolversTypes['Controller']>, ParentType, ContextType>;
  country?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  created?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  currency?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  customer?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  cvcCheck?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  defaultCurrency?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  defaultForCurrency?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  detailsSubmitted?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  dynamicLast4?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  email?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  eps?: Resolver<Maybe<ResolversTypes['Eps2']>, ParentType, ContextType>;
  expMonth?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  expYear?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  externalAccounts?: Resolver<Maybe<ResolversTypes['ExternalAccounts']>, ParentType, ContextType>;
  filled?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  fingerprint?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  flow?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  funding?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  giropay?: Resolver<Maybe<ResolversTypes['Giropay2']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  ideal?: Resolver<Maybe<ResolversTypes['Ideal2']>, ParentType, ContextType>;
  inboundAddress?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  individual?: Resolver<Maybe<ResolversTypes['Individual2']>, ParentType, ContextType>;
  klarna?: Resolver<Maybe<ResolversTypes['Klarna2']>, ParentType, ContextType>;
  last4?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  livemode?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  metadata?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  multibanco?: Resolver<Maybe<ResolversTypes['Multibanco2']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  object?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  owner?: Resolver<Maybe<ResolversTypes['Owner3']>, ParentType, ContextType>;
  p24?: Resolver<Maybe<ResolversTypes['P242']>, ParentType, ContextType>;
  payment?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  paymentAmount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  paymentCurrency?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  payoutsEnabled?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  receiver?: Resolver<Maybe<ResolversTypes['Receiver2']>, ParentType, ContextType>;
  recipient?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  redirect?: Resolver<Maybe<ResolversTypes['Redirect']>, ParentType, ContextType>;
  refundAddress?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  requirements?: Resolver<Maybe<ResolversTypes['Requirements2']>, ParentType, ContextType>;
  reusable?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  routingNumber?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  sepaDebit?: Resolver<Maybe<ResolversTypes['SepaDebit2']>, ParentType, ContextType>;
  settings?: Resolver<Maybe<ResolversTypes['Settings']>, ParentType, ContextType>;
  sofort?: Resolver<Maybe<ResolversTypes['Sofort2']>, ParentType, ContextType>;
  sourceOrder?: Resolver<Maybe<ResolversTypes['SourceOrder']>, ParentType, ContextType>;
  statementDescriptor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  threeDSecure?: Resolver<Maybe<ResolversTypes['ThreeDSecure4']>, ParentType, ContextType>;
  tokenizationMethod?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  tosAcceptance?: Resolver<Maybe<ResolversTypes['TosAcceptance2']>, ParentType, ContextType>;
  transactions?: Resolver<Maybe<ResolversTypes['Transactions']>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  uncapturedFunds?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  usage?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  used?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  usedForPayment?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  username?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  wechat?: Resolver<Maybe<ResolversTypes['Wechat2']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Capabilities2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Capabilities2'] = ResolversParentTypes['Capabilities2']> = ResolversObject<{
  acssDebitPayments?: Resolver<Maybe<ResolversTypes['AcssDebitPayments']>, ParentType, ContextType>;
  afterpayClearpayPayments?: Resolver<Maybe<ResolversTypes['AfterpayClearpayPayments']>, ParentType, ContextType>;
  auBecsDebitPayments?: Resolver<Maybe<ResolversTypes['AuBecsDebitPayments']>, ParentType, ContextType>;
  bacsDebitPayments?: Resolver<Maybe<ResolversTypes['BacsDebitPayments']>, ParentType, ContextType>;
  bancontactPayments?: Resolver<Maybe<ResolversTypes['BancontactPayments']>, ParentType, ContextType>;
  boletoPayments?: Resolver<Maybe<ResolversTypes['BoletoPayments']>, ParentType, ContextType>;
  cardIssuing?: Resolver<Maybe<ResolversTypes['CardIssuing']>, ParentType, ContextType>;
  cardPayments?: Resolver<Maybe<ResolversTypes['CardPayments']>, ParentType, ContextType>;
  cartesBancairesPayments?: Resolver<Maybe<ResolversTypes['CartesBancairesPayments']>, ParentType, ContextType>;
  epsPayments?: Resolver<Maybe<ResolversTypes['EpsPayments']>, ParentType, ContextType>;
  fpxPayments?: Resolver<Maybe<ResolversTypes['FpxPayments']>, ParentType, ContextType>;
  giropayPayments?: Resolver<Maybe<ResolversTypes['GiropayPayments']>, ParentType, ContextType>;
  grabpayPayments?: Resolver<Maybe<ResolversTypes['GrabpayPayments']>, ParentType, ContextType>;
  idealPayments?: Resolver<Maybe<ResolversTypes['IdealPayments']>, ParentType, ContextType>;
  jcbPayments?: Resolver<Maybe<ResolversTypes['JcbPayments']>, ParentType, ContextType>;
  legacyPayments?: Resolver<Maybe<ResolversTypes['LegacyPayments']>, ParentType, ContextType>;
  oxxoPayments?: Resolver<Maybe<ResolversTypes['OxxoPayments']>, ParentType, ContextType>;
  p24Payments?: Resolver<Maybe<ResolversTypes['P24Payments']>, ParentType, ContextType>;
  sepaDebitPayments?: Resolver<Maybe<ResolversTypes['SepaDebitPayments']>, ParentType, ContextType>;
  sofortPayments?: Resolver<Maybe<ResolversTypes['SofortPayments']>, ParentType, ContextType>;
  taxReportingUs1099K?: Resolver<Maybe<ResolversTypes['TaxReportingUs1099K']>, ParentType, ContextType>;
  taxReportingUs1099Misc?: Resolver<Maybe<ResolversTypes['TaxReportingUs1099Misc']>, ParentType, ContextType>;
  transfers?: Resolver<Maybe<ResolversTypes['Transfers']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Company2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Company2'] = ResolversParentTypes['Company2']> = ResolversObject<{
  address?: Resolver<Maybe<ResolversTypes['Address']>, ParentType, ContextType>;
  addressKana?: Resolver<Maybe<ResolversTypes['AddressKana']>, ParentType, ContextType>;
  addressKanji?: Resolver<Maybe<ResolversTypes['AddressKanji']>, ParentType, ContextType>;
  directorsProvided?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  executivesProvided?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  nameKana?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  nameKanji?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  ownersProvided?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  phone?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  structure?: Resolver<Maybe<ResolversTypes['Structure']>, ParentType, ContextType>;
  taxIdProvided?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  taxIdRegistrar?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  vatIdProvided?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  verification?: Resolver<Maybe<ResolversTypes['Verification']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ControllerResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Controller'] = ResolversParentTypes['Controller']> = ResolversObject<{
  isController?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['Type']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Individual2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Individual2'] = ResolversParentTypes['Individual2']> = ResolversObject<{
  account?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  address?: Resolver<Maybe<ResolversTypes['Address']>, ParentType, ContextType>;
  addressKana?: Resolver<Maybe<ResolversTypes['AddressKana2']>, ParentType, ContextType>;
  addressKanji?: Resolver<Maybe<ResolversTypes['AddressKanji2']>, ParentType, ContextType>;
  created?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  dob?: Resolver<Maybe<ResolversTypes['LegalEntityDob']>, ParentType, ContextType>;
  email?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  firstName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  firstNameKana?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  firstNameKanji?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  gender?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  idNumberProvided?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  lastName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  lastNameKana?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  lastNameKanji?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  maidenName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  metadata?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  nationality?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object5'], ParentType, ContextType>;
  phone?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  politicalExposure?: Resolver<Maybe<ResolversTypes['PoliticalExposure']>, ParentType, ContextType>;
  relationship?: Resolver<Maybe<ResolversTypes['PersonRelationship']>, ParentType, ContextType>;
  requirements?: Resolver<Maybe<ResolversTypes['Requirements']>, ParentType, ContextType>;
  ssnLast4Provided?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  verification?: Resolver<Maybe<ResolversTypes['LegalEntityPersonVerification']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Requirements2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Requirements2'] = ResolversParentTypes['Requirements2']> = ResolversObject<{
  currentDeadline?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  currentlyDue?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>;
  disabledReason?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  errors?: Resolver<Maybe<Array<Maybe<ResolversTypes['AccountRequirementsError']>>>, ParentType, ContextType>;
  eventuallyDue?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>;
  pastDue?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>;
  pendingVerification?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type TosAcceptance2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['TosAcceptance2'] = ResolversParentTypes['TosAcceptance2']> = ResolversObject<{
  date?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  ip?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  serviceAgreement?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  userAgent?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SubscriptionListResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SubscriptionList'] = ResolversParentTypes['SubscriptionList']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['Subscription5']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type TaxIDsList2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['TaxIDsList2'] = ResolversParentTypes['TaxIDsList2']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['TaxId3']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type V1Disputes2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['V1Disputes2'] = ResolversParentTypes['V1Disputes2']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['Dispute']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type NotificationEventListResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['NotificationEventList'] = ResolversParentTypes['NotificationEventList']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['Event']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type EventResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Event'] = ResolversParentTypes['Event']> = ResolversObject<{
  account?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  apiVersion?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  created?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  data?: Resolver<ResolversTypes['NotificationEventData'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  livemode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object38'], ParentType, ContextType>;
  pendingWebhooks?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  request?: Resolver<Maybe<ResolversTypes['Request']>, ParentType, ContextType>;
  type?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type NotificationEventDataResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['NotificationEventData'] = ResolversParentTypes['NotificationEventData']> = ResolversObject<{
  object?: Resolver<ResolversTypes['JSON'], ParentType, ContextType>;
  previousAttributes?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Object38Resolvers = { EVENT: 'event' };

export type RequestResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Request'] = ResolversParentTypes['Request']> = ResolversObject<{
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  idempotencyKey?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type V1ExchangeRates2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['V1ExchangeRates2'] = ResolversParentTypes['V1ExchangeRates2']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['ExchangeRate2']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ExchangeRate2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ExchangeRate2'] = ResolversParentTypes['ExchangeRate2']> = ResolversObject<{
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object39'], ParentType, ContextType>;
  rates?: Resolver<ResolversTypes['JSON'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Object39Resolvers = { EXCHANGE_RATE: 'exchange_rate' };

export type V1FileLinks2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['V1FileLinks2'] = ResolversParentTypes['V1FileLinks2']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['FileLink']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type FileLinkResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['FileLink'] = ResolversParentTypes['FileLink']> = ResolversObject<{
  created?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  expired?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  expiresAt?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  file?: Resolver<ResolversTypes['JSON'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  livemode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  metadata?: Resolver<ResolversTypes['JSON'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object40'], ParentType, ContextType>;
  url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Object40Resolvers = { FILE_LINK: 'file_link' };

export type V1Files2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['V1Files2'] = ResolversParentTypes['V1Files2']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['File3']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type File3Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['File3'] = ResolversParentTypes['File3']> = ResolversObject<{
  created?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  expiresAt?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  filename?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  links?: Resolver<Maybe<ResolversTypes['Links']>, ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object41'], ParentType, ContextType>;
  purpose?: Resolver<ResolversTypes['Purpose'], ParentType, ContextType>;
  size?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type LinksResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Links'] = ResolversParentTypes['Links']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['FileLink']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Object41Resolvers = { FILE: 'file' };

export type PurposeResolvers = { ACCOUNT_REQUIREMENT: 'account_requirement', ADDITIONAL_VERIFICATION: 'additional_verification', BUSINESS_ICON: 'business_icon', BUSINESS_LOGO: 'business_logo', CUSTOMER_SIGNATURE: 'customer_signature', DISPUTE_EVIDENCE: 'dispute_evidence', DOCUMENT_PROVIDER_IDENTITY_DOCUMENT: 'document_provider_identity_document', FINANCE_REPORT_RUN: 'finance_report_run', IDENTITY_DOCUMENT: 'identity_document', IDENTITY_DOCUMENT_DOWNLOADABLE: 'identity_document_downloadable', PCI_DOCUMENT: 'pci_document', SELFIE: 'selfie', SIGMA_SCHEDULED_QUERY: 'sigma_scheduled_query', TAX_DOCUMENT_USER_UPLOAD: 'tax_document_user_upload' };

export type Purpose2Resolvers = { ACCOUNT_REQUIREMENT: 'account_requirement', ADDITIONAL_VERIFICATION: 'additional_verification', BUSINESS_ICON: 'business_icon', BUSINESS_LOGO: 'business_logo', CUSTOMER_SIGNATURE: 'customer_signature', DISPUTE_EVIDENCE: 'dispute_evidence', DOCUMENT_PROVIDER_IDENTITY_DOCUMENT: 'document_provider_identity_document', FINANCE_REPORT_RUN: 'finance_report_run', IDENTITY_DOCUMENT: 'identity_document', IDENTITY_DOCUMENT_DOWNLOADABLE: 'identity_document_downloadable', PCI_DOCUMENT: 'pci_document', SELFIE: 'selfie', SIGMA_SCHEDULED_QUERY: 'sigma_scheduled_query', TAX_DOCUMENT_USER_UPLOAD: 'tax_document_user_upload' };

export type V1IdentityVerificationReports2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['V1IdentityVerificationReports2'] = ResolversParentTypes['V1IdentityVerificationReports2']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['IdentityVerificationReport']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type IdentityVerificationReportResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['IdentityVerificationReport'] = ResolversParentTypes['IdentityVerificationReport']> = ResolversObject<{
  created?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  document?: Resolver<Maybe<ResolversTypes['GelatoDocumentReport']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  idNumber?: Resolver<Maybe<ResolversTypes['GelatoIdNumberReport']>, ParentType, ContextType>;
  livemode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object42'], ParentType, ContextType>;
  options?: Resolver<ResolversTypes['GelatoVerificationReportOptions'], ParentType, ContextType>;
  selfie?: Resolver<Maybe<ResolversTypes['GelatoSelfieReport']>, ParentType, ContextType>;
  type?: Resolver<ResolversTypes['Type26'], ParentType, ContextType>;
  verificationSession?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type GelatoDocumentReportResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['GelatoDocumentReport'] = ResolversParentTypes['GelatoDocumentReport']> = ResolversObject<{
  address?: Resolver<Maybe<ResolversTypes['Address12']>, ParentType, ContextType>;
  dob?: Resolver<Maybe<ResolversTypes['Dob8']>, ParentType, ContextType>;
  error?: Resolver<Maybe<ResolversTypes['Error']>, ParentType, ContextType>;
  expirationDate?: Resolver<Maybe<ResolversTypes['ExpirationDate']>, ParentType, ContextType>;
  files?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>;
  firstName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  issuedDate?: Resolver<Maybe<ResolversTypes['IssuedDate']>, ParentType, ContextType>;
  issuingCountry?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  lastName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  number?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  status?: Resolver<ResolversTypes['Status17'], ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['Type25']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Address12Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Address12'] = ResolversParentTypes['Address12']> = ResolversObject<{
  city?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  country?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  line1?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  line2?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  postalCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  state?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Dob8Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Dob8'] = ResolversParentTypes['Dob8']> = ResolversObject<{
  day?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  month?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  year?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ErrorResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Error'] = ResolversParentTypes['Error']> = ResolversObject<{
  code?: Resolver<Maybe<ResolversTypes['Code2']>, ParentType, ContextType>;
  reason?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Code2Resolvers = { DOCUMENT_EXPIRED: 'document_expired', DOCUMENT_TYPE_NOT_SUPPORTED: 'document_type_not_supported', DOCUMENT_UNVERIFIED_OTHER: 'document_unverified_other' };

export type ExpirationDateResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ExpirationDate'] = ResolversParentTypes['ExpirationDate']> = ResolversObject<{
  day?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  month?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  year?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type IssuedDateResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['IssuedDate'] = ResolversParentTypes['IssuedDate']> = ResolversObject<{
  day?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  month?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  year?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Status17Resolvers = { UNVERIFIED: 'unverified', VERIFIED: 'verified' };

export type Type25Resolvers = { DRIVING_LICENSE: 'driving_license', ID_CARD: 'id_card', PASSPORT: 'passport' };

export type GelatoIdNumberReportResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['GelatoIdNumberReport'] = ResolversParentTypes['GelatoIdNumberReport']> = ResolversObject<{
  dob?: Resolver<Maybe<ResolversTypes['Dob9']>, ParentType, ContextType>;
  error?: Resolver<Maybe<ResolversTypes['Error2']>, ParentType, ContextType>;
  firstName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  idNumber?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  idNumberType?: Resolver<Maybe<ResolversTypes['IdNumberType']>, ParentType, ContextType>;
  lastName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  status?: Resolver<ResolversTypes['Status18'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Dob9Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Dob9'] = ResolversParentTypes['Dob9']> = ResolversObject<{
  day?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  month?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  year?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Error2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Error2'] = ResolversParentTypes['Error2']> = ResolversObject<{
  code?: Resolver<Maybe<ResolversTypes['Code3']>, ParentType, ContextType>;
  reason?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Code3Resolvers = { ID_NUMBER_INSUFFICIENT_DOCUMENT_DATA: 'id_number_insufficient_document_data', ID_NUMBER_MISMATCH: 'id_number_mismatch', ID_NUMBER_UNVERIFIED_OTHER: 'id_number_unverified_other' };

export type IdNumberTypeResolvers = { BR_CPF: 'br_cpf', SG_NRIC: 'sg_nric', US_SSN: 'us_ssn' };

export type Status18Resolvers = { UNVERIFIED: 'unverified', VERIFIED: 'verified' };

export type Object42Resolvers = { IDENTITY_VERIFICATION_REPORT: 'identity.verification_report' };

export type GelatoVerificationReportOptionsResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['GelatoVerificationReportOptions'] = ResolversParentTypes['GelatoVerificationReportOptions']> = ResolversObject<{
  document?: Resolver<Maybe<ResolversTypes['GelatoReportDocumentOptions']>, ParentType, ContextType>;
  idNumber?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type GelatoReportDocumentOptionsResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['GelatoReportDocumentOptions'] = ResolversParentTypes['GelatoReportDocumentOptions']> = ResolversObject<{
  allowedTypes?: Resolver<Maybe<Array<Maybe<ResolversTypes['AllowedTypesListItem']>>>, ParentType, ContextType>;
  requireIdNumber?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  requireLiveCapture?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  requireMatchingSelfie?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AllowedTypesListItemResolvers = { DRIVING_LICENSE: 'driving_license', ID_CARD: 'id_card', PASSPORT: 'passport' };

export type GelatoSelfieReportResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['GelatoSelfieReport'] = ResolversParentTypes['GelatoSelfieReport']> = ResolversObject<{
  document?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  error?: Resolver<Maybe<ResolversTypes['Error3']>, ParentType, ContextType>;
  selfie?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  status?: Resolver<ResolversTypes['Status19'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Error3Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Error3'] = ResolversParentTypes['Error3']> = ResolversObject<{
  code?: Resolver<Maybe<ResolversTypes['Code4']>, ParentType, ContextType>;
  reason?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Code4Resolvers = { SELFIE_DOCUMENT_MISSING_PHOTO: 'selfie_document_missing_photo', SELFIE_FACE_MISMATCH: 'selfie_face_mismatch', SELFIE_MANIPULATED: 'selfie_manipulated', SELFIE_UNVERIFIED_OTHER: 'selfie_unverified_other' };

export type Status19Resolvers = { UNVERIFIED: 'unverified', VERIFIED: 'verified' };

export type Type26Resolvers = { DOCUMENT: 'document', ID_NUMBER: 'id_number' };

export type Type68Resolvers = { DOCUMENT: 'document', ID_NUMBER: 'id_number' };

export type V1IdentityVerificationSessions2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['V1IdentityVerificationSessions2'] = ResolversParentTypes['V1IdentityVerificationSessions2']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['IdentityVerificationSession']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type IdentityVerificationSessionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['IdentityVerificationSession'] = ResolversParentTypes['IdentityVerificationSession']> = ResolversObject<{
  clientSecret?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  created?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  lastError?: Resolver<Maybe<ResolversTypes['LastError']>, ParentType, ContextType>;
  lastVerificationReport?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  livemode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  metadata?: Resolver<ResolversTypes['JSON'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object43'], ParentType, ContextType>;
  options?: Resolver<ResolversTypes['GelatoVerificationSessionOptions'], ParentType, ContextType>;
  redaction?: Resolver<Maybe<ResolversTypes['Redaction']>, ParentType, ContextType>;
  status?: Resolver<ResolversTypes['Status21'], ParentType, ContextType>;
  type?: Resolver<ResolversTypes['Type27'], ParentType, ContextType>;
  url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  verifiedOutputs?: Resolver<Maybe<ResolversTypes['VerifiedOutputs']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type LastErrorResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['LastError'] = ResolversParentTypes['LastError']> = ResolversObject<{
  code?: Resolver<Maybe<ResolversTypes['Code5']>, ParentType, ContextType>;
  reason?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Code5Resolvers = { ABANDONED: 'abandoned', CONSENT_DECLINED: 'consent_declined', COUNTRY_NOT_SUPPORTED: 'country_not_supported', DEVICE_NOT_SUPPORTED: 'device_not_supported', DOCUMENT_EXPIRED: 'document_expired', DOCUMENT_TYPE_NOT_SUPPORTED: 'document_type_not_supported', DOCUMENT_UNVERIFIED_OTHER: 'document_unverified_other', ID_NUMBER_INSUFFICIENT_DOCUMENT_DATA: 'id_number_insufficient_document_data', ID_NUMBER_MISMATCH: 'id_number_mismatch', ID_NUMBER_UNVERIFIED_OTHER: 'id_number_unverified_other', SELFIE_DOCUMENT_MISSING_PHOTO: 'selfie_document_missing_photo', SELFIE_FACE_MISMATCH: 'selfie_face_mismatch', SELFIE_MANIPULATED: 'selfie_manipulated', SELFIE_UNVERIFIED_OTHER: 'selfie_unverified_other', UNDER_SUPPORTED_AGE: 'under_supported_age' };

export type Object43Resolvers = { IDENTITY_VERIFICATION_SESSION: 'identity.verification_session' };

export type GelatoVerificationSessionOptionsResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['GelatoVerificationSessionOptions'] = ResolversParentTypes['GelatoVerificationSessionOptions']> = ResolversObject<{
  document?: Resolver<Maybe<ResolversTypes['GelatoSessionDocumentOptions']>, ParentType, ContextType>;
  idNumber?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type GelatoSessionDocumentOptionsResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['GelatoSessionDocumentOptions'] = ResolversParentTypes['GelatoSessionDocumentOptions']> = ResolversObject<{
  allowedTypes?: Resolver<Maybe<Array<Maybe<ResolversTypes['AllowedTypesListItem']>>>, ParentType, ContextType>;
  requireIdNumber?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  requireLiveCapture?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  requireMatchingSelfie?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type RedactionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Redaction'] = ResolversParentTypes['Redaction']> = ResolversObject<{
  status?: Resolver<Maybe<ResolversTypes['Status20']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Status20Resolvers = { PROCESSING: 'processing', REDACTED: 'redacted' };

export type Status21Resolvers = { CANCELED: 'canceled', PROCESSING: 'processing', REQUIRES_INPUT: 'requires_input', VERIFIED: 'verified' };

export type Type27Resolvers = { DOCUMENT: 'document', ID_NUMBER: 'id_number' };

export type VerifiedOutputsResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['VerifiedOutputs'] = ResolversParentTypes['VerifiedOutputs']> = ResolversObject<{
  address?: Resolver<Maybe<ResolversTypes['Address13']>, ParentType, ContextType>;
  dob?: Resolver<Maybe<ResolversTypes['Dob10']>, ParentType, ContextType>;
  firstName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  idNumber?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  idNumberType?: Resolver<Maybe<ResolversTypes['IdNumberType2']>, ParentType, ContextType>;
  lastName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Address13Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Address13'] = ResolversParentTypes['Address13']> = ResolversObject<{
  city?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  country?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  line1?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  line2?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  postalCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  state?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Dob10Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Dob10'] = ResolversParentTypes['Dob10']> = ResolversObject<{
  day?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  month?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  year?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type IdNumberType2Resolvers = { BR_CPF: 'br_cpf', SG_NRIC: 'sg_nric', US_SSN: 'us_ssn' };

export type Status55Resolvers = { CANCELED: 'canceled', PROCESSING: 'processing', REQUIRES_INPUT: 'requires_input', VERIFIED: 'verified' };

export type V1Invoiceitems2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['V1Invoiceitems2'] = ResolversParentTypes['V1Invoiceitems2']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['Invoiceitem']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type InvoiceitemResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Invoiceitem'] = ResolversParentTypes['Invoiceitem']> = ResolversObject<{
  amount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  currency?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  customer?: Resolver<ResolversTypes['JSON'], ParentType, ContextType>;
  date?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  discountable?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  discounts?: Resolver<Maybe<Array<Maybe<ResolversTypes['JSON']>>>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  invoice?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  livemode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  metadata?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object44'], ParentType, ContextType>;
  period?: Resolver<ResolversTypes['InvoiceLineItemPeriod'], ParentType, ContextType>;
  price?: Resolver<Maybe<ResolversTypes['Price7']>, ParentType, ContextType>;
  proration?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  quantity?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  subscription?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  subscriptionItem?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  taxRates?: Resolver<Maybe<Array<Maybe<ResolversTypes['TaxRate']>>>, ParentType, ContextType>;
  unitAmount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  unitAmountDecimal?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Object44Resolvers = { INVOICEITEM: 'invoiceitem' };

export type InvoiceLineItemPeriodResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['InvoiceLineItemPeriod'] = ResolversParentTypes['InvoiceLineItemPeriod']> = ResolversObject<{
  end?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  start?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Price7Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Price7'] = ResolversParentTypes['Price7']> = ResolversObject<{
  active?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  billingScheme?: Resolver<Maybe<ResolversTypes['BillingScheme']>, ParentType, ContextType>;
  created?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  currency?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  livemode?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  lookupKey?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  metadata?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  nickname?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  object?: Resolver<Maybe<ResolversTypes['Object24']>, ParentType, ContextType>;
  product?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  recurring?: Resolver<Maybe<ResolversTypes['Recurring']>, ParentType, ContextType>;
  taxBehavior?: Resolver<Maybe<ResolversTypes['TaxBehavior']>, ParentType, ContextType>;
  tiers?: Resolver<Maybe<Array<Maybe<ResolversTypes['PriceTier']>>>, ParentType, ContextType>;
  tiersMode?: Resolver<Maybe<ResolversTypes['TiersMode']>, ParentType, ContextType>;
  transformQuantity?: Resolver<Maybe<ResolversTypes['TransformQuantity']>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['Type12']>, ParentType, ContextType>;
  unitAmount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  unitAmountDecimal?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type InvoicesListResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['InvoicesList'] = ResolversParentTypes['InvoicesList']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['Invoice11']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Invoice11Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Invoice11'] = ResolversParentTypes['Invoice11']> = ResolversObject<{
  accountCountry?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  accountName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  accountTaxIds?: Resolver<Maybe<Array<Maybe<ResolversTypes['JSON']>>>, ParentType, ContextType>;
  amountDue?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  amountPaid?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  amountRemaining?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  applicationFeeAmount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  attemptCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  attempted?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  autoAdvance?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  automaticTax?: Resolver<ResolversTypes['AutomaticTax3'], ParentType, ContextType>;
  billingReason?: Resolver<Maybe<ResolversTypes['BillingReason']>, ParentType, ContextType>;
  charge?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  collectionMethod?: Resolver<Maybe<ResolversTypes['CollectionMethod3']>, ParentType, ContextType>;
  created?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  currency?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  customFields?: Resolver<Maybe<Array<Maybe<ResolversTypes['InvoiceSettingCustomField']>>>, ParentType, ContextType>;
  customer?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  customerAddress?: Resolver<Maybe<ResolversTypes['CustomerAddress']>, ParentType, ContextType>;
  customerEmail?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  customerName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  customerPhone?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  customerShipping?: Resolver<Maybe<ResolversTypes['CustomerShipping']>, ParentType, ContextType>;
  customerTaxExempt?: Resolver<Maybe<ResolversTypes['CustomerTaxExempt']>, ParentType, ContextType>;
  customerTaxIds?: Resolver<Maybe<Array<Maybe<ResolversTypes['InvoicesResourceInvoiceTaxId']>>>, ParentType, ContextType>;
  defaultPaymentMethod?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  defaultSource?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  defaultTaxRates?: Resolver<Array<Maybe<ResolversTypes['TaxRate']>>, ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  discount?: Resolver<Maybe<ResolversTypes['Discount5']>, ParentType, ContextType>;
  discounts?: Resolver<Maybe<Array<Maybe<ResolversTypes['JSON']>>>, ParentType, ContextType>;
  dueDate?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  endingBalance?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  footer?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  hostedInvoiceUrl?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  invoicePdf?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  lastFinalizationError?: Resolver<Maybe<ResolversTypes['LastFinalizationError']>, ParentType, ContextType>;
  lines?: Resolver<ResolversTypes['InvoiceLinesList'], ParentType, ContextType>;
  livemode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  metadata?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  nextPaymentAttempt?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  number?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object49'], ParentType, ContextType>;
  onBehalfOf?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  paid?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  paymentIntent?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  paymentSettings?: Resolver<ResolversTypes['InvoicesPaymentSettings'], ParentType, ContextType>;
  periodEnd?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  periodStart?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  postPaymentCreditNotesAmount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  prePaymentCreditNotesAmount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  quote?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  receiptNumber?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  startingBalance?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  statementDescriptor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['Status25']>, ParentType, ContextType>;
  statusTransitions?: Resolver<ResolversTypes['InvoicesStatusTransitions'], ParentType, ContextType>;
  subscription?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  subscriptionProrationDate?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  subtotal?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  tax?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  thresholdReason?: Resolver<Maybe<ResolversTypes['InvoiceThresholdReason']>, ParentType, ContextType>;
  total?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  totalDiscountAmounts?: Resolver<Maybe<Array<Maybe<ResolversTypes['DiscountsResourceDiscountAmount']>>>, ParentType, ContextType>;
  totalTaxAmounts?: Resolver<Array<Maybe<ResolversTypes['InvoiceTaxAmount']>>, ParentType, ContextType>;
  transferData?: Resolver<Maybe<ResolversTypes['TransferData8']>, ParentType, ContextType>;
  webhooksDeliveredAt?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AutomaticTax3Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['AutomaticTax3'] = ResolversParentTypes['AutomaticTax3']> = ResolversObject<{
  enabled?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['Status22']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Status22Resolvers = { COMPLETE: 'complete', FAILED: 'failed', REQUIRES_LOCATION_INPUTS: 'requires_location_inputs' };

export type BillingReasonResolvers = { AUTOMATIC_PENDING_INVOICE_ITEM_INVOICE: 'automatic_pending_invoice_item_invoice', MANUAL: 'manual', QUOTE_ACCEPT: 'quote_accept', SUBSCRIPTION: 'subscription', SUBSCRIPTION_CREATE: 'subscription_create', SUBSCRIPTION_CYCLE: 'subscription_cycle', SUBSCRIPTION_THRESHOLD: 'subscription_threshold', SUBSCRIPTION_UPDATE: 'subscription_update', UPCOMING: 'upcoming' };

export type CollectionMethod3Resolvers = { CHARGE_AUTOMATICALLY: 'charge_automatically', SEND_INVOICE: 'send_invoice' };

export type CustomerAddressResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CustomerAddress'] = ResolversParentTypes['CustomerAddress']> = ResolversObject<{
  city?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  country?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  line1?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  line2?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  postalCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  state?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CustomerShippingResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CustomerShipping'] = ResolversParentTypes['CustomerShipping']> = ResolversObject<{
  address?: Resolver<Maybe<ResolversTypes['Address']>, ParentType, ContextType>;
  carrier?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  phone?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  trackingNumber?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CustomerTaxExemptResolvers = { EXEMPT: 'exempt', NONE: 'none', REVERSE: 'reverse' };

export type InvoicesResourceInvoiceTaxIdResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['InvoicesResourceInvoiceTaxId'] = ResolversParentTypes['InvoicesResourceInvoiceTaxId']> = ResolversObject<{
  type?: Resolver<ResolversTypes['Type11'], ParentType, ContextType>;
  value?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Discount5Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Discount5'] = ResolversParentTypes['Discount5']> = ResolversObject<{
  checkoutSession?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  coupon?: Resolver<Maybe<ResolversTypes['Coupon']>, ParentType, ContextType>;
  customer?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  end?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  invoice?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  invoiceItem?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  object?: Resolver<Maybe<ResolversTypes['Object22']>, ParentType, ContextType>;
  promotionCode?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  start?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  subscription?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type LastFinalizationErrorResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['LastFinalizationError'] = ResolversParentTypes['LastFinalizationError']> = ResolversObject<{
  charge?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  declineCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  docUrl?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  message?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  param?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  paymentIntent?: Resolver<Maybe<ResolversTypes['PaymentIntent7']>, ParentType, ContextType>;
  paymentMethod?: Resolver<Maybe<ResolversTypes['PaymentMethod3']>, ParentType, ContextType>;
  paymentMethodType?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  setupIntent?: Resolver<Maybe<ResolversTypes['SetupIntent2']>, ParentType, ContextType>;
  source?: Resolver<Maybe<ResolversTypes['Source9']>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['Type30']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type PaymentIntent7Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PaymentIntent7'] = ResolversParentTypes['PaymentIntent7']> = ResolversObject<{
  amount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  amountCapturable?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  amountReceived?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  application?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  applicationFeeAmount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  canceledAt?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  cancellationReason?: Resolver<Maybe<ResolversTypes['CancellationReason']>, ParentType, ContextType>;
  captureMethod?: Resolver<ResolversTypes['CaptureMethod2'], ParentType, ContextType>;
  charges?: Resolver<Maybe<ResolversTypes['Charges']>, ParentType, ContextType>;
  clientSecret?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  confirmationMethod?: Resolver<ResolversTypes['ConfirmationMethod'], ParentType, ContextType>;
  created?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  currency?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  customer?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  invoice?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  lastPaymentError?: Resolver<Maybe<ResolversTypes['LastPaymentError']>, ParentType, ContextType>;
  livemode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  metadata?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  nextAction?: Resolver<Maybe<ResolversTypes['NextAction2']>, ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object47'], ParentType, ContextType>;
  onBehalfOf?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  paymentMethod?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  paymentMethodOptions?: Resolver<Maybe<ResolversTypes['PaymentMethodOptions5']>, ParentType, ContextType>;
  paymentMethodTypes?: Resolver<Array<Maybe<ResolversTypes['String']>>, ParentType, ContextType>;
  receiptEmail?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  review?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  setupFutureUsage?: Resolver<Maybe<ResolversTypes['SetupFutureUsage2']>, ParentType, ContextType>;
  shipping?: Resolver<Maybe<ResolversTypes['Shipping9']>, ParentType, ContextType>;
  statementDescriptor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  statementDescriptorSuffix?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  status?: Resolver<ResolversTypes['Status24'], ParentType, ContextType>;
  transferData?: Resolver<Maybe<ResolversTypes['TransferData7']>, ParentType, ContextType>;
  transferGroup?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CancellationReasonResolvers = { ABANDONED: 'abandoned', AUTOMATIC: 'automatic', DUPLICATE: 'duplicate', FAILED_INVOICE: 'failed_invoice', FRAUDULENT: 'fraudulent', REQUESTED_BY_CUSTOMER: 'requested_by_customer', VOID_INVOICE: 'void_invoice' };

export type CaptureMethod2Resolvers = { AUTOMATIC: 'automatic', MANUAL: 'manual' };

export type ChargesResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Charges'] = ResolversParentTypes['Charges']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['Charge2']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ConfirmationMethodResolvers = { AUTOMATIC: 'automatic', MANUAL: 'manual' };

export type LastPaymentErrorResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['LastPaymentError'] = ResolversParentTypes['LastPaymentError']> = ResolversObject<{
  charge?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  declineCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  docUrl?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  message?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  param?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  paymentIntent?: Resolver<Maybe<ResolversTypes['PaymentIntent7']>, ParentType, ContextType>;
  paymentMethod?: Resolver<Maybe<ResolversTypes['PaymentMethod3']>, ParentType, ContextType>;
  paymentMethodType?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  setupIntent?: Resolver<Maybe<ResolversTypes['SetupIntent2']>, ParentType, ContextType>;
  source?: Resolver<Maybe<ResolversTypes['Source9']>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['Type30']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type PaymentMethod3Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PaymentMethod3'] = ResolversParentTypes['PaymentMethod3']> = ResolversObject<{
  acssDebit?: Resolver<Maybe<ResolversTypes['PaymentMethodAcssDebit']>, ParentType, ContextType>;
  afterpayClearpay?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  alipay?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  auBecsDebit?: Resolver<Maybe<ResolversTypes['PaymentMethodAuBecsDebit']>, ParentType, ContextType>;
  bacsDebit?: Resolver<Maybe<ResolversTypes['PaymentMethodBacsDebit']>, ParentType, ContextType>;
  bancontact?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  billingDetails?: Resolver<ResolversTypes['BillingDetails'], ParentType, ContextType>;
  boleto?: Resolver<Maybe<ResolversTypes['PaymentMethodBoleto']>, ParentType, ContextType>;
  card?: Resolver<Maybe<ResolversTypes['PaymentMethodCard']>, ParentType, ContextType>;
  cardPresent?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  created?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  customer?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  eps?: Resolver<Maybe<ResolversTypes['PaymentMethodEps']>, ParentType, ContextType>;
  fpx?: Resolver<Maybe<ResolversTypes['PaymentMethodFpx']>, ParentType, ContextType>;
  giropay?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  grabpay?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  ideal?: Resolver<Maybe<ResolversTypes['PaymentMethodIdeal']>, ParentType, ContextType>;
  interacPresent?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  livemode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  metadata?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object45'], ParentType, ContextType>;
  oxxo?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  p24?: Resolver<Maybe<ResolversTypes['PaymentMethodP24']>, ParentType, ContextType>;
  sepaDebit?: Resolver<Maybe<ResolversTypes['PaymentMethodSepaDebit']>, ParentType, ContextType>;
  sofort?: Resolver<Maybe<ResolversTypes['PaymentMethodSofort']>, ParentType, ContextType>;
  type?: Resolver<ResolversTypes['Type29'], ParentType, ContextType>;
  wechatPay?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type PaymentMethodAcssDebitResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PaymentMethodAcssDebit'] = ResolversParentTypes['PaymentMethodAcssDebit']> = ResolversObject<{
  bankName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  fingerprint?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  institutionNumber?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  last4?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  transitNumber?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type PaymentMethodAuBecsDebitResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PaymentMethodAuBecsDebit'] = ResolversParentTypes['PaymentMethodAuBecsDebit']> = ResolversObject<{
  bsbNumber?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  fingerprint?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  last4?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type PaymentMethodBacsDebitResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PaymentMethodBacsDebit'] = ResolversParentTypes['PaymentMethodBacsDebit']> = ResolversObject<{
  fingerprint?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  last4?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  sortCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type PaymentMethodBoletoResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PaymentMethodBoleto'] = ResolversParentTypes['PaymentMethodBoleto']> = ResolversObject<{
  taxId?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type PaymentMethodCardResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PaymentMethodCard'] = ResolversParentTypes['PaymentMethodCard']> = ResolversObject<{
  brand?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  checks?: Resolver<Maybe<ResolversTypes['Checks2']>, ParentType, ContextType>;
  country?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  expMonth?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  expYear?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  fingerprint?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  funding?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  generatedFrom?: Resolver<Maybe<ResolversTypes['GeneratedFrom']>, ParentType, ContextType>;
  last4?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  networks?: Resolver<Maybe<ResolversTypes['Networks']>, ParentType, ContextType>;
  threeDSecureUsage?: Resolver<Maybe<ResolversTypes['ThreeDSecureUsage']>, ParentType, ContextType>;
  wallet?: Resolver<Maybe<ResolversTypes['Wallet2']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Checks2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Checks2'] = ResolversParentTypes['Checks2']> = ResolversObject<{
  addressLine1Check?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  addressPostalCodeCheck?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  cvcCheck?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type GeneratedFromResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['GeneratedFrom'] = ResolversParentTypes['GeneratedFrom']> = ResolversObject<{
  charge?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  paymentMethodDetails?: Resolver<Maybe<ResolversTypes['PaymentMethodDetails2']>, ParentType, ContextType>;
  setupAttempt?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type PaymentMethodDetails2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PaymentMethodDetails2'] = ResolversParentTypes['PaymentMethodDetails2']> = ResolversObject<{
  cardPresent?: Resolver<Maybe<ResolversTypes['CardPresent']>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type NetworksResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Networks'] = ResolversParentTypes['Networks']> = ResolversObject<{
  available?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>;
  preferred?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ThreeDSecureUsageResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ThreeDSecureUsage'] = ResolversParentTypes['ThreeDSecureUsage']> = ResolversObject<{
  supported?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Wallet2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Wallet2'] = ResolversParentTypes['Wallet2']> = ResolversObject<{
  amexExpressCheckout?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  applePay?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  dynamicLast4?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  googlePay?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  masterpass?: Resolver<Maybe<ResolversTypes['Masterpass2']>, ParentType, ContextType>;
  samsungPay?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['Type9']>, ParentType, ContextType>;
  visaCheckout?: Resolver<Maybe<ResolversTypes['VisaCheckout2']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Masterpass2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Masterpass2'] = ResolversParentTypes['Masterpass2']> = ResolversObject<{
  billingAddress?: Resolver<Maybe<ResolversTypes['BillingAddress']>, ParentType, ContextType>;
  email?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  shippingAddress?: Resolver<Maybe<ResolversTypes['ShippingAddress']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type VisaCheckout2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['VisaCheckout2'] = ResolversParentTypes['VisaCheckout2']> = ResolversObject<{
  billingAddress?: Resolver<Maybe<ResolversTypes['BillingAddress']>, ParentType, ContextType>;
  email?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  shippingAddress?: Resolver<Maybe<ResolversTypes['ShippingAddress']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type PaymentMethodEpsResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PaymentMethodEps'] = ResolversParentTypes['PaymentMethodEps']> = ResolversObject<{
  bank?: Resolver<Maybe<ResolversTypes['Bank']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type PaymentMethodFpxResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PaymentMethodFpx'] = ResolversParentTypes['PaymentMethodFpx']> = ResolversObject<{
  bank?: Resolver<ResolversTypes['Bank6'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Bank6Resolvers = { AFFIN_BANK: 'affin_bank', ALLIANCE_BANK: 'alliance_bank', AMBANK: 'ambank', BANK_ISLAM: 'bank_islam', BANK_MUAMALAT: 'bank_muamalat', BANK_RAKYAT: 'bank_rakyat', BSN: 'bsn', CIMB: 'cimb', DEUTSCHE_BANK: 'deutsche_bank', HONG_LEONG_BANK: 'hong_leong_bank', HSBC: 'hsbc', KFH: 'kfh', MAYBANK2E: 'maybank2e', MAYBANK2U: 'maybank2u', OCBC: 'ocbc', PB_ENTERPRISE: 'pb_enterprise', PUBLIC_BANK: 'public_bank', RHB: 'rhb', STANDARD_CHARTERED: 'standard_chartered', UOB: 'uob' };

export type PaymentMethodIdealResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PaymentMethodIdeal'] = ResolversParentTypes['PaymentMethodIdeal']> = ResolversObject<{
  bank?: Resolver<Maybe<ResolversTypes['Bank7']>, ParentType, ContextType>;
  bic?: Resolver<Maybe<ResolversTypes['Bic9']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Bank7Resolvers = { ABN_AMRO: 'abn_amro', ASN_BANK: 'asn_bank', BUNQ: 'bunq', HANDELSBANKEN: 'handelsbanken', ING: 'ing', KNAB: 'knab', MONEYOU: 'moneyou', RABOBANK: 'rabobank', REGIOBANK: 'regiobank', REVOLUT: 'revolut', SNS_BANK: 'sns_bank', TRIODOS_BANK: 'triodos_bank', VAN_LANSCHOT: 'van_lanschot' };

export type Object45Resolvers = { PAYMENT_METHOD: 'payment_method' };

export type PaymentMethodP24Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PaymentMethodP24'] = ResolversParentTypes['PaymentMethodP24']> = ResolversObject<{
  bank?: Resolver<Maybe<ResolversTypes['Bank8']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Bank8Resolvers = { ALIOR_BANK: 'alior_bank', BANK_MILLENNIUM: 'bank_millennium', BANK_NOWY_BFG_SA: 'bank_nowy_bfg_sa', BANK_PEKAO_SA: 'bank_pekao_sa', BANKI_SPBDZIELCZE: 'banki_spbdzielcze', BLIK: 'blik', BNP_PARIBAS: 'bnp_paribas', BOZ: 'boz', CITI_HANDLOWY: 'citi_handlowy', CREDIT_AGRICOLE: 'credit_agricole', ENVELOBANK: 'envelobank', ETRANSFER_POCZTOWY24: 'etransfer_pocztowy24', GETIN_BANK: 'getin_bank', IDEABANK: 'ideabank', ING: 'ing', INTELIGO: 'inteligo', MBANK_MTRANSFER: 'mbank_mtransfer', NEST_PRZELEW: 'nest_przelew', NOBLE_PAY: 'noble_pay', PBAC_Z_IPKO: 'pbac_z_ipko', PLUS_BANK: 'plus_bank', SANTANDER_PRZELEW24: 'santander_przelew24', TMOBILE_USBUGI_BANKOWE: 'tmobile_usbugi_bankowe', TOYOTA_BANK: 'toyota_bank', VOLKSWAGEN_BANK: 'volkswagen_bank' };

export type PaymentMethodSepaDebitResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PaymentMethodSepaDebit'] = ResolversParentTypes['PaymentMethodSepaDebit']> = ResolversObject<{
  bankCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  branchCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  country?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  fingerprint?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  generatedFrom?: Resolver<Maybe<ResolversTypes['GeneratedFrom2']>, ParentType, ContextType>;
  last4?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type GeneratedFrom2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['GeneratedFrom2'] = ResolversParentTypes['GeneratedFrom2']> = ResolversObject<{
  charge?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  setupAttempt?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type PaymentMethodSofortResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PaymentMethodSofort'] = ResolversParentTypes['PaymentMethodSofort']> = ResolversObject<{
  country?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Type29Resolvers = { ACSS_DEBIT: 'acss_debit', AFTERPAY_CLEARPAY: 'afterpay_clearpay', ALIPAY: 'alipay', AU_BECS_DEBIT: 'au_becs_debit', BACS_DEBIT: 'bacs_debit', BANCONTACT: 'bancontact', BOLETO: 'boleto', CARD: 'card', CARD_PRESENT: 'card_present', EPS: 'eps', FPX: 'fpx', GIROPAY: 'giropay', GRABPAY: 'grabpay', IDEAL: 'ideal', INTERAC_PRESENT: 'interac_present', OXXO: 'oxxo', P24: 'p24', SEPA_DEBIT: 'sepa_debit', SOFORT: 'sofort', WECHAT_PAY: 'wechat_pay' };

export type SetupIntent2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SetupIntent2'] = ResolversParentTypes['SetupIntent2']> = ResolversObject<{
  application?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  cancellationReason?: Resolver<Maybe<ResolversTypes['CancellationReason2']>, ParentType, ContextType>;
  clientSecret?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  created?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  customer?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  lastSetupError?: Resolver<Maybe<ResolversTypes['LastSetupError']>, ParentType, ContextType>;
  latestAttempt?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  livemode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  mandate?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  metadata?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  nextAction?: Resolver<Maybe<ResolversTypes['NextAction']>, ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object46'], ParentType, ContextType>;
  onBehalfOf?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  paymentMethod?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  paymentMethodOptions?: Resolver<Maybe<ResolversTypes['PaymentMethodOptions4']>, ParentType, ContextType>;
  paymentMethodTypes?: Resolver<Array<Maybe<ResolversTypes['String']>>, ParentType, ContextType>;
  singleUseMandate?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  status?: Resolver<ResolversTypes['Status23'], ParentType, ContextType>;
  usage?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CancellationReason2Resolvers = { ABANDONED: 'abandoned', DUPLICATE: 'duplicate', REQUESTED_BY_CUSTOMER: 'requested_by_customer' };

export type LastSetupErrorResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['LastSetupError'] = ResolversParentTypes['LastSetupError']> = ResolversObject<{
  charge?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  declineCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  docUrl?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  message?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  param?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  paymentIntent?: Resolver<Maybe<ResolversTypes['PaymentIntent7']>, ParentType, ContextType>;
  paymentMethod?: Resolver<Maybe<ResolversTypes['PaymentMethod3']>, ParentType, ContextType>;
  paymentMethodType?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  setupIntent?: Resolver<Maybe<ResolversTypes['SetupIntent2']>, ParentType, ContextType>;
  source?: Resolver<Maybe<ResolversTypes['Source9']>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['Type30']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Source9Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Source9'] = ResolversParentTypes['Source9']> = ResolversObject<{
  account?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  accountHolderName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  accountHolderType?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  accountType?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  achCreditTransfer?: Resolver<Maybe<ResolversTypes['AchCreditTransfer2']>, ParentType, ContextType>;
  achDebit?: Resolver<Maybe<ResolversTypes['AchDebit2']>, ParentType, ContextType>;
  acssDebit?: Resolver<Maybe<ResolversTypes['AcssDebit4']>, ParentType, ContextType>;
  addressCity?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  addressCountry?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  addressLine1?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  addressLine1Check?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  addressLine2?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  addressState?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  addressZip?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  addressZipCheck?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  alipay?: Resolver<Maybe<ResolversTypes['Alipay2']>, ParentType, ContextType>;
  amount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  auBecsDebit?: Resolver<Maybe<ResolversTypes['AuBecsDebit2']>, ParentType, ContextType>;
  availablePayoutMethods?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  bancontact?: Resolver<Maybe<ResolversTypes['Bancontact2']>, ParentType, ContextType>;
  bankName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  brand?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  card?: Resolver<Maybe<ResolversTypes['Card6']>, ParentType, ContextType>;
  cardPresent?: Resolver<Maybe<ResolversTypes['CardPresent2']>, ParentType, ContextType>;
  clientSecret?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  codeVerification?: Resolver<Maybe<ResolversTypes['CodeVerification']>, ParentType, ContextType>;
  country?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  created?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  currency?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  customer?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  cvcCheck?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  defaultForCurrency?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  dynamicLast4?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  eps?: Resolver<Maybe<ResolversTypes['Eps2']>, ParentType, ContextType>;
  expMonth?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  expYear?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  fingerprint?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  flow?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  funding?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  giropay?: Resolver<Maybe<ResolversTypes['Giropay2']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  ideal?: Resolver<Maybe<ResolversTypes['Ideal2']>, ParentType, ContextType>;
  klarna?: Resolver<Maybe<ResolversTypes['Klarna2']>, ParentType, ContextType>;
  last4?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  livemode?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  metadata?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  multibanco?: Resolver<Maybe<ResolversTypes['Multibanco2']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  object?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  owner?: Resolver<Maybe<ResolversTypes['Owner3']>, ParentType, ContextType>;
  p24?: Resolver<Maybe<ResolversTypes['P242']>, ParentType, ContextType>;
  receiver?: Resolver<Maybe<ResolversTypes['Receiver2']>, ParentType, ContextType>;
  recipient?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  redirect?: Resolver<Maybe<ResolversTypes['Redirect']>, ParentType, ContextType>;
  routingNumber?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  sepaDebit?: Resolver<Maybe<ResolversTypes['SepaDebit2']>, ParentType, ContextType>;
  sofort?: Resolver<Maybe<ResolversTypes['Sofort2']>, ParentType, ContextType>;
  sourceOrder?: Resolver<Maybe<ResolversTypes['SourceOrder']>, ParentType, ContextType>;
  statementDescriptor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  threeDSecure?: Resolver<Maybe<ResolversTypes['ThreeDSecure4']>, ParentType, ContextType>;
  tokenizationMethod?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['Type18']>, ParentType, ContextType>;
  usage?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  wechat?: Resolver<Maybe<ResolversTypes['Wechat2']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Type30Resolvers = { API_ERROR: 'api_error', CARD_ERROR: 'card_error', IDEMPOTENCY_ERROR: 'idempotency_error', INVALID_REQUEST_ERROR: 'invalid_request_error' };

export type NextActionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['NextAction'] = ResolversParentTypes['NextAction']> = ResolversObject<{
  redirectToUrl?: Resolver<Maybe<ResolversTypes['RedirectToUrl']>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  useStripeSdk?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  verifyWithMicrodeposits?: Resolver<Maybe<ResolversTypes['VerifyWithMicrodeposits']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type RedirectToUrlResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RedirectToUrl'] = ResolversParentTypes['RedirectToUrl']> = ResolversObject<{
  returnUrl?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type VerifyWithMicrodepositsResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['VerifyWithMicrodeposits'] = ResolversParentTypes['VerifyWithMicrodeposits']> = ResolversObject<{
  arrivalDate?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  hostedVerificationUrl?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Object46Resolvers = { SETUP_INTENT: 'setup_intent' };

export type PaymentMethodOptions4Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PaymentMethodOptions4'] = ResolversParentTypes['PaymentMethodOptions4']> = ResolversObject<{
  acssDebit?: Resolver<Maybe<ResolversTypes['AcssDebit5']>, ParentType, ContextType>;
  card?: Resolver<Maybe<ResolversTypes['Card14']>, ParentType, ContextType>;
  sepaDebit?: Resolver<Maybe<ResolversTypes['SepaDebit3']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AcssDebit5Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['AcssDebit5'] = ResolversParentTypes['AcssDebit5']> = ResolversObject<{
  currency?: Resolver<Maybe<ResolversTypes['Currency43']>, ParentType, ContextType>;
  mandateOptions?: Resolver<Maybe<ResolversTypes['SetupIntentPaymentMethodOptionsMandateOptionsAcssDebit']>, ParentType, ContextType>;
  verificationMethod?: Resolver<Maybe<ResolversTypes['VerificationMethod']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Currency43Resolvers = { CAD: 'cad', USD: 'usd' };

export type SetupIntentPaymentMethodOptionsMandateOptionsAcssDebitResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SetupIntentPaymentMethodOptionsMandateOptionsAcssDebit'] = ResolversParentTypes['SetupIntentPaymentMethodOptionsMandateOptionsAcssDebit']> = ResolversObject<{
  customMandateUrl?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  intervalDescription?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  paymentSchedule?: Resolver<Maybe<ResolversTypes['PaymentSchedule']>, ParentType, ContextType>;
  transactionType?: Resolver<Maybe<ResolversTypes['TransactionType']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Card14Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Card14'] = ResolversParentTypes['Card14']> = ResolversObject<{
  requestThreeDSecure?: Resolver<Maybe<ResolversTypes['RequestThreeDSecure2']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type RequestThreeDSecure2Resolvers = { ANY: 'any', AUTOMATIC: 'automatic', CHALLENGE_ONLY: 'challenge_only' };

export type SepaDebit3Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SepaDebit3'] = ResolversParentTypes['SepaDebit3']> = ResolversObject<{
  mandateOptions?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Status23Resolvers = { CANCELED: 'canceled', PROCESSING: 'processing', REQUIRES_ACTION: 'requires_action', REQUIRES_CONFIRMATION: 'requires_confirmation', REQUIRES_PAYMENT_METHOD: 'requires_payment_method', SUCCEEDED: 'succeeded' };

export type NextAction2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['NextAction2'] = ResolversParentTypes['NextAction2']> = ResolversObject<{
  alipayHandleRedirect?: Resolver<Maybe<ResolversTypes['AlipayHandleRedirect']>, ParentType, ContextType>;
  boletoDisplayDetails?: Resolver<Maybe<ResolversTypes['BoletoDisplayDetails']>, ParentType, ContextType>;
  oxxoDisplayDetails?: Resolver<Maybe<ResolversTypes['OxxoDisplayDetails']>, ParentType, ContextType>;
  redirectToUrl?: Resolver<Maybe<ResolversTypes['RedirectToUrl2']>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  useStripeSdk?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  verifyWithMicrodeposits?: Resolver<Maybe<ResolversTypes['VerifyWithMicrodeposits2']>, ParentType, ContextType>;
  wechatPayDisplayQrCode?: Resolver<Maybe<ResolversTypes['WechatPayDisplayQrCode']>, ParentType, ContextType>;
  wechatPayRedirectToAndroidApp?: Resolver<Maybe<ResolversTypes['WechatPayRedirectToAndroidApp']>, ParentType, ContextType>;
  wechatPayRedirectToIosApp?: Resolver<Maybe<ResolversTypes['WechatPayRedirectToIosApp']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AlipayHandleRedirectResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['AlipayHandleRedirect'] = ResolversParentTypes['AlipayHandleRedirect']> = ResolversObject<{
  nativeData?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  nativeUrl?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  returnUrl?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BoletoDisplayDetailsResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['BoletoDisplayDetails'] = ResolversParentTypes['BoletoDisplayDetails']> = ResolversObject<{
  expiresAt?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  hostedVoucherUrl?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  number?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  pdf?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type OxxoDisplayDetailsResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['OxxoDisplayDetails'] = ResolversParentTypes['OxxoDisplayDetails']> = ResolversObject<{
  expiresAfter?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  hostedVoucherUrl?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  number?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type RedirectToUrl2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RedirectToUrl2'] = ResolversParentTypes['RedirectToUrl2']> = ResolversObject<{
  returnUrl?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type VerifyWithMicrodeposits2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['VerifyWithMicrodeposits2'] = ResolversParentTypes['VerifyWithMicrodeposits2']> = ResolversObject<{
  arrivalDate?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  hostedVerificationUrl?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type WechatPayDisplayQrCodeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['WechatPayDisplayQrCode'] = ResolversParentTypes['WechatPayDisplayQrCode']> = ResolversObject<{
  data?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  imageDataUrl?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type WechatPayRedirectToAndroidAppResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['WechatPayRedirectToAndroidApp'] = ResolversParentTypes['WechatPayRedirectToAndroidApp']> = ResolversObject<{
  appId?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  nonceStr?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  package?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  partnerId?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  prepayId?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  sign?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type WechatPayRedirectToIosAppResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['WechatPayRedirectToIosApp'] = ResolversParentTypes['WechatPayRedirectToIosApp']> = ResolversObject<{
  nativeUrl?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Object47Resolvers = { PAYMENT_INTENT: 'payment_intent' };

export type PaymentMethodOptions5Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PaymentMethodOptions5'] = ResolversParentTypes['PaymentMethodOptions5']> = ResolversObject<{
  acssDebit?: Resolver<Maybe<ResolversTypes['AcssDebit6']>, ParentType, ContextType>;
  afterpayClearpay?: Resolver<Maybe<ResolversTypes['AfterpayClearpay2']>, ParentType, ContextType>;
  alipay?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  bancontact?: Resolver<Maybe<ResolversTypes['Bancontact5']>, ParentType, ContextType>;
  boleto?: Resolver<Maybe<ResolversTypes['Boleto2']>, ParentType, ContextType>;
  card?: Resolver<Maybe<ResolversTypes['Card15']>, ParentType, ContextType>;
  cardPresent?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  ideal?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  oxxo?: Resolver<Maybe<ResolversTypes['Oxxo2']>, ParentType, ContextType>;
  p24?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  sepaDebit?: Resolver<Maybe<ResolversTypes['SepaDebit4']>, ParentType, ContextType>;
  sofort?: Resolver<Maybe<ResolversTypes['Sofort3']>, ParentType, ContextType>;
  wechatPay?: Resolver<Maybe<ResolversTypes['WechatPay3']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AcssDebit6Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['AcssDebit6'] = ResolversParentTypes['AcssDebit6']> = ResolversObject<{
  mandateOptions?: Resolver<Maybe<ResolversTypes['PaymentIntentPaymentMethodOptionsMandateOptionsAcssDebit']>, ParentType, ContextType>;
  verificationMethod?: Resolver<Maybe<ResolversTypes['VerificationMethod']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type PaymentIntentPaymentMethodOptionsMandateOptionsAcssDebitResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PaymentIntentPaymentMethodOptionsMandateOptionsAcssDebit'] = ResolversParentTypes['PaymentIntentPaymentMethodOptionsMandateOptionsAcssDebit']> = ResolversObject<{
  customMandateUrl?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  intervalDescription?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  paymentSchedule?: Resolver<Maybe<ResolversTypes['PaymentSchedule']>, ParentType, ContextType>;
  transactionType?: Resolver<Maybe<ResolversTypes['TransactionType']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AfterpayClearpay2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['AfterpayClearpay2'] = ResolversParentTypes['AfterpayClearpay2']> = ResolversObject<{
  reference?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Bancontact5Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Bancontact5'] = ResolversParentTypes['Bancontact5']> = ResolversObject<{
  preferredLanguage?: Resolver<ResolversTypes['PreferredLanguage5'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Card15Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Card15'] = ResolversParentTypes['Card15']> = ResolversObject<{
  installments?: Resolver<Maybe<ResolversTypes['Installments2']>, ParentType, ContextType>;
  network?: Resolver<Maybe<ResolversTypes['Network4']>, ParentType, ContextType>;
  requestThreeDSecure?: Resolver<Maybe<ResolversTypes['RequestThreeDSecure2']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Installments2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Installments2'] = ResolversParentTypes['Installments2']> = ResolversObject<{
  availablePlans?: Resolver<Maybe<Array<Maybe<ResolversTypes['PaymentMethodDetailsCardInstallmentsPlan']>>>, ParentType, ContextType>;
  enabled?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  plan?: Resolver<Maybe<ResolversTypes['Plan3']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type PaymentMethodDetailsCardInstallmentsPlanResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PaymentMethodDetailsCardInstallmentsPlan'] = ResolversParentTypes['PaymentMethodDetailsCardInstallmentsPlan']> = ResolversObject<{
  count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  interval?: Resolver<Maybe<ResolversTypes['Interval3']>, ParentType, ContextType>;
  type?: Resolver<ResolversTypes['Type8'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Plan3Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Plan3'] = ResolversParentTypes['Plan3']> = ResolversObject<{
  count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  interval?: Resolver<Maybe<ResolversTypes['Interval3']>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['Type8']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Network4Resolvers = { AMEX: 'amex', CARTES_BANCAIRES: 'cartes_bancaires', DINERS: 'diners', DISCOVER: 'discover', INTERAC: 'interac', JCB: 'jcb', MASTERCARD: 'mastercard', UNIONPAY: 'unionpay', UNKNOWN: 'unknown', VISA: 'visa' };

export type SepaDebit4Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SepaDebit4'] = ResolversParentTypes['SepaDebit4']> = ResolversObject<{
  mandateOptions?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Sofort3Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Sofort3'] = ResolversParentTypes['Sofort3']> = ResolversObject<{
  preferredLanguage?: Resolver<Maybe<ResolversTypes['PreferredLanguage6']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type PreferredLanguage6Resolvers = { DE: 'de', EN: 'en', ES: 'es', FR: 'fr', IT: 'it', NL: 'nl', PL: 'pl' };

export type WechatPay3Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['WechatPay3'] = ResolversParentTypes['WechatPay3']> = ResolversObject<{
  appId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  client?: Resolver<Maybe<ResolversTypes['Client2']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Client2Resolvers = { ANDROID: 'android', IOS: 'ios', WEB: 'web' };

export type SetupFutureUsage2Resolvers = { OFF_SESSION: 'off_session', ON_SESSION: 'on_session' };

export type Shipping9Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Shipping9'] = ResolversParentTypes['Shipping9']> = ResolversObject<{
  address?: Resolver<Maybe<ResolversTypes['Address']>, ParentType, ContextType>;
  carrier?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  phone?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  trackingNumber?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Status24Resolvers = { CANCELED: 'canceled', PROCESSING: 'processing', REQUIRES_ACTION: 'requires_action', REQUIRES_CAPTURE: 'requires_capture', REQUIRES_CONFIRMATION: 'requires_confirmation', REQUIRES_PAYMENT_METHOD: 'requires_payment_method', SUCCEEDED: 'succeeded' };

export type TransferData7Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['TransferData7'] = ResolversParentTypes['TransferData7']> = ResolversObject<{
  amount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  destination?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type InvoiceLinesListResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['InvoiceLinesList'] = ResolversParentTypes['InvoiceLinesList']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['LineItem']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type LineItemResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['LineItem'] = ResolversParentTypes['LineItem']> = ResolversObject<{
  amount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  currency?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  discountAmounts?: Resolver<Maybe<Array<Maybe<ResolversTypes['DiscountsResourceDiscountAmount']>>>, ParentType, ContextType>;
  discountable?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  discounts?: Resolver<Maybe<Array<Maybe<ResolversTypes['JSON']>>>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  invoiceItem?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  livemode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  metadata?: Resolver<ResolversTypes['JSON'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object48'], ParentType, ContextType>;
  period?: Resolver<ResolversTypes['InvoiceLineItemPeriod'], ParentType, ContextType>;
  price?: Resolver<Maybe<ResolversTypes['Price10']>, ParentType, ContextType>;
  proration?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  quantity?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  subscription?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  subscriptionItem?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  taxAmounts?: Resolver<Maybe<Array<Maybe<ResolversTypes['InvoiceTaxAmount']>>>, ParentType, ContextType>;
  taxRates?: Resolver<Maybe<Array<Maybe<ResolversTypes['TaxRate']>>>, ParentType, ContextType>;
  type?: Resolver<ResolversTypes['Type33'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Object48Resolvers = { LINE_ITEM: 'line_item' };

export type Price10Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Price10'] = ResolversParentTypes['Price10']> = ResolversObject<{
  active?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  billingScheme?: Resolver<Maybe<ResolversTypes['BillingScheme']>, ParentType, ContextType>;
  created?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  currency?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  livemode?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  lookupKey?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  metadata?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  nickname?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  object?: Resolver<Maybe<ResolversTypes['Object24']>, ParentType, ContextType>;
  product?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  recurring?: Resolver<Maybe<ResolversTypes['Recurring']>, ParentType, ContextType>;
  taxBehavior?: Resolver<Maybe<ResolversTypes['TaxBehavior']>, ParentType, ContextType>;
  tiers?: Resolver<Maybe<Array<Maybe<ResolversTypes['PriceTier']>>>, ParentType, ContextType>;
  tiersMode?: Resolver<Maybe<ResolversTypes['TiersMode']>, ParentType, ContextType>;
  transformQuantity?: Resolver<Maybe<ResolversTypes['TransformQuantity']>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['Type12']>, ParentType, ContextType>;
  unitAmount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  unitAmountDecimal?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type InvoiceTaxAmountResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['InvoiceTaxAmount'] = ResolversParentTypes['InvoiceTaxAmount']> = ResolversObject<{
  amount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  inclusive?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  taxRate?: Resolver<ResolversTypes['JSON'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Type33Resolvers = { INVOICEITEM: 'invoiceitem', SUBSCRIPTION: 'subscription' };

export type Object49Resolvers = { INVOICE: 'invoice' };

export type InvoicesPaymentSettingsResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['InvoicesPaymentSettings'] = ResolversParentTypes['InvoicesPaymentSettings']> = ResolversObject<{
  paymentMethodOptions?: Resolver<Maybe<ResolversTypes['PaymentMethodOptions6']>, ParentType, ContextType>;
  paymentMethodTypes?: Resolver<Maybe<Array<Maybe<ResolversTypes['PaymentMethodTypes7ListItem']>>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type PaymentMethodOptions6Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PaymentMethodOptions6'] = ResolversParentTypes['PaymentMethodOptions6']> = ResolversObject<{
  bancontact?: Resolver<Maybe<ResolversTypes['Bancontact6']>, ParentType, ContextType>;
  card?: Resolver<Maybe<ResolversTypes['Card16']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Bancontact6Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Bancontact6'] = ResolversParentTypes['Bancontact6']> = ResolversObject<{
  preferredLanguage?: Resolver<Maybe<ResolversTypes['PreferredLanguage5']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Card16Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Card16'] = ResolversParentTypes['Card16']> = ResolversObject<{
  requestThreeDSecure?: Resolver<Maybe<ResolversTypes['RequestThreeDSecure']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type PaymentMethodTypes7ListItemResolvers = { ACH_CREDIT_TRANSFER: 'ach_credit_transfer', ACH_DEBIT: 'ach_debit', AU_BECS_DEBIT: 'au_becs_debit', BACS_DEBIT: 'bacs_debit', BANCONTACT: 'bancontact', BOLETO: 'boleto', CARD: 'card', FPX: 'fpx', GIROPAY: 'giropay', IDEAL: 'ideal', SEPA_DEBIT: 'sepa_debit', SOFORT: 'sofort', WECHAT_PAY: 'wechat_pay' };

export type Status25Resolvers = { DELETED: 'deleted', DRAFT: 'draft', OPEN: 'open', PAID: 'paid', UNCOLLECTIBLE: 'uncollectible', VOID: 'void' };

export type InvoicesStatusTransitionsResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['InvoicesStatusTransitions'] = ResolversParentTypes['InvoicesStatusTransitions']> = ResolversObject<{
  finalizedAt?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  markedUncollectibleAt?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  paidAt?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  voidedAt?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type InvoiceThresholdReasonResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['InvoiceThresholdReason'] = ResolversParentTypes['InvoiceThresholdReason']> = ResolversObject<{
  amountGte?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  itemReasons?: Resolver<Array<Maybe<ResolversTypes['InvoiceItemThresholdReason']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type InvoiceItemThresholdReasonResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['InvoiceItemThresholdReason'] = ResolversParentTypes['InvoiceItemThresholdReason']> = ResolversObject<{
  lineItemIds?: Resolver<Array<Maybe<ResolversTypes['String']>>, ParentType, ContextType>;
  usageGte?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type TransferData8Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['TransferData8'] = ResolversParentTypes['TransferData8']> = ResolversObject<{
  amount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  destination?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CollectionMethod9Resolvers = { CHARGE_AUTOMATICALLY: 'charge_automatically', SEND_INVOICE: 'send_invoice' };

export type Status56Resolvers = { DRAFT: 'draft', OPEN: 'open', PAID: 'paid', UNCOLLECTIBLE: 'uncollectible', VOID: 'void' };

export type InvoiceLinesList2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['InvoiceLinesList2'] = ResolversParentTypes['InvoiceLinesList2']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['LineItem']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type TaxExempt4Resolvers = { _: 'undefined', EXEMPT: 'exempt', NONE: 'none', REVERSE: 'reverse' };

export type Type20Resolvers = { AE_TRN: 'ae_trn', AU_ABN: 'au_abn', BR_CNPJ: 'br_cnpj', BR_CPF: 'br_cpf', CA_BN: 'ca_bn', CA_GST_HST: 'ca_gst_hst', CA_PST_BC: 'ca_pst_bc', CA_PST_MB: 'ca_pst_mb', CA_PST_SK: 'ca_pst_sk', CA_QST: 'ca_qst', CH_VAT: 'ch_vat', CL_TIN: 'cl_tin', ES_CIF: 'es_cif', EU_VAT: 'eu_vat', GB_VAT: 'gb_vat', HK_BR: 'hk_br', ID_NPWP: 'id_npwp', IL_VAT: 'il_vat', IN_GST: 'in_gst', JP_CN: 'jp_cn', JP_RN: 'jp_rn', KR_BRN: 'kr_brn', LI_UID: 'li_uid', MX_RFC: 'mx_rfc', MY_FRP: 'my_frp', MY_ITN: 'my_itn', MY_SST: 'my_sst', NO_VAT: 'no_vat', NZ_GST: 'nz_gst', RU_INN: 'ru_inn', RU_KPP: 'ru_kpp', SA_VAT: 'sa_vat', SG_GST: 'sg_gst', SG_UEN: 'sg_uen', TH_VAT: 'th_vat', TW_VAT: 'tw_vat', US_EIN: 'us_ein', ZA_VAT: 'za_vat' };

export type TaxBehavior2Resolvers = { EXCLUSIVE: 'exclusive', INCLUSIVE: 'inclusive', UNSPECIFIED: 'unspecified' };

export type Interval5Resolvers = { DAY: 'day', MONTH: 'month', WEEK: 'week', YEAR: 'year' };

export type SubscriptionProrationBehaviorResolvers = { ALWAYS_INVOICE: 'always_invoice', CREATE_PRORATIONS: 'create_prorations', NONE: 'none' };

export type RadarIssuerFraudRecordListResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RadarIssuerFraudRecordList'] = ResolversParentTypes['RadarIssuerFraudRecordList']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['IssuerFraudRecord']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type IssuerFraudRecordResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['IssuerFraudRecord'] = ResolversParentTypes['IssuerFraudRecord']> = ResolversObject<{
  actionable?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  charge?: Resolver<ResolversTypes['JSON'], ParentType, ContextType>;
  created?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  fraudType?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  hasLiabilityShift?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  livemode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object50'], ParentType, ContextType>;
  postDate?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Object50Resolvers = { ISSUER_FRAUD_RECORD: 'issuer_fraud_record' };

export type V1IssuingAuthorizations2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['V1IssuingAuthorizations2'] = ResolversParentTypes['V1IssuingAuthorizations2']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['IssuingAuthorization']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type IssuingAuthorizationResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['IssuingAuthorization'] = ResolversParentTypes['IssuingAuthorization']> = ResolversObject<{
  amount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  amountDetails?: Resolver<Maybe<ResolversTypes['AmountDetails']>, ParentType, ContextType>;
  approved?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  authorizationMethod?: Resolver<ResolversTypes['AuthorizationMethod'], ParentType, ContextType>;
  balanceTransactions?: Resolver<Array<Maybe<ResolversTypes['BalanceTransaction3']>>, ParentType, ContextType>;
  card?: Resolver<ResolversTypes['IssuingCard2'], ParentType, ContextType>;
  cardholder?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  created?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  currency?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  livemode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  merchantAmount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  merchantCurrency?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  merchantData?: Resolver<ResolversTypes['IssuingAuthorizationMerchantData'], ParentType, ContextType>;
  metadata?: Resolver<ResolversTypes['JSON'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object53'], ParentType, ContextType>;
  pendingRequest?: Resolver<Maybe<ResolversTypes['PendingRequest']>, ParentType, ContextType>;
  requestHistory?: Resolver<Array<Maybe<ResolversTypes['IssuingAuthorizationRequest']>>, ParentType, ContextType>;
  status?: Resolver<ResolversTypes['Status29'], ParentType, ContextType>;
  transactions?: Resolver<Array<Maybe<ResolversTypes['IssuingTransaction']>>, ParentType, ContextType>;
  verificationData?: Resolver<ResolversTypes['IssuingAuthorizationVerificationData'], ParentType, ContextType>;
  wallet?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AmountDetailsResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['AmountDetails'] = ResolversParentTypes['AmountDetails']> = ResolversObject<{
  atmFee?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AuthorizationMethodResolvers = { CHIP: 'chip', CONTACTLESS: 'contactless', KEYED_IN: 'keyed_in', ONLINE: 'online', SWIPE: 'swipe' };

export type IssuingCard2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['IssuingCard2'] = ResolversParentTypes['IssuingCard2']> = ResolversObject<{
  brand?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  cancellationReason?: Resolver<Maybe<ResolversTypes['CancellationReason3']>, ParentType, ContextType>;
  cardholder?: Resolver<ResolversTypes['IssuingCardholder'], ParentType, ContextType>;
  created?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  currency?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  cvc?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  expMonth?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  expYear?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  last4?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  livemode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  metadata?: Resolver<ResolversTypes['JSON'], ParentType, ContextType>;
  number?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object52'], ParentType, ContextType>;
  replacedBy?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  replacementFor?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  replacementReason?: Resolver<Maybe<ResolversTypes['ReplacementReason']>, ParentType, ContextType>;
  shipping?: Resolver<Maybe<ResolversTypes['Shipping10']>, ParentType, ContextType>;
  spendingControls?: Resolver<ResolversTypes['IssuingCardAuthorizationControls'], ParentType, ContextType>;
  status?: Resolver<ResolversTypes['Status28'], ParentType, ContextType>;
  type?: Resolver<ResolversTypes['Type36'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CancellationReason3Resolvers = { LOST: 'lost', STOLEN: 'stolen' };

export type IssuingCardholderResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['IssuingCardholder'] = ResolversParentTypes['IssuingCardholder']> = ResolversObject<{
  billing?: Resolver<ResolversTypes['IssuingCardholderAddress'], ParentType, ContextType>;
  company?: Resolver<Maybe<ResolversTypes['Company3']>, ParentType, ContextType>;
  created?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  email?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  individual?: Resolver<Maybe<ResolversTypes['Individual3']>, ParentType, ContextType>;
  livemode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  metadata?: Resolver<ResolversTypes['JSON'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object51'], ParentType, ContextType>;
  phoneNumber?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  requirements?: Resolver<ResolversTypes['IssuingCardholderRequirements'], ParentType, ContextType>;
  spendingControls?: Resolver<Maybe<ResolversTypes['SpendingControls']>, ParentType, ContextType>;
  status?: Resolver<ResolversTypes['Status26'], ParentType, ContextType>;
  type?: Resolver<ResolversTypes['Type34'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type IssuingCardholderAddressResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['IssuingCardholderAddress'] = ResolversParentTypes['IssuingCardholderAddress']> = ResolversObject<{
  address?: Resolver<ResolversTypes['Address'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Company3Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Company3'] = ResolversParentTypes['Company3']> = ResolversObject<{
  taxIdProvided?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Individual3Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Individual3'] = ResolversParentTypes['Individual3']> = ResolversObject<{
  dob?: Resolver<Maybe<ResolversTypes['Dob11']>, ParentType, ContextType>;
  firstName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  lastName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  verification?: Resolver<Maybe<ResolversTypes['Verification4']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Dob11Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Dob11'] = ResolversParentTypes['Dob11']> = ResolversObject<{
  day?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  month?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  year?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Verification4Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Verification4'] = ResolversParentTypes['Verification4']> = ResolversObject<{
  document?: Resolver<Maybe<ResolversTypes['Document5']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Document5Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Document5'] = ResolversParentTypes['Document5']> = ResolversObject<{
  back?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  front?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Object51Resolvers = { ISSUING_CARDHOLDER: 'issuing.cardholder' };

export type IssuingCardholderRequirementsResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['IssuingCardholderRequirements'] = ResolversParentTypes['IssuingCardholderRequirements']> = ResolversObject<{
  disabledReason?: Resolver<Maybe<ResolversTypes['DisabledReason4']>, ParentType, ContextType>;
  pastDue?: Resolver<Maybe<Array<Maybe<ResolversTypes['PastDue5ListItem']>>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type DisabledReason4Resolvers = { LISTED: 'listed', REJECTED_LISTED: 'rejected.listed', UNDER_REVIEW: 'under_review' };

export type PastDue5ListItemResolvers = { COMPANY_TAX_ID: 'company.tax_id', INDIVIDUAL_DOB_DAY: 'individual.dob.day', INDIVIDUAL_DOB_MONTH: 'individual.dob.month', INDIVIDUAL_DOB_YEAR: 'individual.dob.year', INDIVIDUAL_FIRST_NAME: 'individual.first_name', INDIVIDUAL_LAST_NAME: 'individual.last_name', INDIVIDUAL_VERIFICATION_DOCUMENT: 'individual.verification.document' };

export type SpendingControlsResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SpendingControls'] = ResolversParentTypes['SpendingControls']> = ResolversObject<{
  allowedCategories?: Resolver<Maybe<Array<Maybe<ResolversTypes['AllowedCategoriesListItem']>>>, ParentType, ContextType>;
  blockedCategories?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlockedCategoriesListItem']>>>, ParentType, ContextType>;
  spendingLimits?: Resolver<Maybe<Array<Maybe<ResolversTypes['IssuingCardholderSpendingLimit']>>>, ParentType, ContextType>;
  spendingLimitsCurrency?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AllowedCategoriesListItemResolvers = { AC_REFRIGERATION_REPAIR: 'ac_refrigeration_repair', ACCOUNTING_BOOKKEEPING_SERVICES: 'accounting_bookkeeping_services', ADVERTISING_SERVICES: 'advertising_services', AGRICULTURAL_COOPERATIVE: 'agricultural_cooperative', AIRLINES_AIR_CARRIERS: 'airlines_air_carriers', AIRPORTS_FLYING_FIELDS: 'airports_flying_fields', AMBULANCE_SERVICES: 'ambulance_services', AMUSEMENT_PARKS_CARNIVALS: 'amusement_parks_carnivals', ANTIQUE_REPRODUCTIONS: 'antique_reproductions', ANTIQUE_SHOPS: 'antique_shops', AQUARIUMS: 'aquariums', ARCHITECTURAL_SURVEYING_SERVICES: 'architectural_surveying_services', ART_DEALERS_AND_GALLERIES: 'art_dealers_and_galleries', ARTISTS_SUPPLY_AND_CRAFT_SHOPS: 'artists_supply_and_craft_shops', AUTO_AND_HOME_SUPPLY_STORES: 'auto_and_home_supply_stores', AUTO_BODY_REPAIR_SHOPS: 'auto_body_repair_shops', AUTO_PAINT_SHOPS: 'auto_paint_shops', AUTO_SERVICE_SHOPS: 'auto_service_shops', AUTOMATED_CASH_DISBURSE: 'automated_cash_disburse', AUTOMATED_FUEL_DISPENSERS: 'automated_fuel_dispensers', AUTOMOBILE_ASSOCIATIONS: 'automobile_associations', AUTOMOTIVE_PARTS_AND_ACCESSORIES_STORES: 'automotive_parts_and_accessories_stores', AUTOMOTIVE_TIRE_STORES: 'automotive_tire_stores', BAIL_AND_BOND_PAYMENTS: 'bail_and_bond_payments', BAKERIES: 'bakeries', BANDS_ORCHESTRAS: 'bands_orchestras', BARBER_AND_BEAUTY_SHOPS: 'barber_and_beauty_shops', BETTING_CASINO_GAMBLING: 'betting_casino_gambling', BICYCLE_SHOPS: 'bicycle_shops', BILLIARD_POOL_ESTABLISHMENTS: 'billiard_pool_establishments', BOAT_DEALERS: 'boat_dealers', BOAT_RENTALS_AND_LEASES: 'boat_rentals_and_leases', BOOK_STORES: 'book_stores', BOOKS_PERIODICALS_AND_NEWSPAPERS: 'books_periodicals_and_newspapers', BOWLING_ALLEYS: 'bowling_alleys', BUS_LINES: 'bus_lines', BUSINESS_SECRETARIAL_SCHOOLS: 'business_secretarial_schools', BUYING_SHOPPING_SERVICES: 'buying_shopping_services', CABLE_SATELLITE_AND_OTHER_PAY_TELEVISION_AND_RADIO: 'cable_satellite_and_other_pay_television_and_radio', CAMERA_AND_PHOTOGRAPHIC_SUPPLY_STORES: 'camera_and_photographic_supply_stores', CANDY_NUT_AND_CONFECTIONERY_STORES: 'candy_nut_and_confectionery_stores', CAR_AND_TRUCK_DEALERS_NEW_USED: 'car_and_truck_dealers_new_used', CAR_AND_TRUCK_DEALERS_USED_ONLY: 'car_and_truck_dealers_used_only', CAR_RENTAL_AGENCIES: 'car_rental_agencies', CAR_WASHES: 'car_washes', CARPENTRY_SERVICES: 'carpentry_services', CARPET_UPHOLSTERY_CLEANING: 'carpet_upholstery_cleaning', CATERERS: 'caterers', CHARITABLE_AND_SOCIAL_SERVICE_ORGANIZATIONS_FUNDRAISING: 'charitable_and_social_service_organizations_fundraising', CHEMICALS_AND_ALLIED_PRODUCTS: 'chemicals_and_allied_products', CHILD_CARE_SERVICES: 'child_care_services', CHILDRENS_AND_INFANTS_WEAR_STORES: 'childrens_and_infants_wear_stores', CHIROPODISTS_PODIATRISTS: 'chiropodists_podiatrists', CHIROPRACTORS: 'chiropractors', CIGAR_STORES_AND_STANDS: 'cigar_stores_and_stands', CIVIC_SOCIAL_FRATERNAL_ASSOCIATIONS: 'civic_social_fraternal_associations', CLEANING_AND_MAINTENANCE: 'cleaning_and_maintenance', CLOTHING_RENTAL: 'clothing_rental', COLLEGES_UNIVERSITIES: 'colleges_universities', COMMERCIAL_EQUIPMENT: 'commercial_equipment', COMMERCIAL_FOOTWEAR: 'commercial_footwear', COMMERCIAL_PHOTOGRAPHY_ART_AND_GRAPHICS: 'commercial_photography_art_and_graphics', COMMUTER_TRANSPORT_AND_FERRIES: 'commuter_transport_and_ferries', COMPUTER_NETWORK_SERVICES: 'computer_network_services', COMPUTER_PROGRAMMING: 'computer_programming', COMPUTER_REPAIR: 'computer_repair', COMPUTER_SOFTWARE_STORES: 'computer_software_stores', COMPUTERS_PERIPHERALS_AND_SOFTWARE: 'computers_peripherals_and_software', CONCRETE_WORK_SERVICES: 'concrete_work_services', CONSTRUCTION_MATERIALS: 'construction_materials', CONSULTING_PUBLIC_RELATIONS: 'consulting_public_relations', CORRESPONDENCE_SCHOOLS: 'correspondence_schools', COSMETIC_STORES: 'cosmetic_stores', COUNSELING_SERVICES: 'counseling_services', COUNTRY_CLUBS: 'country_clubs', COURIER_SERVICES: 'courier_services', COURT_COSTS: 'court_costs', CREDIT_REPORTING_AGENCIES: 'credit_reporting_agencies', CRUISE_LINES: 'cruise_lines', DAIRY_PRODUCTS_STORES: 'dairy_products_stores', DANCE_HALL_STUDIOS_SCHOOLS: 'dance_hall_studios_schools', DATING_ESCORT_SERVICES: 'dating_escort_services', DENTISTS_ORTHODONTISTS: 'dentists_orthodontists', DEPARTMENT_STORES: 'department_stores', DETECTIVE_AGENCIES: 'detective_agencies', DIGITAL_GOODS_APPLICATIONS: 'digital_goods_applications', DIGITAL_GOODS_GAMES: 'digital_goods_games', DIGITAL_GOODS_LARGE_VOLUME: 'digital_goods_large_volume', DIGITAL_GOODS_MEDIA: 'digital_goods_media', DIRECT_MARKETING_CATALOG_MERCHANT: 'direct_marketing_catalog_merchant', DIRECT_MARKETING_COMBINATION_CATALOG_AND_RETAIL_MERCHANT: 'direct_marketing_combination_catalog_and_retail_merchant', DIRECT_MARKETING_INBOUND_TELEMARKETING: 'direct_marketing_inbound_telemarketing', DIRECT_MARKETING_INSURANCE_SERVICES: 'direct_marketing_insurance_services', DIRECT_MARKETING_OTHER: 'direct_marketing_other', DIRECT_MARKETING_OUTBOUND_TELEMARKETING: 'direct_marketing_outbound_telemarketing', DIRECT_MARKETING_SUBSCRIPTION: 'direct_marketing_subscription', DIRECT_MARKETING_TRAVEL: 'direct_marketing_travel', DISCOUNT_STORES: 'discount_stores', DOCTORS: 'doctors', DOOR_TO_DOOR_SALES: 'door_to_door_sales', DRAPERY_WINDOW_COVERING_AND_UPHOLSTERY_STORES: 'drapery_window_covering_and_upholstery_stores', DRINKING_PLACES: 'drinking_places', DRUG_STORES_AND_PHARMACIES: 'drug_stores_and_pharmacies', DRUGS_DRUG_PROPRIETARIES_AND_DRUGGIST_SUNDRIES: 'drugs_drug_proprietaries_and_druggist_sundries', DRY_CLEANERS: 'dry_cleaners', DURABLE_GOODS: 'durable_goods', DUTY_FREE_STORES: 'duty_free_stores', EATING_PLACES_RESTAURANTS: 'eating_places_restaurants', EDUCATIONAL_SERVICES: 'educational_services', ELECTRIC_RAZOR_STORES: 'electric_razor_stores', ELECTRICAL_PARTS_AND_EQUIPMENT: 'electrical_parts_and_equipment', ELECTRICAL_SERVICES: 'electrical_services', ELECTRONICS_REPAIR_SHOPS: 'electronics_repair_shops', ELECTRONICS_STORES: 'electronics_stores', ELEMENTARY_SECONDARY_SCHOOLS: 'elementary_secondary_schools', EMPLOYMENT_TEMP_AGENCIES: 'employment_temp_agencies', EQUIPMENT_RENTAL: 'equipment_rental', EXTERMINATING_SERVICES: 'exterminating_services', FAMILY_CLOTHING_STORES: 'family_clothing_stores', FAST_FOOD_RESTAURANTS: 'fast_food_restaurants', FINANCIAL_INSTITUTIONS: 'financial_institutions', FINES_GOVERNMENT_ADMINISTRATIVE_ENTITIES: 'fines_government_administrative_entities', FIREPLACE_FIREPLACE_SCREENS_AND_ACCESSORIES_STORES: 'fireplace_fireplace_screens_and_accessories_stores', FLOOR_COVERING_STORES: 'floor_covering_stores', FLORISTS: 'florists', FLORISTS_SUPPLIES_NURSERY_STOCK_AND_FLOWERS: 'florists_supplies_nursery_stock_and_flowers', FREEZER_AND_LOCKER_MEAT_PROVISIONERS: 'freezer_and_locker_meat_provisioners', FUEL_DEALERS_NON_AUTOMOTIVE: 'fuel_dealers_non_automotive', FUNERAL_SERVICES_CREMATORIES: 'funeral_services_crematories', FURNITURE_HOME_FURNISHINGS_AND_EQUIPMENT_STORES_EXCEPT_APPLIANCES: 'furniture_home_furnishings_and_equipment_stores_except_appliances', FURNITURE_REPAIR_REFINISHING: 'furniture_repair_refinishing', FURRIERS_AND_FUR_SHOPS: 'furriers_and_fur_shops', GENERAL_SERVICES: 'general_services', GIFT_CARD_NOVELTY_AND_SOUVENIR_SHOPS: 'gift_card_novelty_and_souvenir_shops', GLASS_PAINT_AND_WALLPAPER_STORES: 'glass_paint_and_wallpaper_stores', GLASSWARE_CRYSTAL_STORES: 'glassware_crystal_stores', GOLF_COURSES_PUBLIC: 'golf_courses_public', GOVERNMENT_SERVICES: 'government_services', GROCERY_STORES_SUPERMARKETS: 'grocery_stores_supermarkets', HARDWARE_EQUIPMENT_AND_SUPPLIES: 'hardware_equipment_and_supplies', HARDWARE_STORES: 'hardware_stores', HEALTH_AND_BEAUTY_SPAS: 'health_and_beauty_spas', HEARING_AIDS_SALES_AND_SUPPLIES: 'hearing_aids_sales_and_supplies', HEATING_PLUMBING_A_C: 'heating_plumbing_a_c', HOBBY_TOY_AND_GAME_SHOPS: 'hobby_toy_and_game_shops', HOME_SUPPLY_WAREHOUSE_STORES: 'home_supply_warehouse_stores', HOSPITALS: 'hospitals', HOTELS_MOTELS_AND_RESORTS: 'hotels_motels_and_resorts', HOUSEHOLD_APPLIANCE_STORES: 'household_appliance_stores', INDUSTRIAL_SUPPLIES: 'industrial_supplies', INFORMATION_RETRIEVAL_SERVICES: 'information_retrieval_services', INSURANCE_DEFAULT: 'insurance_default', INSURANCE_UNDERWRITING_PREMIUMS: 'insurance_underwriting_premiums', INTRA_COMPANY_PURCHASES: 'intra_company_purchases', JEWELRY_STORES_WATCHES_CLOCKS_AND_SILVERWARE_STORES: 'jewelry_stores_watches_clocks_and_silverware_stores', LANDSCAPING_SERVICES: 'landscaping_services', LAUNDRIES: 'laundries', LAUNDRY_CLEANING_SERVICES: 'laundry_cleaning_services', LEGAL_SERVICES_ATTORNEYS: 'legal_services_attorneys', LUGGAGE_AND_LEATHER_GOODS_STORES: 'luggage_and_leather_goods_stores', LUMBER_BUILDING_MATERIALS_STORES: 'lumber_building_materials_stores', MANUAL_CASH_DISBURSE: 'manual_cash_disburse', MARINAS_SERVICE_AND_SUPPLIES: 'marinas_service_and_supplies', MASONRY_STONEWORK_AND_PLASTER: 'masonry_stonework_and_plaster', MASSAGE_PARLORS: 'massage_parlors', MEDICAL_AND_DENTAL_LABS: 'medical_and_dental_labs', MEDICAL_DENTAL_OPHTHALMIC_AND_HOSPITAL_EQUIPMENT_AND_SUPPLIES: 'medical_dental_ophthalmic_and_hospital_equipment_and_supplies', MEDICAL_SERVICES: 'medical_services', MEMBERSHIP_ORGANIZATIONS: 'membership_organizations', MENS_AND_BOYS_CLOTHING_AND_ACCESSORIES_STORES: 'mens_and_boys_clothing_and_accessories_stores', MENS_WOMENS_CLOTHING_STORES: 'mens_womens_clothing_stores', METAL_SERVICE_CENTERS: 'metal_service_centers', MISCELLANEOUS: 'miscellaneous', MISCELLANEOUS_APPAREL_AND_ACCESSORY_SHOPS: 'miscellaneous_apparel_and_accessory_shops', MISCELLANEOUS_AUTO_DEALERS: 'miscellaneous_auto_dealers', MISCELLANEOUS_BUSINESS_SERVICES: 'miscellaneous_business_services', MISCELLANEOUS_FOOD_STORES: 'miscellaneous_food_stores', MISCELLANEOUS_GENERAL_MERCHANDISE: 'miscellaneous_general_merchandise', MISCELLANEOUS_GENERAL_SERVICES: 'miscellaneous_general_services', MISCELLANEOUS_HOME_FURNISHING_SPECIALTY_STORES: 'miscellaneous_home_furnishing_specialty_stores', MISCELLANEOUS_PUBLISHING_AND_PRINTING: 'miscellaneous_publishing_and_printing', MISCELLANEOUS_RECREATION_SERVICES: 'miscellaneous_recreation_services', MISCELLANEOUS_REPAIR_SHOPS: 'miscellaneous_repair_shops', MISCELLANEOUS_SPECIALTY_RETAIL: 'miscellaneous_specialty_retail', MOBILE_HOME_DEALERS: 'mobile_home_dealers', MOTION_PICTURE_THEATERS: 'motion_picture_theaters', MOTOR_FREIGHT_CARRIERS_AND_TRUCKING: 'motor_freight_carriers_and_trucking', MOTOR_HOMES_DEALERS: 'motor_homes_dealers', MOTOR_VEHICLE_SUPPLIES_AND_NEW_PARTS: 'motor_vehicle_supplies_and_new_parts', MOTORCYCLE_SHOPS_AND_DEALERS: 'motorcycle_shops_and_dealers', MOTORCYCLE_SHOPS_DEALERS: 'motorcycle_shops_dealers', MUSIC_STORES_MUSICAL_INSTRUMENTS_PIANOS_AND_SHEET_MUSIC: 'music_stores_musical_instruments_pianos_and_sheet_music', NEWS_DEALERS_AND_NEWSSTANDS: 'news_dealers_and_newsstands', NON_FI_MONEY_ORDERS: 'non_fi_money_orders', NON_FI_STORED_VALUE_CARD_PURCHASE_LOAD: 'non_fi_stored_value_card_purchase_load', NONDURABLE_GOODS: 'nondurable_goods', NURSERIES_LAWN_AND_GARDEN_SUPPLY_STORES: 'nurseries_lawn_and_garden_supply_stores', NURSING_PERSONAL_CARE: 'nursing_personal_care', OFFICE_AND_COMMERCIAL_FURNITURE: 'office_and_commercial_furniture', OPTICIANS_EYEGLASSES: 'opticians_eyeglasses', OPTOMETRISTS_OPHTHALMOLOGIST: 'optometrists_ophthalmologist', ORTHOPEDIC_GOODS_PROSTHETIC_DEVICES: 'orthopedic_goods_prosthetic_devices', OSTEOPATHS: 'osteopaths', PACKAGE_STORES_BEER_WINE_AND_LIQUOR: 'package_stores_beer_wine_and_liquor', PAINTS_VARNISHES_AND_SUPPLIES: 'paints_varnishes_and_supplies', PARKING_LOTS_GARAGES: 'parking_lots_garages', PASSENGER_RAILWAYS: 'passenger_railways', PAWN_SHOPS: 'pawn_shops', PET_SHOPS_PET_FOOD_AND_SUPPLIES: 'pet_shops_pet_food_and_supplies', PETROLEUM_AND_PETROLEUM_PRODUCTS: 'petroleum_and_petroleum_products', PHOTO_DEVELOPING: 'photo_developing', PHOTOGRAPHIC_PHOTOCOPY_MICROFILM_EQUIPMENT_AND_SUPPLIES: 'photographic_photocopy_microfilm_equipment_and_supplies', PHOTOGRAPHIC_STUDIOS: 'photographic_studios', PICTURE_VIDEO_PRODUCTION: 'picture_video_production', PIECE_GOODS_NOTIONS_AND_OTHER_DRY_GOODS: 'piece_goods_notions_and_other_dry_goods', PLUMBING_HEATING_EQUIPMENT_AND_SUPPLIES: 'plumbing_heating_equipment_and_supplies', POLITICAL_ORGANIZATIONS: 'political_organizations', POSTAL_SERVICES_GOVERNMENT_ONLY: 'postal_services_government_only', PRECIOUS_STONES_AND_METALS_WATCHES_AND_JEWELRY: 'precious_stones_and_metals_watches_and_jewelry', PROFESSIONAL_SERVICES: 'professional_services', PUBLIC_WAREHOUSING_AND_STORAGE: 'public_warehousing_and_storage', QUICK_COPY_REPRO_AND_BLUEPRINT: 'quick_copy_repro_and_blueprint', RAILROADS: 'railroads', REAL_ESTATE_AGENTS_AND_MANAGERS_RENTALS: 'real_estate_agents_and_managers_rentals', RECORD_STORES: 'record_stores', RECREATIONAL_VEHICLE_RENTALS: 'recreational_vehicle_rentals', RELIGIOUS_GOODS_STORES: 'religious_goods_stores', RELIGIOUS_ORGANIZATIONS: 'religious_organizations', ROOFING_SIDING_SHEET_METAL: 'roofing_siding_sheet_metal', SECRETARIAL_SUPPORT_SERVICES: 'secretarial_support_services', SECURITY_BROKERS_DEALERS: 'security_brokers_dealers', SERVICE_STATIONS: 'service_stations', SEWING_NEEDLEWORK_FABRIC_AND_PIECE_GOODS_STORES: 'sewing_needlework_fabric_and_piece_goods_stores', SHOE_REPAIR_HAT_CLEANING: 'shoe_repair_hat_cleaning', SHOE_STORES: 'shoe_stores', SMALL_APPLIANCE_REPAIR: 'small_appliance_repair', SNOWMOBILE_DEALERS: 'snowmobile_dealers', SPECIAL_TRADE_SERVICES: 'special_trade_services', SPECIALTY_CLEANING: 'specialty_cleaning', SPORTING_GOODS_STORES: 'sporting_goods_stores', SPORTING_RECREATION_CAMPS: 'sporting_recreation_camps', SPORTS_AND_RIDING_APPAREL_STORES: 'sports_and_riding_apparel_stores', SPORTS_CLUBS_FIELDS: 'sports_clubs_fields', STAMP_AND_COIN_STORES: 'stamp_and_coin_stores', STATIONARY_OFFICE_SUPPLIES_PRINTING_AND_WRITING_PAPER: 'stationary_office_supplies_printing_and_writing_paper', STATIONERY_STORES_OFFICE_AND_SCHOOL_SUPPLY_STORES: 'stationery_stores_office_and_school_supply_stores', SWIMMING_POOLS_SALES: 'swimming_pools_sales', T_UI_TRAVEL_GERMANY: 't_ui_travel_germany', TAILORS_ALTERATIONS: 'tailors_alterations', TAX_PAYMENTS_GOVERNMENT_AGENCIES: 'tax_payments_government_agencies', TAX_PREPARATION_SERVICES: 'tax_preparation_services', TAXICABS_LIMOUSINES: 'taxicabs_limousines', TELECOMMUNICATION_EQUIPMENT_AND_TELEPHONE_SALES: 'telecommunication_equipment_and_telephone_sales', TELECOMMUNICATION_SERVICES: 'telecommunication_services', TELEGRAPH_SERVICES: 'telegraph_services', TENT_AND_AWNING_SHOPS: 'tent_and_awning_shops', TESTING_LABORATORIES: 'testing_laboratories', THEATRICAL_TICKET_AGENCIES: 'theatrical_ticket_agencies', TIMESHARES: 'timeshares', TIRE_RETREADING_AND_REPAIR: 'tire_retreading_and_repair', TOLLS_BRIDGE_FEES: 'tolls_bridge_fees', TOURIST_ATTRACTIONS_AND_EXHIBITS: 'tourist_attractions_and_exhibits', TOWING_SERVICES: 'towing_services', TRAILER_PARKS_CAMPGROUNDS: 'trailer_parks_campgrounds', TRANSPORTATION_SERVICES: 'transportation_services', TRAVEL_AGENCIES_TOUR_OPERATORS: 'travel_agencies_tour_operators', TRUCK_STOP_ITERATION: 'truck_stop_iteration', TRUCK_UTILITY_TRAILER_RENTALS: 'truck_utility_trailer_rentals', TYPESETTING_PLATE_MAKING_AND_RELATED_SERVICES: 'typesetting_plate_making_and_related_services', TYPEWRITER_STORES: 'typewriter_stores', U_S_FEDERAL_GOVERNMENT_AGENCIES_OR_DEPARTMENTS: 'u_s_federal_government_agencies_or_departments', UNIFORMS_COMMERCIAL_CLOTHING: 'uniforms_commercial_clothing', USED_MERCHANDISE_AND_SECONDHAND_STORES: 'used_merchandise_and_secondhand_stores', UTILITIES: 'utilities', VARIETY_STORES: 'variety_stores', VETERINARY_SERVICES: 'veterinary_services', VIDEO_AMUSEMENT_GAME_SUPPLIES: 'video_amusement_game_supplies', VIDEO_GAME_ARCADES: 'video_game_arcades', VIDEO_TAPE_RENTAL_STORES: 'video_tape_rental_stores', VOCATIONAL_TRADE_SCHOOLS: 'vocational_trade_schools', WATCH_JEWELRY_REPAIR: 'watch_jewelry_repair', WELDING_REPAIR: 'welding_repair', WHOLESALE_CLUBS: 'wholesale_clubs', WIG_AND_TOUPEE_STORES: 'wig_and_toupee_stores', WIRES_MONEY_ORDERS: 'wires_money_orders', WOMENS_ACCESSORY_AND_SPECIALTY_SHOPS: 'womens_accessory_and_specialty_shops', WOMENS_READY_TO_WEAR_STORES: 'womens_ready_to_wear_stores', WRECKING_AND_SALVAGE_YARDS: 'wrecking_and_salvage_yards' };

export type BlockedCategoriesListItemResolvers = { AC_REFRIGERATION_REPAIR: 'ac_refrigeration_repair', ACCOUNTING_BOOKKEEPING_SERVICES: 'accounting_bookkeeping_services', ADVERTISING_SERVICES: 'advertising_services', AGRICULTURAL_COOPERATIVE: 'agricultural_cooperative', AIRLINES_AIR_CARRIERS: 'airlines_air_carriers', AIRPORTS_FLYING_FIELDS: 'airports_flying_fields', AMBULANCE_SERVICES: 'ambulance_services', AMUSEMENT_PARKS_CARNIVALS: 'amusement_parks_carnivals', ANTIQUE_REPRODUCTIONS: 'antique_reproductions', ANTIQUE_SHOPS: 'antique_shops', AQUARIUMS: 'aquariums', ARCHITECTURAL_SURVEYING_SERVICES: 'architectural_surveying_services', ART_DEALERS_AND_GALLERIES: 'art_dealers_and_galleries', ARTISTS_SUPPLY_AND_CRAFT_SHOPS: 'artists_supply_and_craft_shops', AUTO_AND_HOME_SUPPLY_STORES: 'auto_and_home_supply_stores', AUTO_BODY_REPAIR_SHOPS: 'auto_body_repair_shops', AUTO_PAINT_SHOPS: 'auto_paint_shops', AUTO_SERVICE_SHOPS: 'auto_service_shops', AUTOMATED_CASH_DISBURSE: 'automated_cash_disburse', AUTOMATED_FUEL_DISPENSERS: 'automated_fuel_dispensers', AUTOMOBILE_ASSOCIATIONS: 'automobile_associations', AUTOMOTIVE_PARTS_AND_ACCESSORIES_STORES: 'automotive_parts_and_accessories_stores', AUTOMOTIVE_TIRE_STORES: 'automotive_tire_stores', BAIL_AND_BOND_PAYMENTS: 'bail_and_bond_payments', BAKERIES: 'bakeries', BANDS_ORCHESTRAS: 'bands_orchestras', BARBER_AND_BEAUTY_SHOPS: 'barber_and_beauty_shops', BETTING_CASINO_GAMBLING: 'betting_casino_gambling', BICYCLE_SHOPS: 'bicycle_shops', BILLIARD_POOL_ESTABLISHMENTS: 'billiard_pool_establishments', BOAT_DEALERS: 'boat_dealers', BOAT_RENTALS_AND_LEASES: 'boat_rentals_and_leases', BOOK_STORES: 'book_stores', BOOKS_PERIODICALS_AND_NEWSPAPERS: 'books_periodicals_and_newspapers', BOWLING_ALLEYS: 'bowling_alleys', BUS_LINES: 'bus_lines', BUSINESS_SECRETARIAL_SCHOOLS: 'business_secretarial_schools', BUYING_SHOPPING_SERVICES: 'buying_shopping_services', CABLE_SATELLITE_AND_OTHER_PAY_TELEVISION_AND_RADIO: 'cable_satellite_and_other_pay_television_and_radio', CAMERA_AND_PHOTOGRAPHIC_SUPPLY_STORES: 'camera_and_photographic_supply_stores', CANDY_NUT_AND_CONFECTIONERY_STORES: 'candy_nut_and_confectionery_stores', CAR_AND_TRUCK_DEALERS_NEW_USED: 'car_and_truck_dealers_new_used', CAR_AND_TRUCK_DEALERS_USED_ONLY: 'car_and_truck_dealers_used_only', CAR_RENTAL_AGENCIES: 'car_rental_agencies', CAR_WASHES: 'car_washes', CARPENTRY_SERVICES: 'carpentry_services', CARPET_UPHOLSTERY_CLEANING: 'carpet_upholstery_cleaning', CATERERS: 'caterers', CHARITABLE_AND_SOCIAL_SERVICE_ORGANIZATIONS_FUNDRAISING: 'charitable_and_social_service_organizations_fundraising', CHEMICALS_AND_ALLIED_PRODUCTS: 'chemicals_and_allied_products', CHILD_CARE_SERVICES: 'child_care_services', CHILDRENS_AND_INFANTS_WEAR_STORES: 'childrens_and_infants_wear_stores', CHIROPODISTS_PODIATRISTS: 'chiropodists_podiatrists', CHIROPRACTORS: 'chiropractors', CIGAR_STORES_AND_STANDS: 'cigar_stores_and_stands', CIVIC_SOCIAL_FRATERNAL_ASSOCIATIONS: 'civic_social_fraternal_associations', CLEANING_AND_MAINTENANCE: 'cleaning_and_maintenance', CLOTHING_RENTAL: 'clothing_rental', COLLEGES_UNIVERSITIES: 'colleges_universities', COMMERCIAL_EQUIPMENT: 'commercial_equipment', COMMERCIAL_FOOTWEAR: 'commercial_footwear', COMMERCIAL_PHOTOGRAPHY_ART_AND_GRAPHICS: 'commercial_photography_art_and_graphics', COMMUTER_TRANSPORT_AND_FERRIES: 'commuter_transport_and_ferries', COMPUTER_NETWORK_SERVICES: 'computer_network_services', COMPUTER_PROGRAMMING: 'computer_programming', COMPUTER_REPAIR: 'computer_repair', COMPUTER_SOFTWARE_STORES: 'computer_software_stores', COMPUTERS_PERIPHERALS_AND_SOFTWARE: 'computers_peripherals_and_software', CONCRETE_WORK_SERVICES: 'concrete_work_services', CONSTRUCTION_MATERIALS: 'construction_materials', CONSULTING_PUBLIC_RELATIONS: 'consulting_public_relations', CORRESPONDENCE_SCHOOLS: 'correspondence_schools', COSMETIC_STORES: 'cosmetic_stores', COUNSELING_SERVICES: 'counseling_services', COUNTRY_CLUBS: 'country_clubs', COURIER_SERVICES: 'courier_services', COURT_COSTS: 'court_costs', CREDIT_REPORTING_AGENCIES: 'credit_reporting_agencies', CRUISE_LINES: 'cruise_lines', DAIRY_PRODUCTS_STORES: 'dairy_products_stores', DANCE_HALL_STUDIOS_SCHOOLS: 'dance_hall_studios_schools', DATING_ESCORT_SERVICES: 'dating_escort_services', DENTISTS_ORTHODONTISTS: 'dentists_orthodontists', DEPARTMENT_STORES: 'department_stores', DETECTIVE_AGENCIES: 'detective_agencies', DIGITAL_GOODS_APPLICATIONS: 'digital_goods_applications', DIGITAL_GOODS_GAMES: 'digital_goods_games', DIGITAL_GOODS_LARGE_VOLUME: 'digital_goods_large_volume', DIGITAL_GOODS_MEDIA: 'digital_goods_media', DIRECT_MARKETING_CATALOG_MERCHANT: 'direct_marketing_catalog_merchant', DIRECT_MARKETING_COMBINATION_CATALOG_AND_RETAIL_MERCHANT: 'direct_marketing_combination_catalog_and_retail_merchant', DIRECT_MARKETING_INBOUND_TELEMARKETING: 'direct_marketing_inbound_telemarketing', DIRECT_MARKETING_INSURANCE_SERVICES: 'direct_marketing_insurance_services', DIRECT_MARKETING_OTHER: 'direct_marketing_other', DIRECT_MARKETING_OUTBOUND_TELEMARKETING: 'direct_marketing_outbound_telemarketing', DIRECT_MARKETING_SUBSCRIPTION: 'direct_marketing_subscription', DIRECT_MARKETING_TRAVEL: 'direct_marketing_travel', DISCOUNT_STORES: 'discount_stores', DOCTORS: 'doctors', DOOR_TO_DOOR_SALES: 'door_to_door_sales', DRAPERY_WINDOW_COVERING_AND_UPHOLSTERY_STORES: 'drapery_window_covering_and_upholstery_stores', DRINKING_PLACES: 'drinking_places', DRUG_STORES_AND_PHARMACIES: 'drug_stores_and_pharmacies', DRUGS_DRUG_PROPRIETARIES_AND_DRUGGIST_SUNDRIES: 'drugs_drug_proprietaries_and_druggist_sundries', DRY_CLEANERS: 'dry_cleaners', DURABLE_GOODS: 'durable_goods', DUTY_FREE_STORES: 'duty_free_stores', EATING_PLACES_RESTAURANTS: 'eating_places_restaurants', EDUCATIONAL_SERVICES: 'educational_services', ELECTRIC_RAZOR_STORES: 'electric_razor_stores', ELECTRICAL_PARTS_AND_EQUIPMENT: 'electrical_parts_and_equipment', ELECTRICAL_SERVICES: 'electrical_services', ELECTRONICS_REPAIR_SHOPS: 'electronics_repair_shops', ELECTRONICS_STORES: 'electronics_stores', ELEMENTARY_SECONDARY_SCHOOLS: 'elementary_secondary_schools', EMPLOYMENT_TEMP_AGENCIES: 'employment_temp_agencies', EQUIPMENT_RENTAL: 'equipment_rental', EXTERMINATING_SERVICES: 'exterminating_services', FAMILY_CLOTHING_STORES: 'family_clothing_stores', FAST_FOOD_RESTAURANTS: 'fast_food_restaurants', FINANCIAL_INSTITUTIONS: 'financial_institutions', FINES_GOVERNMENT_ADMINISTRATIVE_ENTITIES: 'fines_government_administrative_entities', FIREPLACE_FIREPLACE_SCREENS_AND_ACCESSORIES_STORES: 'fireplace_fireplace_screens_and_accessories_stores', FLOOR_COVERING_STORES: 'floor_covering_stores', FLORISTS: 'florists', FLORISTS_SUPPLIES_NURSERY_STOCK_AND_FLOWERS: 'florists_supplies_nursery_stock_and_flowers', FREEZER_AND_LOCKER_MEAT_PROVISIONERS: 'freezer_and_locker_meat_provisioners', FUEL_DEALERS_NON_AUTOMOTIVE: 'fuel_dealers_non_automotive', FUNERAL_SERVICES_CREMATORIES: 'funeral_services_crematories', FURNITURE_HOME_FURNISHINGS_AND_EQUIPMENT_STORES_EXCEPT_APPLIANCES: 'furniture_home_furnishings_and_equipment_stores_except_appliances', FURNITURE_REPAIR_REFINISHING: 'furniture_repair_refinishing', FURRIERS_AND_FUR_SHOPS: 'furriers_and_fur_shops', GENERAL_SERVICES: 'general_services', GIFT_CARD_NOVELTY_AND_SOUVENIR_SHOPS: 'gift_card_novelty_and_souvenir_shops', GLASS_PAINT_AND_WALLPAPER_STORES: 'glass_paint_and_wallpaper_stores', GLASSWARE_CRYSTAL_STORES: 'glassware_crystal_stores', GOLF_COURSES_PUBLIC: 'golf_courses_public', GOVERNMENT_SERVICES: 'government_services', GROCERY_STORES_SUPERMARKETS: 'grocery_stores_supermarkets', HARDWARE_EQUIPMENT_AND_SUPPLIES: 'hardware_equipment_and_supplies', HARDWARE_STORES: 'hardware_stores', HEALTH_AND_BEAUTY_SPAS: 'health_and_beauty_spas', HEARING_AIDS_SALES_AND_SUPPLIES: 'hearing_aids_sales_and_supplies', HEATING_PLUMBING_A_C: 'heating_plumbing_a_c', HOBBY_TOY_AND_GAME_SHOPS: 'hobby_toy_and_game_shops', HOME_SUPPLY_WAREHOUSE_STORES: 'home_supply_warehouse_stores', HOSPITALS: 'hospitals', HOTELS_MOTELS_AND_RESORTS: 'hotels_motels_and_resorts', HOUSEHOLD_APPLIANCE_STORES: 'household_appliance_stores', INDUSTRIAL_SUPPLIES: 'industrial_supplies', INFORMATION_RETRIEVAL_SERVICES: 'information_retrieval_services', INSURANCE_DEFAULT: 'insurance_default', INSURANCE_UNDERWRITING_PREMIUMS: 'insurance_underwriting_premiums', INTRA_COMPANY_PURCHASES: 'intra_company_purchases', JEWELRY_STORES_WATCHES_CLOCKS_AND_SILVERWARE_STORES: 'jewelry_stores_watches_clocks_and_silverware_stores', LANDSCAPING_SERVICES: 'landscaping_services', LAUNDRIES: 'laundries', LAUNDRY_CLEANING_SERVICES: 'laundry_cleaning_services', LEGAL_SERVICES_ATTORNEYS: 'legal_services_attorneys', LUGGAGE_AND_LEATHER_GOODS_STORES: 'luggage_and_leather_goods_stores', LUMBER_BUILDING_MATERIALS_STORES: 'lumber_building_materials_stores', MANUAL_CASH_DISBURSE: 'manual_cash_disburse', MARINAS_SERVICE_AND_SUPPLIES: 'marinas_service_and_supplies', MASONRY_STONEWORK_AND_PLASTER: 'masonry_stonework_and_plaster', MASSAGE_PARLORS: 'massage_parlors', MEDICAL_AND_DENTAL_LABS: 'medical_and_dental_labs', MEDICAL_DENTAL_OPHTHALMIC_AND_HOSPITAL_EQUIPMENT_AND_SUPPLIES: 'medical_dental_ophthalmic_and_hospital_equipment_and_supplies', MEDICAL_SERVICES: 'medical_services', MEMBERSHIP_ORGANIZATIONS: 'membership_organizations', MENS_AND_BOYS_CLOTHING_AND_ACCESSORIES_STORES: 'mens_and_boys_clothing_and_accessories_stores', MENS_WOMENS_CLOTHING_STORES: 'mens_womens_clothing_stores', METAL_SERVICE_CENTERS: 'metal_service_centers', MISCELLANEOUS: 'miscellaneous', MISCELLANEOUS_APPAREL_AND_ACCESSORY_SHOPS: 'miscellaneous_apparel_and_accessory_shops', MISCELLANEOUS_AUTO_DEALERS: 'miscellaneous_auto_dealers', MISCELLANEOUS_BUSINESS_SERVICES: 'miscellaneous_business_services', MISCELLANEOUS_FOOD_STORES: 'miscellaneous_food_stores', MISCELLANEOUS_GENERAL_MERCHANDISE: 'miscellaneous_general_merchandise', MISCELLANEOUS_GENERAL_SERVICES: 'miscellaneous_general_services', MISCELLANEOUS_HOME_FURNISHING_SPECIALTY_STORES: 'miscellaneous_home_furnishing_specialty_stores', MISCELLANEOUS_PUBLISHING_AND_PRINTING: 'miscellaneous_publishing_and_printing', MISCELLANEOUS_RECREATION_SERVICES: 'miscellaneous_recreation_services', MISCELLANEOUS_REPAIR_SHOPS: 'miscellaneous_repair_shops', MISCELLANEOUS_SPECIALTY_RETAIL: 'miscellaneous_specialty_retail', MOBILE_HOME_DEALERS: 'mobile_home_dealers', MOTION_PICTURE_THEATERS: 'motion_picture_theaters', MOTOR_FREIGHT_CARRIERS_AND_TRUCKING: 'motor_freight_carriers_and_trucking', MOTOR_HOMES_DEALERS: 'motor_homes_dealers', MOTOR_VEHICLE_SUPPLIES_AND_NEW_PARTS: 'motor_vehicle_supplies_and_new_parts', MOTORCYCLE_SHOPS_AND_DEALERS: 'motorcycle_shops_and_dealers', MOTORCYCLE_SHOPS_DEALERS: 'motorcycle_shops_dealers', MUSIC_STORES_MUSICAL_INSTRUMENTS_PIANOS_AND_SHEET_MUSIC: 'music_stores_musical_instruments_pianos_and_sheet_music', NEWS_DEALERS_AND_NEWSSTANDS: 'news_dealers_and_newsstands', NON_FI_MONEY_ORDERS: 'non_fi_money_orders', NON_FI_STORED_VALUE_CARD_PURCHASE_LOAD: 'non_fi_stored_value_card_purchase_load', NONDURABLE_GOODS: 'nondurable_goods', NURSERIES_LAWN_AND_GARDEN_SUPPLY_STORES: 'nurseries_lawn_and_garden_supply_stores', NURSING_PERSONAL_CARE: 'nursing_personal_care', OFFICE_AND_COMMERCIAL_FURNITURE: 'office_and_commercial_furniture', OPTICIANS_EYEGLASSES: 'opticians_eyeglasses', OPTOMETRISTS_OPHTHALMOLOGIST: 'optometrists_ophthalmologist', ORTHOPEDIC_GOODS_PROSTHETIC_DEVICES: 'orthopedic_goods_prosthetic_devices', OSTEOPATHS: 'osteopaths', PACKAGE_STORES_BEER_WINE_AND_LIQUOR: 'package_stores_beer_wine_and_liquor', PAINTS_VARNISHES_AND_SUPPLIES: 'paints_varnishes_and_supplies', PARKING_LOTS_GARAGES: 'parking_lots_garages', PASSENGER_RAILWAYS: 'passenger_railways', PAWN_SHOPS: 'pawn_shops', PET_SHOPS_PET_FOOD_AND_SUPPLIES: 'pet_shops_pet_food_and_supplies', PETROLEUM_AND_PETROLEUM_PRODUCTS: 'petroleum_and_petroleum_products', PHOTO_DEVELOPING: 'photo_developing', PHOTOGRAPHIC_PHOTOCOPY_MICROFILM_EQUIPMENT_AND_SUPPLIES: 'photographic_photocopy_microfilm_equipment_and_supplies', PHOTOGRAPHIC_STUDIOS: 'photographic_studios', PICTURE_VIDEO_PRODUCTION: 'picture_video_production', PIECE_GOODS_NOTIONS_AND_OTHER_DRY_GOODS: 'piece_goods_notions_and_other_dry_goods', PLUMBING_HEATING_EQUIPMENT_AND_SUPPLIES: 'plumbing_heating_equipment_and_supplies', POLITICAL_ORGANIZATIONS: 'political_organizations', POSTAL_SERVICES_GOVERNMENT_ONLY: 'postal_services_government_only', PRECIOUS_STONES_AND_METALS_WATCHES_AND_JEWELRY: 'precious_stones_and_metals_watches_and_jewelry', PROFESSIONAL_SERVICES: 'professional_services', PUBLIC_WAREHOUSING_AND_STORAGE: 'public_warehousing_and_storage', QUICK_COPY_REPRO_AND_BLUEPRINT: 'quick_copy_repro_and_blueprint', RAILROADS: 'railroads', REAL_ESTATE_AGENTS_AND_MANAGERS_RENTALS: 'real_estate_agents_and_managers_rentals', RECORD_STORES: 'record_stores', RECREATIONAL_VEHICLE_RENTALS: 'recreational_vehicle_rentals', RELIGIOUS_GOODS_STORES: 'religious_goods_stores', RELIGIOUS_ORGANIZATIONS: 'religious_organizations', ROOFING_SIDING_SHEET_METAL: 'roofing_siding_sheet_metal', SECRETARIAL_SUPPORT_SERVICES: 'secretarial_support_services', SECURITY_BROKERS_DEALERS: 'security_brokers_dealers', SERVICE_STATIONS: 'service_stations', SEWING_NEEDLEWORK_FABRIC_AND_PIECE_GOODS_STORES: 'sewing_needlework_fabric_and_piece_goods_stores', SHOE_REPAIR_HAT_CLEANING: 'shoe_repair_hat_cleaning', SHOE_STORES: 'shoe_stores', SMALL_APPLIANCE_REPAIR: 'small_appliance_repair', SNOWMOBILE_DEALERS: 'snowmobile_dealers', SPECIAL_TRADE_SERVICES: 'special_trade_services', SPECIALTY_CLEANING: 'specialty_cleaning', SPORTING_GOODS_STORES: 'sporting_goods_stores', SPORTING_RECREATION_CAMPS: 'sporting_recreation_camps', SPORTS_AND_RIDING_APPAREL_STORES: 'sports_and_riding_apparel_stores', SPORTS_CLUBS_FIELDS: 'sports_clubs_fields', STAMP_AND_COIN_STORES: 'stamp_and_coin_stores', STATIONARY_OFFICE_SUPPLIES_PRINTING_AND_WRITING_PAPER: 'stationary_office_supplies_printing_and_writing_paper', STATIONERY_STORES_OFFICE_AND_SCHOOL_SUPPLY_STORES: 'stationery_stores_office_and_school_supply_stores', SWIMMING_POOLS_SALES: 'swimming_pools_sales', T_UI_TRAVEL_GERMANY: 't_ui_travel_germany', TAILORS_ALTERATIONS: 'tailors_alterations', TAX_PAYMENTS_GOVERNMENT_AGENCIES: 'tax_payments_government_agencies', TAX_PREPARATION_SERVICES: 'tax_preparation_services', TAXICABS_LIMOUSINES: 'taxicabs_limousines', TELECOMMUNICATION_EQUIPMENT_AND_TELEPHONE_SALES: 'telecommunication_equipment_and_telephone_sales', TELECOMMUNICATION_SERVICES: 'telecommunication_services', TELEGRAPH_SERVICES: 'telegraph_services', TENT_AND_AWNING_SHOPS: 'tent_and_awning_shops', TESTING_LABORATORIES: 'testing_laboratories', THEATRICAL_TICKET_AGENCIES: 'theatrical_ticket_agencies', TIMESHARES: 'timeshares', TIRE_RETREADING_AND_REPAIR: 'tire_retreading_and_repair', TOLLS_BRIDGE_FEES: 'tolls_bridge_fees', TOURIST_ATTRACTIONS_AND_EXHIBITS: 'tourist_attractions_and_exhibits', TOWING_SERVICES: 'towing_services', TRAILER_PARKS_CAMPGROUNDS: 'trailer_parks_campgrounds', TRANSPORTATION_SERVICES: 'transportation_services', TRAVEL_AGENCIES_TOUR_OPERATORS: 'travel_agencies_tour_operators', TRUCK_STOP_ITERATION: 'truck_stop_iteration', TRUCK_UTILITY_TRAILER_RENTALS: 'truck_utility_trailer_rentals', TYPESETTING_PLATE_MAKING_AND_RELATED_SERVICES: 'typesetting_plate_making_and_related_services', TYPEWRITER_STORES: 'typewriter_stores', U_S_FEDERAL_GOVERNMENT_AGENCIES_OR_DEPARTMENTS: 'u_s_federal_government_agencies_or_departments', UNIFORMS_COMMERCIAL_CLOTHING: 'uniforms_commercial_clothing', USED_MERCHANDISE_AND_SECONDHAND_STORES: 'used_merchandise_and_secondhand_stores', UTILITIES: 'utilities', VARIETY_STORES: 'variety_stores', VETERINARY_SERVICES: 'veterinary_services', VIDEO_AMUSEMENT_GAME_SUPPLIES: 'video_amusement_game_supplies', VIDEO_GAME_ARCADES: 'video_game_arcades', VIDEO_TAPE_RENTAL_STORES: 'video_tape_rental_stores', VOCATIONAL_TRADE_SCHOOLS: 'vocational_trade_schools', WATCH_JEWELRY_REPAIR: 'watch_jewelry_repair', WELDING_REPAIR: 'welding_repair', WHOLESALE_CLUBS: 'wholesale_clubs', WIG_AND_TOUPEE_STORES: 'wig_and_toupee_stores', WIRES_MONEY_ORDERS: 'wires_money_orders', WOMENS_ACCESSORY_AND_SPECIALTY_SHOPS: 'womens_accessory_and_specialty_shops', WOMENS_READY_TO_WEAR_STORES: 'womens_ready_to_wear_stores', WRECKING_AND_SALVAGE_YARDS: 'wrecking_and_salvage_yards' };

export type IssuingCardholderSpendingLimitResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['IssuingCardholderSpendingLimit'] = ResolversParentTypes['IssuingCardholderSpendingLimit']> = ResolversObject<{
  amount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  categories?: Resolver<Maybe<Array<Maybe<ResolversTypes['CategoriesListItem']>>>, ParentType, ContextType>;
  interval?: Resolver<ResolversTypes['Interval7'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CategoriesListItemResolvers = { AC_REFRIGERATION_REPAIR: 'ac_refrigeration_repair', ACCOUNTING_BOOKKEEPING_SERVICES: 'accounting_bookkeeping_services', ADVERTISING_SERVICES: 'advertising_services', AGRICULTURAL_COOPERATIVE: 'agricultural_cooperative', AIRLINES_AIR_CARRIERS: 'airlines_air_carriers', AIRPORTS_FLYING_FIELDS: 'airports_flying_fields', AMBULANCE_SERVICES: 'ambulance_services', AMUSEMENT_PARKS_CARNIVALS: 'amusement_parks_carnivals', ANTIQUE_REPRODUCTIONS: 'antique_reproductions', ANTIQUE_SHOPS: 'antique_shops', AQUARIUMS: 'aquariums', ARCHITECTURAL_SURVEYING_SERVICES: 'architectural_surveying_services', ART_DEALERS_AND_GALLERIES: 'art_dealers_and_galleries', ARTISTS_SUPPLY_AND_CRAFT_SHOPS: 'artists_supply_and_craft_shops', AUTO_AND_HOME_SUPPLY_STORES: 'auto_and_home_supply_stores', AUTO_BODY_REPAIR_SHOPS: 'auto_body_repair_shops', AUTO_PAINT_SHOPS: 'auto_paint_shops', AUTO_SERVICE_SHOPS: 'auto_service_shops', AUTOMATED_CASH_DISBURSE: 'automated_cash_disburse', AUTOMATED_FUEL_DISPENSERS: 'automated_fuel_dispensers', AUTOMOBILE_ASSOCIATIONS: 'automobile_associations', AUTOMOTIVE_PARTS_AND_ACCESSORIES_STORES: 'automotive_parts_and_accessories_stores', AUTOMOTIVE_TIRE_STORES: 'automotive_tire_stores', BAIL_AND_BOND_PAYMENTS: 'bail_and_bond_payments', BAKERIES: 'bakeries', BANDS_ORCHESTRAS: 'bands_orchestras', BARBER_AND_BEAUTY_SHOPS: 'barber_and_beauty_shops', BETTING_CASINO_GAMBLING: 'betting_casino_gambling', BICYCLE_SHOPS: 'bicycle_shops', BILLIARD_POOL_ESTABLISHMENTS: 'billiard_pool_establishments', BOAT_DEALERS: 'boat_dealers', BOAT_RENTALS_AND_LEASES: 'boat_rentals_and_leases', BOOK_STORES: 'book_stores', BOOKS_PERIODICALS_AND_NEWSPAPERS: 'books_periodicals_and_newspapers', BOWLING_ALLEYS: 'bowling_alleys', BUS_LINES: 'bus_lines', BUSINESS_SECRETARIAL_SCHOOLS: 'business_secretarial_schools', BUYING_SHOPPING_SERVICES: 'buying_shopping_services', CABLE_SATELLITE_AND_OTHER_PAY_TELEVISION_AND_RADIO: 'cable_satellite_and_other_pay_television_and_radio', CAMERA_AND_PHOTOGRAPHIC_SUPPLY_STORES: 'camera_and_photographic_supply_stores', CANDY_NUT_AND_CONFECTIONERY_STORES: 'candy_nut_and_confectionery_stores', CAR_AND_TRUCK_DEALERS_NEW_USED: 'car_and_truck_dealers_new_used', CAR_AND_TRUCK_DEALERS_USED_ONLY: 'car_and_truck_dealers_used_only', CAR_RENTAL_AGENCIES: 'car_rental_agencies', CAR_WASHES: 'car_washes', CARPENTRY_SERVICES: 'carpentry_services', CARPET_UPHOLSTERY_CLEANING: 'carpet_upholstery_cleaning', CATERERS: 'caterers', CHARITABLE_AND_SOCIAL_SERVICE_ORGANIZATIONS_FUNDRAISING: 'charitable_and_social_service_organizations_fundraising', CHEMICALS_AND_ALLIED_PRODUCTS: 'chemicals_and_allied_products', CHILD_CARE_SERVICES: 'child_care_services', CHILDRENS_AND_INFANTS_WEAR_STORES: 'childrens_and_infants_wear_stores', CHIROPODISTS_PODIATRISTS: 'chiropodists_podiatrists', CHIROPRACTORS: 'chiropractors', CIGAR_STORES_AND_STANDS: 'cigar_stores_and_stands', CIVIC_SOCIAL_FRATERNAL_ASSOCIATIONS: 'civic_social_fraternal_associations', CLEANING_AND_MAINTENANCE: 'cleaning_and_maintenance', CLOTHING_RENTAL: 'clothing_rental', COLLEGES_UNIVERSITIES: 'colleges_universities', COMMERCIAL_EQUIPMENT: 'commercial_equipment', COMMERCIAL_FOOTWEAR: 'commercial_footwear', COMMERCIAL_PHOTOGRAPHY_ART_AND_GRAPHICS: 'commercial_photography_art_and_graphics', COMMUTER_TRANSPORT_AND_FERRIES: 'commuter_transport_and_ferries', COMPUTER_NETWORK_SERVICES: 'computer_network_services', COMPUTER_PROGRAMMING: 'computer_programming', COMPUTER_REPAIR: 'computer_repair', COMPUTER_SOFTWARE_STORES: 'computer_software_stores', COMPUTERS_PERIPHERALS_AND_SOFTWARE: 'computers_peripherals_and_software', CONCRETE_WORK_SERVICES: 'concrete_work_services', CONSTRUCTION_MATERIALS: 'construction_materials', CONSULTING_PUBLIC_RELATIONS: 'consulting_public_relations', CORRESPONDENCE_SCHOOLS: 'correspondence_schools', COSMETIC_STORES: 'cosmetic_stores', COUNSELING_SERVICES: 'counseling_services', COUNTRY_CLUBS: 'country_clubs', COURIER_SERVICES: 'courier_services', COURT_COSTS: 'court_costs', CREDIT_REPORTING_AGENCIES: 'credit_reporting_agencies', CRUISE_LINES: 'cruise_lines', DAIRY_PRODUCTS_STORES: 'dairy_products_stores', DANCE_HALL_STUDIOS_SCHOOLS: 'dance_hall_studios_schools', DATING_ESCORT_SERVICES: 'dating_escort_services', DENTISTS_ORTHODONTISTS: 'dentists_orthodontists', DEPARTMENT_STORES: 'department_stores', DETECTIVE_AGENCIES: 'detective_agencies', DIGITAL_GOODS_APPLICATIONS: 'digital_goods_applications', DIGITAL_GOODS_GAMES: 'digital_goods_games', DIGITAL_GOODS_LARGE_VOLUME: 'digital_goods_large_volume', DIGITAL_GOODS_MEDIA: 'digital_goods_media', DIRECT_MARKETING_CATALOG_MERCHANT: 'direct_marketing_catalog_merchant', DIRECT_MARKETING_COMBINATION_CATALOG_AND_RETAIL_MERCHANT: 'direct_marketing_combination_catalog_and_retail_merchant', DIRECT_MARKETING_INBOUND_TELEMARKETING: 'direct_marketing_inbound_telemarketing', DIRECT_MARKETING_INSURANCE_SERVICES: 'direct_marketing_insurance_services', DIRECT_MARKETING_OTHER: 'direct_marketing_other', DIRECT_MARKETING_OUTBOUND_TELEMARKETING: 'direct_marketing_outbound_telemarketing', DIRECT_MARKETING_SUBSCRIPTION: 'direct_marketing_subscription', DIRECT_MARKETING_TRAVEL: 'direct_marketing_travel', DISCOUNT_STORES: 'discount_stores', DOCTORS: 'doctors', DOOR_TO_DOOR_SALES: 'door_to_door_sales', DRAPERY_WINDOW_COVERING_AND_UPHOLSTERY_STORES: 'drapery_window_covering_and_upholstery_stores', DRINKING_PLACES: 'drinking_places', DRUG_STORES_AND_PHARMACIES: 'drug_stores_and_pharmacies', DRUGS_DRUG_PROPRIETARIES_AND_DRUGGIST_SUNDRIES: 'drugs_drug_proprietaries_and_druggist_sundries', DRY_CLEANERS: 'dry_cleaners', DURABLE_GOODS: 'durable_goods', DUTY_FREE_STORES: 'duty_free_stores', EATING_PLACES_RESTAURANTS: 'eating_places_restaurants', EDUCATIONAL_SERVICES: 'educational_services', ELECTRIC_RAZOR_STORES: 'electric_razor_stores', ELECTRICAL_PARTS_AND_EQUIPMENT: 'electrical_parts_and_equipment', ELECTRICAL_SERVICES: 'electrical_services', ELECTRONICS_REPAIR_SHOPS: 'electronics_repair_shops', ELECTRONICS_STORES: 'electronics_stores', ELEMENTARY_SECONDARY_SCHOOLS: 'elementary_secondary_schools', EMPLOYMENT_TEMP_AGENCIES: 'employment_temp_agencies', EQUIPMENT_RENTAL: 'equipment_rental', EXTERMINATING_SERVICES: 'exterminating_services', FAMILY_CLOTHING_STORES: 'family_clothing_stores', FAST_FOOD_RESTAURANTS: 'fast_food_restaurants', FINANCIAL_INSTITUTIONS: 'financial_institutions', FINES_GOVERNMENT_ADMINISTRATIVE_ENTITIES: 'fines_government_administrative_entities', FIREPLACE_FIREPLACE_SCREENS_AND_ACCESSORIES_STORES: 'fireplace_fireplace_screens_and_accessories_stores', FLOOR_COVERING_STORES: 'floor_covering_stores', FLORISTS: 'florists', FLORISTS_SUPPLIES_NURSERY_STOCK_AND_FLOWERS: 'florists_supplies_nursery_stock_and_flowers', FREEZER_AND_LOCKER_MEAT_PROVISIONERS: 'freezer_and_locker_meat_provisioners', FUEL_DEALERS_NON_AUTOMOTIVE: 'fuel_dealers_non_automotive', FUNERAL_SERVICES_CREMATORIES: 'funeral_services_crematories', FURNITURE_HOME_FURNISHINGS_AND_EQUIPMENT_STORES_EXCEPT_APPLIANCES: 'furniture_home_furnishings_and_equipment_stores_except_appliances', FURNITURE_REPAIR_REFINISHING: 'furniture_repair_refinishing', FURRIERS_AND_FUR_SHOPS: 'furriers_and_fur_shops', GENERAL_SERVICES: 'general_services', GIFT_CARD_NOVELTY_AND_SOUVENIR_SHOPS: 'gift_card_novelty_and_souvenir_shops', GLASS_PAINT_AND_WALLPAPER_STORES: 'glass_paint_and_wallpaper_stores', GLASSWARE_CRYSTAL_STORES: 'glassware_crystal_stores', GOLF_COURSES_PUBLIC: 'golf_courses_public', GOVERNMENT_SERVICES: 'government_services', GROCERY_STORES_SUPERMARKETS: 'grocery_stores_supermarkets', HARDWARE_EQUIPMENT_AND_SUPPLIES: 'hardware_equipment_and_supplies', HARDWARE_STORES: 'hardware_stores', HEALTH_AND_BEAUTY_SPAS: 'health_and_beauty_spas', HEARING_AIDS_SALES_AND_SUPPLIES: 'hearing_aids_sales_and_supplies', HEATING_PLUMBING_A_C: 'heating_plumbing_a_c', HOBBY_TOY_AND_GAME_SHOPS: 'hobby_toy_and_game_shops', HOME_SUPPLY_WAREHOUSE_STORES: 'home_supply_warehouse_stores', HOSPITALS: 'hospitals', HOTELS_MOTELS_AND_RESORTS: 'hotels_motels_and_resorts', HOUSEHOLD_APPLIANCE_STORES: 'household_appliance_stores', INDUSTRIAL_SUPPLIES: 'industrial_supplies', INFORMATION_RETRIEVAL_SERVICES: 'information_retrieval_services', INSURANCE_DEFAULT: 'insurance_default', INSURANCE_UNDERWRITING_PREMIUMS: 'insurance_underwriting_premiums', INTRA_COMPANY_PURCHASES: 'intra_company_purchases', JEWELRY_STORES_WATCHES_CLOCKS_AND_SILVERWARE_STORES: 'jewelry_stores_watches_clocks_and_silverware_stores', LANDSCAPING_SERVICES: 'landscaping_services', LAUNDRIES: 'laundries', LAUNDRY_CLEANING_SERVICES: 'laundry_cleaning_services', LEGAL_SERVICES_ATTORNEYS: 'legal_services_attorneys', LUGGAGE_AND_LEATHER_GOODS_STORES: 'luggage_and_leather_goods_stores', LUMBER_BUILDING_MATERIALS_STORES: 'lumber_building_materials_stores', MANUAL_CASH_DISBURSE: 'manual_cash_disburse', MARINAS_SERVICE_AND_SUPPLIES: 'marinas_service_and_supplies', MASONRY_STONEWORK_AND_PLASTER: 'masonry_stonework_and_plaster', MASSAGE_PARLORS: 'massage_parlors', MEDICAL_AND_DENTAL_LABS: 'medical_and_dental_labs', MEDICAL_DENTAL_OPHTHALMIC_AND_HOSPITAL_EQUIPMENT_AND_SUPPLIES: 'medical_dental_ophthalmic_and_hospital_equipment_and_supplies', MEDICAL_SERVICES: 'medical_services', MEMBERSHIP_ORGANIZATIONS: 'membership_organizations', MENS_AND_BOYS_CLOTHING_AND_ACCESSORIES_STORES: 'mens_and_boys_clothing_and_accessories_stores', MENS_WOMENS_CLOTHING_STORES: 'mens_womens_clothing_stores', METAL_SERVICE_CENTERS: 'metal_service_centers', MISCELLANEOUS: 'miscellaneous', MISCELLANEOUS_APPAREL_AND_ACCESSORY_SHOPS: 'miscellaneous_apparel_and_accessory_shops', MISCELLANEOUS_AUTO_DEALERS: 'miscellaneous_auto_dealers', MISCELLANEOUS_BUSINESS_SERVICES: 'miscellaneous_business_services', MISCELLANEOUS_FOOD_STORES: 'miscellaneous_food_stores', MISCELLANEOUS_GENERAL_MERCHANDISE: 'miscellaneous_general_merchandise', MISCELLANEOUS_GENERAL_SERVICES: 'miscellaneous_general_services', MISCELLANEOUS_HOME_FURNISHING_SPECIALTY_STORES: 'miscellaneous_home_furnishing_specialty_stores', MISCELLANEOUS_PUBLISHING_AND_PRINTING: 'miscellaneous_publishing_and_printing', MISCELLANEOUS_RECREATION_SERVICES: 'miscellaneous_recreation_services', MISCELLANEOUS_REPAIR_SHOPS: 'miscellaneous_repair_shops', MISCELLANEOUS_SPECIALTY_RETAIL: 'miscellaneous_specialty_retail', MOBILE_HOME_DEALERS: 'mobile_home_dealers', MOTION_PICTURE_THEATERS: 'motion_picture_theaters', MOTOR_FREIGHT_CARRIERS_AND_TRUCKING: 'motor_freight_carriers_and_trucking', MOTOR_HOMES_DEALERS: 'motor_homes_dealers', MOTOR_VEHICLE_SUPPLIES_AND_NEW_PARTS: 'motor_vehicle_supplies_and_new_parts', MOTORCYCLE_SHOPS_AND_DEALERS: 'motorcycle_shops_and_dealers', MOTORCYCLE_SHOPS_DEALERS: 'motorcycle_shops_dealers', MUSIC_STORES_MUSICAL_INSTRUMENTS_PIANOS_AND_SHEET_MUSIC: 'music_stores_musical_instruments_pianos_and_sheet_music', NEWS_DEALERS_AND_NEWSSTANDS: 'news_dealers_and_newsstands', NON_FI_MONEY_ORDERS: 'non_fi_money_orders', NON_FI_STORED_VALUE_CARD_PURCHASE_LOAD: 'non_fi_stored_value_card_purchase_load', NONDURABLE_GOODS: 'nondurable_goods', NURSERIES_LAWN_AND_GARDEN_SUPPLY_STORES: 'nurseries_lawn_and_garden_supply_stores', NURSING_PERSONAL_CARE: 'nursing_personal_care', OFFICE_AND_COMMERCIAL_FURNITURE: 'office_and_commercial_furniture', OPTICIANS_EYEGLASSES: 'opticians_eyeglasses', OPTOMETRISTS_OPHTHALMOLOGIST: 'optometrists_ophthalmologist', ORTHOPEDIC_GOODS_PROSTHETIC_DEVICES: 'orthopedic_goods_prosthetic_devices', OSTEOPATHS: 'osteopaths', PACKAGE_STORES_BEER_WINE_AND_LIQUOR: 'package_stores_beer_wine_and_liquor', PAINTS_VARNISHES_AND_SUPPLIES: 'paints_varnishes_and_supplies', PARKING_LOTS_GARAGES: 'parking_lots_garages', PASSENGER_RAILWAYS: 'passenger_railways', PAWN_SHOPS: 'pawn_shops', PET_SHOPS_PET_FOOD_AND_SUPPLIES: 'pet_shops_pet_food_and_supplies', PETROLEUM_AND_PETROLEUM_PRODUCTS: 'petroleum_and_petroleum_products', PHOTO_DEVELOPING: 'photo_developing', PHOTOGRAPHIC_PHOTOCOPY_MICROFILM_EQUIPMENT_AND_SUPPLIES: 'photographic_photocopy_microfilm_equipment_and_supplies', PHOTOGRAPHIC_STUDIOS: 'photographic_studios', PICTURE_VIDEO_PRODUCTION: 'picture_video_production', PIECE_GOODS_NOTIONS_AND_OTHER_DRY_GOODS: 'piece_goods_notions_and_other_dry_goods', PLUMBING_HEATING_EQUIPMENT_AND_SUPPLIES: 'plumbing_heating_equipment_and_supplies', POLITICAL_ORGANIZATIONS: 'political_organizations', POSTAL_SERVICES_GOVERNMENT_ONLY: 'postal_services_government_only', PRECIOUS_STONES_AND_METALS_WATCHES_AND_JEWELRY: 'precious_stones_and_metals_watches_and_jewelry', PROFESSIONAL_SERVICES: 'professional_services', PUBLIC_WAREHOUSING_AND_STORAGE: 'public_warehousing_and_storage', QUICK_COPY_REPRO_AND_BLUEPRINT: 'quick_copy_repro_and_blueprint', RAILROADS: 'railroads', REAL_ESTATE_AGENTS_AND_MANAGERS_RENTALS: 'real_estate_agents_and_managers_rentals', RECORD_STORES: 'record_stores', RECREATIONAL_VEHICLE_RENTALS: 'recreational_vehicle_rentals', RELIGIOUS_GOODS_STORES: 'religious_goods_stores', RELIGIOUS_ORGANIZATIONS: 'religious_organizations', ROOFING_SIDING_SHEET_METAL: 'roofing_siding_sheet_metal', SECRETARIAL_SUPPORT_SERVICES: 'secretarial_support_services', SECURITY_BROKERS_DEALERS: 'security_brokers_dealers', SERVICE_STATIONS: 'service_stations', SEWING_NEEDLEWORK_FABRIC_AND_PIECE_GOODS_STORES: 'sewing_needlework_fabric_and_piece_goods_stores', SHOE_REPAIR_HAT_CLEANING: 'shoe_repair_hat_cleaning', SHOE_STORES: 'shoe_stores', SMALL_APPLIANCE_REPAIR: 'small_appliance_repair', SNOWMOBILE_DEALERS: 'snowmobile_dealers', SPECIAL_TRADE_SERVICES: 'special_trade_services', SPECIALTY_CLEANING: 'specialty_cleaning', SPORTING_GOODS_STORES: 'sporting_goods_stores', SPORTING_RECREATION_CAMPS: 'sporting_recreation_camps', SPORTS_AND_RIDING_APPAREL_STORES: 'sports_and_riding_apparel_stores', SPORTS_CLUBS_FIELDS: 'sports_clubs_fields', STAMP_AND_COIN_STORES: 'stamp_and_coin_stores', STATIONARY_OFFICE_SUPPLIES_PRINTING_AND_WRITING_PAPER: 'stationary_office_supplies_printing_and_writing_paper', STATIONERY_STORES_OFFICE_AND_SCHOOL_SUPPLY_STORES: 'stationery_stores_office_and_school_supply_stores', SWIMMING_POOLS_SALES: 'swimming_pools_sales', T_UI_TRAVEL_GERMANY: 't_ui_travel_germany', TAILORS_ALTERATIONS: 'tailors_alterations', TAX_PAYMENTS_GOVERNMENT_AGENCIES: 'tax_payments_government_agencies', TAX_PREPARATION_SERVICES: 'tax_preparation_services', TAXICABS_LIMOUSINES: 'taxicabs_limousines', TELECOMMUNICATION_EQUIPMENT_AND_TELEPHONE_SALES: 'telecommunication_equipment_and_telephone_sales', TELECOMMUNICATION_SERVICES: 'telecommunication_services', TELEGRAPH_SERVICES: 'telegraph_services', TENT_AND_AWNING_SHOPS: 'tent_and_awning_shops', TESTING_LABORATORIES: 'testing_laboratories', THEATRICAL_TICKET_AGENCIES: 'theatrical_ticket_agencies', TIMESHARES: 'timeshares', TIRE_RETREADING_AND_REPAIR: 'tire_retreading_and_repair', TOLLS_BRIDGE_FEES: 'tolls_bridge_fees', TOURIST_ATTRACTIONS_AND_EXHIBITS: 'tourist_attractions_and_exhibits', TOWING_SERVICES: 'towing_services', TRAILER_PARKS_CAMPGROUNDS: 'trailer_parks_campgrounds', TRANSPORTATION_SERVICES: 'transportation_services', TRAVEL_AGENCIES_TOUR_OPERATORS: 'travel_agencies_tour_operators', TRUCK_STOP_ITERATION: 'truck_stop_iteration', TRUCK_UTILITY_TRAILER_RENTALS: 'truck_utility_trailer_rentals', TYPESETTING_PLATE_MAKING_AND_RELATED_SERVICES: 'typesetting_plate_making_and_related_services', TYPEWRITER_STORES: 'typewriter_stores', U_S_FEDERAL_GOVERNMENT_AGENCIES_OR_DEPARTMENTS: 'u_s_federal_government_agencies_or_departments', UNIFORMS_COMMERCIAL_CLOTHING: 'uniforms_commercial_clothing', USED_MERCHANDISE_AND_SECONDHAND_STORES: 'used_merchandise_and_secondhand_stores', UTILITIES: 'utilities', VARIETY_STORES: 'variety_stores', VETERINARY_SERVICES: 'veterinary_services', VIDEO_AMUSEMENT_GAME_SUPPLIES: 'video_amusement_game_supplies', VIDEO_GAME_ARCADES: 'video_game_arcades', VIDEO_TAPE_RENTAL_STORES: 'video_tape_rental_stores', VOCATIONAL_TRADE_SCHOOLS: 'vocational_trade_schools', WATCH_JEWELRY_REPAIR: 'watch_jewelry_repair', WELDING_REPAIR: 'welding_repair', WHOLESALE_CLUBS: 'wholesale_clubs', WIG_AND_TOUPEE_STORES: 'wig_and_toupee_stores', WIRES_MONEY_ORDERS: 'wires_money_orders', WOMENS_ACCESSORY_AND_SPECIALTY_SHOPS: 'womens_accessory_and_specialty_shops', WOMENS_READY_TO_WEAR_STORES: 'womens_ready_to_wear_stores', WRECKING_AND_SALVAGE_YARDS: 'wrecking_and_salvage_yards' };

export type Interval7Resolvers = { ALL_TIME: 'all_time', DAILY: 'daily', MONTHLY: 'monthly', PER_AUTHORIZATION: 'per_authorization', WEEKLY: 'weekly', YEARLY: 'yearly' };

export type Status26Resolvers = { ACTIVE: 'active', BLOCKED: 'blocked', INACTIVE: 'inactive' };

export type Type34Resolvers = { COMPANY: 'company', INDIVIDUAL: 'individual' };

export type Object52Resolvers = { ISSUING_CARD: 'issuing.card' };

export type ReplacementReasonResolvers = { DAMAGED: 'damaged', EXPIRED: 'expired', LOST: 'lost', STOLEN: 'stolen' };

export type Shipping10Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Shipping10'] = ResolversParentTypes['Shipping10']> = ResolversObject<{
  address?: Resolver<Maybe<ResolversTypes['Address']>, ParentType, ContextType>;
  carrier?: Resolver<Maybe<ResolversTypes['Carrier9']>, ParentType, ContextType>;
  eta?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  service?: Resolver<Maybe<ResolversTypes['Service']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['Status27']>, ParentType, ContextType>;
  trackingNumber?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  trackingUrl?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['Type35']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Carrier9Resolvers = { DHL: 'dhl', FEDEX: 'fedex', ROYAL_MAIL: 'royal_mail', USPS: 'usps' };

export type ServiceResolvers = { EXPRESS: 'express', PRIORITY: 'priority', STANDARD: 'standard' };

export type Status27Resolvers = { CANCELED: 'canceled', DELIVERED: 'delivered', FAILURE: 'failure', PENDING: 'pending', RETURNED: 'returned', SHIPPED: 'shipped' };

export type Type35Resolvers = { BULK: 'bulk', INDIVIDUAL: 'individual' };

export type IssuingCardAuthorizationControlsResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['IssuingCardAuthorizationControls'] = ResolversParentTypes['IssuingCardAuthorizationControls']> = ResolversObject<{
  allowedCategories?: Resolver<Maybe<Array<Maybe<ResolversTypes['AllowedCategoriesListItem']>>>, ParentType, ContextType>;
  blockedCategories?: Resolver<Maybe<Array<Maybe<ResolversTypes['BlockedCategoriesListItem']>>>, ParentType, ContextType>;
  spendingLimits?: Resolver<Maybe<Array<Maybe<ResolversTypes['IssuingCardSpendingLimit']>>>, ParentType, ContextType>;
  spendingLimitsCurrency?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type IssuingCardSpendingLimitResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['IssuingCardSpendingLimit'] = ResolversParentTypes['IssuingCardSpendingLimit']> = ResolversObject<{
  amount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  categories?: Resolver<Maybe<Array<Maybe<ResolversTypes['CategoriesListItem']>>>, ParentType, ContextType>;
  interval?: Resolver<ResolversTypes['Interval7'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Status28Resolvers = { ACTIVE: 'active', CANCELED: 'canceled', INACTIVE: 'inactive' };

export type Type36Resolvers = { PHYSICAL: 'physical', VIRTUAL: 'virtual' };

export type IssuingAuthorizationMerchantDataResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['IssuingAuthorizationMerchantData'] = ResolversParentTypes['IssuingAuthorizationMerchantData']> = ResolversObject<{
  category?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  categoryCode?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  city?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  country?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  networkId?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  postalCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  state?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Object53Resolvers = { ISSUING_AUTHORIZATION: 'issuing.authorization' };

export type PendingRequestResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PendingRequest'] = ResolversParentTypes['PendingRequest']> = ResolversObject<{
  amount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  amountDetails?: Resolver<Maybe<ResolversTypes['AmountDetails']>, ParentType, ContextType>;
  currency?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  isAmountControllable?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  merchantAmount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  merchantCurrency?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type IssuingAuthorizationRequestResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['IssuingAuthorizationRequest'] = ResolversParentTypes['IssuingAuthorizationRequest']> = ResolversObject<{
  amount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  amountDetails?: Resolver<Maybe<ResolversTypes['AmountDetails']>, ParentType, ContextType>;
  approved?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  created?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  currency?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  merchantAmount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  merchantCurrency?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  reason?: Resolver<ResolversTypes['Reason13'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Reason13Resolvers = { ACCOUNT_DISABLED: 'account_disabled', CARD_ACTIVE: 'card_active', CARD_INACTIVE: 'card_inactive', CARDHOLDER_INACTIVE: 'cardholder_inactive', CARDHOLDER_VERIFICATION_REQUIRED: 'cardholder_verification_required', INSUFFICIENT_FUNDS: 'insufficient_funds', NOT_ALLOWED: 'not_allowed', SPENDING_CONTROLS: 'spending_controls', SUSPECTED_FRAUD: 'suspected_fraud', VERIFICATION_FAILED: 'verification_failed', WEBHOOK_APPROVED: 'webhook_approved', WEBHOOK_DECLINED: 'webhook_declined', WEBHOOK_TIMEOUT: 'webhook_timeout' };

export type Status29Resolvers = { CLOSED: 'closed', PENDING: 'pending', REVERSED: 'reversed' };

export type IssuingTransactionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['IssuingTransaction'] = ResolversParentTypes['IssuingTransaction']> = ResolversObject<{
  amount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  amountDetails?: Resolver<Maybe<ResolversTypes['AmountDetails2']>, ParentType, ContextType>;
  authorization?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  balanceTransaction?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  card?: Resolver<ResolversTypes['JSON'], ParentType, ContextType>;
  cardholder?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  created?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  currency?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  dispute?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  livemode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  merchantAmount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  merchantCurrency?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  merchantData?: Resolver<ResolversTypes['IssuingAuthorizationMerchantData'], ParentType, ContextType>;
  metadata?: Resolver<ResolversTypes['JSON'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object54'], ParentType, ContextType>;
  purchaseDetails?: Resolver<Maybe<ResolversTypes['PurchaseDetails']>, ParentType, ContextType>;
  type?: Resolver<ResolversTypes['Type38'], ParentType, ContextType>;
  wallet?: Resolver<Maybe<ResolversTypes['Wallet3']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AmountDetails2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['AmountDetails2'] = ResolversParentTypes['AmountDetails2']> = ResolversObject<{
  atmFee?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Object54Resolvers = { ISSUING_TRANSACTION: 'issuing.transaction' };

export type PurchaseDetailsResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PurchaseDetails'] = ResolversParentTypes['PurchaseDetails']> = ResolversObject<{
  flight?: Resolver<Maybe<ResolversTypes['Flight']>, ParentType, ContextType>;
  fuel?: Resolver<Maybe<ResolversTypes['Fuel']>, ParentType, ContextType>;
  lodging?: Resolver<Maybe<ResolversTypes['Lodging']>, ParentType, ContextType>;
  receipt?: Resolver<Maybe<Array<Maybe<ResolversTypes['IssuingTransactionReceiptData']>>>, ParentType, ContextType>;
  reference?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type FlightResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Flight'] = ResolversParentTypes['Flight']> = ResolversObject<{
  departureAt?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  passengerName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  refundable?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  segments?: Resolver<Maybe<Array<Maybe<ResolversTypes['IssuingTransactionFlightDataLeg']>>>, ParentType, ContextType>;
  travelAgency?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type IssuingTransactionFlightDataLegResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['IssuingTransactionFlightDataLeg'] = ResolversParentTypes['IssuingTransactionFlightDataLeg']> = ResolversObject<{
  arrivalAirportCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  carrier?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  departureAirportCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  flightNumber?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  serviceClass?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  stopoverAllowed?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type FuelResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Fuel'] = ResolversParentTypes['Fuel']> = ResolversObject<{
  type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  unit?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  unitCostDecimal?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  volumeDecimal?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type LodgingResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Lodging'] = ResolversParentTypes['Lodging']> = ResolversObject<{
  checkInAt?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  nights?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type IssuingTransactionReceiptDataResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['IssuingTransactionReceiptData'] = ResolversParentTypes['IssuingTransactionReceiptData']> = ResolversObject<{
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  quantity?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  total?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  unitCost?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Type38Resolvers = { CAPTURE: 'capture', REFUND: 'refund' };

export type Wallet3Resolvers = { APPLE_PAY: 'apple_pay', GOOGLE_PAY: 'google_pay', SAMSUNG_PAY: 'samsung_pay' };

export type IssuingAuthorizationVerificationDataResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['IssuingAuthorizationVerificationData'] = ResolversParentTypes['IssuingAuthorizationVerificationData']> = ResolversObject<{
  addressLine1Check?: Resolver<ResolversTypes['AddressLine1Check14'], ParentType, ContextType>;
  addressPostalCodeCheck?: Resolver<ResolversTypes['AddressPostalCodeCheck3'], ParentType, ContextType>;
  cvcCheck?: Resolver<ResolversTypes['CvcCheck14'], ParentType, ContextType>;
  expiryCheck?: Resolver<ResolversTypes['ExpiryCheck'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AddressLine1Check14Resolvers = { MATCH: 'match', MISMATCH: 'mismatch', NOT_PROVIDED: 'not_provided' };

export type AddressPostalCodeCheck3Resolvers = { MATCH: 'match', MISMATCH: 'mismatch', NOT_PROVIDED: 'not_provided' };

export type CvcCheck14Resolvers = { MATCH: 'match', MISMATCH: 'mismatch', NOT_PROVIDED: 'not_provided' };

export type ExpiryCheckResolvers = { MATCH: 'match', MISMATCH: 'mismatch', NOT_PROVIDED: 'not_provided' };

export type Status57Resolvers = { CLOSED: 'closed', PENDING: 'pending', REVERSED: 'reversed' };

export type V1IssuingCardholders2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['V1IssuingCardholders2'] = ResolversParentTypes['V1IssuingCardholders2']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['IssuingCardholder']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Status58Resolvers = { ACTIVE: 'active', BLOCKED: 'blocked', INACTIVE: 'inactive' };

export type Type69Resolvers = { COMPANY: 'company', INDIVIDUAL: 'individual' };

export type V1IssuingCards2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['V1IssuingCards2'] = ResolversParentTypes['V1IssuingCards2']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['IssuingCard2']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Status59Resolvers = { ACTIVE: 'active', CANCELED: 'canceled', INACTIVE: 'inactive' };

export type Type70Resolvers = { PHYSICAL: 'physical', VIRTUAL: 'virtual' };

export type IssuingDisputeListResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['IssuingDisputeList'] = ResolversParentTypes['IssuingDisputeList']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['IssuingDispute']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type IssuingDisputeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['IssuingDispute'] = ResolversParentTypes['IssuingDispute']> = ResolversObject<{
  amount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  balanceTransactions?: Resolver<Maybe<Array<Maybe<ResolversTypes['BalanceTransaction3']>>>, ParentType, ContextType>;
  created?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  currency?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  evidence?: Resolver<ResolversTypes['IssuingDisputeEvidence'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  livemode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  metadata?: Resolver<ResolversTypes['JSON'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object55'], ParentType, ContextType>;
  status?: Resolver<ResolversTypes['Status34'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['JSON'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type IssuingDisputeEvidenceResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['IssuingDisputeEvidence'] = ResolversParentTypes['IssuingDisputeEvidence']> = ResolversObject<{
  canceled?: Resolver<Maybe<ResolversTypes['IssuingDisputeCanceledEvidence']>, ParentType, ContextType>;
  duplicate?: Resolver<Maybe<ResolversTypes['IssuingDisputeDuplicateEvidence']>, ParentType, ContextType>;
  fraudulent?: Resolver<Maybe<ResolversTypes['IssuingDisputeFraudulentEvidence']>, ParentType, ContextType>;
  merchandiseNotAsDescribed?: Resolver<Maybe<ResolversTypes['IssuingDisputeMerchandiseNotAsDescribedEvidence']>, ParentType, ContextType>;
  notReceived?: Resolver<Maybe<ResolversTypes['IssuingDisputeNotReceivedEvidence']>, ParentType, ContextType>;
  other?: Resolver<Maybe<ResolversTypes['IssuingDisputeOtherEvidence']>, ParentType, ContextType>;
  reason?: Resolver<ResolversTypes['Reason14'], ParentType, ContextType>;
  serviceNotAsDescribed?: Resolver<Maybe<ResolversTypes['IssuingDisputeServiceNotAsDescribedEvidence']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type IssuingDisputeCanceledEvidenceResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['IssuingDisputeCanceledEvidence'] = ResolversParentTypes['IssuingDisputeCanceledEvidence']> = ResolversObject<{
  additionalDocumentation?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  canceledAt?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  cancellationPolicyProvided?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  cancellationReason?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  expectedAt?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  explanation?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  productDescription?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  productType?: Resolver<Maybe<ResolversTypes['ProductType']>, ParentType, ContextType>;
  returnStatus?: Resolver<Maybe<ResolversTypes['ReturnStatus']>, ParentType, ContextType>;
  returnedAt?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ProductTypeResolvers = { MERCHANDISE: 'merchandise', SERVICE: 'service' };

export type ReturnStatusResolvers = { MERCHANT_REJECTED: 'merchant_rejected', SUCCESSFUL: 'successful' };

export type IssuingDisputeDuplicateEvidenceResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['IssuingDisputeDuplicateEvidence'] = ResolversParentTypes['IssuingDisputeDuplicateEvidence']> = ResolversObject<{
  additionalDocumentation?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  cardStatement?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  cashReceipt?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  checkImage?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  explanation?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  originalTransaction?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type IssuingDisputeFraudulentEvidenceResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['IssuingDisputeFraudulentEvidence'] = ResolversParentTypes['IssuingDisputeFraudulentEvidence']> = ResolversObject<{
  additionalDocumentation?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  explanation?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type IssuingDisputeMerchandiseNotAsDescribedEvidenceResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['IssuingDisputeMerchandiseNotAsDescribedEvidence'] = ResolversParentTypes['IssuingDisputeMerchandiseNotAsDescribedEvidence']> = ResolversObject<{
  additionalDocumentation?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  explanation?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  receivedAt?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  returnDescription?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  returnStatus?: Resolver<Maybe<ResolversTypes['ReturnStatus']>, ParentType, ContextType>;
  returnedAt?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type IssuingDisputeNotReceivedEvidenceResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['IssuingDisputeNotReceivedEvidence'] = ResolversParentTypes['IssuingDisputeNotReceivedEvidence']> = ResolversObject<{
  additionalDocumentation?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  expectedAt?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  explanation?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  productDescription?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  productType?: Resolver<Maybe<ResolversTypes['ProductType']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type IssuingDisputeOtherEvidenceResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['IssuingDisputeOtherEvidence'] = ResolversParentTypes['IssuingDisputeOtherEvidence']> = ResolversObject<{
  additionalDocumentation?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  explanation?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  productDescription?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  productType?: Resolver<Maybe<ResolversTypes['ProductType']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Reason14Resolvers = { CANCELED: 'canceled', DUPLICATE: 'duplicate', FRAUDULENT: 'fraudulent', MERCHANDISE_NOT_AS_DESCRIBED: 'merchandise_not_as_described', NOT_RECEIVED: 'not_received', OTHER: 'other', SERVICE_NOT_AS_DESCRIBED: 'service_not_as_described' };

export type IssuingDisputeServiceNotAsDescribedEvidenceResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['IssuingDisputeServiceNotAsDescribedEvidence'] = ResolversParentTypes['IssuingDisputeServiceNotAsDescribedEvidence']> = ResolversObject<{
  additionalDocumentation?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  canceledAt?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  cancellationReason?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  explanation?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  receivedAt?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Object55Resolvers = { ISSUING_DISPUTE: 'issuing.dispute' };

export type Status34Resolvers = { EXPIRED: 'expired', LOST: 'lost', SUBMITTED: 'submitted', UNSUBMITTED: 'unsubmitted', WON: 'won' };

export type Status60Resolvers = { EXPIRED: 'expired', LOST: 'lost', SUBMITTED: 'submitted', UNSUBMITTED: 'unsubmitted', WON: 'won' };

export type V1IssuingSettlements2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['V1IssuingSettlements2'] = ResolversParentTypes['V1IssuingSettlements2']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['IssuingSettlement']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type IssuingSettlementResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['IssuingSettlement'] = ResolversParentTypes['IssuingSettlement']> = ResolversObject<{
  bin?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  clearingDate?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  created?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  currency?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  interchangeFees?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  livemode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  metadata?: Resolver<ResolversTypes['JSON'], ParentType, ContextType>;
  netTotal?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  network?: Resolver<ResolversTypes['Network5'], ParentType, ContextType>;
  networkFees?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  networkSettlementIdentifier?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object56'], ParentType, ContextType>;
  settlementService?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  transactionCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  transactionVolume?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Network5Resolvers = { VISA: 'visa' };

export type Object56Resolvers = { ISSUING_SETTLEMENT: 'issuing.settlement' };

export type V1IssuingTransactions2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['V1IssuingTransactions2'] = ResolversParentTypes['V1IssuingTransactions2']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['IssuingTransaction']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Type71Resolvers = { CAPTURE: 'capture', REFUND: 'refund' };

export type Mandate6Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Mandate6'] = ResolversParentTypes['Mandate6']> = ResolversObject<{
  customerAcceptance?: Resolver<ResolversTypes['CustomerAcceptance'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  livemode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  multiUse?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object57'], ParentType, ContextType>;
  paymentMethod?: Resolver<ResolversTypes['JSON'], ParentType, ContextType>;
  paymentMethodDetails?: Resolver<ResolversTypes['MandatePaymentMethodDetails'], ParentType, ContextType>;
  singleUse?: Resolver<Maybe<ResolversTypes['MandateSingleUse']>, ParentType, ContextType>;
  status?: Resolver<ResolversTypes['Status35'], ParentType, ContextType>;
  type?: Resolver<ResolversTypes['Type43'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CustomerAcceptanceResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CustomerAcceptance'] = ResolversParentTypes['CustomerAcceptance']> = ResolversObject<{
  acceptedAt?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  offline?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  online?: Resolver<Maybe<ResolversTypes['OnlineAcceptance']>, ParentType, ContextType>;
  type?: Resolver<ResolversTypes['Type41'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type OnlineAcceptanceResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['OnlineAcceptance'] = ResolversParentTypes['OnlineAcceptance']> = ResolversObject<{
  ipAddress?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  userAgent?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Type41Resolvers = { OFFLINE: 'offline', ONLINE: 'online' };

export type Object57Resolvers = { MANDATE: 'mandate' };

export type MandatePaymentMethodDetailsResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['MandatePaymentMethodDetails'] = ResolversParentTypes['MandatePaymentMethodDetails']> = ResolversObject<{
  acssDebit?: Resolver<Maybe<ResolversTypes['MandateAcssDebit']>, ParentType, ContextType>;
  auBecsDebit?: Resolver<Maybe<ResolversTypes['MandateAuBecsDebit']>, ParentType, ContextType>;
  bacsDebit?: Resolver<Maybe<ResolversTypes['MandateBacsDebit']>, ParentType, ContextType>;
  card?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  sepaDebit?: Resolver<Maybe<ResolversTypes['MandateSepaDebit']>, ParentType, ContextType>;
  type?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type MandateAcssDebitResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['MandateAcssDebit'] = ResolversParentTypes['MandateAcssDebit']> = ResolversObject<{
  intervalDescription?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  paymentSchedule?: Resolver<ResolversTypes['PaymentSchedule3'], ParentType, ContextType>;
  transactionType?: Resolver<ResolversTypes['TransactionType3'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type PaymentSchedule3Resolvers = { COMBINED: 'combined', INTERVAL: 'interval', SPORADIC: 'sporadic' };

export type TransactionType3Resolvers = { BUSINESS: 'business', PERSONAL: 'personal' };

export type MandateAuBecsDebitResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['MandateAuBecsDebit'] = ResolversParentTypes['MandateAuBecsDebit']> = ResolversObject<{
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type MandateBacsDebitResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['MandateBacsDebit'] = ResolversParentTypes['MandateBacsDebit']> = ResolversObject<{
  networkStatus?: Resolver<ResolversTypes['NetworkStatus2'], ParentType, ContextType>;
  reference?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type NetworkStatus2Resolvers = { ACCEPTED: 'accepted', PENDING: 'pending', REFUSED: 'refused', REVOKED: 'revoked' };

export type MandateSepaDebitResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['MandateSepaDebit'] = ResolversParentTypes['MandateSepaDebit']> = ResolversObject<{
  reference?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type MandateSingleUseResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['MandateSingleUse'] = ResolversParentTypes['MandateSingleUse']> = ResolversObject<{
  amount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  currency?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Status35Resolvers = { ACTIVE: 'active', INACTIVE: 'inactive', PENDING: 'pending' };

export type Type43Resolvers = { MULTI_USE: 'multi_use', SINGLE_USE: 'single_use' };

export type V1OrderReturns2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['V1OrderReturns2'] = ResolversParentTypes['V1OrderReturns2']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['OrderReturn']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type OrderReturnResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['OrderReturn'] = ResolversParentTypes['OrderReturn']> = ResolversObject<{
  amount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  created?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  currency?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  items?: Resolver<Array<Maybe<ResolversTypes['OrderItem']>>, ParentType, ContextType>;
  livemode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object59'], ParentType, ContextType>;
  order?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  refund?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Object58Resolvers = { ORDER_ITEM: 'order_item' };

export type Object59Resolvers = { ORDER_RETURN: 'order_return' };

export type V1Orders2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['V1Orders2'] = ResolversParentTypes['V1Orders2']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['Order3']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Order3Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Order3'] = ResolversParentTypes['Order3']> = ResolversObject<{
  amount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  amountReturned?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  application?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  applicationFee?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  charge?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  created?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  currency?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  customer?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  email?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  externalCouponCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  items?: Resolver<Array<Maybe<ResolversTypes['OrderItem']>>, ParentType, ContextType>;
  livemode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  metadata?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object60'], ParentType, ContextType>;
  returns?: Resolver<Maybe<ResolversTypes['Returns']>, ParentType, ContextType>;
  selectedShippingMethod?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  shipping?: Resolver<Maybe<ResolversTypes['Shipping11']>, ParentType, ContextType>;
  shippingMethods?: Resolver<Maybe<Array<Maybe<ResolversTypes['ShippingMethod']>>>, ParentType, ContextType>;
  status?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  statusTransitions?: Resolver<Maybe<ResolversTypes['StatusTransitions']>, ParentType, ContextType>;
  updated?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  upstreamId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Object60Resolvers = { ORDER: 'order' };

export type ReturnsResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Returns'] = ResolversParentTypes['Returns']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['OrderReturn']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Shipping11Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Shipping11'] = ResolversParentTypes['Shipping11']> = ResolversObject<{
  address?: Resolver<Maybe<ResolversTypes['Address']>, ParentType, ContextType>;
  carrier?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  phone?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  trackingNumber?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ShippingMethodResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ShippingMethod'] = ResolversParentTypes['ShippingMethod']> = ResolversObject<{
  amount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  currency?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  deliveryEstimate?: Resolver<Maybe<ResolversTypes['DeliveryEstimate']>, ParentType, ContextType>;
  description?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type DeliveryEstimateResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['DeliveryEstimate'] = ResolversParentTypes['DeliveryEstimate']> = ResolversObject<{
  date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  earliest?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  latest?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type StatusTransitionsResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['StatusTransitions'] = ResolversParentTypes['StatusTransitions']> = ResolversObject<{
  canceled?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  fulfiled?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  paid?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  returned?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type PaymentFlowsPaymentIntentListResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PaymentFlowsPaymentIntentList'] = ResolversParentTypes['PaymentFlowsPaymentIntentList']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['PaymentIntent7']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type PaymentFlowsPaymentMethodListResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PaymentFlowsPaymentMethodList'] = ResolversParentTypes['PaymentFlowsPaymentMethodList']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['PaymentMethod3']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Type72Resolvers = { ACSS_DEBIT: 'acss_debit', AFTERPAY_CLEARPAY: 'afterpay_clearpay', ALIPAY: 'alipay', AU_BECS_DEBIT: 'au_becs_debit', BACS_DEBIT: 'bacs_debit', BANCONTACT: 'bancontact', BOLETO: 'boleto', CARD: 'card', EPS: 'eps', FPX: 'fpx', GIROPAY: 'giropay', GRABPAY: 'grabpay', IDEAL: 'ideal', OXXO: 'oxxo', P24: 'p24', SEPA_DEBIT: 'sepa_debit', SOFORT: 'sofort', WECHAT_PAY: 'wechat_pay' };

export type PayoutListResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PayoutList'] = ResolversParentTypes['PayoutList']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['Payout']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type PayoutResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Payout'] = ResolversParentTypes['Payout']> = ResolversObject<{
  amount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  arrivalDate?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  automatic?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  balanceTransaction?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  created?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  currency?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  destination?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  failureBalanceTransaction?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  failureCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  failureMessage?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  livemode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  metadata?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  method?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object61'], ParentType, ContextType>;
  originalPayout?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  reversedBy?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  sourceType?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  statementDescriptor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  status?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  type?: Resolver<ResolversTypes['Type50'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Object61Resolvers = { PAYOUT: 'payout' };

export type Type50Resolvers = { BANK_ACCOUNT: 'bank_account', CARD: 'card' };

export type PlanListResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PlanList'] = ResolversParentTypes['PlanList']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['Plan4']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Plan4Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Plan4'] = ResolversParentTypes['Plan4']> = ResolversObject<{
  active?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  aggregateUsage?: Resolver<Maybe<ResolversTypes['AggregateUsage2']>, ParentType, ContextType>;
  amount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  amountDecimal?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  billingScheme?: Resolver<ResolversTypes['BillingScheme2'], ParentType, ContextType>;
  created?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  currency?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  interval?: Resolver<ResolversTypes['Interval4'], ParentType, ContextType>;
  intervalCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  livemode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  metadata?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  nickname?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object62'], ParentType, ContextType>;
  product?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  tiers?: Resolver<Maybe<Array<Maybe<ResolversTypes['PlanTier']>>>, ParentType, ContextType>;
  tiersMode?: Resolver<Maybe<ResolversTypes['TiersMode']>, ParentType, ContextType>;
  transformUsage?: Resolver<Maybe<ResolversTypes['TransformUsage']>, ParentType, ContextType>;
  trialPeriodDays?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  usageType?: Resolver<ResolversTypes['UsageType'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AggregateUsage2Resolvers = { LAST_DURING_PERIOD: 'last_during_period', LAST_EVER: 'last_ever', MAX: 'max', SUM: 'sum' };

export type BillingScheme2Resolvers = { PER_UNIT: 'per_unit', TIERED: 'tiered' };

export type Object62Resolvers = { PLAN: 'plan' };

export type PlanTierResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PlanTier'] = ResolversParentTypes['PlanTier']> = ResolversObject<{
  flatAmount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  flatAmountDecimal?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  unitAmount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  unitAmountDecimal?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  upTo?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type TransformUsageResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['TransformUsage'] = ResolversParentTypes['TransformUsage']> = ResolversObject<{
  divideBy?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  round?: Resolver<Maybe<ResolversTypes['Round']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type PriceListResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PriceList'] = ResolversParentTypes['PriceList']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['Price3']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type UsageType2Resolvers = { LICENSED: 'licensed', METERED: 'metered' };

export type Type73Resolvers = { ONE_TIME: 'one_time', RECURRING: 'recurring' };

export type V1Products2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['V1Products2'] = ResolversParentTypes['V1Products2']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['Product14']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Product14Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Product14'] = ResolversParentTypes['Product14']> = ResolversObject<{
  active?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  created?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  images?: Resolver<Array<Maybe<ResolversTypes['String']>>, ParentType, ContextType>;
  livemode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  metadata?: Resolver<ResolversTypes['JSON'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object63'], ParentType, ContextType>;
  packageDimensions?: Resolver<Maybe<ResolversTypes['PackageDimensions']>, ParentType, ContextType>;
  shippable?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  statementDescriptor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  taxCode?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  unitLabel?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  updated?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Object63Resolvers = { PRODUCT: 'product' };

export type PackageDimensionsResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PackageDimensions'] = ResolversParentTypes['PackageDimensions']> = ResolversObject<{
  height?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  length?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  weight?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  width?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type V1PromotionCodes2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['V1PromotionCodes2'] = ResolversParentTypes['V1PromotionCodes2']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['PromotionCode11']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type PromotionCode11Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PromotionCode11'] = ResolversParentTypes['PromotionCode11']> = ResolversObject<{
  active?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  code?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  coupon?: Resolver<ResolversTypes['Coupon'], ParentType, ContextType>;
  created?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  customer?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  expiresAt?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  livemode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  maxRedemptions?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  metadata?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object64'], ParentType, ContextType>;
  restrictions?: Resolver<ResolversTypes['PromotionCodesResourceRestrictions'], ParentType, ContextType>;
  timesRedeemed?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Object64Resolvers = { PROMOTION_CODE: 'promotion_code' };

export type PromotionCodesResourceRestrictionsResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PromotionCodesResourceRestrictions'] = ResolversParentTypes['PromotionCodesResourceRestrictions']> = ResolversObject<{
  firstTimeTransaction?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  minimumAmount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  minimumAmountCurrency?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type V1Quotes2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['V1Quotes2'] = ResolversParentTypes['V1Quotes2']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['Quote2']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Quote2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Quote2'] = ResolversParentTypes['Quote2']> = ResolversObject<{
  amountSubtotal?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  amountTotal?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  applicationFeeAmount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  applicationFeePercent?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  automaticTax?: Resolver<ResolversTypes['QuotesResourceAutomaticTax'], ParentType, ContextType>;
  collectionMethod?: Resolver<ResolversTypes['CollectionMethod6'], ParentType, ContextType>;
  computed?: Resolver<ResolversTypes['QuotesResourceComputed'], ParentType, ContextType>;
  created?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  currency?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  customer?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  defaultTaxRates?: Resolver<Maybe<Array<Maybe<ResolversTypes['JSON']>>>, ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  discounts?: Resolver<Array<Maybe<ResolversTypes['JSON']>>, ParentType, ContextType>;
  expiresAt?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  footer?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  fromQuote?: Resolver<Maybe<ResolversTypes['FromQuote']>, ParentType, ContextType>;
  header?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  invoice?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  invoiceSettings?: Resolver<Maybe<ResolversTypes['InvoiceSettings3']>, ParentType, ContextType>;
  lineItems?: Resolver<Maybe<ResolversTypes['LineItems3']>, ParentType, ContextType>;
  livemode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  metadata?: Resolver<ResolversTypes['JSON'], ParentType, ContextType>;
  number?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object65'], ParentType, ContextType>;
  onBehalfOf?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  status?: Resolver<ResolversTypes['Status40'], ParentType, ContextType>;
  statusTransitions?: Resolver<ResolversTypes['QuotesResourceStatusTransitions'], ParentType, ContextType>;
  subscription?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  subscriptionData?: Resolver<ResolversTypes['QuotesResourceSubscriptionData'], ParentType, ContextType>;
  subscriptionSchedule?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  totalDetails?: Resolver<ResolversTypes['QuotesResourceTotalDetails'], ParentType, ContextType>;
  transferData?: Resolver<Maybe<ResolversTypes['TransferData12']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type QuotesResourceAutomaticTaxResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['QuotesResourceAutomaticTax'] = ResolversParentTypes['QuotesResourceAutomaticTax']> = ResolversObject<{
  enabled?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['Status39']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Status39Resolvers = { COMPLETE: 'complete', FAILED: 'failed', REQUIRES_LOCATION_INPUTS: 'requires_location_inputs' };

export type CollectionMethod6Resolvers = { CHARGE_AUTOMATICALLY: 'charge_automatically', SEND_INVOICE: 'send_invoice' };

export type QuotesResourceComputedResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['QuotesResourceComputed'] = ResolversParentTypes['QuotesResourceComputed']> = ResolversObject<{
  recurring?: Resolver<Maybe<ResolversTypes['Recurring3']>, ParentType, ContextType>;
  upfront?: Resolver<ResolversTypes['QuotesResourceUpfront'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Recurring3Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Recurring3'] = ResolversParentTypes['Recurring3']> = ResolversObject<{
  amountSubtotal?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  amountTotal?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  interval?: Resolver<Maybe<ResolversTypes['Interval4']>, ParentType, ContextType>;
  intervalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  totalDetails?: Resolver<Maybe<ResolversTypes['TotalDetails2']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type TotalDetails2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['TotalDetails2'] = ResolversParentTypes['TotalDetails2']> = ResolversObject<{
  amountDiscount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  amountShipping?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  amountTax?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  breakdown?: Resolver<Maybe<ResolversTypes['QuotesResourceTotalDetailsResourceBreakdown']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type QuotesResourceTotalDetailsResourceBreakdownResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['QuotesResourceTotalDetailsResourceBreakdown'] = ResolversParentTypes['QuotesResourceTotalDetailsResourceBreakdown']> = ResolversObject<{
  discounts?: Resolver<Array<Maybe<ResolversTypes['LineItemsDiscountAmount']>>, ParentType, ContextType>;
  taxes?: Resolver<Array<Maybe<ResolversTypes['LineItemsTaxAmount']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type QuotesResourceUpfrontResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['QuotesResourceUpfront'] = ResolversParentTypes['QuotesResourceUpfront']> = ResolversObject<{
  amountSubtotal?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  amountTotal?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  lineItems?: Resolver<Maybe<ResolversTypes['QuotesResourceListLineItems']>, ParentType, ContextType>;
  totalDetails?: Resolver<ResolversTypes['QuotesResourceTotalDetails'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type QuotesResourceListLineItemsResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['QuotesResourceListLineItems'] = ResolversParentTypes['QuotesResourceListLineItems']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['Item']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type QuotesResourceTotalDetailsResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['QuotesResourceTotalDetails'] = ResolversParentTypes['QuotesResourceTotalDetails']> = ResolversObject<{
  amountDiscount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  amountShipping?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  amountTax?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  breakdown?: Resolver<Maybe<ResolversTypes['QuotesResourceTotalDetailsResourceBreakdown']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type FromQuoteResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['FromQuote'] = ResolversParentTypes['FromQuote']> = ResolversObject<{
  isRevision?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  quote?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type InvoiceSettings3Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['InvoiceSettings3'] = ResolversParentTypes['InvoiceSettings3']> = ResolversObject<{
  daysUntilDue?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type LineItems3Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['LineItems3'] = ResolversParentTypes['LineItems3']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['Item']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Object65Resolvers = { QUOTE: 'quote' };

export type Status40Resolvers = { ACCEPTED: 'accepted', CANCELED: 'canceled', DRAFT: 'draft', OPEN: 'open' };

export type QuotesResourceStatusTransitionsResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['QuotesResourceStatusTransitions'] = ResolversParentTypes['QuotesResourceStatusTransitions']> = ResolversObject<{
  acceptedAt?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  canceledAt?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  finalizedAt?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type QuotesResourceSubscriptionDataResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['QuotesResourceSubscriptionData'] = ResolversParentTypes['QuotesResourceSubscriptionData']> = ResolversObject<{
  effectiveDate?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  trialPeriodDays?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type TransferData12Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['TransferData12'] = ResolversParentTypes['TransferData12']> = ResolversObject<{
  amount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  amountPercent?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  destination?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Status63Resolvers = { ACCEPTED: 'accepted', CANCELED: 'canceled', DRAFT: 'draft', OPEN: 'open' };

export type QuotesResourceListLineItems2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['QuotesResourceListLineItems2'] = ResolversParentTypes['QuotesResourceListLineItems2']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['Item']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type RadarEarlyFraudWarningListResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RadarEarlyFraudWarningList'] = ResolversParentTypes['RadarEarlyFraudWarningList']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['RadarEarlyFraudWarning']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type RadarEarlyFraudWarningResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RadarEarlyFraudWarning'] = ResolversParentTypes['RadarEarlyFraudWarning']> = ResolversObject<{
  actionable?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  charge?: Resolver<ResolversTypes['JSON'], ParentType, ContextType>;
  created?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  fraudType?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  livemode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object66'], ParentType, ContextType>;
  paymentIntent?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Object66Resolvers = { RADAR_EARLY_FRAUD_WARNING: 'radar.early_fraud_warning' };

export type V1RadarValueListItems2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['V1RadarValueListItems2'] = ResolversParentTypes['V1RadarValueListItems2']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['RadarValueListItem']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type RadarValueListItemResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RadarValueListItem'] = ResolversParentTypes['RadarValueListItem']> = ResolversObject<{
  created?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  createdBy?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  livemode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object67'], ParentType, ContextType>;
  value?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  valueList?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Object67Resolvers = { RADAR_VALUE_LIST_ITEM: 'radar.value_list_item' };

export type V1RadarValueLists2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['V1RadarValueLists2'] = ResolversParentTypes['V1RadarValueLists2']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['RadarValueList']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type RadarValueListResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RadarValueList'] = ResolversParentTypes['RadarValueList']> = ResolversObject<{
  alias?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  created?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  createdBy?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  itemType?: Resolver<ResolversTypes['ItemType'], ParentType, ContextType>;
  listItems?: Resolver<ResolversTypes['ListItems'], ParentType, ContextType>;
  livemode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  metadata?: Resolver<ResolversTypes['JSON'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object68'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ItemTypeResolvers = { CARD_BIN: 'card_bin', CARD_FINGERPRINT: 'card_fingerprint', CASE_SENSITIVE_STRING: 'case_sensitive_string', COUNTRY: 'country', EMAIL: 'email', IP_ADDRESS: 'ip_address', STRING: 'string' };

export type ListItemsResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ListItems'] = ResolversParentTypes['ListItems']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['RadarValueListItem']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Object68Resolvers = { RADAR_VALUE_LIST: 'radar.value_list' };

export type V1Recipients2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['V1Recipients2'] = ResolversParentTypes['V1Recipients2']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['Recipient10']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Recipient10Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Recipient10'] = ResolversParentTypes['Recipient10']> = ResolversObject<{
  activeAccount?: Resolver<Maybe<ResolversTypes['ActiveAccount']>, ParentType, ContextType>;
  cards?: Resolver<Maybe<ResolversTypes['Cards']>, ParentType, ContextType>;
  created?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  defaultCard?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  email?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  livemode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  metadata?: Resolver<ResolversTypes['JSON'], ParentType, ContextType>;
  migratedTo?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object69'], ParentType, ContextType>;
  rolledBackFrom?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  type?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ActiveAccountResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ActiveAccount'] = ResolversParentTypes['ActiveAccount']> = ResolversObject<{
  account?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  accountHolderName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  accountHolderType?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  accountType?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  availablePayoutMethods?: Resolver<Maybe<Array<Maybe<ResolversTypes['AvailablePayoutMethods2ListItem']>>>, ParentType, ContextType>;
  bankName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  country?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  currency?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  customer?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  defaultForCurrency?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  fingerprint?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  last4?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  metadata?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  object?: Resolver<Maybe<ResolversTypes['Object35']>, ParentType, ContextType>;
  routingNumber?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CardsResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Cards'] = ResolversParentTypes['Cards']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['Card2']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Object69Resolvers = { RECIPIENT: 'recipient' };

export type Type74Resolvers = { CORPORATION: 'corporation', INDIVIDUAL: 'individual' };

export type V1Recipient2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['V1Recipient2'] = ResolversParentTypes['V1Recipient2']> = ResolversObject<{
  activeAccount?: Resolver<Maybe<ResolversTypes['ActiveAccount']>, ParentType, ContextType>;
  cards?: Resolver<Maybe<ResolversTypes['Cards']>, ParentType, ContextType>;
  created?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  defaultCard?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  deleted?: Resolver<Maybe<ResolversTypes['Deleted']>, ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  email?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  livemode?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  metadata?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  migratedTo?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  object?: Resolver<Maybe<ResolversTypes['Object69']>, ParentType, ContextType>;
  rolledBackFrom?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type V1Refunds2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['V1Refunds2'] = ResolversParentTypes['V1Refunds2']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['Refund']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type V1ReportingReportRuns2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['V1ReportingReportRuns2'] = ResolversParentTypes['V1ReportingReportRuns2']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['ReportingReportRun']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ReportingReportRunResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ReportingReportRun'] = ResolversParentTypes['ReportingReportRun']> = ResolversObject<{
  created?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  error?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  livemode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object70'], ParentType, ContextType>;
  parameters?: Resolver<ResolversTypes['FinancialReportingFinanceReportRunRunParameters'], ParentType, ContextType>;
  reportType?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  result?: Resolver<Maybe<ResolversTypes['Result2']>, ParentType, ContextType>;
  status?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  succeededAt?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Object70Resolvers = { REPORTING_REPORT_RUN: 'reporting.report_run' };

export type FinancialReportingFinanceReportRunRunParametersResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['FinancialReportingFinanceReportRunRunParameters'] = ResolversParentTypes['FinancialReportingFinanceReportRunRunParameters']> = ResolversObject<{
  columns?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>;
  connectedAccount?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  currency?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  intervalEnd?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  intervalStart?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  payout?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  reportingCategory?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  timezone?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Result2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Result2'] = ResolversParentTypes['Result2']> = ResolversObject<{
  created?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  expiresAt?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  filename?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  links?: Resolver<Maybe<ResolversTypes['Links']>, ParentType, ContextType>;
  object?: Resolver<Maybe<ResolversTypes['Object41']>, ParentType, ContextType>;
  purpose?: Resolver<Maybe<ResolversTypes['Purpose']>, ParentType, ContextType>;
  size?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type FinancialReportingFinanceReportTypeListResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['FinancialReportingFinanceReportTypeList'] = ResolversParentTypes['FinancialReportingFinanceReportTypeList']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['ReportingReportType']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ReportingReportTypeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ReportingReportType'] = ResolversParentTypes['ReportingReportType']> = ResolversObject<{
  dataAvailableEnd?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  dataAvailableStart?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  defaultColumns?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object71'], ParentType, ContextType>;
  updated?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  version?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Object71Resolvers = { REPORTING_REPORT_TYPE: 'reporting.report_type' };

export type V1Reviews2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['V1Reviews2'] = ResolversParentTypes['V1Reviews2']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['Review3']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Review3Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Review3'] = ResolversParentTypes['Review3']> = ResolversObject<{
  billingZip?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  charge?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  closedReason?: Resolver<Maybe<ResolversTypes['ClosedReason']>, ParentType, ContextType>;
  created?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  ipAddress?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  ipAddressLocation?: Resolver<Maybe<ResolversTypes['IpAddressLocation']>, ParentType, ContextType>;
  livemode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object72'], ParentType, ContextType>;
  open?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  openedReason?: Resolver<ResolversTypes['OpenedReason'], ParentType, ContextType>;
  paymentIntent?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  reason?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  session?: Resolver<Maybe<ResolversTypes['Session']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ClosedReasonResolvers = { APPROVED: 'approved', DISPUTED: 'disputed', REDACTED: 'redacted', REFUNDED: 'refunded', REFUNDED_AS_FRAUD: 'refunded_as_fraud' };

export type IpAddressLocationResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['IpAddressLocation'] = ResolversParentTypes['IpAddressLocation']> = ResolversObject<{
  city?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  country?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  latitude?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  longitude?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  region?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Object72Resolvers = { REVIEW: 'review' };

export type OpenedReasonResolvers = { MANUAL: 'manual', RULE: 'rule' };

export type SessionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Session'] = ResolversParentTypes['Session']> = ResolversObject<{
  browser?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  device?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  platform?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  version?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type PaymentFlowsSetupIntentSetupAttemptListResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PaymentFlowsSetupIntentSetupAttemptList'] = ResolversParentTypes['PaymentFlowsSetupIntentSetupAttemptList']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['SetupAttempt3']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SetupAttempt3Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SetupAttempt3'] = ResolversParentTypes['SetupAttempt3']> = ResolversObject<{
  application?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  created?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  customer?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  livemode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object73'], ParentType, ContextType>;
  onBehalfOf?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  paymentMethod?: Resolver<ResolversTypes['JSON'], ParentType, ContextType>;
  paymentMethodDetails?: Resolver<ResolversTypes['SetupAttemptPaymentMethodDetails'], ParentType, ContextType>;
  setupError?: Resolver<Maybe<ResolversTypes['SetupError']>, ParentType, ContextType>;
  setupIntent?: Resolver<ResolversTypes['JSON'], ParentType, ContextType>;
  status?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  usage?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Object73Resolvers = { SETUP_ATTEMPT: 'setup_attempt' };

export type SetupAttemptPaymentMethodDetailsResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SetupAttemptPaymentMethodDetails'] = ResolversParentTypes['SetupAttemptPaymentMethodDetails']> = ResolversObject<{
  acssDebit?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  auBecsDebit?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  bacsDebit?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  bancontact?: Resolver<Maybe<ResolversTypes['SetupAttemptPaymentMethodDetailsBancontact']>, ParentType, ContextType>;
  card?: Resolver<Maybe<ResolversTypes['SetupAttemptPaymentMethodDetailsCard']>, ParentType, ContextType>;
  cardPresent?: Resolver<Maybe<ResolversTypes['SetupAttemptPaymentMethodDetailsCardPresent']>, ParentType, ContextType>;
  ideal?: Resolver<Maybe<ResolversTypes['SetupAttemptPaymentMethodDetailsIdeal']>, ParentType, ContextType>;
  sepaDebit?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  sofort?: Resolver<Maybe<ResolversTypes['SetupAttemptPaymentMethodDetailsSofort']>, ParentType, ContextType>;
  type?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SetupAttemptPaymentMethodDetailsBancontactResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SetupAttemptPaymentMethodDetailsBancontact'] = ResolversParentTypes['SetupAttemptPaymentMethodDetailsBancontact']> = ResolversObject<{
  bankCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  bankName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  bic?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  generatedSepaDebit?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  generatedSepaDebitMandate?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  ibanLast4?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  preferredLanguage?: Resolver<Maybe<ResolversTypes['PreferredLanguage']>, ParentType, ContextType>;
  verifiedName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SetupAttemptPaymentMethodDetailsCardResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SetupAttemptPaymentMethodDetailsCard'] = ResolversParentTypes['SetupAttemptPaymentMethodDetailsCard']> = ResolversObject<{
  threeDSecure?: Resolver<Maybe<ResolversTypes['ThreeDSecure6']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ThreeDSecure6Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ThreeDSecure6'] = ResolversParentTypes['ThreeDSecure6']> = ResolversObject<{
  authenticationFlow?: Resolver<Maybe<ResolversTypes['AuthenticationFlow']>, ParentType, ContextType>;
  result?: Resolver<Maybe<ResolversTypes['Result']>, ParentType, ContextType>;
  resultReason?: Resolver<Maybe<ResolversTypes['ResultReason']>, ParentType, ContextType>;
  version?: Resolver<Maybe<ResolversTypes['Version']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SetupAttemptPaymentMethodDetailsCardPresentResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SetupAttemptPaymentMethodDetailsCardPresent'] = ResolversParentTypes['SetupAttemptPaymentMethodDetailsCardPresent']> = ResolversObject<{
  generatedCard?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SetupAttemptPaymentMethodDetailsIdealResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SetupAttemptPaymentMethodDetailsIdeal'] = ResolversParentTypes['SetupAttemptPaymentMethodDetailsIdeal']> = ResolversObject<{
  bank?: Resolver<Maybe<ResolversTypes['Bank3']>, ParentType, ContextType>;
  bic?: Resolver<Maybe<ResolversTypes['Bic3']>, ParentType, ContextType>;
  generatedSepaDebit?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  generatedSepaDebitMandate?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  ibanLast4?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  verifiedName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SetupAttemptPaymentMethodDetailsSofortResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SetupAttemptPaymentMethodDetailsSofort'] = ResolversParentTypes['SetupAttemptPaymentMethodDetailsSofort']> = ResolversObject<{
  bankCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  bankName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  bic?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  generatedSepaDebit?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  generatedSepaDebitMandate?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  ibanLast4?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  preferredLanguage?: Resolver<Maybe<ResolversTypes['PreferredLanguage7']>, ParentType, ContextType>;
  verifiedName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type PreferredLanguage7Resolvers = { DE: 'de', EN: 'en', FR: 'fr', NL: 'nl' };

export type SetupErrorResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SetupError'] = ResolversParentTypes['SetupError']> = ResolversObject<{
  charge?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  declineCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  docUrl?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  message?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  param?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  paymentIntent?: Resolver<Maybe<ResolversTypes['PaymentIntent7']>, ParentType, ContextType>;
  paymentMethod?: Resolver<Maybe<ResolversTypes['PaymentMethod3']>, ParentType, ContextType>;
  paymentMethodType?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  setupIntent?: Resolver<Maybe<ResolversTypes['SetupIntent2']>, ParentType, ContextType>;
  source?: Resolver<Maybe<ResolversTypes['Source9']>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['Type30']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type PaymentFlowsSetupIntentListResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PaymentFlowsSetupIntentList'] = ResolversParentTypes['PaymentFlowsSetupIntentList']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['SetupIntent2']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type V1SigmaScheduledQueryRuns2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['V1SigmaScheduledQueryRuns2'] = ResolversParentTypes['V1SigmaScheduledQueryRuns2']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['ScheduledQueryRun']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ScheduledQueryRunResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ScheduledQueryRun'] = ResolversParentTypes['ScheduledQueryRun']> = ResolversObject<{
  created?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  dataLoadTime?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  error?: Resolver<Maybe<ResolversTypes['SigmaScheduledQueryRunError']>, ParentType, ContextType>;
  file?: Resolver<Maybe<ResolversTypes['File4']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  livemode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object74'], ParentType, ContextType>;
  resultAvailableUntil?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  sql?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  status?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SigmaScheduledQueryRunErrorResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SigmaScheduledQueryRunError'] = ResolversParentTypes['SigmaScheduledQueryRunError']> = ResolversObject<{
  message?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type File4Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['File4'] = ResolversParentTypes['File4']> = ResolversObject<{
  created?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  expiresAt?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  filename?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  links?: Resolver<Maybe<ResolversTypes['Links']>, ParentType, ContextType>;
  object?: Resolver<Maybe<ResolversTypes['Object41']>, ParentType, ContextType>;
  purpose?: Resolver<Maybe<ResolversTypes['Purpose']>, ParentType, ContextType>;
  size?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Object74Resolvers = { SCHEDULED_QUERY_RUN: 'scheduled_query_run' };

export type V1Skus2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['V1Skus2'] = ResolversParentTypes['V1Skus2']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['Sku']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SkuResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Sku'] = ResolversParentTypes['Sku']> = ResolversObject<{
  active?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  attributes?: Resolver<ResolversTypes['JSON'], ParentType, ContextType>;
  created?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  currency?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  image?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  inventory?: Resolver<ResolversTypes['SkuInventory'], ParentType, ContextType>;
  livemode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  metadata?: Resolver<ResolversTypes['JSON'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object75'], ParentType, ContextType>;
  packageDimensions?: Resolver<Maybe<ResolversTypes['PackageDimensions3']>, ParentType, ContextType>;
  price?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  product?: Resolver<ResolversTypes['JSON'], ParentType, ContextType>;
  updated?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SkuInventoryResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SkuInventory'] = ResolversParentTypes['SkuInventory']> = ResolversObject<{
  quantity?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  type?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  value?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Object75Resolvers = { SKU: 'sku' };

export type PackageDimensions3Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PackageDimensions3'] = ResolversParentTypes['PackageDimensions3']> = ResolversObject<{
  height?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  length?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  weight?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  width?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type V1Skus4Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['V1Skus4'] = ResolversParentTypes['V1Skus4']> = ResolversObject<{
  active?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  attributes?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  created?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  currency?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  deleted?: Resolver<Maybe<ResolversTypes['Deleted']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  image?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  inventory?: Resolver<Maybe<ResolversTypes['Inventory2']>, ParentType, ContextType>;
  livemode?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  metadata?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  object?: Resolver<Maybe<ResolversTypes['Object75']>, ParentType, ContextType>;
  packageDimensions?: Resolver<Maybe<ResolversTypes['PackageDimensions3']>, ParentType, ContextType>;
  price?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  product?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  updated?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Inventory2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Inventory2'] = ResolversParentTypes['Inventory2']> = ResolversObject<{
  quantity?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  type?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  value?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Source12Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Source12'] = ResolversParentTypes['Source12']> = ResolversObject<{
  achCreditTransfer?: Resolver<Maybe<ResolversTypes['SourceTypeAchCreditTransfer']>, ParentType, ContextType>;
  achDebit?: Resolver<Maybe<ResolversTypes['SourceTypeAchDebit']>, ParentType, ContextType>;
  acssDebit?: Resolver<Maybe<ResolversTypes['SourceTypeAcssDebit']>, ParentType, ContextType>;
  alipay?: Resolver<Maybe<ResolversTypes['SourceTypeAlipay']>, ParentType, ContextType>;
  amount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  auBecsDebit?: Resolver<Maybe<ResolversTypes['SourceTypeAuBecsDebit']>, ParentType, ContextType>;
  bancontact?: Resolver<Maybe<ResolversTypes['SourceTypeBancontact']>, ParentType, ContextType>;
  card?: Resolver<Maybe<ResolversTypes['SourceTypeCard']>, ParentType, ContextType>;
  cardPresent?: Resolver<Maybe<ResolversTypes['SourceTypeCardPresent']>, ParentType, ContextType>;
  clientSecret?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  codeVerification?: Resolver<Maybe<ResolversTypes['SourceCodeVerificationFlow']>, ParentType, ContextType>;
  created?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  currency?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  customer?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  eps?: Resolver<Maybe<ResolversTypes['SourceTypeEps']>, ParentType, ContextType>;
  flow?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  giropay?: Resolver<Maybe<ResolversTypes['SourceTypeGiropay']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  ideal?: Resolver<Maybe<ResolversTypes['SourceTypeIdeal']>, ParentType, ContextType>;
  klarna?: Resolver<Maybe<ResolversTypes['SourceTypeKlarna']>, ParentType, ContextType>;
  livemode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  metadata?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  multibanco?: Resolver<Maybe<ResolversTypes['SourceTypeMultibanco']>, ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object76'], ParentType, ContextType>;
  owner?: Resolver<Maybe<ResolversTypes['Owner3']>, ParentType, ContextType>;
  p24?: Resolver<Maybe<ResolversTypes['SourceTypeP24']>, ParentType, ContextType>;
  receiver?: Resolver<Maybe<ResolversTypes['SourceReceiverFlow']>, ParentType, ContextType>;
  redirect?: Resolver<Maybe<ResolversTypes['SourceRedirectFlow']>, ParentType, ContextType>;
  sepaDebit?: Resolver<Maybe<ResolversTypes['SourceTypeSepaDebit']>, ParentType, ContextType>;
  sofort?: Resolver<Maybe<ResolversTypes['SourceTypeSofort']>, ParentType, ContextType>;
  sourceOrder?: Resolver<Maybe<ResolversTypes['SourceOrder']>, ParentType, ContextType>;
  statementDescriptor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  status?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  threeDSecure?: Resolver<Maybe<ResolversTypes['SourceTypeThreeDSecure']>, ParentType, ContextType>;
  type?: Resolver<ResolversTypes['Type18'], ParentType, ContextType>;
  usage?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  wechat?: Resolver<Maybe<ResolversTypes['SourceTypeWechat']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SourceTypeAchCreditTransferResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SourceTypeAchCreditTransfer'] = ResolversParentTypes['SourceTypeAchCreditTransfer']> = ResolversObject<{
  accountNumber?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  bankName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  fingerprint?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  refundAccountHolderName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  refundAccountHolderType?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  refundRoutingNumber?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  routingNumber?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  swiftCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SourceTypeAchDebitResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SourceTypeAchDebit'] = ResolversParentTypes['SourceTypeAchDebit']> = ResolversObject<{
  bankName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  country?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  fingerprint?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  last4?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  routingNumber?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SourceTypeAcssDebitResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SourceTypeAcssDebit'] = ResolversParentTypes['SourceTypeAcssDebit']> = ResolversObject<{
  bankAddressCity?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  bankAddressLine1?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  bankAddressLine2?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  bankAddressPostalCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  bankName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  category?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  country?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  fingerprint?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  last4?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  routingNumber?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SourceTypeAlipayResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SourceTypeAlipay'] = ResolversParentTypes['SourceTypeAlipay']> = ResolversObject<{
  dataString?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  nativeUrl?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  statementDescriptor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SourceTypeAuBecsDebitResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SourceTypeAuBecsDebit'] = ResolversParentTypes['SourceTypeAuBecsDebit']> = ResolversObject<{
  bsbNumber?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  fingerprint?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  last4?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SourceTypeBancontactResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SourceTypeBancontact'] = ResolversParentTypes['SourceTypeBancontact']> = ResolversObject<{
  bankCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  bankName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  bic?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  ibanLast4?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  preferredLanguage?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  statementDescriptor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SourceTypeCardResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SourceTypeCard'] = ResolversParentTypes['SourceTypeCard']> = ResolversObject<{
  addressLine1Check?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  addressZipCheck?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  brand?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  country?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  cvcCheck?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  dynamicLast4?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  expMonth?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  expYear?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  fingerprint?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  funding?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  last4?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  threeDSecure?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  tokenizationMethod?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SourceTypeCardPresentResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SourceTypeCardPresent'] = ResolversParentTypes['SourceTypeCardPresent']> = ResolversObject<{
  applicationCryptogram?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  applicationPreferredName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  authorizationCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  authorizationResponseCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  brand?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  country?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  cvmType?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  dataType?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  dedicatedFileName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  emvAuthData?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  evidenceCustomerSignature?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  evidenceTransactionCertificate?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  expMonth?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  expYear?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  fingerprint?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  funding?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  last4?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  posDeviceId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  posEntryMode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  readMethod?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  reader?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  terminalVerificationResults?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  transactionStatusInformation?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SourceCodeVerificationFlowResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SourceCodeVerificationFlow'] = ResolversParentTypes['SourceCodeVerificationFlow']> = ResolversObject<{
  attemptsRemaining?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  status?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SourceTypeEpsResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SourceTypeEps'] = ResolversParentTypes['SourceTypeEps']> = ResolversObject<{
  reference?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  statementDescriptor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SourceTypeGiropayResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SourceTypeGiropay'] = ResolversParentTypes['SourceTypeGiropay']> = ResolversObject<{
  bankCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  bankName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  bic?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  statementDescriptor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SourceTypeIdealResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SourceTypeIdeal'] = ResolversParentTypes['SourceTypeIdeal']> = ResolversObject<{
  bank?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  bic?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  ibanLast4?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  statementDescriptor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SourceTypeKlarnaResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SourceTypeKlarna'] = ResolversParentTypes['SourceTypeKlarna']> = ResolversObject<{
  backgroundImageUrl?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  clientToken?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  firstName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  lastName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  locale?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  logoUrl?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  pageTitle?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  payLaterAssetUrlsDescriptive?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  payLaterAssetUrlsStandard?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  payLaterName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  payLaterRedirectUrl?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  payNowAssetUrlsDescriptive?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  payNowAssetUrlsStandard?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  payNowName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  payNowRedirectUrl?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  payOverTimeAssetUrlsDescriptive?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  payOverTimeAssetUrlsStandard?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  payOverTimeName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  payOverTimeRedirectUrl?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  paymentMethodCategories?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  purchaseCountry?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  purchaseType?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  redirectUrl?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  shippingDelay?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  shippingFirstName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  shippingLastName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SourceTypeMultibancoResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SourceTypeMultibanco'] = ResolversParentTypes['SourceTypeMultibanco']> = ResolversObject<{
  entity?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  reference?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  refundAccountHolderAddressCity?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  refundAccountHolderAddressCountry?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  refundAccountHolderAddressLine1?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  refundAccountHolderAddressLine2?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  refundAccountHolderAddressPostalCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  refundAccountHolderAddressState?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  refundAccountHolderName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  refundIban?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Object76Resolvers = { SOURCE: 'source' };

export type SourceTypeP24Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SourceTypeP24'] = ResolversParentTypes['SourceTypeP24']> = ResolversObject<{
  reference?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SourceReceiverFlowResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SourceReceiverFlow'] = ResolversParentTypes['SourceReceiverFlow']> = ResolversObject<{
  address?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  amountCharged?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  amountReceived?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  amountReturned?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  refundAttributesMethod?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  refundAttributesStatus?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SourceRedirectFlowResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SourceRedirectFlow'] = ResolversParentTypes['SourceRedirectFlow']> = ResolversObject<{
  failureReason?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  returnUrl?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  status?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SourceTypeSepaDebitResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SourceTypeSepaDebit'] = ResolversParentTypes['SourceTypeSepaDebit']> = ResolversObject<{
  bankCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  branchCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  country?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  fingerprint?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  last4?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  mandateReference?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  mandateUrl?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SourceTypeSofortResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SourceTypeSofort'] = ResolversParentTypes['SourceTypeSofort']> = ResolversObject<{
  bankCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  bankName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  bic?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  country?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  ibanLast4?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  preferredLanguage?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  statementDescriptor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SourceTypeThreeDSecureResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SourceTypeThreeDSecure'] = ResolversParentTypes['SourceTypeThreeDSecure']> = ResolversObject<{
  addressLine1Check?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  addressZipCheck?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  authenticated?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  brand?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  card?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  country?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  customer?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  cvcCheck?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  dynamicLast4?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  expMonth?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  expYear?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  fingerprint?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  funding?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  last4?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  threeDSecure?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  tokenizationMethod?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SourceTypeWechatResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SourceTypeWechat'] = ResolversParentTypes['SourceTypeWechat']> = ResolversObject<{
  prepayId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  qrCodeUrl?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  statementDescriptor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SourceMandateNotificationResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SourceMandateNotification'] = ResolversParentTypes['SourceMandateNotification']> = ResolversObject<{
  acssDebit?: Resolver<Maybe<ResolversTypes['SourceMandateNotificationAcssDebitData']>, ParentType, ContextType>;
  amount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  bacsDebit?: Resolver<Maybe<ResolversTypes['SourceMandateNotificationBacsDebitData']>, ParentType, ContextType>;
  created?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  livemode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object77'], ParentType, ContextType>;
  reason?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  sepaDebit?: Resolver<Maybe<ResolversTypes['SourceMandateNotificationSepaDebitData']>, ParentType, ContextType>;
  source?: Resolver<ResolversTypes['Source12'], ParentType, ContextType>;
  status?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  type?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SourceMandateNotificationAcssDebitDataResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SourceMandateNotificationAcssDebitData'] = ResolversParentTypes['SourceMandateNotificationAcssDebitData']> = ResolversObject<{
  statementDescriptor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SourceMandateNotificationBacsDebitDataResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SourceMandateNotificationBacsDebitData'] = ResolversParentTypes['SourceMandateNotificationBacsDebitData']> = ResolversObject<{
  last4?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Object77Resolvers = { SOURCE_MANDATE_NOTIFICATION: 'source_mandate_notification' };

export type SourceMandateNotificationSepaDebitDataResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SourceMandateNotificationSepaDebitData'] = ResolversParentTypes['SourceMandateNotificationSepaDebitData']> = ResolversObject<{
  creditorIdentifier?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  last4?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  mandateReference?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ApmsSourcesSourceTransactionListResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ApmsSourcesSourceTransactionList'] = ResolversParentTypes['ApmsSourcesSourceTransactionList']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['SourceTransaction']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SourceTransactionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SourceTransaction'] = ResolversParentTypes['SourceTransaction']> = ResolversObject<{
  achCreditTransfer?: Resolver<Maybe<ResolversTypes['SourceTransactionAchCreditTransferData']>, ParentType, ContextType>;
  amount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  chfCreditTransfer?: Resolver<Maybe<ResolversTypes['SourceTransactionChfCreditTransferData']>, ParentType, ContextType>;
  created?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  currency?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  gbpCreditTransfer?: Resolver<Maybe<ResolversTypes['SourceTransactionGbpCreditTransferData']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  livemode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object78'], ParentType, ContextType>;
  paperCheck?: Resolver<Maybe<ResolversTypes['SourceTransactionPaperCheckData']>, ParentType, ContextType>;
  sepaCreditTransfer?: Resolver<Maybe<ResolversTypes['SourceTransactionSepaCreditTransferData']>, ParentType, ContextType>;
  source?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  status?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  type?: Resolver<ResolversTypes['Type63'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SourceTransactionAchCreditTransferDataResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SourceTransactionAchCreditTransferData'] = ResolversParentTypes['SourceTransactionAchCreditTransferData']> = ResolversObject<{
  customerData?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  fingerprint?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  last4?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  routingNumber?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SourceTransactionChfCreditTransferDataResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SourceTransactionChfCreditTransferData'] = ResolversParentTypes['SourceTransactionChfCreditTransferData']> = ResolversObject<{
  reference?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  senderAddressCountry?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  senderAddressLine1?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  senderIban?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  senderName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SourceTransactionGbpCreditTransferDataResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SourceTransactionGbpCreditTransferData'] = ResolversParentTypes['SourceTransactionGbpCreditTransferData']> = ResolversObject<{
  fingerprint?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  fundingMethod?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  last4?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  reference?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  senderAccountNumber?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  senderName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  senderSortCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Object78Resolvers = { SOURCE_TRANSACTION: 'source_transaction' };

export type SourceTransactionPaperCheckDataResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SourceTransactionPaperCheckData'] = ResolversParentTypes['SourceTransactionPaperCheckData']> = ResolversObject<{
  availableAt?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  invoices?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SourceTransactionSepaCreditTransferDataResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SourceTransactionSepaCreditTransferData'] = ResolversParentTypes['SourceTransactionSepaCreditTransferData']> = ResolversObject<{
  reference?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  senderIban?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  senderName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Type63Resolvers = { ACH_CREDIT_TRANSFER: 'ach_credit_transfer', ACH_DEBIT: 'ach_debit', ALIPAY: 'alipay', BANCONTACT: 'bancontact', CARD: 'card', CARD_PRESENT: 'card_present', EPS: 'eps', GIROPAY: 'giropay', IDEAL: 'ideal', KLARNA: 'klarna', MULTIBANCO: 'multibanco', P24: 'p24', SEPA_DEBIT: 'sepa_debit', SOFORT: 'sofort', THREE_D_SECURE: 'three_d_secure', WECHAT: 'wechat' };

export type V1SubscriptionItems2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['V1SubscriptionItems2'] = ResolversParentTypes['V1SubscriptionItems2']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['SubscriptionItem']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type V1SubscriptionItemUsageRecordSummaries2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['V1SubscriptionItemUsageRecordSummaries2'] = ResolversParentTypes['V1SubscriptionItemUsageRecordSummaries2']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['UsageRecordSummary']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type UsageRecordSummaryResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['UsageRecordSummary'] = ResolversParentTypes['UsageRecordSummary']> = ResolversObject<{
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  invoice?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  livemode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object79'], ParentType, ContextType>;
  period?: Resolver<ResolversTypes['Period2'], ParentType, ContextType>;
  subscriptionItem?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  totalUsage?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Object79Resolvers = { USAGE_RECORD_SUMMARY: 'usage_record_summary' };

export type Period2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Period2'] = ResolversParentTypes['Period2']> = ResolversObject<{
  end?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  start?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type V1SubscriptionSchedules2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['V1SubscriptionSchedules2'] = ResolversParentTypes['V1SubscriptionSchedules2']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['SubscriptionSchedule2']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SubscriptionSchedule2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SubscriptionSchedule2'] = ResolversParentTypes['SubscriptionSchedule2']> = ResolversObject<{
  canceledAt?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  completedAt?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  created?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  currentPhase?: Resolver<Maybe<ResolversTypes['CurrentPhase']>, ParentType, ContextType>;
  customer?: Resolver<ResolversTypes['JSON'], ParentType, ContextType>;
  defaultSettings?: Resolver<ResolversTypes['SubscriptionSchedulesResourceDefaultSettings'], ParentType, ContextType>;
  endBehavior?: Resolver<ResolversTypes['EndBehavior'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  livemode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  metadata?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object81'], ParentType, ContextType>;
  phases?: Resolver<Array<Maybe<ResolversTypes['SubscriptionSchedulePhaseConfiguration']>>, ParentType, ContextType>;
  releasedAt?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  releasedSubscription?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  status?: Resolver<ResolversTypes['Status51'], ParentType, ContextType>;
  subscription?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CurrentPhaseResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CurrentPhase'] = ResolversParentTypes['CurrentPhase']> = ResolversObject<{
  endDate?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  startDate?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SubscriptionSchedulesResourceDefaultSettingsResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SubscriptionSchedulesResourceDefaultSettings'] = ResolversParentTypes['SubscriptionSchedulesResourceDefaultSettings']> = ResolversObject<{
  applicationFeePercent?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  automaticTax?: Resolver<Maybe<ResolversTypes['SubscriptionSchedulesResourceDefaultSettingsAutomaticTax']>, ParentType, ContextType>;
  billingCycleAnchor?: Resolver<ResolversTypes['BillingCycleAnchor5'], ParentType, ContextType>;
  billingThresholds?: Resolver<Maybe<ResolversTypes['BillingThresholds']>, ParentType, ContextType>;
  collectionMethod?: Resolver<Maybe<ResolversTypes['CollectionMethod8']>, ParentType, ContextType>;
  defaultPaymentMethod?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  invoiceSettings?: Resolver<Maybe<ResolversTypes['InvoiceSettings4']>, ParentType, ContextType>;
  transferData?: Resolver<Maybe<ResolversTypes['TransferData15']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SubscriptionSchedulesResourceDefaultSettingsAutomaticTaxResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SubscriptionSchedulesResourceDefaultSettingsAutomaticTax'] = ResolversParentTypes['SubscriptionSchedulesResourceDefaultSettingsAutomaticTax']> = ResolversObject<{
  enabled?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BillingCycleAnchor5Resolvers = { AUTOMATIC: 'automatic', PHASE_START: 'phase_start' };

export type CollectionMethod8Resolvers = { CHARGE_AUTOMATICALLY: 'charge_automatically', SEND_INVOICE: 'send_invoice' };

export type InvoiceSettings4Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['InvoiceSettings4'] = ResolversParentTypes['InvoiceSettings4']> = ResolversObject<{
  daysUntilDue?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type TransferData15Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['TransferData15'] = ResolversParentTypes['TransferData15']> = ResolversObject<{
  amountPercent?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  destination?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type EndBehaviorResolvers = { CANCEL: 'cancel', NONE: 'none', RELEASE: 'release', RENEW: 'renew' };

export type Object81Resolvers = { SUBSCRIPTION_SCHEDULE: 'subscription_schedule' };

export type SubscriptionSchedulePhaseConfigurationResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SubscriptionSchedulePhaseConfiguration'] = ResolversParentTypes['SubscriptionSchedulePhaseConfiguration']> = ResolversObject<{
  addInvoiceItems?: Resolver<Array<Maybe<ResolversTypes['SubscriptionScheduleAddInvoiceItem']>>, ParentType, ContextType>;
  applicationFeePercent?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  automaticTax?: Resolver<Maybe<ResolversTypes['SchedulesPhaseAutomaticTax']>, ParentType, ContextType>;
  billingCycleAnchor?: Resolver<Maybe<ResolversTypes['BillingCycleAnchor6']>, ParentType, ContextType>;
  billingThresholds?: Resolver<Maybe<ResolversTypes['BillingThresholds']>, ParentType, ContextType>;
  collectionMethod?: Resolver<Maybe<ResolversTypes['CollectionMethod8']>, ParentType, ContextType>;
  coupon?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  defaultPaymentMethod?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  defaultTaxRates?: Resolver<Maybe<Array<Maybe<ResolversTypes['TaxRate']>>>, ParentType, ContextType>;
  endDate?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  invoiceSettings?: Resolver<Maybe<ResolversTypes['InvoiceSettings5']>, ParentType, ContextType>;
  items?: Resolver<Array<Maybe<ResolversTypes['SubscriptionScheduleConfigurationItem']>>, ParentType, ContextType>;
  prorationBehavior?: Resolver<ResolversTypes['ProrationBehavior6'], ParentType, ContextType>;
  startDate?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  transferData?: Resolver<Maybe<ResolversTypes['TransferData15']>, ParentType, ContextType>;
  trialEnd?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SubscriptionScheduleAddInvoiceItemResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SubscriptionScheduleAddInvoiceItem'] = ResolversParentTypes['SubscriptionScheduleAddInvoiceItem']> = ResolversObject<{
  price?: Resolver<ResolversTypes['JSON'], ParentType, ContextType>;
  quantity?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  taxRates?: Resolver<Maybe<Array<Maybe<ResolversTypes['TaxRate']>>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SchedulesPhaseAutomaticTaxResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SchedulesPhaseAutomaticTax'] = ResolversParentTypes['SchedulesPhaseAutomaticTax']> = ResolversObject<{
  enabled?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BillingCycleAnchor6Resolvers = { AUTOMATIC: 'automatic', PHASE_START: 'phase_start' };

export type InvoiceSettings5Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['InvoiceSettings5'] = ResolversParentTypes['InvoiceSettings5']> = ResolversObject<{
  daysUntilDue?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SubscriptionScheduleConfigurationItemResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SubscriptionScheduleConfigurationItem'] = ResolversParentTypes['SubscriptionScheduleConfigurationItem']> = ResolversObject<{
  billingThresholds?: Resolver<Maybe<ResolversTypes['BillingThresholds2']>, ParentType, ContextType>;
  price?: Resolver<ResolversTypes['JSON'], ParentType, ContextType>;
  quantity?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  taxRates?: Resolver<Maybe<Array<Maybe<ResolversTypes['TaxRate']>>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ProrationBehavior6Resolvers = { ALWAYS_INVOICE: 'always_invoice', CREATE_PRORATIONS: 'create_prorations', NONE: 'none' };

export type Status51Resolvers = { ACTIVE: 'active', CANCELED: 'canceled', COMPLETED: 'completed', NOT_STARTED: 'not_started', RELEASED: 'released' };

export type V1Subscriptions2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['V1Subscriptions2'] = ResolversParentTypes['V1Subscriptions2']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['Subscription5']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Status64Resolvers = { ACTIVE: 'active', ALL: 'all', CANCELED: 'canceled', ENDED: 'ended', INCOMPLETE: 'incomplete', INCOMPLETE_EXPIRED: 'incomplete_expired', PAST_DUE: 'past_due', TRIALING: 'trialing', UNPAID: 'unpaid' };

export type TaxProductResourceTaxCodeListResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['TaxProductResourceTaxCodeList'] = ResolversParentTypes['TaxProductResourceTaxCodeList']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['TaxCode6']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type TaxCode6Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['TaxCode6'] = ResolversParentTypes['TaxCode6']> = ResolversObject<{
  description?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object82'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Object82Resolvers = { TAX_CODE: 'tax_code' };

export type V1TaxRates2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['V1TaxRates2'] = ResolversParentTypes['V1TaxRates2']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['TaxRate']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type TerminalLocationLocationListResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['TerminalLocationLocationList'] = ResolversParentTypes['TerminalLocationLocationList']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['TerminalLocation']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type TerminalLocationResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['TerminalLocation'] = ResolversParentTypes['TerminalLocation']> = ResolversObject<{
  address?: Resolver<ResolversTypes['Address'], ParentType, ContextType>;
  displayName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  livemode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  metadata?: Resolver<ResolversTypes['JSON'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object84'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Object84Resolvers = { TERMINAL_LOCATION: 'terminal.location' };

export type TerminalReaderRetrieveReaderResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['TerminalReaderRetrieveReader'] = ResolversParentTypes['TerminalReaderRetrieveReader']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['TerminalReader']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type TerminalReaderResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['TerminalReader'] = ResolversParentTypes['TerminalReader']> = ResolversObject<{
  deviceSwVersion?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  deviceType?: Resolver<ResolversTypes['DeviceType'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  ipAddress?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  label?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  livemode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  location?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  metadata?: Resolver<ResolversTypes['JSON'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object85'], ParentType, ContextType>;
  serialNumber?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type DeviceTypeResolvers = { BBPOS_CHIPPER2X: 'bbpos_chipper2x', VERIFONE_P400: 'verifone_P400' };

export type Object85Resolvers = { TERMINAL_READER: 'terminal.reader' };

export type DeviceType2Resolvers = { BBPOS_CHIPPER2X: 'bbpos_chipper2x', VERIFONE_P400: 'verifone_P400' };

export type Status65Resolvers = { OFFLINE: 'offline', ONLINE: 'online' };

export type Token3Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Token3'] = ResolversParentTypes['Token3']> = ResolversObject<{
  bankAccount?: Resolver<Maybe<ResolversTypes['BankAccount7']>, ParentType, ContextType>;
  card?: Resolver<Maybe<ResolversTypes['Card2']>, ParentType, ContextType>;
  clientIp?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  created?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  livemode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object86'], ParentType, ContextType>;
  type?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  used?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Object86Resolvers = { TOKEN: 'token' };

export type TopupListResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['TopupList'] = ResolversParentTypes['TopupList']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['Topup']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type TopupResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Topup'] = ResolversParentTypes['Topup']> = ResolversObject<{
  amount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  balanceTransaction?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  created?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  currency?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  expectedAvailabilityDate?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  failureCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  failureMessage?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  livemode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  metadata?: Resolver<ResolversTypes['JSON'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object87'], ParentType, ContextType>;
  source?: Resolver<ResolversTypes['Source12'], ParentType, ContextType>;
  statementDescriptor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  status?: Resolver<ResolversTypes['Status53'], ParentType, ContextType>;
  transferGroup?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Object87Resolvers = { TOPUP: 'topup' };

export type Status53Resolvers = { CANCELED: 'canceled', FAILED: 'failed', PENDING: 'pending', REVERSED: 'reversed', SUCCEEDED: 'succeeded' };

export type Status66Resolvers = { CANCELED: 'canceled', FAILED: 'failed', PENDING: 'pending', SUCCEEDED: 'succeeded' };

export type TransferListResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['TransferList'] = ResolversParentTypes['TransferList']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['Transfer2']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Transfer2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Transfer2'] = ResolversParentTypes['Transfer2']> = ResolversObject<{
  amount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  amountReversed?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  balanceTransaction?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  created?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  currency?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  destination?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  destinationPayment?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  livemode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  metadata?: Resolver<ResolversTypes['JSON'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object88'], ParentType, ContextType>;
  reversals?: Resolver<ResolversTypes['Reversals'], ParentType, ContextType>;
  reversed?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  sourceTransaction?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  sourceType?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  transferGroup?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Object88Resolvers = { TRANSFER: 'transfer' };

export type ReversalsResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Reversals'] = ResolversParentTypes['Reversals']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['TransferReversal2']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type TransferReversal2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['TransferReversal2'] = ResolversParentTypes['TransferReversal2']> = ResolversObject<{
  amount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  balanceTransaction?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  created?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  currency?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  destinationPaymentRefund?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  metadata?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object89'], ParentType, ContextType>;
  sourceRefund?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  transfer?: Resolver<ResolversTypes['JSON'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Object89Resolvers = { TRANSFER_REVERSAL: 'transfer_reversal' };

export type TransferReversalListResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['TransferReversalList'] = ResolversParentTypes['TransferReversalList']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['TransferReversal2']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type V1WebhookEndpoints2Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['V1WebhookEndpoints2'] = ResolversParentTypes['V1WebhookEndpoints2']> = ResolversObject<{
  data?: Resolver<Array<Maybe<ResolversTypes['WebhookEndpoint']>>, ParentType, ContextType>;
  hasMore?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object4'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type WebhookEndpointResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['WebhookEndpoint'] = ResolversParentTypes['WebhookEndpoint']> = ResolversObject<{
  apiVersion?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  application?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  created?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  enabledEvents?: Resolver<Array<Maybe<ResolversTypes['String']>>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  livemode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  metadata?: Resolver<ResolversTypes['JSON'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object90'], ParentType, ContextType>;
  secret?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  status?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Object90Resolvers = { WEBHOOK_ENDPOINT: 'webhook_endpoint' };

export type DeletedAccountResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['DeletedAccount'] = ResolversParentTypes['DeletedAccount']> = ResolversObject<{
  deleted?: Resolver<ResolversTypes['Deleted'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object3'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type DeletedExternalAccountResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['DeletedExternalAccount'] = ResolversParentTypes['DeletedExternalAccount']> = ResolversObject<{
  currency?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  deleted?: Resolver<Maybe<ResolversTypes['Deleted']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  object?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type DeletedPersonResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['DeletedPerson'] = ResolversParentTypes['DeletedPerson']> = ResolversObject<{
  deleted?: Resolver<ResolversTypes['Deleted'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object5'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type DeletedApplePayDomainResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['DeletedApplePayDomain'] = ResolversParentTypes['DeletedApplePayDomain']> = ResolversObject<{
  deleted?: Resolver<ResolversTypes['Deleted'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object9'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type DeletedCouponResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['DeletedCoupon'] = ResolversParentTypes['DeletedCoupon']> = ResolversObject<{
  deleted?: Resolver<ResolversTypes['Deleted'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object21'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type DeletedCustomerResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['DeletedCustomer'] = ResolversParentTypes['DeletedCustomer']> = ResolversObject<{
  deleted?: Resolver<ResolversTypes['Deleted'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object30'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type DeletedDiscountResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['DeletedDiscount'] = ResolversParentTypes['DeletedDiscount']> = ResolversObject<{
  checkoutSession?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  coupon?: Resolver<ResolversTypes['Coupon'], ParentType, ContextType>;
  customer?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  deleted?: Resolver<ResolversTypes['Deleted'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  invoice?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  invoiceItem?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object22'], ParentType, ContextType>;
  promotionCode?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  start?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  subscription?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type DeletedTaxIdResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['DeletedTaxId'] = ResolversParentTypes['DeletedTaxId']> = ResolversObject<{
  deleted?: Resolver<ResolversTypes['Deleted'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object33'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type EphemeralKeyResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['EphemeralKey'] = ResolversParentTypes['EphemeralKey']> = ResolversObject<{
  created?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  expires?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  livemode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object36'], ParentType, ContextType>;
  secret?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Object36Resolvers = { EPHEMERAL_KEY: 'ephemeral_key' };

export type DeletedInvoiceitemResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['DeletedInvoiceitem'] = ResolversParentTypes['DeletedInvoiceitem']> = ResolversObject<{
  deleted?: Resolver<ResolversTypes['Deleted'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object44'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type DeletedInvoiceResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['DeletedInvoice'] = ResolversParentTypes['DeletedInvoice']> = ResolversObject<{
  deleted?: Resolver<ResolversTypes['Deleted'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object49'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type DeletedPlanResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['DeletedPlan'] = ResolversParentTypes['DeletedPlan']> = ResolversObject<{
  deleted?: Resolver<ResolversTypes['Deleted'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object62'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type DeletedProductResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['DeletedProduct'] = ResolversParentTypes['DeletedProduct']> = ResolversObject<{
  deleted?: Resolver<ResolversTypes['Deleted'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object63'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type DeletedRadarValueListItemResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['DeletedRadarValueListItem'] = ResolversParentTypes['DeletedRadarValueListItem']> = ResolversObject<{
  deleted?: Resolver<ResolversTypes['Deleted'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object67'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type DeletedRadarValueListResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['DeletedRadarValueList'] = ResolversParentTypes['DeletedRadarValueList']> = ResolversObject<{
  deleted?: Resolver<ResolversTypes['Deleted'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object68'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type DeletedRecipientResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['DeletedRecipient'] = ResolversParentTypes['DeletedRecipient']> = ResolversObject<{
  deleted?: Resolver<ResolversTypes['Deleted'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object69'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type DeletedSkuResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['DeletedSku'] = ResolversParentTypes['DeletedSku']> = ResolversObject<{
  deleted?: Resolver<ResolversTypes['Deleted'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object75'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type DeletedSubscriptionItemResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['DeletedSubscriptionItem'] = ResolversParentTypes['DeletedSubscriptionItem']> = ResolversObject<{
  deleted?: Resolver<ResolversTypes['Deleted'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object31'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ProrationBehavior5Resolvers = { ALWAYS_INVOICE: 'always_invoice', CREATE_PRORATIONS: 'create_prorations', NONE: 'none' };

export type DeletedTerminalLocationResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['DeletedTerminalLocation'] = ResolversParentTypes['DeletedTerminalLocation']> = ResolversObject<{
  deleted?: Resolver<ResolversTypes['Deleted'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object84'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type DeletedTerminalReaderResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['DeletedTerminalReader'] = ResolversParentTypes['DeletedTerminalReader']> = ResolversObject<{
  deleted?: Resolver<ResolversTypes['Deleted'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object85'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type DeletedWebhookEndpointResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['DeletedWebhookEndpoint'] = ResolversParentTypes['DeletedWebhookEndpoint']> = ResolversObject<{
  deleted?: Resolver<ResolversTypes['Deleted'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object90'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BusinessType2Resolvers = { COMPANY: 'company', GOVERNMENT_ENTITY: 'government_entity', INDIVIDUAL: 'individual', NON_PROFIT: 'non_profit' };

export type Structure2Resolvers = { _: 'undefined', FREE_ZONE_ESTABLISHMENT: 'free_zone_establishment', FREE_ZONE_LLC: 'free_zone_llc', GOVERNMENT_INSTRUMENTALITY: 'government_instrumentality', GOVERNMENTAL_UNIT: 'governmental_unit', INCORPORATED_NON_PROFIT: 'incorporated_non_profit', LIMITED_LIABILITY_PARTNERSHIP: 'limited_liability_partnership', LLC: 'llc', MULTI_MEMBER_LLC: 'multi_member_llc', PRIVATE_COMPANY: 'private_company', PRIVATE_CORPORATION: 'private_corporation', PRIVATE_PARTNERSHIP: 'private_partnership', PUBLIC_COMPANY: 'public_company', PUBLIC_CORPORATION: 'public_corporation', PUBLIC_PARTNERSHIP: 'public_partnership', SINGLE_MEMBER_LLC: 'single_member_llc', SOLE_ESTABLISHMENT: 'sole_establishment', SOLE_PROPRIETORSHIP: 'sole_proprietorship', TAX_EXEMPT_GOVERNMENT_INSTRUMENTALITY: 'tax_exempt_government_instrumentality', UNINCORPORATED_ASSOCIATION: 'unincorporated_association', UNINCORPORATED_NON_PROFIT: 'unincorporated_non_profit' };

export type PoliticalExposure2Resolvers = { EXISTING: 'existing', NONE: 'none' };

export type Interval2Resolvers = { DAILY: 'daily', MANUAL: 'manual', MONTHLY: 'monthly', WEEKLY: 'weekly' };

export type WeeklyAnchor2Resolvers = { FRIDAY: 'friday', MONDAY: 'monday', SATURDAY: 'saturday', SUNDAY: 'sunday', THURSDAY: 'thursday', TUESDAY: 'tuesday', WEDNESDAY: 'wednesday' };

export type AccountHolderType3Resolvers = { _: 'undefined', COMPANY: 'company', INDIVIDUAL: 'individual' };

export type AccountType3Resolvers = { CHECKING: 'checking', FUTSU: 'futsu', SAVINGS: 'savings', TOZA: 'toza' };

export type AccountLinkResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['AccountLink'] = ResolversParentTypes['AccountLink']> = ResolversObject<{
  created?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  expiresAt?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object8'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Object8Resolvers = { ACCOUNT_LINK: 'account_link' };

export type CollectResolvers = { CURRENTLY_DUE: 'currently_due', EVENTUALLY_DUE: 'eventually_due' };

export type Type3Resolvers = { ACCOUNT_ONBOARDING: 'account_onboarding', ACCOUNT_UPDATE: 'account_update' };

export type LoginLinkResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['LoginLink'] = ResolversParentTypes['LoginLink']> = ResolversObject<{
  created?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object7'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Object7Resolvers = { LOGIN_LINK: 'login_link' };

export type Type4Resolvers = { CUSTOM: 'custom', EXPRESS: 'express', STANDARD: 'standard' };

export type Mode2Resolvers = { AT_PERIOD_END: 'at_period_end', IMMEDIATELY: 'immediately' };

export type ProrationBehavior3Resolvers = { ALWAYS_INVOICE: 'always_invoice', CREATE_PRORATIONS: 'create_prorations', NONE: 'none' };

export type BillingPortalSessionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['BillingPortalSession'] = ResolversParentTypes['BillingPortalSession']> = ResolversObject<{
  configuration?: Resolver<ResolversTypes['JSON'], ParentType, ContextType>;
  created?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  customer?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  livemode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object15'], ParentType, ContextType>;
  onBehalfOf?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  returnUrl?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Object15Resolvers = { BILLING_PORTAL_SESSION: 'billing_portal.session' };

export type UserReport2Resolvers = { _: 'undefined', FRAUDULENT: 'fraudulent', SAFE: 'safe' };

export type Reason6Resolvers = { DUPLICATE: 'duplicate', FRAUDULENT: 'fraudulent', REQUESTED_BY_CUSTOMER: 'requested_by_customer' };

export type BillingAddressCollection2Resolvers = { AUTO: 'auto', REQUIRED: 'required' };

export type Address5Resolvers = { AUTO: 'auto', NEVER: 'never' };

export type Name17Resolvers = { AUTO: 'auto', NEVER: 'never' };

export type Shipping3Resolvers = { AUTO: 'auto', NEVER: 'never' };

export type Locale2Resolvers = { AUTO: 'auto', BG: 'bg', CS: 'cs', DA: 'da', DE: 'de', EL: 'el', EN: 'en', EN_GB: 'en-GB', ES: 'es', ES_419: 'es-419', ET: 'et', FI: 'fi', FR: 'fr', FR_CA: 'fr-CA', HR: 'hr', HU: 'hu', ID: 'id', IT: 'it', JA: 'ja', KO: 'ko', LT: 'lt', LV: 'lv', MS: 'ms', MT: 'mt', NB: 'nb', NL: 'nl', PL: 'pl', PT: 'pt', PT_BR: 'pt-BR', RO: 'ro', RU: 'ru', SK: 'sk', SL: 'sl', SV: 'sv', TH: 'th', TR: 'tr', VI: 'vi', ZH: 'zh', ZH_HK: 'zh-HK', ZH_TW: 'zh-TW' };

export type Mode4Resolvers = { PAYMENT: 'payment', SETUP: 'setup', SUBSCRIPTION: 'subscription' };

export type CaptureMethodResolvers = { AUTOMATIC: 'automatic', MANUAL: 'manual' };

export type SetupFutureUsageResolvers = { OFF_SESSION: 'off_session', ON_SESSION: 'on_session' };

export type Currency24Resolvers = { CAD: 'cad', USD: 'usd' };

export type PaymentSchedule2Resolvers = { COMBINED: 'combined', INTERVAL: 'interval', SPORADIC: 'sporadic' };

export type TransactionType2Resolvers = { BUSINESS: 'business', PERSONAL: 'personal' };

export type VerificationMethod2Resolvers = { AUTOMATIC: 'automatic', INSTANT: 'instant', MICRODEPOSITS: 'microdeposits' };

export type ClientResolvers = { ANDROID: 'android', IOS: 'ios', WEB: 'web' };

export type PaymentMethodTypes2ListItemResolvers = { ACSS_DEBIT: 'acss_debit', AFTERPAY_CLEARPAY: 'afterpay_clearpay', ALIPAY: 'alipay', BACS_DEBIT: 'bacs_debit', BANCONTACT: 'bancontact', BOLETO: 'boleto', CARD: 'card', EPS: 'eps', FPX: 'fpx', GIROPAY: 'giropay', GRABPAY: 'grabpay', IDEAL: 'ideal', OXXO: 'oxxo', P24: 'p24', SEPA_DEBIT: 'sepa_debit', SOFORT: 'sofort', WECHAT_PAY: 'wechat_pay' };

export type SubmitType2Resolvers = { AUTO: 'auto', BOOK: 'book', DONATE: 'donate', PAY: 'pay' };

export type Duration2Resolvers = { FOREVER: 'forever', ONCE: 'once', REPEATING: 'repeating' };

export type Reason8Resolvers = { DUPLICATE: 'duplicate', FRAUDULENT: 'fraudulent', ORDER_CHANGE: 'order_change', PRODUCT_UNSATISFACTORY: 'product_unsatisfactory' };

export type TaxExempt3Resolvers = { _: 'undefined', EXEMPT: 'exempt', NONE: 'none', REVERSE: 'reverse' };

export type V1CustomerBankAccount5Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['V1CustomerBankAccount5'] = ResolversParentTypes['V1CustomerBankAccount5']> = ResolversObject<{
  account?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  accountHolderName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  accountHolderType?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  accountType?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  achCreditTransfer?: Resolver<Maybe<ResolversTypes['AchCreditTransfer2']>, ParentType, ContextType>;
  achDebit?: Resolver<Maybe<ResolversTypes['AchDebit2']>, ParentType, ContextType>;
  acssDebit?: Resolver<Maybe<ResolversTypes['AcssDebit4']>, ParentType, ContextType>;
  addressCity?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  addressCountry?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  addressLine1?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  addressLine1Check?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  addressLine2?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  addressState?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  addressZip?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  addressZipCheck?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  alipay?: Resolver<Maybe<ResolversTypes['Alipay2']>, ParentType, ContextType>;
  amount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  auBecsDebit?: Resolver<Maybe<ResolversTypes['AuBecsDebit2']>, ParentType, ContextType>;
  availablePayoutMethods?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  bancontact?: Resolver<Maybe<ResolversTypes['Bancontact2']>, ParentType, ContextType>;
  bankName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  brand?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  card?: Resolver<Maybe<ResolversTypes['Card6']>, ParentType, ContextType>;
  cardPresent?: Resolver<Maybe<ResolversTypes['CardPresent2']>, ParentType, ContextType>;
  clientSecret?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  codeVerification?: Resolver<Maybe<ResolversTypes['CodeVerification']>, ParentType, ContextType>;
  country?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  created?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  currency?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  customer?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  cvcCheck?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  defaultForCurrency?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  dynamicLast4?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  eps?: Resolver<Maybe<ResolversTypes['Eps2']>, ParentType, ContextType>;
  expMonth?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  expYear?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  fingerprint?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  flow?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  funding?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  giropay?: Resolver<Maybe<ResolversTypes['Giropay2']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  ideal?: Resolver<Maybe<ResolversTypes['Ideal2']>, ParentType, ContextType>;
  klarna?: Resolver<Maybe<ResolversTypes['Klarna2']>, ParentType, ContextType>;
  last4?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  livemode?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  metadata?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  multibanco?: Resolver<Maybe<ResolversTypes['Multibanco2']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  object?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  owner?: Resolver<Maybe<ResolversTypes['Owner3']>, ParentType, ContextType>;
  p24?: Resolver<Maybe<ResolversTypes['P242']>, ParentType, ContextType>;
  receiver?: Resolver<Maybe<ResolversTypes['Receiver2']>, ParentType, ContextType>;
  recipient?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  redirect?: Resolver<Maybe<ResolversTypes['Redirect']>, ParentType, ContextType>;
  routingNumber?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  sepaDebit?: Resolver<Maybe<ResolversTypes['SepaDebit2']>, ParentType, ContextType>;
  sofort?: Resolver<Maybe<ResolversTypes['Sofort2']>, ParentType, ContextType>;
  sourceOrder?: Resolver<Maybe<ResolversTypes['SourceOrder']>, ParentType, ContextType>;
  statementDescriptor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  threeDSecure?: Resolver<Maybe<ResolversTypes['ThreeDSecure4']>, ParentType, ContextType>;
  tokenizationMethod?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['Type18']>, ParentType, ContextType>;
  usage?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  wechat?: Resolver<Maybe<ResolversTypes['Wechat2']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AccountHolderType8Resolvers = { COMPANY: 'company', INDIVIDUAL: 'individual' };

export type V1CustomerCard5Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['V1CustomerCard5'] = ResolversParentTypes['V1CustomerCard5']> = ResolversObject<{
  account?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  accountHolderName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  accountHolderType?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  accountType?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  achCreditTransfer?: Resolver<Maybe<ResolversTypes['AchCreditTransfer2']>, ParentType, ContextType>;
  achDebit?: Resolver<Maybe<ResolversTypes['AchDebit2']>, ParentType, ContextType>;
  acssDebit?: Resolver<Maybe<ResolversTypes['AcssDebit4']>, ParentType, ContextType>;
  addressCity?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  addressCountry?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  addressLine1?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  addressLine1Check?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  addressLine2?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  addressState?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  addressZip?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  addressZipCheck?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  alipay?: Resolver<Maybe<ResolversTypes['Alipay2']>, ParentType, ContextType>;
  amount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  auBecsDebit?: Resolver<Maybe<ResolversTypes['AuBecsDebit2']>, ParentType, ContextType>;
  availablePayoutMethods?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  bancontact?: Resolver<Maybe<ResolversTypes['Bancontact2']>, ParentType, ContextType>;
  bankName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  brand?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  card?: Resolver<Maybe<ResolversTypes['Card6']>, ParentType, ContextType>;
  cardPresent?: Resolver<Maybe<ResolversTypes['CardPresent2']>, ParentType, ContextType>;
  clientSecret?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  codeVerification?: Resolver<Maybe<ResolversTypes['CodeVerification']>, ParentType, ContextType>;
  country?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  created?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  currency?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  customer?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  cvcCheck?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  defaultForCurrency?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  dynamicLast4?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  eps?: Resolver<Maybe<ResolversTypes['Eps2']>, ParentType, ContextType>;
  expMonth?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  expYear?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  fingerprint?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  flow?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  funding?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  giropay?: Resolver<Maybe<ResolversTypes['Giropay2']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  ideal?: Resolver<Maybe<ResolversTypes['Ideal2']>, ParentType, ContextType>;
  klarna?: Resolver<Maybe<ResolversTypes['Klarna2']>, ParentType, ContextType>;
  last4?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  livemode?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  metadata?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  multibanco?: Resolver<Maybe<ResolversTypes['Multibanco2']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  object?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  owner?: Resolver<Maybe<ResolversTypes['Owner3']>, ParentType, ContextType>;
  p24?: Resolver<Maybe<ResolversTypes['P242']>, ParentType, ContextType>;
  receiver?: Resolver<Maybe<ResolversTypes['Receiver2']>, ParentType, ContextType>;
  recipient?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  redirect?: Resolver<Maybe<ResolversTypes['Redirect']>, ParentType, ContextType>;
  routingNumber?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  sepaDebit?: Resolver<Maybe<ResolversTypes['SepaDebit2']>, ParentType, ContextType>;
  sofort?: Resolver<Maybe<ResolversTypes['Sofort2']>, ParentType, ContextType>;
  sourceOrder?: Resolver<Maybe<ResolversTypes['SourceOrder']>, ParentType, ContextType>;
  statementDescriptor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  threeDSecure?: Resolver<Maybe<ResolversTypes['ThreeDSecure4']>, ParentType, ContextType>;
  tokenizationMethod?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['Type18']>, ParentType, ContextType>;
  usage?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  wechat?: Resolver<Maybe<ResolversTypes['Wechat2']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type V1CustomerSource5Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['V1CustomerSource5'] = ResolversParentTypes['V1CustomerSource5']> = ResolversObject<{
  account?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  accountHolderName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  accountHolderType?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  accountType?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  achCreditTransfer?: Resolver<Maybe<ResolversTypes['AchCreditTransfer2']>, ParentType, ContextType>;
  achDebit?: Resolver<Maybe<ResolversTypes['AchDebit2']>, ParentType, ContextType>;
  acssDebit?: Resolver<Maybe<ResolversTypes['AcssDebit4']>, ParentType, ContextType>;
  addressCity?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  addressCountry?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  addressLine1?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  addressLine1Check?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  addressLine2?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  addressState?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  addressZip?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  addressZipCheck?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  alipay?: Resolver<Maybe<ResolversTypes['Alipay2']>, ParentType, ContextType>;
  amount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  auBecsDebit?: Resolver<Maybe<ResolversTypes['AuBecsDebit2']>, ParentType, ContextType>;
  availablePayoutMethods?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  bancontact?: Resolver<Maybe<ResolversTypes['Bancontact2']>, ParentType, ContextType>;
  bankName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  brand?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  card?: Resolver<Maybe<ResolversTypes['Card6']>, ParentType, ContextType>;
  cardPresent?: Resolver<Maybe<ResolversTypes['CardPresent2']>, ParentType, ContextType>;
  clientSecret?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  codeVerification?: Resolver<Maybe<ResolversTypes['CodeVerification']>, ParentType, ContextType>;
  country?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  created?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  currency?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  customer?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  cvcCheck?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  defaultForCurrency?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  dynamicLast4?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  eps?: Resolver<Maybe<ResolversTypes['Eps2']>, ParentType, ContextType>;
  expMonth?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  expYear?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  fingerprint?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  flow?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  funding?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  giropay?: Resolver<Maybe<ResolversTypes['Giropay2']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  ideal?: Resolver<Maybe<ResolversTypes['Ideal2']>, ParentType, ContextType>;
  klarna?: Resolver<Maybe<ResolversTypes['Klarna2']>, ParentType, ContextType>;
  last4?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  livemode?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  metadata?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  multibanco?: Resolver<Maybe<ResolversTypes['Multibanco2']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  object?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  owner?: Resolver<Maybe<ResolversTypes['Owner3']>, ParentType, ContextType>;
  p24?: Resolver<Maybe<ResolversTypes['P242']>, ParentType, ContextType>;
  receiver?: Resolver<Maybe<ResolversTypes['Receiver2']>, ParentType, ContextType>;
  recipient?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  redirect?: Resolver<Maybe<ResolversTypes['Redirect']>, ParentType, ContextType>;
  routingNumber?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  sepaDebit?: Resolver<Maybe<ResolversTypes['SepaDebit2']>, ParentType, ContextType>;
  sofort?: Resolver<Maybe<ResolversTypes['Sofort2']>, ParentType, ContextType>;
  sourceOrder?: Resolver<Maybe<ResolversTypes['SourceOrder']>, ParentType, ContextType>;
  statementDescriptor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  threeDSecure?: Resolver<Maybe<ResolversTypes['ThreeDSecure4']>, ParentType, ContextType>;
  tokenizationMethod?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['Type18']>, ParentType, ContextType>;
  usage?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  wechat?: Resolver<Maybe<ResolversTypes['Wechat2']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CollectionMethod2Resolvers = { CHARGE_AUTOMATICALLY: 'charge_automatically', SEND_INVOICE: 'send_invoice' };

export type PaymentBehaviorResolvers = { ALLOW_INCOMPLETE: 'allow_incomplete', DEFAULT_INCOMPLETE: 'default_incomplete', ERROR_IF_INCOMPLETE: 'error_if_incomplete', PENDING_IF_INCOMPLETE: 'pending_if_incomplete' };

export type ProrationBehavior4Resolvers = { ALWAYS_INVOICE: 'always_invoice', CREATE_PRORATIONS: 'create_prorations', NONE: 'none' };

export type BillingCycleAnchor4Resolvers = { NOW: 'now', UNCHANGED: 'unchanged' };

export type PaymentBehavior2Resolvers = { ALLOW_INCOMPLETE: 'allow_incomplete', DEFAULT_INCOMPLETE: 'default_incomplete', ERROR_IF_INCOMPLETE: 'error_if_incomplete', PENDING_IF_INCOMPLETE: 'pending_if_incomplete' };

export type Type22Resolvers = { AE_TRN: 'ae_trn', AU_ABN: 'au_abn', BR_CNPJ: 'br_cnpj', BR_CPF: 'br_cpf', CA_BN: 'ca_bn', CA_GST_HST: 'ca_gst_hst', CA_PST_BC: 'ca_pst_bc', CA_PST_MB: 'ca_pst_mb', CA_PST_SK: 'ca_pst_sk', CA_QST: 'ca_qst', CH_VAT: 'ch_vat', CL_TIN: 'cl_tin', ES_CIF: 'es_cif', EU_VAT: 'eu_vat', GB_VAT: 'gb_vat', HK_BR: 'hk_br', ID_NPWP: 'id_npwp', IL_VAT: 'il_vat', IN_GST: 'in_gst', JP_CN: 'jp_cn', JP_RN: 'jp_rn', KR_BRN: 'kr_brn', LI_UID: 'li_uid', MX_RFC: 'mx_rfc', MY_FRP: 'my_frp', MY_ITN: 'my_itn', MY_SST: 'my_sst', NO_VAT: 'no_vat', NZ_GST: 'nz_gst', RU_INN: 'ru_inn', RU_KPP: 'ru_kpp', SA_VAT: 'sa_vat', SG_GST: 'sg_gst', SG_UEN: 'sg_uen', TH_VAT: 'th_vat', TW_VAT: 'tw_vat', US_EIN: 'us_ein', ZA_VAT: 'za_vat' };

export type CollectionMethod4Resolvers = { CHARGE_AUTOMATICALLY: 'charge_automatically', SEND_INVOICE: 'send_invoice' };

export type CollectionMethod5Resolvers = { CHARGE_AUTOMATICALLY: 'charge_automatically', SEND_INVOICE: 'send_invoice' };

export type AllowedCategories2ListItemResolvers = { AC_REFRIGERATION_REPAIR: 'ac_refrigeration_repair', ACCOUNTING_BOOKKEEPING_SERVICES: 'accounting_bookkeeping_services', ADVERTISING_SERVICES: 'advertising_services', AGRICULTURAL_COOPERATIVE: 'agricultural_cooperative', AIRLINES_AIR_CARRIERS: 'airlines_air_carriers', AIRPORTS_FLYING_FIELDS: 'airports_flying_fields', AMBULANCE_SERVICES: 'ambulance_services', AMUSEMENT_PARKS_CARNIVALS: 'amusement_parks_carnivals', ANTIQUE_REPRODUCTIONS: 'antique_reproductions', ANTIQUE_SHOPS: 'antique_shops', AQUARIUMS: 'aquariums', ARCHITECTURAL_SURVEYING_SERVICES: 'architectural_surveying_services', ART_DEALERS_AND_GALLERIES: 'art_dealers_and_galleries', ARTISTS_SUPPLY_AND_CRAFT_SHOPS: 'artists_supply_and_craft_shops', AUTO_AND_HOME_SUPPLY_STORES: 'auto_and_home_supply_stores', AUTO_BODY_REPAIR_SHOPS: 'auto_body_repair_shops', AUTO_PAINT_SHOPS: 'auto_paint_shops', AUTO_SERVICE_SHOPS: 'auto_service_shops', AUTOMATED_CASH_DISBURSE: 'automated_cash_disburse', AUTOMATED_FUEL_DISPENSERS: 'automated_fuel_dispensers', AUTOMOBILE_ASSOCIATIONS: 'automobile_associations', AUTOMOTIVE_PARTS_AND_ACCESSORIES_STORES: 'automotive_parts_and_accessories_stores', AUTOMOTIVE_TIRE_STORES: 'automotive_tire_stores', BAIL_AND_BOND_PAYMENTS: 'bail_and_bond_payments', BAKERIES: 'bakeries', BANDS_ORCHESTRAS: 'bands_orchestras', BARBER_AND_BEAUTY_SHOPS: 'barber_and_beauty_shops', BETTING_CASINO_GAMBLING: 'betting_casino_gambling', BICYCLE_SHOPS: 'bicycle_shops', BILLIARD_POOL_ESTABLISHMENTS: 'billiard_pool_establishments', BOAT_DEALERS: 'boat_dealers', BOAT_RENTALS_AND_LEASES: 'boat_rentals_and_leases', BOOK_STORES: 'book_stores', BOOKS_PERIODICALS_AND_NEWSPAPERS: 'books_periodicals_and_newspapers', BOWLING_ALLEYS: 'bowling_alleys', BUS_LINES: 'bus_lines', BUSINESS_SECRETARIAL_SCHOOLS: 'business_secretarial_schools', BUYING_SHOPPING_SERVICES: 'buying_shopping_services', CABLE_SATELLITE_AND_OTHER_PAY_TELEVISION_AND_RADIO: 'cable_satellite_and_other_pay_television_and_radio', CAMERA_AND_PHOTOGRAPHIC_SUPPLY_STORES: 'camera_and_photographic_supply_stores', CANDY_NUT_AND_CONFECTIONERY_STORES: 'candy_nut_and_confectionery_stores', CAR_AND_TRUCK_DEALERS_NEW_USED: 'car_and_truck_dealers_new_used', CAR_AND_TRUCK_DEALERS_USED_ONLY: 'car_and_truck_dealers_used_only', CAR_RENTAL_AGENCIES: 'car_rental_agencies', CAR_WASHES: 'car_washes', CARPENTRY_SERVICES: 'carpentry_services', CARPET_UPHOLSTERY_CLEANING: 'carpet_upholstery_cleaning', CATERERS: 'caterers', CHARITABLE_AND_SOCIAL_SERVICE_ORGANIZATIONS_FUNDRAISING: 'charitable_and_social_service_organizations_fundraising', CHEMICALS_AND_ALLIED_PRODUCTS: 'chemicals_and_allied_products', CHILD_CARE_SERVICES: 'child_care_services', CHILDRENS_AND_INFANTS_WEAR_STORES: 'childrens_and_infants_wear_stores', CHIROPODISTS_PODIATRISTS: 'chiropodists_podiatrists', CHIROPRACTORS: 'chiropractors', CIGAR_STORES_AND_STANDS: 'cigar_stores_and_stands', CIVIC_SOCIAL_FRATERNAL_ASSOCIATIONS: 'civic_social_fraternal_associations', CLEANING_AND_MAINTENANCE: 'cleaning_and_maintenance', CLOTHING_RENTAL: 'clothing_rental', COLLEGES_UNIVERSITIES: 'colleges_universities', COMMERCIAL_EQUIPMENT: 'commercial_equipment', COMMERCIAL_FOOTWEAR: 'commercial_footwear', COMMERCIAL_PHOTOGRAPHY_ART_AND_GRAPHICS: 'commercial_photography_art_and_graphics', COMMUTER_TRANSPORT_AND_FERRIES: 'commuter_transport_and_ferries', COMPUTER_NETWORK_SERVICES: 'computer_network_services', COMPUTER_PROGRAMMING: 'computer_programming', COMPUTER_REPAIR: 'computer_repair', COMPUTER_SOFTWARE_STORES: 'computer_software_stores', COMPUTERS_PERIPHERALS_AND_SOFTWARE: 'computers_peripherals_and_software', CONCRETE_WORK_SERVICES: 'concrete_work_services', CONSTRUCTION_MATERIALS: 'construction_materials', CONSULTING_PUBLIC_RELATIONS: 'consulting_public_relations', CORRESPONDENCE_SCHOOLS: 'correspondence_schools', COSMETIC_STORES: 'cosmetic_stores', COUNSELING_SERVICES: 'counseling_services', COUNTRY_CLUBS: 'country_clubs', COURIER_SERVICES: 'courier_services', COURT_COSTS: 'court_costs', CREDIT_REPORTING_AGENCIES: 'credit_reporting_agencies', CRUISE_LINES: 'cruise_lines', DAIRY_PRODUCTS_STORES: 'dairy_products_stores', DANCE_HALL_STUDIOS_SCHOOLS: 'dance_hall_studios_schools', DATING_ESCORT_SERVICES: 'dating_escort_services', DENTISTS_ORTHODONTISTS: 'dentists_orthodontists', DEPARTMENT_STORES: 'department_stores', DETECTIVE_AGENCIES: 'detective_agencies', DIGITAL_GOODS_APPLICATIONS: 'digital_goods_applications', DIGITAL_GOODS_GAMES: 'digital_goods_games', DIGITAL_GOODS_LARGE_VOLUME: 'digital_goods_large_volume', DIGITAL_GOODS_MEDIA: 'digital_goods_media', DIRECT_MARKETING_CATALOG_MERCHANT: 'direct_marketing_catalog_merchant', DIRECT_MARKETING_COMBINATION_CATALOG_AND_RETAIL_MERCHANT: 'direct_marketing_combination_catalog_and_retail_merchant', DIRECT_MARKETING_INBOUND_TELEMARKETING: 'direct_marketing_inbound_telemarketing', DIRECT_MARKETING_INSURANCE_SERVICES: 'direct_marketing_insurance_services', DIRECT_MARKETING_OTHER: 'direct_marketing_other', DIRECT_MARKETING_OUTBOUND_TELEMARKETING: 'direct_marketing_outbound_telemarketing', DIRECT_MARKETING_SUBSCRIPTION: 'direct_marketing_subscription', DIRECT_MARKETING_TRAVEL: 'direct_marketing_travel', DISCOUNT_STORES: 'discount_stores', DOCTORS: 'doctors', DOOR_TO_DOOR_SALES: 'door_to_door_sales', DRAPERY_WINDOW_COVERING_AND_UPHOLSTERY_STORES: 'drapery_window_covering_and_upholstery_stores', DRINKING_PLACES: 'drinking_places', DRUG_STORES_AND_PHARMACIES: 'drug_stores_and_pharmacies', DRUGS_DRUG_PROPRIETARIES_AND_DRUGGIST_SUNDRIES: 'drugs_drug_proprietaries_and_druggist_sundries', DRY_CLEANERS: 'dry_cleaners', DURABLE_GOODS: 'durable_goods', DUTY_FREE_STORES: 'duty_free_stores', EATING_PLACES_RESTAURANTS: 'eating_places_restaurants', EDUCATIONAL_SERVICES: 'educational_services', ELECTRIC_RAZOR_STORES: 'electric_razor_stores', ELECTRICAL_PARTS_AND_EQUIPMENT: 'electrical_parts_and_equipment', ELECTRICAL_SERVICES: 'electrical_services', ELECTRONICS_REPAIR_SHOPS: 'electronics_repair_shops', ELECTRONICS_STORES: 'electronics_stores', ELEMENTARY_SECONDARY_SCHOOLS: 'elementary_secondary_schools', EMPLOYMENT_TEMP_AGENCIES: 'employment_temp_agencies', EQUIPMENT_RENTAL: 'equipment_rental', EXTERMINATING_SERVICES: 'exterminating_services', FAMILY_CLOTHING_STORES: 'family_clothing_stores', FAST_FOOD_RESTAURANTS: 'fast_food_restaurants', FINANCIAL_INSTITUTIONS: 'financial_institutions', FINES_GOVERNMENT_ADMINISTRATIVE_ENTITIES: 'fines_government_administrative_entities', FIREPLACE_FIREPLACE_SCREENS_AND_ACCESSORIES_STORES: 'fireplace_fireplace_screens_and_accessories_stores', FLOOR_COVERING_STORES: 'floor_covering_stores', FLORISTS: 'florists', FLORISTS_SUPPLIES_NURSERY_STOCK_AND_FLOWERS: 'florists_supplies_nursery_stock_and_flowers', FREEZER_AND_LOCKER_MEAT_PROVISIONERS: 'freezer_and_locker_meat_provisioners', FUEL_DEALERS_NON_AUTOMOTIVE: 'fuel_dealers_non_automotive', FUNERAL_SERVICES_CREMATORIES: 'funeral_services_crematories', FURNITURE_HOME_FURNISHINGS_AND_EQUIPMENT_STORES_EXCEPT_APPLIANCES: 'furniture_home_furnishings_and_equipment_stores_except_appliances', FURNITURE_REPAIR_REFINISHING: 'furniture_repair_refinishing', FURRIERS_AND_FUR_SHOPS: 'furriers_and_fur_shops', GENERAL_SERVICES: 'general_services', GIFT_CARD_NOVELTY_AND_SOUVENIR_SHOPS: 'gift_card_novelty_and_souvenir_shops', GLASS_PAINT_AND_WALLPAPER_STORES: 'glass_paint_and_wallpaper_stores', GLASSWARE_CRYSTAL_STORES: 'glassware_crystal_stores', GOLF_COURSES_PUBLIC: 'golf_courses_public', GOVERNMENT_SERVICES: 'government_services', GROCERY_STORES_SUPERMARKETS: 'grocery_stores_supermarkets', HARDWARE_EQUIPMENT_AND_SUPPLIES: 'hardware_equipment_and_supplies', HARDWARE_STORES: 'hardware_stores', HEALTH_AND_BEAUTY_SPAS: 'health_and_beauty_spas', HEARING_AIDS_SALES_AND_SUPPLIES: 'hearing_aids_sales_and_supplies', HEATING_PLUMBING_A_C: 'heating_plumbing_a_c', HOBBY_TOY_AND_GAME_SHOPS: 'hobby_toy_and_game_shops', HOME_SUPPLY_WAREHOUSE_STORES: 'home_supply_warehouse_stores', HOSPITALS: 'hospitals', HOTELS_MOTELS_AND_RESORTS: 'hotels_motels_and_resorts', HOUSEHOLD_APPLIANCE_STORES: 'household_appliance_stores', INDUSTRIAL_SUPPLIES: 'industrial_supplies', INFORMATION_RETRIEVAL_SERVICES: 'information_retrieval_services', INSURANCE_DEFAULT: 'insurance_default', INSURANCE_UNDERWRITING_PREMIUMS: 'insurance_underwriting_premiums', INTRA_COMPANY_PURCHASES: 'intra_company_purchases', JEWELRY_STORES_WATCHES_CLOCKS_AND_SILVERWARE_STORES: 'jewelry_stores_watches_clocks_and_silverware_stores', LANDSCAPING_SERVICES: 'landscaping_services', LAUNDRIES: 'laundries', LAUNDRY_CLEANING_SERVICES: 'laundry_cleaning_services', LEGAL_SERVICES_ATTORNEYS: 'legal_services_attorneys', LUGGAGE_AND_LEATHER_GOODS_STORES: 'luggage_and_leather_goods_stores', LUMBER_BUILDING_MATERIALS_STORES: 'lumber_building_materials_stores', MANUAL_CASH_DISBURSE: 'manual_cash_disburse', MARINAS_SERVICE_AND_SUPPLIES: 'marinas_service_and_supplies', MASONRY_STONEWORK_AND_PLASTER: 'masonry_stonework_and_plaster', MASSAGE_PARLORS: 'massage_parlors', MEDICAL_AND_DENTAL_LABS: 'medical_and_dental_labs', MEDICAL_DENTAL_OPHTHALMIC_AND_HOSPITAL_EQUIPMENT_AND_SUPPLIES: 'medical_dental_ophthalmic_and_hospital_equipment_and_supplies', MEDICAL_SERVICES: 'medical_services', MEMBERSHIP_ORGANIZATIONS: 'membership_organizations', MENS_AND_BOYS_CLOTHING_AND_ACCESSORIES_STORES: 'mens_and_boys_clothing_and_accessories_stores', MENS_WOMENS_CLOTHING_STORES: 'mens_womens_clothing_stores', METAL_SERVICE_CENTERS: 'metal_service_centers', MISCELLANEOUS: 'miscellaneous', MISCELLANEOUS_APPAREL_AND_ACCESSORY_SHOPS: 'miscellaneous_apparel_and_accessory_shops', MISCELLANEOUS_AUTO_DEALERS: 'miscellaneous_auto_dealers', MISCELLANEOUS_BUSINESS_SERVICES: 'miscellaneous_business_services', MISCELLANEOUS_FOOD_STORES: 'miscellaneous_food_stores', MISCELLANEOUS_GENERAL_MERCHANDISE: 'miscellaneous_general_merchandise', MISCELLANEOUS_GENERAL_SERVICES: 'miscellaneous_general_services', MISCELLANEOUS_HOME_FURNISHING_SPECIALTY_STORES: 'miscellaneous_home_furnishing_specialty_stores', MISCELLANEOUS_PUBLISHING_AND_PRINTING: 'miscellaneous_publishing_and_printing', MISCELLANEOUS_RECREATION_SERVICES: 'miscellaneous_recreation_services', MISCELLANEOUS_REPAIR_SHOPS: 'miscellaneous_repair_shops', MISCELLANEOUS_SPECIALTY_RETAIL: 'miscellaneous_specialty_retail', MOBILE_HOME_DEALERS: 'mobile_home_dealers', MOTION_PICTURE_THEATERS: 'motion_picture_theaters', MOTOR_FREIGHT_CARRIERS_AND_TRUCKING: 'motor_freight_carriers_and_trucking', MOTOR_HOMES_DEALERS: 'motor_homes_dealers', MOTOR_VEHICLE_SUPPLIES_AND_NEW_PARTS: 'motor_vehicle_supplies_and_new_parts', MOTORCYCLE_SHOPS_AND_DEALERS: 'motorcycle_shops_and_dealers', MOTORCYCLE_SHOPS_DEALERS: 'motorcycle_shops_dealers', MUSIC_STORES_MUSICAL_INSTRUMENTS_PIANOS_AND_SHEET_MUSIC: 'music_stores_musical_instruments_pianos_and_sheet_music', NEWS_DEALERS_AND_NEWSSTANDS: 'news_dealers_and_newsstands', NON_FI_MONEY_ORDERS: 'non_fi_money_orders', NON_FI_STORED_VALUE_CARD_PURCHASE_LOAD: 'non_fi_stored_value_card_purchase_load', NONDURABLE_GOODS: 'nondurable_goods', NURSERIES_LAWN_AND_GARDEN_SUPPLY_STORES: 'nurseries_lawn_and_garden_supply_stores', NURSING_PERSONAL_CARE: 'nursing_personal_care', OFFICE_AND_COMMERCIAL_FURNITURE: 'office_and_commercial_furniture', OPTICIANS_EYEGLASSES: 'opticians_eyeglasses', OPTOMETRISTS_OPHTHALMOLOGIST: 'optometrists_ophthalmologist', ORTHOPEDIC_GOODS_PROSTHETIC_DEVICES: 'orthopedic_goods_prosthetic_devices', OSTEOPATHS: 'osteopaths', PACKAGE_STORES_BEER_WINE_AND_LIQUOR: 'package_stores_beer_wine_and_liquor', PAINTS_VARNISHES_AND_SUPPLIES: 'paints_varnishes_and_supplies', PARKING_LOTS_GARAGES: 'parking_lots_garages', PASSENGER_RAILWAYS: 'passenger_railways', PAWN_SHOPS: 'pawn_shops', PET_SHOPS_PET_FOOD_AND_SUPPLIES: 'pet_shops_pet_food_and_supplies', PETROLEUM_AND_PETROLEUM_PRODUCTS: 'petroleum_and_petroleum_products', PHOTO_DEVELOPING: 'photo_developing', PHOTOGRAPHIC_PHOTOCOPY_MICROFILM_EQUIPMENT_AND_SUPPLIES: 'photographic_photocopy_microfilm_equipment_and_supplies', PHOTOGRAPHIC_STUDIOS: 'photographic_studios', PICTURE_VIDEO_PRODUCTION: 'picture_video_production', PIECE_GOODS_NOTIONS_AND_OTHER_DRY_GOODS: 'piece_goods_notions_and_other_dry_goods', PLUMBING_HEATING_EQUIPMENT_AND_SUPPLIES: 'plumbing_heating_equipment_and_supplies', POLITICAL_ORGANIZATIONS: 'political_organizations', POSTAL_SERVICES_GOVERNMENT_ONLY: 'postal_services_government_only', PRECIOUS_STONES_AND_METALS_WATCHES_AND_JEWELRY: 'precious_stones_and_metals_watches_and_jewelry', PROFESSIONAL_SERVICES: 'professional_services', PUBLIC_WAREHOUSING_AND_STORAGE: 'public_warehousing_and_storage', QUICK_COPY_REPRO_AND_BLUEPRINT: 'quick_copy_repro_and_blueprint', RAILROADS: 'railroads', REAL_ESTATE_AGENTS_AND_MANAGERS_RENTALS: 'real_estate_agents_and_managers_rentals', RECORD_STORES: 'record_stores', RECREATIONAL_VEHICLE_RENTALS: 'recreational_vehicle_rentals', RELIGIOUS_GOODS_STORES: 'religious_goods_stores', RELIGIOUS_ORGANIZATIONS: 'religious_organizations', ROOFING_SIDING_SHEET_METAL: 'roofing_siding_sheet_metal', SECRETARIAL_SUPPORT_SERVICES: 'secretarial_support_services', SECURITY_BROKERS_DEALERS: 'security_brokers_dealers', SERVICE_STATIONS: 'service_stations', SEWING_NEEDLEWORK_FABRIC_AND_PIECE_GOODS_STORES: 'sewing_needlework_fabric_and_piece_goods_stores', SHOE_REPAIR_HAT_CLEANING: 'shoe_repair_hat_cleaning', SHOE_STORES: 'shoe_stores', SMALL_APPLIANCE_REPAIR: 'small_appliance_repair', SNOWMOBILE_DEALERS: 'snowmobile_dealers', SPECIAL_TRADE_SERVICES: 'special_trade_services', SPECIALTY_CLEANING: 'specialty_cleaning', SPORTING_GOODS_STORES: 'sporting_goods_stores', SPORTING_RECREATION_CAMPS: 'sporting_recreation_camps', SPORTS_AND_RIDING_APPAREL_STORES: 'sports_and_riding_apparel_stores', SPORTS_CLUBS_FIELDS: 'sports_clubs_fields', STAMP_AND_COIN_STORES: 'stamp_and_coin_stores', STATIONARY_OFFICE_SUPPLIES_PRINTING_AND_WRITING_PAPER: 'stationary_office_supplies_printing_and_writing_paper', STATIONERY_STORES_OFFICE_AND_SCHOOL_SUPPLY_STORES: 'stationery_stores_office_and_school_supply_stores', SWIMMING_POOLS_SALES: 'swimming_pools_sales', T_UI_TRAVEL_GERMANY: 't_ui_travel_germany', TAILORS_ALTERATIONS: 'tailors_alterations', TAX_PAYMENTS_GOVERNMENT_AGENCIES: 'tax_payments_government_agencies', TAX_PREPARATION_SERVICES: 'tax_preparation_services', TAXICABS_LIMOUSINES: 'taxicabs_limousines', TELECOMMUNICATION_EQUIPMENT_AND_TELEPHONE_SALES: 'telecommunication_equipment_and_telephone_sales', TELECOMMUNICATION_SERVICES: 'telecommunication_services', TELEGRAPH_SERVICES: 'telegraph_services', TENT_AND_AWNING_SHOPS: 'tent_and_awning_shops', TESTING_LABORATORIES: 'testing_laboratories', THEATRICAL_TICKET_AGENCIES: 'theatrical_ticket_agencies', TIMESHARES: 'timeshares', TIRE_RETREADING_AND_REPAIR: 'tire_retreading_and_repair', TOLLS_BRIDGE_FEES: 'tolls_bridge_fees', TOURIST_ATTRACTIONS_AND_EXHIBITS: 'tourist_attractions_and_exhibits', TOWING_SERVICES: 'towing_services', TRAILER_PARKS_CAMPGROUNDS: 'trailer_parks_campgrounds', TRANSPORTATION_SERVICES: 'transportation_services', TRAVEL_AGENCIES_TOUR_OPERATORS: 'travel_agencies_tour_operators', TRUCK_STOP_ITERATION: 'truck_stop_iteration', TRUCK_UTILITY_TRAILER_RENTALS: 'truck_utility_trailer_rentals', TYPESETTING_PLATE_MAKING_AND_RELATED_SERVICES: 'typesetting_plate_making_and_related_services', TYPEWRITER_STORES: 'typewriter_stores', U_S_FEDERAL_GOVERNMENT_AGENCIES_OR_DEPARTMENTS: 'u_s_federal_government_agencies_or_departments', UNIFORMS_COMMERCIAL_CLOTHING: 'uniforms_commercial_clothing', USED_MERCHANDISE_AND_SECONDHAND_STORES: 'used_merchandise_and_secondhand_stores', UTILITIES: 'utilities', VARIETY_STORES: 'variety_stores', VETERINARY_SERVICES: 'veterinary_services', VIDEO_AMUSEMENT_GAME_SUPPLIES: 'video_amusement_game_supplies', VIDEO_GAME_ARCADES: 'video_game_arcades', VIDEO_TAPE_RENTAL_STORES: 'video_tape_rental_stores', VOCATIONAL_TRADE_SCHOOLS: 'vocational_trade_schools', WATCH_JEWELRY_REPAIR: 'watch_jewelry_repair', WELDING_REPAIR: 'welding_repair', WHOLESALE_CLUBS: 'wholesale_clubs', WIG_AND_TOUPEE_STORES: 'wig_and_toupee_stores', WIRES_MONEY_ORDERS: 'wires_money_orders', WOMENS_ACCESSORY_AND_SPECIALTY_SHOPS: 'womens_accessory_and_specialty_shops', WOMENS_READY_TO_WEAR_STORES: 'womens_ready_to_wear_stores', WRECKING_AND_SALVAGE_YARDS: 'wrecking_and_salvage_yards' };

export type BlockedCategories2ListItemResolvers = { AC_REFRIGERATION_REPAIR: 'ac_refrigeration_repair', ACCOUNTING_BOOKKEEPING_SERVICES: 'accounting_bookkeeping_services', ADVERTISING_SERVICES: 'advertising_services', AGRICULTURAL_COOPERATIVE: 'agricultural_cooperative', AIRLINES_AIR_CARRIERS: 'airlines_air_carriers', AIRPORTS_FLYING_FIELDS: 'airports_flying_fields', AMBULANCE_SERVICES: 'ambulance_services', AMUSEMENT_PARKS_CARNIVALS: 'amusement_parks_carnivals', ANTIQUE_REPRODUCTIONS: 'antique_reproductions', ANTIQUE_SHOPS: 'antique_shops', AQUARIUMS: 'aquariums', ARCHITECTURAL_SURVEYING_SERVICES: 'architectural_surveying_services', ART_DEALERS_AND_GALLERIES: 'art_dealers_and_galleries', ARTISTS_SUPPLY_AND_CRAFT_SHOPS: 'artists_supply_and_craft_shops', AUTO_AND_HOME_SUPPLY_STORES: 'auto_and_home_supply_stores', AUTO_BODY_REPAIR_SHOPS: 'auto_body_repair_shops', AUTO_PAINT_SHOPS: 'auto_paint_shops', AUTO_SERVICE_SHOPS: 'auto_service_shops', AUTOMATED_CASH_DISBURSE: 'automated_cash_disburse', AUTOMATED_FUEL_DISPENSERS: 'automated_fuel_dispensers', AUTOMOBILE_ASSOCIATIONS: 'automobile_associations', AUTOMOTIVE_PARTS_AND_ACCESSORIES_STORES: 'automotive_parts_and_accessories_stores', AUTOMOTIVE_TIRE_STORES: 'automotive_tire_stores', BAIL_AND_BOND_PAYMENTS: 'bail_and_bond_payments', BAKERIES: 'bakeries', BANDS_ORCHESTRAS: 'bands_orchestras', BARBER_AND_BEAUTY_SHOPS: 'barber_and_beauty_shops', BETTING_CASINO_GAMBLING: 'betting_casino_gambling', BICYCLE_SHOPS: 'bicycle_shops', BILLIARD_POOL_ESTABLISHMENTS: 'billiard_pool_establishments', BOAT_DEALERS: 'boat_dealers', BOAT_RENTALS_AND_LEASES: 'boat_rentals_and_leases', BOOK_STORES: 'book_stores', BOOKS_PERIODICALS_AND_NEWSPAPERS: 'books_periodicals_and_newspapers', BOWLING_ALLEYS: 'bowling_alleys', BUS_LINES: 'bus_lines', BUSINESS_SECRETARIAL_SCHOOLS: 'business_secretarial_schools', BUYING_SHOPPING_SERVICES: 'buying_shopping_services', CABLE_SATELLITE_AND_OTHER_PAY_TELEVISION_AND_RADIO: 'cable_satellite_and_other_pay_television_and_radio', CAMERA_AND_PHOTOGRAPHIC_SUPPLY_STORES: 'camera_and_photographic_supply_stores', CANDY_NUT_AND_CONFECTIONERY_STORES: 'candy_nut_and_confectionery_stores', CAR_AND_TRUCK_DEALERS_NEW_USED: 'car_and_truck_dealers_new_used', CAR_AND_TRUCK_DEALERS_USED_ONLY: 'car_and_truck_dealers_used_only', CAR_RENTAL_AGENCIES: 'car_rental_agencies', CAR_WASHES: 'car_washes', CARPENTRY_SERVICES: 'carpentry_services', CARPET_UPHOLSTERY_CLEANING: 'carpet_upholstery_cleaning', CATERERS: 'caterers', CHARITABLE_AND_SOCIAL_SERVICE_ORGANIZATIONS_FUNDRAISING: 'charitable_and_social_service_organizations_fundraising', CHEMICALS_AND_ALLIED_PRODUCTS: 'chemicals_and_allied_products', CHILD_CARE_SERVICES: 'child_care_services', CHILDRENS_AND_INFANTS_WEAR_STORES: 'childrens_and_infants_wear_stores', CHIROPODISTS_PODIATRISTS: 'chiropodists_podiatrists', CHIROPRACTORS: 'chiropractors', CIGAR_STORES_AND_STANDS: 'cigar_stores_and_stands', CIVIC_SOCIAL_FRATERNAL_ASSOCIATIONS: 'civic_social_fraternal_associations', CLEANING_AND_MAINTENANCE: 'cleaning_and_maintenance', CLOTHING_RENTAL: 'clothing_rental', COLLEGES_UNIVERSITIES: 'colleges_universities', COMMERCIAL_EQUIPMENT: 'commercial_equipment', COMMERCIAL_FOOTWEAR: 'commercial_footwear', COMMERCIAL_PHOTOGRAPHY_ART_AND_GRAPHICS: 'commercial_photography_art_and_graphics', COMMUTER_TRANSPORT_AND_FERRIES: 'commuter_transport_and_ferries', COMPUTER_NETWORK_SERVICES: 'computer_network_services', COMPUTER_PROGRAMMING: 'computer_programming', COMPUTER_REPAIR: 'computer_repair', COMPUTER_SOFTWARE_STORES: 'computer_software_stores', COMPUTERS_PERIPHERALS_AND_SOFTWARE: 'computers_peripherals_and_software', CONCRETE_WORK_SERVICES: 'concrete_work_services', CONSTRUCTION_MATERIALS: 'construction_materials', CONSULTING_PUBLIC_RELATIONS: 'consulting_public_relations', CORRESPONDENCE_SCHOOLS: 'correspondence_schools', COSMETIC_STORES: 'cosmetic_stores', COUNSELING_SERVICES: 'counseling_services', COUNTRY_CLUBS: 'country_clubs', COURIER_SERVICES: 'courier_services', COURT_COSTS: 'court_costs', CREDIT_REPORTING_AGENCIES: 'credit_reporting_agencies', CRUISE_LINES: 'cruise_lines', DAIRY_PRODUCTS_STORES: 'dairy_products_stores', DANCE_HALL_STUDIOS_SCHOOLS: 'dance_hall_studios_schools', DATING_ESCORT_SERVICES: 'dating_escort_services', DENTISTS_ORTHODONTISTS: 'dentists_orthodontists', DEPARTMENT_STORES: 'department_stores', DETECTIVE_AGENCIES: 'detective_agencies', DIGITAL_GOODS_APPLICATIONS: 'digital_goods_applications', DIGITAL_GOODS_GAMES: 'digital_goods_games', DIGITAL_GOODS_LARGE_VOLUME: 'digital_goods_large_volume', DIGITAL_GOODS_MEDIA: 'digital_goods_media', DIRECT_MARKETING_CATALOG_MERCHANT: 'direct_marketing_catalog_merchant', DIRECT_MARKETING_COMBINATION_CATALOG_AND_RETAIL_MERCHANT: 'direct_marketing_combination_catalog_and_retail_merchant', DIRECT_MARKETING_INBOUND_TELEMARKETING: 'direct_marketing_inbound_telemarketing', DIRECT_MARKETING_INSURANCE_SERVICES: 'direct_marketing_insurance_services', DIRECT_MARKETING_OTHER: 'direct_marketing_other', DIRECT_MARKETING_OUTBOUND_TELEMARKETING: 'direct_marketing_outbound_telemarketing', DIRECT_MARKETING_SUBSCRIPTION: 'direct_marketing_subscription', DIRECT_MARKETING_TRAVEL: 'direct_marketing_travel', DISCOUNT_STORES: 'discount_stores', DOCTORS: 'doctors', DOOR_TO_DOOR_SALES: 'door_to_door_sales', DRAPERY_WINDOW_COVERING_AND_UPHOLSTERY_STORES: 'drapery_window_covering_and_upholstery_stores', DRINKING_PLACES: 'drinking_places', DRUG_STORES_AND_PHARMACIES: 'drug_stores_and_pharmacies', DRUGS_DRUG_PROPRIETARIES_AND_DRUGGIST_SUNDRIES: 'drugs_drug_proprietaries_and_druggist_sundries', DRY_CLEANERS: 'dry_cleaners', DURABLE_GOODS: 'durable_goods', DUTY_FREE_STORES: 'duty_free_stores', EATING_PLACES_RESTAURANTS: 'eating_places_restaurants', EDUCATIONAL_SERVICES: 'educational_services', ELECTRIC_RAZOR_STORES: 'electric_razor_stores', ELECTRICAL_PARTS_AND_EQUIPMENT: 'electrical_parts_and_equipment', ELECTRICAL_SERVICES: 'electrical_services', ELECTRONICS_REPAIR_SHOPS: 'electronics_repair_shops', ELECTRONICS_STORES: 'electronics_stores', ELEMENTARY_SECONDARY_SCHOOLS: 'elementary_secondary_schools', EMPLOYMENT_TEMP_AGENCIES: 'employment_temp_agencies', EQUIPMENT_RENTAL: 'equipment_rental', EXTERMINATING_SERVICES: 'exterminating_services', FAMILY_CLOTHING_STORES: 'family_clothing_stores', FAST_FOOD_RESTAURANTS: 'fast_food_restaurants', FINANCIAL_INSTITUTIONS: 'financial_institutions', FINES_GOVERNMENT_ADMINISTRATIVE_ENTITIES: 'fines_government_administrative_entities', FIREPLACE_FIREPLACE_SCREENS_AND_ACCESSORIES_STORES: 'fireplace_fireplace_screens_and_accessories_stores', FLOOR_COVERING_STORES: 'floor_covering_stores', FLORISTS: 'florists', FLORISTS_SUPPLIES_NURSERY_STOCK_AND_FLOWERS: 'florists_supplies_nursery_stock_and_flowers', FREEZER_AND_LOCKER_MEAT_PROVISIONERS: 'freezer_and_locker_meat_provisioners', FUEL_DEALERS_NON_AUTOMOTIVE: 'fuel_dealers_non_automotive', FUNERAL_SERVICES_CREMATORIES: 'funeral_services_crematories', FURNITURE_HOME_FURNISHINGS_AND_EQUIPMENT_STORES_EXCEPT_APPLIANCES: 'furniture_home_furnishings_and_equipment_stores_except_appliances', FURNITURE_REPAIR_REFINISHING: 'furniture_repair_refinishing', FURRIERS_AND_FUR_SHOPS: 'furriers_and_fur_shops', GENERAL_SERVICES: 'general_services', GIFT_CARD_NOVELTY_AND_SOUVENIR_SHOPS: 'gift_card_novelty_and_souvenir_shops', GLASS_PAINT_AND_WALLPAPER_STORES: 'glass_paint_and_wallpaper_stores', GLASSWARE_CRYSTAL_STORES: 'glassware_crystal_stores', GOLF_COURSES_PUBLIC: 'golf_courses_public', GOVERNMENT_SERVICES: 'government_services', GROCERY_STORES_SUPERMARKETS: 'grocery_stores_supermarkets', HARDWARE_EQUIPMENT_AND_SUPPLIES: 'hardware_equipment_and_supplies', HARDWARE_STORES: 'hardware_stores', HEALTH_AND_BEAUTY_SPAS: 'health_and_beauty_spas', HEARING_AIDS_SALES_AND_SUPPLIES: 'hearing_aids_sales_and_supplies', HEATING_PLUMBING_A_C: 'heating_plumbing_a_c', HOBBY_TOY_AND_GAME_SHOPS: 'hobby_toy_and_game_shops', HOME_SUPPLY_WAREHOUSE_STORES: 'home_supply_warehouse_stores', HOSPITALS: 'hospitals', HOTELS_MOTELS_AND_RESORTS: 'hotels_motels_and_resorts', HOUSEHOLD_APPLIANCE_STORES: 'household_appliance_stores', INDUSTRIAL_SUPPLIES: 'industrial_supplies', INFORMATION_RETRIEVAL_SERVICES: 'information_retrieval_services', INSURANCE_DEFAULT: 'insurance_default', INSURANCE_UNDERWRITING_PREMIUMS: 'insurance_underwriting_premiums', INTRA_COMPANY_PURCHASES: 'intra_company_purchases', JEWELRY_STORES_WATCHES_CLOCKS_AND_SILVERWARE_STORES: 'jewelry_stores_watches_clocks_and_silverware_stores', LANDSCAPING_SERVICES: 'landscaping_services', LAUNDRIES: 'laundries', LAUNDRY_CLEANING_SERVICES: 'laundry_cleaning_services', LEGAL_SERVICES_ATTORNEYS: 'legal_services_attorneys', LUGGAGE_AND_LEATHER_GOODS_STORES: 'luggage_and_leather_goods_stores', LUMBER_BUILDING_MATERIALS_STORES: 'lumber_building_materials_stores', MANUAL_CASH_DISBURSE: 'manual_cash_disburse', MARINAS_SERVICE_AND_SUPPLIES: 'marinas_service_and_supplies', MASONRY_STONEWORK_AND_PLASTER: 'masonry_stonework_and_plaster', MASSAGE_PARLORS: 'massage_parlors', MEDICAL_AND_DENTAL_LABS: 'medical_and_dental_labs', MEDICAL_DENTAL_OPHTHALMIC_AND_HOSPITAL_EQUIPMENT_AND_SUPPLIES: 'medical_dental_ophthalmic_and_hospital_equipment_and_supplies', MEDICAL_SERVICES: 'medical_services', MEMBERSHIP_ORGANIZATIONS: 'membership_organizations', MENS_AND_BOYS_CLOTHING_AND_ACCESSORIES_STORES: 'mens_and_boys_clothing_and_accessories_stores', MENS_WOMENS_CLOTHING_STORES: 'mens_womens_clothing_stores', METAL_SERVICE_CENTERS: 'metal_service_centers', MISCELLANEOUS: 'miscellaneous', MISCELLANEOUS_APPAREL_AND_ACCESSORY_SHOPS: 'miscellaneous_apparel_and_accessory_shops', MISCELLANEOUS_AUTO_DEALERS: 'miscellaneous_auto_dealers', MISCELLANEOUS_BUSINESS_SERVICES: 'miscellaneous_business_services', MISCELLANEOUS_FOOD_STORES: 'miscellaneous_food_stores', MISCELLANEOUS_GENERAL_MERCHANDISE: 'miscellaneous_general_merchandise', MISCELLANEOUS_GENERAL_SERVICES: 'miscellaneous_general_services', MISCELLANEOUS_HOME_FURNISHING_SPECIALTY_STORES: 'miscellaneous_home_furnishing_specialty_stores', MISCELLANEOUS_PUBLISHING_AND_PRINTING: 'miscellaneous_publishing_and_printing', MISCELLANEOUS_RECREATION_SERVICES: 'miscellaneous_recreation_services', MISCELLANEOUS_REPAIR_SHOPS: 'miscellaneous_repair_shops', MISCELLANEOUS_SPECIALTY_RETAIL: 'miscellaneous_specialty_retail', MOBILE_HOME_DEALERS: 'mobile_home_dealers', MOTION_PICTURE_THEATERS: 'motion_picture_theaters', MOTOR_FREIGHT_CARRIERS_AND_TRUCKING: 'motor_freight_carriers_and_trucking', MOTOR_HOMES_DEALERS: 'motor_homes_dealers', MOTOR_VEHICLE_SUPPLIES_AND_NEW_PARTS: 'motor_vehicle_supplies_and_new_parts', MOTORCYCLE_SHOPS_AND_DEALERS: 'motorcycle_shops_and_dealers', MOTORCYCLE_SHOPS_DEALERS: 'motorcycle_shops_dealers', MUSIC_STORES_MUSICAL_INSTRUMENTS_PIANOS_AND_SHEET_MUSIC: 'music_stores_musical_instruments_pianos_and_sheet_music', NEWS_DEALERS_AND_NEWSSTANDS: 'news_dealers_and_newsstands', NON_FI_MONEY_ORDERS: 'non_fi_money_orders', NON_FI_STORED_VALUE_CARD_PURCHASE_LOAD: 'non_fi_stored_value_card_purchase_load', NONDURABLE_GOODS: 'nondurable_goods', NURSERIES_LAWN_AND_GARDEN_SUPPLY_STORES: 'nurseries_lawn_and_garden_supply_stores', NURSING_PERSONAL_CARE: 'nursing_personal_care', OFFICE_AND_COMMERCIAL_FURNITURE: 'office_and_commercial_furniture', OPTICIANS_EYEGLASSES: 'opticians_eyeglasses', OPTOMETRISTS_OPHTHALMOLOGIST: 'optometrists_ophthalmologist', ORTHOPEDIC_GOODS_PROSTHETIC_DEVICES: 'orthopedic_goods_prosthetic_devices', OSTEOPATHS: 'osteopaths', PACKAGE_STORES_BEER_WINE_AND_LIQUOR: 'package_stores_beer_wine_and_liquor', PAINTS_VARNISHES_AND_SUPPLIES: 'paints_varnishes_and_supplies', PARKING_LOTS_GARAGES: 'parking_lots_garages', PASSENGER_RAILWAYS: 'passenger_railways', PAWN_SHOPS: 'pawn_shops', PET_SHOPS_PET_FOOD_AND_SUPPLIES: 'pet_shops_pet_food_and_supplies', PETROLEUM_AND_PETROLEUM_PRODUCTS: 'petroleum_and_petroleum_products', PHOTO_DEVELOPING: 'photo_developing', PHOTOGRAPHIC_PHOTOCOPY_MICROFILM_EQUIPMENT_AND_SUPPLIES: 'photographic_photocopy_microfilm_equipment_and_supplies', PHOTOGRAPHIC_STUDIOS: 'photographic_studios', PICTURE_VIDEO_PRODUCTION: 'picture_video_production', PIECE_GOODS_NOTIONS_AND_OTHER_DRY_GOODS: 'piece_goods_notions_and_other_dry_goods', PLUMBING_HEATING_EQUIPMENT_AND_SUPPLIES: 'plumbing_heating_equipment_and_supplies', POLITICAL_ORGANIZATIONS: 'political_organizations', POSTAL_SERVICES_GOVERNMENT_ONLY: 'postal_services_government_only', PRECIOUS_STONES_AND_METALS_WATCHES_AND_JEWELRY: 'precious_stones_and_metals_watches_and_jewelry', PROFESSIONAL_SERVICES: 'professional_services', PUBLIC_WAREHOUSING_AND_STORAGE: 'public_warehousing_and_storage', QUICK_COPY_REPRO_AND_BLUEPRINT: 'quick_copy_repro_and_blueprint', RAILROADS: 'railroads', REAL_ESTATE_AGENTS_AND_MANAGERS_RENTALS: 'real_estate_agents_and_managers_rentals', RECORD_STORES: 'record_stores', RECREATIONAL_VEHICLE_RENTALS: 'recreational_vehicle_rentals', RELIGIOUS_GOODS_STORES: 'religious_goods_stores', RELIGIOUS_ORGANIZATIONS: 'religious_organizations', ROOFING_SIDING_SHEET_METAL: 'roofing_siding_sheet_metal', SECRETARIAL_SUPPORT_SERVICES: 'secretarial_support_services', SECURITY_BROKERS_DEALERS: 'security_brokers_dealers', SERVICE_STATIONS: 'service_stations', SEWING_NEEDLEWORK_FABRIC_AND_PIECE_GOODS_STORES: 'sewing_needlework_fabric_and_piece_goods_stores', SHOE_REPAIR_HAT_CLEANING: 'shoe_repair_hat_cleaning', SHOE_STORES: 'shoe_stores', SMALL_APPLIANCE_REPAIR: 'small_appliance_repair', SNOWMOBILE_DEALERS: 'snowmobile_dealers', SPECIAL_TRADE_SERVICES: 'special_trade_services', SPECIALTY_CLEANING: 'specialty_cleaning', SPORTING_GOODS_STORES: 'sporting_goods_stores', SPORTING_RECREATION_CAMPS: 'sporting_recreation_camps', SPORTS_AND_RIDING_APPAREL_STORES: 'sports_and_riding_apparel_stores', SPORTS_CLUBS_FIELDS: 'sports_clubs_fields', STAMP_AND_COIN_STORES: 'stamp_and_coin_stores', STATIONARY_OFFICE_SUPPLIES_PRINTING_AND_WRITING_PAPER: 'stationary_office_supplies_printing_and_writing_paper', STATIONERY_STORES_OFFICE_AND_SCHOOL_SUPPLY_STORES: 'stationery_stores_office_and_school_supply_stores', SWIMMING_POOLS_SALES: 'swimming_pools_sales', T_UI_TRAVEL_GERMANY: 't_ui_travel_germany', TAILORS_ALTERATIONS: 'tailors_alterations', TAX_PAYMENTS_GOVERNMENT_AGENCIES: 'tax_payments_government_agencies', TAX_PREPARATION_SERVICES: 'tax_preparation_services', TAXICABS_LIMOUSINES: 'taxicabs_limousines', TELECOMMUNICATION_EQUIPMENT_AND_TELEPHONE_SALES: 'telecommunication_equipment_and_telephone_sales', TELECOMMUNICATION_SERVICES: 'telecommunication_services', TELEGRAPH_SERVICES: 'telegraph_services', TENT_AND_AWNING_SHOPS: 'tent_and_awning_shops', TESTING_LABORATORIES: 'testing_laboratories', THEATRICAL_TICKET_AGENCIES: 'theatrical_ticket_agencies', TIMESHARES: 'timeshares', TIRE_RETREADING_AND_REPAIR: 'tire_retreading_and_repair', TOLLS_BRIDGE_FEES: 'tolls_bridge_fees', TOURIST_ATTRACTIONS_AND_EXHIBITS: 'tourist_attractions_and_exhibits', TOWING_SERVICES: 'towing_services', TRAILER_PARKS_CAMPGROUNDS: 'trailer_parks_campgrounds', TRANSPORTATION_SERVICES: 'transportation_services', TRAVEL_AGENCIES_TOUR_OPERATORS: 'travel_agencies_tour_operators', TRUCK_STOP_ITERATION: 'truck_stop_iteration', TRUCK_UTILITY_TRAILER_RENTALS: 'truck_utility_trailer_rentals', TYPESETTING_PLATE_MAKING_AND_RELATED_SERVICES: 'typesetting_plate_making_and_related_services', TYPEWRITER_STORES: 'typewriter_stores', U_S_FEDERAL_GOVERNMENT_AGENCIES_OR_DEPARTMENTS: 'u_s_federal_government_agencies_or_departments', UNIFORMS_COMMERCIAL_CLOTHING: 'uniforms_commercial_clothing', USED_MERCHANDISE_AND_SECONDHAND_STORES: 'used_merchandise_and_secondhand_stores', UTILITIES: 'utilities', VARIETY_STORES: 'variety_stores', VETERINARY_SERVICES: 'veterinary_services', VIDEO_AMUSEMENT_GAME_SUPPLIES: 'video_amusement_game_supplies', VIDEO_GAME_ARCADES: 'video_game_arcades', VIDEO_TAPE_RENTAL_STORES: 'video_tape_rental_stores', VOCATIONAL_TRADE_SCHOOLS: 'vocational_trade_schools', WATCH_JEWELRY_REPAIR: 'watch_jewelry_repair', WELDING_REPAIR: 'welding_repair', WHOLESALE_CLUBS: 'wholesale_clubs', WIG_AND_TOUPEE_STORES: 'wig_and_toupee_stores', WIRES_MONEY_ORDERS: 'wires_money_orders', WOMENS_ACCESSORY_AND_SPECIALTY_SHOPS: 'womens_accessory_and_specialty_shops', WOMENS_READY_TO_WEAR_STORES: 'womens_ready_to_wear_stores', WRECKING_AND_SALVAGE_YARDS: 'wrecking_and_salvage_yards' };

export type Categories2ListItemResolvers = { AC_REFRIGERATION_REPAIR: 'ac_refrigeration_repair', ACCOUNTING_BOOKKEEPING_SERVICES: 'accounting_bookkeeping_services', ADVERTISING_SERVICES: 'advertising_services', AGRICULTURAL_COOPERATIVE: 'agricultural_cooperative', AIRLINES_AIR_CARRIERS: 'airlines_air_carriers', AIRPORTS_FLYING_FIELDS: 'airports_flying_fields', AMBULANCE_SERVICES: 'ambulance_services', AMUSEMENT_PARKS_CARNIVALS: 'amusement_parks_carnivals', ANTIQUE_REPRODUCTIONS: 'antique_reproductions', ANTIQUE_SHOPS: 'antique_shops', AQUARIUMS: 'aquariums', ARCHITECTURAL_SURVEYING_SERVICES: 'architectural_surveying_services', ART_DEALERS_AND_GALLERIES: 'art_dealers_and_galleries', ARTISTS_SUPPLY_AND_CRAFT_SHOPS: 'artists_supply_and_craft_shops', AUTO_AND_HOME_SUPPLY_STORES: 'auto_and_home_supply_stores', AUTO_BODY_REPAIR_SHOPS: 'auto_body_repair_shops', AUTO_PAINT_SHOPS: 'auto_paint_shops', AUTO_SERVICE_SHOPS: 'auto_service_shops', AUTOMATED_CASH_DISBURSE: 'automated_cash_disburse', AUTOMATED_FUEL_DISPENSERS: 'automated_fuel_dispensers', AUTOMOBILE_ASSOCIATIONS: 'automobile_associations', AUTOMOTIVE_PARTS_AND_ACCESSORIES_STORES: 'automotive_parts_and_accessories_stores', AUTOMOTIVE_TIRE_STORES: 'automotive_tire_stores', BAIL_AND_BOND_PAYMENTS: 'bail_and_bond_payments', BAKERIES: 'bakeries', BANDS_ORCHESTRAS: 'bands_orchestras', BARBER_AND_BEAUTY_SHOPS: 'barber_and_beauty_shops', BETTING_CASINO_GAMBLING: 'betting_casino_gambling', BICYCLE_SHOPS: 'bicycle_shops', BILLIARD_POOL_ESTABLISHMENTS: 'billiard_pool_establishments', BOAT_DEALERS: 'boat_dealers', BOAT_RENTALS_AND_LEASES: 'boat_rentals_and_leases', BOOK_STORES: 'book_stores', BOOKS_PERIODICALS_AND_NEWSPAPERS: 'books_periodicals_and_newspapers', BOWLING_ALLEYS: 'bowling_alleys', BUS_LINES: 'bus_lines', BUSINESS_SECRETARIAL_SCHOOLS: 'business_secretarial_schools', BUYING_SHOPPING_SERVICES: 'buying_shopping_services', CABLE_SATELLITE_AND_OTHER_PAY_TELEVISION_AND_RADIO: 'cable_satellite_and_other_pay_television_and_radio', CAMERA_AND_PHOTOGRAPHIC_SUPPLY_STORES: 'camera_and_photographic_supply_stores', CANDY_NUT_AND_CONFECTIONERY_STORES: 'candy_nut_and_confectionery_stores', CAR_AND_TRUCK_DEALERS_NEW_USED: 'car_and_truck_dealers_new_used', CAR_AND_TRUCK_DEALERS_USED_ONLY: 'car_and_truck_dealers_used_only', CAR_RENTAL_AGENCIES: 'car_rental_agencies', CAR_WASHES: 'car_washes', CARPENTRY_SERVICES: 'carpentry_services', CARPET_UPHOLSTERY_CLEANING: 'carpet_upholstery_cleaning', CATERERS: 'caterers', CHARITABLE_AND_SOCIAL_SERVICE_ORGANIZATIONS_FUNDRAISING: 'charitable_and_social_service_organizations_fundraising', CHEMICALS_AND_ALLIED_PRODUCTS: 'chemicals_and_allied_products', CHILD_CARE_SERVICES: 'child_care_services', CHILDRENS_AND_INFANTS_WEAR_STORES: 'childrens_and_infants_wear_stores', CHIROPODISTS_PODIATRISTS: 'chiropodists_podiatrists', CHIROPRACTORS: 'chiropractors', CIGAR_STORES_AND_STANDS: 'cigar_stores_and_stands', CIVIC_SOCIAL_FRATERNAL_ASSOCIATIONS: 'civic_social_fraternal_associations', CLEANING_AND_MAINTENANCE: 'cleaning_and_maintenance', CLOTHING_RENTAL: 'clothing_rental', COLLEGES_UNIVERSITIES: 'colleges_universities', COMMERCIAL_EQUIPMENT: 'commercial_equipment', COMMERCIAL_FOOTWEAR: 'commercial_footwear', COMMERCIAL_PHOTOGRAPHY_ART_AND_GRAPHICS: 'commercial_photography_art_and_graphics', COMMUTER_TRANSPORT_AND_FERRIES: 'commuter_transport_and_ferries', COMPUTER_NETWORK_SERVICES: 'computer_network_services', COMPUTER_PROGRAMMING: 'computer_programming', COMPUTER_REPAIR: 'computer_repair', COMPUTER_SOFTWARE_STORES: 'computer_software_stores', COMPUTERS_PERIPHERALS_AND_SOFTWARE: 'computers_peripherals_and_software', CONCRETE_WORK_SERVICES: 'concrete_work_services', CONSTRUCTION_MATERIALS: 'construction_materials', CONSULTING_PUBLIC_RELATIONS: 'consulting_public_relations', CORRESPONDENCE_SCHOOLS: 'correspondence_schools', COSMETIC_STORES: 'cosmetic_stores', COUNSELING_SERVICES: 'counseling_services', COUNTRY_CLUBS: 'country_clubs', COURIER_SERVICES: 'courier_services', COURT_COSTS: 'court_costs', CREDIT_REPORTING_AGENCIES: 'credit_reporting_agencies', CRUISE_LINES: 'cruise_lines', DAIRY_PRODUCTS_STORES: 'dairy_products_stores', DANCE_HALL_STUDIOS_SCHOOLS: 'dance_hall_studios_schools', DATING_ESCORT_SERVICES: 'dating_escort_services', DENTISTS_ORTHODONTISTS: 'dentists_orthodontists', DEPARTMENT_STORES: 'department_stores', DETECTIVE_AGENCIES: 'detective_agencies', DIGITAL_GOODS_APPLICATIONS: 'digital_goods_applications', DIGITAL_GOODS_GAMES: 'digital_goods_games', DIGITAL_GOODS_LARGE_VOLUME: 'digital_goods_large_volume', DIGITAL_GOODS_MEDIA: 'digital_goods_media', DIRECT_MARKETING_CATALOG_MERCHANT: 'direct_marketing_catalog_merchant', DIRECT_MARKETING_COMBINATION_CATALOG_AND_RETAIL_MERCHANT: 'direct_marketing_combination_catalog_and_retail_merchant', DIRECT_MARKETING_INBOUND_TELEMARKETING: 'direct_marketing_inbound_telemarketing', DIRECT_MARKETING_INSURANCE_SERVICES: 'direct_marketing_insurance_services', DIRECT_MARKETING_OTHER: 'direct_marketing_other', DIRECT_MARKETING_OUTBOUND_TELEMARKETING: 'direct_marketing_outbound_telemarketing', DIRECT_MARKETING_SUBSCRIPTION: 'direct_marketing_subscription', DIRECT_MARKETING_TRAVEL: 'direct_marketing_travel', DISCOUNT_STORES: 'discount_stores', DOCTORS: 'doctors', DOOR_TO_DOOR_SALES: 'door_to_door_sales', DRAPERY_WINDOW_COVERING_AND_UPHOLSTERY_STORES: 'drapery_window_covering_and_upholstery_stores', DRINKING_PLACES: 'drinking_places', DRUG_STORES_AND_PHARMACIES: 'drug_stores_and_pharmacies', DRUGS_DRUG_PROPRIETARIES_AND_DRUGGIST_SUNDRIES: 'drugs_drug_proprietaries_and_druggist_sundries', DRY_CLEANERS: 'dry_cleaners', DURABLE_GOODS: 'durable_goods', DUTY_FREE_STORES: 'duty_free_stores', EATING_PLACES_RESTAURANTS: 'eating_places_restaurants', EDUCATIONAL_SERVICES: 'educational_services', ELECTRIC_RAZOR_STORES: 'electric_razor_stores', ELECTRICAL_PARTS_AND_EQUIPMENT: 'electrical_parts_and_equipment', ELECTRICAL_SERVICES: 'electrical_services', ELECTRONICS_REPAIR_SHOPS: 'electronics_repair_shops', ELECTRONICS_STORES: 'electronics_stores', ELEMENTARY_SECONDARY_SCHOOLS: 'elementary_secondary_schools', EMPLOYMENT_TEMP_AGENCIES: 'employment_temp_agencies', EQUIPMENT_RENTAL: 'equipment_rental', EXTERMINATING_SERVICES: 'exterminating_services', FAMILY_CLOTHING_STORES: 'family_clothing_stores', FAST_FOOD_RESTAURANTS: 'fast_food_restaurants', FINANCIAL_INSTITUTIONS: 'financial_institutions', FINES_GOVERNMENT_ADMINISTRATIVE_ENTITIES: 'fines_government_administrative_entities', FIREPLACE_FIREPLACE_SCREENS_AND_ACCESSORIES_STORES: 'fireplace_fireplace_screens_and_accessories_stores', FLOOR_COVERING_STORES: 'floor_covering_stores', FLORISTS: 'florists', FLORISTS_SUPPLIES_NURSERY_STOCK_AND_FLOWERS: 'florists_supplies_nursery_stock_and_flowers', FREEZER_AND_LOCKER_MEAT_PROVISIONERS: 'freezer_and_locker_meat_provisioners', FUEL_DEALERS_NON_AUTOMOTIVE: 'fuel_dealers_non_automotive', FUNERAL_SERVICES_CREMATORIES: 'funeral_services_crematories', FURNITURE_HOME_FURNISHINGS_AND_EQUIPMENT_STORES_EXCEPT_APPLIANCES: 'furniture_home_furnishings_and_equipment_stores_except_appliances', FURNITURE_REPAIR_REFINISHING: 'furniture_repair_refinishing', FURRIERS_AND_FUR_SHOPS: 'furriers_and_fur_shops', GENERAL_SERVICES: 'general_services', GIFT_CARD_NOVELTY_AND_SOUVENIR_SHOPS: 'gift_card_novelty_and_souvenir_shops', GLASS_PAINT_AND_WALLPAPER_STORES: 'glass_paint_and_wallpaper_stores', GLASSWARE_CRYSTAL_STORES: 'glassware_crystal_stores', GOLF_COURSES_PUBLIC: 'golf_courses_public', GOVERNMENT_SERVICES: 'government_services', GROCERY_STORES_SUPERMARKETS: 'grocery_stores_supermarkets', HARDWARE_EQUIPMENT_AND_SUPPLIES: 'hardware_equipment_and_supplies', HARDWARE_STORES: 'hardware_stores', HEALTH_AND_BEAUTY_SPAS: 'health_and_beauty_spas', HEARING_AIDS_SALES_AND_SUPPLIES: 'hearing_aids_sales_and_supplies', HEATING_PLUMBING_A_C: 'heating_plumbing_a_c', HOBBY_TOY_AND_GAME_SHOPS: 'hobby_toy_and_game_shops', HOME_SUPPLY_WAREHOUSE_STORES: 'home_supply_warehouse_stores', HOSPITALS: 'hospitals', HOTELS_MOTELS_AND_RESORTS: 'hotels_motels_and_resorts', HOUSEHOLD_APPLIANCE_STORES: 'household_appliance_stores', INDUSTRIAL_SUPPLIES: 'industrial_supplies', INFORMATION_RETRIEVAL_SERVICES: 'information_retrieval_services', INSURANCE_DEFAULT: 'insurance_default', INSURANCE_UNDERWRITING_PREMIUMS: 'insurance_underwriting_premiums', INTRA_COMPANY_PURCHASES: 'intra_company_purchases', JEWELRY_STORES_WATCHES_CLOCKS_AND_SILVERWARE_STORES: 'jewelry_stores_watches_clocks_and_silverware_stores', LANDSCAPING_SERVICES: 'landscaping_services', LAUNDRIES: 'laundries', LAUNDRY_CLEANING_SERVICES: 'laundry_cleaning_services', LEGAL_SERVICES_ATTORNEYS: 'legal_services_attorneys', LUGGAGE_AND_LEATHER_GOODS_STORES: 'luggage_and_leather_goods_stores', LUMBER_BUILDING_MATERIALS_STORES: 'lumber_building_materials_stores', MANUAL_CASH_DISBURSE: 'manual_cash_disburse', MARINAS_SERVICE_AND_SUPPLIES: 'marinas_service_and_supplies', MASONRY_STONEWORK_AND_PLASTER: 'masonry_stonework_and_plaster', MASSAGE_PARLORS: 'massage_parlors', MEDICAL_AND_DENTAL_LABS: 'medical_and_dental_labs', MEDICAL_DENTAL_OPHTHALMIC_AND_HOSPITAL_EQUIPMENT_AND_SUPPLIES: 'medical_dental_ophthalmic_and_hospital_equipment_and_supplies', MEDICAL_SERVICES: 'medical_services', MEMBERSHIP_ORGANIZATIONS: 'membership_organizations', MENS_AND_BOYS_CLOTHING_AND_ACCESSORIES_STORES: 'mens_and_boys_clothing_and_accessories_stores', MENS_WOMENS_CLOTHING_STORES: 'mens_womens_clothing_stores', METAL_SERVICE_CENTERS: 'metal_service_centers', MISCELLANEOUS: 'miscellaneous', MISCELLANEOUS_APPAREL_AND_ACCESSORY_SHOPS: 'miscellaneous_apparel_and_accessory_shops', MISCELLANEOUS_AUTO_DEALERS: 'miscellaneous_auto_dealers', MISCELLANEOUS_BUSINESS_SERVICES: 'miscellaneous_business_services', MISCELLANEOUS_FOOD_STORES: 'miscellaneous_food_stores', MISCELLANEOUS_GENERAL_MERCHANDISE: 'miscellaneous_general_merchandise', MISCELLANEOUS_GENERAL_SERVICES: 'miscellaneous_general_services', MISCELLANEOUS_HOME_FURNISHING_SPECIALTY_STORES: 'miscellaneous_home_furnishing_specialty_stores', MISCELLANEOUS_PUBLISHING_AND_PRINTING: 'miscellaneous_publishing_and_printing', MISCELLANEOUS_RECREATION_SERVICES: 'miscellaneous_recreation_services', MISCELLANEOUS_REPAIR_SHOPS: 'miscellaneous_repair_shops', MISCELLANEOUS_SPECIALTY_RETAIL: 'miscellaneous_specialty_retail', MOBILE_HOME_DEALERS: 'mobile_home_dealers', MOTION_PICTURE_THEATERS: 'motion_picture_theaters', MOTOR_FREIGHT_CARRIERS_AND_TRUCKING: 'motor_freight_carriers_and_trucking', MOTOR_HOMES_DEALERS: 'motor_homes_dealers', MOTOR_VEHICLE_SUPPLIES_AND_NEW_PARTS: 'motor_vehicle_supplies_and_new_parts', MOTORCYCLE_SHOPS_AND_DEALERS: 'motorcycle_shops_and_dealers', MOTORCYCLE_SHOPS_DEALERS: 'motorcycle_shops_dealers', MUSIC_STORES_MUSICAL_INSTRUMENTS_PIANOS_AND_SHEET_MUSIC: 'music_stores_musical_instruments_pianos_and_sheet_music', NEWS_DEALERS_AND_NEWSSTANDS: 'news_dealers_and_newsstands', NON_FI_MONEY_ORDERS: 'non_fi_money_orders', NON_FI_STORED_VALUE_CARD_PURCHASE_LOAD: 'non_fi_stored_value_card_purchase_load', NONDURABLE_GOODS: 'nondurable_goods', NURSERIES_LAWN_AND_GARDEN_SUPPLY_STORES: 'nurseries_lawn_and_garden_supply_stores', NURSING_PERSONAL_CARE: 'nursing_personal_care', OFFICE_AND_COMMERCIAL_FURNITURE: 'office_and_commercial_furniture', OPTICIANS_EYEGLASSES: 'opticians_eyeglasses', OPTOMETRISTS_OPHTHALMOLOGIST: 'optometrists_ophthalmologist', ORTHOPEDIC_GOODS_PROSTHETIC_DEVICES: 'orthopedic_goods_prosthetic_devices', OSTEOPATHS: 'osteopaths', PACKAGE_STORES_BEER_WINE_AND_LIQUOR: 'package_stores_beer_wine_and_liquor', PAINTS_VARNISHES_AND_SUPPLIES: 'paints_varnishes_and_supplies', PARKING_LOTS_GARAGES: 'parking_lots_garages', PASSENGER_RAILWAYS: 'passenger_railways', PAWN_SHOPS: 'pawn_shops', PET_SHOPS_PET_FOOD_AND_SUPPLIES: 'pet_shops_pet_food_and_supplies', PETROLEUM_AND_PETROLEUM_PRODUCTS: 'petroleum_and_petroleum_products', PHOTO_DEVELOPING: 'photo_developing', PHOTOGRAPHIC_PHOTOCOPY_MICROFILM_EQUIPMENT_AND_SUPPLIES: 'photographic_photocopy_microfilm_equipment_and_supplies', PHOTOGRAPHIC_STUDIOS: 'photographic_studios', PICTURE_VIDEO_PRODUCTION: 'picture_video_production', PIECE_GOODS_NOTIONS_AND_OTHER_DRY_GOODS: 'piece_goods_notions_and_other_dry_goods', PLUMBING_HEATING_EQUIPMENT_AND_SUPPLIES: 'plumbing_heating_equipment_and_supplies', POLITICAL_ORGANIZATIONS: 'political_organizations', POSTAL_SERVICES_GOVERNMENT_ONLY: 'postal_services_government_only', PRECIOUS_STONES_AND_METALS_WATCHES_AND_JEWELRY: 'precious_stones_and_metals_watches_and_jewelry', PROFESSIONAL_SERVICES: 'professional_services', PUBLIC_WAREHOUSING_AND_STORAGE: 'public_warehousing_and_storage', QUICK_COPY_REPRO_AND_BLUEPRINT: 'quick_copy_repro_and_blueprint', RAILROADS: 'railroads', REAL_ESTATE_AGENTS_AND_MANAGERS_RENTALS: 'real_estate_agents_and_managers_rentals', RECORD_STORES: 'record_stores', RECREATIONAL_VEHICLE_RENTALS: 'recreational_vehicle_rentals', RELIGIOUS_GOODS_STORES: 'religious_goods_stores', RELIGIOUS_ORGANIZATIONS: 'religious_organizations', ROOFING_SIDING_SHEET_METAL: 'roofing_siding_sheet_metal', SECRETARIAL_SUPPORT_SERVICES: 'secretarial_support_services', SECURITY_BROKERS_DEALERS: 'security_brokers_dealers', SERVICE_STATIONS: 'service_stations', SEWING_NEEDLEWORK_FABRIC_AND_PIECE_GOODS_STORES: 'sewing_needlework_fabric_and_piece_goods_stores', SHOE_REPAIR_HAT_CLEANING: 'shoe_repair_hat_cleaning', SHOE_STORES: 'shoe_stores', SMALL_APPLIANCE_REPAIR: 'small_appliance_repair', SNOWMOBILE_DEALERS: 'snowmobile_dealers', SPECIAL_TRADE_SERVICES: 'special_trade_services', SPECIALTY_CLEANING: 'specialty_cleaning', SPORTING_GOODS_STORES: 'sporting_goods_stores', SPORTING_RECREATION_CAMPS: 'sporting_recreation_camps', SPORTS_AND_RIDING_APPAREL_STORES: 'sports_and_riding_apparel_stores', SPORTS_CLUBS_FIELDS: 'sports_clubs_fields', STAMP_AND_COIN_STORES: 'stamp_and_coin_stores', STATIONARY_OFFICE_SUPPLIES_PRINTING_AND_WRITING_PAPER: 'stationary_office_supplies_printing_and_writing_paper', STATIONERY_STORES_OFFICE_AND_SCHOOL_SUPPLY_STORES: 'stationery_stores_office_and_school_supply_stores', SWIMMING_POOLS_SALES: 'swimming_pools_sales', T_UI_TRAVEL_GERMANY: 't_ui_travel_germany', TAILORS_ALTERATIONS: 'tailors_alterations', TAX_PAYMENTS_GOVERNMENT_AGENCIES: 'tax_payments_government_agencies', TAX_PREPARATION_SERVICES: 'tax_preparation_services', TAXICABS_LIMOUSINES: 'taxicabs_limousines', TELECOMMUNICATION_EQUIPMENT_AND_TELEPHONE_SALES: 'telecommunication_equipment_and_telephone_sales', TELECOMMUNICATION_SERVICES: 'telecommunication_services', TELEGRAPH_SERVICES: 'telegraph_services', TENT_AND_AWNING_SHOPS: 'tent_and_awning_shops', TESTING_LABORATORIES: 'testing_laboratories', THEATRICAL_TICKET_AGENCIES: 'theatrical_ticket_agencies', TIMESHARES: 'timeshares', TIRE_RETREADING_AND_REPAIR: 'tire_retreading_and_repair', TOLLS_BRIDGE_FEES: 'tolls_bridge_fees', TOURIST_ATTRACTIONS_AND_EXHIBITS: 'tourist_attractions_and_exhibits', TOWING_SERVICES: 'towing_services', TRAILER_PARKS_CAMPGROUNDS: 'trailer_parks_campgrounds', TRANSPORTATION_SERVICES: 'transportation_services', TRAVEL_AGENCIES_TOUR_OPERATORS: 'travel_agencies_tour_operators', TRUCK_STOP_ITERATION: 'truck_stop_iteration', TRUCK_UTILITY_TRAILER_RENTALS: 'truck_utility_trailer_rentals', TYPESETTING_PLATE_MAKING_AND_RELATED_SERVICES: 'typesetting_plate_making_and_related_services', TYPEWRITER_STORES: 'typewriter_stores', U_S_FEDERAL_GOVERNMENT_AGENCIES_OR_DEPARTMENTS: 'u_s_federal_government_agencies_or_departments', UNIFORMS_COMMERCIAL_CLOTHING: 'uniforms_commercial_clothing', USED_MERCHANDISE_AND_SECONDHAND_STORES: 'used_merchandise_and_secondhand_stores', UTILITIES: 'utilities', VARIETY_STORES: 'variety_stores', VETERINARY_SERVICES: 'veterinary_services', VIDEO_AMUSEMENT_GAME_SUPPLIES: 'video_amusement_game_supplies', VIDEO_GAME_ARCADES: 'video_game_arcades', VIDEO_TAPE_RENTAL_STORES: 'video_tape_rental_stores', VOCATIONAL_TRADE_SCHOOLS: 'vocational_trade_schools', WATCH_JEWELRY_REPAIR: 'watch_jewelry_repair', WELDING_REPAIR: 'welding_repair', WHOLESALE_CLUBS: 'wholesale_clubs', WIG_AND_TOUPEE_STORES: 'wig_and_toupee_stores', WIRES_MONEY_ORDERS: 'wires_money_orders', WOMENS_ACCESSORY_AND_SPECIALTY_SHOPS: 'womens_accessory_and_specialty_shops', WOMENS_READY_TO_WEAR_STORES: 'womens_ready_to_wear_stores', WRECKING_AND_SALVAGE_YARDS: 'wrecking_and_salvage_yards' };

export type Interval8Resolvers = { ALL_TIME: 'all_time', DAILY: 'daily', MONTHLY: 'monthly', PER_AUTHORIZATION: 'per_authorization', WEEKLY: 'weekly', YEARLY: 'yearly' };

export type Status30Resolvers = { ACTIVE: 'active', INACTIVE: 'inactive' };

export type Status31Resolvers = { ACTIVE: 'active', INACTIVE: 'inactive' };

export type ReplacementReason2Resolvers = { DAMAGED: 'damaged', EXPIRED: 'expired', LOST: 'lost', STOLEN: 'stolen' };

export type Service2Resolvers = { EXPRESS: 'express', PRIORITY: 'priority', STANDARD: 'standard' };

export type Type39Resolvers = { BULK: 'bulk', INDIVIDUAL: 'individual' };

export type Status32Resolvers = { ACTIVE: 'active', INACTIVE: 'inactive' };

export type Type40Resolvers = { PHYSICAL: 'physical', VIRTUAL: 'virtual' };

export type CancellationReason4Resolvers = { LOST: 'lost', STOLEN: 'stolen' };

export type Status33Resolvers = { ACTIVE: 'active', CANCELED: 'canceled', INACTIVE: 'inactive' };

export type Reason15Resolvers = { CANCELED: 'canceled', DUPLICATE: 'duplicate', FRAUDULENT: 'fraudulent', MERCHANDISE_NOT_AS_DESCRIBED: 'merchandise_not_as_described', NOT_RECEIVED: 'not_received', OTHER: 'other', SERVICE_NOT_AS_DESCRIBED: 'service_not_as_described' };

export type Type46Resolvers = { DISCOUNT: 'discount', SHIPPING: 'shipping', SKU: 'sku', TAX: 'tax' };

export type Status37Resolvers = { CANCELED: 'canceled', CREATED: 'created', FULFILLED: 'fulfilled', PAID: 'paid', RETURNED: 'returned' };

export type Type47Resolvers = { OFFLINE: 'offline', ONLINE: 'online' };

export type Bank9Resolvers = { ARZTE_UND_APOTHEKER_BANK: 'arzte_und_apotheker_bank', AUSTRIAN_ANADI_BANK_AG: 'austrian_anadi_bank_ag', BANK_AUSTRIA: 'bank_austria', BANKHAUS_CARL_SPANGLER: 'bankhaus_carl_spangler', BANKHAUS_SCHELHAMMER_UND_SCHATTERA_AG: 'bankhaus_schelhammer_und_schattera_ag', BAWAG_PSK_AG: 'bawag_psk_ag', BKS_BANK_AG: 'bks_bank_ag', BRULL_KALLMUS_BANK_AG: 'brull_kallmus_bank_ag', BTV_VIER_LANDER_BANK: 'btv_vier_lander_bank', CAPITAL_BANK_GRAWE_GRUPPE_AG: 'capital_bank_grawe_gruppe_ag', DOLOMITENBANK: 'dolomitenbank', EASYBANK_AG: 'easybank_ag', ERSTE_BANK_UND_SPARKASSEN: 'erste_bank_und_sparkassen', HYPO_ALPEADRIABANK_INTERNATIONAL_AG: 'hypo_alpeadriabank_international_ag', HYPO_BANK_BURGENLAND_AKTIENGESELLSCHAFT: 'hypo_bank_burgenland_aktiengesellschaft', HYPO_NOE_LB_FUR_NIEDEROSTERREICH_U_WIEN: 'hypo_noe_lb_fur_niederosterreich_u_wien', HYPO_OBEROSTERREICH_SALZBURG_STEIERMARK: 'hypo_oberosterreich_salzburg_steiermark', HYPO_TIROL_BANK_AG: 'hypo_tirol_bank_ag', HYPO_VORARLBERG_BANK_AG: 'hypo_vorarlberg_bank_ag', MARCHFELDER_BANK: 'marchfelder_bank', OBERBANK_AG: 'oberbank_ag', RAIFFEISEN_BANKENGRUPPE_OSTERREICH: 'raiffeisen_bankengruppe_osterreich', SCHOELLERBANK_AG: 'schoellerbank_ag', SPARDA_BANK_WIEN: 'sparda_bank_wien', VOLKSBANK_GRUPPE: 'volksbank_gruppe', VOLKSKREDITBANK_AG: 'volkskreditbank_ag', VR_BANK_BRAUNAU: 'vr_bank_braunau' };

export type Bank10Resolvers = { AFFIN_BANK: 'affin_bank', ALLIANCE_BANK: 'alliance_bank', AMBANK: 'ambank', BANK_ISLAM: 'bank_islam', BANK_MUAMALAT: 'bank_muamalat', BANK_RAKYAT: 'bank_rakyat', BSN: 'bsn', CIMB: 'cimb', DEUTSCHE_BANK: 'deutsche_bank', HONG_LEONG_BANK: 'hong_leong_bank', HSBC: 'hsbc', KFH: 'kfh', MAYBANK2E: 'maybank2e', MAYBANK2U: 'maybank2u', OCBC: 'ocbc', PB_ENTERPRISE: 'pb_enterprise', PUBLIC_BANK: 'public_bank', RHB: 'rhb', STANDARD_CHARTERED: 'standard_chartered', UOB: 'uob' };

export type Bank11Resolvers = { ABN_AMRO: 'abn_amro', ASN_BANK: 'asn_bank', BUNQ: 'bunq', HANDELSBANKEN: 'handelsbanken', ING: 'ing', KNAB: 'knab', MONEYOU: 'moneyou', RABOBANK: 'rabobank', REGIOBANK: 'regiobank', REVOLUT: 'revolut', SNS_BANK: 'sns_bank', TRIODOS_BANK: 'triodos_bank', VAN_LANSCHOT: 'van_lanschot' };

export type Bank12Resolvers = { ALIOR_BANK: 'alior_bank', BANK_MILLENNIUM: 'bank_millennium', BANK_NOWY_BFG_SA: 'bank_nowy_bfg_sa', BANK_PEKAO_SA: 'bank_pekao_sa', BANKI_SPBDZIELCZE: 'banki_spbdzielcze', BLIK: 'blik', BNP_PARIBAS: 'bnp_paribas', BOZ: 'boz', CITI_HANDLOWY: 'citi_handlowy', CREDIT_AGRICOLE: 'credit_agricole', ENVELOBANK: 'envelobank', ETRANSFER_POCZTOWY24: 'etransfer_pocztowy24', GETIN_BANK: 'getin_bank', IDEABANK: 'ideabank', ING: 'ing', INTELIGO: 'inteligo', MBANK_MTRANSFER: 'mbank_mtransfer', NEST_PRZELEW: 'nest_przelew', NOBLE_PAY: 'noble_pay', PBAC_Z_IPKO: 'pbac_z_ipko', PLUS_BANK: 'plus_bank', SANTANDER_PRZELEW24: 'santander_przelew24', TMOBILE_USBUGI_BANKOWE: 'tmobile_usbugi_bankowe', TOYOTA_BANK: 'toyota_bank', VOLKSWAGEN_BANK: 'volkswagen_bank' };

export type Type48Resolvers = { ACSS_DEBIT: 'acss_debit', AFTERPAY_CLEARPAY: 'afterpay_clearpay', ALIPAY: 'alipay', AU_BECS_DEBIT: 'au_becs_debit', BACS_DEBIT: 'bacs_debit', BANCONTACT: 'bancontact', BOLETO: 'boleto', EPS: 'eps', FPX: 'fpx', GIROPAY: 'giropay', GRABPAY: 'grabpay', IDEAL: 'ideal', OXXO: 'oxxo', P24: 'p24', SEPA_DEBIT: 'sepa_debit', SOFORT: 'sofort', WECHAT_PAY: 'wechat_pay' };

export type SetupFutureUsage3Resolvers = { OFF_SESSION: 'off_session', ON_SESSION: 'on_session' };

export type SetupFutureUsage4Resolvers = { _: 'undefined', OFF_SESSION: 'off_session', ON_SESSION: 'on_session' };

export type CancellationReason7Resolvers = { ABANDONED: 'abandoned', DUPLICATE: 'duplicate', FRAUDULENT: 'fraudulent', REQUESTED_BY_CUSTOMER: 'requested_by_customer' };

export type Type49Resolvers = { ACSS_DEBIT: 'acss_debit', AFTERPAY_CLEARPAY: 'afterpay_clearpay', ALIPAY: 'alipay', AU_BECS_DEBIT: 'au_becs_debit', BACS_DEBIT: 'bacs_debit', BANCONTACT: 'bancontact', BOLETO: 'boleto', CARD: 'card', EPS: 'eps', FPX: 'fpx', GIROPAY: 'giropay', GRABPAY: 'grabpay', IDEAL: 'ideal', OXXO: 'oxxo', P24: 'p24', SEPA_DEBIT: 'sepa_debit', SOFORT: 'sofort', WECHAT_PAY: 'wechat_pay' };

export type Method2Resolvers = { INSTANT: 'instant', STANDARD: 'standard' };

export type SourceType2Resolvers = { BANK_ACCOUNT: 'bank_account', CARD: 'card', FPX: 'fpx' };

export type AggregateUsage3Resolvers = { LAST_DURING_PERIOD: 'last_during_period', LAST_EVER: 'last_ever', MAX: 'max', SUM: 'sum' };

export type Interval9Resolvers = { DAY: 'day', MONTH: 'month', WEEK: 'week', YEAR: 'year' };

export type TiersMode2Resolvers = { GRADUATED: 'graduated', VOLUME: 'volume' };

export type Round2Resolvers = { DOWN: 'down', UP: 'up' };

export type AggregateUsage4Resolvers = { LAST_DURING_PERIOD: 'last_during_period', LAST_EVER: 'last_ever', MAX: 'max', SUM: 'sum' };

export type TaxBehavior3Resolvers = { EXCLUSIVE: 'exclusive', INCLUSIVE: 'inclusive', UNSPECIFIED: 'unspecified' };

export type CollectionMethod7Resolvers = { CHARGE_AUTOMATICALLY: 'charge_automatically', SEND_INVOICE: 'send_invoice' };

export type ItemType2Resolvers = { CARD_BIN: 'card_bin', CARD_FINGERPRINT: 'card_fingerprint', CASE_SENSITIVE_STRING: 'case_sensitive_string', COUNTRY: 'country', EMAIL: 'email', IP_ADDRESS: 'ip_address', STRING: 'string' };

export type ReportingCategory3Resolvers = { ADVANCE: 'advance', ADVANCE_FUNDING: 'advance_funding', ANTICIPATION_REPAYMENT: 'anticipation_repayment', CHARGE: 'charge', CHARGE_FAILURE: 'charge_failure', CONNECT_COLLECTION_TRANSFER: 'connect_collection_transfer', CONNECT_RESERVED_FUNDS: 'connect_reserved_funds', CONTRIBUTION: 'contribution', DISPUTE: 'dispute', DISPUTE_REVERSAL: 'dispute_reversal', FEE: 'fee', FINANCING_PAYDOWN: 'financing_paydown', FINANCING_PAYDOWN_REVERSAL: 'financing_paydown_reversal', FINANCING_PAYOUT: 'financing_payout', FINANCING_PAYOUT_REVERSAL: 'financing_payout_reversal', ISSUING_AUTHORIZATION_HOLD: 'issuing_authorization_hold', ISSUING_AUTHORIZATION_RELEASE: 'issuing_authorization_release', ISSUING_DISPUTE: 'issuing_dispute', ISSUING_TRANSACTION: 'issuing_transaction', NETWORK_COST: 'network_cost', OTHER_ADJUSTMENT: 'other_adjustment', PARTIAL_CAPTURE_REVERSAL: 'partial_capture_reversal', PAYOUT: 'payout', PAYOUT_REVERSAL: 'payout_reversal', PLATFORM_EARNING: 'platform_earning', PLATFORM_EARNING_REFUND: 'platform_earning_refund', REFUND: 'refund', REFUND_FAILURE: 'refund_failure', RISK_RESERVED_FUNDS: 'risk_reserved_funds', TAX: 'tax', TOPUP: 'topup', TOPUP_REVERSAL: 'topup_reversal', TRANSFER: 'transfer', TRANSFER_REVERSAL: 'transfer_reversal' };

export type Timezone3Resolvers = { AFRICA_ABIDJAN: 'Africa/Abidjan', AFRICA_ACCRA: 'Africa/Accra', AFRICA_ADDIS_ABABA: 'Africa/Addis_Ababa', AFRICA_ALGIERS: 'Africa/Algiers', AFRICA_ASMARA: 'Africa/Asmara', AFRICA_ASMERA: 'Africa/Asmera', AFRICA_BAMAKO: 'Africa/Bamako', AFRICA_BANGUI: 'Africa/Bangui', AFRICA_BANJUL: 'Africa/Banjul', AFRICA_BISSAU: 'Africa/Bissau', AFRICA_BLANTYRE: 'Africa/Blantyre', AFRICA_BRAZZAVILLE: 'Africa/Brazzaville', AFRICA_BUJUMBURA: 'Africa/Bujumbura', AFRICA_CAIRO: 'Africa/Cairo', AFRICA_CASABLANCA: 'Africa/Casablanca', AFRICA_CEUTA: 'Africa/Ceuta', AFRICA_CONAKRY: 'Africa/Conakry', AFRICA_DAKAR: 'Africa/Dakar', AFRICA_DAR_ES_SALAAM: 'Africa/Dar_es_Salaam', AFRICA_DJIBOUTI: 'Africa/Djibouti', AFRICA_DOUALA: 'Africa/Douala', AFRICA_EL_AAIUN: 'Africa/El_Aaiun', AFRICA_FREETOWN: 'Africa/Freetown', AFRICA_GABORONE: 'Africa/Gaborone', AFRICA_HARARE: 'Africa/Harare', AFRICA_JOHANNESBURG: 'Africa/Johannesburg', AFRICA_JUBA: 'Africa/Juba', AFRICA_KAMPALA: 'Africa/Kampala', AFRICA_KHARTOUM: 'Africa/Khartoum', AFRICA_KIGALI: 'Africa/Kigali', AFRICA_KINSHASA: 'Africa/Kinshasa', AFRICA_LAGOS: 'Africa/Lagos', AFRICA_LIBREVILLE: 'Africa/Libreville', AFRICA_LOME: 'Africa/Lome', AFRICA_LUANDA: 'Africa/Luanda', AFRICA_LUBUMBASHI: 'Africa/Lubumbashi', AFRICA_LUSAKA: 'Africa/Lusaka', AFRICA_MALABO: 'Africa/Malabo', AFRICA_MAPUTO: 'Africa/Maputo', AFRICA_MASERU: 'Africa/Maseru', AFRICA_MBABANE: 'Africa/Mbabane', AFRICA_MOGADISHU: 'Africa/Mogadishu', AFRICA_MONROVIA: 'Africa/Monrovia', AFRICA_NAIROBI: 'Africa/Nairobi', AFRICA_NDJAMENA: 'Africa/Ndjamena', AFRICA_NIAMEY: 'Africa/Niamey', AFRICA_NOUAKCHOTT: 'Africa/Nouakchott', AFRICA_OUAGADOUGOU: 'Africa/Ouagadougou', AFRICA_PORTO_NOVO: 'Africa/Porto-Novo', AFRICA_SAO_TOME: 'Africa/Sao_Tome', AFRICA_TIMBUKTU: 'Africa/Timbuktu', AFRICA_TRIPOLI: 'Africa/Tripoli', AFRICA_TUNIS: 'Africa/Tunis', AFRICA_WINDHOEK: 'Africa/Windhoek', AMERICA_ADAK: 'America/Adak', AMERICA_ANCHORAGE: 'America/Anchorage', AMERICA_ANGUILLA: 'America/Anguilla', AMERICA_ANTIGUA: 'America/Antigua', AMERICA_ARAGUAINA: 'America/Araguaina', AMERICA_ARGENTINA_BUENOS_AIRES: 'America/Argentina/Buenos_Aires', AMERICA_ARGENTINA_CATAMARCA: 'America/Argentina/Catamarca', AMERICA_ARGENTINA_COMODRIVADAVIA: 'America/Argentina/ComodRivadavia', AMERICA_ARGENTINA_CORDOBA: 'America/Argentina/Cordoba', AMERICA_ARGENTINA_JUJUY: 'America/Argentina/Jujuy', AMERICA_ARGENTINA_LA_RIOJA: 'America/Argentina/La_Rioja', AMERICA_ARGENTINA_MENDOZA: 'America/Argentina/Mendoza', AMERICA_ARGENTINA_RIO_GALLEGOS: 'America/Argentina/Rio_Gallegos', AMERICA_ARGENTINA_SALTA: 'America/Argentina/Salta', AMERICA_ARGENTINA_SAN_JUAN: 'America/Argentina/San_Juan', AMERICA_ARGENTINA_SAN_LUIS: 'America/Argentina/San_Luis', AMERICA_ARGENTINA_TUCUMAN: 'America/Argentina/Tucuman', AMERICA_ARGENTINA_USHUAIA: 'America/Argentina/Ushuaia', AMERICA_ARUBA: 'America/Aruba', AMERICA_ASUNCION: 'America/Asuncion', AMERICA_ATIKOKAN: 'America/Atikokan', AMERICA_ATKA: 'America/Atka', AMERICA_BAHIA: 'America/Bahia', AMERICA_BAHIA_BANDERAS: 'America/Bahia_Banderas', AMERICA_BARBADOS: 'America/Barbados', AMERICA_BELEM: 'America/Belem', AMERICA_BELIZE: 'America/Belize', AMERICA_BLANC_SABLON: 'America/Blanc-Sablon', AMERICA_BOA_VISTA: 'America/Boa_Vista', AMERICA_BOGOTA: 'America/Bogota', AMERICA_BOISE: 'America/Boise', AMERICA_BUENOS_AIRES: 'America/Buenos_Aires', AMERICA_CAMBRIDGE_BAY: 'America/Cambridge_Bay', AMERICA_CAMPO_GRANDE: 'America/Campo_Grande', AMERICA_CANCUN: 'America/Cancun', AMERICA_CARACAS: 'America/Caracas', AMERICA_CATAMARCA: 'America/Catamarca', AMERICA_CAYENNE: 'America/Cayenne', AMERICA_CAYMAN: 'America/Cayman', AMERICA_CHICAGO: 'America/Chicago', AMERICA_CHIHUAHUA: 'America/Chihuahua', AMERICA_CORAL_HARBOUR: 'America/Coral_Harbour', AMERICA_CORDOBA: 'America/Cordoba', AMERICA_COSTA_RICA: 'America/Costa_Rica', AMERICA_CRESTON: 'America/Creston', AMERICA_CUIABA: 'America/Cuiaba', AMERICA_CURACAO: 'America/Curacao', AMERICA_DANMARKSHAVN: 'America/Danmarkshavn', AMERICA_DAWSON: 'America/Dawson', AMERICA_DAWSON_CREEK: 'America/Dawson_Creek', AMERICA_DENVER: 'America/Denver', AMERICA_DETROIT: 'America/Detroit', AMERICA_DOMINICA: 'America/Dominica', AMERICA_EDMONTON: 'America/Edmonton', AMERICA_EIRUNEPE: 'America/Eirunepe', AMERICA_EL_SALVADOR: 'America/El_Salvador', AMERICA_ENSENADA: 'America/Ensenada', AMERICA_FORT_NELSON: 'America/Fort_Nelson', AMERICA_FORT_WAYNE: 'America/Fort_Wayne', AMERICA_FORTALEZA: 'America/Fortaleza', AMERICA_GLACE_BAY: 'America/Glace_Bay', AMERICA_GODTHAB: 'America/Godthab', AMERICA_GOOSE_BAY: 'America/Goose_Bay', AMERICA_GRAND_TURK: 'America/Grand_Turk', AMERICA_GRENADA: 'America/Grenada', AMERICA_GUADELOUPE: 'America/Guadeloupe', AMERICA_GUATEMALA: 'America/Guatemala', AMERICA_GUAYAQUIL: 'America/Guayaquil', AMERICA_GUYANA: 'America/Guyana', AMERICA_HALIFAX: 'America/Halifax', AMERICA_HAVANA: 'America/Havana', AMERICA_HERMOSILLO: 'America/Hermosillo', AMERICA_INDIANA_INDIANAPOLIS: 'America/Indiana/Indianapolis', AMERICA_INDIANA_KNOX: 'America/Indiana/Knox', AMERICA_INDIANA_MARENGO: 'America/Indiana/Marengo', AMERICA_INDIANA_PETERSBURG: 'America/Indiana/Petersburg', AMERICA_INDIANA_TELL_CITY: 'America/Indiana/Tell_City', AMERICA_INDIANA_VEVAY: 'America/Indiana/Vevay', AMERICA_INDIANA_VINCENNES: 'America/Indiana/Vincennes', AMERICA_INDIANA_WINAMAC: 'America/Indiana/Winamac', AMERICA_INDIANAPOLIS: 'America/Indianapolis', AMERICA_INUVIK: 'America/Inuvik', AMERICA_IQALUIT: 'America/Iqaluit', AMERICA_JAMAICA: 'America/Jamaica', AMERICA_JUJUY: 'America/Jujuy', AMERICA_JUNEAU: 'America/Juneau', AMERICA_KENTUCKY_LOUISVILLE: 'America/Kentucky/Louisville', AMERICA_KENTUCKY_MONTICELLO: 'America/Kentucky/Monticello', AMERICA_KNOX_IN: 'America/Knox_IN', AMERICA_KRALENDIJK: 'America/Kralendijk', AMERICA_LA_PAZ: 'America/La_Paz', AMERICA_LIMA: 'America/Lima', AMERICA_LOS_ANGELES: 'America/Los_Angeles', AMERICA_LOUISVILLE: 'America/Louisville', AMERICA_LOWER_PRINCES: 'America/Lower_Princes', AMERICA_MACEIO: 'America/Maceio', AMERICA_MANAGUA: 'America/Managua', AMERICA_MANAUS: 'America/Manaus', AMERICA_MARIGOT: 'America/Marigot', AMERICA_MARTINIQUE: 'America/Martinique', AMERICA_MATAMOROS: 'America/Matamoros', AMERICA_MAZATLAN: 'America/Mazatlan', AMERICA_MENDOZA: 'America/Mendoza', AMERICA_MENOMINEE: 'America/Menominee', AMERICA_MERIDA: 'America/Merida', AMERICA_METLAKATLA: 'America/Metlakatla', AMERICA_MEXICO_CITY: 'America/Mexico_City', AMERICA_MIQUELON: 'America/Miquelon', AMERICA_MONCTON: 'America/Moncton', AMERICA_MONTERREY: 'America/Monterrey', AMERICA_MONTEVIDEO: 'America/Montevideo', AMERICA_MONTREAL: 'America/Montreal', AMERICA_MONTSERRAT: 'America/Montserrat', AMERICA_NASSAU: 'America/Nassau', AMERICA_NEW_YORK: 'America/New_York', AMERICA_NIPIGON: 'America/Nipigon', AMERICA_NOME: 'America/Nome', AMERICA_NORONHA: 'America/Noronha', AMERICA_NORTH_DAKOTA_BEULAH: 'America/North_Dakota/Beulah', AMERICA_NORTH_DAKOTA_CENTER: 'America/North_Dakota/Center', AMERICA_NORTH_DAKOTA_NEW_SALEM: 'America/North_Dakota/New_Salem', AMERICA_OJINAGA: 'America/Ojinaga', AMERICA_PANAMA: 'America/Panama', AMERICA_PANGNIRTUNG: 'America/Pangnirtung', AMERICA_PARAMARIBO: 'America/Paramaribo', AMERICA_PHOENIX: 'America/Phoenix', AMERICA_PORT_AU_PRINCE: 'America/Port-au-Prince', AMERICA_PORT_OF_SPAIN: 'America/Port_of_Spain', AMERICA_PORTO_ACRE: 'America/Porto_Acre', AMERICA_PORTO_VELHO: 'America/Porto_Velho', AMERICA_PUERTO_RICO: 'America/Puerto_Rico', AMERICA_PUNTA_ARENAS: 'America/Punta_Arenas', AMERICA_RAINY_RIVER: 'America/Rainy_River', AMERICA_RANKIN_INLET: 'America/Rankin_Inlet', AMERICA_RECIFE: 'America/Recife', AMERICA_REGINA: 'America/Regina', AMERICA_RESOLUTE: 'America/Resolute', AMERICA_RIO_BRANCO: 'America/Rio_Branco', AMERICA_ROSARIO: 'America/Rosario', AMERICA_SANTA_ISABEL: 'America/Santa_Isabel', AMERICA_SANTAREM: 'America/Santarem', AMERICA_SANTIAGO: 'America/Santiago', AMERICA_SANTO_DOMINGO: 'America/Santo_Domingo', AMERICA_SAO_PAULO: 'America/Sao_Paulo', AMERICA_SCORESBYSUND: 'America/Scoresbysund', AMERICA_SHIPROCK: 'America/Shiprock', AMERICA_SITKA: 'America/Sitka', AMERICA_ST_BARTHELEMY: 'America/St_Barthelemy', AMERICA_ST_JOHNS: 'America/St_Johns', AMERICA_ST_KITTS: 'America/St_Kitts', AMERICA_ST_LUCIA: 'America/St_Lucia', AMERICA_ST_THOMAS: 'America/St_Thomas', AMERICA_ST_VINCENT: 'America/St_Vincent', AMERICA_SWIFT_CURRENT: 'America/Swift_Current', AMERICA_TEGUCIGALPA: 'America/Tegucigalpa', AMERICA_THULE: 'America/Thule', AMERICA_THUNDER_BAY: 'America/Thunder_Bay', AMERICA_TIJUANA: 'America/Tijuana', AMERICA_TORONTO: 'America/Toronto', AMERICA_TORTOLA: 'America/Tortola', AMERICA_VANCOUVER: 'America/Vancouver', AMERICA_VIRGIN: 'America/Virgin', AMERICA_WHITEHORSE: 'America/Whitehorse', AMERICA_WINNIPEG: 'America/Winnipeg', AMERICA_YAKUTAT: 'America/Yakutat', AMERICA_YELLOWKNIFE: 'America/Yellowknife', ANTARCTICA_CASEY: 'Antarctica/Casey', ANTARCTICA_DAVIS: 'Antarctica/Davis', ANTARCTICA_DUMONTDURVILLE: 'Antarctica/DumontDUrville', ANTARCTICA_MACQUARIE: 'Antarctica/Macquarie', ANTARCTICA_MAWSON: 'Antarctica/Mawson', ANTARCTICA_MCMURDO: 'Antarctica/McMurdo', ANTARCTICA_PALMER: 'Antarctica/Palmer', ANTARCTICA_ROTHERA: 'Antarctica/Rothera', ANTARCTICA_SOUTH_POLE: 'Antarctica/South_Pole', ANTARCTICA_SYOWA: 'Antarctica/Syowa', ANTARCTICA_TROLL: 'Antarctica/Troll', ANTARCTICA_VOSTOK: 'Antarctica/Vostok', ARCTIC_LONGYEARBYEN: 'Arctic/Longyearbyen', ASIA_ADEN: 'Asia/Aden', ASIA_ALMATY: 'Asia/Almaty', ASIA_AMMAN: 'Asia/Amman', ASIA_ANADYR: 'Asia/Anadyr', ASIA_AQTAU: 'Asia/Aqtau', ASIA_AQTOBE: 'Asia/Aqtobe', ASIA_ASHGABAT: 'Asia/Ashgabat', ASIA_ASHKHABAD: 'Asia/Ashkhabad', ASIA_ATYRAU: 'Asia/Atyrau', ASIA_BAGHDAD: 'Asia/Baghdad', ASIA_BAHRAIN: 'Asia/Bahrain', ASIA_BAKU: 'Asia/Baku', ASIA_BANGKOK: 'Asia/Bangkok', ASIA_BARNAUL: 'Asia/Barnaul', ASIA_BEIRUT: 'Asia/Beirut', ASIA_BISHKEK: 'Asia/Bishkek', ASIA_BRUNEI: 'Asia/Brunei', ASIA_CALCUTTA: 'Asia/Calcutta', ASIA_CHITA: 'Asia/Chita', ASIA_CHOIBALSAN: 'Asia/Choibalsan', ASIA_CHONGQING: 'Asia/Chongqing', ASIA_CHUNGKING: 'Asia/Chungking', ASIA_COLOMBO: 'Asia/Colombo', ASIA_DACCA: 'Asia/Dacca', ASIA_DAMASCUS: 'Asia/Damascus', ASIA_DHAKA: 'Asia/Dhaka', ASIA_DILI: 'Asia/Dili', ASIA_DUBAI: 'Asia/Dubai', ASIA_DUSHANBE: 'Asia/Dushanbe', ASIA_FAMAGUSTA: 'Asia/Famagusta', ASIA_GAZA: 'Asia/Gaza', ASIA_HARBIN: 'Asia/Harbin', ASIA_HEBRON: 'Asia/Hebron', ASIA_HO_CHI_MINH: 'Asia/Ho_Chi_Minh', ASIA_HONG_KONG: 'Asia/Hong_Kong', ASIA_HOVD: 'Asia/Hovd', ASIA_IRKUTSK: 'Asia/Irkutsk', ASIA_ISTANBUL: 'Asia/Istanbul', ASIA_JAKARTA: 'Asia/Jakarta', ASIA_JAYAPURA: 'Asia/Jayapura', ASIA_JERUSALEM: 'Asia/Jerusalem', ASIA_KABUL: 'Asia/Kabul', ASIA_KAMCHATKA: 'Asia/Kamchatka', ASIA_KARACHI: 'Asia/Karachi', ASIA_KASHGAR: 'Asia/Kashgar', ASIA_KATHMANDU: 'Asia/Kathmandu', ASIA_KATMANDU: 'Asia/Katmandu', ASIA_KHANDYGA: 'Asia/Khandyga', ASIA_KOLKATA: 'Asia/Kolkata', ASIA_KRASNOYARSK: 'Asia/Krasnoyarsk', ASIA_KUALA_LUMPUR: 'Asia/Kuala_Lumpur', ASIA_KUCHING: 'Asia/Kuching', ASIA_KUWAIT: 'Asia/Kuwait', ASIA_MACAO: 'Asia/Macao', ASIA_MACAU: 'Asia/Macau', ASIA_MAGADAN: 'Asia/Magadan', ASIA_MAKASSAR: 'Asia/Makassar', ASIA_MANILA: 'Asia/Manila', ASIA_MUSCAT: 'Asia/Muscat', ASIA_NICOSIA: 'Asia/Nicosia', ASIA_NOVOKUZNETSK: 'Asia/Novokuznetsk', ASIA_NOVOSIBIRSK: 'Asia/Novosibirsk', ASIA_OMSK: 'Asia/Omsk', ASIA_ORAL: 'Asia/Oral', ASIA_PHNOM_PENH: 'Asia/Phnom_Penh', ASIA_PONTIANAK: 'Asia/Pontianak', ASIA_PYONGYANG: 'Asia/Pyongyang', ASIA_QATAR: 'Asia/Qatar', ASIA_QOSTANAY: 'Asia/Qostanay', ASIA_QYZYLORDA: 'Asia/Qyzylorda', ASIA_RANGOON: 'Asia/Rangoon', ASIA_RIYADH: 'Asia/Riyadh', ASIA_SAIGON: 'Asia/Saigon', ASIA_SAKHALIN: 'Asia/Sakhalin', ASIA_SAMARKAND: 'Asia/Samarkand', ASIA_SEOUL: 'Asia/Seoul', ASIA_SHANGHAI: 'Asia/Shanghai', ASIA_SINGAPORE: 'Asia/Singapore', ASIA_SREDNEKOLYMSK: 'Asia/Srednekolymsk', ASIA_TAIPEI: 'Asia/Taipei', ASIA_TASHKENT: 'Asia/Tashkent', ASIA_TBILISI: 'Asia/Tbilisi', ASIA_TEHRAN: 'Asia/Tehran', ASIA_TEL_AVIV: 'Asia/Tel_Aviv', ASIA_THIMBU: 'Asia/Thimbu', ASIA_THIMPHU: 'Asia/Thimphu', ASIA_TOKYO: 'Asia/Tokyo', ASIA_TOMSK: 'Asia/Tomsk', ASIA_UJUNG_PANDANG: 'Asia/Ujung_Pandang', ASIA_ULAANBAATAR: 'Asia/Ulaanbaatar', ASIA_ULAN_BATOR: 'Asia/Ulan_Bator', ASIA_URUMQI: 'Asia/Urumqi', ASIA_UST_NERA: 'Asia/Ust-Nera', ASIA_VIENTIANE: 'Asia/Vientiane', ASIA_VLADIVOSTOK: 'Asia/Vladivostok', ASIA_YAKUTSK: 'Asia/Yakutsk', ASIA_YANGON: 'Asia/Yangon', ASIA_YEKATERINBURG: 'Asia/Yekaterinburg', ASIA_YEREVAN: 'Asia/Yerevan', ATLANTIC_AZORES: 'Atlantic/Azores', ATLANTIC_BERMUDA: 'Atlantic/Bermuda', ATLANTIC_CANARY: 'Atlantic/Canary', ATLANTIC_CAPE_VERDE: 'Atlantic/Cape_Verde', ATLANTIC_FAEROE: 'Atlantic/Faeroe', ATLANTIC_FAROE: 'Atlantic/Faroe', ATLANTIC_JAN_MAYEN: 'Atlantic/Jan_Mayen', ATLANTIC_MADEIRA: 'Atlantic/Madeira', ATLANTIC_REYKJAVIK: 'Atlantic/Reykjavik', ATLANTIC_SOUTH_GEORGIA: 'Atlantic/South_Georgia', ATLANTIC_ST_HELENA: 'Atlantic/St_Helena', ATLANTIC_STANLEY: 'Atlantic/Stanley', AUSTRALIA_ACT: 'Australia/ACT', AUSTRALIA_ADELAIDE: 'Australia/Adelaide', AUSTRALIA_BRISBANE: 'Australia/Brisbane', AUSTRALIA_BROKEN_HILL: 'Australia/Broken_Hill', AUSTRALIA_CANBERRA: 'Australia/Canberra', AUSTRALIA_CURRIE: 'Australia/Currie', AUSTRALIA_DARWIN: 'Australia/Darwin', AUSTRALIA_EUCLA: 'Australia/Eucla', AUSTRALIA_HOBART: 'Australia/Hobart', AUSTRALIA_LHI: 'Australia/LHI', AUSTRALIA_LINDEMAN: 'Australia/Lindeman', AUSTRALIA_LORD_HOWE: 'Australia/Lord_Howe', AUSTRALIA_MELBOURNE: 'Australia/Melbourne', AUSTRALIA_NSW: 'Australia/NSW', AUSTRALIA_NORTH: 'Australia/North', AUSTRALIA_PERTH: 'Australia/Perth', AUSTRALIA_QUEENSLAND: 'Australia/Queensland', AUSTRALIA_SOUTH: 'Australia/South', AUSTRALIA_SYDNEY: 'Australia/Sydney', AUSTRALIA_TASMANIA: 'Australia/Tasmania', AUSTRALIA_VICTORIA: 'Australia/Victoria', AUSTRALIA_WEST: 'Australia/West', AUSTRALIA_YANCOWINNA: 'Australia/Yancowinna', BRAZIL_ACRE: 'Brazil/Acre', BRAZIL_DENORONHA: 'Brazil/DeNoronha', BRAZIL_EAST: 'Brazil/East', BRAZIL_WEST: 'Brazil/West', CET: 'undefined', CST6CDT: 'undefined', CANADA_ATLANTIC: 'Canada/Atlantic', CANADA_CENTRAL: 'Canada/Central', CANADA_EASTERN: 'Canada/Eastern', CANADA_MOUNTAIN: 'Canada/Mountain', CANADA_NEWFOUNDLAND: 'Canada/Newfoundland', CANADA_PACIFIC: 'Canada/Pacific', CANADA_SASKATCHEWAN: 'Canada/Saskatchewan', CANADA_YUKON: 'Canada/Yukon', CHILE_CONTINENTAL: 'Chile/Continental', CHILE_EASTERISLAND: 'Chile/EasterIsland', CUBA: 'Cuba', EET: 'undefined', EST: 'undefined', EST5EDT: 'undefined', EGYPT: 'Egypt', EIRE: 'Eire', ETC_GMT: 'Etc/GMT', ETC_GMT_0: 'Etc/GMT-0', ETC_GMT_1: 'Etc/GMT-1', ETC_GMT_10: 'Etc/GMT-10', ETC_GMT_11: 'Etc/GMT-11', ETC_GMT_12: 'Etc/GMT-12', ETC_GMT_2: 'Etc/GMT-2', ETC_GMT_3: 'Etc/GMT-3', ETC_GMT_4: 'Etc/GMT-4', ETC_GMT_5: 'Etc/GMT-5', ETC_GMT_6: 'Etc/GMT-6', ETC_GMT_7: 'Etc/GMT-7', ETC_GMT_8: 'Etc/GMT-8', ETC_GMT_9: 'Etc/GMT-9', ETC_GMT_13: 'Etc/GMT-13', ETC_GMT_14: 'Etc/GMT-14', ETC_GMT0: 'Etc/GMT0', ETC_GREENWICH: 'Etc/Greenwich', ETC_UCT: 'Etc/UCT', ETC_UTC: 'Etc/UTC', ETC_UNIVERSAL: 'Etc/Universal', ETC_ZULU: 'Etc/Zulu', EUROPE_AMSTERDAM: 'Europe/Amsterdam', EUROPE_ANDORRA: 'Europe/Andorra', EUROPE_ASTRAKHAN: 'Europe/Astrakhan', EUROPE_ATHENS: 'Europe/Athens', EUROPE_BELFAST: 'Europe/Belfast', EUROPE_BELGRADE: 'Europe/Belgrade', EUROPE_BERLIN: 'Europe/Berlin', EUROPE_BRATISLAVA: 'Europe/Bratislava', EUROPE_BRUSSELS: 'Europe/Brussels', EUROPE_BUCHAREST: 'Europe/Bucharest', EUROPE_BUDAPEST: 'Europe/Budapest', EUROPE_BUSINGEN: 'Europe/Busingen', EUROPE_CHISINAU: 'Europe/Chisinau', EUROPE_COPENHAGEN: 'Europe/Copenhagen', EUROPE_DUBLIN: 'Europe/Dublin', EUROPE_GIBRALTAR: 'Europe/Gibraltar', EUROPE_GUERNSEY: 'Europe/Guernsey', EUROPE_HELSINKI: 'Europe/Helsinki', EUROPE_ISLE_OF_MAN: 'Europe/Isle_of_Man', EUROPE_ISTANBUL: 'Europe/Istanbul', EUROPE_JERSEY: 'Europe/Jersey', EUROPE_KALININGRAD: 'Europe/Kaliningrad', EUROPE_KIEV: 'Europe/Kiev', EUROPE_KIROV: 'Europe/Kirov', EUROPE_LISBON: 'Europe/Lisbon', EUROPE_LJUBLJANA: 'Europe/Ljubljana', EUROPE_LONDON: 'Europe/London', EUROPE_LUXEMBOURG: 'Europe/Luxembourg', EUROPE_MADRID: 'Europe/Madrid', EUROPE_MALTA: 'Europe/Malta', EUROPE_MARIEHAMN: 'Europe/Mariehamn', EUROPE_MINSK: 'Europe/Minsk', EUROPE_MONACO: 'Europe/Monaco', EUROPE_MOSCOW: 'Europe/Moscow', EUROPE_NICOSIA: 'Europe/Nicosia', EUROPE_OSLO: 'Europe/Oslo', EUROPE_PARIS: 'Europe/Paris', EUROPE_PODGORICA: 'Europe/Podgorica', EUROPE_PRAGUE: 'Europe/Prague', EUROPE_RIGA: 'Europe/Riga', EUROPE_ROME: 'Europe/Rome', EUROPE_SAMARA: 'Europe/Samara', EUROPE_SAN_MARINO: 'Europe/San_Marino', EUROPE_SARAJEVO: 'Europe/Sarajevo', EUROPE_SARATOV: 'Europe/Saratov', EUROPE_SIMFEROPOL: 'Europe/Simferopol', EUROPE_SKOPJE: 'Europe/Skopje', EUROPE_SOFIA: 'Europe/Sofia', EUROPE_STOCKHOLM: 'Europe/Stockholm', EUROPE_TALLINN: 'Europe/Tallinn', EUROPE_TIRANE: 'Europe/Tirane', EUROPE_TIRASPOL: 'Europe/Tiraspol', EUROPE_ULYANOVSK: 'Europe/Ulyanovsk', EUROPE_UZHGOROD: 'Europe/Uzhgorod', EUROPE_VADUZ: 'Europe/Vaduz', EUROPE_VATICAN: 'Europe/Vatican', EUROPE_VIENNA: 'Europe/Vienna', EUROPE_VILNIUS: 'Europe/Vilnius', EUROPE_VOLGOGRAD: 'Europe/Volgograd', EUROPE_WARSAW: 'Europe/Warsaw', EUROPE_ZAGREB: 'Europe/Zagreb', EUROPE_ZAPOROZHYE: 'Europe/Zaporozhye', EUROPE_ZURICH: 'Europe/Zurich', FACTORY: 'Factory', GB: 'undefined', GB_EIRE: 'GB-Eire', GMT: 'undefined', GMT_0: 'GMT-0', GMT0: 'undefined', GREENWICH: 'Greenwich', HST: 'undefined', HONGKONG: 'Hongkong', ICELAND: 'Iceland', INDIAN_ANTANANARIVO: 'Indian/Antananarivo', INDIAN_CHAGOS: 'Indian/Chagos', INDIAN_CHRISTMAS: 'Indian/Christmas', INDIAN_COCOS: 'Indian/Cocos', INDIAN_COMORO: 'Indian/Comoro', INDIAN_KERGUELEN: 'Indian/Kerguelen', INDIAN_MAHE: 'Indian/Mahe', INDIAN_MALDIVES: 'Indian/Maldives', INDIAN_MAURITIUS: 'Indian/Mauritius', INDIAN_MAYOTTE: 'Indian/Mayotte', INDIAN_REUNION: 'Indian/Reunion', IRAN: 'Iran', ISRAEL: 'Israel', JAMAICA: 'Jamaica', JAPAN: 'Japan', KWAJALEIN: 'Kwajalein', LIBYA: 'Libya', MET: 'undefined', MST: 'undefined', MST7MDT: 'undefined', MEXICO_BAJANORTE: 'Mexico/BajaNorte', MEXICO_BAJASUR: 'Mexico/BajaSur', MEXICO_GENERAL: 'Mexico/General', NZ: 'undefined', NZ_CHAT: 'NZ-CHAT', NAVAJO: 'Navajo', PRC: 'undefined', PST8PDT: 'undefined', PACIFIC_APIA: 'Pacific/Apia', PACIFIC_AUCKLAND: 'Pacific/Auckland', PACIFIC_BOUGAINVILLE: 'Pacific/Bougainville', PACIFIC_CHATHAM: 'Pacific/Chatham', PACIFIC_CHUUK: 'Pacific/Chuuk', PACIFIC_EASTER: 'Pacific/Easter', PACIFIC_EFATE: 'Pacific/Efate', PACIFIC_ENDERBURY: 'Pacific/Enderbury', PACIFIC_FAKAOFO: 'Pacific/Fakaofo', PACIFIC_FIJI: 'Pacific/Fiji', PACIFIC_FUNAFUTI: 'Pacific/Funafuti', PACIFIC_GALAPAGOS: 'Pacific/Galapagos', PACIFIC_GAMBIER: 'Pacific/Gambier', PACIFIC_GUADALCANAL: 'Pacific/Guadalcanal', PACIFIC_GUAM: 'Pacific/Guam', PACIFIC_HONOLULU: 'Pacific/Honolulu', PACIFIC_JOHNSTON: 'Pacific/Johnston', PACIFIC_KIRITIMATI: 'Pacific/Kiritimati', PACIFIC_KOSRAE: 'Pacific/Kosrae', PACIFIC_KWAJALEIN: 'Pacific/Kwajalein', PACIFIC_MAJURO: 'Pacific/Majuro', PACIFIC_MARQUESAS: 'Pacific/Marquesas', PACIFIC_MIDWAY: 'Pacific/Midway', PACIFIC_NAURU: 'Pacific/Nauru', PACIFIC_NIUE: 'Pacific/Niue', PACIFIC_NORFOLK: 'Pacific/Norfolk', PACIFIC_NOUMEA: 'Pacific/Noumea', PACIFIC_PAGO_PAGO: 'Pacific/Pago_Pago', PACIFIC_PALAU: 'Pacific/Palau', PACIFIC_PITCAIRN: 'Pacific/Pitcairn', PACIFIC_POHNPEI: 'Pacific/Pohnpei', PACIFIC_PONAPE: 'Pacific/Ponape', PACIFIC_PORT_MORESBY: 'Pacific/Port_Moresby', PACIFIC_RAROTONGA: 'Pacific/Rarotonga', PACIFIC_SAIPAN: 'Pacific/Saipan', PACIFIC_SAMOA: 'Pacific/Samoa', PACIFIC_TAHITI: 'Pacific/Tahiti', PACIFIC_TARAWA: 'Pacific/Tarawa', PACIFIC_TONGATAPU: 'Pacific/Tongatapu', PACIFIC_TRUK: 'Pacific/Truk', PACIFIC_WAKE: 'Pacific/Wake', PACIFIC_WALLIS: 'Pacific/Wallis', PACIFIC_YAP: 'Pacific/Yap', POLAND: 'Poland', PORTUGAL: 'Portugal', ROC: 'undefined', ROK: 'undefined', SINGAPORE: 'Singapore', TURKEY: 'Turkey', UCT: 'undefined', US_ALASKA: 'US/Alaska', US_ALEUTIAN: 'US/Aleutian', US_ARIZONA: 'US/Arizona', US_CENTRAL: 'US/Central', US_EAST_INDIANA: 'US/East-Indiana', US_EASTERN: 'US/Eastern', US_HAWAII: 'US/Hawaii', US_INDIANA_STARKE: 'US/Indiana-Starke', US_MICHIGAN: 'US/Michigan', US_MOUNTAIN: 'US/Mountain', US_PACIFIC: 'US/Pacific', US_PACIFIC_NEW: 'US/Pacific-New', US_SAMOA: 'US/Samoa', UTC: 'undefined', UNIVERSAL: 'Universal', W_SU: 'W-SU', WET: 'undefined', ZULU: 'Zulu' };

export type RequestThreeDSecure3Resolvers = { ANY: 'any', AUTOMATIC: 'automatic' };

export type Usage9Resolvers = { OFF_SESSION: 'off_session', ON_SESSION: 'on_session' };

export type CancellationReason8Resolvers = { ABANDONED: 'abandoned', DUPLICATE: 'duplicate', REQUESTED_BY_CUSTOMER: 'requested_by_customer' };

export type Type58Resolvers = { BUCKET: 'bucket', FINITE: 'finite', INFINITE: 'infinite' };

export type Value10Resolvers = { _: 'undefined', IN_STOCK: 'in_stock', LIMITED: 'limited', OUT_OF_STOCK: 'out_of_stock' };

export type Flow7Resolvers = { CODE_VERIFICATION: 'code_verification', NONE: 'none', RECEIVER: 'receiver', REDIRECT: 'redirect' };

export type Status45Resolvers = { ACCEPTED: 'accepted', PENDING: 'pending', REFUSED: 'refused', REVOKED: 'revoked' };

export type Interval10Resolvers = { ONE_TIME: 'one_time', SCHEDULED: 'scheduled', VARIABLE: 'variable' };

export type NotificationMethodResolvers = { DEPRECATED_NONE: 'deprecated_none', EMAIL: 'email', MANUAL: 'manual', NONE: 'none', STRIPE_EMAIL: 'stripe_email' };

export type RefundAttributesMethod2Resolvers = { EMAIL: 'email', MANUAL: 'manual', NONE: 'none' };

export type Usage10Resolvers = { REUSABLE: 'reusable', SINGLE_USE: 'single_use' };

export type UsageRecordResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['UsageRecord'] = ResolversParentTypes['UsageRecord']> = ResolversObject<{
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  livemode?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object80'], ParentType, ContextType>;
  quantity?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  subscriptionItem?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Object80Resolvers = { USAGE_RECORD: 'usage_record' };

export type ActionResolvers = { INCREMENT: 'increment', SET: 'set' };

export type BillingCycleAnchor7Resolvers = { AUTOMATIC: 'automatic', PHASE_START: 'phase_start' };

export type EndBehavior2Resolvers = { CANCEL: 'cancel', NONE: 'none', RELEASE: 'release', RENEW: 'renew' };

export type ProrationBehavior7Resolvers = { ALWAYS_INVOICE: 'always_invoice', CREATE_PRORATIONS: 'create_prorations', NONE: 'none' };

export type TaxType2Resolvers = { GST: 'gst', HST: 'hst', PST: 'pst', QST: 'qst', SALES_TAX: 'sales_tax', VAT: 'vat' };

export type TerminalConnectionTokenResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['TerminalConnectionToken'] = ResolversParentTypes['TerminalConnectionToken']> = ResolversObject<{
  location?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  object?: Resolver<ResolversTypes['Object83'], ParentType, ContextType>;
  secret?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Object83Resolvers = { TERMINAL_CONNECTION_TOKEN: 'terminal.connection_token' };

export type BusinessType3Resolvers = { COMPANY: 'company', GOVERNMENT_ENTITY: 'government_entity', INDIVIDUAL: 'individual', NON_PROFIT: 'non_profit' };

export type AccountHolderType14Resolvers = { COMPANY: 'company', INDIVIDUAL: 'individual' };

export type AccountType14Resolvers = { CHECKING: 'checking', FUTSU: 'futsu', SAVINGS: 'savings', TOZA: 'toza' };

export type SourceType4Resolvers = { BANK_ACCOUNT: 'bank_account', CARD: 'card', FPX: 'fpx' };

export type ApiVersion3Resolvers = { _2011_01_01: '2011-01-01', _2011_06_21: '2011-06-21', _2011_06_28: '2011-06-28', _2011_08_01: '2011-08-01', _2011_09_15: '2011-09-15', _2011_11_17: '2011-11-17', _2012_02_23: '2012-02-23', _2012_03_25: '2012-03-25', _2012_06_18: '2012-06-18', _2012_06_28: '2012-06-28', _2012_07_09: '2012-07-09', _2012_09_24: '2012-09-24', _2012_10_26: '2012-10-26', _2012_11_07: '2012-11-07', _2013_02_11: '2013-02-11', _2013_02_13: '2013-02-13', _2013_07_05: '2013-07-05', _2013_08_12: '2013-08-12', _2013_08_13: '2013-08-13', _2013_10_29: '2013-10-29', _2013_12_03: '2013-12-03', _2014_01_31: '2014-01-31', _2014_03_13: '2014-03-13', _2014_03_28: '2014-03-28', _2014_05_19: '2014-05-19', _2014_06_13: '2014-06-13', _2014_06_17: '2014-06-17', _2014_07_22: '2014-07-22', _2014_07_26: '2014-07-26', _2014_08_04: '2014-08-04', _2014_08_20: '2014-08-20', _2014_09_08: '2014-09-08', _2014_10_07: '2014-10-07', _2014_11_05: '2014-11-05', _2014_11_20: '2014-11-20', _2014_12_08: '2014-12-08', _2014_12_17: '2014-12-17', _2014_12_22: '2014-12-22', _2015_01_11: '2015-01-11', _2015_01_26: '2015-01-26', _2015_02_10: '2015-02-10', _2015_02_16: '2015-02-16', _2015_02_18: '2015-02-18', _2015_03_24: '2015-03-24', _2015_04_07: '2015-04-07', _2015_06_15: '2015-06-15', _2015_07_07: '2015-07-07', _2015_07_13: '2015-07-13', _2015_07_28: '2015-07-28', _2015_08_07: '2015-08-07', _2015_08_19: '2015-08-19', _2015_09_03: '2015-09-03', _2015_09_08: '2015-09-08', _2015_09_23: '2015-09-23', _2015_10_01: '2015-10-01', _2015_10_12: '2015-10-12', _2015_10_16: '2015-10-16', _2016_02_03: '2016-02-03', _2016_02_19: '2016-02-19', _2016_02_22: '2016-02-22', _2016_02_23: '2016-02-23', _2016_02_29: '2016-02-29', _2016_03_07: '2016-03-07', _2016_06_15: '2016-06-15', _2016_07_06: '2016-07-06', _2016_10_19: '2016-10-19', _2017_01_27: '2017-01-27', _2017_02_14: '2017-02-14', _2017_04_06: '2017-04-06', _2017_05_25: '2017-05-25', _2017_06_05: '2017-06-05', _2017_08_15: '2017-08-15', _2017_12_14: '2017-12-14', _2018_01_23: '2018-01-23', _2018_02_05: '2018-02-05', _2018_02_06: '2018-02-06', _2018_02_28: '2018-02-28', _2018_05_21: '2018-05-21', _2018_07_27: '2018-07-27', _2018_08_23: '2018-08-23', _2018_09_06: '2018-09-06', _2018_09_24: '2018-09-24', _2018_10_31: '2018-10-31', _2018_11_08: '2018-11-08', _2019_02_11: '2019-02-11', _2019_02_19: '2019-02-19', _2019_03_14: '2019-03-14', _2019_05_16: '2019-05-16', _2019_08_14: '2019-08-14', _2019_09_09: '2019-09-09', _2019_10_08: '2019-10-08', _2019_10_17: '2019-10-17', _2019_11_05: '2019-11-05', _2019_12_03: '2019-12-03', _2020_03_02: '2020-03-02', _2020_08_27: '2020-08-27' };

export type EnabledEvents2ListItemResolvers = { _: '*', ACCOUNT_APPLICATION_AUTHORIZED: 'account.application.authorized', ACCOUNT_APPLICATION_DEAUTHORIZED: 'account.application.deauthorized', ACCOUNT_EXTERNAL_ACCOUNT_CREATED: 'account.external_account.created', ACCOUNT_EXTERNAL_ACCOUNT_DELETED: 'account.external_account.deleted', ACCOUNT_EXTERNAL_ACCOUNT_UPDATED: 'account.external_account.updated', ACCOUNT_UPDATED: 'account.updated', APPLICATION_FEE_CREATED: 'application_fee.created', APPLICATION_FEE_REFUND_UPDATED: 'application_fee.refund.updated', APPLICATION_FEE_REFUNDED: 'application_fee.refunded', BALANCE_AVAILABLE: 'balance.available', BILLING_PORTAL_CONFIGURATION_CREATED: 'billing_portal.configuration.created', BILLING_PORTAL_CONFIGURATION_UPDATED: 'billing_portal.configuration.updated', CAPABILITY_UPDATED: 'capability.updated', CHARGE_CAPTURED: 'charge.captured', CHARGE_DISPUTE_CLOSED: 'charge.dispute.closed', CHARGE_DISPUTE_CREATED: 'charge.dispute.created', CHARGE_DISPUTE_FUNDS_REINSTATED: 'charge.dispute.funds_reinstated', CHARGE_DISPUTE_FUNDS_WITHDRAWN: 'charge.dispute.funds_withdrawn', CHARGE_DISPUTE_UPDATED: 'charge.dispute.updated', CHARGE_EXPIRED: 'charge.expired', CHARGE_FAILED: 'charge.failed', CHARGE_PENDING: 'charge.pending', CHARGE_REFUND_UPDATED: 'charge.refund.updated', CHARGE_REFUNDED: 'charge.refunded', CHARGE_SUCCEEDED: 'charge.succeeded', CHARGE_UPDATED: 'charge.updated', CHECKOUT_SESSION_ASYNC_PAYMENT_FAILED: 'checkout.session.async_payment_failed', CHECKOUT_SESSION_ASYNC_PAYMENT_SUCCEEDED: 'checkout.session.async_payment_succeeded', CHECKOUT_SESSION_COMPLETED: 'checkout.session.completed', COUPON_CREATED: 'coupon.created', COUPON_DELETED: 'coupon.deleted', COUPON_UPDATED: 'coupon.updated', CREDIT_NOTE_CREATED: 'credit_note.created', CREDIT_NOTE_UPDATED: 'credit_note.updated', CREDIT_NOTE_VOIDED: 'credit_note.voided', CUSTOMER_CREATED: 'customer.created', CUSTOMER_DELETED: 'customer.deleted', CUSTOMER_DISCOUNT_CREATED: 'customer.discount.created', CUSTOMER_DISCOUNT_DELETED: 'customer.discount.deleted', CUSTOMER_DISCOUNT_UPDATED: 'customer.discount.updated', CUSTOMER_SOURCE_CREATED: 'customer.source.created', CUSTOMER_SOURCE_DELETED: 'customer.source.deleted', CUSTOMER_SOURCE_EXPIRING: 'customer.source.expiring', CUSTOMER_SOURCE_UPDATED: 'customer.source.updated', CUSTOMER_SUBSCRIPTION_CREATED: 'customer.subscription.created', CUSTOMER_SUBSCRIPTION_DELETED: 'customer.subscription.deleted', CUSTOMER_SUBSCRIPTION_PENDING_UPDATE_APPLIED: 'customer.subscription.pending_update_applied', CUSTOMER_SUBSCRIPTION_PENDING_UPDATE_EXPIRED: 'customer.subscription.pending_update_expired', CUSTOMER_SUBSCRIPTION_TRIAL_WILL_END: 'customer.subscription.trial_will_end', CUSTOMER_SUBSCRIPTION_UPDATED: 'customer.subscription.updated', CUSTOMER_TAX_ID_CREATED: 'customer.tax_id.created', CUSTOMER_TAX_ID_DELETED: 'customer.tax_id.deleted', CUSTOMER_TAX_ID_UPDATED: 'customer.tax_id.updated', CUSTOMER_UPDATED: 'customer.updated', FILE_CREATED: 'file.created', IDENTITY_VERIFICATION_SESSION_CANCELED: 'identity.verification_session.canceled', IDENTITY_VERIFICATION_SESSION_CREATED: 'identity.verification_session.created', IDENTITY_VERIFICATION_SESSION_PROCESSING: 'identity.verification_session.processing', IDENTITY_VERIFICATION_SESSION_REDACTED: 'identity.verification_session.redacted', IDENTITY_VERIFICATION_SESSION_REQUIRES_INPUT: 'identity.verification_session.requires_input', IDENTITY_VERIFICATION_SESSION_VERIFIED: 'identity.verification_session.verified', INVOICE_CREATED: 'invoice.created', INVOICE_DELETED: 'invoice.deleted', INVOICE_FINALIZATION_FAILED: 'invoice.finalization_failed', INVOICE_FINALIZED: 'invoice.finalized', INVOICE_MARKED_UNCOLLECTIBLE: 'invoice.marked_uncollectible', INVOICE_PAID: 'invoice.paid', INVOICE_PAYMENT_ACTION_REQUIRED: 'invoice.payment_action_required', INVOICE_PAYMENT_FAILED: 'invoice.payment_failed', INVOICE_PAYMENT_SUCCEEDED: 'invoice.payment_succeeded', INVOICE_SENT: 'invoice.sent', INVOICE_UPCOMING: 'invoice.upcoming', INVOICE_UPDATED: 'invoice.updated', INVOICE_VOIDED: 'invoice.voided', INVOICEITEM_CREATED: 'invoiceitem.created', INVOICEITEM_DELETED: 'invoiceitem.deleted', INVOICEITEM_UPDATED: 'invoiceitem.updated', ISSUING_AUTHORIZATION_CREATED: 'issuing_authorization.created', ISSUING_AUTHORIZATION_REQUEST: 'issuing_authorization.request', ISSUING_AUTHORIZATION_UPDATED: 'issuing_authorization.updated', ISSUING_CARD_CREATED: 'issuing_card.created', ISSUING_CARD_UPDATED: 'issuing_card.updated', ISSUING_CARDHOLDER_CREATED: 'issuing_cardholder.created', ISSUING_CARDHOLDER_UPDATED: 'issuing_cardholder.updated', ISSUING_DISPUTE_CLOSED: 'issuing_dispute.closed', ISSUING_DISPUTE_CREATED: 'issuing_dispute.created', ISSUING_DISPUTE_FUNDS_REINSTATED: 'issuing_dispute.funds_reinstated', ISSUING_DISPUTE_SUBMITTED: 'issuing_dispute.submitted', ISSUING_DISPUTE_UPDATED: 'issuing_dispute.updated', ISSUING_TRANSACTION_CREATED: 'issuing_transaction.created', ISSUING_TRANSACTION_UPDATED: 'issuing_transaction.updated', MANDATE_UPDATED: 'mandate.updated', ORDER_CREATED: 'order.created', ORDER_PAYMENT_FAILED: 'order.payment_failed', ORDER_PAYMENT_SUCCEEDED: 'order.payment_succeeded', ORDER_UPDATED: 'order.updated', ORDER_RETURN_CREATED: 'order_return.created', PAYMENT_INTENT_AMOUNT_CAPTURABLE_UPDATED: 'payment_intent.amount_capturable_updated', PAYMENT_INTENT_CANCELED: 'payment_intent.canceled', PAYMENT_INTENT_CREATED: 'payment_intent.created', PAYMENT_INTENT_PAYMENT_FAILED: 'payment_intent.payment_failed', PAYMENT_INTENT_PROCESSING: 'payment_intent.processing', PAYMENT_INTENT_REQUIRES_ACTION: 'payment_intent.requires_action', PAYMENT_INTENT_SUCCEEDED: 'payment_intent.succeeded', PAYMENT_METHOD_ATTACHED: 'payment_method.attached', PAYMENT_METHOD_AUTOMATICALLY_UPDATED: 'payment_method.automatically_updated', PAYMENT_METHOD_DETACHED: 'payment_method.detached', PAYMENT_METHOD_UPDATED: 'payment_method.updated', PAYOUT_CANCELED: 'payout.canceled', PAYOUT_CREATED: 'payout.created', PAYOUT_FAILED: 'payout.failed', PAYOUT_PAID: 'payout.paid', PAYOUT_UPDATED: 'payout.updated', PERSON_CREATED: 'person.created', PERSON_DELETED: 'person.deleted', PERSON_UPDATED: 'person.updated', PLAN_CREATED: 'plan.created', PLAN_DELETED: 'plan.deleted', PLAN_UPDATED: 'plan.updated', PRICE_CREATED: 'price.created', PRICE_DELETED: 'price.deleted', PRICE_UPDATED: 'price.updated', PRODUCT_CREATED: 'product.created', PRODUCT_DELETED: 'product.deleted', PRODUCT_UPDATED: 'product.updated', PROMOTION_CODE_CREATED: 'promotion_code.created', PROMOTION_CODE_UPDATED: 'promotion_code.updated', QUOTE_ACCEPTED: 'quote.accepted', QUOTE_CANCELED: 'quote.canceled', QUOTE_CREATED: 'quote.created', QUOTE_FINALIZED: 'quote.finalized', RADAR_EARLY_FRAUD_WARNING_CREATED: 'radar.early_fraud_warning.created', RADAR_EARLY_FRAUD_WARNING_UPDATED: 'radar.early_fraud_warning.updated', RECIPIENT_CREATED: 'recipient.created', RECIPIENT_DELETED: 'recipient.deleted', RECIPIENT_UPDATED: 'recipient.updated', REPORTING_REPORT_RUN_FAILED: 'reporting.report_run.failed', REPORTING_REPORT_RUN_SUCCEEDED: 'reporting.report_run.succeeded', REPORTING_REPORT_TYPE_UPDATED: 'reporting.report_type.updated', REVIEW_CLOSED: 'review.closed', REVIEW_OPENED: 'review.opened', SETUP_INTENT_CANCELED: 'setup_intent.canceled', SETUP_INTENT_CREATED: 'setup_intent.created', SETUP_INTENT_REQUIRES_ACTION: 'setup_intent.requires_action', SETUP_INTENT_SETUP_FAILED: 'setup_intent.setup_failed', SETUP_INTENT_SUCCEEDED: 'setup_intent.succeeded', SIGMA_SCHEDULED_QUERY_RUN_CREATED: 'sigma.scheduled_query_run.created', SKU_CREATED: 'sku.created', SKU_DELETED: 'sku.deleted', SKU_UPDATED: 'sku.updated', SOURCE_CANCELED: 'source.canceled', SOURCE_CHARGEABLE: 'source.chargeable', SOURCE_FAILED: 'source.failed', SOURCE_MANDATE_NOTIFICATION: 'source.mandate_notification', SOURCE_REFUND_ATTRIBUTES_REQUIRED: 'source.refund_attributes_required', SOURCE_TRANSACTION_CREATED: 'source.transaction.created', SOURCE_TRANSACTION_UPDATED: 'source.transaction.updated', SUBSCRIPTION_SCHEDULE_ABORTED: 'subscription_schedule.aborted', SUBSCRIPTION_SCHEDULE_CANCELED: 'subscription_schedule.canceled', SUBSCRIPTION_SCHEDULE_COMPLETED: 'subscription_schedule.completed', SUBSCRIPTION_SCHEDULE_CREATED: 'subscription_schedule.created', SUBSCRIPTION_SCHEDULE_EXPIRING: 'subscription_schedule.expiring', SUBSCRIPTION_SCHEDULE_RELEASED: 'subscription_schedule.released', SUBSCRIPTION_SCHEDULE_UPDATED: 'subscription_schedule.updated', TAX_RATE_CREATED: 'tax_rate.created', TAX_RATE_UPDATED: 'tax_rate.updated', TOPUP_CANCELED: 'topup.canceled', TOPUP_CREATED: 'topup.created', TOPUP_FAILED: 'topup.failed', TOPUP_REVERSED: 'topup.reversed', TOPUP_SUCCEEDED: 'topup.succeeded', TRANSFER_CREATED: 'transfer.created', TRANSFER_FAILED: 'transfer.failed', TRANSFER_PAID: 'transfer.paid', TRANSFER_REVERSED: 'transfer.reversed', TRANSFER_UPDATED: 'transfer.updated' };

export type Resolvers<ContextType = MeshContext> = ResolversObject<{
  Query?: QueryResolvers<ContextType>;
  Continent?: ContinentResolvers<ContextType>;
  Country?: CountryResolvers<ContextType>;
  Language?: LanguageResolvers<ContextType>;
  State?: StateResolvers<ContextType>;
  Upload?: GraphQLScalarType;
  Mutation?: MutationResolvers<ContextType>;
  Cart?: CartResolvers<ContextType>;
  Node?: NodeResolvers<ContextType>;
  Currency?: CurrencyResolvers<ContextType>;
  CartItem?: CartItemResolvers<ContextType>;
  Money?: MoneyResolvers<ContextType>;
  CustomCartAttribute?: CustomCartAttributeResolvers<ContextType>;
  Json?: GraphQLScalarType;
  Date?: GraphQLScalarType;
  DeletePayload?: DeletePayloadResolvers<ContextType>;
  Order?: OrderResolvers<ContextType>;
  Address?: AddressResolvers<ContextType>;
  OrderItem?: OrderItemResolvers<ContextType>;
  CustomAttribute?: CustomAttributeResolvers<ContextType>;
  ThreeDSecure?: ThreeDSecureResolvers<ContextType>;
  Card2?: Card2Resolvers<ContextType>;
  JSON?: GraphQLScalarType;
  AvailablePayoutMethodsListItem?: AvailablePayoutMethodsListItemResolvers;
  Object?: ObjectResolvers;
  Object2?: Object2Resolvers;
  Account3?: Account3Resolvers<ContextType>;
  BusinessProfile?: BusinessProfileResolvers<ContextType>;
  SupportAddress?: SupportAddressResolvers<ContextType>;
  BusinessType?: BusinessTypeResolvers;
  AccountCapabilities?: AccountCapabilitiesResolvers<ContextType>;
  AcssDebitPayments?: AcssDebitPaymentsResolvers;
  AfterpayClearpayPayments?: AfterpayClearpayPaymentsResolvers;
  AuBecsDebitPayments?: AuBecsDebitPaymentsResolvers;
  BacsDebitPayments?: BacsDebitPaymentsResolvers;
  BancontactPayments?: BancontactPaymentsResolvers;
  BoletoPayments?: BoletoPaymentsResolvers;
  CardIssuing?: CardIssuingResolvers;
  CardPayments?: CardPaymentsResolvers;
  CartesBancairesPayments?: CartesBancairesPaymentsResolvers;
  EpsPayments?: EpsPaymentsResolvers;
  FpxPayments?: FpxPaymentsResolvers;
  GiropayPayments?: GiropayPaymentsResolvers;
  GrabpayPayments?: GrabpayPaymentsResolvers;
  IdealPayments?: IdealPaymentsResolvers;
  JcbPayments?: JcbPaymentsResolvers;
  LegacyPayments?: LegacyPaymentsResolvers;
  OxxoPayments?: OxxoPaymentsResolvers;
  P24Payments?: P24PaymentsResolvers;
  SepaDebitPayments?: SepaDebitPaymentsResolvers;
  SofortPayments?: SofortPaymentsResolvers;
  TaxReportingUs1099K?: TaxReportingUs1099KResolvers;
  TaxReportingUs1099Misc?: TaxReportingUs1099MiscResolvers;
  Transfers?: TransfersResolvers;
  LegalEntityCompany?: LegalEntityCompanyResolvers<ContextType>;
  AddressKana?: AddressKanaResolvers<ContextType>;
  AddressKanji?: AddressKanjiResolvers<ContextType>;
  Structure?: StructureResolvers;
  Verification?: VerificationResolvers<ContextType>;
  Document?: DocumentResolvers<ContextType>;
  AccountController?: AccountControllerResolvers<ContextType>;
  Type?: TypeResolvers;
  ExternalAccounts?: ExternalAccountsResolvers<ContextType>;
  DataListItem?: DataListItemResolvers<ContextType>;
  Object4?: Object4Resolvers;
  Person?: PersonResolvers<ContextType>;
  AddressKana2?: AddressKana2Resolvers<ContextType>;
  AddressKanji2?: AddressKanji2Resolvers<ContextType>;
  LegalEntityDob?: LegalEntityDobResolvers<ContextType>;
  Object5?: Object5Resolvers;
  PoliticalExposure?: PoliticalExposureResolvers;
  PersonRelationship?: PersonRelationshipResolvers<ContextType>;
  Requirements?: RequirementsResolvers<ContextType>;
  AccountRequirementsError?: AccountRequirementsErrorResolvers<ContextType>;
  Code?: CodeResolvers;
  LegalEntityPersonVerification?: LegalEntityPersonVerificationResolvers<ContextType>;
  AdditionalDocument?: AdditionalDocumentResolvers<ContextType>;
  LegalEntityPersonVerificationDocument?: LegalEntityPersonVerificationDocumentResolvers<ContextType>;
  Object3?: Object3Resolvers;
  AccountRequirements?: AccountRequirementsResolvers<ContextType>;
  Settings?: SettingsResolvers<ContextType>;
  BacsDebitPayments2?: BacsDebitPayments2Resolvers<ContextType>;
  Branding?: BrandingResolvers<ContextType>;
  CardIssuing2?: CardIssuing2Resolvers<ContextType>;
  CardIssuingAccountTermsOfService?: CardIssuingAccountTermsOfServiceResolvers<ContextType>;
  CardPayments2?: CardPayments2Resolvers<ContextType>;
  AccountDeclineChargeOn?: AccountDeclineChargeOnResolvers<ContextType>;
  Dashboard?: DashboardResolvers<ContextType>;
  Payments?: PaymentsResolvers<ContextType>;
  Payouts?: PayoutsResolvers<ContextType>;
  TransferSchedule?: TransferScheduleResolvers<ContextType>;
  SepaDebitPayments2?: SepaDebitPayments2Resolvers<ContextType>;
  AccountTosAcceptance?: AccountTosAcceptanceResolvers<ContextType>;
  Type2?: Type2Resolvers;
  Polymorphic?: PolymorphicResolvers<ContextType>;
  ListAccountCapability?: ListAccountCapabilityResolvers<ContextType>;
  Capability?: CapabilityResolvers<ContextType>;
  Object6?: Object6Resolvers;
  AccountCapabilityRequirements?: AccountCapabilityRequirementsResolvers<ContextType>;
  Status5?: Status5Resolvers;
  ExternalAccountList?: ExternalAccountListResolvers<ContextType>;
  V1AccountPeople2?: V1AccountPeople2Resolvers<ContextType>;
  V1AccountPersons2?: V1AccountPersons2Resolvers<ContextType>;
  V1Accounts2?: V1Accounts2Resolvers<ContextType>;
  ApplePayDomainList?: ApplePayDomainListResolvers<ContextType>;
  ApplePayDomain?: ApplePayDomainResolvers<ContextType>;
  Object9?: Object9Resolvers;
  V1ApplicationFees2?: V1ApplicationFees2Resolvers<ContextType>;
  ApplicationFee?: ApplicationFeeResolvers<ContextType>;
  Object10?: Object10Resolvers;
  Refunds?: RefundsResolvers<ContextType>;
  FeeRefund?: FeeRefundResolvers<ContextType>;
  Object11?: Object11Resolvers;
  FeeRefundList?: FeeRefundListResolvers<ContextType>;
  Balance?: BalanceResolvers<ContextType>;
  BalanceAmount?: BalanceAmountResolvers<ContextType>;
  BalanceAmountBySourceType?: BalanceAmountBySourceTypeResolvers<ContextType>;
  BalanceDetail?: BalanceDetailResolvers<ContextType>;
  Object12?: Object12Resolvers;
  BalanceTransactionsList?: BalanceTransactionsListResolvers<ContextType>;
  BalanceTransaction3?: BalanceTransaction3Resolvers<ContextType>;
  Fee3?: Fee3Resolvers<ContextType>;
  Object13?: Object13Resolvers;
  Type6?: Type6Resolvers;
  V1BillingPortalConfigurations2?: V1BillingPortalConfigurations2Resolvers<ContextType>;
  BillingPortalConfiguration?: BillingPortalConfigurationResolvers<ContextType>;
  PortalBusinessProfile?: PortalBusinessProfileResolvers<ContextType>;
  PortalFeatures?: PortalFeaturesResolvers<ContextType>;
  PortalCustomerUpdate?: PortalCustomerUpdateResolvers<ContextType>;
  AllowedUpdatesListItem?: AllowedUpdatesListItemResolvers;
  PortalInvoiceList?: PortalInvoiceListResolvers<ContextType>;
  PortalPaymentMethodUpdate?: PortalPaymentMethodUpdateResolvers<ContextType>;
  PortalSubscriptionCancel?: PortalSubscriptionCancelResolvers<ContextType>;
  Mode?: ModeResolvers;
  ProrationBehavior?: ProrationBehaviorResolvers;
  PortalSubscriptionPause?: PortalSubscriptionPauseResolvers<ContextType>;
  PortalSubscriptionUpdate?: PortalSubscriptionUpdateResolvers<ContextType>;
  DefaultAllowedUpdatesListItem?: DefaultAllowedUpdatesListItemResolvers;
  PortalSubscriptionUpdateProduct?: PortalSubscriptionUpdateProductResolvers<ContextType>;
  ProrationBehavior2?: ProrationBehavior2Resolvers;
  Object14?: Object14Resolvers;
  V1BitcoinReceivers2?: V1BitcoinReceivers2Resolvers<ContextType>;
  BitcoinReceiver?: BitcoinReceiverResolvers<ContextType>;
  Object16?: Object16Resolvers;
  Transactions?: TransactionsResolvers<ContextType>;
  BitcoinTransaction?: BitcoinTransactionResolvers<ContextType>;
  Object17?: Object17Resolvers;
  BitcoinTransactionList?: BitcoinTransactionListResolvers<ContextType>;
  V1Charges2?: V1Charges2Resolvers<ContextType>;
  Charge2?: Charge2Resolvers<ContextType>;
  BillingDetails?: BillingDetailsResolvers<ContextType>;
  Address4?: Address4Resolvers<ContextType>;
  FraudDetails?: FraudDetailsResolvers<ContextType>;
  Object18?: Object18Resolvers;
  Outcome?: OutcomeResolvers<ContextType>;
  PaymentMethodDetails?: PaymentMethodDetailsResolvers<ContextType>;
  AchCreditTransfer?: AchCreditTransferResolvers<ContextType>;
  AchDebit?: AchDebitResolvers<ContextType>;
  AccountHolderType4?: AccountHolderType4Resolvers;
  AcssDebit?: AcssDebitResolvers<ContextType>;
  AfterpayClearpay?: AfterpayClearpayResolvers<ContextType>;
  Alipay?: AlipayResolvers<ContextType>;
  AuBecsDebit?: AuBecsDebitResolvers<ContextType>;
  BacsDebit?: BacsDebitResolvers<ContextType>;
  Bancontact?: BancontactResolvers<ContextType>;
  PreferredLanguage?: PreferredLanguageResolvers;
  Boleto?: BoletoResolvers<ContextType>;
  Card4?: Card4Resolvers<ContextType>;
  Checks?: ChecksResolvers<ContextType>;
  Installments?: InstallmentsResolvers<ContextType>;
  Plan?: PlanResolvers<ContextType>;
  Interval3?: Interval3Resolvers;
  Type8?: Type8Resolvers;
  ThreeDSecure2?: ThreeDSecure2Resolvers<ContextType>;
  AuthenticationFlow?: AuthenticationFlowResolvers;
  Result?: ResultResolvers;
  ResultReason?: ResultReasonResolvers;
  Version?: VersionResolvers;
  Wallet?: WalletResolvers<ContextType>;
  Masterpass?: MasterpassResolvers<ContextType>;
  BillingAddress?: BillingAddressResolvers<ContextType>;
  ShippingAddress?: ShippingAddressResolvers<ContextType>;
  Type9?: Type9Resolvers;
  VisaCheckout?: VisaCheckoutResolvers<ContextType>;
  CardPresent?: CardPresentResolvers<ContextType>;
  ReadMethod?: ReadMethodResolvers;
  Receipt?: ReceiptResolvers<ContextType>;
  AccountType4?: AccountType4Resolvers;
  Eps?: EpsResolvers<ContextType>;
  Bank?: BankResolvers;
  Fpx2?: Fpx2Resolvers<ContextType>;
  Bank2?: Bank2Resolvers;
  Giropay?: GiropayResolvers<ContextType>;
  Grabpay?: GrabpayResolvers<ContextType>;
  Ideal?: IdealResolvers<ContextType>;
  Bank3?: Bank3Resolvers;
  InteracPresent?: InteracPresentResolvers<ContextType>;
  Receipt2?: Receipt2Resolvers<ContextType>;
  AccountType5?: AccountType5Resolvers;
  Multibanco?: MultibancoResolvers<ContextType>;
  Oxxo?: OxxoResolvers<ContextType>;
  P24?: P24Resolvers<ContextType>;
  Bank4?: Bank4Resolvers;
  SepaDebit?: SepaDebitResolvers<ContextType>;
  Sofort?: SofortResolvers<ContextType>;
  PreferredLanguage2?: PreferredLanguage2Resolvers;
  WechatPay?: WechatPayResolvers<ContextType>;
  RefundList?: RefundListResolvers<ContextType>;
  Refund?: RefundResolvers<ContextType>;
  Object19?: Object19Resolvers;
  Shipping?: ShippingResolvers<ContextType>;
  TransferData?: TransferDataResolvers<ContextType>;
  Dispute?: DisputeResolvers<ContextType>;
  DisputeEvidence?: DisputeEvidenceResolvers<ContextType>;
  DisputeEvidenceDetails?: DisputeEvidenceDetailsResolvers<ContextType>;
  Object20?: Object20Resolvers;
  Status9?: Status9Resolvers;
  RefundList2?: RefundList2Resolvers<ContextType>;
  PaymentPagesCheckoutSessionList?: PaymentPagesCheckoutSessionListResolvers<ContextType>;
  CheckoutSession?: CheckoutSessionResolvers<ContextType>;
  PaymentPagesCheckoutSessionAutomaticTax?: PaymentPagesCheckoutSessionAutomaticTaxResolvers<ContextType>;
  Status10?: Status10Resolvers;
  BillingAddressCollection?: BillingAddressCollectionResolvers;
  CustomerDetails?: CustomerDetailsResolvers<ContextType>;
  TaxExempt?: TaxExemptResolvers;
  PaymentPagesCheckoutSessionTaxId?: PaymentPagesCheckoutSessionTaxIdResolvers<ContextType>;
  Type11?: Type11Resolvers;
  LineItems?: LineItemsResolvers<ContextType>;
  Item?: ItemResolvers<ContextType>;
  LineItemsDiscountAmount?: LineItemsDiscountAmountResolvers<ContextType>;
  Discount?: DiscountResolvers<ContextType>;
  Coupon?: CouponResolvers<ContextType>;
  CouponAppliesTo?: CouponAppliesToResolvers<ContextType>;
  Duration?: DurationResolvers;
  Object21?: Object21Resolvers;
  Object22?: Object22Resolvers;
  Object23?: Object23Resolvers;
  Price?: PriceResolvers<ContextType>;
  BillingScheme?: BillingSchemeResolvers;
  Object24?: Object24Resolvers;
  Recurring?: RecurringResolvers<ContextType>;
  AggregateUsage?: AggregateUsageResolvers;
  Interval4?: Interval4Resolvers;
  UsageType?: UsageTypeResolvers;
  TaxBehavior?: TaxBehaviorResolvers;
  PriceTier?: PriceTierResolvers<ContextType>;
  TiersMode?: TiersModeResolvers;
  TransformQuantity?: TransformQuantityResolvers<ContextType>;
  Round?: RoundResolvers;
  Type12?: Type12Resolvers;
  LineItemsTaxAmount?: LineItemsTaxAmountResolvers<ContextType>;
  TaxRate?: TaxRateResolvers<ContextType>;
  Object25?: Object25Resolvers;
  TaxType?: TaxTypeResolvers;
  Locale?: LocaleResolvers;
  Mode3?: Mode3Resolvers;
  Object26?: Object26Resolvers;
  PaymentMethodOptions?: PaymentMethodOptionsResolvers<ContextType>;
  AcssDebit2?: AcssDebit2Resolvers<ContextType>;
  Currency21?: Currency21Resolvers;
  CheckoutAcssDebitMandateOptions?: CheckoutAcssDebitMandateOptionsResolvers<ContextType>;
  PaymentSchedule?: PaymentScheduleResolvers;
  TransactionType?: TransactionTypeResolvers;
  VerificationMethod?: VerificationMethodResolvers;
  Boleto2?: Boleto2Resolvers<ContextType>;
  Oxxo2?: Oxxo2Resolvers<ContextType>;
  PaymentStatus?: PaymentStatusResolvers;
  Shipping2?: Shipping2Resolvers<ContextType>;
  ShippingAddressCollection?: ShippingAddressCollectionResolvers<ContextType>;
  SubmitType?: SubmitTypeResolvers;
  PaymentPagesCheckoutSessionTaxIdCollection?: PaymentPagesCheckoutSessionTaxIdCollectionResolvers<ContextType>;
  TotalDetails?: TotalDetailsResolvers<ContextType>;
  Breakdown?: BreakdownResolvers<ContextType>;
  PaymentPagesCheckoutSessionListLineItems?: PaymentPagesCheckoutSessionListLineItemsResolvers<ContextType>;
  V1CountrySpecs2?: V1CountrySpecs2Resolvers<ContextType>;
  CountrySpec?: CountrySpecResolvers<ContextType>;
  Object27?: Object27Resolvers;
  CountrySpecVerificationFields?: CountrySpecVerificationFieldsResolvers<ContextType>;
  CountrySpecVerificationFieldDetails?: CountrySpecVerificationFieldDetailsResolvers<ContextType>;
  V1Coupons2?: V1Coupons2Resolvers<ContextType>;
  CreditNotesList?: CreditNotesListResolvers<ContextType>;
  CreditNote?: CreditNoteResolvers<ContextType>;
  DiscountsResourceDiscountAmount?: DiscountsResourceDiscountAmountResolvers<ContextType>;
  Lines?: LinesResolvers<ContextType>;
  CreditNoteLineItem?: CreditNoteLineItemResolvers<ContextType>;
  Object28?: Object28Resolvers;
  CreditNoteTaxAmount?: CreditNoteTaxAmountResolvers<ContextType>;
  Type13?: Type13Resolvers;
  Object29?: Object29Resolvers;
  Reason7?: Reason7Resolvers;
  Status11?: Status11Resolvers;
  Type14?: Type14Resolvers;
  CreditNoteLinesList?: CreditNoteLinesListResolvers<ContextType>;
  Type15?: Type15Resolvers;
  Reason18?: Reason18Resolvers;
  V1Customers2?: V1Customers2Resolvers<ContextType>;
  Customer13?: Customer13Resolvers<ContextType>;
  Address7?: Address7Resolvers<ContextType>;
  Discount3?: Discount3Resolvers<ContextType>;
  InvoiceSettingCustomerSetting?: InvoiceSettingCustomerSettingResolvers<ContextType>;
  InvoiceSettingCustomField?: InvoiceSettingCustomFieldResolvers<ContextType>;
  Object30?: Object30Resolvers;
  Shipping5?: Shipping5Resolvers<ContextType>;
  Sources?: SourcesResolvers<ContextType>;
  Data21ListItem?: Data21ListItemResolvers<ContextType>;
  AchCreditTransfer2?: AchCreditTransfer2Resolvers<ContextType>;
  AchDebit2?: AchDebit2Resolvers<ContextType>;
  AcssDebit4?: AcssDebit4Resolvers<ContextType>;
  Alipay2?: Alipay2Resolvers<ContextType>;
  AuBecsDebit2?: AuBecsDebit2Resolvers<ContextType>;
  Bancontact2?: Bancontact2Resolvers<ContextType>;
  Card6?: Card6Resolvers<ContextType>;
  CardPresent2?: CardPresent2Resolvers<ContextType>;
  CodeVerification?: CodeVerificationResolvers<ContextType>;
  Eps2?: Eps2Resolvers<ContextType>;
  Giropay2?: Giropay2Resolvers<ContextType>;
  Ideal2?: Ideal2Resolvers<ContextType>;
  Klarna2?: Klarna2Resolvers<ContextType>;
  Multibanco2?: Multibanco2Resolvers<ContextType>;
  Owner3?: Owner3Resolvers<ContextType>;
  Address8?: Address8Resolvers<ContextType>;
  VerifiedAddress?: VerifiedAddressResolvers<ContextType>;
  P242?: P242Resolvers<ContextType>;
  Receiver2?: Receiver2Resolvers<ContextType>;
  Redirect?: RedirectResolvers<ContextType>;
  SepaDebit2?: SepaDebit2Resolvers<ContextType>;
  Sofort2?: Sofort2Resolvers<ContextType>;
  SourceOrder?: SourceOrderResolvers<ContextType>;
  SourceOrderItem?: SourceOrderItemResolvers<ContextType>;
  Shipping6?: Shipping6Resolvers<ContextType>;
  ThreeDSecure4?: ThreeDSecure4Resolvers<ContextType>;
  Type18?: Type18Resolvers;
  Wechat2?: Wechat2Resolvers<ContextType>;
  Subscriptions?: SubscriptionsResolvers<ContextType>;
  Subscription5?: Subscription5Resolvers<ContextType>;
  SubscriptionAutomaticTax?: SubscriptionAutomaticTaxResolvers<ContextType>;
  BillingThresholds?: BillingThresholdsResolvers<ContextType>;
  CollectionMethod?: CollectionMethodResolvers;
  Discount4?: Discount4Resolvers<ContextType>;
  SubscriptionItemList?: SubscriptionItemListResolvers<ContextType>;
  SubscriptionItem?: SubscriptionItemResolvers<ContextType>;
  BillingThresholds2?: BillingThresholds2Resolvers<ContextType>;
  Object31?: Object31Resolvers;
  Price3?: Price3Resolvers<ContextType>;
  Object32?: Object32Resolvers;
  PauseCollection?: PauseCollectionResolvers<ContextType>;
  Behavior?: BehaviorResolvers;
  PaymentSettings?: PaymentSettingsResolvers<ContextType>;
  PaymentMethodOptions2?: PaymentMethodOptions2Resolvers<ContextType>;
  Bancontact3?: Bancontact3Resolvers<ContextType>;
  PreferredLanguage5?: PreferredLanguage5Resolvers;
  Card8?: Card8Resolvers<ContextType>;
  RequestThreeDSecure?: RequestThreeDSecureResolvers;
  PaymentMethodTypes3ListItem?: PaymentMethodTypes3ListItemResolvers;
  PendingInvoiceItemInterval?: PendingInvoiceItemIntervalResolvers<ContextType>;
  Interval6?: Interval6Resolvers;
  PendingUpdate?: PendingUpdateResolvers<ContextType>;
  Status14?: Status14Resolvers;
  TransferData4?: TransferData4Resolvers<ContextType>;
  CustomerTax?: CustomerTaxResolvers<ContextType>;
  AutomaticTax2?: AutomaticTax2Resolvers;
  Location?: LocationResolvers<ContextType>;
  Source3?: Source3Resolvers;
  TaxExempt2?: TaxExempt2Resolvers;
  TaxIDsList?: TaxIDsListResolvers<ContextType>;
  TaxId3?: TaxId3Resolvers<ContextType>;
  Object33?: Object33Resolvers;
  Type19?: Type19Resolvers;
  Verification3?: Verification3Resolvers<ContextType>;
  Status15?: Status15Resolvers;
  V1Customer2?: V1Customer2Resolvers<ContextType>;
  Deleted?: DeletedResolvers;
  InvoiceSettings2?: InvoiceSettings2Resolvers<ContextType>;
  Tax2?: Tax2Resolvers<ContextType>;
  CustomerBalanceTransactionList?: CustomerBalanceTransactionListResolvers<ContextType>;
  CustomerBalanceTransaction2?: CustomerBalanceTransaction2Resolvers<ContextType>;
  Object34?: Object34Resolvers;
  Type21?: Type21Resolvers;
  BankAccountList?: BankAccountListResolvers<ContextType>;
  BankAccount7?: BankAccount7Resolvers<ContextType>;
  AvailablePayoutMethods2ListItem?: AvailablePayoutMethods2ListItemResolvers;
  Object35?: Object35Resolvers;
  CardList?: CardListResolvers<ContextType>;
  ApmsSourcesSourceList?: ApmsSourcesSourceListResolvers<ContextType>;
  PaymentSource?: PaymentSourceResolvers<ContextType>;
  Capabilities2?: Capabilities2Resolvers<ContextType>;
  Company2?: Company2Resolvers<ContextType>;
  Controller?: ControllerResolvers<ContextType>;
  Individual2?: Individual2Resolvers<ContextType>;
  Requirements2?: Requirements2Resolvers<ContextType>;
  TosAcceptance2?: TosAcceptance2Resolvers<ContextType>;
  SubscriptionList?: SubscriptionListResolvers<ContextType>;
  TaxIDsList2?: TaxIDsList2Resolvers<ContextType>;
  V1Disputes2?: V1Disputes2Resolvers<ContextType>;
  NotificationEventList?: NotificationEventListResolvers<ContextType>;
  Event?: EventResolvers<ContextType>;
  NotificationEventData?: NotificationEventDataResolvers<ContextType>;
  Object38?: Object38Resolvers;
  Request?: RequestResolvers<ContextType>;
  V1ExchangeRates2?: V1ExchangeRates2Resolvers<ContextType>;
  ExchangeRate2?: ExchangeRate2Resolvers<ContextType>;
  Object39?: Object39Resolvers;
  V1FileLinks2?: V1FileLinks2Resolvers<ContextType>;
  FileLink?: FileLinkResolvers<ContextType>;
  Object40?: Object40Resolvers;
  V1Files2?: V1Files2Resolvers<ContextType>;
  File3?: File3Resolvers<ContextType>;
  Links?: LinksResolvers<ContextType>;
  Object41?: Object41Resolvers;
  Purpose?: PurposeResolvers;
  Purpose2?: Purpose2Resolvers;
  V1IdentityVerificationReports2?: V1IdentityVerificationReports2Resolvers<ContextType>;
  IdentityVerificationReport?: IdentityVerificationReportResolvers<ContextType>;
  GelatoDocumentReport?: GelatoDocumentReportResolvers<ContextType>;
  Address12?: Address12Resolvers<ContextType>;
  Dob8?: Dob8Resolvers<ContextType>;
  Error?: ErrorResolvers<ContextType>;
  Code2?: Code2Resolvers;
  ExpirationDate?: ExpirationDateResolvers<ContextType>;
  IssuedDate?: IssuedDateResolvers<ContextType>;
  Status17?: Status17Resolvers;
  Type25?: Type25Resolvers;
  GelatoIdNumberReport?: GelatoIdNumberReportResolvers<ContextType>;
  Dob9?: Dob9Resolvers<ContextType>;
  Error2?: Error2Resolvers<ContextType>;
  Code3?: Code3Resolvers;
  IdNumberType?: IdNumberTypeResolvers;
  Status18?: Status18Resolvers;
  Object42?: Object42Resolvers;
  GelatoVerificationReportOptions?: GelatoVerificationReportOptionsResolvers<ContextType>;
  GelatoReportDocumentOptions?: GelatoReportDocumentOptionsResolvers<ContextType>;
  AllowedTypesListItem?: AllowedTypesListItemResolvers;
  GelatoSelfieReport?: GelatoSelfieReportResolvers<ContextType>;
  Error3?: Error3Resolvers<ContextType>;
  Code4?: Code4Resolvers;
  Status19?: Status19Resolvers;
  Type26?: Type26Resolvers;
  Type68?: Type68Resolvers;
  V1IdentityVerificationSessions2?: V1IdentityVerificationSessions2Resolvers<ContextType>;
  IdentityVerificationSession?: IdentityVerificationSessionResolvers<ContextType>;
  LastError?: LastErrorResolvers<ContextType>;
  Code5?: Code5Resolvers;
  Object43?: Object43Resolvers;
  GelatoVerificationSessionOptions?: GelatoVerificationSessionOptionsResolvers<ContextType>;
  GelatoSessionDocumentOptions?: GelatoSessionDocumentOptionsResolvers<ContextType>;
  Redaction?: RedactionResolvers<ContextType>;
  Status20?: Status20Resolvers;
  Status21?: Status21Resolvers;
  Type27?: Type27Resolvers;
  VerifiedOutputs?: VerifiedOutputsResolvers<ContextType>;
  Address13?: Address13Resolvers<ContextType>;
  Dob10?: Dob10Resolvers<ContextType>;
  IdNumberType2?: IdNumberType2Resolvers;
  Status55?: Status55Resolvers;
  V1Invoiceitems2?: V1Invoiceitems2Resolvers<ContextType>;
  Invoiceitem?: InvoiceitemResolvers<ContextType>;
  Object44?: Object44Resolvers;
  InvoiceLineItemPeriod?: InvoiceLineItemPeriodResolvers<ContextType>;
  Price7?: Price7Resolvers<ContextType>;
  InvoicesList?: InvoicesListResolvers<ContextType>;
  Invoice11?: Invoice11Resolvers<ContextType>;
  AutomaticTax3?: AutomaticTax3Resolvers<ContextType>;
  Status22?: Status22Resolvers;
  BillingReason?: BillingReasonResolvers;
  CollectionMethod3?: CollectionMethod3Resolvers;
  CustomerAddress?: CustomerAddressResolvers<ContextType>;
  CustomerShipping?: CustomerShippingResolvers<ContextType>;
  CustomerTaxExempt?: CustomerTaxExemptResolvers;
  InvoicesResourceInvoiceTaxId?: InvoicesResourceInvoiceTaxIdResolvers<ContextType>;
  Discount5?: Discount5Resolvers<ContextType>;
  LastFinalizationError?: LastFinalizationErrorResolvers<ContextType>;
  PaymentIntent7?: PaymentIntent7Resolvers<ContextType>;
  CancellationReason?: CancellationReasonResolvers;
  CaptureMethod2?: CaptureMethod2Resolvers;
  Charges?: ChargesResolvers<ContextType>;
  ConfirmationMethod?: ConfirmationMethodResolvers;
  LastPaymentError?: LastPaymentErrorResolvers<ContextType>;
  PaymentMethod3?: PaymentMethod3Resolvers<ContextType>;
  PaymentMethodAcssDebit?: PaymentMethodAcssDebitResolvers<ContextType>;
  PaymentMethodAuBecsDebit?: PaymentMethodAuBecsDebitResolvers<ContextType>;
  PaymentMethodBacsDebit?: PaymentMethodBacsDebitResolvers<ContextType>;
  PaymentMethodBoleto?: PaymentMethodBoletoResolvers<ContextType>;
  PaymentMethodCard?: PaymentMethodCardResolvers<ContextType>;
  Checks2?: Checks2Resolvers<ContextType>;
  GeneratedFrom?: GeneratedFromResolvers<ContextType>;
  PaymentMethodDetails2?: PaymentMethodDetails2Resolvers<ContextType>;
  Networks?: NetworksResolvers<ContextType>;
  ThreeDSecureUsage?: ThreeDSecureUsageResolvers<ContextType>;
  Wallet2?: Wallet2Resolvers<ContextType>;
  Masterpass2?: Masterpass2Resolvers<ContextType>;
  VisaCheckout2?: VisaCheckout2Resolvers<ContextType>;
  PaymentMethodEps?: PaymentMethodEpsResolvers<ContextType>;
  PaymentMethodFpx?: PaymentMethodFpxResolvers<ContextType>;
  Bank6?: Bank6Resolvers;
  PaymentMethodIdeal?: PaymentMethodIdealResolvers<ContextType>;
  Bank7?: Bank7Resolvers;
  Object45?: Object45Resolvers;
  PaymentMethodP24?: PaymentMethodP24Resolvers<ContextType>;
  Bank8?: Bank8Resolvers;
  PaymentMethodSepaDebit?: PaymentMethodSepaDebitResolvers<ContextType>;
  GeneratedFrom2?: GeneratedFrom2Resolvers<ContextType>;
  PaymentMethodSofort?: PaymentMethodSofortResolvers<ContextType>;
  Type29?: Type29Resolvers;
  SetupIntent2?: SetupIntent2Resolvers<ContextType>;
  CancellationReason2?: CancellationReason2Resolvers;
  LastSetupError?: LastSetupErrorResolvers<ContextType>;
  Source9?: Source9Resolvers<ContextType>;
  Type30?: Type30Resolvers;
  NextAction?: NextActionResolvers<ContextType>;
  RedirectToUrl?: RedirectToUrlResolvers<ContextType>;
  VerifyWithMicrodeposits?: VerifyWithMicrodepositsResolvers<ContextType>;
  Object46?: Object46Resolvers;
  PaymentMethodOptions4?: PaymentMethodOptions4Resolvers<ContextType>;
  AcssDebit5?: AcssDebit5Resolvers<ContextType>;
  Currency43?: Currency43Resolvers;
  SetupIntentPaymentMethodOptionsMandateOptionsAcssDebit?: SetupIntentPaymentMethodOptionsMandateOptionsAcssDebitResolvers<ContextType>;
  Card14?: Card14Resolvers<ContextType>;
  RequestThreeDSecure2?: RequestThreeDSecure2Resolvers;
  SepaDebit3?: SepaDebit3Resolvers<ContextType>;
  Status23?: Status23Resolvers;
  NextAction2?: NextAction2Resolvers<ContextType>;
  AlipayHandleRedirect?: AlipayHandleRedirectResolvers<ContextType>;
  BoletoDisplayDetails?: BoletoDisplayDetailsResolvers<ContextType>;
  OxxoDisplayDetails?: OxxoDisplayDetailsResolvers<ContextType>;
  RedirectToUrl2?: RedirectToUrl2Resolvers<ContextType>;
  VerifyWithMicrodeposits2?: VerifyWithMicrodeposits2Resolvers<ContextType>;
  WechatPayDisplayQrCode?: WechatPayDisplayQrCodeResolvers<ContextType>;
  WechatPayRedirectToAndroidApp?: WechatPayRedirectToAndroidAppResolvers<ContextType>;
  WechatPayRedirectToIosApp?: WechatPayRedirectToIosAppResolvers<ContextType>;
  Object47?: Object47Resolvers;
  PaymentMethodOptions5?: PaymentMethodOptions5Resolvers<ContextType>;
  AcssDebit6?: AcssDebit6Resolvers<ContextType>;
  PaymentIntentPaymentMethodOptionsMandateOptionsAcssDebit?: PaymentIntentPaymentMethodOptionsMandateOptionsAcssDebitResolvers<ContextType>;
  AfterpayClearpay2?: AfterpayClearpay2Resolvers<ContextType>;
  Bancontact5?: Bancontact5Resolvers<ContextType>;
  Card15?: Card15Resolvers<ContextType>;
  Installments2?: Installments2Resolvers<ContextType>;
  PaymentMethodDetailsCardInstallmentsPlan?: PaymentMethodDetailsCardInstallmentsPlanResolvers<ContextType>;
  Plan3?: Plan3Resolvers<ContextType>;
  Network4?: Network4Resolvers;
  SepaDebit4?: SepaDebit4Resolvers<ContextType>;
  Sofort3?: Sofort3Resolvers<ContextType>;
  PreferredLanguage6?: PreferredLanguage6Resolvers;
  WechatPay3?: WechatPay3Resolvers<ContextType>;
  Client2?: Client2Resolvers;
  SetupFutureUsage2?: SetupFutureUsage2Resolvers;
  Shipping9?: Shipping9Resolvers<ContextType>;
  Status24?: Status24Resolvers;
  TransferData7?: TransferData7Resolvers<ContextType>;
  InvoiceLinesList?: InvoiceLinesListResolvers<ContextType>;
  LineItem?: LineItemResolvers<ContextType>;
  Object48?: Object48Resolvers;
  Price10?: Price10Resolvers<ContextType>;
  InvoiceTaxAmount?: InvoiceTaxAmountResolvers<ContextType>;
  Type33?: Type33Resolvers;
  Object49?: Object49Resolvers;
  InvoicesPaymentSettings?: InvoicesPaymentSettingsResolvers<ContextType>;
  PaymentMethodOptions6?: PaymentMethodOptions6Resolvers<ContextType>;
  Bancontact6?: Bancontact6Resolvers<ContextType>;
  Card16?: Card16Resolvers<ContextType>;
  PaymentMethodTypes7ListItem?: PaymentMethodTypes7ListItemResolvers;
  Status25?: Status25Resolvers;
  InvoicesStatusTransitions?: InvoicesStatusTransitionsResolvers<ContextType>;
  InvoiceThresholdReason?: InvoiceThresholdReasonResolvers<ContextType>;
  InvoiceItemThresholdReason?: InvoiceItemThresholdReasonResolvers<ContextType>;
  TransferData8?: TransferData8Resolvers<ContextType>;
  CollectionMethod9?: CollectionMethod9Resolvers;
  Status56?: Status56Resolvers;
  InvoiceLinesList2?: InvoiceLinesList2Resolvers<ContextType>;
  TaxExempt4?: TaxExempt4Resolvers;
  Type20?: Type20Resolvers;
  TaxBehavior2?: TaxBehavior2Resolvers;
  Interval5?: Interval5Resolvers;
  SubscriptionProrationBehavior?: SubscriptionProrationBehaviorResolvers;
  RadarIssuerFraudRecordList?: RadarIssuerFraudRecordListResolvers<ContextType>;
  IssuerFraudRecord?: IssuerFraudRecordResolvers<ContextType>;
  Object50?: Object50Resolvers;
  V1IssuingAuthorizations2?: V1IssuingAuthorizations2Resolvers<ContextType>;
  IssuingAuthorization?: IssuingAuthorizationResolvers<ContextType>;
  AmountDetails?: AmountDetailsResolvers<ContextType>;
  AuthorizationMethod?: AuthorizationMethodResolvers;
  IssuingCard2?: IssuingCard2Resolvers<ContextType>;
  CancellationReason3?: CancellationReason3Resolvers;
  IssuingCardholder?: IssuingCardholderResolvers<ContextType>;
  IssuingCardholderAddress?: IssuingCardholderAddressResolvers<ContextType>;
  Company3?: Company3Resolvers<ContextType>;
  Individual3?: Individual3Resolvers<ContextType>;
  Dob11?: Dob11Resolvers<ContextType>;
  Verification4?: Verification4Resolvers<ContextType>;
  Document5?: Document5Resolvers<ContextType>;
  Object51?: Object51Resolvers;
  IssuingCardholderRequirements?: IssuingCardholderRequirementsResolvers<ContextType>;
  DisabledReason4?: DisabledReason4Resolvers;
  PastDue5ListItem?: PastDue5ListItemResolvers;
  SpendingControls?: SpendingControlsResolvers<ContextType>;
  AllowedCategoriesListItem?: AllowedCategoriesListItemResolvers;
  BlockedCategoriesListItem?: BlockedCategoriesListItemResolvers;
  IssuingCardholderSpendingLimit?: IssuingCardholderSpendingLimitResolvers<ContextType>;
  CategoriesListItem?: CategoriesListItemResolvers;
  Interval7?: Interval7Resolvers;
  Status26?: Status26Resolvers;
  Type34?: Type34Resolvers;
  Object52?: Object52Resolvers;
  ReplacementReason?: ReplacementReasonResolvers;
  Shipping10?: Shipping10Resolvers<ContextType>;
  Carrier9?: Carrier9Resolvers;
  Service?: ServiceResolvers;
  Status27?: Status27Resolvers;
  Type35?: Type35Resolvers;
  IssuingCardAuthorizationControls?: IssuingCardAuthorizationControlsResolvers<ContextType>;
  IssuingCardSpendingLimit?: IssuingCardSpendingLimitResolvers<ContextType>;
  Status28?: Status28Resolvers;
  Type36?: Type36Resolvers;
  IssuingAuthorizationMerchantData?: IssuingAuthorizationMerchantDataResolvers<ContextType>;
  Object53?: Object53Resolvers;
  PendingRequest?: PendingRequestResolvers<ContextType>;
  IssuingAuthorizationRequest?: IssuingAuthorizationRequestResolvers<ContextType>;
  Reason13?: Reason13Resolvers;
  Status29?: Status29Resolvers;
  IssuingTransaction?: IssuingTransactionResolvers<ContextType>;
  AmountDetails2?: AmountDetails2Resolvers<ContextType>;
  Object54?: Object54Resolvers;
  PurchaseDetails?: PurchaseDetailsResolvers<ContextType>;
  Flight?: FlightResolvers<ContextType>;
  IssuingTransactionFlightDataLeg?: IssuingTransactionFlightDataLegResolvers<ContextType>;
  Fuel?: FuelResolvers<ContextType>;
  Lodging?: LodgingResolvers<ContextType>;
  IssuingTransactionReceiptData?: IssuingTransactionReceiptDataResolvers<ContextType>;
  Type38?: Type38Resolvers;
  Wallet3?: Wallet3Resolvers;
  IssuingAuthorizationVerificationData?: IssuingAuthorizationVerificationDataResolvers<ContextType>;
  AddressLine1Check14?: AddressLine1Check14Resolvers;
  AddressPostalCodeCheck3?: AddressPostalCodeCheck3Resolvers;
  CvcCheck14?: CvcCheck14Resolvers;
  ExpiryCheck?: ExpiryCheckResolvers;
  Status57?: Status57Resolvers;
  V1IssuingCardholders2?: V1IssuingCardholders2Resolvers<ContextType>;
  Status58?: Status58Resolvers;
  Type69?: Type69Resolvers;
  V1IssuingCards2?: V1IssuingCards2Resolvers<ContextType>;
  Status59?: Status59Resolvers;
  Type70?: Type70Resolvers;
  IssuingDisputeList?: IssuingDisputeListResolvers<ContextType>;
  IssuingDispute?: IssuingDisputeResolvers<ContextType>;
  IssuingDisputeEvidence?: IssuingDisputeEvidenceResolvers<ContextType>;
  IssuingDisputeCanceledEvidence?: IssuingDisputeCanceledEvidenceResolvers<ContextType>;
  ProductType?: ProductTypeResolvers;
  ReturnStatus?: ReturnStatusResolvers;
  IssuingDisputeDuplicateEvidence?: IssuingDisputeDuplicateEvidenceResolvers<ContextType>;
  IssuingDisputeFraudulentEvidence?: IssuingDisputeFraudulentEvidenceResolvers<ContextType>;
  IssuingDisputeMerchandiseNotAsDescribedEvidence?: IssuingDisputeMerchandiseNotAsDescribedEvidenceResolvers<ContextType>;
  IssuingDisputeNotReceivedEvidence?: IssuingDisputeNotReceivedEvidenceResolvers<ContextType>;
  IssuingDisputeOtherEvidence?: IssuingDisputeOtherEvidenceResolvers<ContextType>;
  Reason14?: Reason14Resolvers;
  IssuingDisputeServiceNotAsDescribedEvidence?: IssuingDisputeServiceNotAsDescribedEvidenceResolvers<ContextType>;
  Object55?: Object55Resolvers;
  Status34?: Status34Resolvers;
  Status60?: Status60Resolvers;
  V1IssuingSettlements2?: V1IssuingSettlements2Resolvers<ContextType>;
  IssuingSettlement?: IssuingSettlementResolvers<ContextType>;
  Network5?: Network5Resolvers;
  Object56?: Object56Resolvers;
  V1IssuingTransactions2?: V1IssuingTransactions2Resolvers<ContextType>;
  Type71?: Type71Resolvers;
  Mandate6?: Mandate6Resolvers<ContextType>;
  CustomerAcceptance?: CustomerAcceptanceResolvers<ContextType>;
  OnlineAcceptance?: OnlineAcceptanceResolvers<ContextType>;
  Type41?: Type41Resolvers;
  Object57?: Object57Resolvers;
  MandatePaymentMethodDetails?: MandatePaymentMethodDetailsResolvers<ContextType>;
  MandateAcssDebit?: MandateAcssDebitResolvers<ContextType>;
  PaymentSchedule3?: PaymentSchedule3Resolvers;
  TransactionType3?: TransactionType3Resolvers;
  MandateAuBecsDebit?: MandateAuBecsDebitResolvers<ContextType>;
  MandateBacsDebit?: MandateBacsDebitResolvers<ContextType>;
  NetworkStatus2?: NetworkStatus2Resolvers;
  MandateSepaDebit?: MandateSepaDebitResolvers<ContextType>;
  MandateSingleUse?: MandateSingleUseResolvers<ContextType>;
  Status35?: Status35Resolvers;
  Type43?: Type43Resolvers;
  V1OrderReturns2?: V1OrderReturns2Resolvers<ContextType>;
  OrderReturn?: OrderReturnResolvers<ContextType>;
  Object58?: Object58Resolvers;
  Object59?: Object59Resolvers;
  V1Orders2?: V1Orders2Resolvers<ContextType>;
  Order3?: Order3Resolvers<ContextType>;
  Object60?: Object60Resolvers;
  Returns?: ReturnsResolvers<ContextType>;
  Shipping11?: Shipping11Resolvers<ContextType>;
  ShippingMethod?: ShippingMethodResolvers<ContextType>;
  DeliveryEstimate?: DeliveryEstimateResolvers<ContextType>;
  StatusTransitions?: StatusTransitionsResolvers<ContextType>;
  PaymentFlowsPaymentIntentList?: PaymentFlowsPaymentIntentListResolvers<ContextType>;
  PaymentFlowsPaymentMethodList?: PaymentFlowsPaymentMethodListResolvers<ContextType>;
  Type72?: Type72Resolvers;
  PayoutList?: PayoutListResolvers<ContextType>;
  Payout?: PayoutResolvers<ContextType>;
  Object61?: Object61Resolvers;
  Type50?: Type50Resolvers;
  PlanList?: PlanListResolvers<ContextType>;
  Plan4?: Plan4Resolvers<ContextType>;
  AggregateUsage2?: AggregateUsage2Resolvers;
  BillingScheme2?: BillingScheme2Resolvers;
  Object62?: Object62Resolvers;
  PlanTier?: PlanTierResolvers<ContextType>;
  TransformUsage?: TransformUsageResolvers<ContextType>;
  PriceList?: PriceListResolvers<ContextType>;
  UsageType2?: UsageType2Resolvers;
  Type73?: Type73Resolvers;
  V1Products2?: V1Products2Resolvers<ContextType>;
  Product14?: Product14Resolvers<ContextType>;
  Object63?: Object63Resolvers;
  PackageDimensions?: PackageDimensionsResolvers<ContextType>;
  V1PromotionCodes2?: V1PromotionCodes2Resolvers<ContextType>;
  PromotionCode11?: PromotionCode11Resolvers<ContextType>;
  Object64?: Object64Resolvers;
  PromotionCodesResourceRestrictions?: PromotionCodesResourceRestrictionsResolvers<ContextType>;
  V1Quotes2?: V1Quotes2Resolvers<ContextType>;
  Quote2?: Quote2Resolvers<ContextType>;
  QuotesResourceAutomaticTax?: QuotesResourceAutomaticTaxResolvers<ContextType>;
  Status39?: Status39Resolvers;
  CollectionMethod6?: CollectionMethod6Resolvers;
  QuotesResourceComputed?: QuotesResourceComputedResolvers<ContextType>;
  Recurring3?: Recurring3Resolvers<ContextType>;
  TotalDetails2?: TotalDetails2Resolvers<ContextType>;
  QuotesResourceTotalDetailsResourceBreakdown?: QuotesResourceTotalDetailsResourceBreakdownResolvers<ContextType>;
  QuotesResourceUpfront?: QuotesResourceUpfrontResolvers<ContextType>;
  QuotesResourceListLineItems?: QuotesResourceListLineItemsResolvers<ContextType>;
  QuotesResourceTotalDetails?: QuotesResourceTotalDetailsResolvers<ContextType>;
  FromQuote?: FromQuoteResolvers<ContextType>;
  InvoiceSettings3?: InvoiceSettings3Resolvers<ContextType>;
  LineItems3?: LineItems3Resolvers<ContextType>;
  Object65?: Object65Resolvers;
  Status40?: Status40Resolvers;
  QuotesResourceStatusTransitions?: QuotesResourceStatusTransitionsResolvers<ContextType>;
  QuotesResourceSubscriptionData?: QuotesResourceSubscriptionDataResolvers<ContextType>;
  TransferData12?: TransferData12Resolvers<ContextType>;
  Status63?: Status63Resolvers;
  QuotesResourceListLineItems2?: QuotesResourceListLineItems2Resolvers<ContextType>;
  RadarEarlyFraudWarningList?: RadarEarlyFraudWarningListResolvers<ContextType>;
  RadarEarlyFraudWarning?: RadarEarlyFraudWarningResolvers<ContextType>;
  Object66?: Object66Resolvers;
  V1RadarValueListItems2?: V1RadarValueListItems2Resolvers<ContextType>;
  RadarValueListItem?: RadarValueListItemResolvers<ContextType>;
  Object67?: Object67Resolvers;
  V1RadarValueLists2?: V1RadarValueLists2Resolvers<ContextType>;
  RadarValueList?: RadarValueListResolvers<ContextType>;
  ItemType?: ItemTypeResolvers;
  ListItems?: ListItemsResolvers<ContextType>;
  Object68?: Object68Resolvers;
  V1Recipients2?: V1Recipients2Resolvers<ContextType>;
  Recipient10?: Recipient10Resolvers<ContextType>;
  ActiveAccount?: ActiveAccountResolvers<ContextType>;
  Cards?: CardsResolvers<ContextType>;
  Object69?: Object69Resolvers;
  Type74?: Type74Resolvers;
  V1Recipient2?: V1Recipient2Resolvers<ContextType>;
  V1Refunds2?: V1Refunds2Resolvers<ContextType>;
  V1ReportingReportRuns2?: V1ReportingReportRuns2Resolvers<ContextType>;
  ReportingReportRun?: ReportingReportRunResolvers<ContextType>;
  Object70?: Object70Resolvers;
  FinancialReportingFinanceReportRunRunParameters?: FinancialReportingFinanceReportRunRunParametersResolvers<ContextType>;
  Result2?: Result2Resolvers<ContextType>;
  FinancialReportingFinanceReportTypeList?: FinancialReportingFinanceReportTypeListResolvers<ContextType>;
  ReportingReportType?: ReportingReportTypeResolvers<ContextType>;
  Object71?: Object71Resolvers;
  V1Reviews2?: V1Reviews2Resolvers<ContextType>;
  Review3?: Review3Resolvers<ContextType>;
  ClosedReason?: ClosedReasonResolvers;
  IpAddressLocation?: IpAddressLocationResolvers<ContextType>;
  Object72?: Object72Resolvers;
  OpenedReason?: OpenedReasonResolvers;
  Session?: SessionResolvers<ContextType>;
  PaymentFlowsSetupIntentSetupAttemptList?: PaymentFlowsSetupIntentSetupAttemptListResolvers<ContextType>;
  SetupAttempt3?: SetupAttempt3Resolvers<ContextType>;
  Object73?: Object73Resolvers;
  SetupAttemptPaymentMethodDetails?: SetupAttemptPaymentMethodDetailsResolvers<ContextType>;
  SetupAttemptPaymentMethodDetailsBancontact?: SetupAttemptPaymentMethodDetailsBancontactResolvers<ContextType>;
  SetupAttemptPaymentMethodDetailsCard?: SetupAttemptPaymentMethodDetailsCardResolvers<ContextType>;
  ThreeDSecure6?: ThreeDSecure6Resolvers<ContextType>;
  SetupAttemptPaymentMethodDetailsCardPresent?: SetupAttemptPaymentMethodDetailsCardPresentResolvers<ContextType>;
  SetupAttemptPaymentMethodDetailsIdeal?: SetupAttemptPaymentMethodDetailsIdealResolvers<ContextType>;
  SetupAttemptPaymentMethodDetailsSofort?: SetupAttemptPaymentMethodDetailsSofortResolvers<ContextType>;
  PreferredLanguage7?: PreferredLanguage7Resolvers;
  SetupError?: SetupErrorResolvers<ContextType>;
  PaymentFlowsSetupIntentList?: PaymentFlowsSetupIntentListResolvers<ContextType>;
  V1SigmaScheduledQueryRuns2?: V1SigmaScheduledQueryRuns2Resolvers<ContextType>;
  ScheduledQueryRun?: ScheduledQueryRunResolvers<ContextType>;
  SigmaScheduledQueryRunError?: SigmaScheduledQueryRunErrorResolvers<ContextType>;
  File4?: File4Resolvers<ContextType>;
  Object74?: Object74Resolvers;
  V1Skus2?: V1Skus2Resolvers<ContextType>;
  Sku?: SkuResolvers<ContextType>;
  SkuInventory?: SkuInventoryResolvers<ContextType>;
  Object75?: Object75Resolvers;
  PackageDimensions3?: PackageDimensions3Resolvers<ContextType>;
  V1Skus4?: V1Skus4Resolvers<ContextType>;
  Inventory2?: Inventory2Resolvers<ContextType>;
  Source12?: Source12Resolvers<ContextType>;
  SourceTypeAchCreditTransfer?: SourceTypeAchCreditTransferResolvers<ContextType>;
  SourceTypeAchDebit?: SourceTypeAchDebitResolvers<ContextType>;
  SourceTypeAcssDebit?: SourceTypeAcssDebitResolvers<ContextType>;
  SourceTypeAlipay?: SourceTypeAlipayResolvers<ContextType>;
  SourceTypeAuBecsDebit?: SourceTypeAuBecsDebitResolvers<ContextType>;
  SourceTypeBancontact?: SourceTypeBancontactResolvers<ContextType>;
  SourceTypeCard?: SourceTypeCardResolvers<ContextType>;
  SourceTypeCardPresent?: SourceTypeCardPresentResolvers<ContextType>;
  SourceCodeVerificationFlow?: SourceCodeVerificationFlowResolvers<ContextType>;
  SourceTypeEps?: SourceTypeEpsResolvers<ContextType>;
  SourceTypeGiropay?: SourceTypeGiropayResolvers<ContextType>;
  SourceTypeIdeal?: SourceTypeIdealResolvers<ContextType>;
  SourceTypeKlarna?: SourceTypeKlarnaResolvers<ContextType>;
  SourceTypeMultibanco?: SourceTypeMultibancoResolvers<ContextType>;
  Object76?: Object76Resolvers;
  SourceTypeP24?: SourceTypeP24Resolvers<ContextType>;
  SourceReceiverFlow?: SourceReceiverFlowResolvers<ContextType>;
  SourceRedirectFlow?: SourceRedirectFlowResolvers<ContextType>;
  SourceTypeSepaDebit?: SourceTypeSepaDebitResolvers<ContextType>;
  SourceTypeSofort?: SourceTypeSofortResolvers<ContextType>;
  SourceTypeThreeDSecure?: SourceTypeThreeDSecureResolvers<ContextType>;
  SourceTypeWechat?: SourceTypeWechatResolvers<ContextType>;
  SourceMandateNotification?: SourceMandateNotificationResolvers<ContextType>;
  SourceMandateNotificationAcssDebitData?: SourceMandateNotificationAcssDebitDataResolvers<ContextType>;
  SourceMandateNotificationBacsDebitData?: SourceMandateNotificationBacsDebitDataResolvers<ContextType>;
  Object77?: Object77Resolvers;
  SourceMandateNotificationSepaDebitData?: SourceMandateNotificationSepaDebitDataResolvers<ContextType>;
  ApmsSourcesSourceTransactionList?: ApmsSourcesSourceTransactionListResolvers<ContextType>;
  SourceTransaction?: SourceTransactionResolvers<ContextType>;
  SourceTransactionAchCreditTransferData?: SourceTransactionAchCreditTransferDataResolvers<ContextType>;
  SourceTransactionChfCreditTransferData?: SourceTransactionChfCreditTransferDataResolvers<ContextType>;
  SourceTransactionGbpCreditTransferData?: SourceTransactionGbpCreditTransferDataResolvers<ContextType>;
  Object78?: Object78Resolvers;
  SourceTransactionPaperCheckData?: SourceTransactionPaperCheckDataResolvers<ContextType>;
  SourceTransactionSepaCreditTransferData?: SourceTransactionSepaCreditTransferDataResolvers<ContextType>;
  Type63?: Type63Resolvers;
  V1SubscriptionItems2?: V1SubscriptionItems2Resolvers<ContextType>;
  V1SubscriptionItemUsageRecordSummaries2?: V1SubscriptionItemUsageRecordSummaries2Resolvers<ContextType>;
  UsageRecordSummary?: UsageRecordSummaryResolvers<ContextType>;
  Object79?: Object79Resolvers;
  Period2?: Period2Resolvers<ContextType>;
  V1SubscriptionSchedules2?: V1SubscriptionSchedules2Resolvers<ContextType>;
  SubscriptionSchedule2?: SubscriptionSchedule2Resolvers<ContextType>;
  CurrentPhase?: CurrentPhaseResolvers<ContextType>;
  SubscriptionSchedulesResourceDefaultSettings?: SubscriptionSchedulesResourceDefaultSettingsResolvers<ContextType>;
  SubscriptionSchedulesResourceDefaultSettingsAutomaticTax?: SubscriptionSchedulesResourceDefaultSettingsAutomaticTaxResolvers<ContextType>;
  BillingCycleAnchor5?: BillingCycleAnchor5Resolvers;
  CollectionMethod8?: CollectionMethod8Resolvers;
  InvoiceSettings4?: InvoiceSettings4Resolvers<ContextType>;
  TransferData15?: TransferData15Resolvers<ContextType>;
  EndBehavior?: EndBehaviorResolvers;
  Object81?: Object81Resolvers;
  SubscriptionSchedulePhaseConfiguration?: SubscriptionSchedulePhaseConfigurationResolvers<ContextType>;
  SubscriptionScheduleAddInvoiceItem?: SubscriptionScheduleAddInvoiceItemResolvers<ContextType>;
  SchedulesPhaseAutomaticTax?: SchedulesPhaseAutomaticTaxResolvers<ContextType>;
  BillingCycleAnchor6?: BillingCycleAnchor6Resolvers;
  InvoiceSettings5?: InvoiceSettings5Resolvers<ContextType>;
  SubscriptionScheduleConfigurationItem?: SubscriptionScheduleConfigurationItemResolvers<ContextType>;
  ProrationBehavior6?: ProrationBehavior6Resolvers;
  Status51?: Status51Resolvers;
  V1Subscriptions2?: V1Subscriptions2Resolvers<ContextType>;
  Status64?: Status64Resolvers;
  TaxProductResourceTaxCodeList?: TaxProductResourceTaxCodeListResolvers<ContextType>;
  TaxCode6?: TaxCode6Resolvers<ContextType>;
  Object82?: Object82Resolvers;
  V1TaxRates2?: V1TaxRates2Resolvers<ContextType>;
  TerminalLocationLocationList?: TerminalLocationLocationListResolvers<ContextType>;
  TerminalLocation?: TerminalLocationResolvers<ContextType>;
  Object84?: Object84Resolvers;
  TerminalReaderRetrieveReader?: TerminalReaderRetrieveReaderResolvers<ContextType>;
  TerminalReader?: TerminalReaderResolvers<ContextType>;
  DeviceType?: DeviceTypeResolvers;
  Object85?: Object85Resolvers;
  DeviceType2?: DeviceType2Resolvers;
  Status65?: Status65Resolvers;
  Token3?: Token3Resolvers<ContextType>;
  Object86?: Object86Resolvers;
  TopupList?: TopupListResolvers<ContextType>;
  Topup?: TopupResolvers<ContextType>;
  Object87?: Object87Resolvers;
  Status53?: Status53Resolvers;
  Status66?: Status66Resolvers;
  TransferList?: TransferListResolvers<ContextType>;
  Transfer2?: Transfer2Resolvers<ContextType>;
  Object88?: Object88Resolvers;
  Reversals?: ReversalsResolvers<ContextType>;
  TransferReversal2?: TransferReversal2Resolvers<ContextType>;
  Object89?: Object89Resolvers;
  TransferReversalList?: TransferReversalListResolvers<ContextType>;
  V1WebhookEndpoints2?: V1WebhookEndpoints2Resolvers<ContextType>;
  WebhookEndpoint?: WebhookEndpointResolvers<ContextType>;
  Object90?: Object90Resolvers;
  DeletedAccount?: DeletedAccountResolvers<ContextType>;
  DeletedExternalAccount?: DeletedExternalAccountResolvers<ContextType>;
  DeletedPerson?: DeletedPersonResolvers<ContextType>;
  DeletedApplePayDomain?: DeletedApplePayDomainResolvers<ContextType>;
  DeletedCoupon?: DeletedCouponResolvers<ContextType>;
  DeletedCustomer?: DeletedCustomerResolvers<ContextType>;
  DeletedDiscount?: DeletedDiscountResolvers<ContextType>;
  DeletedTaxId?: DeletedTaxIdResolvers<ContextType>;
  EphemeralKey?: EphemeralKeyResolvers<ContextType>;
  Object36?: Object36Resolvers;
  DeletedInvoiceitem?: DeletedInvoiceitemResolvers<ContextType>;
  DeletedInvoice?: DeletedInvoiceResolvers<ContextType>;
  DeletedPlan?: DeletedPlanResolvers<ContextType>;
  DeletedProduct?: DeletedProductResolvers<ContextType>;
  DeletedRadarValueListItem?: DeletedRadarValueListItemResolvers<ContextType>;
  DeletedRadarValueList?: DeletedRadarValueListResolvers<ContextType>;
  DeletedRecipient?: DeletedRecipientResolvers<ContextType>;
  DeletedSku?: DeletedSkuResolvers<ContextType>;
  DeletedSubscriptionItem?: DeletedSubscriptionItemResolvers<ContextType>;
  ProrationBehavior5?: ProrationBehavior5Resolvers;
  DeletedTerminalLocation?: DeletedTerminalLocationResolvers<ContextType>;
  DeletedTerminalReader?: DeletedTerminalReaderResolvers<ContextType>;
  DeletedWebhookEndpoint?: DeletedWebhookEndpointResolvers<ContextType>;
  BusinessType2?: BusinessType2Resolvers;
  Structure2?: Structure2Resolvers;
  PoliticalExposure2?: PoliticalExposure2Resolvers;
  Interval2?: Interval2Resolvers;
  WeeklyAnchor2?: WeeklyAnchor2Resolvers;
  AccountHolderType3?: AccountHolderType3Resolvers;
  AccountType3?: AccountType3Resolvers;
  AccountLink?: AccountLinkResolvers<ContextType>;
  Object8?: Object8Resolvers;
  Collect?: CollectResolvers;
  Type3?: Type3Resolvers;
  LoginLink?: LoginLinkResolvers<ContextType>;
  Object7?: Object7Resolvers;
  Type4?: Type4Resolvers;
  Mode2?: Mode2Resolvers;
  ProrationBehavior3?: ProrationBehavior3Resolvers;
  BillingPortalSession?: BillingPortalSessionResolvers<ContextType>;
  Object15?: Object15Resolvers;
  UserReport2?: UserReport2Resolvers;
  Reason6?: Reason6Resolvers;
  BillingAddressCollection2?: BillingAddressCollection2Resolvers;
  Address5?: Address5Resolvers;
  Name17?: Name17Resolvers;
  Shipping3?: Shipping3Resolvers;
  Locale2?: Locale2Resolvers;
  Mode4?: Mode4Resolvers;
  CaptureMethod?: CaptureMethodResolvers;
  SetupFutureUsage?: SetupFutureUsageResolvers;
  Currency24?: Currency24Resolvers;
  PaymentSchedule2?: PaymentSchedule2Resolvers;
  TransactionType2?: TransactionType2Resolvers;
  VerificationMethod2?: VerificationMethod2Resolvers;
  Client?: ClientResolvers;
  PaymentMethodTypes2ListItem?: PaymentMethodTypes2ListItemResolvers;
  SubmitType2?: SubmitType2Resolvers;
  Duration2?: Duration2Resolvers;
  Reason8?: Reason8Resolvers;
  TaxExempt3?: TaxExempt3Resolvers;
  V1CustomerBankAccount5?: V1CustomerBankAccount5Resolvers<ContextType>;
  AccountHolderType8?: AccountHolderType8Resolvers;
  V1CustomerCard5?: V1CustomerCard5Resolvers<ContextType>;
  V1CustomerSource5?: V1CustomerSource5Resolvers<ContextType>;
  CollectionMethod2?: CollectionMethod2Resolvers;
  PaymentBehavior?: PaymentBehaviorResolvers;
  ProrationBehavior4?: ProrationBehavior4Resolvers;
  BillingCycleAnchor4?: BillingCycleAnchor4Resolvers;
  PaymentBehavior2?: PaymentBehavior2Resolvers;
  Type22?: Type22Resolvers;
  CollectionMethod4?: CollectionMethod4Resolvers;
  CollectionMethod5?: CollectionMethod5Resolvers;
  AllowedCategories2ListItem?: AllowedCategories2ListItemResolvers;
  BlockedCategories2ListItem?: BlockedCategories2ListItemResolvers;
  Categories2ListItem?: Categories2ListItemResolvers;
  Interval8?: Interval8Resolvers;
  Status30?: Status30Resolvers;
  Status31?: Status31Resolvers;
  ReplacementReason2?: ReplacementReason2Resolvers;
  Service2?: Service2Resolvers;
  Type39?: Type39Resolvers;
  Status32?: Status32Resolvers;
  Type40?: Type40Resolvers;
  CancellationReason4?: CancellationReason4Resolvers;
  Status33?: Status33Resolvers;
  Reason15?: Reason15Resolvers;
  Type46?: Type46Resolvers;
  Status37?: Status37Resolvers;
  Type47?: Type47Resolvers;
  Bank9?: Bank9Resolvers;
  Bank10?: Bank10Resolvers;
  Bank11?: Bank11Resolvers;
  Bank12?: Bank12Resolvers;
  Type48?: Type48Resolvers;
  SetupFutureUsage3?: SetupFutureUsage3Resolvers;
  SetupFutureUsage4?: SetupFutureUsage4Resolvers;
  CancellationReason7?: CancellationReason7Resolvers;
  Type49?: Type49Resolvers;
  Method2?: Method2Resolvers;
  SourceType2?: SourceType2Resolvers;
  AggregateUsage3?: AggregateUsage3Resolvers;
  Interval9?: Interval9Resolvers;
  TiersMode2?: TiersMode2Resolvers;
  Round2?: Round2Resolvers;
  AggregateUsage4?: AggregateUsage4Resolvers;
  TaxBehavior3?: TaxBehavior3Resolvers;
  CollectionMethod7?: CollectionMethod7Resolvers;
  ItemType2?: ItemType2Resolvers;
  ReportingCategory3?: ReportingCategory3Resolvers;
  Timezone3?: Timezone3Resolvers;
  RequestThreeDSecure3?: RequestThreeDSecure3Resolvers;
  Usage9?: Usage9Resolvers;
  CancellationReason8?: CancellationReason8Resolvers;
  Type58?: Type58Resolvers;
  Value10?: Value10Resolvers;
  Flow7?: Flow7Resolvers;
  Status45?: Status45Resolvers;
  Interval10?: Interval10Resolvers;
  NotificationMethod?: NotificationMethodResolvers;
  RefundAttributesMethod2?: RefundAttributesMethod2Resolvers;
  Usage10?: Usage10Resolvers;
  UsageRecord?: UsageRecordResolvers<ContextType>;
  Object80?: Object80Resolvers;
  Action?: ActionResolvers;
  BillingCycleAnchor7?: BillingCycleAnchor7Resolvers;
  EndBehavior2?: EndBehavior2Resolvers;
  ProrationBehavior7?: ProrationBehavior7Resolvers;
  TaxType2?: TaxType2Resolvers;
  TerminalConnectionToken?: TerminalConnectionTokenResolvers<ContextType>;
  Object83?: Object83Resolvers;
  BusinessType3?: BusinessType3Resolvers;
  AccountHolderType14?: AccountHolderType14Resolvers;
  AccountType14?: AccountType14Resolvers;
  SourceType4?: SourceType4Resolvers;
  ApiVersion3?: ApiVersion3Resolvers;
  EnabledEvents2ListItem?: EnabledEvents2ListItemResolvers;
}>;


/**
 * @deprecated
 * Use "Resolvers" root object instead. If you wish to get "IResolvers", add "typesPrefix: I" to your config.
 */
export type IResolvers<ContextType = MeshContext> = Resolvers<ContextType>;

import { MeshContext as BaseMeshContext } from '@graphql-mesh/runtime';

import { SelectionSetParamOrFactory } from '@graphql-mesh/types';

export type QueryCountriesSdk = {
  continents: (params: {
      root?: any;
      args: QuerycontinentsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['continents']>,
  continent: (params: {
      root?: any;
      args: QuerycontinentArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['continent']>,
  countries: (params: {
      root?: any;
      args: QuerycountriesArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['countries']>,
  country: (params: {
      root?: any;
      args: QuerycountryArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['country']>,
  languages: (params: {
      root?: any;
      args: QuerylanguagesArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['languages']>,
  language: (params: {
      root?: any;
      args: QuerylanguageArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['language']>
};

export type MutationCountriesSdk = {

};

export type SubscriptionCountriesSdk = {

};

export type QueryCartQlSdk = {
  cart: (params: {
      root?: any;
      args: QuerycartArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['cart']>,
  node: (params: {
      root?: any;
      args: QuerynodeArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['node']>
};

export type MutationCartQlSdk = {
  addItem: (params: {
      root?: any;
      args: MutationaddItemArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['addItem']>,
  setItems: (params: {
      root?: any;
      args: MutationsetItemsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['setItems']>,
  updateItem: (params: {
      root?: any;
      args: MutationupdateItemArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['updateItem']>,
  incrementItemQuantity: (params: {
      root?: any;
      args: MutationincrementItemQuantityArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['incrementItemQuantity']>,
  decrementItemQuantity: (params: {
      root?: any;
      args: MutationdecrementItemQuantityArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['decrementItemQuantity']>,
  removeItem: (params: {
      root?: any;
      args: MutationremoveItemArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['removeItem']>,
  emptyCart: (params: {
      root?: any;
      args: MutationemptyCartArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['emptyCart']>,
  updateCart: (params: {
      root?: any;
      args: MutationupdateCartArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['updateCart']>,
  deleteCart: (params: {
      root?: any;
      args: MutationdeleteCartArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['deleteCart']>,
  checkout: (params: {
      root?: any;
      args: MutationcheckoutArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['checkout']>
};

export type SubscriptionCartQlSdk = {

};

export type QueryStripeSdk = {
  get3dSecureThreeDSecure: (params: {
      root?: any;
      args: Queryget3dSecureThreeDSecureArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['get3dSecureThreeDSecure']>,
  getAccount: (params: {
      root?: any;
      args: QuerygetAccountArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getAccount']>,
  getAccountBankAccountsId: (params: {
      root?: any;
      args: QuerygetAccountBankAccountsIdArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getAccountBankAccountsId']>,
  getAccountCapabilities: (params: {
      root?: any;
      args: QuerygetAccountCapabilitiesArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getAccountCapabilities']>,
  getAccountCapabilitiesCapability: (params: {
      root?: any;
      args: QuerygetAccountCapabilitiesCapabilityArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getAccountCapabilitiesCapability']>,
  getAccountExternalAccounts: (params: {
      root?: any;
      args: QuerygetAccountExternalAccountsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getAccountExternalAccounts']>,
  getAccountExternalAccountsId: (params: {
      root?: any;
      args: QuerygetAccountExternalAccountsIdArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getAccountExternalAccountsId']>,
  getAccountPeople: (params: {
      root?: any;
      args: QuerygetAccountPeopleArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getAccountPeople']>,
  getAccountPeoplePerson: (params: {
      root?: any;
      args: QuerygetAccountPeoplePersonArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getAccountPeoplePerson']>,
  getAccountPersons: (params: {
      root?: any;
      args: QuerygetAccountPersonsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getAccountPersons']>,
  getAccountPersonsPerson: (params: {
      root?: any;
      args: QuerygetAccountPersonsPersonArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getAccountPersonsPerson']>,
  getAccounts: (params: {
      root?: any;
      args: QuerygetAccountsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getAccounts']>,
  getAccountsAccount: (params: {
      root?: any;
      args: QuerygetAccountsAccountArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getAccountsAccount']>,
  getAccountsAccountBankAccountsId: (params: {
      root?: any;
      args: QuerygetAccountsAccountBankAccountsIdArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getAccountsAccountBankAccountsId']>,
  getAccountsAccountCapabilities: (params: {
      root?: any;
      args: QuerygetAccountsAccountCapabilitiesArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getAccountsAccountCapabilities']>,
  getAccountsAccountCapabilitiesCapability: (params: {
      root?: any;
      args: QuerygetAccountsAccountCapabilitiesCapabilityArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getAccountsAccountCapabilitiesCapability']>,
  getAccountsAccountExternalAccounts: (params: {
      root?: any;
      args: QuerygetAccountsAccountExternalAccountsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getAccountsAccountExternalAccounts']>,
  getAccountsAccountExternalAccountsId: (params: {
      root?: any;
      args: QuerygetAccountsAccountExternalAccountsIdArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getAccountsAccountExternalAccountsId']>,
  getAccountsAccountPeople: (params: {
      root?: any;
      args: QuerygetAccountsAccountPeopleArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getAccountsAccountPeople']>,
  getAccountsAccountPeoplePerson: (params: {
      root?: any;
      args: QuerygetAccountsAccountPeoplePersonArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getAccountsAccountPeoplePerson']>,
  getAccountsAccountPersons: (params: {
      root?: any;
      args: QuerygetAccountsAccountPersonsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getAccountsAccountPersons']>,
  getAccountsAccountPersonsPerson: (params: {
      root?: any;
      args: QuerygetAccountsAccountPersonsPersonArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getAccountsAccountPersonsPerson']>,
  getApplePayDomains: (params: {
      root?: any;
      args: QuerygetApplePayDomainsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getApplePayDomains']>,
  getApplePayDomainsDomain: (params: {
      root?: any;
      args: QuerygetApplePayDomainsDomainArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getApplePayDomainsDomain']>,
  getApplicationFees: (params: {
      root?: any;
      args: QuerygetApplicationFeesArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getApplicationFees']>,
  getApplicationFeesFeeRefundsId: (params: {
      root?: any;
      args: QuerygetApplicationFeesFeeRefundsIdArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getApplicationFeesFeeRefundsId']>,
  getApplicationFeesId: (params: {
      root?: any;
      args: QuerygetApplicationFeesIdArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getApplicationFeesId']>,
  getApplicationFeesIdRefunds: (params: {
      root?: any;
      args: QuerygetApplicationFeesIdRefundsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getApplicationFeesIdRefunds']>,
  getBalance: (params: {
      root?: any;
      args: QuerygetBalanceArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getBalance']>,
  getBalanceHistory: (params: {
      root?: any;
      args: QuerygetBalanceHistoryArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getBalanceHistory']>,
  getBalanceHistoryId: (params: {
      root?: any;
      args: QuerygetBalanceHistoryIdArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getBalanceHistoryId']>,
  getBalanceTransactions: (params: {
      root?: any;
      args: QuerygetBalanceTransactionsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getBalanceTransactions']>,
  getBalanceTransactionsId: (params: {
      root?: any;
      args: QuerygetBalanceTransactionsIdArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getBalanceTransactionsId']>,
  getBillingPortalConfigurations: (params: {
      root?: any;
      args: QuerygetBillingPortalConfigurationsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getBillingPortalConfigurations']>,
  getBillingPortalConfigurationsConfiguration: (params: {
      root?: any;
      args: QuerygetBillingPortalConfigurationsConfigurationArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getBillingPortalConfigurationsConfiguration']>,
  getBitcoinReceivers: (params: {
      root?: any;
      args: QuerygetBitcoinReceiversArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getBitcoinReceivers']>,
  getBitcoinReceiversId: (params: {
      root?: any;
      args: QuerygetBitcoinReceiversIdArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getBitcoinReceiversId']>,
  getBitcoinReceiversReceiverTransactions: (params: {
      root?: any;
      args: QuerygetBitcoinReceiversReceiverTransactionsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getBitcoinReceiversReceiverTransactions']>,
  getBitcoinTransactions: (params: {
      root?: any;
      args: QuerygetBitcoinTransactionsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getBitcoinTransactions']>,
  getCharges: (params: {
      root?: any;
      args: QuerygetChargesArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getCharges']>,
  getChargesCharge: (params: {
      root?: any;
      args: QuerygetChargesChargeArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getChargesCharge']>,
  getChargesChargeDispute: (params: {
      root?: any;
      args: QuerygetChargesChargeDisputeArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getChargesChargeDispute']>,
  getChargesChargeRefunds: (params: {
      root?: any;
      args: QuerygetChargesChargeRefundsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getChargesChargeRefunds']>,
  getChargesChargeRefundsRefund: (params: {
      root?: any;
      args: QuerygetChargesChargeRefundsRefundArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getChargesChargeRefundsRefund']>,
  getCheckoutSessions: (params: {
      root?: any;
      args: QuerygetCheckoutSessionsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getCheckoutSessions']>,
  getCheckoutSessionsSession: (params: {
      root?: any;
      args: QuerygetCheckoutSessionsSessionArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getCheckoutSessionsSession']>,
  getCheckoutSessionsSessionLineItems: (params: {
      root?: any;
      args: QuerygetCheckoutSessionsSessionLineItemsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getCheckoutSessionsSessionLineItems']>,
  getCountrySpecs: (params: {
      root?: any;
      args: QuerygetCountrySpecsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getCountrySpecs']>,
  getCountrySpecsCountry: (params: {
      root?: any;
      args: QuerygetCountrySpecsCountryArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getCountrySpecsCountry']>,
  getCoupons: (params: {
      root?: any;
      args: QuerygetCouponsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getCoupons']>,
  getCouponsCoupon: (params: {
      root?: any;
      args: QuerygetCouponsCouponArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getCouponsCoupon']>,
  getCreditNotes: (params: {
      root?: any;
      args: QuerygetCreditNotesArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getCreditNotes']>,
  getCreditNotesCreditNoteLines: (params: {
      root?: any;
      args: QuerygetCreditNotesCreditNoteLinesArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getCreditNotesCreditNoteLines']>,
  getCreditNotesId: (params: {
      root?: any;
      args: QuerygetCreditNotesIdArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getCreditNotesId']>,
  getCreditNotesPreview: (params: {
      root?: any;
      args: QuerygetCreditNotesPreviewArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getCreditNotesPreview']>,
  getCreditNotesPreviewLines: (params: {
      root?: any;
      args: QuerygetCreditNotesPreviewLinesArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getCreditNotesPreviewLines']>,
  getCustomers: (params: {
      root?: any;
      args: QuerygetCustomersArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getCustomers']>,
  getCustomersCustomer: (params: {
      root?: any;
      args: QuerygetCustomersCustomerArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getCustomersCustomer']>,
  getCustomersCustomerBalanceTransactions: (params: {
      root?: any;
      args: QuerygetCustomersCustomerBalanceTransactionsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getCustomersCustomerBalanceTransactions']>,
  getCustomersCustomerBalanceTransactionsTransaction: (params: {
      root?: any;
      args: QuerygetCustomersCustomerBalanceTransactionsTransactionArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getCustomersCustomerBalanceTransactionsTransaction']>,
  getCustomersCustomerBankAccounts: (params: {
      root?: any;
      args: QuerygetCustomersCustomerBankAccountsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getCustomersCustomerBankAccounts']>,
  getCustomersCustomerBankAccountsId: (params: {
      root?: any;
      args: QuerygetCustomersCustomerBankAccountsIdArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getCustomersCustomerBankAccountsId']>,
  getCustomersCustomerCards: (params: {
      root?: any;
      args: QuerygetCustomersCustomerCardsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getCustomersCustomerCards']>,
  getCustomersCustomerCardsId: (params: {
      root?: any;
      args: QuerygetCustomersCustomerCardsIdArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getCustomersCustomerCardsId']>,
  getCustomersCustomerDiscount: (params: {
      root?: any;
      args: QuerygetCustomersCustomerDiscountArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getCustomersCustomerDiscount']>,
  getCustomersCustomerSources: (params: {
      root?: any;
      args: QuerygetCustomersCustomerSourcesArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getCustomersCustomerSources']>,
  getCustomersCustomerSourcesId: (params: {
      root?: any;
      args: QuerygetCustomersCustomerSourcesIdArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getCustomersCustomerSourcesId']>,
  getCustomersCustomerSubscriptions: (params: {
      root?: any;
      args: QuerygetCustomersCustomerSubscriptionsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getCustomersCustomerSubscriptions']>,
  getCustomersCustomerSubscriptionsSubscriptionExposedId: (params: {
      root?: any;
      args: QuerygetCustomersCustomerSubscriptionsSubscriptionExposedIdArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getCustomersCustomerSubscriptionsSubscriptionExposedId']>,
  getCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount: (params: {
      root?: any;
      args: QuerygetCustomersCustomerSubscriptionsSubscriptionExposedIdDiscountArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount']>,
  getCustomersCustomerTaxIds: (params: {
      root?: any;
      args: QuerygetCustomersCustomerTaxIdsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getCustomersCustomerTaxIds']>,
  getCustomersCustomerTaxIdsId: (params: {
      root?: any;
      args: QuerygetCustomersCustomerTaxIdsIdArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getCustomersCustomerTaxIdsId']>,
  getDisputes: (params: {
      root?: any;
      args: QuerygetDisputesArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getDisputes']>,
  getDisputesDispute: (params: {
      root?: any;
      args: QuerygetDisputesDisputeArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getDisputesDispute']>,
  getEvents: (params: {
      root?: any;
      args: QuerygetEventsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getEvents']>,
  getEventsId: (params: {
      root?: any;
      args: QuerygetEventsIdArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getEventsId']>,
  getExchangeRates: (params: {
      root?: any;
      args: QuerygetExchangeRatesArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getExchangeRates']>,
  getExchangeRatesRateId: (params: {
      root?: any;
      args: QuerygetExchangeRatesRateIdArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getExchangeRatesRateId']>,
  getFileLinks: (params: {
      root?: any;
      args: QuerygetFileLinksArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getFileLinks']>,
  getFileLinksLink: (params: {
      root?: any;
      args: QuerygetFileLinksLinkArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getFileLinksLink']>,
  getFiles: (params: {
      root?: any;
      args: QuerygetFilesArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getFiles']>,
  getFilesFile: (params: {
      root?: any;
      args: QuerygetFilesFileArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getFilesFile']>,
  getIdentityVerificationReports: (params: {
      root?: any;
      args: QuerygetIdentityVerificationReportsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getIdentityVerificationReports']>,
  getIdentityVerificationReportsReport: (params: {
      root?: any;
      args: QuerygetIdentityVerificationReportsReportArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getIdentityVerificationReportsReport']>,
  getIdentityVerificationSessions: (params: {
      root?: any;
      args: QuerygetIdentityVerificationSessionsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getIdentityVerificationSessions']>,
  getIdentityVerificationSessionsSession: (params: {
      root?: any;
      args: QuerygetIdentityVerificationSessionsSessionArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getIdentityVerificationSessionsSession']>,
  getInvoiceitems: (params: {
      root?: any;
      args: QuerygetInvoiceitemsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getInvoiceitems']>,
  getInvoiceitemsInvoiceitem: (params: {
      root?: any;
      args: QuerygetInvoiceitemsInvoiceitemArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getInvoiceitemsInvoiceitem']>,
  getInvoices: (params: {
      root?: any;
      args: QuerygetInvoicesArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getInvoices']>,
  getInvoicesInvoice: (params: {
      root?: any;
      args: QuerygetInvoicesInvoiceArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getInvoicesInvoice']>,
  getInvoicesInvoiceLines: (params: {
      root?: any;
      args: QuerygetInvoicesInvoiceLinesArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getInvoicesInvoiceLines']>,
  getInvoicesUpcoming: (params: {
      root?: any;
      args: QuerygetInvoicesUpcomingArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getInvoicesUpcoming']>,
  getInvoicesUpcomingLines: (params: {
      root?: any;
      args: QuerygetInvoicesUpcomingLinesArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getInvoicesUpcomingLines']>,
  getIssuerFraudRecords: (params: {
      root?: any;
      args: QuerygetIssuerFraudRecordsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getIssuerFraudRecords']>,
  getIssuerFraudRecordsIssuerFraudRecord: (params: {
      root?: any;
      args: QuerygetIssuerFraudRecordsIssuerFraudRecordArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getIssuerFraudRecordsIssuerFraudRecord']>,
  getIssuingAuthorizations: (params: {
      root?: any;
      args: QuerygetIssuingAuthorizationsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getIssuingAuthorizations']>,
  getIssuingAuthorizationsAuthorization: (params: {
      root?: any;
      args: QuerygetIssuingAuthorizationsAuthorizationArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getIssuingAuthorizationsAuthorization']>,
  getIssuingCardholders: (params: {
      root?: any;
      args: QuerygetIssuingCardholdersArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getIssuingCardholders']>,
  getIssuingCardholdersCardholder: (params: {
      root?: any;
      args: QuerygetIssuingCardholdersCardholderArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getIssuingCardholdersCardholder']>,
  getIssuingCards: (params: {
      root?: any;
      args: QuerygetIssuingCardsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getIssuingCards']>,
  getIssuingCardsCard: (params: {
      root?: any;
      args: QuerygetIssuingCardsCardArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getIssuingCardsCard']>,
  getIssuingDisputes: (params: {
      root?: any;
      args: QuerygetIssuingDisputesArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getIssuingDisputes']>,
  getIssuingDisputesDispute: (params: {
      root?: any;
      args: QuerygetIssuingDisputesDisputeArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getIssuingDisputesDispute']>,
  getIssuingSettlements: (params: {
      root?: any;
      args: QuerygetIssuingSettlementsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getIssuingSettlements']>,
  getIssuingSettlementsSettlement: (params: {
      root?: any;
      args: QuerygetIssuingSettlementsSettlementArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getIssuingSettlementsSettlement']>,
  getIssuingTransactions: (params: {
      root?: any;
      args: QuerygetIssuingTransactionsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getIssuingTransactions']>,
  getIssuingTransactionsTransaction: (params: {
      root?: any;
      args: QuerygetIssuingTransactionsTransactionArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getIssuingTransactionsTransaction']>,
  getMandatesMandate: (params: {
      root?: any;
      args: QuerygetMandatesMandateArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getMandatesMandate']>,
  getOrderReturns: (params: {
      root?: any;
      args: QuerygetOrderReturnsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getOrderReturns']>,
  getOrderReturnsId: (params: {
      root?: any;
      args: QuerygetOrderReturnsIdArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getOrderReturnsId']>,
  getOrders: (params: {
      root?: any;
      args: QuerygetOrdersArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getOrders']>,
  getOrdersId: (params: {
      root?: any;
      args: QuerygetOrdersIdArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getOrdersId']>,
  getPaymentIntents: (params: {
      root?: any;
      args: QuerygetPaymentIntentsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getPaymentIntents']>,
  getPaymentIntentsIntent: (params: {
      root?: any;
      args: QuerygetPaymentIntentsIntentArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getPaymentIntentsIntent']>,
  getPaymentMethods: (params: {
      root?: any;
      args: QuerygetPaymentMethodsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getPaymentMethods']>,
  getPaymentMethodsPaymentMethod: (params: {
      root?: any;
      args: QuerygetPaymentMethodsPaymentMethodArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getPaymentMethodsPaymentMethod']>,
  getPayouts: (params: {
      root?: any;
      args: QuerygetPayoutsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getPayouts']>,
  getPayoutsPayout: (params: {
      root?: any;
      args: QuerygetPayoutsPayoutArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getPayoutsPayout']>,
  getPlans: (params: {
      root?: any;
      args: QuerygetPlansArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getPlans']>,
  getPlansPlan: (params: {
      root?: any;
      args: QuerygetPlansPlanArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getPlansPlan']>,
  getPrices: (params: {
      root?: any;
      args: QuerygetPricesArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getPrices']>,
  getPricesPrice: (params: {
      root?: any;
      args: QuerygetPricesPriceArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getPricesPrice']>,
  getProducts: (params: {
      root?: any;
      args: QuerygetProductsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getProducts']>,
  getProductsId: (params: {
      root?: any;
      args: QuerygetProductsIdArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getProductsId']>,
  getPromotionCodes: (params: {
      root?: any;
      args: QuerygetPromotionCodesArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getPromotionCodes']>,
  getPromotionCodesPromotionCode: (params: {
      root?: any;
      args: QuerygetPromotionCodesPromotionCodeArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getPromotionCodesPromotionCode']>,
  getQuotes: (params: {
      root?: any;
      args: QuerygetQuotesArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getQuotes']>,
  getQuotesQuote: (params: {
      root?: any;
      args: QuerygetQuotesQuoteArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getQuotesQuote']>,
  getQuotesQuoteComputedUpfrontLineItems: (params: {
      root?: any;
      args: QuerygetQuotesQuoteComputedUpfrontLineItemsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getQuotesQuoteComputedUpfrontLineItems']>,
  getQuotesQuoteLineItems: (params: {
      root?: any;
      args: QuerygetQuotesQuoteLineItemsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getQuotesQuoteLineItems']>,
  getQuotesQuotePdf: (params: {
      root?: any;
      args: QuerygetQuotesQuotePdfArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getQuotesQuotePdf']>,
  getRadarEarlyFraudWarnings: (params: {
      root?: any;
      args: QuerygetRadarEarlyFraudWarningsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getRadarEarlyFraudWarnings']>,
  getRadarEarlyFraudWarningsEarlyFraudWarning: (params: {
      root?: any;
      args: QuerygetRadarEarlyFraudWarningsEarlyFraudWarningArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getRadarEarlyFraudWarningsEarlyFraudWarning']>,
  getRadarValueListItems: (params: {
      root?: any;
      args: QuerygetRadarValueListItemsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getRadarValueListItems']>,
  getRadarValueListItemsItem: (params: {
      root?: any;
      args: QuerygetRadarValueListItemsItemArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getRadarValueListItemsItem']>,
  getRadarValueLists: (params: {
      root?: any;
      args: QuerygetRadarValueListsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getRadarValueLists']>,
  getRadarValueListsValueList: (params: {
      root?: any;
      args: QuerygetRadarValueListsValueListArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getRadarValueListsValueList']>,
  getRecipients: (params: {
      root?: any;
      args: QuerygetRecipientsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getRecipients']>,
  getRecipientsId: (params: {
      root?: any;
      args: QuerygetRecipientsIdArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getRecipientsId']>,
  getRefunds: (params: {
      root?: any;
      args: QuerygetRefundsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getRefunds']>,
  getRefundsRefund: (params: {
      root?: any;
      args: QuerygetRefundsRefundArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getRefundsRefund']>,
  getReportingReportRuns: (params: {
      root?: any;
      args: QuerygetReportingReportRunsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getReportingReportRuns']>,
  getReportingReportRunsReportRun: (params: {
      root?: any;
      args: QuerygetReportingReportRunsReportRunArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getReportingReportRunsReportRun']>,
  getReportingReportTypes: (params: {
      root?: any;
      args: QuerygetReportingReportTypesArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getReportingReportTypes']>,
  getReportingReportTypesReportType: (params: {
      root?: any;
      args: QuerygetReportingReportTypesReportTypeArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getReportingReportTypesReportType']>,
  getReviews: (params: {
      root?: any;
      args: QuerygetReviewsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getReviews']>,
  getReviewsReview: (params: {
      root?: any;
      args: QuerygetReviewsReviewArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getReviewsReview']>,
  getSetupAttempts: (params: {
      root?: any;
      args: QuerygetSetupAttemptsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getSetupAttempts']>,
  getSetupIntents: (params: {
      root?: any;
      args: QuerygetSetupIntentsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getSetupIntents']>,
  getSetupIntentsIntent: (params: {
      root?: any;
      args: QuerygetSetupIntentsIntentArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getSetupIntentsIntent']>,
  getSigmaScheduledQueryRuns: (params: {
      root?: any;
      args: QuerygetSigmaScheduledQueryRunsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getSigmaScheduledQueryRuns']>,
  getSigmaScheduledQueryRunsScheduledQueryRun: (params: {
      root?: any;
      args: QuerygetSigmaScheduledQueryRunsScheduledQueryRunArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getSigmaScheduledQueryRunsScheduledQueryRun']>,
  getSkus: (params: {
      root?: any;
      args: QuerygetSkusArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getSkus']>,
  getSkusId: (params: {
      root?: any;
      args: QuerygetSkusIdArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getSkusId']>,
  getSourcesSource: (params: {
      root?: any;
      args: QuerygetSourcesSourceArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getSourcesSource']>,
  getSourcesSourceMandateNotificationsMandateNotification: (params: {
      root?: any;
      args: QuerygetSourcesSourceMandateNotificationsMandateNotificationArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getSourcesSourceMandateNotificationsMandateNotification']>,
  getSourcesSourceSourceTransactions: (params: {
      root?: any;
      args: QuerygetSourcesSourceSourceTransactionsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getSourcesSourceSourceTransactions']>,
  getSourcesSourceSourceTransactionsSourceTransaction: (params: {
      root?: any;
      args: QuerygetSourcesSourceSourceTransactionsSourceTransactionArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getSourcesSourceSourceTransactionsSourceTransaction']>,
  getSubscriptionItems: (params: {
      root?: any;
      args: QuerygetSubscriptionItemsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getSubscriptionItems']>,
  getSubscriptionItemsItem: (params: {
      root?: any;
      args: QuerygetSubscriptionItemsItemArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getSubscriptionItemsItem']>,
  getSubscriptionItemsSubscriptionItemUsageRecordSummaries: (params: {
      root?: any;
      args: QuerygetSubscriptionItemsSubscriptionItemUsageRecordSummariesArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getSubscriptionItemsSubscriptionItemUsageRecordSummaries']>,
  getSubscriptionSchedules: (params: {
      root?: any;
      args: QuerygetSubscriptionSchedulesArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getSubscriptionSchedules']>,
  getSubscriptionSchedulesSchedule: (params: {
      root?: any;
      args: QuerygetSubscriptionSchedulesScheduleArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getSubscriptionSchedulesSchedule']>,
  getSubscriptions: (params: {
      root?: any;
      args: QuerygetSubscriptionsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getSubscriptions']>,
  getSubscriptionsSubscriptionExposedId: (params: {
      root?: any;
      args: QuerygetSubscriptionsSubscriptionExposedIdArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getSubscriptionsSubscriptionExposedId']>,
  getTaxCodes: (params: {
      root?: any;
      args: QuerygetTaxCodesArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getTaxCodes']>,
  getTaxCodesId: (params: {
      root?: any;
      args: QuerygetTaxCodesIdArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getTaxCodesId']>,
  getTaxRates: (params: {
      root?: any;
      args: QuerygetTaxRatesArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getTaxRates']>,
  getTaxRatesTaxRate: (params: {
      root?: any;
      args: QuerygetTaxRatesTaxRateArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getTaxRatesTaxRate']>,
  getTerminalLocations: (params: {
      root?: any;
      args: QuerygetTerminalLocationsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getTerminalLocations']>,
  getTerminalLocationsLocation: (params: {
      root?: any;
      args: QuerygetTerminalLocationsLocationArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getTerminalLocationsLocation']>,
  getTerminalReaders: (params: {
      root?: any;
      args: QuerygetTerminalReadersArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getTerminalReaders']>,
  getTerminalReadersReader: (params: {
      root?: any;
      args: QuerygetTerminalReadersReaderArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getTerminalReadersReader']>,
  getTokensToken: (params: {
      root?: any;
      args: QuerygetTokensTokenArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getTokensToken']>,
  getTopups: (params: {
      root?: any;
      args: QuerygetTopupsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getTopups']>,
  getTopupsTopup: (params: {
      root?: any;
      args: QuerygetTopupsTopupArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getTopupsTopup']>,
  getTransfers: (params: {
      root?: any;
      args: QuerygetTransfersArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getTransfers']>,
  getTransfersIdReversals: (params: {
      root?: any;
      args: QuerygetTransfersIdReversalsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getTransfersIdReversals']>,
  getTransfersTransfer: (params: {
      root?: any;
      args: QuerygetTransfersTransferArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getTransfersTransfer']>,
  getTransfersTransferReversalsId: (params: {
      root?: any;
      args: QuerygetTransfersTransferReversalsIdArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getTransfersTransferReversalsId']>,
  getWebhookEndpoints: (params: {
      root?: any;
      args: QuerygetWebhookEndpointsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getWebhookEndpoints']>,
  getWebhookEndpointsWebhookEndpoint: (params: {
      root?: any;
      args: QuerygetWebhookEndpointsWebhookEndpointArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getWebhookEndpointsWebhookEndpoint']>
};

export type MutationStripeSdk = {
  deleteAccount: (params: {
      root?: any;
      args: MutationdeleteAccountArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['deleteAccount']>,
  deleteAccountBankAccountsId: (params: {
      root?: any;
      args: MutationdeleteAccountBankAccountsIdArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['deleteAccountBankAccountsId']>,
  deleteAccountExternalAccountsId: (params: {
      root?: any;
      args: MutationdeleteAccountExternalAccountsIdArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['deleteAccountExternalAccountsId']>,
  deleteAccountPeoplePerson: (params: {
      root?: any;
      args: MutationdeleteAccountPeoplePersonArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['deleteAccountPeoplePerson']>,
  deleteAccountPersonsPerson: (params: {
      root?: any;
      args: MutationdeleteAccountPersonsPersonArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['deleteAccountPersonsPerson']>,
  deleteAccountsAccount: (params: {
      root?: any;
      args: MutationdeleteAccountsAccountArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['deleteAccountsAccount']>,
  deleteAccountsAccountBankAccountsId: (params: {
      root?: any;
      args: MutationdeleteAccountsAccountBankAccountsIdArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['deleteAccountsAccountBankAccountsId']>,
  deleteAccountsAccountExternalAccountsId: (params: {
      root?: any;
      args: MutationdeleteAccountsAccountExternalAccountsIdArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['deleteAccountsAccountExternalAccountsId']>,
  deleteAccountsAccountPeoplePerson: (params: {
      root?: any;
      args: MutationdeleteAccountsAccountPeoplePersonArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['deleteAccountsAccountPeoplePerson']>,
  deleteAccountsAccountPersonsPerson: (params: {
      root?: any;
      args: MutationdeleteAccountsAccountPersonsPersonArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['deleteAccountsAccountPersonsPerson']>,
  deleteApplePayDomainsDomain: (params: {
      root?: any;
      args: MutationdeleteApplePayDomainsDomainArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['deleteApplePayDomainsDomain']>,
  deleteCouponsCoupon: (params: {
      root?: any;
      args: MutationdeleteCouponsCouponArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['deleteCouponsCoupon']>,
  deleteCustomersCustomer: (params: {
      root?: any;
      args: MutationdeleteCustomersCustomerArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['deleteCustomersCustomer']>,
  deleteCustomersCustomerBankAccountsId: (params: {
      root?: any;
      args: MutationdeleteCustomersCustomerBankAccountsIdArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['deleteCustomersCustomerBankAccountsId']>,
  deleteCustomersCustomerCardsId: (params: {
      root?: any;
      args: MutationdeleteCustomersCustomerCardsIdArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['deleteCustomersCustomerCardsId']>,
  deleteCustomersCustomerDiscount: (params: {
      root?: any;
      args: MutationdeleteCustomersCustomerDiscountArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['deleteCustomersCustomerDiscount']>,
  deleteCustomersCustomerSourcesId: (params: {
      root?: any;
      args: MutationdeleteCustomersCustomerSourcesIdArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['deleteCustomersCustomerSourcesId']>,
  deleteCustomersCustomerSubscriptionsSubscriptionExposedId: (params: {
      root?: any;
      args: MutationdeleteCustomersCustomerSubscriptionsSubscriptionExposedIdArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['deleteCustomersCustomerSubscriptionsSubscriptionExposedId']>,
  deleteCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount: (params: {
      root?: any;
      args: MutationdeleteCustomersCustomerSubscriptionsSubscriptionExposedIdDiscountArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['deleteCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount']>,
  deleteCustomersCustomerTaxIdsId: (params: {
      root?: any;
      args: MutationdeleteCustomersCustomerTaxIdsIdArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['deleteCustomersCustomerTaxIdsId']>,
  deleteEphemeralKeysKey: (params: {
      root?: any;
      args: MutationdeleteEphemeralKeysKeyArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['deleteEphemeralKeysKey']>,
  deleteInvoiceitemsInvoiceitem: (params: {
      root?: any;
      args: MutationdeleteInvoiceitemsInvoiceitemArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['deleteInvoiceitemsInvoiceitem']>,
  deleteInvoicesInvoice: (params: {
      root?: any;
      args: MutationdeleteInvoicesInvoiceArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['deleteInvoicesInvoice']>,
  deletePlansPlan: (params: {
      root?: any;
      args: MutationdeletePlansPlanArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['deletePlansPlan']>,
  deleteProductsId: (params: {
      root?: any;
      args: MutationdeleteProductsIdArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['deleteProductsId']>,
  deleteRadarValueListItemsItem: (params: {
      root?: any;
      args: MutationdeleteRadarValueListItemsItemArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['deleteRadarValueListItemsItem']>,
  deleteRadarValueListsValueList: (params: {
      root?: any;
      args: MutationdeleteRadarValueListsValueListArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['deleteRadarValueListsValueList']>,
  deleteRecipientsId: (params: {
      root?: any;
      args: MutationdeleteRecipientsIdArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['deleteRecipientsId']>,
  deleteSkusId: (params: {
      root?: any;
      args: MutationdeleteSkusIdArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['deleteSkusId']>,
  deleteSubscriptionItemsItem: (params: {
      root?: any;
      args: MutationdeleteSubscriptionItemsItemArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['deleteSubscriptionItemsItem']>,
  deleteSubscriptionsSubscriptionExposedId: (params: {
      root?: any;
      args: MutationdeleteSubscriptionsSubscriptionExposedIdArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['deleteSubscriptionsSubscriptionExposedId']>,
  deleteSubscriptionsSubscriptionExposedIdDiscount: (params: {
      root?: any;
      args: MutationdeleteSubscriptionsSubscriptionExposedIdDiscountArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['deleteSubscriptionsSubscriptionExposedIdDiscount']>,
  deleteTerminalLocationsLocation: (params: {
      root?: any;
      args: MutationdeleteTerminalLocationsLocationArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['deleteTerminalLocationsLocation']>,
  deleteTerminalReadersReader: (params: {
      root?: any;
      args: MutationdeleteTerminalReadersReaderArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['deleteTerminalReadersReader']>,
  deleteWebhookEndpointsWebhookEndpoint: (params: {
      root?: any;
      args: MutationdeleteWebhookEndpointsWebhookEndpointArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['deleteWebhookEndpointsWebhookEndpoint']>,
  post3dSecure: (params: {
      root?: any;
      args: Mutationpost3dSecureArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['post3dSecure']>,
  postAccount: (params: {
      root?: any;
      args: MutationpostAccountArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postAccount']>,
  postAccountBankAccounts: (params: {
      root?: any;
      args: MutationpostAccountBankAccountsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postAccountBankAccounts']>,
  postAccountBankAccountsId: (params: {
      root?: any;
      args: MutationpostAccountBankAccountsIdArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postAccountBankAccountsId']>,
  postAccountCapabilitiesCapability: (params: {
      root?: any;
      args: MutationpostAccountCapabilitiesCapabilityArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postAccountCapabilitiesCapability']>,
  postAccountExternalAccounts: (params: {
      root?: any;
      args: MutationpostAccountExternalAccountsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postAccountExternalAccounts']>,
  postAccountExternalAccountsId: (params: {
      root?: any;
      args: MutationpostAccountExternalAccountsIdArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postAccountExternalAccountsId']>,
  postAccountLinks: (params: {
      root?: any;
      args: MutationpostAccountLinksArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postAccountLinks']>,
  postAccountLoginLinks: (params: {
      root?: any;
      args: MutationpostAccountLoginLinksArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postAccountLoginLinks']>,
  postAccountPeople: (params: {
      root?: any;
      args: MutationpostAccountPeopleArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postAccountPeople']>,
  postAccountPeoplePerson: (params: {
      root?: any;
      args: MutationpostAccountPeoplePersonArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postAccountPeoplePerson']>,
  postAccountPersons: (params: {
      root?: any;
      args: MutationpostAccountPersonsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postAccountPersons']>,
  postAccountPersonsPerson: (params: {
      root?: any;
      args: MutationpostAccountPersonsPersonArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postAccountPersonsPerson']>,
  postAccounts: (params: {
      root?: any;
      args: MutationpostAccountsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postAccounts']>,
  postAccountsAccount: (params: {
      root?: any;
      args: MutationpostAccountsAccountArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postAccountsAccount']>,
  postAccountsAccountBankAccounts: (params: {
      root?: any;
      args: MutationpostAccountsAccountBankAccountsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postAccountsAccountBankAccounts']>,
  postAccountsAccountBankAccountsId: (params: {
      root?: any;
      args: MutationpostAccountsAccountBankAccountsIdArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postAccountsAccountBankAccountsId']>,
  postAccountsAccountCapabilitiesCapability: (params: {
      root?: any;
      args: MutationpostAccountsAccountCapabilitiesCapabilityArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postAccountsAccountCapabilitiesCapability']>,
  postAccountsAccountExternalAccounts: (params: {
      root?: any;
      args: MutationpostAccountsAccountExternalAccountsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postAccountsAccountExternalAccounts']>,
  postAccountsAccountExternalAccountsId: (params: {
      root?: any;
      args: MutationpostAccountsAccountExternalAccountsIdArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postAccountsAccountExternalAccountsId']>,
  postAccountsAccountLoginLinks: (params: {
      root?: any;
      args: MutationpostAccountsAccountLoginLinksArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postAccountsAccountLoginLinks']>,
  postAccountsAccountPeople: (params: {
      root?: any;
      args: MutationpostAccountsAccountPeopleArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postAccountsAccountPeople']>,
  postAccountsAccountPeoplePerson: (params: {
      root?: any;
      args: MutationpostAccountsAccountPeoplePersonArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postAccountsAccountPeoplePerson']>,
  postAccountsAccountPersons: (params: {
      root?: any;
      args: MutationpostAccountsAccountPersonsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postAccountsAccountPersons']>,
  postAccountsAccountPersonsPerson: (params: {
      root?: any;
      args: MutationpostAccountsAccountPersonsPersonArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postAccountsAccountPersonsPerson']>,
  postAccountsAccountReject: (params: {
      root?: any;
      args: MutationpostAccountsAccountRejectArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postAccountsAccountReject']>,
  postApplePayDomains: (params: {
      root?: any;
      args: MutationpostApplePayDomainsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postApplePayDomains']>,
  postApplicationFeesFeeRefundsId: (params: {
      root?: any;
      args: MutationpostApplicationFeesFeeRefundsIdArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postApplicationFeesFeeRefundsId']>,
  postApplicationFeesIdRefund: (params: {
      root?: any;
      args: MutationpostApplicationFeesIdRefundArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postApplicationFeesIdRefund']>,
  postApplicationFeesIdRefunds: (params: {
      root?: any;
      args: MutationpostApplicationFeesIdRefundsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postApplicationFeesIdRefunds']>,
  postBillingPortalConfigurations: (params: {
      root?: any;
      args: MutationpostBillingPortalConfigurationsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postBillingPortalConfigurations']>,
  postBillingPortalConfigurationsConfiguration: (params: {
      root?: any;
      args: MutationpostBillingPortalConfigurationsConfigurationArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postBillingPortalConfigurationsConfiguration']>,
  postBillingPortalSessions: (params: {
      root?: any;
      args: MutationpostBillingPortalSessionsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postBillingPortalSessions']>,
  postCharges: (params: {
      root?: any;
      args: MutationpostChargesArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postCharges']>,
  postChargesCharge: (params: {
      root?: any;
      args: MutationpostChargesChargeArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postChargesCharge']>,
  postChargesChargeCapture: (params: {
      root?: any;
      args: MutationpostChargesChargeCaptureArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postChargesChargeCapture']>,
  postChargesChargeDispute: (params: {
      root?: any;
      args: MutationpostChargesChargeDisputeArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postChargesChargeDispute']>,
  postChargesChargeDisputeClose: (params: {
      root?: any;
      args: MutationpostChargesChargeDisputeCloseArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postChargesChargeDisputeClose']>,
  postChargesChargeRefund: (params: {
      root?: any;
      args: MutationpostChargesChargeRefundArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postChargesChargeRefund']>,
  postChargesChargeRefunds: (params: {
      root?: any;
      args: MutationpostChargesChargeRefundsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postChargesChargeRefunds']>,
  postChargesChargeRefundsRefund: (params: {
      root?: any;
      args: MutationpostChargesChargeRefundsRefundArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postChargesChargeRefundsRefund']>,
  postCheckoutSessions: (params: {
      root?: any;
      args: MutationpostCheckoutSessionsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postCheckoutSessions']>,
  postCoupons: (params: {
      root?: any;
      args: MutationpostCouponsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postCoupons']>,
  postCouponsCoupon: (params: {
      root?: any;
      args: MutationpostCouponsCouponArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postCouponsCoupon']>,
  postCreditNotes: (params: {
      root?: any;
      args: MutationpostCreditNotesArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postCreditNotes']>,
  postCreditNotesId: (params: {
      root?: any;
      args: MutationpostCreditNotesIdArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postCreditNotesId']>,
  postCreditNotesIdVoid: (params: {
      root?: any;
      args: MutationpostCreditNotesIdVoidArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postCreditNotesIdVoid']>,
  postCustomers: (params: {
      root?: any;
      args: MutationpostCustomersArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postCustomers']>,
  postCustomersCustomer: (params: {
      root?: any;
      args: MutationpostCustomersCustomerArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postCustomersCustomer']>,
  postCustomersCustomerBalanceTransactions: (params: {
      root?: any;
      args: MutationpostCustomersCustomerBalanceTransactionsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postCustomersCustomerBalanceTransactions']>,
  postCustomersCustomerBalanceTransactionsTransaction: (params: {
      root?: any;
      args: MutationpostCustomersCustomerBalanceTransactionsTransactionArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postCustomersCustomerBalanceTransactionsTransaction']>,
  postCustomersCustomerBankAccounts: (params: {
      root?: any;
      args: MutationpostCustomersCustomerBankAccountsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postCustomersCustomerBankAccounts']>,
  postCustomersCustomerBankAccountsId: (params: {
      root?: any;
      args: MutationpostCustomersCustomerBankAccountsIdArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postCustomersCustomerBankAccountsId']>,
  postCustomersCustomerBankAccountsIdVerify: (params: {
      root?: any;
      args: MutationpostCustomersCustomerBankAccountsIdVerifyArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postCustomersCustomerBankAccountsIdVerify']>,
  postCustomersCustomerCards: (params: {
      root?: any;
      args: MutationpostCustomersCustomerCardsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postCustomersCustomerCards']>,
  postCustomersCustomerCardsId: (params: {
      root?: any;
      args: MutationpostCustomersCustomerCardsIdArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postCustomersCustomerCardsId']>,
  postCustomersCustomerSources: (params: {
      root?: any;
      args: MutationpostCustomersCustomerSourcesArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postCustomersCustomerSources']>,
  postCustomersCustomerSourcesId: (params: {
      root?: any;
      args: MutationpostCustomersCustomerSourcesIdArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postCustomersCustomerSourcesId']>,
  postCustomersCustomerSourcesIdVerify: (params: {
      root?: any;
      args: MutationpostCustomersCustomerSourcesIdVerifyArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postCustomersCustomerSourcesIdVerify']>,
  postCustomersCustomerSubscriptions: (params: {
      root?: any;
      args: MutationpostCustomersCustomerSubscriptionsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postCustomersCustomerSubscriptions']>,
  postCustomersCustomerSubscriptionsSubscriptionExposedId: (params: {
      root?: any;
      args: MutationpostCustomersCustomerSubscriptionsSubscriptionExposedIdArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postCustomersCustomerSubscriptionsSubscriptionExposedId']>,
  postCustomersCustomerTaxIds: (params: {
      root?: any;
      args: MutationpostCustomersCustomerTaxIdsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postCustomersCustomerTaxIds']>,
  postDisputesDispute: (params: {
      root?: any;
      args: MutationpostDisputesDisputeArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postDisputesDispute']>,
  postDisputesDisputeClose: (params: {
      root?: any;
      args: MutationpostDisputesDisputeCloseArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postDisputesDisputeClose']>,
  postEphemeralKeys: (params: {
      root?: any;
      args: MutationpostEphemeralKeysArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postEphemeralKeys']>,
  postFileLinks: (params: {
      root?: any;
      args: MutationpostFileLinksArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postFileLinks']>,
  postFileLinksLink: (params: {
      root?: any;
      args: MutationpostFileLinksLinkArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postFileLinksLink']>,
  postFiles: (params: {
      root?: any;
      args: MutationpostFilesArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postFiles']>,
  postIdentityVerificationSessions: (params: {
      root?: any;
      args: MutationpostIdentityVerificationSessionsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postIdentityVerificationSessions']>,
  postIdentityVerificationSessionsSession: (params: {
      root?: any;
      args: MutationpostIdentityVerificationSessionsSessionArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postIdentityVerificationSessionsSession']>,
  postIdentityVerificationSessionsSessionCancel: (params: {
      root?: any;
      args: MutationpostIdentityVerificationSessionsSessionCancelArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postIdentityVerificationSessionsSessionCancel']>,
  postIdentityVerificationSessionsSessionRedact: (params: {
      root?: any;
      args: MutationpostIdentityVerificationSessionsSessionRedactArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postIdentityVerificationSessionsSessionRedact']>,
  postInvoiceitems: (params: {
      root?: any;
      args: MutationpostInvoiceitemsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postInvoiceitems']>,
  postInvoiceitemsInvoiceitem: (params: {
      root?: any;
      args: MutationpostInvoiceitemsInvoiceitemArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postInvoiceitemsInvoiceitem']>,
  postInvoices: (params: {
      root?: any;
      args: MutationpostInvoicesArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postInvoices']>,
  postInvoicesInvoice: (params: {
      root?: any;
      args: MutationpostInvoicesInvoiceArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postInvoicesInvoice']>,
  postInvoicesInvoiceFinalize: (params: {
      root?: any;
      args: MutationpostInvoicesInvoiceFinalizeArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postInvoicesInvoiceFinalize']>,
  postInvoicesInvoiceMarkUncollectible: (params: {
      root?: any;
      args: MutationpostInvoicesInvoiceMarkUncollectibleArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postInvoicesInvoiceMarkUncollectible']>,
  postInvoicesInvoicePay: (params: {
      root?: any;
      args: MutationpostInvoicesInvoicePayArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postInvoicesInvoicePay']>,
  postInvoicesInvoiceSend: (params: {
      root?: any;
      args: MutationpostInvoicesInvoiceSendArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postInvoicesInvoiceSend']>,
  postInvoicesInvoiceVoid: (params: {
      root?: any;
      args: MutationpostInvoicesInvoiceVoidArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postInvoicesInvoiceVoid']>,
  postIssuingAuthorizationsAuthorization: (params: {
      root?: any;
      args: MutationpostIssuingAuthorizationsAuthorizationArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postIssuingAuthorizationsAuthorization']>,
  postIssuingAuthorizationsAuthorizationApprove: (params: {
      root?: any;
      args: MutationpostIssuingAuthorizationsAuthorizationApproveArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postIssuingAuthorizationsAuthorizationApprove']>,
  postIssuingAuthorizationsAuthorizationDecline: (params: {
      root?: any;
      args: MutationpostIssuingAuthorizationsAuthorizationDeclineArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postIssuingAuthorizationsAuthorizationDecline']>,
  postIssuingCardholders: (params: {
      root?: any;
      args: MutationpostIssuingCardholdersArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postIssuingCardholders']>,
  postIssuingCardholdersCardholder: (params: {
      root?: any;
      args: MutationpostIssuingCardholdersCardholderArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postIssuingCardholdersCardholder']>,
  postIssuingCards: (params: {
      root?: any;
      args: MutationpostIssuingCardsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postIssuingCards']>,
  postIssuingCardsCard: (params: {
      root?: any;
      args: MutationpostIssuingCardsCardArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postIssuingCardsCard']>,
  postIssuingDisputes: (params: {
      root?: any;
      args: MutationpostIssuingDisputesArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postIssuingDisputes']>,
  postIssuingDisputesDispute: (params: {
      root?: any;
      args: MutationpostIssuingDisputesDisputeArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postIssuingDisputesDispute']>,
  postIssuingDisputesDisputeSubmit: (params: {
      root?: any;
      args: MutationpostIssuingDisputesDisputeSubmitArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postIssuingDisputesDisputeSubmit']>,
  postIssuingSettlementsSettlement: (params: {
      root?: any;
      args: MutationpostIssuingSettlementsSettlementArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postIssuingSettlementsSettlement']>,
  postIssuingTransactionsTransaction: (params: {
      root?: any;
      args: MutationpostIssuingTransactionsTransactionArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postIssuingTransactionsTransaction']>,
  postOrders: (params: {
      root?: any;
      args: MutationpostOrdersArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postOrders']>,
  postOrdersId: (params: {
      root?: any;
      args: MutationpostOrdersIdArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postOrdersId']>,
  postOrdersIdPay: (params: {
      root?: any;
      args: MutationpostOrdersIdPayArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postOrdersIdPay']>,
  postOrdersIdReturns: (params: {
      root?: any;
      args: MutationpostOrdersIdReturnsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postOrdersIdReturns']>,
  postPaymentIntents: (params: {
      root?: any;
      args: MutationpostPaymentIntentsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postPaymentIntents']>,
  postPaymentIntentsIntent: (params: {
      root?: any;
      args: MutationpostPaymentIntentsIntentArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postPaymentIntentsIntent']>,
  postPaymentIntentsIntentCancel: (params: {
      root?: any;
      args: MutationpostPaymentIntentsIntentCancelArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postPaymentIntentsIntentCancel']>,
  postPaymentIntentsIntentCapture: (params: {
      root?: any;
      args: MutationpostPaymentIntentsIntentCaptureArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postPaymentIntentsIntentCapture']>,
  postPaymentIntentsIntentConfirm: (params: {
      root?: any;
      args: MutationpostPaymentIntentsIntentConfirmArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postPaymentIntentsIntentConfirm']>,
  postPaymentMethods: (params: {
      root?: any;
      args: MutationpostPaymentMethodsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postPaymentMethods']>,
  postPaymentMethodsPaymentMethod: (params: {
      root?: any;
      args: MutationpostPaymentMethodsPaymentMethodArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postPaymentMethodsPaymentMethod']>,
  postPaymentMethodsPaymentMethodAttach: (params: {
      root?: any;
      args: MutationpostPaymentMethodsPaymentMethodAttachArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postPaymentMethodsPaymentMethodAttach']>,
  postPaymentMethodsPaymentMethodDetach: (params: {
      root?: any;
      args: MutationpostPaymentMethodsPaymentMethodDetachArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postPaymentMethodsPaymentMethodDetach']>,
  postPayouts: (params: {
      root?: any;
      args: MutationpostPayoutsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postPayouts']>,
  postPayoutsPayout: (params: {
      root?: any;
      args: MutationpostPayoutsPayoutArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postPayoutsPayout']>,
  postPayoutsPayoutCancel: (params: {
      root?: any;
      args: MutationpostPayoutsPayoutCancelArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postPayoutsPayoutCancel']>,
  postPayoutsPayoutReverse: (params: {
      root?: any;
      args: MutationpostPayoutsPayoutReverseArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postPayoutsPayoutReverse']>,
  postPlans: (params: {
      root?: any;
      args: MutationpostPlansArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postPlans']>,
  postPlansPlan: (params: {
      root?: any;
      args: MutationpostPlansPlanArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postPlansPlan']>,
  postPrices: (params: {
      root?: any;
      args: MutationpostPricesArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postPrices']>,
  postPricesPrice: (params: {
      root?: any;
      args: MutationpostPricesPriceArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postPricesPrice']>,
  postProducts: (params: {
      root?: any;
      args: MutationpostProductsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postProducts']>,
  postProductsId: (params: {
      root?: any;
      args: MutationpostProductsIdArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postProductsId']>,
  postPromotionCodes: (params: {
      root?: any;
      args: MutationpostPromotionCodesArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postPromotionCodes']>,
  postPromotionCodesPromotionCode: (params: {
      root?: any;
      args: MutationpostPromotionCodesPromotionCodeArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postPromotionCodesPromotionCode']>,
  postQuotes: (params: {
      root?: any;
      args: MutationpostQuotesArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postQuotes']>,
  postQuotesQuote: (params: {
      root?: any;
      args: MutationpostQuotesQuoteArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postQuotesQuote']>,
  postQuotesQuoteAccept: (params: {
      root?: any;
      args: MutationpostQuotesQuoteAcceptArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postQuotesQuoteAccept']>,
  postQuotesQuoteCancel: (params: {
      root?: any;
      args: MutationpostQuotesQuoteCancelArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postQuotesQuoteCancel']>,
  postQuotesQuoteFinalize: (params: {
      root?: any;
      args: MutationpostQuotesQuoteFinalizeArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postQuotesQuoteFinalize']>,
  postRadarValueListItems: (params: {
      root?: any;
      args: MutationpostRadarValueListItemsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postRadarValueListItems']>,
  postRadarValueLists: (params: {
      root?: any;
      args: MutationpostRadarValueListsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postRadarValueLists']>,
  postRadarValueListsValueList: (params: {
      root?: any;
      args: MutationpostRadarValueListsValueListArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postRadarValueListsValueList']>,
  postRecipients: (params: {
      root?: any;
      args: MutationpostRecipientsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postRecipients']>,
  postRecipientsId: (params: {
      root?: any;
      args: MutationpostRecipientsIdArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postRecipientsId']>,
  postRefunds: (params: {
      root?: any;
      args: MutationpostRefundsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postRefunds']>,
  postRefundsRefund: (params: {
      root?: any;
      args: MutationpostRefundsRefundArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postRefundsRefund']>,
  postReportingReportRuns: (params: {
      root?: any;
      args: MutationpostReportingReportRunsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postReportingReportRuns']>,
  postReviewsReviewApprove: (params: {
      root?: any;
      args: MutationpostReviewsReviewApproveArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postReviewsReviewApprove']>,
  postSetupIntents: (params: {
      root?: any;
      args: MutationpostSetupIntentsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postSetupIntents']>,
  postSetupIntentsIntent: (params: {
      root?: any;
      args: MutationpostSetupIntentsIntentArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postSetupIntentsIntent']>,
  postSetupIntentsIntentCancel: (params: {
      root?: any;
      args: MutationpostSetupIntentsIntentCancelArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postSetupIntentsIntentCancel']>,
  postSetupIntentsIntentConfirm: (params: {
      root?: any;
      args: MutationpostSetupIntentsIntentConfirmArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postSetupIntentsIntentConfirm']>,
  postSkus: (params: {
      root?: any;
      args: MutationpostSkusArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postSkus']>,
  postSkusId: (params: {
      root?: any;
      args: MutationpostSkusIdArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postSkusId']>,
  postSources: (params: {
      root?: any;
      args: MutationpostSourcesArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postSources']>,
  postSourcesSource: (params: {
      root?: any;
      args: MutationpostSourcesSourceArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postSourcesSource']>,
  postSourcesSourceVerify: (params: {
      root?: any;
      args: MutationpostSourcesSourceVerifyArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postSourcesSourceVerify']>,
  postSubscriptionItems: (params: {
      root?: any;
      args: MutationpostSubscriptionItemsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postSubscriptionItems']>,
  postSubscriptionItemsItem: (params: {
      root?: any;
      args: MutationpostSubscriptionItemsItemArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postSubscriptionItemsItem']>,
  postSubscriptionItemsSubscriptionItemUsageRecords: (params: {
      root?: any;
      args: MutationpostSubscriptionItemsSubscriptionItemUsageRecordsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postSubscriptionItemsSubscriptionItemUsageRecords']>,
  postSubscriptionSchedules: (params: {
      root?: any;
      args: MutationpostSubscriptionSchedulesArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postSubscriptionSchedules']>,
  postSubscriptionSchedulesSchedule: (params: {
      root?: any;
      args: MutationpostSubscriptionSchedulesScheduleArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postSubscriptionSchedulesSchedule']>,
  postSubscriptionSchedulesScheduleCancel: (params: {
      root?: any;
      args: MutationpostSubscriptionSchedulesScheduleCancelArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postSubscriptionSchedulesScheduleCancel']>,
  postSubscriptionSchedulesScheduleRelease: (params: {
      root?: any;
      args: MutationpostSubscriptionSchedulesScheduleReleaseArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postSubscriptionSchedulesScheduleRelease']>,
  postSubscriptions: (params: {
      root?: any;
      args: MutationpostSubscriptionsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postSubscriptions']>,
  postSubscriptionsSubscriptionExposedId: (params: {
      root?: any;
      args: MutationpostSubscriptionsSubscriptionExposedIdArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postSubscriptionsSubscriptionExposedId']>,
  postTaxRates: (params: {
      root?: any;
      args: MutationpostTaxRatesArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postTaxRates']>,
  postTaxRatesTaxRate: (params: {
      root?: any;
      args: MutationpostTaxRatesTaxRateArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postTaxRatesTaxRate']>,
  postTerminalConnectionTokens: (params: {
      root?: any;
      args: MutationpostTerminalConnectionTokensArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postTerminalConnectionTokens']>,
  postTerminalLocations: (params: {
      root?: any;
      args: MutationpostTerminalLocationsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postTerminalLocations']>,
  postTerminalLocationsLocation: (params: {
      root?: any;
      args: MutationpostTerminalLocationsLocationArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postTerminalLocationsLocation']>,
  postTerminalReaders: (params: {
      root?: any;
      args: MutationpostTerminalReadersArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postTerminalReaders']>,
  postTerminalReadersReader: (params: {
      root?: any;
      args: MutationpostTerminalReadersReaderArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postTerminalReadersReader']>,
  postTokens: (params: {
      root?: any;
      args: MutationpostTokensArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postTokens']>,
  postTopups: (params: {
      root?: any;
      args: MutationpostTopupsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postTopups']>,
  postTopupsTopup: (params: {
      root?: any;
      args: MutationpostTopupsTopupArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postTopupsTopup']>,
  postTopupsTopupCancel: (params: {
      root?: any;
      args: MutationpostTopupsTopupCancelArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postTopupsTopupCancel']>,
  postTransfers: (params: {
      root?: any;
      args: MutationpostTransfersArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postTransfers']>,
  postTransfersIdReversals: (params: {
      root?: any;
      args: MutationpostTransfersIdReversalsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postTransfersIdReversals']>,
  postTransfersTransfer: (params: {
      root?: any;
      args: MutationpostTransfersTransferArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postTransfersTransfer']>,
  postTransfersTransferReversalsId: (params: {
      root?: any;
      args: MutationpostTransfersTransferReversalsIdArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postTransfersTransferReversalsId']>,
  postWebhookEndpoints: (params: {
      root?: any;
      args: MutationpostWebhookEndpointsArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postWebhookEndpoints']>,
  postWebhookEndpointsWebhookEndpoint: (params: {
      root?: any;
      args: MutationpostWebhookEndpointsWebhookEndpointArgs;
      context: MeshContext;
      info: GraphQLResolveInfo;
      selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['postWebhookEndpointsWebhookEndpoint']>
};

export type SubscriptionStripeSdk = {

};

export type CountriesContext = {
      ["Countries"]: { Query: QueryCountriesSdk, Mutation: MutationCountriesSdk, Subscription: SubscriptionCountriesSdk },
    };

export type CartQlContext = {
      ["CartQL"]: { Query: QueryCartQlSdk, Mutation: MutationCartQlSdk, Subscription: SubscriptionCartQlSdk },
    };

export type StripeContext = {
      ["Stripe"]: { Query: QueryStripeSdk, Mutation: MutationStripeSdk, Subscription: SubscriptionStripeSdk },
    };

export type MeshContext = CountriesContext & CartQlContext & StripeContext & BaseMeshContext;


import { parse } from 'graphql';
import { getMesh } from '@graphql-mesh/runtime';
import { MeshStore, FsStoreStorageAdapter } from '@graphql-mesh/store';
import { cwd } from 'process';
import { relative, isAbsolute } from 'path';
import ExternalModule_0 from '@graphql-mesh/cache-inmemory-lru';
import ExternalModule_1 from '@graphql-mesh/graphql';
import ExternalModule_2 from '@graphql-mesh/openapi';
import ExternalModule_3 from '@graphql-mesh/merger-stitching';
import ExternalModule_4 from './sources/Countries/schema.graphql.js';
import ExternalModule_5 from './sources/CartQL/schema.graphql.js';
import ExternalModule_6 from './sources/Stripe/oas-schema.js';

const importedModules: Record<string, any> = {
  // @ts-ignore
  [`@graphql-mesh/cache-inmemory-lru`]: ExternalModule_0,
  // @ts-ignore
  [`@graphql-mesh/graphql`]: ExternalModule_1,
  // @ts-ignore
  [`@graphql-mesh/openapi`]: ExternalModule_2,
  // @ts-ignore
  [`@graphql-mesh/merger-stitching`]: ExternalModule_3,
  // @ts-ignore
  [`.mesh/sources/Countries/schema.graphql.js`]: ExternalModule_4,
  // @ts-ignore
  [`.mesh/sources/CartQL/schema.graphql.js`]: ExternalModule_5,
  // @ts-ignore
  [`.mesh/sources/Stripe/oas-schema.js`]: ExternalModule_6
};

const baseDir = cwd();

const syncImportFn = (moduleId: string) => {
  const relativeModuleId = isAbsolute(moduleId) ? relative(baseDir, moduleId) : moduleId;
  if (!(relativeModuleId in importedModules)) {
    throw new Error(`Cannot find module '${relativeModuleId}'.`);
  }
  return importedModules[relativeModuleId];
};
const importFn = async (moduleId: string) => syncImportFn(moduleId);

const rootStore = new MeshStore('.mesh', new FsStoreStorageAdapter({
  cwd: baseDir,
  importFn,
}), {
  readonly: true,
  validate: false
});

import { GetMeshOptions } from '@graphql-mesh/runtime';
import { YamlConfig } from '@graphql-mesh/types';
import MeshCache from '@graphql-mesh/cache-inmemory-lru';
import { PubSub } from 'graphql-subscriptions';
import { EventEmitter } from 'events';
import { DefaultLogger } from '@graphql-mesh/utils';
import GraphqlHandler from '@graphql-mesh/graphql'
import OpenapiHandler from '@graphql-mesh/openapi'
import StitchingMerger from '@graphql-mesh/merger-stitching';
import { resolveAdditionalResolvers } from '@graphql-mesh/utils';
export const rawConfig: YamlConfig.Config = {"sources":[{"name":"Countries","handler":{"graphql":{"endpoint":"https://countries.trevorblades.com"}}},{"name":"CartQL","handler":{"graphql":{"endpoint":"https://api.cartql.com"}}},{"name":"Stripe","handler":{"openapi":{"source":"https://raw.githubusercontent.com/stripe/openapi/master/openapi/spec3.json","baseUrl":"https://api.stripe.com","operationHeaders":{"Authorization":"Bearer {env.STRIPE_SECRET_KEY}"}}}}]}
export function getMeshOptions(): GetMeshOptions {
const cache = new MeshCache({
      ...(rawConfig.cache || {}),
      store: rootStore.child('cache'),
    } as any)
const eventEmitter = new (EventEmitter as any)({ captureRejections: true });
eventEmitter.setMaxListeners(Infinity);
const pubsub = new PubSub({ eventEmitter });
const sourcesStore = rootStore.child('sources');
const logger = new DefaultLogger('Mesh');
const sources = [];
const transforms = [];
const countriesTransforms = [];
const cartQlTransforms = [];
const stripeTransforms = [];
const additionalTypeDefs = [] as any[];
const countriesHandler = new GraphqlHandler({
              name: rawConfig.sources[0].name,
              config: rawConfig.sources[0].handler.graphql,
              baseDir,
              cache,
              pubsub,
              store: sourcesStore.child(rawConfig.sources[0].name),
              logger: logger.child(rawConfig.sources[0].name),
              importFn
            });
const cartQlHandler = new GraphqlHandler({
              name: rawConfig.sources[1].name,
              config: rawConfig.sources[1].handler.graphql,
              baseDir,
              cache,
              pubsub,
              store: sourcesStore.child(rawConfig.sources[1].name),
              logger: logger.child(rawConfig.sources[1].name),
              importFn
            });
const stripeHandler = new OpenapiHandler({
              name: rawConfig.sources[2].name,
              config: rawConfig.sources[2].handler.openapi,
              baseDir,
              cache,
              pubsub,
              store: sourcesStore.child(rawConfig.sources[2].name),
              logger: logger.child(rawConfig.sources[2].name),
              importFn
            });
sources.push({
          name: 'Countries',
          handler: countriesHandler,
          transforms: countriesTransforms
        })
sources.push({
          name: 'CartQL',
          handler: cartQlHandler,
          transforms: cartQlTransforms
        })
sources.push({
          name: 'Stripe',
          handler: stripeHandler,
          transforms: stripeTransforms
        })
const merger = new(StitchingMerger as any)({
        cache,
        pubsub,
        logger: logger.child('StitchingMerger'),
        store: rootStore.child('stitchingMerger')
      })
const additionalResolvers = resolveAdditionalResolvers(
      baseDir,
      rawConfig.additionalResolvers,
      syncImportFn,
      pubsub
  )
const liveQueryInvalidations = rawConfig.liveQueryInvalidations;

  return {
    sources,
    transforms,
    additionalTypeDefs,
    additionalResolvers,
    cache,
    pubsub,
    merger,
    logger,
    liveQueryInvalidations,
  };
}

export const documentsInSDL = /*#__PURE__*/ [];

export function getBuiltMesh() {
  const meshConfig = getMeshOptions();
  return getMesh(meshConfig);
}

export async function getMeshSDK() {
  const { sdkRequester } = await getBuiltMesh();
  return getSdk(sdkRequester);
}

export type Requester<C= {}> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R>
export function getSdk<C>(requester: Requester<C>) {
  return {

  };
}
export type Sdk = ReturnType<typeof getSdk>;