schema {
  query: Query
  mutation: Mutation
}

type Query {
  continents(filter: ContinentFilterInput): [Continent!]!
  continent(code: ID!): Continent
  countries(filter: CountryFilterInput): [Country!]!
  country(code: ID!): Country
  languages(filter: LanguageFilterInput): [Language!]!
  language(code: ID!): Language
  """Use this to get a cart by a custom ID. If a cart doesn't exist with this ID, it will be created for you."""
  cart(id: ID!, currency: CurrencyInput): Cart
  node(id: ID!, currency: CurrencyInput): Node
  """
  <p>Retrieves a 3D Secure object.</p>
  
  Equivalent to GET /v1/3d_secure/{three_d_secure}
  """
  get3dSecureThreeDSecure(
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    threeDSecure: String!
    v13dSecure2Input: JSON
  ): ThreeDSecure
  """
  <p>Retrieves the details of an account.</p>
  
  Equivalent to GET /v1/account
  """
  getAccount(
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    v1Account2Input: JSON
  ): Account3
  """
  <p>Retrieve a specified external account for a given account.</p>
  
  Equivalent to GET /v1/account/bank_accounts/{id}
  """
  getAccountBankAccountsId(
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    id: String!
    v1AccountBankAccountInput: JSON
  ): Polymorphic
  """
  <p>Returns a list of capabilities associated with the account. The capabilities are returned sorted by creation date, with the most recent capability appearing first.</p>
  
  Equivalent to GET /v1/account/capabilities
  """
  getAccountCapabilities(
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    v1AccountCapabilitiesInput: JSON
  ): ListAccountCapability
  """
  <p>Retrieves information about the specified Account Capability.</p>
  
  Equivalent to GET /v1/account/capabilities/{capability}
  """
  getAccountCapabilitiesCapability(
    capability: String!
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    v1AccountCapabilityInput: JSON
  ): Capability
  """
  <p>List external accounts for an account.</p>
  
  Equivalent to GET /v1/account/external_accounts
  """
  getAccountExternalAccounts(
    """A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list."""
    endingBefore: String
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    """A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10."""
    limit: Int
    """A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list."""
    startingAfter: String
    v1AccountExternalAccountsInput: JSON
  ): ExternalAccountList
  """
  <p>Retrieve a specified external account for a given account.</p>
  
  Equivalent to GET /v1/account/external_accounts/{id}
  """
  getAccountExternalAccountsId(
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    id: String!
    v1AccountExternalAccountInput: JSON
  ): Polymorphic
  """
  <p>Returns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first.</p>
  
  Equivalent to GET /v1/account/people
  """
  getAccountPeople(
    """A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list."""
    endingBefore: String
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    """A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10."""
    limit: Int
    """Filters on the list of people returned based on the person's relationship to the account's company."""
    relationship: Relationship2Input
    """A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list."""
    startingAfter: String
    v1AccountPeopleInput: JSON
  ): V1AccountPeople2
  """
  <p>Retrieves an existing person.</p>
  
  Equivalent to GET /v1/account/people/{person}
  """
  getAccountPeoplePerson(
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    person: String!
    v1AccountPersonInput: JSON
  ): Person
  """
  <p>Returns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first.</p>
  
  Equivalent to GET /v1/account/persons
  """
  getAccountPersons(
    """A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list."""
    endingBefore: String
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    """A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10."""
    limit: Int
    """Filters on the list of people returned based on the person's relationship to the account's company."""
    relationship: Relationship2Input
    """A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list."""
    startingAfter: String
    v1AccountPersonsInput: JSON
  ): V1AccountPersons2
  """
  <p>Retrieves an existing person.</p>
  
  Equivalent to GET /v1/account/persons/{person}
  """
  getAccountPersonsPerson(
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    person: String!
    v1AccountPersonInput: JSON
  ): Person
  """
  <p>Returns a list of accounts connected to your platform via <a href="/docs/connect">Connect</a>. If you’re not a platform, the list is empty.</p>
  
  Equivalent to GET /v1/accounts
  """
  getAccounts(
    created: JSON
    """A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list."""
    endingBefore: String
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    """A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10."""
    limit: Int
    """A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list."""
    startingAfter: String
    v1AccountsInput: JSON
  ): V1Accounts2
  """
  <p>Retrieves the details of an account.</p>
  
  Equivalent to GET /v1/accounts/{account}
  """
  getAccountsAccount(
    account: String!
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    v1Account2Input: JSON
  ): Account3
  """
  <p>Retrieve a specified external account for a given account.</p>
  
  Equivalent to GET /v1/accounts/{account}/bank_accounts/{id}
  """
  getAccountsAccountBankAccountsId(
    account: String!
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    id: String!
    v1AccountBankAccountInput: JSON
  ): Polymorphic
  """
  <p>Returns a list of capabilities associated with the account. The capabilities are returned sorted by creation date, with the most recent capability appearing first.</p>
  
  Equivalent to GET /v1/accounts/{account}/capabilities
  """
  getAccountsAccountCapabilities(
    account: String!
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    v1AccountCapabilitiesInput: JSON
  ): ListAccountCapability
  """
  <p>Retrieves information about the specified Account Capability.</p>
  
  Equivalent to GET /v1/accounts/{account}/capabilities/{capability}
  """
  getAccountsAccountCapabilitiesCapability(
    account: String!
    capability: String!
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    v1AccountCapabilityInput: JSON
  ): Capability
  """
  <p>List external accounts for an account.</p>
  
  Equivalent to GET /v1/accounts/{account}/external_accounts
  """
  getAccountsAccountExternalAccounts(
    account: String!
    """A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list."""
    endingBefore: String
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    """A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10."""
    limit: Int
    """A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list."""
    startingAfter: String
    v1AccountExternalAccountsInput: JSON
  ): ExternalAccountList
  """
  <p>Retrieve a specified external account for a given account.</p>
  
  Equivalent to GET /v1/accounts/{account}/external_accounts/{id}
  """
  getAccountsAccountExternalAccountsId(
    account: String!
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    id: String!
    v1AccountExternalAccountInput: JSON
  ): Polymorphic
  """
  <p>Returns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first.</p>
  
  Equivalent to GET /v1/accounts/{account}/people
  """
  getAccountsAccountPeople(
    account: String!
    """A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list."""
    endingBefore: String
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    """A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10."""
    limit: Int
    """Filters on the list of people returned based on the person's relationship to the account's company."""
    relationship: Relationship2Input
    """A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list."""
    startingAfter: String
    v1AccountPeopleInput: JSON
  ): V1AccountPeople2
  """
  <p>Retrieves an existing person.</p>
  
  Equivalent to GET /v1/accounts/{account}/people/{person}
  """
  getAccountsAccountPeoplePerson(
    account: String!
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    person: String!
    v1AccountPersonInput: JSON
  ): Person
  """
  <p>Returns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first.</p>
  
  Equivalent to GET /v1/accounts/{account}/persons
  """
  getAccountsAccountPersons(
    account: String!
    """A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list."""
    endingBefore: String
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    """A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10."""
    limit: Int
    """Filters on the list of people returned based on the person's relationship to the account's company."""
    relationship: Relationship2Input
    """A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list."""
    startingAfter: String
    v1AccountPersonsInput: JSON
  ): V1AccountPersons2
  """
  <p>Retrieves an existing person.</p>
  
  Equivalent to GET /v1/accounts/{account}/persons/{person}
  """
  getAccountsAccountPersonsPerson(
    account: String!
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    person: String!
    v1AccountPersonInput: JSON
  ): Person
  """
  <p>List apple pay domains.</p>
  
  Equivalent to GET /v1/apple_pay/domains
  """
  getApplePayDomains(
    domainName: String
    """A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list."""
    endingBefore: String
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    """A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10."""
    limit: Int
    """A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list."""
    startingAfter: String
    v1ApplePayDomainsInput: JSON
  ): ApplePayDomainList
  """
  <p>Retrieve an apple pay domain.</p>
  
  Equivalent to GET /v1/apple_pay/domains/{domain}
  """
  getApplePayDomainsDomain(
    domain: String!
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    v1ApplePayDomainInput: JSON
  ): ApplePayDomain
  """
  <p>Returns a list of application fees you’ve previously collected. The application fees are returned in sorted order, with the most recent fees appearing first.</p>
  
  Equivalent to GET /v1/application_fees
  """
  getApplicationFees(
    """Only return application fees for the charge specified by this charge ID."""
    charge: String
    created: JSON
    """A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list."""
    endingBefore: String
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    """A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10."""
    limit: Int
    """A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list."""
    startingAfter: String
    v1ApplicationFeesInput: JSON
  ): V1ApplicationFees2
  """
  <p>By default, you can see the 10 most recent refunds stored directly on the application fee object, but you can also retrieve details about a specific refund stored on the application fee.</p>
  
  Equivalent to GET /v1/application_fees/{fee}/refunds/{id}
  """
  getApplicationFeesFeeRefundsId(
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    fee: String!
    id: String!
    v1ApplicationFeesRefundInput: JSON
  ): FeeRefund
  """
  <p>Retrieves the details of an application fee that your account has collected. The same information is returned when refunding the application fee.</p>
  
  Equivalent to GET /v1/application_fees/{id}
  """
  getApplicationFeesId(
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    id: String!
    v1ApplicationFeeInput: JSON
  ): ApplicationFee
  """
  <p>You can see a list of the refunds belonging to a specific application fee. Note that the 10 most recent refunds are always available by default on the application fee object. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional refunds.</p>
  
  Equivalent to GET /v1/application_fees/{id}/refunds
  """
  getApplicationFeesIdRefunds(
    """A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list."""
    endingBefore: String
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    id: String!
    """A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10."""
    limit: Int
    """A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list."""
    startingAfter: String
    v1ApplicationFeeRefundsInput: JSON
  ): FeeRefundList
  """
  <p>Retrieves the current account balance, based on the authentication that was used to make the request.
   For a sample request, see <a href="/docs/connect/account-balances#accounting-for-negative-balances">Accounting for negative balances</a>.</p>
  
  Equivalent to GET /v1/balance
  """
  getBalance(
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    v1BalanceInput: JSON
  ): Balance
  """
  <p>Returns a list of transactions that have contributed to the Stripe account balance (e.g., charges, transfers, and so forth). The transactions are returned in sorted order, with the most recent transactions appearing first.</p>
  
  <p>Note that this endpoint was previously called “Balance history” and used the path <code>/v1/balance/history</code>.</p>
  
  Equivalent to GET /v1/balance/history
  """
  getBalanceHistory(
    availableOn: JSON
    created: JSON
    """Only return transactions in a certain currency. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."""
    currency: String
    """A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list."""
    endingBefore: String
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    """A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10."""
    limit: Int
    """For automatic Stripe payouts only, only returns transactions that were paid out on the specified payout ID."""
    payout: String
    """Only returns the original transaction."""
    source: String
    """A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list."""
    startingAfter: String
    """Only returns transactions of the given type. One of: `adjustment`, `advance`, `advance_funding`, `anticipation_repayment`, `application_fee`, `application_fee_refund`, `charge`, `connect_collection_transfer`, `contribution`, `issuing_authorization_hold`, `issuing_authorization_release`, `issuing_dispute`, `issuing_transaction`, `payment`, `payment_failure_refund`, `payment_refund`, `payout`, `payout_cancel`, `payout_failure`, `refund`, `refund_failure`, `reserve_transaction`, `reserved_funds`, `stripe_fee`, `stripe_fx_fee`, `tax_fee`, `topup`, `topup_reversal`, `transfer`, `transfer_cancel`, `transfer_failure`, or `transfer_refund`."""
    type: String
    v1BalanceHistoryInput: JSON
  ): BalanceTransactionsList
  """
  <p>Retrieves the balance transaction with the given ID.</p>
  
  <p>Note that this endpoint previously used the path <code>/v1/balance/history/:id</code>.</p>
  
  Equivalent to GET /v1/balance/history/{id}
  """
  getBalanceHistoryId(
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    id: String!
    v1BalanceHistoryInput: JSON
  ): BalanceTransaction3
  """
  <p>Returns a list of transactions that have contributed to the Stripe account balance (e.g., charges, transfers, and so forth). The transactions are returned in sorted order, with the most recent transactions appearing first.</p>
  
  <p>Note that this endpoint was previously called “Balance history” and used the path <code>/v1/balance/history</code>.</p>
  
  Equivalent to GET /v1/balance_transactions
  """
  getBalanceTransactions(
    availableOn: JSON
    created: JSON
    """Only return transactions in a certain currency. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."""
    currency: String
    """A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list."""
    endingBefore: String
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    """A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10."""
    limit: Int
    """For automatic Stripe payouts only, only returns transactions that were paid out on the specified payout ID."""
    payout: String
    """Only returns the original transaction."""
    source: String
    """A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list."""
    startingAfter: String
    """Only returns transactions of the given type. One of: `adjustment`, `advance`, `advance_funding`, `anticipation_repayment`, `application_fee`, `application_fee_refund`, `charge`, `connect_collection_transfer`, `contribution`, `issuing_authorization_hold`, `issuing_authorization_release`, `issuing_dispute`, `issuing_transaction`, `payment`, `payment_failure_refund`, `payment_refund`, `payout`, `payout_cancel`, `payout_failure`, `refund`, `refund_failure`, `reserve_transaction`, `reserved_funds`, `stripe_fee`, `stripe_fx_fee`, `tax_fee`, `topup`, `topup_reversal`, `transfer`, `transfer_cancel`, `transfer_failure`, or `transfer_refund`."""
    type: String
    v1BalanceTransactionsInput: JSON
  ): BalanceTransactionsList
  """
  <p>Retrieves the balance transaction with the given ID.</p>
  
  <p>Note that this endpoint previously used the path <code>/v1/balance/history/:id</code>.</p>
  
  Equivalent to GET /v1/balance_transactions/{id}
  """
  getBalanceTransactionsId(
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    id: String!
    v1BalanceTransactionInput: JSON
  ): BalanceTransaction3
  """
  <p>Returns a list of configurations that describe the functionality of the customer portal.</p>
  
  Equivalent to GET /v1/billing_portal/configurations
  """
  getBillingPortalConfigurations(
    """Only return configurations that are active or inactive (e.g., pass `true` to only list active configurations)."""
    active: Boolean
    """A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list."""
    endingBefore: String
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    """Only return the default or non-default configurations (e.g., pass `true` to only list the default configuration)."""
    isDefault: Boolean
    """A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10."""
    limit: Int
    """A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list."""
    startingAfter: String
    v1BillingPortalConfigurationsInput: JSON
  ): V1BillingPortalConfigurations2
  """
  <p>Retrieves a configuration that describes the functionality of the customer portal.</p>
  
  Equivalent to GET /v1/billing_portal/configurations/{configuration}
  """
  getBillingPortalConfigurationsConfiguration(
    configuration: String!
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    v1BillingPortalConfigurationInput: JSON
  ): BillingPortalConfiguration
  """
  <p>Returns a list of your receivers. Receivers are returned sorted by creation date, with the most recently created receivers appearing first.</p>
  
  Equivalent to GET /v1/bitcoin/receivers
  """
  getBitcoinReceivers(
    """Filter for active receivers."""
    active: Boolean
    """A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list."""
    endingBefore: String
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    """Filter for filled receivers."""
    filled: Boolean
    """A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10."""
    limit: Int
    """A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list."""
    startingAfter: String
    """Filter for receivers with uncaptured funds."""
    uncapturedFunds: Boolean
    v1BitcoinReceiversInput: JSON
  ): V1BitcoinReceivers2
  """
  <p>Retrieves the Bitcoin receiver with the given ID.</p>
  
  Equivalent to GET /v1/bitcoin/receivers/{id}
  """
  getBitcoinReceiversId(
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    id: String!
    v1BitcoinReceiverInput: JSON
  ): BitcoinReceiver
  """
  <p>List bitcoin transacitons for a given receiver.</p>
  
  Equivalent to GET /v1/bitcoin/receivers/{receiver}/transactions
  """
  getBitcoinReceiversReceiverTransactions(
    """Only return transactions for the customer specified by this customer ID."""
    customer: String
    """A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list."""
    endingBefore: String
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    """A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10."""
    limit: Int
    receiver: String!
    """A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list."""
    startingAfter: String
    v1BitcoinReceiverTransactionsInput: JSON
  ): BitcoinTransactionList
  """
  <p>List bitcoin transacitons for a given receiver.</p>
  
  Equivalent to GET /v1/bitcoin/transactions
  """
  getBitcoinTransactions(
    """Only return transactions for the customer specified by this customer ID."""
    customer: String
    """A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list."""
    endingBefore: String
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    """A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10."""
    limit: Int
    receiver: String
    """A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list."""
    startingAfter: String
    v1BitcoinTransactionsInput: JSON
  ): BitcoinTransactionList
  """
  <p>Returns a list of charges you’ve previously created. The charges are returned in sorted order, with the most recent charges appearing first.</p>
  
  Equivalent to GET /v1/charges
  """
  getCharges(
    created: JSON
    """Only return charges for the customer specified by this customer ID."""
    customer: String
    """A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list."""
    endingBefore: String
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    """A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10."""
    limit: Int
    """Only return charges that were created by the PaymentIntent specified by this PaymentIntent ID."""
    paymentIntent: String
    """A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list."""
    startingAfter: String
    """Only return charges for this transfer group."""
    transferGroup: String
    v1ChargesInput: JSON
  ): V1Charges2
  """
  <p>Retrieves the details of a charge that has previously been created. Supply the unique charge ID that was returned from your previous request, and Stripe will return the corresponding charge information. The same information is returned when creating or refunding the charge.</p>
  
  Equivalent to GET /v1/charges/{charge}
  """
  getChargesCharge(
    charge: String!
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    v1ChargeInput: JSON
  ): Charge2
  """
  <p>Retrieve a dispute for a specified charge.</p>
  
  Equivalent to GET /v1/charges/{charge}/dispute
  """
  getChargesChargeDispute(
    charge: String!
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    v1ChargeDisputeInput: JSON
  ): Dispute
  """
  <p>You can see a list of the refunds belonging to a specific charge. Note that the 10 most recent refunds are always available by default on the charge object. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional refunds.</p>
  
  Equivalent to GET /v1/charges/{charge}/refunds
  """
  getChargesChargeRefunds(
    charge: String!
    """A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list."""
    endingBefore: String
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    """A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10."""
    limit: Int
    """A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list."""
    startingAfter: String
    v1ChargeRefundsInput: JSON
  ): RefundList2
  """
  <p>Retrieves the details of an existing refund.</p>
  
  Equivalent to GET /v1/charges/{charge}/refunds/{refund}
  """
  getChargesChargeRefundsRefund(
    charge: String!
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    refund: String!
    v1ChargeRefund2Input: JSON
  ): Refund
  """
  <p>Returns a list of Checkout Sessions.</p>
  
  Equivalent to GET /v1/checkout/sessions
  """
  getCheckoutSessions(
    """A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list."""
    endingBefore: String
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    """A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10."""
    limit: Int
    """Only return the Checkout Session for the PaymentIntent specified."""
    paymentIntent: String
    """A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list."""
    startingAfter: String
    """Only return the Checkout Session for the subscription specified."""
    subscription: String
    v1CheckoutSessionsInput: JSON
  ): PaymentPagesCheckoutSessionList
  """
  <p>Retrieves a Session object.</p>
  
  Equivalent to GET /v1/checkout/sessions/{session}
  """
  getCheckoutSessionsSession(
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    session: String!
    v1CheckoutSessionInput: JSON
  ): CheckoutSession
  """
  <p>When retrieving a Checkout Session, there is an includable <strong>line_items</strong> property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
  
  Equivalent to GET /v1/checkout/sessions/{session}/line_items
  """
  getCheckoutSessionsSessionLineItems(
    """A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list."""
    endingBefore: String
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    """A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10."""
    limit: Int
    session: String!
    """A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list."""
    startingAfter: String
    v1CheckoutSessionLineItemsInput: JSON
  ): PaymentPagesCheckoutSessionListLineItems
  """
  <p>Lists all Country Spec objects available in the API.</p>
  
  Equivalent to GET /v1/country_specs
  """
  getCountrySpecs(
    """A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list."""
    endingBefore: String
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    """A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10."""
    limit: Int
    """A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list."""
    startingAfter: String
    v1CountrySpecsInput: JSON
  ): V1CountrySpecs2
  """
  <p>Returns a Country Spec for a given Country code.</p>
  
  Equivalent to GET /v1/country_specs/{country}
  """
  getCountrySpecsCountry(
    country: String!
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    v1CountrySpecsInput: JSON
  ): CountrySpec
  """
  <p>Returns a list of your coupons.</p>
  
  Equivalent to GET /v1/coupons
  """
  getCoupons(
    """A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options."""
    created: JSON
    """A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list."""
    endingBefore: String
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    """A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10."""
    limit: Int
    """A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list."""
    startingAfter: String
    v1CouponsInput: JSON
  ): V1Coupons2
  """
  <p>Retrieves the coupon with the given ID.</p>
  
  Equivalent to GET /v1/coupons/{coupon}
  """
  getCouponsCoupon(
    coupon: String!
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    v1CouponInput: JSON
  ): Coupon
  """
  <p>Returns a list of credit notes.</p>
  
  Equivalent to GET /v1/credit_notes
  """
  getCreditNotes(
    """Only return credit notes for the customer specified by this customer ID."""
    customer: String
    """A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list."""
    endingBefore: String
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    """Only return credit notes for the invoice specified by this invoice ID."""
    invoice: String
    """A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10."""
    limit: Int
    """A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list."""
    startingAfter: String
    v1CreditNotesInput: JSON
  ): CreditNotesList
  """
  <p>When retrieving a credit note, you’ll get a <strong>lines</strong> property containing the the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
  
  Equivalent to GET /v1/credit_notes/{credit_note}/lines
  """
  getCreditNotesCreditNoteLines(
    creditNote: String!
    """A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list."""
    endingBefore: String
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    """A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10."""
    limit: Int
    """A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list."""
    startingAfter: String
    v1CreditNoteLinesInput: JSON
  ): CreditNoteLinesList
  """
  <p>Retrieves the credit note object with the given identifier.</p>
  
  Equivalent to GET /v1/credit_notes/{id}
  """
  getCreditNotesId(
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    id: String!
    v1CreditNoteInput: JSON
  ): CreditNote
  """
  <p>Get a preview of a credit note without creating it.</p>
  
  Equivalent to GET /v1/credit_notes/preview
  """
  getCreditNotesPreview(
    """The integer amount in %s representing the total amount of the credit note."""
    amount: Int
    """The integer amount in %s representing the amount to credit the customer's balance, which will be automatically applied to their next invoice."""
    creditAmount: Int
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    """ID of the invoice."""
    invoice: String!
    """Line items that make up the credit note."""
    lines: [Lines3ListItemInput]
    """The credit note's memo appears on the credit note PDF."""
    memo: String
    """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
    metadata: JSON
    """The integer amount in %s representing the amount that is credited outside of Stripe."""
    outOfBandAmount: Int
    """Reason for issuing this credit note, one of `duplicate`, `fraudulent`, `order_change`, or `product_unsatisfactory`"""
    reason: Reason18
    """ID of an existing refund to link this credit note to."""
    refund: String
    """The integer amount in %s representing the amount to refund. If set, a refund will be created for the charge associated with the invoice."""
    refundAmount: Int
    v1CreditNotesPreviewInput: JSON
  ): CreditNote
  """
  <p>When retrieving a credit note preview, you’ll get a <strong>lines</strong> property containing the first handful of those items. This URL you can retrieve the full (paginated) list of line items.</p>
  
  Equivalent to GET /v1/credit_notes/preview/lines
  """
  getCreditNotesPreviewLines(
    """The integer amount in %s representing the total amount of the credit note."""
    amount: Int
    """The integer amount in %s representing the amount to credit the customer's balance, which will be automatically applied to their next invoice."""
    creditAmount: Int
    """A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list."""
    endingBefore: String
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    """ID of the invoice."""
    invoice: String!
    """A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10."""
    limit: Int
    """Line items that make up the credit note."""
    lines: [Lines3ListItemInput]
    """The credit note's memo appears on the credit note PDF."""
    memo: String
    """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
    metadata: JSON
    """The integer amount in %s representing the amount that is credited outside of Stripe."""
    outOfBandAmount: Int
    """Reason for issuing this credit note, one of `duplicate`, `fraudulent`, `order_change`, or `product_unsatisfactory`"""
    reason: Reason18
    """ID of an existing refund to link this credit note to."""
    refund: String
    """The integer amount in %s representing the amount to refund. If set, a refund will be created for the charge associated with the invoice."""
    refundAmount: Int
    """A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list."""
    startingAfter: String
    v1CreditNotesPreviewLinesInput: JSON
  ): CreditNoteLinesList
  """
  <p>Returns a list of your customers. The customers are returned sorted by creation date, with the most recent customers appearing first.</p>
  
  Equivalent to GET /v1/customers
  """
  getCustomers(
    created: JSON
    """A case-sensitive filter on the list based on the customer's `email` field. The value must be a string."""
    email: String
    """A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list."""
    endingBefore: String
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    """A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10."""
    limit: Int
    """A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list."""
    startingAfter: String
    v1CustomersInput: JSON
  ): V1Customers2
  """
  <p>Retrieves the details of an existing customer. You need only supply the unique customer identifier that was returned upon customer creation.</p>
  
  Equivalent to GET /v1/customers/{customer}
  """
  getCustomersCustomer(
    customer: String!
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    v1CustomerInput: JSON
  ): V1Customer2
  """
  <p>Returns a list of transactions that updated the customer’s <a href="/docs/billing/customer/balance">balances</a>.</p>
  
  Equivalent to GET /v1/customers/{customer}/balance_transactions
  """
  getCustomersCustomerBalanceTransactions(
    customer: String!
    """A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list."""
    endingBefore: String
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    """A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10."""
    limit: Int
    """A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list."""
    startingAfter: String
    v1CustomerBalanceTransactionsInput: JSON
  ): CustomerBalanceTransactionList
  """
  <p>Retrieves a specific customer balance transaction that updated the customer’s <a href="/docs/billing/customer/balance">balances</a>.</p>
  
  Equivalent to GET /v1/customers/{customer}/balance_transactions/{transaction}
  """
  getCustomersCustomerBalanceTransactionsTransaction(
    customer: String!
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    transaction: String!
    v1CustomerBalanceTransactionsInput: JSON
  ): CustomerBalanceTransaction2
  """
  <p>You can see a list of the bank accounts belonging to a Customer. Note that the 10 most recent sources are always available by default on the Customer. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional bank accounts.</p>
  
  Equivalent to GET /v1/customers/{customer}/bank_accounts
  """
  getCustomersCustomerBankAccounts(
    customer: String!
    """A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list."""
    endingBefore: String
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    """A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10."""
    limit: Int
    """A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list."""
    startingAfter: String
    v1CustomerBankAccountsInput: JSON
  ): BankAccountList
  """
  <p>By default, you can see the 10 most recent sources stored on a Customer directly on the object, but you can also retrieve details about a specific bank account stored on the Stripe account.</p>
  
  Equivalent to GET /v1/customers/{customer}/bank_accounts/{id}
  """
  getCustomersCustomerBankAccountsId(
    customer: String!
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    id: String!
    v1CustomerBankAccount3Input: JSON
  ): BankAccount7
  """
  <p>You can see a list of the cards belonging to a customer.
  Note that the 10 most recent sources are always available on the <code>Customer</code> object.
  If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional cards.</p>
  
  Equivalent to GET /v1/customers/{customer}/cards
  """
  getCustomersCustomerCards(
    customer: String!
    """A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list."""
    endingBefore: String
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    """A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10."""
    limit: Int
    """A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list."""
    startingAfter: String
    v1CustomerCardsInput: JSON
  ): CardList
  """
  <p>You can always see the 10 most recent cards directly on a customer; this method lets you retrieve details about a specific card stored on the customer.</p>
  
  Equivalent to GET /v1/customers/{customer}/cards/{id}
  """
  getCustomersCustomerCardsId(
    customer: String!
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    id: String!
    v1CustomerCard3Input: JSON
  ): Card2
  """
  
  
  Equivalent to GET /v1/customers/{customer}/discount
  """
  getCustomersCustomerDiscount(
    customer: String!
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    v1CustomerDiscountInput: JSON
  ): Discount
  """
  <p>List sources for a specified customer.</p>
  
  Equivalent to GET /v1/customers/{customer}/sources
  """
  getCustomersCustomerSources(
    customer: String!
    """A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list."""
    endingBefore: String
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    """A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10."""
    limit: Int
    """Filter sources according to a particular object type."""
    object: String
    """A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list."""
    startingAfter: String
    v1CustomerSourcesInput: JSON
  ): ApmsSourcesSourceList
  """
  <p>Retrieve a specified source for a given customer.</p>
  
  Equivalent to GET /v1/customers/{customer}/sources/{id}
  """
  getCustomersCustomerSourcesId(
    customer: String!
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    id: String!
    v1CustomerSource3Input: JSON
  ): PaymentSource
  """
  <p>You can see a list of the customer’s active subscriptions. Note that the 10 most recent active subscriptions are always available by default on the customer object. If you need more than those 10, you can use the limit and starting_after parameters to page through additional subscriptions.</p>
  
  Equivalent to GET /v1/customers/{customer}/subscriptions
  """
  getCustomersCustomerSubscriptions(
    customer: String!
    """A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list."""
    endingBefore: String
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    """A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10."""
    limit: Int
    """A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list."""
    startingAfter: String
    v1CustomerSubscriptionsInput: JSON
  ): SubscriptionList
  """
  <p>Retrieves the subscription with the given ID.</p>
  
  Equivalent to GET /v1/customers/{customer}/subscriptions/{subscription_exposed_id}
  """
  getCustomersCustomerSubscriptionsSubscriptionExposedId(
    customer: String!
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    subscriptionExposedId: String!
    v1CustomerSubscription2Input: JSON
  ): Subscription5
  """
  
  
  Equivalent to GET /v1/customers/{customer}/subscriptions/{subscription_exposed_id}/discount
  """
  getCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount(
    customer: String!
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    subscriptionExposedId: String!
    v1CustomerSubscriptionDiscountInput: JSON
  ): Discount
  """
  <p>Returns a list of tax IDs for a customer.</p>
  
  Equivalent to GET /v1/customers/{customer}/tax_ids
  """
  getCustomersCustomerTaxIds(
    customer: String!
    """A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list."""
    endingBefore: String
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    """A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10."""
    limit: Int
    """A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list."""
    startingAfter: String
    v1CustomerTaxIdsInput: JSON
  ): TaxIDsList2
  """
  <p>Retrieves the <code>TaxID</code> object with the given identifier.</p>
  
  Equivalent to GET /v1/customers/{customer}/tax_ids/{id}
  """
  getCustomersCustomerTaxIdsId(
    customer: String!
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    id: String!
    v1CustomerTaxIdInput: JSON
  ): TaxId3
  """
  <p>Returns a list of your disputes.</p>
  
  Equivalent to GET /v1/disputes
  """
  getDisputes(
    """Only return disputes associated to the charge specified by this charge ID."""
    charge: String
    created: JSON
    """A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list."""
    endingBefore: String
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    """A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10."""
    limit: Int
    """Only return disputes associated to the PaymentIntent specified by this PaymentIntent ID."""
    paymentIntent: String
    """A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list."""
    startingAfter: String
    v1DisputesInput: JSON
  ): V1Disputes2
  """
  <p>Retrieves the dispute with the given ID.</p>
  
  Equivalent to GET /v1/disputes/{dispute}
  """
  getDisputesDispute(
    dispute: String!
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    v1DisputeInput: JSON
  ): Dispute
  """
  <p>List events, going back up to 30 days. Each event data is rendered according to Stripe API version at its creation time, specified in <a href="/docs/api/events/object">event object</a> <code>api_version</code> attribute (not according to your current Stripe API version or <code>Stripe-Version</code> header).</p>
  
  Equivalent to GET /v1/events
  """
  getEvents(
    created: JSON
    """Filter events by whether all webhooks were successfully delivered. If false, events which are still pending or have failed all delivery attempts to a webhook endpoint will be returned."""
    deliverySuccess: Boolean
    """A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list."""
    endingBefore: String
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    """A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10."""
    limit: Int
    """A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list."""
    startingAfter: String
    """A string containing a specific event name, or group of events using * as a wildcard. The list will be filtered to include only events with a matching event property."""
    type: String
    """An array of up to 20 strings containing specific event names. The list will be filtered to include only events with a matching event property. You may pass either `type` or `types`, but not both."""
    types: [String]
    v1EventsInput: JSON
  ): NotificationEventList
  """
  <p>Retrieves the details of an event. Supply the unique identifier of the event, which you might have received in a webhook.</p>
  
  Equivalent to GET /v1/events/{id}
  """
  getEventsId(
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    id: String!
    v1EventInput: JSON
  ): Event
  """
  <p>Returns a list of objects that contain the rates at which foreign currencies are converted to one another. Only shows the currencies for which Stripe supports.</p>
  
  Equivalent to GET /v1/exchange_rates
  """
  getExchangeRates(
    """A cursor for use in pagination. `ending_before` is the currency that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with the exchange rate for currency X your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list."""
    endingBefore: String
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    """A limit on the number of objects to be returned. Limit can range between 1 and total number of supported payout currencies, and the default is the max."""
    limit: Int
    """A cursor for use in pagination. `starting_after` is the currency that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with the exchange rate for currency X, your subsequent call can include `starting_after=X` in order to fetch the next page of the list."""
    startingAfter: String
    v1ExchangeRatesInput: JSON
  ): V1ExchangeRates2
  """
  <p>Retrieves the exchange rates from the given currency to every supported currency.</p>
  
  Equivalent to GET /v1/exchange_rates/{rate_id}
  """
  getExchangeRatesRateId(
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    rateId: String!
    v1ExchangeRateInput: JSON
  ): ExchangeRate2
  """
  <p>Returns a list of file links.</p>
  
  Equivalent to GET /v1/file_links
  """
  getFileLinks(
    created: JSON
    """A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list."""
    endingBefore: String
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    """Filter links by their expiration status. By default, all links are returned."""
    expired: Boolean
    """Only return links for the given file."""
    file: String
    """A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10."""
    limit: Int
    """A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list."""
    startingAfter: String
    v1FileLinksInput: JSON
  ): V1FileLinks2
  """
  <p>Retrieves the file link with the given ID.</p>
  
  Equivalent to GET /v1/file_links/{link}
  """
  getFileLinksLink(
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    link: String!
    v1FileLinksInput: JSON
  ): FileLink
  """
  <p>Returns a list of the files that your account has access to. The files are returned sorted by creation date, with the most recently created files appearing first.</p>
  
  Equivalent to GET /v1/files
  """
  getFiles(
    created: JSON
    """A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list."""
    endingBefore: String
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    """A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10."""
    limit: Int
    """The file purpose to filter queries by. If none is provided, files will not be filtered by purpose."""
    purpose: Purpose2
    """A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list."""
    startingAfter: String
    v1FilesInput: JSON
  ): V1Files2
  """
  <p>Retrieves the details of an existing file object. Supply the unique file ID from a file, and Stripe will return the corresponding file object. To access file contents, see the <a href="/docs/file-upload#download-file-contents">File Upload Guide</a>.</p>
  
  Equivalent to GET /v1/files/{file}
  """
  getFilesFile(
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    file: String!
    v1FileInput: JSON
  ): File3
  """
  <p>List all verification reports.</p>
  
  Equivalent to GET /v1/identity/verification_reports
  """
  getIdentityVerificationReports(
    created: JSON
    """A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list."""
    endingBefore: String
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    """A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10."""
    limit: Int
    """A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list."""
    startingAfter: String
    """Only return VerificationReports of this type"""
    type: Type68
    v1IdentityVerificationReportsInput: JSON
    """Only return VerificationReports created by this VerificationSession ID. It is allowed to provide a VerificationIntent ID."""
    verificationSession: String
  ): V1IdentityVerificationReports2
  """
  <p>Retrieves an existing VerificationReport</p>
  
  Equivalent to GET /v1/identity/verification_reports/{report}
  """
  getIdentityVerificationReportsReport(
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    report: String!
    v1IdentityVerificationReportsInput: JSON
  ): IdentityVerificationReport
  """
  <p>Returns a list of VerificationSessions</p>
  
  Equivalent to GET /v1/identity/verification_sessions
  """
  getIdentityVerificationSessions(
    created: JSON
    """A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list."""
    endingBefore: String
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    """A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10."""
    limit: Int
    """A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list."""
    startingAfter: String
    """Only return VerificationSessions with this status. [Learn more about the lifecycle of sessions](https://stripe.com/docs/identity/how-sessions-work)."""
    status: Status55
    v1IdentityVerificationSessionsInput: JSON
  ): V1IdentityVerificationSessions2
  """
  <p>Retrieves the details of a VerificationSession that was previously created.</p>
  
  <p>When the session status is <code>requires_input</code>, you can use this method to retrieve a valid
  <code>client_secret</code> or <code>url</code> to allow re-submission.</p>
  
  Equivalent to GET /v1/identity/verification_sessions/{session}
  """
  getIdentityVerificationSessionsSession(
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    session: String!
    v1IdentityVerificationSessionsInput: JSON
  ): IdentityVerificationSession
  """
  <p>Returns a list of your invoice items. Invoice items are returned sorted by creation date, with the most recently created invoice items appearing first.</p>
  
  Equivalent to GET /v1/invoiceitems
  """
  getInvoiceitems(
    created: JSON
    """The identifier of the customer whose invoice items to return. If none is provided, all invoice items will be returned."""
    customer: String
    """A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list."""
    endingBefore: String
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    """Only return invoice items belonging to this invoice. If none is provided, all invoice items will be returned. If specifying an invoice, no customer identifier is needed."""
    invoice: String
    """A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10."""
    limit: Int
    """Set to `true` to only show pending invoice items, which are not yet attached to any invoices. Set to `false` to only show invoice items already attached to invoices. If unspecified, no filter is applied."""
    pending: Boolean
    """A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list."""
    startingAfter: String
    v1InvoiceitemsInput: JSON
  ): V1Invoiceitems2
  """
  <p>Retrieves the invoice item with the given ID.</p>
  
  Equivalent to GET /v1/invoiceitems/{invoiceitem}
  """
  getInvoiceitemsInvoiceitem(
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    invoiceitem: String!
    v1InvoiceitemInput: JSON
  ): Invoiceitem
  """
  <p>You can list all invoices, or list the invoices for a specific customer. The invoices are returned sorted by creation date, with the most recently created invoices appearing first.</p>
  
  Equivalent to GET /v1/invoices
  """
  getInvoices(
    """The collection method of the invoice to retrieve. Either `charge_automatically` or `send_invoice`."""
    collectionMethod: CollectionMethod9
    created: JSON
    """Only return invoices for the customer specified by this customer ID."""
    customer: String
    dueDate: JSON
    """A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list."""
    endingBefore: String
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    """A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10."""
    limit: Int
    """A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list."""
    startingAfter: String
    """The status of the invoice, one of `draft`, `open`, `paid`, `uncollectible`, or `void`. [Learn more](https://stripe.com/docs/billing/invoices/workflow#workflow-overview)"""
    status: Status56
    """Only return invoices for the subscription specified by this subscription ID."""
    subscription: String
    v1InvoicesInput: JSON
  ): InvoicesList
  """
  <p>Retrieves the invoice with the given ID.</p>
  
  Equivalent to GET /v1/invoices/{invoice}
  """
  getInvoicesInvoice(
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    invoice: String!
    v1InvoiceInput: JSON
  ): Invoice11
  """
  <p>When retrieving an invoice, you’ll get a <strong>lines</strong> property containing the total count of line items and the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
  
  Equivalent to GET /v1/invoices/{invoice}/lines
  """
  getInvoicesInvoiceLines(
    """A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list."""
    endingBefore: String
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    invoice: String!
    """A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10."""
    limit: Int
    """A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list."""
    startingAfter: String
    v1InvoiceLinesInput: JSON
  ): InvoiceLinesList2
  """
  <p>At any time, you can preview the upcoming invoice for a customer. This will show you all the charges that are pending, including subscription renewal charges, invoice item charges, etc. It will also show you any discounts that are applicable to the invoice.</p>
  
  <p>Note that when you are viewing an upcoming invoice, you are simply viewing a preview – the invoice has not yet been created. As such, the upcoming invoice will not show up in invoice listing calls, and you cannot use the API to pay or edit the invoice. If you want to change the amount that your customer will be billed, you can add, remove, or update pending invoice items, or update the customer’s discount.</p>
  
  <p>You can preview the effects of updating a subscription, including a preview of what proration will take place. To ensure that the actual proration is calculated exactly the same as the previewed proration, you should pass a <code>proration_date</code> parameter when doing the actual subscription update. The value passed in should be the same as the <code>subscription_proration_date</code> returned on the upcoming invoice resource. The recommended way to get only the prorations being previewed is to consider only proration line items where <code>period[start]</code> is equal to the <code>subscription_proration_date</code> on the upcoming invoice resource.</p>
  
  Equivalent to GET /v1/invoices/upcoming
  """
  getInvoicesUpcoming(
    """Settings for automatic tax lookup for this invoice preview."""
    automaticTax: AutomaticTax6Input
    """The code of the coupon to apply. If `subscription` or `subscription_items` is provided, the invoice returned will preview updating or creating a subscription with that coupon. Otherwise, it will preview applying that coupon to the customer for the next upcoming invoice from among the customer's subscriptions. The invoice can be previewed without a coupon by passing this value as an empty string."""
    coupon: String
    """The identifier of the customer whose upcoming invoice you'd like to retrieve."""
    customer: String
    """Details about the customer you want to invoice or overrides for an existing customer."""
    customerDetails: CustomerDetails2Input
    """The coupons to redeem into discounts for the invoice preview. If not specified, inherits the discount from the customer or subscription. Pass an empty string to avoid inheriting any discounts. To preview the upcoming invoice for a subscription that hasn't been created, use `coupon` instead."""
    discounts: JSON
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    """List of invoice items to add or update in the upcoming invoice preview."""
    invoiceItems: [InvoiceItemsListItemInput]
    """The identifier of the unstarted schedule whose upcoming invoice you'd like to retrieve. Cannot be used with subscription or subscription fields."""
    schedule: String
    """The identifier of the subscription for which you'd like to retrieve the upcoming invoice. If not provided, but a `subscription_items` is provided, you will preview creating a subscription with those items. If neither `subscription` nor `subscription_items` is provided, you will retrieve the next upcoming invoice from among the customer's subscriptions."""
    subscription: String
    """For new subscriptions, a future timestamp to anchor the subscription's [billing cycle](https://stripe.com/docs/subscriptions/billing-cycle). This is used to determine the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices. For existing subscriptions, the value can only be set to `now` or `unchanged`."""
    subscriptionBillingCycleAnchor: JSON
    """Timestamp indicating when the subscription should be scheduled to cancel. Will prorate if within the current period and prorations have been enabled using `proration_behavior`."""
    subscriptionCancelAt: JSON
    """Boolean indicating whether this subscription should cancel at the end of the current period."""
    subscriptionCancelAtPeriodEnd: Boolean
    """This simulates the subscription being canceled or expired immediately."""
    subscriptionCancelNow: Boolean
    """If provided, the invoice returned will preview updating or creating a subscription with these default tax rates. The default tax rates will apply to any line item that does not have `tax_rates` set."""
    subscriptionDefaultTaxRates: JSON
    """A list of up to 20 subscription items, each with an attached price."""
    subscriptionItems: [SubscriptionItems2ListItemInput]
    """
    Determines how to handle [prorations](https://stripe.com/docs/subscriptions/billing-cycle#prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item's `quantity` changes. Valid values are `create_prorations`, `none`, or `always_invoice`.
    
    Passing `create_prorations` will cause proration invoice items to be created when applicable. These proration items will only be invoiced immediately under [certain conditions](https://stripe.com/docs/subscriptions/upgrading-downgrading#immediate-payment). In order to always invoice immediately for prorations, pass `always_invoice`.
    
    Prorations can be disabled by passing `none`.
    """
    subscriptionProrationBehavior: SubscriptionProrationBehavior
    """If previewing an update to a subscription, and doing proration, `subscription_proration_date` forces the proration to be calculated as though the update was done at the specified time. The time given must be within the current subscription period, and cannot be before the subscription was on its current plan. If set, `subscription`, and one of `subscription_items`, or `subscription_trial_end` are required. Also, `subscription_proration_behavior` cannot be set to 'none'."""
    subscriptionProrationDate: Int
    """Date a subscription is intended to start (can be future or past)"""
    subscriptionStartDate: Int
    """If provided, the invoice returned will preview updating or creating a subscription with that trial end. If set, one of `subscription_items` or `subscription` is required."""
    subscriptionTrialEnd: JSON
    """Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `subscription_trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `subscription_trial_end` is not allowed."""
    subscriptionTrialFromPlan: Boolean
    v1InvoicesUpcomingInput: JSON
  ): Invoice11
  """
  <p>When retrieving an upcoming invoice, you’ll get a <strong>lines</strong> property containing the total count of line items and the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
  
  Equivalent to GET /v1/invoices/upcoming/lines
  """
  getInvoicesUpcomingLines(
    """Settings for automatic tax lookup for this invoice preview."""
    automaticTax: AutomaticTax6Input
    """The code of the coupon to apply. If `subscription` or `subscription_items` is provided, the invoice returned will preview updating or creating a subscription with that coupon. Otherwise, it will preview applying that coupon to the customer for the next upcoming invoice from among the customer's subscriptions. The invoice can be previewed without a coupon by passing this value as an empty string."""
    coupon: String
    """The identifier of the customer whose upcoming invoice you'd like to retrieve."""
    customer: String
    """Details about the customer you want to invoice or overrides for an existing customer."""
    customerDetails: CustomerDetails2Input
    """The coupons to redeem into discounts for the invoice preview. If not specified, inherits the discount from the customer or subscription. Pass an empty string to avoid inheriting any discounts. To preview the upcoming invoice for a subscription that hasn't been created, use `coupon` instead."""
    discounts: JSON
    """A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list."""
    endingBefore: String
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    """List of invoice items to add or update in the upcoming invoice preview."""
    invoiceItems: [InvoiceItemsListItemInput]
    """A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10."""
    limit: Int
    """The identifier of the unstarted schedule whose upcoming invoice you'd like to retrieve. Cannot be used with subscription or subscription fields."""
    schedule: String
    """A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list."""
    startingAfter: String
    """The identifier of the subscription for which you'd like to retrieve the upcoming invoice. If not provided, but a `subscription_items` is provided, you will preview creating a subscription with those items. If neither `subscription` nor `subscription_items` is provided, you will retrieve the next upcoming invoice from among the customer's subscriptions."""
    subscription: String
    """For new subscriptions, a future timestamp to anchor the subscription's [billing cycle](https://stripe.com/docs/subscriptions/billing-cycle). This is used to determine the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices. For existing subscriptions, the value can only be set to `now` or `unchanged`."""
    subscriptionBillingCycleAnchor: JSON
    """Timestamp indicating when the subscription should be scheduled to cancel. Will prorate if within the current period and prorations have been enabled using `proration_behavior`."""
    subscriptionCancelAt: JSON
    """Boolean indicating whether this subscription should cancel at the end of the current period."""
    subscriptionCancelAtPeriodEnd: Boolean
    """This simulates the subscription being canceled or expired immediately."""
    subscriptionCancelNow: Boolean
    """If provided, the invoice returned will preview updating or creating a subscription with these default tax rates. The default tax rates will apply to any line item that does not have `tax_rates` set."""
    subscriptionDefaultTaxRates: JSON
    """A list of up to 20 subscription items, each with an attached price."""
    subscriptionItems: [SubscriptionItems2ListItemInput]
    """
    Determines how to handle [prorations](https://stripe.com/docs/subscriptions/billing-cycle#prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item's `quantity` changes. Valid values are `create_prorations`, `none`, or `always_invoice`.
    
    Passing `create_prorations` will cause proration invoice items to be created when applicable. These proration items will only be invoiced immediately under [certain conditions](https://stripe.com/docs/subscriptions/upgrading-downgrading#immediate-payment). In order to always invoice immediately for prorations, pass `always_invoice`.
    
    Prorations can be disabled by passing `none`.
    """
    subscriptionProrationBehavior: SubscriptionProrationBehavior
    """If previewing an update to a subscription, and doing proration, `subscription_proration_date` forces the proration to be calculated as though the update was done at the specified time. The time given must be within the current subscription period, and cannot be before the subscription was on its current plan. If set, `subscription`, and one of `subscription_items`, or `subscription_trial_end` are required. Also, `subscription_proration_behavior` cannot be set to 'none'."""
    subscriptionProrationDate: Int
    """Date a subscription is intended to start (can be future or past)"""
    subscriptionStartDate: Int
    """If provided, the invoice returned will preview updating or creating a subscription with that trial end. If set, one of `subscription_items` or `subscription` is required."""
    subscriptionTrialEnd: JSON
    """Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `subscription_trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `subscription_trial_end` is not allowed."""
    subscriptionTrialFromPlan: Boolean
    v1InvoicesUpcomingLinesInput: JSON
  ): InvoiceLinesList2
  """
  <p>Returns a list of issuer fraud records.</p>
  
  Equivalent to GET /v1/issuer_fraud_records
  """
  getIssuerFraudRecords(
    """Only return issuer fraud records for the charge specified by this charge ID."""
    charge: String
    """A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list."""
    endingBefore: String
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    """A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10."""
    limit: Int
    """A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list."""
    startingAfter: String
    v1IssuerFraudRecordsInput: JSON
  ): RadarIssuerFraudRecordList
  """
  <p>Retrieves the details of an issuer fraud record that has previously been created. </p>
  
  <p>Please refer to the <a href="#issuer_fraud_record_object">issuer fraud record</a> object reference for more details.</p>
  
  Equivalent to GET /v1/issuer_fraud_records/{issuer_fraud_record}
  """
  getIssuerFraudRecordsIssuerFraudRecord(
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    issuerFraudRecord: String!
    v1IssuerFraudRecordInput: JSON
  ): IssuerFraudRecord
  """
  <p>Returns a list of Issuing <code>Authorization</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
  
  Equivalent to GET /v1/issuing/authorizations
  """
  getIssuingAuthorizations(
    """Only return authorizations that belong to the given card."""
    card: String
    """Only return authorizations that belong to the given cardholder."""
    cardholder: String
    """Only return authorizations that were created during the given date interval."""
    created: JSON
    """A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list."""
    endingBefore: String
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    """A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10."""
    limit: Int
    """A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list."""
    startingAfter: String
    """Only return authorizations with the given status. One of `pending`, `closed`, or `reversed`."""
    status: Status57
    v1IssuingAuthorizationsInput: JSON
  ): V1IssuingAuthorizations2
  """
  <p>Retrieves an Issuing <code>Authorization</code> object.</p>
  
  Equivalent to GET /v1/issuing/authorizations/{authorization}
  """
  getIssuingAuthorizationsAuthorization(
    authorization: String!
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    v1IssuingAuthorizationInput: JSON
  ): IssuingAuthorization
  """
  <p>Returns a list of Issuing <code>Cardholder</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
  
  Equivalent to GET /v1/issuing/cardholders
  """
  getIssuingCardholders(
    """Only return cardholders that were created during the given date interval."""
    created: JSON
    """Only return cardholders that have the given email address."""
    email: String
    """A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list."""
    endingBefore: String
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    """A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10."""
    limit: Int
    """Only return cardholders that have the given phone number."""
    phoneNumber: String
    """A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list."""
    startingAfter: String
    """Only return cardholders that have the given status. One of `active`, `inactive`, or `blocked`."""
    status: Status58
    """Only return cardholders that have the given type. One of `individual` or `company`."""
    type: Type69
    v1IssuingCardholdersInput: JSON
  ): V1IssuingCardholders2
  """
  <p>Retrieves an Issuing <code>Cardholder</code> object.</p>
  
  Equivalent to GET /v1/issuing/cardholders/{cardholder}
  """
  getIssuingCardholdersCardholder(
    cardholder: String!
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    v1IssuingCardholderInput: JSON
  ): IssuingCardholder
  """
  <p>Returns a list of Issuing <code>Card</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
  
  Equivalent to GET /v1/issuing/cards
  """
  getIssuingCards(
    """Only return cards belonging to the Cardholder with the provided ID."""
    cardholder: String
    """Only return cards that were issued during the given date interval."""
    created: JSON
    """A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list."""
    endingBefore: String
    """Only return cards that have the given expiration month."""
    expMonth: Int
    """Only return cards that have the given expiration year."""
    expYear: Int
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    """Only return cards that have the given last four digits."""
    last4: String
    """A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10."""
    limit: Int
    """A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list."""
    startingAfter: String
    """Only return cards that have the given status. One of `active`, `inactive`, or `canceled`."""
    status: Status59
    """Only return cards that have the given type. One of `virtual` or `physical`."""
    type: Type70
    v1IssuingCardsInput: JSON
  ): V1IssuingCards2
  """
  <p>Retrieves an Issuing <code>Card</code> object.</p>
  
  Equivalent to GET /v1/issuing/cards/{card}
  """
  getIssuingCardsCard(
    card: String!
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    v1IssuingCardInput: JSON
  ): IssuingCard2
  """
  <p>Returns a list of Issuing <code>Dispute</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
  
  Equivalent to GET /v1/issuing/disputes
  """
  getIssuingDisputes(
    """Select Issuing disputes that were created during the given date interval."""
    created: JSON
    """A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list."""
    endingBefore: String
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    """A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10."""
    limit: Int
    """A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list."""
    startingAfter: String
    """Select Issuing disputes with the given status."""
    status: Status60
    """Select the Issuing dispute for the given transaction."""
    transaction: String
    v1IssuingDisputesInput: JSON
  ): IssuingDisputeList
  """
  <p>Retrieves an Issuing <code>Dispute</code> object.</p>
  
  Equivalent to GET /v1/issuing/disputes/{dispute}
  """
  getIssuingDisputesDispute(
    dispute: String!
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    v1IssuingDisputeInput: JSON
  ): IssuingDispute
  """
  <p>Returns a list of Issuing <code>Settlement</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
  
  Equivalent to GET /v1/issuing/settlements
  """
  getIssuingSettlements(
    """Only return issuing settlements that were created during the given date interval."""
    created: JSON
    """A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list."""
    endingBefore: String
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    """A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10."""
    limit: Int
    """A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list."""
    startingAfter: String
    v1IssuingSettlementsInput: JSON
  ): V1IssuingSettlements2
  """
  <p>Retrieves an Issuing <code>Settlement</code> object.</p>
  
  Equivalent to GET /v1/issuing/settlements/{settlement}
  """
  getIssuingSettlementsSettlement(
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    settlement: String!
    v1IssuingSettlementInput: JSON
  ): IssuingSettlement
  """
  <p>Returns a list of Issuing <code>Transaction</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
  
  Equivalent to GET /v1/issuing/transactions
  """
  getIssuingTransactions(
    """Only return transactions that belong to the given card."""
    card: String
    """Only return transactions that belong to the given cardholder."""
    cardholder: String
    """Only return transactions that were created during the given date interval."""
    created: JSON
    """A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list."""
    endingBefore: String
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    """A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10."""
    limit: Int
    """A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list."""
    startingAfter: String
    """Only return transactions that have the given type. One of `capture` or `refund`."""
    type: Type71
    v1IssuingTransactionsInput: JSON
  ): V1IssuingTransactions2
  """
  <p>Retrieves an Issuing <code>Transaction</code> object.</p>
  
  Equivalent to GET /v1/issuing/transactions/{transaction}
  """
  getIssuingTransactionsTransaction(
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    transaction: String!
    v1IssuingTransactionInput: JSON
  ): IssuingTransaction
  """
  <p>Retrieves a Mandate object.</p>
  
  Equivalent to GET /v1/mandates/{mandate}
  """
  getMandatesMandate(
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    mandate: String!
    v1MandateInput: JSON
  ): Mandate6
  """
  <p>Returns a list of your order returns. The returns are returned sorted by creation date, with the most recently created return appearing first.</p>
  
  Equivalent to GET /v1/order_returns
  """
  getOrderReturns(
    """Date this return was created."""
    created: JSON
    """A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list."""
    endingBefore: String
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    """A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10."""
    limit: Int
    """The order to retrieve returns for."""
    order: String
    """A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list."""
    startingAfter: String
    v1OrderReturnsInput: JSON
  ): V1OrderReturns2
  """
  <p>Retrieves the details of an existing order return. Supply the unique order ID from either an order return creation request or the order return list, and Stripe will return the corresponding order information.</p>
  
  Equivalent to GET /v1/order_returns/{id}
  """
  getOrderReturnsId(
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    id: String!
    v1OrderReturnInput: JSON
  ): OrderReturn
  """
  <p>Returns a list of your orders. The orders are returned sorted by creation date, with the most recently created orders appearing first.</p>
  
  Equivalent to GET /v1/orders
  """
  getOrders(
    """Date this order was created."""
    created: JSON
    """Only return orders for the given customer."""
    customer: String
    """A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list."""
    endingBefore: String
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    """Only return orders with the given IDs."""
    ids: [String]
    """A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10."""
    limit: Int
    """A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list."""
    startingAfter: String
    """Only return orders that have the given status. One of `created`, `paid`, `fulfilled`, or `refunded`."""
    status: String
    """Filter orders based on when they were paid, fulfilled, canceled, or returned."""
    statusTransitions: StatusTransitions2Input
    """Only return orders with the given upstream order IDs."""
    upstreamIds: [String]
    v1OrdersInput: JSON
  ): V1Orders2
  """
  <p>Retrieves the details of an existing order. Supply the unique order ID from either an order creation request or the order list, and Stripe will return the corresponding order information.</p>
  
  Equivalent to GET /v1/orders/{id}
  """
  getOrdersId(
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    id: String!
    v1OrderInput: JSON
  ): Order3
  """
  <p>Returns a list of PaymentIntents.</p>
  
  Equivalent to GET /v1/payment_intents
  """
  getPaymentIntents(
    """A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options."""
    created: JSON
    """Only return PaymentIntents for the customer specified by this customer ID."""
    customer: String
    """A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list."""
    endingBefore: String
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    """A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10."""
    limit: Int
    """A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list."""
    startingAfter: String
    v1PaymentIntentsInput: JSON
  ): PaymentFlowsPaymentIntentList
  """
  <p>Retrieves the details of a PaymentIntent that has previously been created. </p>
  
  <p>Client-side retrieval using a publishable key is allowed when the <code>client_secret</code> is provided in the query string. </p>
  
  <p>When retrieved with a publishable key, only a subset of properties will be returned. Please refer to the <a href="#payment_intent_object">payment intent</a> object reference for more details.</p>
  
  Equivalent to GET /v1/payment_intents/{intent}
  """
  getPaymentIntentsIntent(
    """The client secret of the PaymentIntent. Required if a publishable key is used to retrieve the source."""
    clientSecret: String
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    intent: String!
    v1PaymentIntentsInput: JSON
  ): PaymentIntent7
  """
  <p>Returns a list of PaymentMethods for a given Customer</p>
  
  Equivalent to GET /v1/payment_methods
  """
  getPaymentMethods(
    """The ID of the customer whose PaymentMethods will be retrieved."""
    customer: String!
    """A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list."""
    endingBefore: String
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    """A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10."""
    limit: Int
    """A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list."""
    startingAfter: String
    """A required filter on the list, based on the object `type` field."""
    type: Type72!
    v1PaymentMethodsInput: JSON
  ): PaymentFlowsPaymentMethodList
  """
  <p>Retrieves a PaymentMethod object.</p>
  
  Equivalent to GET /v1/payment_methods/{payment_method}
  """
  getPaymentMethodsPaymentMethod(
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    paymentMethod: String!
    v1PaymentMethodInput: JSON
  ): PaymentMethod3
  """
  <p>Returns a list of existing payouts sent to third-party bank accounts or that Stripe has sent you. The payouts are returned in sorted order, with the most recently created payouts appearing first.</p>
  
  Equivalent to GET /v1/payouts
  """
  getPayouts(
    arrivalDate: JSON
    created: JSON
    """The ID of an external account - only return payouts sent to this external account."""
    destination: String
    """A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list."""
    endingBefore: String
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    """A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10."""
    limit: Int
    """A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list."""
    startingAfter: String
    """Only return payouts that have the given status: `pending`, `paid`, `failed`, or `canceled`."""
    status: String
    v1PayoutsInput: JSON
  ): PayoutList
  """
  <p>Retrieves the details of an existing payout. Supply the unique payout ID from either a payout creation request or the payout list, and Stripe will return the corresponding payout information.</p>
  
  Equivalent to GET /v1/payouts/{payout}
  """
  getPayoutsPayout(
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    payout: String!
    v1PayoutInput: JSON
  ): Payout
  """
  <p>Returns a list of your plans.</p>
  
  Equivalent to GET /v1/plans
  """
  getPlans(
    """Only return plans that are active or inactive (e.g., pass `false` to list all inactive plans)."""
    active: Boolean
    """A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options."""
    created: JSON
    """A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list."""
    endingBefore: String
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    """A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10."""
    limit: Int
    """Only return plans for the given product."""
    product: String
    """A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list."""
    startingAfter: String
    v1PlansInput: JSON
  ): PlanList
  """
  <p>Retrieves the plan with the given ID.</p>
  
  Equivalent to GET /v1/plans/{plan}
  """
  getPlansPlan(
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    plan: String!
    v1PlanInput: JSON
  ): Plan4
  """
  <p>Returns a list of your prices.</p>
  
  Equivalent to GET /v1/prices
  """
  getPrices(
    """Only return prices that are active or inactive (e.g., pass `false` to list all inactive prices)."""
    active: Boolean
    """A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options."""
    created: JSON
    """Only return prices for the given currency."""
    currency: String
    """A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list."""
    endingBefore: String
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    """A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10."""
    limit: Int
    """Only return the price with these lookup_keys, if any exist."""
    lookupKeys: [String]
    """Only return prices for the given product."""
    product: String
    """Only return prices with these recurring fields."""
    recurring: Recurring4Input
    """A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list."""
    startingAfter: String
    """Only return prices of type `recurring` or `one_time`."""
    type: Type73
    v1PricesInput: JSON
  ): PriceList
  """
  <p>Retrieves the price with the given ID.</p>
  
  Equivalent to GET /v1/prices/{price}
  """
  getPricesPrice(
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    price: String!
    v1PriceInput: JSON
  ): Price3
  """
  <p>Returns a list of your products. The products are returned sorted by creation date, with the most recently created products appearing first.</p>
  
  Equivalent to GET /v1/products
  """
  getProducts(
    """Only return products that are active or inactive (e.g., pass `false` to list all inactive products)."""
    active: Boolean
    """Only return products that were created during the given date interval."""
    created: JSON
    """A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list."""
    endingBefore: String
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    """Only return products with the given IDs."""
    ids: [String]
    """A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10."""
    limit: Int
    """Only return products that can be shipped (i.e., physical, not digital products)."""
    shippable: Boolean
    """A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list."""
    startingAfter: String
    """Only return products with the given url."""
    url: String
    v1ProductsInput: JSON
  ): V1Products2
  """
  <p>Retrieves the details of an existing product. Supply the unique product ID from either a product creation request or the product list, and Stripe will return the corresponding product information.</p>
  
  Equivalent to GET /v1/products/{id}
  """
  getProductsId(
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    id: String!
    v1ProductInput: JSON
  ): Product14
  """
  <p>Returns a list of your promotion codes.</p>
  
  Equivalent to GET /v1/promotion_codes
  """
  getPromotionCodes(
    """Filter promotion codes by whether they are active."""
    active: Boolean
    """Only return promotion codes that have this case-insensitive code."""
    code: String
    """Only return promotion codes for this coupon."""
    coupon: String
    """A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options."""
    created: JSON
    """Only return promotion codes that are restricted to this customer."""
    customer: String
    """A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list."""
    endingBefore: String
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    """A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10."""
    limit: Int
    """A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list."""
    startingAfter: String
    v1PromotionCodesInput: JSON
  ): V1PromotionCodes2
  """
  <p>Retrieves the promotion code with the given ID.</p>
  
  Equivalent to GET /v1/promotion_codes/{promotion_code}
  """
  getPromotionCodesPromotionCode(
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    promotionCode: String!
    v1PromotionCodeInput: JSON
  ): PromotionCode11
  """
  <p>Returns a list of your quotes.</p>
  
  Equivalent to GET /v1/quotes
  """
  getQuotes(
    """The ID of the customer whose quotes will be retrieved."""
    customer: String
    """A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list."""
    endingBefore: String
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    """A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10."""
    limit: Int
    """A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list."""
    startingAfter: String
    """The status of the quote."""
    status: Status63
    v1QuotesInput: JSON
  ): V1Quotes2
  """
  <p>Retrieves the quote with the given ID.</p>
  
  Equivalent to GET /v1/quotes/{quote}
  """
  getQuotesQuote(
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    quote: String!
    v1QuoteInput: JSON
  ): Quote2
  """
  <p>When retrieving a quote, there is an includable <strong>upfront.line_items</strong> property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of upfront line items.</p>
  
  Equivalent to GET /v1/quotes/{quote}/computed_upfront_line_items
  """
  getQuotesQuoteComputedUpfrontLineItems(
    """A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list."""
    endingBefore: String
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    """A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10."""
    limit: Int
    quote: String!
    """A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list."""
    startingAfter: String
    v1QuoteComputedUpfrontLineItemsInput: JSON
  ): QuotesResourceListLineItems2
  """
  <p>When retrieving a quote, there is an includable <strong>line_items</strong> property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
  
  Equivalent to GET /v1/quotes/{quote}/line_items
  """
  getQuotesQuoteLineItems(
    """A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list."""
    endingBefore: String
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    """A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10."""
    limit: Int
    quote: String!
    """A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list."""
    startingAfter: String
    v1QuoteLineItemsInput: JSON
  ): QuotesResourceListLineItems2
  """
  <p>Download the PDF for a finalized quote</p>
  
  Equivalent to GET /v1/quotes/{quote}/pdf
  """
  getQuotesQuotePdf(
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    quote: String!
    v1QuotePdfInput: JSON
  ): String
  """
  <p>Returns a list of early fraud warnings.</p>
  
  Equivalent to GET /v1/radar/early_fraud_warnings
  """
  getRadarEarlyFraudWarnings(
    """Only return early fraud warnings for the charge specified by this charge ID."""
    charge: String
    """A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list."""
    endingBefore: String
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    """A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10."""
    limit: Int
    """Only return early fraud warnings for charges that were created by the PaymentIntent specified by this PaymentIntent ID."""
    paymentIntent: String
    """A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list."""
    startingAfter: String
    v1RadarEarlyFraudWarningsInput: JSON
  ): RadarEarlyFraudWarningList
  """
  <p>Retrieves the details of an early fraud warning that has previously been created. </p>
  
  <p>Please refer to the <a href="#early_fraud_warning_object">early fraud warning</a> object reference for more details.</p>
  
  Equivalent to GET /v1/radar/early_fraud_warnings/{early_fraud_warning}
  """
  getRadarEarlyFraudWarningsEarlyFraudWarning(
    earlyFraudWarning: String!
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    v1RadarEarlyFraudWarningInput: JSON
  ): RadarEarlyFraudWarning
  """
  <p>Returns a list of <code>ValueListItem</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
  
  Equivalent to GET /v1/radar/value_list_items
  """
  getRadarValueListItems(
    created: JSON
    """A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list."""
    endingBefore: String
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    """A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10."""
    limit: Int
    """A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list."""
    startingAfter: String
    v1RadarValueListItemsInput: JSON
    """Return items belonging to the parent list whose value matches the specified value (using an "is like" match)."""
    value: String
    """Identifier for the parent value list this item belongs to."""
    valueList: String!
  ): V1RadarValueListItems2
  """
  <p>Retrieves a <code>ValueListItem</code> object.</p>
  
  Equivalent to GET /v1/radar/value_list_items/{item}
  """
  getRadarValueListItemsItem(
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    item: String!
    v1RadarValueListItemsInput: JSON
  ): RadarValueListItem
  """
  <p>Returns a list of <code>ValueList</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
  
  Equivalent to GET /v1/radar/value_lists
  """
  getRadarValueLists(
    """The alias used to reference the value list when writing rules."""
    alias: String
    """A value contained within a value list - returns all value lists containing this value."""
    contains: String
    created: JSON
    """A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list."""
    endingBefore: String
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    """A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10."""
    limit: Int
    """A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list."""
    startingAfter: String
    v1RadarValueListsInput: JSON
  ): V1RadarValueLists2
  """
  <p>Retrieves a <code>ValueList</code> object.</p>
  
  Equivalent to GET /v1/radar/value_lists/{value_list}
  """
  getRadarValueListsValueList(
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    v1RadarValueListInput: JSON
    valueList: String!
  ): RadarValueList
  """
  <p>Returns a list of your recipients. The recipients are returned sorted by creation date, with the most recently created recipients appearing first.</p>
  
  Equivalent to GET /v1/recipients
  """
  getRecipients(
    created: JSON
    """A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list."""
    endingBefore: String
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    """A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10."""
    limit: Int
    """A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list."""
    startingAfter: String
    type: Type74
    v1RecipientsInput: JSON
    """Only return recipients that are verified or unverified."""
    verified: Boolean
  ): V1Recipients2
  """
  <p>Retrieves the details of an existing recipient. You need only supply the unique recipient identifier that was returned upon recipient creation.</p>
  
  Equivalent to GET /v1/recipients/{id}
  """
  getRecipientsId(
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    id: String!
    v1RecipientInput: JSON
  ): V1Recipient2
  """
  <p>Returns a list of all refunds you’ve previously created. The refunds are returned in sorted order, with the most recent refunds appearing first. For convenience, the 10 most recent refunds are always available by default on the charge object.</p>
  
  Equivalent to GET /v1/refunds
  """
  getRefunds(
    """Only return refunds for the charge specified by this charge ID."""
    charge: String
    created: JSON
    """A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list."""
    endingBefore: String
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    """A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10."""
    limit: Int
    """Only return refunds for the PaymentIntent specified by this ID."""
    paymentIntent: String
    """A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list."""
    startingAfter: String
    v1RefundsInput: JSON
  ): V1Refunds2
  """
  <p>Retrieves the details of an existing refund.</p>
  
  Equivalent to GET /v1/refunds/{refund}
  """
  getRefundsRefund(
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    refund: String!
    v1RefundInput: JSON
  ): Refund
  """
  <p>Returns a list of Report Runs, with the most recent appearing first.</p>
  
  Equivalent to GET /v1/reporting/report_runs
  """
  getReportingReportRuns(
    created: JSON
    """A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list."""
    endingBefore: String
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    """A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10."""
    limit: Int
    """A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list."""
    startingAfter: String
    v1ReportingReportRunsInput: JSON
  ): V1ReportingReportRuns2
  """
  <p>Retrieves the details of an existing Report Run.</p>
  
  Equivalent to GET /v1/reporting/report_runs/{report_run}
  """
  getReportingReportRunsReportRun(
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    reportRun: String!
    v1ReportingReportRunInput: JSON
  ): ReportingReportRun
  """
  <p>Returns a full list of Report Types.</p>
  
  Equivalent to GET /v1/reporting/report_types
  """
  getReportingReportTypes(
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    v1ReportingReportTypesInput: JSON
  ): FinancialReportingFinanceReportTypeList
  """
  <p>Retrieves the details of a Report Type. (Certain report types require a <a href="https://stripe.com/docs/keys#test-live-modes">live-mode API key</a>.)</p>
  
  Equivalent to GET /v1/reporting/report_types/{report_type}
  """
  getReportingReportTypesReportType(
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    reportType: String!
    v1ReportingReportTypeInput: JSON
  ): ReportingReportType
  """
  <p>Returns a list of <code>Review</code> objects that have <code>open</code> set to <code>true</code>. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p>
  
  Equivalent to GET /v1/reviews
  """
  getReviews(
    created: JSON
    """A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list."""
    endingBefore: String
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    """A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10."""
    limit: Int
    """A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list."""
    startingAfter: String
    v1ReviewsInput: JSON
  ): V1Reviews2
  """
  <p>Retrieves a <code>Review</code> object.</p>
  
  Equivalent to GET /v1/reviews/{review}
  """
  getReviewsReview(
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    review: String!
    v1ReviewInput: JSON
  ): Review3
  """
  <p>Returns a list of SetupAttempts associated with a provided SetupIntent.</p>
  
  Equivalent to GET /v1/setup_attempts
  """
  getSetupAttempts(
    """
    A filter on the list, based on the object `created` field. The value
    can be a string with an integer Unix timestamp, or it can be a
    dictionary with a number of different query options.
    """
    created: JSON
    """A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list."""
    endingBefore: String
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    """A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10."""
    limit: Int
    """
    Only return SetupAttempts created by the SetupIntent specified by
    this ID.
    """
    setupIntent: String!
    """A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list."""
    startingAfter: String
    v1SetupAttemptsInput: JSON
  ): PaymentFlowsSetupIntentSetupAttemptList
  """
  <p>Returns a list of SetupIntents.</p>
  
  Equivalent to GET /v1/setup_intents
  """
  getSetupIntents(
    """A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options."""
    created: JSON
    """Only return SetupIntents for the customer specified by this customer ID."""
    customer: String
    """A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list."""
    endingBefore: String
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    """A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10."""
    limit: Int
    """Only return SetupIntents associated with the specified payment method."""
    paymentMethod: String
    """A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list."""
    startingAfter: String
    v1SetupIntentsInput: JSON
  ): PaymentFlowsSetupIntentList
  """
  <p>Retrieves the details of a SetupIntent that has previously been created. </p>
  
  <p>Client-side retrieval using a publishable key is allowed when the <code>client_secret</code> is provided in the query string. </p>
  
  <p>When retrieved with a publishable key, only a subset of properties will be returned. Please refer to the <a href="#setup_intent_object">SetupIntent</a> object reference for more details.</p>
  
  Equivalent to GET /v1/setup_intents/{intent}
  """
  getSetupIntentsIntent(
    """The client secret of the SetupIntent. Required if a publishable key is used to retrieve the SetupIntent."""
    clientSecret: String
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    intent: String!
    v1SetupIntentsInput: JSON
  ): SetupIntent2
  """
  <p>Returns a list of scheduled query runs.</p>
  
  Equivalent to GET /v1/sigma/scheduled_query_runs
  """
  getSigmaScheduledQueryRuns(
    """A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list."""
    endingBefore: String
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    """A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10."""
    limit: Int
    """A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list."""
    startingAfter: String
    v1SigmaScheduledQueryRunsInput: JSON
  ): V1SigmaScheduledQueryRuns2
  """
  <p>Retrieves the details of an scheduled query run.</p>
  
  Equivalent to GET /v1/sigma/scheduled_query_runs/{scheduled_query_run}
  """
  getSigmaScheduledQueryRunsScheduledQueryRun(
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    scheduledQueryRun: String!
    v1SigmaScheduledQueryRunInput: JSON
  ): ScheduledQueryRun
  """
  <p>Returns a list of your SKUs. The SKUs are returned sorted by creation date, with the most recently created SKUs appearing first.</p>
  
  Equivalent to GET /v1/skus
  """
  getSkus(
    """Only return SKUs that are active or inactive (e.g., pass `false` to list all inactive products)."""
    active: Boolean
    """Only return SKUs that have the specified key-value pairs in this partially constructed dictionary. Can be specified only if `product` is also supplied. For instance, if the associated product has attributes `["color", "size"]`, passing in `attributes[color]=red` returns all the SKUs for this product that have `color` set to `red`."""
    attributes: JSON
    """A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list."""
    endingBefore: String
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    """Only return SKUs with the given IDs."""
    ids: [String]
    """Only return SKUs that are either in stock or out of stock (e.g., pass `false` to list all SKUs that are out of stock). If no value is provided, all SKUs are returned."""
    inStock: Boolean
    """A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10."""
    limit: Int
    """The ID of the product whose SKUs will be retrieved. Must be a product with type `good`."""
    product: String
    """A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list."""
    startingAfter: String
    v1SkusInput: JSON
  ): V1Skus2
  """
  <p>Retrieves the details of an existing SKU. Supply the unique SKU identifier from either a SKU creation request or from the product, and Stripe will return the corresponding SKU information.</p>
  
  Equivalent to GET /v1/skus/{id}
  """
  getSkusId(
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    id: String!
    v1SkusInput: JSON
  ): V1Skus4
  """
  <p>Retrieves an existing source object. Supply the unique source ID from a source creation request and Stripe will return the corresponding up-to-date source object information.</p>
  
  Equivalent to GET /v1/sources/{source}
  """
  getSourcesSource(
    """The client secret of the source. Required if a publishable key is used to retrieve the source."""
    clientSecret: String
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    source: String!
    v1SourceInput: JSON
  ): Source12
  """
  <p>Retrieves a new Source MandateNotification.</p>
  
  Equivalent to GET /v1/sources/{source}/mandate_notifications/{mandate_notification}
  """
  getSourcesSourceMandateNotificationsMandateNotification(
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    mandateNotification: String!
    source: String!
    v1SourceMandateNotificationInput: JSON
  ): SourceMandateNotification
  """
  <p>List source transactions for a given source.</p>
  
  Equivalent to GET /v1/sources/{source}/source_transactions
  """
  getSourcesSourceSourceTransactions(
    """A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list."""
    endingBefore: String
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    """A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10."""
    limit: Int
    source: String!
    """A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list."""
    startingAfter: String
    v1SourceSourceTransactionsInput: JSON
  ): ApmsSourcesSourceTransactionList
  """
  <p>Retrieve an existing source transaction object. Supply the unique source ID from a source creation request and the source transaction ID and Stripe will return the corresponding up-to-date source object information.</p>
  
  Equivalent to GET /v1/sources/{source}/source_transactions/{source_transaction}
  """
  getSourcesSourceSourceTransactionsSourceTransaction(
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    source: String!
    sourceTransaction: String!
    v1SourceSourceTransactionInput: JSON
  ): SourceTransaction
  """
  <p>Returns a list of your subscription items for a given subscription.</p>
  
  Equivalent to GET /v1/subscription_items
  """
  getSubscriptionItems(
    """A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list."""
    endingBefore: String
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    """A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10."""
    limit: Int
    """A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list."""
    startingAfter: String
    """The ID of the subscription whose items will be retrieved."""
    subscription: String!
    v1SubscriptionItemsInput: JSON
  ): V1SubscriptionItems2
  """
  <p>Retrieves the subscription item with the given ID.</p>
  
  Equivalent to GET /v1/subscription_items/{item}
  """
  getSubscriptionItemsItem(
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    item: String!
    v1SubscriptionItemsInput: JSON
  ): SubscriptionItem
  """
  <p>For the specified subscription item, returns a list of summary objects. Each object in the list provides usage information that’s been summarized from multiple usage records and over a subscription billing period (e.g., 15 usage records in the month of September).</p>
  
  <p>The list is sorted in reverse-chronological order (newest first). The first list item represents the most current usage period that hasn’t ended yet. Since new usage records can still be added, the returned summary information for the subscription item’s ID should be seen as unstable until the subscription billing period ends.</p>
  
  Equivalent to GET /v1/subscription_items/{subscription_item}/usage_record_summaries
  """
  getSubscriptionItemsSubscriptionItemUsageRecordSummaries(
    """A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list."""
    endingBefore: String
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    """A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10."""
    limit: Int
    """A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list."""
    startingAfter: String
    subscriptionItem: String!
    v1SubscriptionItemUsageRecordSummariesInput: JSON
  ): V1SubscriptionItemUsageRecordSummaries2
  """
  <p>Retrieves the list of your subscription schedules.</p>
  
  Equivalent to GET /v1/subscription_schedules
  """
  getSubscriptionSchedules(
    """Only return subscription schedules that were created canceled the given date interval."""
    canceledAt: JSON
    """Only return subscription schedules that completed during the given date interval."""
    completedAt: JSON
    """Only return subscription schedules that were created during the given date interval."""
    created: JSON
    """Only return subscription schedules for the given customer."""
    customer: String
    """A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list."""
    endingBefore: String
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    """A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10."""
    limit: Int
    """Only return subscription schedules that were released during the given date interval."""
    releasedAt: JSON
    """Only return subscription schedules that have not started yet."""
    scheduled: Boolean
    """A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list."""
    startingAfter: String
    v1SubscriptionSchedulesInput: JSON
  ): V1SubscriptionSchedules2
  """
  <p>Retrieves the details of an existing subscription schedule. You only need to supply the unique subscription schedule identifier that was returned upon subscription schedule creation.</p>
  
  Equivalent to GET /v1/subscription_schedules/{schedule}
  """
  getSubscriptionSchedulesSchedule(
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    schedule: String!
    v1SubscriptionSchedulesInput: JSON
  ): SubscriptionSchedule2
  """
  <p>By default, returns a list of subscriptions that have not been canceled. In order to list canceled subscriptions, specify <code>status=canceled</code>.</p>
  
  Equivalent to GET /v1/subscriptions
  """
  getSubscriptions(
    """The collection method of the subscriptions to retrieve. Either `charge_automatically` or `send_invoice`."""
    collectionMethod: CollectionMethod9
    created: JSON
    currentPeriodEnd: JSON
    currentPeriodStart: JSON
    """The ID of the customer whose subscriptions will be retrieved."""
    customer: String
    """A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list."""
    endingBefore: String
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    """A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10."""
    limit: Int
    """Filter for subscriptions that contain this recurring price ID."""
    price: String
    """A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list."""
    startingAfter: String
    """The status of the subscriptions to retrieve. Passing in a value of `canceled` will return all canceled subscriptions, including those belonging to deleted customers. Pass `ended` to find subscriptions that are canceled and subscriptions that are expired due to [incomplete payment](https://stripe.com/docs/billing/subscriptions/overview#subscription-statuses). Passing in a value of `all` will return subscriptions of all statuses. If no value is supplied, all subscriptions that have not been canceled are returned."""
    status: Status64
    v1SubscriptionsInput: JSON
  ): V1Subscriptions2
  """
  <p>Retrieves the subscription with the given ID.</p>
  
  Equivalent to GET /v1/subscriptions/{subscription_exposed_id}
  """
  getSubscriptionsSubscriptionExposedId(
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    subscriptionExposedId: String!
    v1Subscription2Input: JSON
  ): Subscription5
  """
  <p>A list of <a href="https://stripe.com/docs/tax/tax-codes">all tax codes available</a> to add to Products in order to allow specific tax calculations.</p>
  
  Equivalent to GET /v1/tax_codes
  """
  getTaxCodes(
    """A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list."""
    endingBefore: String
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    """A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10."""
    limit: Int
    """A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list."""
    startingAfter: String
    v1TaxCodesInput: JSON
  ): TaxProductResourceTaxCodeList
  """
  <p>Retrieves the details of an existing tax code. Supply the unique tax code ID and Stripe will return the corresponding tax code information.</p>
  
  Equivalent to GET /v1/tax_codes/{id}
  """
  getTaxCodesId(
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    id: String!
    v1TaxCodeInput: JSON
  ): TaxCode6
  """
  <p>Returns a list of your tax rates. Tax rates are returned sorted by creation date, with the most recently created tax rates appearing first.</p>
  
  Equivalent to GET /v1/tax_rates
  """
  getTaxRates(
    """Optional flag to filter by tax rates that are either active or inactive (archived)."""
    active: Boolean
    """Optional range for filtering created date."""
    created: JSON
    """A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list."""
    endingBefore: String
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    """Optional flag to filter by tax rates that are inclusive (or those that are not inclusive)."""
    inclusive: Boolean
    """A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10."""
    limit: Int
    """A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list."""
    startingAfter: String
    v1TaxRatesInput: JSON
  ): V1TaxRates2
  """
  <p>Retrieves a tax rate with the given ID</p>
  
  Equivalent to GET /v1/tax_rates/{tax_rate}
  """
  getTaxRatesTaxRate(
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    taxRate: String!
    v1TaxRateInput: JSON
  ): TaxRate
  """
  <p>Returns a list of <code>Location</code> objects.</p>
  
  Equivalent to GET /v1/terminal/locations
  """
  getTerminalLocations(
    """A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list."""
    endingBefore: String
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    """A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10."""
    limit: Int
    """A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list."""
    startingAfter: String
    v1TerminalLocationsInput: JSON
  ): TerminalLocationLocationList
  """
  <p>Retrieves a <code>Location</code> object.</p>
  
  Equivalent to GET /v1/terminal/locations/{location}
  """
  getTerminalLocationsLocation(
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    location: String!
    v1TerminalLocationInput: JSON
  ): TerminalLocation
  """
  <p>Returns a list of <code>Reader</code> objects.</p>
  
  Equivalent to GET /v1/terminal/readers
  """
  getTerminalReaders(
    """Filters readers by device type"""
    deviceType: DeviceType2
    """A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list."""
    endingBefore: String
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    """A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10."""
    limit: Int
    """A location ID to filter the response list to only readers at the specific location"""
    location: String
    """A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list."""
    startingAfter: String
    """A status filter to filter readers to only offline or online readers"""
    status: Status65
    v1TerminalReadersInput: JSON
  ): TerminalReaderRetrieveReader
  """
  <p>Retrieves a <code>Reader</code> object.</p>
  
  Equivalent to GET /v1/terminal/readers/{reader}
  """
  getTerminalReadersReader(
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    reader: String!
    v1TerminalReaderInput: JSON
  ): TerminalReader
  """
  <p>Retrieves the token with the given ID.</p>
  
  Equivalent to GET /v1/tokens/{token}
  """
  getTokensToken(
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    token: String!
    v1TokenInput: JSON
  ): Token3
  """
  <p>Returns a list of top-ups.</p>
  
  Equivalent to GET /v1/topups
  """
  getTopups(
    """A positive integer representing how much to transfer."""
    amount: JSON
    """A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options."""
    created: JSON
    """A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list."""
    endingBefore: String
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    """A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10."""
    limit: Int
    """A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list."""
    startingAfter: String
    """Only return top-ups that have the given status. One of `canceled`, `failed`, `pending` or `succeeded`."""
    status: Status66
    v1TopupsInput: JSON
  ): TopupList
  """
  <p>Retrieves the details of a top-up that has previously been created. Supply the unique top-up ID that was returned from your previous request, and Stripe will return the corresponding top-up information.</p>
  
  Equivalent to GET /v1/topups/{topup}
  """
  getTopupsTopup(
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    topup: String!
    v1TopupInput: JSON
  ): Topup
  """
  <p>Returns a list of existing transfers sent to connected accounts. The transfers are returned in sorted order, with the most recently created transfers appearing first.</p>
  
  Equivalent to GET /v1/transfers
  """
  getTransfers(
    created: JSON
    """Only return transfers for the destination specified by this account ID."""
    destination: String
    """A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list."""
    endingBefore: String
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    """A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10."""
    limit: Int
    """A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list."""
    startingAfter: String
    """Only return transfers with the specified transfer group."""
    transferGroup: String
    v1TransfersInput: JSON
  ): TransferList
  """
  <p>You can see a list of the reversals belonging to a specific transfer. Note that the 10 most recent reversals are always available by default on the transfer object. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional reversals.</p>
  
  Equivalent to GET /v1/transfers/{id}/reversals
  """
  getTransfersIdReversals(
    """A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list."""
    endingBefore: String
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    id: String!
    """A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10."""
    limit: Int
    """A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list."""
    startingAfter: String
    v1TransferReversalsInput: JSON
  ): TransferReversalList
  """
  <p>Retrieves the details of an existing transfer. Supply the unique transfer ID from either a transfer creation request or the transfer list, and Stripe will return the corresponding transfer information.</p>
  
  Equivalent to GET /v1/transfers/{transfer}
  """
  getTransfersTransfer(
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    transfer: String!
    v1TransferInput: JSON
  ): Transfer2
  """
  <p>By default, you can see the 10 most recent reversals stored directly on the transfer object, but you can also retrieve details about a specific reversal stored on the transfer.</p>
  
  Equivalent to GET /v1/transfers/{transfer}/reversals/{id}
  """
  getTransfersTransferReversalsId(
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    id: String!
    transfer: String!
    v1TransferReversalInput: JSON
  ): TransferReversal2
  """
  <p>Returns a list of your webhook endpoints.</p>
  
  Equivalent to GET /v1/webhook_endpoints
  """
  getWebhookEndpoints(
    """A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list."""
    endingBefore: String
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    """A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10."""
    limit: Int
    """A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list."""
    startingAfter: String
    v1WebhookEndpointsInput: JSON
  ): V1WebhookEndpoints2
  """
  <p>Retrieves the webhook endpoint with the given ID.</p>
  
  Equivalent to GET /v1/webhook_endpoints/{webhook_endpoint}
  """
  getWebhookEndpointsWebhookEndpoint(
    """Specifies which fields in the response should be expanded."""
    expand: [String]
    v1WebhookEndpointInput: JSON
    webhookEndpoint: String!
  ): WebhookEndpoint
}

input ContinentFilterInput {
  code: StringQueryOperatorInput
}

input StringQueryOperatorInput {
  eq: String
  ne: String
  in: [String]
  nin: [String]
  regex: String
  glob: String
}

type Continent {
  code: ID!
  name: String!
  countries: [Country!]!
}

type Country {
  code: ID!
  name: String!
  native: String!
  phone: String!
  continent: Continent!
  capital: String
  currency: String
  languages: [Language!]!
  emoji: String!
  emojiU: String!
  states: [State!]!
}

type Language {
  code: ID!
  name: String
  native: String
  rtl: Boolean!
}

type State {
  code: String
  name: String!
  country: Country!
}

input CountryFilterInput {
  code: StringQueryOperatorInput
  currency: StringQueryOperatorInput
  continent: StringQueryOperatorInput
}

input LanguageFilterInput {
  code: StringQueryOperatorInput
}

enum CacheControlScope {
  PUBLIC
  PRIVATE
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type Mutation {
  """Use this to add items to the cart. If the item already exists, the provided input will be merged and quantity will be increased."""
  addItem(input: AddToCartInput!): Cart!
  """Use this to set all the items at once in the cart. This will override any existing items."""
  setItems(input: SetCartItemsInput!): Cart!
  """Use this to update any existing items in the cart. If the item doesn't exist, it'll return an error."""
  updateItem(input: UpdateCartItemInput!): Cart!
  """Use this to increase the item quantity of the provided item ID. If the item doesn't exist, it'll throw an error."""
  incrementItemQuantity(input: UpdateItemQuantityInput!): Cart!
  """Use this to decrease the item quantity of the provided item ID. If the item doesn't exist, it'll throw an error."""
  decrementItemQuantity(input: UpdateItemQuantityInput!): Cart!
  """Use this to remove any items from the cart. If it doesn't exist, it'll throw an error."""
  removeItem(input: RemoveCartItemInput!): Cart!
  """Use this to empty the cart. If the cart doesn't exist, it'll throw an error."""
  emptyCart(input: EmptyCartInput!): Cart!
  """Use this to update the cart currency or metadata. If the cart doesn't exist, it'll throw an error."""
  updateCart(input: UpdateCartInput!): Cart!
  """Use this to delete a cart. If the cart doesn't exist, it'll throw an error."""
  deleteCart(input: DeleteCartInput!): DeletePayload!
  """Use this to convert a cart to an unpaid order."""
  checkout(input: CheckoutInput!): Order
  """
  <p>With <a href="/docs/connect">Connect</a>, you can delete accounts you manage.</p>
  
  <p>Accounts created using test-mode keys can be deleted at any time. Custom or Express accounts created using live-mode keys can only be deleted once all balances are zero.</p>
  
  <p>If you want to delete your own account, use the <a href="https://dashboard.stripe.com/account">account information tab in your account settings</a> instead.</p>
  
  Equivalent to DELETE /v1/account
  """
  deleteAccount(v1AccountInput: V1AccountInput): DeletedAccount
  """
  <p>Delete a specified external account for a given account.</p>
  
  Equivalent to DELETE /v1/account/bank_accounts/{id}
  """
  deleteAccountBankAccountsId(id: String!, v1AccountBankAccountInput: JSON): DeletedExternalAccount
  """
  <p>Delete a specified external account for a given account.</p>
  
  Equivalent to DELETE /v1/account/external_accounts/{id}
  """
  deleteAccountExternalAccountsId(id: String!, v1AccountExternalAccountInput: JSON): DeletedExternalAccount
  """
  <p>Deletes an existing person’s relationship to the account’s legal entity. Any person with a relationship for an account can be deleted through the API, except if the person is the <code>account_opener</code>. If your integration is using the <code>executive</code> parameter, you cannot delete the only verified <code>executive</code> on file.</p>
  
  Equivalent to DELETE /v1/account/people/{person}
  """
  deleteAccountPeoplePerson(person: String!, v1AccountPersonInput: JSON): DeletedPerson
  """
  <p>Deletes an existing person’s relationship to the account’s legal entity. Any person with a relationship for an account can be deleted through the API, except if the person is the <code>account_opener</code>. If your integration is using the <code>executive</code> parameter, you cannot delete the only verified <code>executive</code> on file.</p>
  
  Equivalent to DELETE /v1/account/persons/{person}
  """
  deleteAccountPersonsPerson(person: String!, v1AccountPersonInput: JSON): DeletedPerson
  """
  <p>With <a href="/docs/connect">Connect</a>, you can delete accounts you manage.</p>
  
  <p>Accounts created using test-mode keys can be deleted at any time. Custom or Express accounts created using live-mode keys can only be deleted once all balances are zero.</p>
  
  <p>If you want to delete your own account, use the <a href="https://dashboard.stripe.com/account">account information tab in your account settings</a> instead.</p>
  
  Equivalent to DELETE /v1/accounts/{account}
  """
  deleteAccountsAccount(account: String!, v1Account2Input: JSON): DeletedAccount
  """
  <p>Delete a specified external account for a given account.</p>
  
  Equivalent to DELETE /v1/accounts/{account}/bank_accounts/{id}
  """
  deleteAccountsAccountBankAccountsId(account: String!, id: String!, v1AccountBankAccountInput: JSON): DeletedExternalAccount
  """
  <p>Delete a specified external account for a given account.</p>
  
  Equivalent to DELETE /v1/accounts/{account}/external_accounts/{id}
  """
  deleteAccountsAccountExternalAccountsId(account: String!, id: String!, v1AccountExternalAccountInput: JSON): DeletedExternalAccount
  """
  <p>Deletes an existing person’s relationship to the account’s legal entity. Any person with a relationship for an account can be deleted through the API, except if the person is the <code>account_opener</code>. If your integration is using the <code>executive</code> parameter, you cannot delete the only verified <code>executive</code> on file.</p>
  
  Equivalent to DELETE /v1/accounts/{account}/people/{person}
  """
  deleteAccountsAccountPeoplePerson(account: String!, person: String!, v1AccountPersonInput: JSON): DeletedPerson
  """
  <p>Deletes an existing person’s relationship to the account’s legal entity. Any person with a relationship for an account can be deleted through the API, except if the person is the <code>account_opener</code>. If your integration is using the <code>executive</code> parameter, you cannot delete the only verified <code>executive</code> on file.</p>
  
  Equivalent to DELETE /v1/accounts/{account}/persons/{person}
  """
  deleteAccountsAccountPersonsPerson(account: String!, person: String!, v1AccountPersonInput: JSON): DeletedPerson
  """
  <p>Delete an apple pay domain.</p>
  
  Equivalent to DELETE /v1/apple_pay/domains/{domain}
  """
  deleteApplePayDomainsDomain(domain: String!, v1ApplePayDomainInput: JSON): DeletedApplePayDomain
  """
  <p>You can delete coupons via the <a href="https://dashboard.stripe.com/coupons">coupon management</a> page of the Stripe dashboard. However, deleting a coupon does not affect any customers who have already applied the coupon; it means that new customers can’t redeem the coupon. You can also delete coupons via the API.</p>
  
  Equivalent to DELETE /v1/coupons/{coupon}
  """
  deleteCouponsCoupon(coupon: String!, v1CouponInput: JSON): DeletedCoupon
  """
  <p>Permanently deletes a customer. It cannot be undone. Also immediately cancels any active subscriptions on the customer.</p>
  
  Equivalent to DELETE /v1/customers/{customer}
  """
  deleteCustomersCustomer(customer: String!, v1CustomerInput: JSON): DeletedCustomer
  """
  <p>Delete a specified source for a given customer.</p>
  
  Equivalent to DELETE /v1/customers/{customer}/bank_accounts/{id}
  """
  deleteCustomersCustomerBankAccountsId(customer: String!, id: String!, v1CustomerBankAccountInput: V1CustomerBankAccountInput): JSON
  """
  <p>Delete a specified source for a given customer.</p>
  
  Equivalent to DELETE /v1/customers/{customer}/cards/{id}
  """
  deleteCustomersCustomerCardsId(customer: String!, id: String!, v1CustomerCardInput: V1CustomerCardInput): JSON
  """
  <p>Removes the currently applied discount on a customer.</p>
  
  Equivalent to DELETE /v1/customers/{customer}/discount
  """
  deleteCustomersCustomerDiscount(customer: String!, v1CustomerDiscountInput: JSON): DeletedDiscount
  """
  <p>Delete a specified source for a given customer.</p>
  
  Equivalent to DELETE /v1/customers/{customer}/sources/{id}
  """
  deleteCustomersCustomerSourcesId(customer: String!, id: String!, v1CustomerSourceInput: V1CustomerSourceInput): JSON
  """
  <p>Cancels a customer’s subscription. If you set the <code>at_period_end</code> parameter to <code>true</code>, the subscription will remain active until the end of the period, at which point it will be canceled and not renewed. Otherwise, with the default <code>false</code> value, the subscription is terminated immediately. In either case, the customer will not be charged again for the subscription.</p>
  
  <p>Note, however, that any pending invoice items that you’ve created will still be charged for at the end of the period, unless manually <a href="#delete_invoiceitem">deleted</a>. If you’ve set the subscription to cancel at the end of the period, any pending prorations will also be left in place and collected at the end of the period. But if the subscription is set to cancel immediately, pending prorations will be removed.</p>
  
  <p>By default, upon subscription cancellation, Stripe will stop automatic collection of all finalized invoices for the customer. This is intended to prevent unexpected payment attempts after the customer has canceled a subscription. However, you can resume automatic collection of the invoices manually after subscription cancellation to have us proceed. Or, you could check for unpaid invoices before allowing the customer to cancel the subscription at all.</p>
  
  Equivalent to DELETE /v1/customers/{customer}/subscriptions/{subscription_exposed_id}
  """
  deleteCustomersCustomerSubscriptionsSubscriptionExposedId(customer: String!, subscriptionExposedId: String!, v1CustomerSubscriptionInput: V1CustomerSubscriptionInput): Subscription5
  """
  <p>Removes the currently applied discount on a customer.</p>
  
  Equivalent to DELETE /v1/customers/{customer}/subscriptions/{subscription_exposed_id}/discount
  """
  deleteCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount(customer: String!, subscriptionExposedId: String!, v1CustomerSubscriptionDiscountInput: JSON): DeletedDiscount
  """
  <p>Deletes an existing <code>TaxID</code> object.</p>
  
  Equivalent to DELETE /v1/customers/{customer}/tax_ids/{id}
  """
  deleteCustomersCustomerTaxIdsId(customer: String!, id: String!, v1CustomerTaxIdInput: JSON): DeletedTaxId
  """
  <p>Invalidates a short-lived API key for a given resource.</p>
  
  Equivalent to DELETE /v1/ephemeral_keys/{key}
  """
  deleteEphemeralKeysKey(key: String!, v1EphemeralKeyInput: V1EphemeralKeyInput): EphemeralKey
  """
  <p>Deletes an invoice item, removing it from an invoice. Deleting invoice items is only possible when they’re not attached to invoices, or if it’s attached to a draft invoice.</p>
  
  Equivalent to DELETE /v1/invoiceitems/{invoiceitem}
  """
  deleteInvoiceitemsInvoiceitem(invoiceitem: String!, v1InvoiceitemInput: JSON): DeletedInvoiceitem
  """
  <p>Permanently deletes a one-off invoice draft. This cannot be undone. Attempts to delete invoices that are no longer in a draft state will fail; once an invoice has been finalized or if an invoice is for a subscription, it must be <a href="#void_invoice">voided</a>.</p>
  
  Equivalent to DELETE /v1/invoices/{invoice}
  """
  deleteInvoicesInvoice(invoice: String!, v1InvoiceInput: JSON): DeletedInvoice
  """
  <p>Deleting plans means new subscribers can’t be added. Existing subscribers aren’t affected.</p>
  
  Equivalent to DELETE /v1/plans/{plan}
  """
  deletePlansPlan(plan: String!, v1PlanInput: JSON): DeletedPlan
  """
  <p>Delete a product. Deleting a product is only possible if it has no prices associated with it. Additionally, deleting a product with <code>type=good</code> is only possible if it has no SKUs associated with it.</p>
  
  Equivalent to DELETE /v1/products/{id}
  """
  deleteProductsId(id: String!, v1ProductInput: JSON): DeletedProduct
  """
  <p>Deletes a <code>ValueListItem</code> object, removing it from its parent value list.</p>
  
  Equivalent to DELETE /v1/radar/value_list_items/{item}
  """
  deleteRadarValueListItemsItem(item: String!, v1RadarValueListItemsInput: JSON): DeletedRadarValueListItem
  """
  <p>Deletes a <code>ValueList</code> object, also deleting any items contained within the value list. To be deleted, a value list must not be referenced in any rules.</p>
  
  Equivalent to DELETE /v1/radar/value_lists/{value_list}
  """
  deleteRadarValueListsValueList(v1RadarValueListInput: JSON, valueList: String!): DeletedRadarValueList
  """
  <p>Permanently deletes a recipient. It cannot be undone.</p>
  
  Equivalent to DELETE /v1/recipients/{id}
  """
  deleteRecipientsId(id: String!, v1RecipientInput: JSON): DeletedRecipient
  """
  <p>Delete a SKU. Deleting a SKU is only possible until it has been used in an order.</p>
  
  Equivalent to DELETE /v1/skus/{id}
  """
  deleteSkusId(id: String!, v1SkusInput: JSON): DeletedSku
  """
  <p>Deletes an item from the subscription. Removing a subscription item from a subscription will not cancel the subscription.</p>
  
  Equivalent to DELETE /v1/subscription_items/{item}
  """
  deleteSubscriptionItemsItem(item: String!, v1SubscriptionItems4Input: V1SubscriptionItems4Input): DeletedSubscriptionItem
  """
  <p>Cancels a customer’s subscription immediately. The customer will not be charged again for the subscription.</p>
  
  <p>Note, however, that any pending invoice items that you’ve created will still be charged for at the end of the period, unless manually <a href="#delete_invoiceitem">deleted</a>. If you’ve set the subscription to cancel at the end of the period, any pending prorations will also be left in place and collected at the end of the period. But if the subscription is set to cancel immediately, pending prorations will be removed.</p>
  
  <p>By default, upon subscription cancellation, Stripe will stop automatic collection of all finalized invoices for the customer. This is intended to prevent unexpected payment attempts after the customer has canceled a subscription. However, you can resume automatic collection of the invoices manually after subscription cancellation to have us proceed. Or, you could check for unpaid invoices before allowing the customer to cancel the subscription at all.</p>
  
  Equivalent to DELETE /v1/subscriptions/{subscription_exposed_id}
  """
  deleteSubscriptionsSubscriptionExposedId(subscriptionExposedId: String!, v1SubscriptionInput: V1SubscriptionInput): Subscription5
  """
  <p>Removes the currently applied discount on a subscription.</p>
  
  Equivalent to DELETE /v1/subscriptions/{subscription_exposed_id}/discount
  """
  deleteSubscriptionsSubscriptionExposedIdDiscount(subscriptionExposedId: String!, v1SubscriptionDiscountInput: JSON): DeletedDiscount
  """
  <p>Deletes a <code>Location</code> object.</p>
  
  Equivalent to DELETE /v1/terminal/locations/{location}
  """
  deleteTerminalLocationsLocation(location: String!, v1TerminalLocationInput: JSON): DeletedTerminalLocation
  """
  <p>Deletes a <code>Reader</code> object.</p>
  
  Equivalent to DELETE /v1/terminal/readers/{reader}
  """
  deleteTerminalReadersReader(reader: String!, v1TerminalReaderInput: JSON): DeletedTerminalReader
  """
  <p>You can also delete webhook endpoints via the <a href="https://dashboard.stripe.com/account/webhooks">webhook endpoint management</a> page of the Stripe dashboard.</p>
  
  Equivalent to DELETE /v1/webhook_endpoints/{webhook_endpoint}
  """
  deleteWebhookEndpointsWebhookEndpoint(v1WebhookEndpointInput: JSON, webhookEndpoint: String!): DeletedWebhookEndpoint
  """
  <p>Initiate 3D Secure authentication.</p>
  
  Equivalent to POST /v1/3d_secure
  """
  post3dSecure(v13dSecureInput: V13dSecureInput!): ThreeDSecure
  """
  <p>Updates a <a href="/docs/connect/accounts">connected account</a> by setting the values of the parameters passed. Any parameters not provided are left unchanged. Most parameters can be changed only for Custom accounts. (These are marked <strong>Custom Only</strong> below.) Parameters marked <strong>Custom and Express</strong> are not supported for Standard accounts.</p>
  
  <p>To update your own account, use the <a href="https://dashboard.stripe.com/account">Dashboard</a>. Refer to our <a href="/docs/connect/updating-accounts">Connect</a> documentation to learn more about updating accounts.</p>
  
  Equivalent to POST /v1/account
  """
  postAccount(v1Account3Input: V1Account3Input): Account3
  """
  <p>Create an external account for a given account.</p>
  
  Equivalent to POST /v1/account/bank_accounts
  """
  postAccountBankAccounts(v1AccountBankAccountsInput: V1AccountBankAccountsInput): Polymorphic
  """
  <p>Updates the metadata, account holder name, account holder type of a bank account belonging to a <a href="/docs/connect/custom-accounts">Custom account</a>, and optionally sets it as the default for its currency. Other bank account details are not editable by design.</p>
  
  <p>You can re-enable a disabled bank account by performing an update call without providing any arguments or changes.</p>
  
  Equivalent to POST /v1/account/bank_accounts/{id}
  """
  postAccountBankAccountsId(id: String!, v1AccountBankAccount2Input: V1AccountBankAccount2Input): Polymorphic
  """
  <p>Updates an existing Account Capability.</p>
  
  Equivalent to POST /v1/account/capabilities/{capability}
  """
  postAccountCapabilitiesCapability(capability: String!, v1AccountCapability2Input: V1AccountCapability2Input): Capability
  """
  <p>Create an external account for a given account.</p>
  
  Equivalent to POST /v1/account/external_accounts
  """
  postAccountExternalAccounts(v1AccountExternalAccounts2Input: V1AccountExternalAccounts2Input): Polymorphic
  """
  <p>Updates the metadata, account holder name, account holder type of a bank account belonging to a <a href="/docs/connect/custom-accounts">Custom account</a>, and optionally sets it as the default for its currency. Other bank account details are not editable by design.</p>
  
  <p>You can re-enable a disabled bank account by performing an update call without providing any arguments or changes.</p>
  
  Equivalent to POST /v1/account/external_accounts/{id}
  """
  postAccountExternalAccountsId(id: String!, v1AccountExternalAccount2Input: V1AccountExternalAccount2Input): Polymorphic
  """
  <p>Creates an AccountLink object that includes a single-use Stripe URL that the platform can redirect their user to in order to take them through the Connect Onboarding flow.</p>
  
  Equivalent to POST /v1/account_links
  """
  postAccountLinks(v1AccountLinksInput: V1AccountLinksInput!): AccountLink
  """
  <p>Creates a single-use login link for an Express account to access their Stripe dashboard.</p>
  
  <p><strong>You may only create login links for <a href="/docs/connect/express-accounts">Express accounts</a> connected to your platform</strong>.</p>
  
  Equivalent to POST /v1/account/login_links
  """
  postAccountLoginLinks(v1AccountLoginLinksInput: V1AccountLoginLinksInput!): LoginLink
  """
  <p>Creates a new person.</p>
  
  Equivalent to POST /v1/account/people
  """
  postAccountPeople(v1AccountPeople3Input: V1AccountPeople3Input): Person
  """
  <p>Updates an existing person.</p>
  
  Equivalent to POST /v1/account/people/{person}
  """
  postAccountPeoplePerson(person: String!, v1AccountPerson2Input: V1AccountPerson2Input): Person
  """
  <p>Creates a new person.</p>
  
  Equivalent to POST /v1/account/persons
  """
  postAccountPersons(v1AccountPersons3Input: V1AccountPersons3Input): Person
  """
  <p>Updates an existing person.</p>
  
  Equivalent to POST /v1/account/persons/{person}
  """
  postAccountPersonsPerson(person: String!, v1AccountPerson2Input: V1AccountPerson2Input): Person
  """
  <p>With <a href="/docs/connect">Connect</a>, you can create Stripe accounts for your users.
  To do this, you’ll first need to <a href="https://dashboard.stripe.com/account/applications/settings">register your platform</a>.</p>
  
  Equivalent to POST /v1/accounts
  """
  postAccounts(v1Accounts3Input: V1Accounts3Input): Account3
  """
  <p>Updates a <a href="/docs/connect/accounts">connected account</a> by setting the values of the parameters passed. Any parameters not provided are left unchanged. Most parameters can be changed only for Custom accounts. (These are marked <strong>Custom Only</strong> below.) Parameters marked <strong>Custom and Express</strong> are not supported for Standard accounts.</p>
  
  <p>To update your own account, use the <a href="https://dashboard.stripe.com/account">Dashboard</a>. Refer to our <a href="/docs/connect/updating-accounts">Connect</a> documentation to learn more about updating accounts.</p>
  
  Equivalent to POST /v1/accounts/{account}
  """
  postAccountsAccount(account: String!, v1Account3Input: V1Account3Input): Account3
  """
  <p>Create an external account for a given account.</p>
  
  Equivalent to POST /v1/accounts/{account}/bank_accounts
  """
  postAccountsAccountBankAccounts(account: String!, v1AccountBankAccountsInput: V1AccountBankAccountsInput): Polymorphic
  """
  <p>Updates the metadata, account holder name, account holder type of a bank account belonging to a <a href="/docs/connect/custom-accounts">Custom account</a>, and optionally sets it as the default for its currency. Other bank account details are not editable by design.</p>
  
  <p>You can re-enable a disabled bank account by performing an update call without providing any arguments or changes.</p>
  
  Equivalent to POST /v1/accounts/{account}/bank_accounts/{id}
  """
  postAccountsAccountBankAccountsId(account: String!, id: String!, v1AccountBankAccount2Input: V1AccountBankAccount2Input): Polymorphic
  """
  <p>Updates an existing Account Capability.</p>
  
  Equivalent to POST /v1/accounts/{account}/capabilities/{capability}
  """
  postAccountsAccountCapabilitiesCapability(account: String!, capability: String!, v1AccountCapability2Input: V1AccountCapability2Input): Capability
  """
  <p>Create an external account for a given account.</p>
  
  Equivalent to POST /v1/accounts/{account}/external_accounts
  """
  postAccountsAccountExternalAccounts(account: String!, v1AccountExternalAccounts2Input: V1AccountExternalAccounts2Input): Polymorphic
  """
  <p>Updates the metadata, account holder name, account holder type of a bank account belonging to a <a href="/docs/connect/custom-accounts">Custom account</a>, and optionally sets it as the default for its currency. Other bank account details are not editable by design.</p>
  
  <p>You can re-enable a disabled bank account by performing an update call without providing any arguments or changes.</p>
  
  Equivalent to POST /v1/accounts/{account}/external_accounts/{id}
  """
  postAccountsAccountExternalAccountsId(account: String!, id: String!, v1AccountExternalAccount2Input: V1AccountExternalAccount2Input): Polymorphic
  """
  <p>Creates a single-use login link for an Express account to access their Stripe dashboard.</p>
  
  <p><strong>You may only create login links for <a href="/docs/connect/express-accounts">Express accounts</a> connected to your platform</strong>.</p>
  
  Equivalent to POST /v1/accounts/{account}/login_links
  """
  postAccountsAccountLoginLinks(account: String!, v1AccountLoginLinks2Input: V1AccountLoginLinks2Input): LoginLink
  """
  <p>Creates a new person.</p>
  
  Equivalent to POST /v1/accounts/{account}/people
  """
  postAccountsAccountPeople(account: String!, v1AccountPeople4Input: V1AccountPeople4Input): Person
  """
  <p>Updates an existing person.</p>
  
  Equivalent to POST /v1/accounts/{account}/people/{person}
  """
  postAccountsAccountPeoplePerson(account: String!, person: String!, v1AccountPerson3Input: V1AccountPerson3Input): Person
  """
  <p>Creates a new person.</p>
  
  Equivalent to POST /v1/accounts/{account}/persons
  """
  postAccountsAccountPersons(account: String!, v1AccountPersons4Input: V1AccountPersons4Input): Person
  """
  <p>Updates an existing person.</p>
  
  Equivalent to POST /v1/accounts/{account}/persons/{person}
  """
  postAccountsAccountPersonsPerson(account: String!, person: String!, v1AccountPerson3Input: V1AccountPerson3Input): Person
  """
  <p>With <a href="/docs/connect">Connect</a>, you may flag accounts as suspicious.</p>
  
  <p>Test-mode Custom and Express accounts can be rejected at any time. Accounts created using live-mode keys may only be rejected once all balances are zero.</p>
  
  Equivalent to POST /v1/accounts/{account}/reject
  """
  postAccountsAccountReject(account: String!, v1AccountRejectInput: V1AccountRejectInput!): Account3
  """
  <p>Create an apple pay domain.</p>
  
  Equivalent to POST /v1/apple_pay/domains
  """
  postApplePayDomains(v1ApplePayDomains2Input: V1ApplePayDomains2Input!): ApplePayDomain
  """
  <p>Updates the specified application fee refund by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
  
  <p>This request only accepts metadata as an argument.</p>
  
  Equivalent to POST /v1/application_fees/{fee}/refunds/{id}
  """
  postApplicationFeesFeeRefundsId(fee: String!, id: String!, v1ApplicationFeesRefund2Input: V1ApplicationFeesRefund2Input): FeeRefund
  """
  
  
  Equivalent to POST /v1/application_fees/{id}/refund
  """
  postApplicationFeesIdRefund(id: String!, v1ApplicationFeeRefundInput: V1ApplicationFeeRefundInput): ApplicationFee
  """
  <p>Refunds an application fee that has previously been collected but not yet refunded.
  Funds will be refunded to the Stripe account from which the fee was originally collected.</p>
  
  <p>You can optionally refund only part of an application fee.
  You can do so multiple times, until the entire fee has been refunded.</p>
  
  <p>Once entirely refunded, an application fee can’t be refunded again.
  This method will raise an error when called on an already-refunded application fee,
  or when trying to refund more money than is left on an application fee.</p>
  
  Equivalent to POST /v1/application_fees/{id}/refunds
  """
  postApplicationFeesIdRefunds(id: String!, v1ApplicationFeeRefunds2Input: V1ApplicationFeeRefunds2Input): FeeRefund
  """
  <p>Creates a configuration that describes the functionality and behavior of a PortalSession</p>
  
  Equivalent to POST /v1/billing_portal/configurations
  """
  postBillingPortalConfigurations(v1BillingPortalConfigurations3Input: V1BillingPortalConfigurations3Input!): BillingPortalConfiguration
  """
  <p>Updates a configuration that describes the functionality of the customer portal.</p>
  
  Equivalent to POST /v1/billing_portal/configurations/{configuration}
  """
  postBillingPortalConfigurationsConfiguration(configuration: String!, v1BillingPortalConfiguration2Input: V1BillingPortalConfiguration2Input): BillingPortalConfiguration
  """
  <p>Creates a session of the customer portal.</p>
  
  Equivalent to POST /v1/billing_portal/sessions
  """
  postBillingPortalSessions(v1BillingPortalSessionsInput: V1BillingPortalSessionsInput!): BillingPortalSession
  """
  <p>To charge a credit card or other payment source, you create a <code>Charge</code> object. If your API key is in test mode, the supplied payment source (e.g., card) won’t actually be charged, although everything else will occur as if in live mode. (Stripe assumes that the charge would have completed successfully).</p>
  
  Equivalent to POST /v1/charges
  """
  postCharges(v1Charges3Input: V1Charges3Input): Charge2
  """
  <p>Updates the specified charge by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
  
  Equivalent to POST /v1/charges/{charge}
  """
  postChargesCharge(charge: String!, v1Charge2Input: V1Charge2Input): Charge2
  """
  <p>Capture the payment of an existing, uncaptured, charge. This is the second half of the two-step payment flow, where first you <a href="#create_charge">created a charge</a> with the capture option set to false.</p>
  
  <p>Uncaptured payments expire exactly seven days after they are created. If they are not captured by that point in time, they will be marked as refunded and will no longer be capturable.</p>
  
  Equivalent to POST /v1/charges/{charge}/capture
  """
  postChargesChargeCapture(charge: String!, v1ChargeCaptureInput: V1ChargeCaptureInput): Charge2
  """
  
  
  Equivalent to POST /v1/charges/{charge}/dispute
  """
  postChargesChargeDispute(charge: String!, v1ChargeDispute2Input: V1ChargeDispute2Input): Dispute
  """
  
  
  Equivalent to POST /v1/charges/{charge}/dispute/close
  """
  postChargesChargeDisputeClose(charge: String!, v1ChargeDisputeCloseInput: V1ChargeDisputeCloseInput): Dispute
  """
  <p>When you create a new refund, you must specify a Charge or a PaymentIntent object on which to create it.</p>
  
  <p>Creating a new refund will refund a charge that has previously been created but not yet refunded.
  Funds will be refunded to the credit or debit card that was originally charged.</p>
  
  <p>You can optionally refund only part of a charge.
  You can do so multiple times, until the entire charge has been refunded.</p>
  
  <p>Once entirely refunded, a charge can’t be refunded again.
  This method will raise an error when called on an already-refunded charge,
  or when trying to refund more money than is left on a charge.</p>
  
  Equivalent to POST /v1/charges/{charge}/refund
  """
  postChargesChargeRefund(charge: String!, v1ChargeRefundInput: V1ChargeRefundInput): Charge2
  """
  <p>Create a refund.</p>
  
  Equivalent to POST /v1/charges/{charge}/refunds
  """
  postChargesChargeRefunds(charge: String!, v1ChargeRefunds2Input: V1ChargeRefunds2Input): Refund
  """
  <p>Update a specified refund.</p>
  
  Equivalent to POST /v1/charges/{charge}/refunds/{refund}
  """
  postChargesChargeRefundsRefund(charge: String!, refund: String!, v1ChargeRefund3Input: V1ChargeRefund3Input): Refund
  """
  <p>Creates a Session object.</p>
  
  Equivalent to POST /v1/checkout/sessions
  """
  postCheckoutSessions(v1CheckoutSessions2Input: V1CheckoutSessions2Input!): CheckoutSession
  """
  <p>You can create coupons easily via the <a href="https://dashboard.stripe.com/coupons">coupon management</a> page of the Stripe dashboard. Coupon creation is also accessible via the API if you need to create coupons on the fly.</p>
  
  <p>A coupon has either a <code>percent_off</code> or an <code>amount_off</code> and <code>currency</code>. If you set an <code>amount_off</code>, that amount will be subtracted from any invoice’s subtotal. For example, an invoice with a subtotal of <currency>100</currency> will have a final total of <currency>0</currency> if a coupon with an <code>amount_off</code> of <amount>200</amount> is applied to it and an invoice with a subtotal of <currency>300</currency> will have a final total of <currency>100</currency> if a coupon with an <code>amount_off</code> of <amount>200</amount> is applied to it.</p>
  
  Equivalent to POST /v1/coupons
  """
  postCoupons(v1Coupons3Input: V1Coupons3Input): Coupon
  """
  <p>Updates the metadata of a coupon. Other coupon details (currency, duration, amount_off) are, by design, not editable.</p>
  
  Equivalent to POST /v1/coupons/{coupon}
  """
  postCouponsCoupon(coupon: String!, v1Coupon2Input: V1Coupon2Input): Coupon
  """
  <p>Issue a credit note to adjust the amount of a finalized invoice. For a <code>status=open</code> invoice, a credit note reduces
  its <code>amount_due</code>. For a <code>status=paid</code> invoice, a credit note does not affect its <code>amount_due</code>. Instead, it can result
  in any combination of the following:</p>
  
  <ul>
  <li>Refund: create a new refund (using <code>refund_amount</code>) or link an existing refund (using <code>refund</code>).</li>
  <li>Customer balance credit: credit the customer’s balance (using <code>credit_amount</code>) which will be automatically applied to their next invoice when it’s finalized.</li>
  <li>Outside of Stripe credit: record the amount that is or will be credited outside of Stripe (using <code>out_of_band_amount</code>).</li>
  </ul>
  
  <p>For post-payment credit notes the sum of the refund, credit and outside of Stripe amounts must equal the credit note total.</p>
  
  <p>You may issue multiple credit notes for an invoice. Each credit note will increment the invoice’s <code>pre_payment_credit_notes_amount</code>
  or <code>post_payment_credit_notes_amount</code> depending on its <code>status</code> at the time of credit note creation.</p>
  
  Equivalent to POST /v1/credit_notes
  """
  postCreditNotes(v1CreditNotes2Input: V1CreditNotes2Input!): CreditNote
  """
  <p>Updates an existing credit note.</p>
  
  Equivalent to POST /v1/credit_notes/{id}
  """
  postCreditNotesId(id: String!, v1CreditNote2Input: V1CreditNote2Input): CreditNote
  """
  <p>Marks a credit note as void. Learn more about <a href="/docs/billing/invoices/credit-notes#voiding">voiding credit notes</a>.</p>
  
  Equivalent to POST /v1/credit_notes/{id}/void
  """
  postCreditNotesIdVoid(id: String!, v1CreditNoteVoidInput: V1CreditNoteVoidInput): CreditNote
  """
  <p>Creates a new customer object.</p>
  
  Equivalent to POST /v1/customers
  """
  postCustomers(v1Customers3Input: V1Customers3Input): Customer13
  """
  <p>Updates the specified customer by setting the values of the parameters passed. Any parameters not provided will be left unchanged. For example, if you pass the <strong>source</strong> parameter, that becomes the customer’s active source (e.g., a card) to be used for all charges in the future. When you update a customer to a new valid card source by passing the <strong>source</strong> parameter: for each of the customer’s current subscriptions, if the subscription bills automatically and is in the <code>past_due</code> state, then the latest open invoice for the subscription with automatic collection enabled will be retried. This retry will not count as an automatic retry, and will not affect the next regularly scheduled payment for the invoice. Changing the <strong>default_source</strong> for a customer will not trigger this behavior.</p>
  
  <p>This request accepts mostly the same arguments as the customer creation call.</p>
  
  Equivalent to POST /v1/customers/{customer}
  """
  postCustomersCustomer(customer: String!, v1Customer3Input: V1Customer3Input): Customer13
  """
  <p>Creates an immutable transaction that updates the customer’s credit <a href="/docs/billing/customer/balance">balance</a>.</p>
  
  Equivalent to POST /v1/customers/{customer}/balance_transactions
  """
  postCustomersCustomerBalanceTransactions(customer: String!, v1CustomerBalanceTransactions2Input: V1CustomerBalanceTransactions2Input!): CustomerBalanceTransaction2
  """
  <p>Most credit balance transaction fields are immutable, but you may update its <code>description</code> and <code>metadata</code>.</p>
  
  Equivalent to POST /v1/customers/{customer}/balance_transactions/{transaction}
  """
  postCustomersCustomerBalanceTransactionsTransaction(customer: String!, transaction: String!, v1CustomerBalanceTransactions3Input: V1CustomerBalanceTransactions3Input): CustomerBalanceTransaction2
  """
  <p>When you create a new credit card, you must specify a customer or recipient on which to create it.</p>
  
  <p>If the card’s owner has no default card, then the new card will become the default.
  However, if the owner already has a default, then it will not change.
  To change the default, you should <a href="/docs/api#update_customer">update the customer</a> to have a new <code>default_source</code>.</p>
  
  Equivalent to POST /v1/customers/{customer}/bank_accounts
  """
  postCustomersCustomerBankAccounts(customer: String!, v1CustomerBankAccounts2Input: V1CustomerBankAccounts2Input): PaymentSource
  """
  <p>Update a specified source for a given customer.</p>
  
  Equivalent to POST /v1/customers/{customer}/bank_accounts/{id}
  """
  postCustomersCustomerBankAccountsId(customer: String!, id: String!, v1CustomerBankAccount4Input: V1CustomerBankAccount4Input): V1CustomerBankAccount5
  """
  <p>Verify a specified bank account for a given customer.</p>
  
  Equivalent to POST /v1/customers/{customer}/bank_accounts/{id}/verify
  """
  postCustomersCustomerBankAccountsIdVerify(customer: String!, id: String!, v1CustomerBankAccountVerifyInput: V1CustomerBankAccountVerifyInput): BankAccount7
  """
  <p>When you create a new credit card, you must specify a customer or recipient on which to create it.</p>
  
  <p>If the card’s owner has no default card, then the new card will become the default.
  However, if the owner already has a default, then it will not change.
  To change the default, you should <a href="/docs/api#update_customer">update the customer</a> to have a new <code>default_source</code>.</p>
  
  Equivalent to POST /v1/customers/{customer}/cards
  """
  postCustomersCustomerCards(customer: String!, v1CustomerCards2Input: V1CustomerCards2Input): PaymentSource
  """
  <p>Update a specified source for a given customer.</p>
  
  Equivalent to POST /v1/customers/{customer}/cards/{id}
  """
  postCustomersCustomerCardsId(customer: String!, id: String!, v1CustomerCard4Input: V1CustomerCard4Input): V1CustomerCard5
  """
  <p>When you create a new credit card, you must specify a customer or recipient on which to create it.</p>
  
  <p>If the card’s owner has no default card, then the new card will become the default.
  However, if the owner already has a default, then it will not change.
  To change the default, you should <a href="/docs/api#update_customer">update the customer</a> to have a new <code>default_source</code>.</p>
  
  Equivalent to POST /v1/customers/{customer}/sources
  """
  postCustomersCustomerSources(customer: String!, v1CustomerSources2Input: V1CustomerSources2Input): PaymentSource
  """
  <p>Update a specified source for a given customer.</p>
  
  Equivalent to POST /v1/customers/{customer}/sources/{id}
  """
  postCustomersCustomerSourcesId(customer: String!, id: String!, v1CustomerSource4Input: V1CustomerSource4Input): V1CustomerSource5
  """
  <p>Verify a specified bank account for a given customer.</p>
  
  Equivalent to POST /v1/customers/{customer}/sources/{id}/verify
  """
  postCustomersCustomerSourcesIdVerify(customer: String!, id: String!, v1CustomerSourceVerifyInput: V1CustomerSourceVerifyInput): BankAccount7
  """
  <p>Creates a new subscription on an existing customer.</p>
  
  Equivalent to POST /v1/customers/{customer}/subscriptions
  """
  postCustomersCustomerSubscriptions(customer: String!, v1CustomerSubscriptions2Input: V1CustomerSubscriptions2Input): Subscription5
  """
  <p>Updates an existing subscription on a customer to match the specified parameters. When changing plans or quantities, we will optionally prorate the price we charge next month to make up for any price changes. To preview how the proration will be calculated, use the <a href="#upcoming_invoice">upcoming invoice</a> endpoint.</p>
  
  Equivalent to POST /v1/customers/{customer}/subscriptions/{subscription_exposed_id}
  """
  postCustomersCustomerSubscriptionsSubscriptionExposedId(customer: String!, subscriptionExposedId: String!, v1CustomerSubscription3Input: V1CustomerSubscription3Input): Subscription5
  """
  <p>Creates a new <code>TaxID</code> object for a customer.</p>
  
  Equivalent to POST /v1/customers/{customer}/tax_ids
  """
  postCustomersCustomerTaxIds(customer: String!, v1CustomerTaxIds2Input: V1CustomerTaxIds2Input!): TaxId3
  """
  <p>When you get a dispute, contacting your customer is always the best first step. If that doesn’t work, you can submit evidence to help us resolve the dispute in your favor. You can do this in your <a href="https://dashboard.stripe.com/disputes">dashboard</a>, but if you prefer, you can use the API to submit evidence programmatically.</p>
  
  <p>Depending on your dispute type, different evidence fields will give you a better chance of winning your dispute. To figure out which evidence fields to provide, see our <a href="/docs/disputes/categories">guide to dispute types</a>.</p>
  
  Equivalent to POST /v1/disputes/{dispute}
  """
  postDisputesDispute(dispute: String!, v1Dispute2Input: V1Dispute2Input): Dispute
  """
  <p>Closing the dispute for a charge indicates that you do not have any evidence to submit and are essentially dismissing the dispute, acknowledging it as lost.</p>
  
  <p>The status of the dispute will change from <code>needs_response</code> to <code>lost</code>. <em>Closing a dispute is irreversible</em>.</p>
  
  Equivalent to POST /v1/disputes/{dispute}/close
  """
  postDisputesDisputeClose(dispute: String!, v1DisputeCloseInput: V1DisputeCloseInput): Dispute
  """
  <p>Creates a short-lived API key for a given resource.</p>
  
  Equivalent to POST /v1/ephemeral_keys
  """
  postEphemeralKeys(v1EphemeralKeysInput: V1EphemeralKeysInput): EphemeralKey
  """
  <p>Creates a new file link object.</p>
  
  Equivalent to POST /v1/file_links
  """
  postFileLinks(v1FileLinks3Input: V1FileLinks3Input!): FileLink
  """
  <p>Updates an existing file link object. Expired links can no longer be updated.</p>
  
  Equivalent to POST /v1/file_links/{link}
  """
  postFileLinksLink(link: String!, v1FileLinks4Input: V1FileLinks4Input): FileLink
  """
  <p>To upload a file to Stripe, you’ll need to send a request of type <code>multipart/form-data</code>. The request should contain the file you would like to upload, as well as the parameters for creating a file.</p>
  
  <p>All of Stripe’s officially supported Client libraries should have support for sending <code>multipart/form-data</code>.</p>
  
  Equivalent to POST /v1/files
  """
  postFiles(
    """String represents payload of content type 'multipart/form-data'"""
    multipartFormDataInput: String!
  ): File3
  """
  <p>Creates a VerificationSession object.</p>
  
  <p>After the VerificationSession is created, display a verification modal using the session <code>client_secret</code> or send your users to the session’s <code>url</code>.</p>
  
  <p>If your API key is in test mode, verification checks won’t actually process, though everything else will occur as if in live mode.</p>
  
  <p>Related guide: <a href="/docs/identity/verify-identity-documents">Verify your users’ identity documents</a>.</p>
  
  Equivalent to POST /v1/identity/verification_sessions
  """
  postIdentityVerificationSessions(v1IdentityVerificationSessions3Input: V1IdentityVerificationSessions3Input!): IdentityVerificationSession
  """
  <p>Updates a VerificationSession object.</p>
  
  <p>When the session status is <code>requires_input</code>, you can use this method to update the
  verification check and options.</p>
  
  Equivalent to POST /v1/identity/verification_sessions/{session}
  """
  postIdentityVerificationSessionsSession(session: String!, v1IdentityVerificationSessions4Input: V1IdentityVerificationSessions4Input): IdentityVerificationSession
  """
  <p>A VerificationSession object can be canceled when it is in <code>requires_input</code> <a href="/docs/identity/how-sessions-work">status</a>.</p>
  
  <p>Once canceled, future submission attempts are disabled. This cannot be undone. <a href="/docs/identity/verification-sessions#cancel">Learn more</a>.</p>
  
  Equivalent to POST /v1/identity/verification_sessions/{session}/cancel
  """
  postIdentityVerificationSessionsSessionCancel(session: String!, v1IdentityVerificationSessionsCancelInput: V1IdentityVerificationSessionsCancelInput): IdentityVerificationSession
  """
  <p>Redact a VerificationSession to remove all collected information from Stripe. This will redact
  the VerificationSession and all objects related to it, including VerificationReports, Events,
  request logs, etc.</p>
  
  <p>A VerificationSession object can be redacted when it is in <code>requires_input</code> or <code>verified</code>
  <a href="/docs/identity/how-sessions-work">status</a>. Redacting a VerificationSession in <code>requires_action</code>
  state will automatically cancel it.</p>
  
  <p>The redaction process may take up to four days. When the redaction process is in progress, the
  VerificationSession’s <code>redaction.status</code> field will be set to <code>processing</code>; when the process is
  finished, it will change to <code>redacted</code> and an <code>identity.verification_session.redacted</code> event
  will be emitted.</p>
  
  <p>Redaction is irreversible. Redacted objects are still accessible in the Stripe API, but all the
  fields that contain personal data will be replaced by the string <code>[redacted]</code> or a similar
  placeholder. The <code>metadata</code> field will also be erased. Redacted objects cannot be updated or
  used for any purpose.</p>
  
  <p><a href="/docs/identity/verification-sessions#redact">Learn more</a>.</p>
  
  Equivalent to POST /v1/identity/verification_sessions/{session}/redact
  """
  postIdentityVerificationSessionsSessionRedact(session: String!, v1IdentityVerificationSessionsRedactInput: V1IdentityVerificationSessionsRedactInput): IdentityVerificationSession
  """
  <p>Creates an item to be added to a draft invoice (up to 250 items per invoice). If no invoice is specified, the item will be on the next invoice created for the customer specified.</p>
  
  Equivalent to POST /v1/invoiceitems
  """
  postInvoiceitems(v1Invoiceitems3Input: V1Invoiceitems3Input!): Invoiceitem
  """
  <p>Updates the amount or description of an invoice item on an upcoming invoice. Updating an invoice item is only possible before the invoice it’s attached to is closed.</p>
  
  Equivalent to POST /v1/invoiceitems/{invoiceitem}
  """
  postInvoiceitemsInvoiceitem(invoiceitem: String!, v1Invoiceitem2Input: V1Invoiceitem2Input): Invoiceitem
  """
  <p>This endpoint creates a draft invoice for a given customer. The draft invoice created pulls in all pending invoice items on that customer, including prorations. The invoice remains a draft until you <a href="#finalize_invoice">finalize</a> the invoice, which allows you to <a href="#pay_invoice">pay</a> or <a href="#send_invoice">send</a> the invoice to your customers.</p>
  
  Equivalent to POST /v1/invoices
  """
  postInvoices(v1Invoices2Input: V1Invoices2Input!): Invoice11
  """
  <p>Draft invoices are fully editable. Once an invoice is <a href="/docs/billing/invoices/workflow#finalized">finalized</a>,
  monetary values, as well as <code>collection_method</code>, become uneditable.</p>
  
  <p>If you would like to stop the Stripe Billing engine from automatically finalizing, reattempting payments on,
  sending reminders for, or <a href="/docs/billing/invoices/reconciliation">automatically reconciling</a> invoices, pass
  <code>auto_advance=false</code>.</p>
  
  Equivalent to POST /v1/invoices/{invoice}
  """
  postInvoicesInvoice(invoice: String!, v1Invoice2Input: V1Invoice2Input): Invoice11
  """
  <p>Stripe automatically finalizes drafts before sending and attempting payment on invoices. However, if you’d like to finalize a draft invoice manually, you can do so using this method.</p>
  
  Equivalent to POST /v1/invoices/{invoice}/finalize
  """
  postInvoicesInvoiceFinalize(invoice: String!, v1InvoiceFinalizeInput: V1InvoiceFinalizeInput): Invoice11
  """
  <p>Marking an invoice as uncollectible is useful for keeping track of bad debts that can be written off for accounting purposes.</p>
  
  Equivalent to POST /v1/invoices/{invoice}/mark_uncollectible
  """
  postInvoicesInvoiceMarkUncollectible(invoice: String!, v1InvoiceMarkUncollectibleInput: V1InvoiceMarkUncollectibleInput): Invoice11
  """
  <p>Stripe automatically creates and then attempts to collect payment on invoices for customers on subscriptions according to your <a href="https://dashboard.stripe.com/account/billing/automatic">subscriptions settings</a>. However, if you’d like to attempt payment on an invoice out of the normal collection schedule or for some other reason, you can do so.</p>
  
  Equivalent to POST /v1/invoices/{invoice}/pay
  """
  postInvoicesInvoicePay(invoice: String!, v1InvoicePayInput: V1InvoicePayInput): Invoice11
  """
  <p>Stripe will automatically send invoices to customers according to your <a href="https://dashboard.stripe.com/account/billing/automatic">subscriptions settings</a>. However, if you’d like to manually send an invoice to your customer out of the normal schedule, you can do so. When sending invoices that have already been paid, there will be no reference to the payment in the email.</p>
  
  <p>Requests made in test-mode result in no emails being sent, despite sending an <code>invoice.sent</code> event.</p>
  
  Equivalent to POST /v1/invoices/{invoice}/send
  """
  postInvoicesInvoiceSend(invoice: String!, v1InvoiceSendInput: V1InvoiceSendInput): Invoice11
  """
  <p>Mark a finalized invoice as void. This cannot be undone. Voiding an invoice is similar to <a href="#delete_invoice">deletion</a>, however it only applies to finalized invoices and maintains a papertrail where the invoice can still be found.</p>
  
  Equivalent to POST /v1/invoices/{invoice}/void
  """
  postInvoicesInvoiceVoid(invoice: String!, v1InvoiceVoidInput: V1InvoiceVoidInput): Invoice11
  """
  <p>Updates the specified Issuing <code>Authorization</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
  
  Equivalent to POST /v1/issuing/authorizations/{authorization}
  """
  postIssuingAuthorizationsAuthorization(authorization: String!, v1IssuingAuthorization2Input: V1IssuingAuthorization2Input): IssuingAuthorization
  """
  <p>Approves a pending Issuing <code>Authorization</code> object. This request should be made within the timeout window of the <a href="/docs/issuing/controls/real-time-authorizations">real-time authorization</a> flow.</p>
  
  Equivalent to POST /v1/issuing/authorizations/{authorization}/approve
  """
  postIssuingAuthorizationsAuthorizationApprove(authorization: String!, v1IssuingAuthorizationApproveInput: V1IssuingAuthorizationApproveInput): IssuingAuthorization
  """
  <p>Declines a pending Issuing <code>Authorization</code> object. This request should be made within the timeout window of the <a href="/docs/issuing/controls/real-time-authorizations">real time authorization</a> flow.</p>
  
  Equivalent to POST /v1/issuing/authorizations/{authorization}/decline
  """
  postIssuingAuthorizationsAuthorizationDecline(authorization: String!, v1IssuingAuthorizationDeclineInput: V1IssuingAuthorizationDeclineInput): IssuingAuthorization
  """
  <p>Creates a new Issuing <code>Cardholder</code> object that can be issued cards.</p>
  
  Equivalent to POST /v1/issuing/cardholders
  """
  postIssuingCardholders(v1IssuingCardholders3Input: V1IssuingCardholders3Input!): IssuingCardholder
  """
  <p>Updates the specified Issuing <code>Cardholder</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
  
  Equivalent to POST /v1/issuing/cardholders/{cardholder}
  """
  postIssuingCardholdersCardholder(cardholder: String!, v1IssuingCardholder2Input: V1IssuingCardholder2Input): IssuingCardholder
  """
  <p>Creates an Issuing <code>Card</code> object.</p>
  
  Equivalent to POST /v1/issuing/cards
  """
  postIssuingCards(v1IssuingCards3Input: V1IssuingCards3Input!): IssuingCard2
  """
  <p>Updates the specified Issuing <code>Card</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
  
  Equivalent to POST /v1/issuing/cards/{card}
  """
  postIssuingCardsCard(card: String!, v1IssuingCard2Input: V1IssuingCard2Input): IssuingCard2
  """
  <p>Creates an Issuing <code>Dispute</code> object. Individual pieces of evidence within the <code>evidence</code> object are optional at this point. Stripe only validates that required evidence is present during submission. Refer to <a href="/docs/issuing/purchases/disputes#dispute-reasons-and-evidence">Dispute reasons and evidence</a> for more details about evidence requirements.</p>
  
  Equivalent to POST /v1/issuing/disputes
  """
  postIssuingDisputes(v1IssuingDisputes2Input: V1IssuingDisputes2Input!): IssuingDispute
  """
  <p>Updates the specified Issuing <code>Dispute</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Properties on the <code>evidence</code> object can be unset by passing in an empty string.</p>
  
  Equivalent to POST /v1/issuing/disputes/{dispute}
  """
  postIssuingDisputesDispute(dispute: String!, v1IssuingDispute2Input: V1IssuingDispute2Input): IssuingDispute
  """
  <p>Submits an Issuing <code>Dispute</code> to the card network. Stripe validates that all evidence fields required for the dispute’s reason are present. For more details, see <a href="/docs/issuing/purchases/disputes#dispute-reasons-and-evidence">Dispute reasons and evidence</a>.</p>
  
  Equivalent to POST /v1/issuing/disputes/{dispute}/submit
  """
  postIssuingDisputesDisputeSubmit(dispute: String!, v1IssuingDisputeSubmitInput: V1IssuingDisputeSubmitInput): IssuingDispute
  """
  <p>Updates the specified Issuing <code>Settlement</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
  
  Equivalent to POST /v1/issuing/settlements/{settlement}
  """
  postIssuingSettlementsSettlement(settlement: String!, v1IssuingSettlement2Input: V1IssuingSettlement2Input): IssuingSettlement
  """
  <p>Updates the specified Issuing <code>Transaction</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
  
  Equivalent to POST /v1/issuing/transactions/{transaction}
  """
  postIssuingTransactionsTransaction(transaction: String!, v1IssuingTransaction2Input: V1IssuingTransaction2Input): IssuingTransaction
  """
  <p>Creates a new order object.</p>
  
  Equivalent to POST /v1/orders
  """
  postOrders(v1Orders3Input: V1Orders3Input!): Order3
  """
  <p>Updates the specific order by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
  
  Equivalent to POST /v1/orders/{id}
  """
  postOrdersId(id: String!, v1Order2Input: V1Order2Input): Order3
  """
  <p>Pay an order by providing a <code>source</code> to create a payment.</p>
  
  Equivalent to POST /v1/orders/{id}/pay
  """
  postOrdersIdPay(id: String!, v1OrderPayInput: V1OrderPayInput): Order3
  """
  <p>Return all or part of an order. The order must have a status of <code>paid</code> or <code>fulfilled</code> before it can be returned. Once all items have been returned, the order will become <code>canceled</code> or <code>returned</code> depending on which status the order started in.</p>
  
  Equivalent to POST /v1/orders/{id}/returns
  """
  postOrdersIdReturns(id: String!, v1OrderReturns3Input: V1OrderReturns3Input): OrderReturn
  """
  <p>Creates a PaymentIntent object.</p>
  
  <p>After the PaymentIntent is created, attach a payment method and <a href="/docs/api/payment_intents/confirm">confirm</a>
  to continue the payment. You can read more about the different payment flows
  available via the Payment Intents API <a href="/docs/payments/payment-intents">here</a>.</p>
  
  <p>When <code>confirm=true</code> is used during creation, it is equivalent to creating
  and confirming the PaymentIntent in the same call. You may use any parameters
  available in the <a href="/docs/api/payment_intents/confirm">confirm API</a> when <code>confirm=true</code>
  is supplied.</p>
  
  Equivalent to POST /v1/payment_intents
  """
  postPaymentIntents(v1PaymentIntents2Input: V1PaymentIntents2Input!): PaymentIntent7
  """
  <p>Updates properties on a PaymentIntent object without confirming.</p>
  
  <p>Depending on which properties you update, you may need to confirm the
  PaymentIntent again. For example, updating the <code>payment_method</code> will
  always require you to confirm the PaymentIntent again. If you prefer to
  update and confirm at the same time, we recommend updating properties via
  the <a href="/docs/api/payment_intents/confirm">confirm API</a> instead.</p>
  
  Equivalent to POST /v1/payment_intents/{intent}
  """
  postPaymentIntentsIntent(intent: String!, v1PaymentIntents3Input: V1PaymentIntents3Input): PaymentIntent7
  """
  <p>A PaymentIntent object can be canceled when it is in one of these statuses: <code>requires_payment_method</code>, <code>requires_capture</code>, <code>requires_confirmation</code>, or <code>requires_action</code>. </p>
  
  <p>Once canceled, no additional charges will be made by the PaymentIntent and any operations on the PaymentIntent will fail with an error. For PaymentIntents with <code>status=’requires_capture’</code>, the remaining <code>amount_capturable</code> will automatically be refunded.</p>
  
  Equivalent to POST /v1/payment_intents/{intent}/cancel
  """
  postPaymentIntentsIntentCancel(intent: String!, v1PaymentIntentsCancelInput: V1PaymentIntentsCancelInput): PaymentIntent7
  """
  <p>Capture the funds of an existing uncaptured PaymentIntent when its status is <code>requires_capture</code>.</p>
  
  <p>Uncaptured PaymentIntents will be canceled exactly seven days after they are created.</p>
  
  <p>Learn more about <a href="/docs/payments/capture-later">separate authorization and capture</a>.</p>
  
  Equivalent to POST /v1/payment_intents/{intent}/capture
  """
  postPaymentIntentsIntentCapture(intent: String!, v1PaymentIntentsCaptureInput: V1PaymentIntentsCaptureInput): PaymentIntent7
  """
  <p>Confirm that your customer intends to pay with current or provided
  payment method. Upon confirmation, the PaymentIntent will attempt to initiate
  a payment.</p>
  
  <p>If the selected payment method requires additional authentication steps, the
  PaymentIntent will transition to the <code>requires_action</code> status and
  suggest additional actions via <code>next_action</code>. If payment fails,
  the PaymentIntent will transition to the <code>requires_payment_method</code> status. If
  payment succeeds, the PaymentIntent will transition to the <code>succeeded</code>
  status (or <code>requires_capture</code>, if <code>capture_method</code> is set to <code>manual</code>).</p>
  
  <p>If the <code>confirmation_method</code> is <code>automatic</code>, payment may be attempted
  using our <a href="/docs/stripe-js/reference#stripe-handle-card-payment">client SDKs</a>
  and the PaymentIntent’s <a href="#payment_intent_object-client_secret">client_secret</a>.
  After <code>next_action</code>s are handled by the client, no additional
  confirmation is required to complete the payment.</p>
  
  <p>If the <code>confirmation_method</code> is <code>manual</code>, all payment attempts must be
  initiated using a secret key.
  If any actions are required for the payment, the PaymentIntent will
  return to the <code>requires_confirmation</code> state
  after those actions are completed. Your server needs to then
  explicitly re-confirm the PaymentIntent to initiate the next payment
  attempt. Read the <a href="/docs/payments/payment-intents/web-manual">expanded documentation</a>
  to learn more about manual confirmation.</p>
  
  Equivalent to POST /v1/payment_intents/{intent}/confirm
  """
  postPaymentIntentsIntentConfirm(intent: String!, v1PaymentIntentsConfirmInput: V1PaymentIntentsConfirmInput): PaymentIntent7
  """
  <p>Creates a PaymentMethod object. Read the <a href="/docs/stripe-js/reference#stripe-create-payment-method">Stripe.js reference</a> to learn how to create PaymentMethods via Stripe.js.</p>
  
  Equivalent to POST /v1/payment_methods
  """
  postPaymentMethods(v1PaymentMethods2Input: V1PaymentMethods2Input): PaymentMethod3
  """
  <p>Updates a PaymentMethod object. A PaymentMethod must be attached a customer to be updated.</p>
  
  Equivalent to POST /v1/payment_methods/{payment_method}
  """
  postPaymentMethodsPaymentMethod(paymentMethod: String!, v1PaymentMethod2Input: V1PaymentMethod2Input): PaymentMethod3
  """
  <p>Attaches a PaymentMethod object to a Customer.</p>
  
  <p>To attach a new PaymentMethod to a customer for future payments, we recommend you use a <a href="/docs/api/setup_intents">SetupIntent</a>
  or a PaymentIntent with <a href="/docs/api/payment_intents/create#create_payment_intent-setup_future_usage">setup_future_usage</a>.
  These approaches will perform any necessary steps to ensure that the PaymentMethod can be used in a future payment. Using the
  <code>/v1/payment_methods/:id/attach</code> endpoint does not ensure that future payments can be made with the attached PaymentMethod.
  See <a href="/docs/payments/payment-intents#future-usage">Optimizing cards for future payments</a> for more information about setting up future payments.</p>
  
  <p>To use this PaymentMethod as the default for invoice or subscription payments,
  set <a href="/docs/api/customers/update#update_customer-invoice_settings-default_payment_method"><code>invoice_settings.default_payment_method</code></a>,
  on the Customer to the PaymentMethod’s ID.</p>
  
  Equivalent to POST /v1/payment_methods/{payment_method}/attach
  """
  postPaymentMethodsPaymentMethodAttach(paymentMethod: String!, v1PaymentMethodAttachInput: V1PaymentMethodAttachInput!): PaymentMethod3
  """
  <p>Detaches a PaymentMethod object from a Customer.</p>
  
  Equivalent to POST /v1/payment_methods/{payment_method}/detach
  """
  postPaymentMethodsPaymentMethodDetach(paymentMethod: String!, v1PaymentMethodDetachInput: V1PaymentMethodDetachInput): PaymentMethod3
  """
  <p>To send funds to your own bank account, you create a new payout object. Your <a href="#balance">Stripe balance</a> must be able to cover the payout amount, or you’ll receive an “Insufficient Funds” error.</p>
  
  <p>If your API key is in test mode, money won’t actually be sent, though everything else will occur as if in live mode.</p>
  
  <p>If you are creating a manual payout on a Stripe account that uses multiple payment source types, you’ll need to specify the source type balance that the payout should draw from. The <a href="#balance_object">balance object</a> details available and pending amounts by source type.</p>
  
  Equivalent to POST /v1/payouts
  """
  postPayouts(v1Payouts2Input: V1Payouts2Input!): Payout
  """
  <p>Updates the specified payout by setting the values of the parameters passed. Any parameters not provided will be left unchanged. This request accepts only the metadata as arguments.</p>
  
  Equivalent to POST /v1/payouts/{payout}
  """
  postPayoutsPayout(payout: String!, v1Payout2Input: V1Payout2Input): Payout
  """
  <p>A previously created payout can be canceled if it has not yet been paid out. Funds will be refunded to your available balance. You may not cancel automatic Stripe payouts.</p>
  
  Equivalent to POST /v1/payouts/{payout}/cancel
  """
  postPayoutsPayoutCancel(payout: String!, v1PayoutCancelInput: V1PayoutCancelInput): Payout
  """
  <p>Reverses a payout by debiting the destination bank account. Only payouts for connected accounts to US bank accounts may be reversed at this time. If the payout is in the <code>pending</code> status, <code>/v1/payouts/:id/cancel</code> should be used instead.</p>
  
  <p>By requesting a reversal via <code>/v1/payouts/:id/reverse</code>, you confirm that the authorized signatory of the selected bank account has authorized the debit on the bank account and that no other authorization is required.</p>
  
  Equivalent to POST /v1/payouts/{payout}/reverse
  """
  postPayoutsPayoutReverse(payout: String!, v1PayoutReverseInput: V1PayoutReverseInput): Payout
  """
  <p>You can now model subscriptions more flexibly using the <a href="#prices">Prices API</a>. It replaces the Plans API and is backwards compatible to simplify your migration.</p>
  
  Equivalent to POST /v1/plans
  """
  postPlans(v1Plans2Input: V1Plans2Input!): Plan4
  """
  <p>Updates the specified plan by setting the values of the parameters passed. Any parameters not provided are left unchanged. By design, you cannot change a plan’s ID, amount, currency, or billing cycle.</p>
  
  Equivalent to POST /v1/plans/{plan}
  """
  postPlansPlan(plan: String!, v1Plan2Input: V1Plan2Input): Plan4
  """
  <p>Creates a new price for an existing product. The price can be recurring or one-time.</p>
  
  Equivalent to POST /v1/prices
  """
  postPrices(v1Prices2Input: V1Prices2Input!): Price3
  """
  <p>Updates the specified price by setting the values of the parameters passed. Any parameters not provided are left unchanged.</p>
  
  Equivalent to POST /v1/prices/{price}
  """
  postPricesPrice(price: String!, v1Price2Input: V1Price2Input): Price3
  """
  <p>Creates a new product object.</p>
  
  Equivalent to POST /v1/products
  """
  postProducts(v1Products3Input: V1Products3Input!): Product14
  """
  <p>Updates the specific product by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
  
  Equivalent to POST /v1/products/{id}
  """
  postProductsId(id: String!, v1Product2Input: V1Product2Input): Product14
  """
  <p>A promotion code points to a coupon. You can optionally restrict the code to a specific customer, redemption limit, and expiration date.</p>
  
  Equivalent to POST /v1/promotion_codes
  """
  postPromotionCodes(v1PromotionCodes3Input: V1PromotionCodes3Input!): PromotionCode11
  """
  <p>Updates the specified promotion code by setting the values of the parameters passed. Most fields are, by design, not editable.</p>
  
  Equivalent to POST /v1/promotion_codes/{promotion_code}
  """
  postPromotionCodesPromotionCode(promotionCode: String!, v1PromotionCode2Input: V1PromotionCode2Input): PromotionCode11
  """
  <p>A quote models prices and services for a customer. Default options for <code>header</code>, <code>description</code>, <code>footer</code>, and <code>expires_at</code> can be set in the dashboard via the <a href="https://dashboard.stripe.com/settings/billing/quote">quote template</a>.</p>
  
  Equivalent to POST /v1/quotes
  """
  postQuotes(v1Quotes3Input: V1Quotes3Input): Quote2
  """
  <p>A quote models prices and services for a customer.</p>
  
  Equivalent to POST /v1/quotes/{quote}
  """
  postQuotesQuote(quote: String!, v1Quote2Input: V1Quote2Input): Quote2
  """
  <p>Accepts the specified quote.</p>
  
  Equivalent to POST /v1/quotes/{quote}/accept
  """
  postQuotesQuoteAccept(quote: String!, v1QuoteAcceptInput: V1QuoteAcceptInput): Quote2
  """
  <p>Cancels the quote.</p>
  
  Equivalent to POST /v1/quotes/{quote}/cancel
  """
  postQuotesQuoteCancel(quote: String!, v1QuoteCancelInput: V1QuoteCancelInput): Quote2
  """
  <p>Finalizes the quote.</p>
  
  Equivalent to POST /v1/quotes/{quote}/finalize
  """
  postQuotesQuoteFinalize(quote: String!, v1QuoteFinalizeInput: V1QuoteFinalizeInput): Quote2
  """
  <p>Creates a new <code>ValueListItem</code> object, which is added to the specified parent value list.</p>
  
  Equivalent to POST /v1/radar/value_list_items
  """
  postRadarValueListItems(v1RadarValueListItems3Input: V1RadarValueListItems3Input!): RadarValueListItem
  """
  <p>Creates a new <code>ValueList</code> object, which can then be referenced in rules.</p>
  
  Equivalent to POST /v1/radar/value_lists
  """
  postRadarValueLists(v1RadarValueLists3Input: V1RadarValueLists3Input!): RadarValueList
  """
  <p>Updates a <code>ValueList</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Note that <code>item_type</code> is immutable.</p>
  
  Equivalent to POST /v1/radar/value_lists/{value_list}
  """
  postRadarValueListsValueList(v1RadarValueList2Input: V1RadarValueList2Input, valueList: String!): RadarValueList
  """
  <p>Creates a new <code>Recipient</code> object and verifies the recipient’s identity.
  Also verifies the recipient’s bank account information or debit card, if either is provided.</p>
  
  Equivalent to POST /v1/recipients
  """
  postRecipients(v1Recipients3Input: V1Recipients3Input!): Recipient10
  """
  <p>Updates the specified recipient by setting the values of the parameters passed.
  Any parameters not provided will be left unchanged.</p>
  
  <p>If you update the name or tax ID, the identity verification will automatically be rerun.
  If you update the bank account, the bank account validation will automatically be rerun.</p>
  
  Equivalent to POST /v1/recipients/{id}
  """
  postRecipientsId(id: String!, v1Recipient3Input: V1Recipient3Input): Recipient10
  """
  <p>Create a refund.</p>
  
  Equivalent to POST /v1/refunds
  """
  postRefunds(v1Refunds3Input: V1Refunds3Input): Refund
  """
  <p>Updates the specified refund by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
  
  <p>This request only accepts <code>metadata</code> as an argument.</p>
  
  Equivalent to POST /v1/refunds/{refund}
  """
  postRefundsRefund(refund: String!, v1Refund2Input: V1Refund2Input): Refund
  """
  <p>Creates a new object and begin running the report. (Certain report types require a <a href="https://stripe.com/docs/keys#test-live-modes">live-mode API key</a>.)</p>
  
  Equivalent to POST /v1/reporting/report_runs
  """
  postReportingReportRuns(v1ReportingReportRuns3Input: V1ReportingReportRuns3Input!): ReportingReportRun
  """
  <p>Approves a <code>Review</code> object, closing it and removing it from the list of reviews.</p>
  
  Equivalent to POST /v1/reviews/{review}/approve
  """
  postReviewsReviewApprove(review: String!, v1ReviewApproveInput: V1ReviewApproveInput): Review3
  """
  <p>Creates a SetupIntent object.</p>
  
  <p>After the SetupIntent is created, attach a payment method and <a href="/docs/api/setup_intents/confirm">confirm</a>
  to collect any required permissions to charge the payment method later.</p>
  
  Equivalent to POST /v1/setup_intents
  """
  postSetupIntents(v1SetupIntents2Input: V1SetupIntents2Input): SetupIntent2
  """
  <p>Updates a SetupIntent object.</p>
  
  Equivalent to POST /v1/setup_intents/{intent}
  """
  postSetupIntentsIntent(intent: String!, v1SetupIntents3Input: V1SetupIntents3Input): SetupIntent2
  """
  <p>A SetupIntent object can be canceled when it is in one of these statuses: <code>requires_payment_method</code>, <code>requires_confirmation</code>, or <code>requires_action</code>. </p>
  
  <p>Once canceled, setup is abandoned and any operations on the SetupIntent will fail with an error.</p>
  
  Equivalent to POST /v1/setup_intents/{intent}/cancel
  """
  postSetupIntentsIntentCancel(intent: String!, v1SetupIntentsCancelInput: V1SetupIntentsCancelInput): SetupIntent2
  """
  <p>Confirm that your customer intends to set up the current or
  provided payment method. For example, you would confirm a SetupIntent
  when a customer hits the “Save” button on a payment method management
  page on your website.</p>
  
  <p>If the selected payment method does not require any additional
  steps from the customer, the SetupIntent will transition to the
  <code>succeeded</code> status.</p>
  
  <p>Otherwise, it will transition to the <code>requires_action</code> status and
  suggest additional actions via <code>next_action</code>. If setup fails,
  the SetupIntent will transition to the
  <code>requires_payment_method</code> status.</p>
  
  Equivalent to POST /v1/setup_intents/{intent}/confirm
  """
  postSetupIntentsIntentConfirm(intent: String!, v1SetupIntentsConfirmInput: V1SetupIntentsConfirmInput): SetupIntent2
  """
  <p>Creates a new SKU associated with a product.</p>
  
  Equivalent to POST /v1/skus
  """
  postSkus(v1Skus3Input: V1Skus3Input!): Sku
  """
  <p>Updates the specific SKU by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
  
  <p>Note that a SKU’s <code>attributes</code> are not editable. Instead, you would need to deactivate the existing SKU and create a new one with the new attribute values.</p>
  
  Equivalent to POST /v1/skus/{id}
  """
  postSkusId(id: String!, v1Skus5Input: V1Skus5Input): Sku
  """
  <p>Creates a new source object.</p>
  
  Equivalent to POST /v1/sources
  """
  postSources(v1SourcesInput: V1SourcesInput): Source12
  """
  <p>Updates the specified source by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
  
  <p>This request accepts the <code>metadata</code> and <code>owner</code> as arguments. It is also possible to update type specific information for selected payment methods. Please refer to our <a href="/docs/sources">payment method guides</a> for more detail.</p>
  
  Equivalent to POST /v1/sources/{source}
  """
  postSourcesSource(source: String!, v1Source2Input: V1Source2Input): Source12
  """
  <p>Verify a given source.</p>
  
  Equivalent to POST /v1/sources/{source}/verify
  """
  postSourcesSourceVerify(source: String!, v1SourceVerifyInput: V1SourceVerifyInput!): Source12
  """
  <p>Adds a new item to an existing subscription. No existing items will be changed or replaced.</p>
  
  Equivalent to POST /v1/subscription_items
  """
  postSubscriptionItems(v1SubscriptionItems3Input: V1SubscriptionItems3Input!): SubscriptionItem
  """
  <p>Updates the plan or quantity of an item on a current subscription.</p>
  
  Equivalent to POST /v1/subscription_items/{item}
  """
  postSubscriptionItemsItem(item: String!, v1SubscriptionItems5Input: V1SubscriptionItems5Input): SubscriptionItem
  """
  <p>Creates a usage record for a specified subscription item and date, and fills it with a quantity.</p>
  
  <p>Usage records provide <code>quantity</code> information that Stripe uses to track how much a customer is using your service. With usage information and the pricing model set up by the <a href="https://stripe.com/docs/billing/subscriptions/metered-billing">metered billing</a> plan, Stripe helps you send accurate invoices to your customers.</p>
  
  <p>The default calculation for usage is to add up all the <code>quantity</code> values of the usage records within a billing period. You can change this default behavior with the billing plan’s <code>aggregate_usage</code> <a href="/docs/api/plans/create#create_plan-aggregate_usage">parameter</a>. When there is more than one usage record with the same timestamp, Stripe adds the <code>quantity</code> values together. In most cases, this is the desired resolution, however, you can change this behavior with the <code>action</code> parameter.</p>
  
  <p>The default pricing model for metered billing is <a href="/docs/api/plans/object#plan_object-billing_scheme">per-unit pricing</a>. For finer granularity, you can configure metered billing to have a <a href="https://stripe.com/docs/billing/subscriptions/tiers">tiered pricing</a> model.</p>
  
  Equivalent to POST /v1/subscription_items/{subscription_item}/usage_records
  """
  postSubscriptionItemsSubscriptionItemUsageRecords(subscriptionItem: String!, v1SubscriptionItemUsageRecordsInput: V1SubscriptionItemUsageRecordsInput!): UsageRecord
  """
  <p>Creates a new subscription schedule object. Each customer can have up to 500 active or scheduled subscriptions.</p>
  
  Equivalent to POST /v1/subscription_schedules
  """
  postSubscriptionSchedules(v1SubscriptionSchedules3Input: V1SubscriptionSchedules3Input): SubscriptionSchedule2
  """
  <p>Updates an existing subscription schedule.</p>
  
  Equivalent to POST /v1/subscription_schedules/{schedule}
  """
  postSubscriptionSchedulesSchedule(schedule: String!, v1SubscriptionSchedules4Input: V1SubscriptionSchedules4Input): SubscriptionSchedule2
  """
  <p>Cancels a subscription schedule and its associated subscription immediately (if the subscription schedule has an active subscription). A subscription schedule can only be canceled if its status is <code>not_started</code> or <code>active</code>.</p>
  
  Equivalent to POST /v1/subscription_schedules/{schedule}/cancel
  """
  postSubscriptionSchedulesScheduleCancel(schedule: String!, v1SubscriptionSchedulesCancelInput: V1SubscriptionSchedulesCancelInput): SubscriptionSchedule2
  """
  <p>Releases the subscription schedule immediately, which will stop scheduling of its phases, but leave any existing subscription in place. A schedule can only be released if its status is <code>not_started</code> or <code>active</code>. If the subscription schedule is currently associated with a subscription, releasing it will remove its <code>subscription</code> property and set the subscription’s ID to the <code>released_subscription</code> property.</p>
  
  Equivalent to POST /v1/subscription_schedules/{schedule}/release
  """
  postSubscriptionSchedulesScheduleRelease(schedule: String!, v1SubscriptionSchedulesReleaseInput: V1SubscriptionSchedulesReleaseInput): SubscriptionSchedule2
  """
  <p>Creates a new subscription on an existing customer. Each customer can have up to 500 active or scheduled subscriptions.</p>
  
  Equivalent to POST /v1/subscriptions
  """
  postSubscriptions(v1Subscriptions3Input: V1Subscriptions3Input!): Subscription5
  """
  <p>Updates an existing subscription on a customer to match the specified parameters. When changing plans or quantities, we will optionally prorate the price we charge next month to make up for any price changes. To preview how the proration will be calculated, use the <a href="#upcoming_invoice">upcoming invoice</a> endpoint.</p>
  
  Equivalent to POST /v1/subscriptions/{subscription_exposed_id}
  """
  postSubscriptionsSubscriptionExposedId(subscriptionExposedId: String!, v1Subscription3Input: V1Subscription3Input): Subscription5
  """
  <p>Creates a new tax rate.</p>
  
  Equivalent to POST /v1/tax_rates
  """
  postTaxRates(v1TaxRates3Input: V1TaxRates3Input!): TaxRate
  """
  <p>Updates an existing tax rate.</p>
  
  Equivalent to POST /v1/tax_rates/{tax_rate}
  """
  postTaxRatesTaxRate(taxRate: String!, v1TaxRate2Input: V1TaxRate2Input): TaxRate
  """
  <p>To connect to a reader the Stripe Terminal SDK needs to retrieve a short-lived connection token from Stripe, proxied through your server. On your backend, add an endpoint that creates and returns a connection token.</p>
  
  Equivalent to POST /v1/terminal/connection_tokens
  """
  postTerminalConnectionTokens(v1TerminalConnectionTokensInput: V1TerminalConnectionTokensInput): TerminalConnectionToken
  """
  <p>Creates a new <code>Location</code> object.</p>
  
  Equivalent to POST /v1/terminal/locations
  """
  postTerminalLocations(v1TerminalLocations2Input: V1TerminalLocations2Input!): TerminalLocation
  """
  <p>Updates a <code>Location</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
  
  Equivalent to POST /v1/terminal/locations/{location}
  """
  postTerminalLocationsLocation(location: String!, v1TerminalLocation2Input: V1TerminalLocation2Input): TerminalLocation
  """
  <p>Creates a new <code>Reader</code> object.</p>
  
  Equivalent to POST /v1/terminal/readers
  """
  postTerminalReaders(v1TerminalReaders2Input: V1TerminalReaders2Input!): TerminalReader
  """
  <p>Updates a <code>Reader</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
  
  Equivalent to POST /v1/terminal/readers/{reader}
  """
  postTerminalReadersReader(reader: String!, v1TerminalReader2Input: V1TerminalReader2Input): TerminalReader
  """
  <p>Creates a single-use token that represents a bank account’s details.
  This token can be used with any API method in place of a bank account dictionary. This token can be used only once, by attaching it to a <a href="#accounts">Custom account</a>.</p>
  
  Equivalent to POST /v1/tokens
  """
  postTokens(v1TokensInput: V1TokensInput): Token3
  """
  <p>Top up the balance of an account</p>
  
  Equivalent to POST /v1/topups
  """
  postTopups(v1Topups2Input: V1Topups2Input!): Topup
  """
  <p>Updates the metadata of a top-up. Other top-up details are not editable by design.</p>
  
  Equivalent to POST /v1/topups/{topup}
  """
  postTopupsTopup(topup: String!, v1Topup2Input: V1Topup2Input): Topup
  """
  <p>Cancels a top-up. Only pending top-ups can be canceled.</p>
  
  Equivalent to POST /v1/topups/{topup}/cancel
  """
  postTopupsTopupCancel(topup: String!, v1TopupCancelInput: V1TopupCancelInput): Topup
  """
  <p>To send funds from your Stripe account to a connected account, you create a new transfer object. Your <a href="#balance">Stripe balance</a> must be able to cover the transfer amount, or you’ll receive an “Insufficient Funds” error.</p>
  
  Equivalent to POST /v1/transfers
  """
  postTransfers(v1Transfers2Input: V1Transfers2Input!): Transfer2
  """
  <p>When you create a new reversal, you must specify a transfer to create it on.</p>
  
  <p>When reversing transfers, you can optionally reverse part of the transfer. You can do so as many times as you wish until the entire transfer has been reversed.</p>
  
  <p>Once entirely reversed, a transfer can’t be reversed again. This method will return an error when called on an already-reversed transfer, or when trying to reverse more money than is left on a transfer.</p>
  
  Equivalent to POST /v1/transfers/{id}/reversals
  """
  postTransfersIdReversals(id: String!, v1TransferReversals2Input: V1TransferReversals2Input): TransferReversal2
  """
  <p>Updates the specified transfer by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
  
  <p>This request accepts only metadata as an argument.</p>
  
  Equivalent to POST /v1/transfers/{transfer}
  """
  postTransfersTransfer(transfer: String!, v1Transfer2Input: V1Transfer2Input): Transfer2
  """
  <p>Updates the specified reversal by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
  
  <p>This request only accepts metadata and description as arguments.</p>
  
  Equivalent to POST /v1/transfers/{transfer}/reversals/{id}
  """
  postTransfersTransferReversalsId(id: String!, transfer: String!, v1TransferReversal2Input: V1TransferReversal2Input): TransferReversal2
  """
  <p>A webhook endpoint must have a <code>url</code> and a list of <code>enabled_events</code>. You may optionally specify the Boolean <code>connect</code> parameter. If set to true, then a Connect webhook endpoint that notifies the specified <code>url</code> about events from all connected accounts is created; otherwise an account webhook endpoint that notifies the specified <code>url</code> only about events from your account is created. You can also create webhook endpoints in the <a href="https://dashboard.stripe.com/account/webhooks">webhooks settings</a> section of the Dashboard.</p>
  
  Equivalent to POST /v1/webhook_endpoints
  """
  postWebhookEndpoints(v1WebhookEndpoints3Input: V1WebhookEndpoints3Input!): WebhookEndpoint
  """
  <p>Updates the webhook endpoint. You may edit the <code>url</code>, the list of <code>enabled_events</code>, and the status of your endpoint.</p>
  
  Equivalent to POST /v1/webhook_endpoints/{webhook_endpoint}
  """
  postWebhookEndpointsWebhookEndpoint(v1WebhookEndpoint2Input: V1WebhookEndpoint2Input, webhookEndpoint: String!): WebhookEndpoint
}

input CurrencyInput {
  code: CurrencyCode
  symbol: String
  thousandsSeparator: String
  decimalSeparator: String
  decimalDigits: Int
}

enum CurrencyCode {
  AED
  AFN
  ALL
  AMD
  ANG
  AOA
  ARS
  AUD
  AWG
  AZN
  BAM
  BBD
  BDT
  BGN
  BHD
  BIF
  BMD
  BND
  BOB
  BRL
  BSD
  BTC
  BTN
  BWP
  BYR
  BZD
  CAD
  CDF
  CHF
  CLP
  CNY
  COP
  CRC
  CUC
  CUP
  CVE
  CZK
  DJF
  DKK
  DOP
  DZD
  EGP
  ERN
  ETB
  EUR
  FJD
  FKP
  GBP
  GEL
  GHS
  GIP
  GMD
  GNF
  GTQ
  GYD
  HKD
  HNL
  HRK
  HTG
  HUF
  IDR
  ILS
  INR
  IQD
  IRR
  ISK
  JMD
  JOD
  JPY
  KES
  KGS
  KHR
  KMF
  KPW
  KRW
  KWD
  KYD
  KZT
  LAK
  LBP
  LKR
  LRD
  LSL
  LYD
  MAD
  MDL
  MGA
  MKD
  MMK
  MNT
  MOP
  MRO
  MTL
  MUR
  MVR
  MWK
  MXN
  MYR
  MZN
  NAD
  NGN
  NIO
  NOK
  NPR
  NZD
  OMR
  PAB
  PEN
  PGK
  PHP
  PKR
  PLN
  PYG
  QAR
  RON
  RSD
  RUB
  RWF
  SAR
  SBD
  SCR
  SDD
  SDG
  SEK
  SGD
  SHP
  SLL
  SOS
  SRD
  STD
  SVC
  SYP
  SZL
  THB
  TJS
  TMT
  TND
  TOP
  TRY
  TTD
  TVD
  TWD
  TZS
  UAH
  UGX
  USD
  UYU
  UZS
  VEB
  VEF
  VND
  VUV
  WST
  XAF
  XCD
  XBT
  XOF
  XPF
  YER
  ZAR
  ZMW
  WON
}

"""Carts are the core concept of CartQL. Bring your own PIM and use CartQL to calculate your Cart and Checkout."""
type Cart implements Node {
  """A custom unique identifer for the cart provided by you."""
  id: ID!
  """The current currency details of the cart."""
  currency: Currency!
  """The customer for the cart"""
  email: String
  """The number of total items in the cart"""
  totalItems: Int
  """The number of total unique items in the cart."""
  totalUniqueItems: Int
  """The items currently in the cart."""
  items: [CartItem!]!
  """Sum of all SKU items, excluding discounts, taxes, shipping, including the raw/formatted amounts and currency details"""
  subTotal: Money!
  """The cart total for all items with type SHIPPING, including the raw/formatted amounts and currency details."""
  shippingTotal: Money!
  """The cart total for all items with type TAX, including the raw/formatted amounts and currency details."""
  taxTotal: Money!
  """The grand total for all items, including shipping, including the raw/formatted amounts and currency details."""
  grandTotal: Money!
  """A simple helper method to check if the cart is empty."""
  isEmpty: Boolean
  """A simple helper method to check if the cart hasn't been updated in the last 2 hours."""
  abandoned: Boolean
  """Custom key/value attributes array for the cart."""
  attributes: [CustomCartAttribute!]!
  """Custom meta object for the cart"""
  metadata: Json
  """Any notes related to the cart/checkout"""
  notes: String
  """The date and time the cart was created."""
  createdAt: Date!
  """The date and time the cart was updated."""
  updatedAt: Date!
}

interface Node {
  id: ID!
}

"""Cart and Cart Items use the currency object to format their unit/line totals."""
type Currency {
  """The currency code, e.g. USD, GBP, EUR"""
  code: CurrencyCode
  """The currency smybol, e.g. $, £, €"""
  symbol: String
  """The thousand separator, e.g. ',', '.'"""
  thousandsSeparator: String
  """The decimal separator, e.g. '.'"""
  decimalSeparator: String
  """The decimal places for the currency"""
  decimalDigits: Int
}

"""A Cart Item is used to store data on the items inside the Cart. There are no strict rules about what you use the named fields for."""
type CartItem {
  """A custom unique identifer for the item provided by you."""
  id: ID!
  """Name for the item."""
  name: String
  """Description for the item."""
  description: String
  """The type of cart item this is."""
  type: CartItemType!
  """Array of image URLs for the item."""
  images: [String]
  """Unit total for the individual item."""
  unitTotal: Money!
  """Line total (quantity * unit price)."""
  lineTotal: Money!
  """Quantity for the item."""
  quantity: Int!
  """Custom key/value attributes array for the item."""
  attributes: [CustomCartAttribute!]!
  """Custom metadata for the item."""
  metadata: Json
  """The date and time the item was created."""
  createdAt: Date!
  """The date and time the item was updated."""
  updatedAt: Date!
}

"""Use these enums to group cart items. Cart totals will reflect these enums."""
enum CartItemType {
  SKU
  TAX
  SHIPPING
}

"""The Money type is used when describing the Cart and Cart Item unit/line totals."""
type Money {
  """The raw amount in cents/pence"""
  amount: Int
  """The current currency details of the money amount"""
  currency: Currency!
  """The formatted amount with the cart currency."""
  formatted: String!
}

"""Custom Cart Attributes are used for any type of custom data you want to store on a Cart. These are transferred to Orders when you checkout."""
type CustomCartAttribute {
  key: String!
  value: String
}

scalar Json

scalar Date

input AddToCartInput {
  cartId: ID!
  id: ID!
  name: String
  description: String
  type: CartItemType = SKU
  images: [String]
  price: Int!
  currency: CurrencyInput
  quantity: Int = 1
  attributes: [CustomAttributeInput]
  metadata: Json
}

input CustomAttributeInput {
  key: String!
  value: String
}

input SetCartItemsInput {
  cartId: ID!
  items: [SetCartItemInput!]!
}

input SetCartItemInput {
  id: ID!
  name: String
  description: String
  type: CartItemType = SKU
  images: [String]
  price: Int!
  currency: CurrencyInput
  quantity: Int = 1
  attributes: [CustomAttributeInput]
  metadata: Json
}

input UpdateCartItemInput {
  cartId: ID!
  id: ID!
  name: String
  description: String
  type: CartItemType
  images: [String]
  price: Int
  quantity: Int
  metadata: Json
}

input UpdateItemQuantityInput {
  """The ID of the Cart in which the CartItem belongs to."""
  cartId: ID!
  """The ID of the CartItem you wish to update."""
  id: ID!
  """The amount (as Int) you wish to increment the Cart item quantity by."""
  by: Int!
}

input RemoveCartItemInput {
  """The ID of the Cart in which the CartItem belongs to."""
  cartId: ID!
  """The ID of the CartItem you wish to remove."""
  id: ID!
}

input EmptyCartInput {
  """The ID of the Cart you wish to empty."""
  id: ID!
}

input UpdateCartInput {
  id: ID!
  currency: CurrencyInput
  email: String
  notes: String
  attributes: [CustomAttributeInput]
  metadata: Json
}

input DeleteCartInput {
  """The ID of the Cart you wish to delete."""
  id: ID!
}

type DeletePayload {
  success: Boolean!
  message: String
}

input CheckoutInput {
  cartId: ID!
  email: String!
  notes: String
  shipping: AddressInput!
  billing: AddressInput
  metadata: Json
}

input AddressInput {
  company: String
  name: String!
  line1: String!
  line2: String
  city: String!
  state: String
  postalCode: String!
  country: String!
}

"""Orders are immutable. Once created, you can't change them. The status will automatically reflect the current payment status."""
type Order {
  id: ID!
  """The ID of the cart you want to "checkout"."""
  cartId: ID!
  """The email of the recipient. Can be used later for cart recovery emails."""
  email: String!
  """The orders shipping address."""
  shipping: Address!
  """The orders billing address."""
  billing: Address!
  """The order items that were in the cart."""
  items: [OrderItem!]!
  """Sum of all SKU items, excluding discounts, taxes, shipping, including the raw/formatted amounts and currency details"""
  subTotal: Money!
  """The total for all items with type SHIPPING, including the raw/formatted amounts and currency details."""
  shippingTotal: Money!
  """The total for all items with type TAX, including the raw/formatted amounts and currency details."""
  taxTotal: Money!
  """The grand total for all items, including shipping, including the raw/formatted amounts and currency details."""
  grandTotal: Money!
  """The total item count."""
  totalItems: Int!
  """The total unique item count."""
  totalUniqueItems: Int!
  """The notes set at checkout."""
  notes: String
  """The custom attributes set at checkout"""
  attributes: [CustomAttribute!]!
  """The metadata set at checkout"""
  metadata: Json
  """The current order status. This will reflect the current payment status. The first stage is 'unpaid'."""
  status: OrderStatus!
  """The date and time the order was created."""
  createdAt: Date!
  """The date and time the order status was updated."""
  updatedAt: Date!
}

type Address {
  """Use this to keep an optional company name for addresses."""
  company: String
  """Use this to keep the name of the recipient."""
  name: String!
  """Address line 1 (e.g., street, PO Box, or company name)."""
  line1: String
  """Address line 2 (e.g., apartment, suite, unit, or building)."""
  line2: String
  """City, district, suburb, town, or village."""
  city: String
  """State, county, province, or region."""
  state: String
  """ZIP or postal code."""
  postalCode: String
  """Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2))."""
  country: String
}

"""
A representation of the constituent items of any given order. Can be used to
represent [SKUs](https://stripe.com/docs/api#skus), shipping costs, or taxes owed on the order.

Related guide: [Orders](https://stripe.com/docs/orders/guide).
"""
type OrderItem {
  id: ID!
  name: String
  """Description of the line item, meant to be displayable to the user (e.g., `"Express shipping"`)."""
  description: String!
  """The type of line item. One of `sku`, `tax`, `shipping`, or `discount`."""
  type: String!
  images: [String]
  unitTotal: Money!
  lineTotal: Money!
  """A positive integer representing the number of instances of `parent` that are included in this order item. Applicable/present only if `type` is `sku`."""
  quantity: Int
  createdAt: Date!
  updatedAt: Date!
  attributes: [CustomCartAttribute!]!
  metadata: Json
  """A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount for the line item."""
  amount: Int!
  """Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."""
  currency: String!
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object58!
  """The ID of the associated object for this line item. Expandable if not null (e.g., expandable to a SKU)."""
  parent: JSON
}

type CustomAttribute {
  key: String!
  value: String
}

enum OrderStatus {
  UNPAID
  PAID
}

"""
Cardholder authentication via 3D Secure is initiated by creating a `3D Secure`
object. Once the object has been created, you can use it to authenticate the
cardholder and create a charge.
"""
type ThreeDSecure {
  """Amount of the charge that you will create when authentication completes."""
  amount: Int!
  """True if the cardholder went through the authentication flow and their bank indicated that authentication succeeded."""
  authenticated: Boolean!
  """
  You can store multiple cards on a customer in order to charge the customer
  later. You can also store multiple debit cards on a recipient in order to
  transfer to those cards later.
  
  Related guide: [Card Payments with Sources](https://stripe.com/docs/sources/cards).
  """
  card: Card2!
  """Time at which the object was created. Measured in seconds since the Unix epoch."""
  created: Int!
  """Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."""
  currency: String!
  """Unique identifier for the object."""
  id: String!
  """Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."""
  livemode: Boolean!
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object2!
  """If present, this is the URL that you should send the cardholder to for authentication. If you are going to use Stripe.js to display the authentication page in an iframe, you should use the value "_callback"."""
  redirectUrl: String
  """Possible values are `redirect_pending`, `succeeded`, or `failed`. When the cardholder can be authenticated, the object starts with status `redirect_pending`. When liability will be shifted to the cardholder's bank (either because the cardholder was successfully authenticated, or because the bank has not implemented 3D Secure, the object wlil be in status `succeeded`. `failed` indicates that authentication was attempted unsuccessfully."""
  status: String!
}

"""
You can store multiple cards on a customer in order to charge the customer
later. You can also store multiple debit cards on a recipient in order to
transfer to those cards later.

Related guide: [Card Payments with Sources](https://stripe.com/docs/sources/cards).
"""
type Card2 {
  """The account this card belongs to. This attribute will not be in the card object if the card belongs to a customer or recipient instead."""
  account: JSON
  """City/District/Suburb/Town/Village."""
  addressCity: String
  """Billing address country, if provided when creating card."""
  addressCountry: String
  """Address line 1 (Street address/PO Box/Company name)."""
  addressLine1: String
  """If `address_line1` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`."""
  addressLine1Check: String
  """Address line 2 (Apartment/Suite/Unit/Building)."""
  addressLine2: String
  """State/County/Province/Region."""
  addressState: String
  """ZIP or postal code."""
  addressZip: String
  """If `address_zip` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`."""
  addressZipCheck: String
  """A set of available payout methods for this card. Only values from this set should be passed as the `method` when creating a payout."""
  availablePayoutMethods: [AvailablePayoutMethodsListItem]
  """Card brand. Can be `American Express`, `Diners Club`, `Discover`, `JCB`, `MasterCard`, `UnionPay`, `Visa`, or `Unknown`."""
  brand: String!
  """Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected."""
  country: String
  """Three-letter [ISO code for currency](https://stripe.com/docs/payouts). Only applicable on accounts (not customers or recipients). The card can be used as a transfer destination for funds in this currency."""
  currency: String
  """The customer that this card belongs to. This attribute will not be in the card object if the card belongs to an account or recipient instead."""
  customer: JSON
  """If a CVC was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. A result of unchecked indicates that CVC was provided but hasn't been checked yet. Checks are typically performed when attaching a card to a Customer object, or when creating a charge. For more details, see [Check if a card is valid without a charge](https://support.stripe.com/questions/check-if-a-card-is-valid-without-a-charge)."""
  cvcCheck: String
  """Whether this card is the default external account for its currency."""
  defaultForCurrency: Boolean
  """(For tokenized numbers only.) The last four digits of the device account number."""
  dynamicLast4: String
  """Two-digit number representing the card's expiration month."""
  expMonth: Int!
  """Four-digit number representing the card's expiration year."""
  expYear: Int!
  """
  Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
  
  *Starting May 1, 2021, card fingerprint in India for Connect will change to allow two fingerprints for the same card --- one for India and one for the rest of the world.*
  """
  fingerprint: String
  """Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`."""
  funding: String!
  """Unique identifier for the object."""
  id: String!
  """The last four digits of the card."""
  last4: String!
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."""
  metadata: JSON
  """Cardholder name."""
  name: String
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object!
  """The recipient that this card belongs to. This attribute will not be in the card object if the card belongs to a customer or account instead."""
  recipient: JSON
  """If the card number is tokenized, this is the method that was used. Can be `android_pay` (includes Google Pay), `apple_pay`, `masterpass`, `visa_checkout`, or null."""
  tokenizationMethod: String
}

"""The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."""
scalar JSON

enum AvailablePayoutMethodsListItem {
  INSTANT
  STANDARD
}

enum Object {
  CARD
}

enum Object2 {
  THREE_D_SECURE
}

"""
This is an object representing a Stripe account. You can retrieve it to see
properties on the account like its current e-mail address or if the account is
enabled yet to make live charges.

Some properties, marked below, are available only to platforms that want to
[create and manage Express or Custom accounts](https://stripe.com/docs/connect/accounts).
"""
type Account3 {
  """Business information about the account."""
  businessProfile: BusinessProfile
  """The business type."""
  businessType: BusinessType
  capabilities: AccountCapabilities
  """Whether the account can create live charges."""
  chargesEnabled: Boolean
  company: LegalEntityCompany
  controller: AccountController
  """The account's country."""
  country: String
  """Time at which the object was created. Measured in seconds since the Unix epoch."""
  created: Int
  """Three-letter ISO currency code representing the default currency for the account. This must be a currency that [Stripe supports in the account's country](https://stripe.com/docs/payouts)."""
  defaultCurrency: String
  """Whether account details have been submitted. Standard accounts cannot receive payouts before this is true."""
  detailsSubmitted: Boolean
  """An email address associated with the account. You can treat this as metadata: it is not used for authentication or messaging account holders."""
  email: String
  """External accounts (bank accounts and debit cards) currently attached to this account"""
  externalAccounts: ExternalAccounts
  """Unique identifier for the object."""
  id: String!
  """
  This is an object representing a person associated with a Stripe account.
  
  A platform cannot access a Standard or Express account's persons after the account starts onboarding, such as after generating an account link for the account.
  See the [Standard onboarding](https://stripe.com/docs/connect/standard-accounts) or [Express onboarding documentation](https://stripe.com/docs/connect/express-accounts) for information about platform pre-filling and account onboarding steps.
  
  Related guide: [Handling Identity Verification with the API](https://stripe.com/docs/connect/identity-verification-api#person-information).
  """
  individual: Person
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."""
  metadata: JSON
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object3!
  """Whether Stripe can send payouts to this account."""
  payoutsEnabled: Boolean
  requirements: AccountRequirements
  """Options for customizing how the account functions within Stripe."""
  settings: Settings
  tosAcceptance: AccountTosAcceptance
  """The Stripe account type. Can be `standard`, `express`, or `custom`."""
  type: Type2
}

"""Business information about the account."""
type BusinessProfile {
  """[The merchant category code for the account](https://stripe.com/docs/connect/setting-mcc). MCCs are used to classify businesses based on the goods or services they provide."""
  mcc: String
  """The customer-facing business name."""
  name: String
  """Internal-only description of the product sold or service provided by the business. It's used by Stripe for risk and underwriting purposes."""
  productDescription: String
  """A publicly available mailing address for sending support issues to."""
  supportAddress: SupportAddress
  """A publicly available email address for sending support issues to."""
  supportEmail: String
  """A publicly available phone number to call with support issues."""
  supportPhone: String
  """A publicly available website for handling support issues."""
  supportUrl: String
  """The business's publicly available website."""
  url: String
}

"""A publicly available mailing address for sending support issues to."""
type SupportAddress {
  """City, district, suburb, town, or village."""
  city: String
  """Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2))."""
  country: String
  """Address line 1 (e.g., street, PO Box, or company name)."""
  line1: String
  """Address line 2 (e.g., apartment, suite, unit, or building)."""
  line2: String
  """ZIP or postal code."""
  postalCode: String
  """State, county, province, or region."""
  state: String
}

enum BusinessType {
  COMPANY
  GOVERNMENT_ENTITY
  INDIVIDUAL
  NON_PROFIT
}

type AccountCapabilities {
  """The status of the ACSS Direct Debits payments capability of the account, or whether the account can directly process ACSS Direct Debits charges."""
  acssDebitPayments: AcssDebitPayments
  """The status of the Afterpay Clearpay capability of the account, or whether the account can directly process Afterpay Clearpay charges."""
  afterpayClearpayPayments: AfterpayClearpayPayments
  """The status of the BECS Direct Debit (AU) payments capability of the account, or whether the account can directly process BECS Direct Debit (AU) charges."""
  auBecsDebitPayments: AuBecsDebitPayments
  """The status of the Bacs Direct Debits payments capability of the account, or whether the account can directly process Bacs Direct Debits charges."""
  bacsDebitPayments: BacsDebitPayments
  """The status of the Bancontact payments capability of the account, or whether the account can directly process Bancontact charges."""
  bancontactPayments: BancontactPayments
  """The status of the boleto payments capability of the account, or whether the account can directly process boleto charges."""
  boletoPayments: BoletoPayments
  """The status of the card issuing capability of the account, or whether you can use Issuing to distribute funds on cards"""
  cardIssuing: CardIssuing
  """The status of the card payments capability of the account, or whether the account can directly process credit and debit card charges."""
  cardPayments: CardPayments
  """The status of the Cartes Bancaires payments capability of the account, or whether the account can directly process Cartes Bancaires card charges in EUR currency."""
  cartesBancairesPayments: CartesBancairesPayments
  """The status of the EPS payments capability of the account, or whether the account can directly process EPS charges."""
  epsPayments: EpsPayments
  """The status of the FPX payments capability of the account, or whether the account can directly process FPX charges."""
  fpxPayments: FpxPayments
  """The status of the giropay payments capability of the account, or whether the account can directly process giropay charges."""
  giropayPayments: GiropayPayments
  """The status of the GrabPay payments capability of the account, or whether the account can directly process GrabPay charges."""
  grabpayPayments: GrabpayPayments
  """The status of the iDEAL payments capability of the account, or whether the account can directly process iDEAL charges."""
  idealPayments: IdealPayments
  """The status of the JCB payments capability of the account, or whether the account (Japan only) can directly process JCB credit card charges in JPY currency."""
  jcbPayments: JcbPayments
  """The status of the legacy payments capability of the account."""
  legacyPayments: LegacyPayments
  """The status of the OXXO payments capability of the account, or whether the account can directly process OXXO charges."""
  oxxoPayments: OxxoPayments
  """The status of the P24 payments capability of the account, or whether the account can directly process P24 charges."""
  p24Payments: P24Payments
  """The status of the SEPA Direct Debits payments capability of the account, or whether the account can directly process SEPA Direct Debits charges."""
  sepaDebitPayments: SepaDebitPayments
  """The status of the Sofort payments capability of the account, or whether the account can directly process Sofort charges."""
  sofortPayments: SofortPayments
  """The status of the tax reporting 1099-K (US) capability of the account."""
  taxReportingUs1099K: TaxReportingUs1099K
  """The status of the tax reporting 1099-MISC (US) capability of the account."""
  taxReportingUs1099Misc: TaxReportingUs1099Misc
  """The status of the transfers capability of the account, or whether your platform can transfer funds to the account."""
  transfers: Transfers
}

enum AcssDebitPayments {
  ACTIVE
  INACTIVE
  PENDING
}

enum AfterpayClearpayPayments {
  ACTIVE
  INACTIVE
  PENDING
}

enum AuBecsDebitPayments {
  ACTIVE
  INACTIVE
  PENDING
}

enum BacsDebitPayments {
  ACTIVE
  INACTIVE
  PENDING
}

enum BancontactPayments {
  ACTIVE
  INACTIVE
  PENDING
}

enum BoletoPayments {
  ACTIVE
  INACTIVE
  PENDING
}

enum CardIssuing {
  ACTIVE
  INACTIVE
  PENDING
}

enum CardPayments {
  ACTIVE
  INACTIVE
  PENDING
}

enum CartesBancairesPayments {
  ACTIVE
  INACTIVE
  PENDING
}

enum EpsPayments {
  ACTIVE
  INACTIVE
  PENDING
}

enum FpxPayments {
  ACTIVE
  INACTIVE
  PENDING
}

enum GiropayPayments {
  ACTIVE
  INACTIVE
  PENDING
}

enum GrabpayPayments {
  ACTIVE
  INACTIVE
  PENDING
}

enum IdealPayments {
  ACTIVE
  INACTIVE
  PENDING
}

enum JcbPayments {
  ACTIVE
  INACTIVE
  PENDING
}

enum LegacyPayments {
  ACTIVE
  INACTIVE
  PENDING
}

enum OxxoPayments {
  ACTIVE
  INACTIVE
  PENDING
}

enum P24Payments {
  ACTIVE
  INACTIVE
  PENDING
}

enum SepaDebitPayments {
  ACTIVE
  INACTIVE
  PENDING
}

enum SofortPayments {
  ACTIVE
  INACTIVE
  PENDING
}

enum TaxReportingUs1099K {
  ACTIVE
  INACTIVE
  PENDING
}

enum TaxReportingUs1099Misc {
  ACTIVE
  INACTIVE
  PENDING
}

enum Transfers {
  ACTIVE
  INACTIVE
  PENDING
}

type LegalEntityCompany {
  address: Address
  """The Kana variation of the company's primary address (Japan only)."""
  addressKana: AddressKana
  """The Kanji variation of the company's primary address (Japan only)."""
  addressKanji: AddressKanji
  """Whether the company's directors have been provided. This Boolean will be `true` if you've manually indicated that all directors are provided via [the `directors_provided` parameter](https://stripe.com/docs/api/accounts/update#update_account-company-directors_provided)."""
  directorsProvided: Boolean
  """Whether the company's executives have been provided. This Boolean will be `true` if you've manually indicated that all executives are provided via [the `executives_provided` parameter](https://stripe.com/docs/api/accounts/update#update_account-company-executives_provided), or if Stripe determined that sufficient executives were provided."""
  executivesProvided: Boolean
  """The company's legal name."""
  name: String
  """The Kana variation of the company's legal name (Japan only)."""
  nameKana: String
  """The Kanji variation of the company's legal name (Japan only)."""
  nameKanji: String
  """Whether the company's owners have been provided. This Boolean will be `true` if you've manually indicated that all owners are provided via [the `owners_provided` parameter](https://stripe.com/docs/api/accounts/update#update_account-company-owners_provided), or if Stripe determined that sufficient owners were provided. Stripe determines ownership requirements using both the number of owners provided and their total percent ownership (calculated by adding the `percent_ownership` of each owner together)."""
  ownersProvided: Boolean
  """The company's phone number (used for verification)."""
  phone: String
  """The category identifying the legal structure of the company or legal entity. See [Business structure](https://stripe.com/docs/connect/identity-verification#business-structure) for more details."""
  structure: Structure
  """Whether the company's business ID number was provided."""
  taxIdProvided: Boolean
  """The jurisdiction in which the `tax_id` is registered (Germany-based companies only)."""
  taxIdRegistrar: String
  """Whether the company's business VAT number was provided."""
  vatIdProvided: Boolean
  """Information on the verification state of the company."""
  verification: Verification
}

"""The Kana variation of the company's primary address (Japan only)."""
type AddressKana {
  """City/Ward."""
  city: String
  """Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2))."""
  country: String
  """Block/Building number."""
  line1: String
  """Building details."""
  line2: String
  """ZIP or postal code."""
  postalCode: String
  """Prefecture."""
  state: String
  """Town/cho-me."""
  town: String
}

"""The Kanji variation of the company's primary address (Japan only)."""
type AddressKanji {
  """City/Ward."""
  city: String
  """Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2))."""
  country: String
  """Block/Building number."""
  line1: String
  """Building details."""
  line2: String
  """ZIP or postal code."""
  postalCode: String
  """Prefecture."""
  state: String
  """Town/cho-me."""
  town: String
}

enum Structure {
  FREE_ZONE_ESTABLISHMENT
  FREE_ZONE_LLC
  GOVERNMENT_INSTRUMENTALITY
  GOVERNMENTAL_UNIT
  INCORPORATED_NON_PROFIT
  LIMITED_LIABILITY_PARTNERSHIP
  LLC
  MULTI_MEMBER_LLC
  PRIVATE_COMPANY
  PRIVATE_CORPORATION
  PRIVATE_PARTNERSHIP
  PUBLIC_COMPANY
  PUBLIC_CORPORATION
  PUBLIC_PARTNERSHIP
  SINGLE_MEMBER_LLC
  SOLE_ESTABLISHMENT
  SOLE_PROPRIETORSHIP
  TAX_EXEMPT_GOVERNMENT_INSTRUMENTALITY
  UNINCORPORATED_ASSOCIATION
  UNINCORPORATED_NON_PROFIT
}

"""Information on the verification state of the company."""
type Verification {
  document: Document
}

type Document {
  """The back of a document returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `additional_verification`."""
  back: JSON
  """A user-displayable string describing the verification state of this document."""
  details: String
  """One of `document_corrupt`, `document_expired`, `document_failed_copy`, `document_failed_greyscale`, `document_failed_other`, `document_failed_test_mode`, `document_fraudulent`, `document_incomplete`, `document_invalid`, `document_manipulated`, `document_not_readable`, `document_not_uploaded`, `document_type_not_supported`, or `document_too_large`. A machine-readable code specifying the verification state for this document."""
  detailsCode: String
  """The front of a document returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `additional_verification`."""
  front: JSON
}

type AccountController {
  """`true` if the Connect application retrieving the resource controls the account and can therefore exercise [platform controls](https://stripe.com/docs/connect/platform-controls-for-standard-accounts). Otherwise, this field is null."""
  isController: Boolean
  """The controller type. Can be `application`, if a Connect application controls the account, or `account`, if the account controls itself."""
  type: Type
}

enum Type {
  ACCOUNT
  APPLICATION
}

"""External accounts (bank accounts and debit cards) currently attached to this account"""
type ExternalAccounts {
  """The list contains all external accounts that have been attached to the Stripe account. These may be bank accounts or cards."""
  data: [DataListItem]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

type DataListItem {
  account: JSON
  """The name of the person or business that owns the bank account."""
  accountHolderName: String
  """The type of entity that holds the account. This can be either `individual` or `company`."""
  accountHolderType: String
  """The bank account type. This can only be `checking` or `savings` in most countries. In Japan, this can only be `futsu` or `toza`."""
  accountType: String
  """City/District/Suburb/Town/Village."""
  addressCity: String
  """Billing address country, if provided when creating card."""
  addressCountry: String
  """Address line 1 (Street address/PO Box/Company name)."""
  addressLine1: String
  """If `address_line1` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`."""
  addressLine1Check: String
  """Address line 2 (Apartment/Suite/Unit/Building)."""
  addressLine2: String
  """State/County/Province/Region."""
  addressState: String
  """ZIP or postal code."""
  addressZip: String
  """If `address_zip` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`."""
  addressZipCheck: String
  availablePayoutMethods: JSON
  """Name of the bank associated with the routing number (e.g., `WELLS FARGO`)."""
  bankName: String
  """Card brand. Can be `American Express`, `Diners Club`, `Discover`, `JCB`, `MasterCard`, `UnionPay`, `Visa`, or `Unknown`."""
  brand: String
  country: JSON
  currency: JSON
  customer: JSON
  """If a CVC was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. A result of unchecked indicates that CVC was provided but hasn't been checked yet. Checks are typically performed when attaching a card to a Customer object, or when creating a charge. For more details, see [Check if a card is valid without a charge](https://support.stripe.com/questions/check-if-a-card-is-valid-without-a-charge)."""
  cvcCheck: String
  defaultForCurrency: JSON
  """(For tokenized numbers only.) The last four digits of the device account number."""
  dynamicLast4: String
  """Two-digit number representing the card's expiration month."""
  expMonth: Int
  """Four-digit number representing the card's expiration year."""
  expYear: Int
  fingerprint: JSON
  """Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`."""
  funding: String
  """Unique identifier for the object."""
  id: String
  last4: JSON
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."""
  metadata: JSON
  """Cardholder name."""
  name: String
  object: JSON
  """The recipient that this card belongs to. This attribute will not be in the card object if the card belongs to a customer or account instead."""
  recipient: JSON
  """The routing transit number for the bank account."""
  routingNumber: String
  """
  For bank accounts, possible values are `new`, `validated`, `verified`, `verification_failed`, or `errored`. A bank account that hasn't had any activity or validation performed is `new`. If Stripe can determine that the bank account exists, its status will be `validated`. Note that there often isn’t enough information to know (e.g., for smaller credit unions), and the validation is not always run. If customer bank account verification has succeeded, the bank account status will be `verified`. If the verification failed for any reason, such as microdeposit failure, the status will be `verification_failed`. If a transfer sent to this bank account fails, we'll set the status to `errored` and will not continue to send transfers until the bank details are updated.
  
  For external accounts, possible values are `new` and `errored`. Validations aren't run against external accounts because they're only used for payouts. This means the other statuses don't apply. If a transfer fails, the status is set to `errored` and transfers are stopped until account details are updated.
  """
  status: String
  """If the card number is tokenized, this is the method that was used. Can be `android_pay` (includes Google Pay), `apple_pay`, `masterpass`, `visa_checkout`, or null."""
  tokenizationMethod: String
}

enum Object4 {
  LIST
}

"""
This is an object representing a person associated with a Stripe account.

A platform cannot access a Standard or Express account's persons after the account starts onboarding, such as after generating an account link for the account.
See the [Standard onboarding](https://stripe.com/docs/connect/standard-accounts) or [Express onboarding documentation](https://stripe.com/docs/connect/express-accounts) for information about platform pre-filling and account onboarding steps.

Related guide: [Handling Identity Verification with the API](https://stripe.com/docs/connect/identity-verification-api#person-information).
"""
type Person {
  """The account the person is associated with."""
  account: String!
  address: Address
  addressKana: AddressKana2
  addressKanji: AddressKanji2
  """Time at which the object was created. Measured in seconds since the Unix epoch."""
  created: Int!
  dob: LegalEntityDob
  """The person's email address."""
  email: String
  """The person's first name."""
  firstName: String
  """The Kana variation of the person's first name (Japan only)."""
  firstNameKana: String
  """The Kanji variation of the person's first name (Japan only)."""
  firstNameKanji: String
  """The person's gender (International regulations require either "male" or "female")."""
  gender: String
  """Unique identifier for the object."""
  id: String!
  """Whether the person's `id_number` was provided."""
  idNumberProvided: Boolean
  """The person's last name."""
  lastName: String
  """The Kana variation of the person's last name (Japan only)."""
  lastNameKana: String
  """The Kanji variation of the person's last name (Japan only)."""
  lastNameKanji: String
  """The person's maiden name."""
  maidenName: String
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."""
  metadata: JSON
  """The country where the person is a national."""
  nationality: String
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object5!
  """The person's phone number."""
  phone: String
  """Indicates if the person or any of their representatives, family members, or other closely related persons, declares that they hold or have held an important public job or function, in any jurisdiction."""
  politicalExposure: PoliticalExposure
  relationship: PersonRelationship
  requirements: Requirements
  """Whether the last four digits of the person's Social Security number have been provided (U.S. only)."""
  ssnLast4Provided: Boolean
  verification: LegalEntityPersonVerification
}

type AddressKana2 {
  """City/Ward."""
  city: String
  """Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2))."""
  country: String
  """Block/Building number."""
  line1: String
  """Building details."""
  line2: String
  """ZIP or postal code."""
  postalCode: String
  """Prefecture."""
  state: String
  """Town/cho-me."""
  town: String
}

type AddressKanji2 {
  """City/Ward."""
  city: String
  """Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2))."""
  country: String
  """Block/Building number."""
  line1: String
  """Building details."""
  line2: String
  """ZIP or postal code."""
  postalCode: String
  """Prefecture."""
  state: String
  """Town/cho-me."""
  town: String
}

type LegalEntityDob {
  """The day of birth, between 1 and 31."""
  day: Int
  """The month of birth, between 1 and 12."""
  month: Int
  """The four-digit year of birth."""
  year: Int
}

enum Object5 {
  PERSON
}

enum PoliticalExposure {
  EXISTING
  NONE
}

type PersonRelationship {
  """Whether the person is a director of the account's legal entity. Currently only required for accounts in the EU. Directors are typically members of the governing board of the company, or responsible for ensuring the company meets its regulatory obligations."""
  director: Boolean
  """Whether the person has significant responsibility to control, manage, or direct the organization."""
  executive: Boolean
  """Whether the person is an owner of the account’s legal entity."""
  owner: Boolean
  """The percent owned by the person of the account's legal entity."""
  percentOwnership: Float
  """Whether the person is authorized as the primary representative of the account. This is the person nominated by the business to provide information about themselves, and general information about the account. There can only be one representative at any given time. At the time the account is created, this person should be set to the person responsible for opening the account."""
  representative: Boolean
  """The person's title (e.g., CEO, Support Engineer)."""
  title: String
}

type Requirements {
  """Fields that need to be collected to keep the person's account enabled. If not collected by the account's `current_deadline`, these fields appear in `past_due` as well, and the account is disabled."""
  currentlyDue: [String]
  """Fields that are `currently_due` and need to be collected again because validation or verification failed."""
  errors: [AccountRequirementsError]
  """Fields that need to be collected assuming all volume thresholds are reached. As they become required, they appear in `currently_due` as well, and the account's `current_deadline` becomes set."""
  eventuallyDue: [String]
  """Fields that weren't collected by the account's `current_deadline`. These fields need to be collected to enable the person's account."""
  pastDue: [String]
  """Fields that may become required depending on the results of verification or review. Will be an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due`, `currently_due`, or `past_due`."""
  pendingVerification: [String]
}

type AccountRequirementsError {
  """The code for the type of error."""
  code: Code!
  """An informative message that indicates the error type and provides additional details about the error."""
  reason: String!
  """The specific user onboarding requirement field (in the requirements hash) that needs to be resolved."""
  requirement: String!
}

enum Code {
  INVALID_ADDRESS_CITY_STATE_POSTAL_CODE
  INVALID_STREET_ADDRESS
  INVALID_VALUE_OTHER
  VERIFICATION_DOCUMENT_ADDRESS_MISMATCH
  VERIFICATION_DOCUMENT_ADDRESS_MISSING
  VERIFICATION_DOCUMENT_CORRUPT
  VERIFICATION_DOCUMENT_COUNTRY_NOT_SUPPORTED
  VERIFICATION_DOCUMENT_DOB_MISMATCH
  VERIFICATION_DOCUMENT_DUPLICATE_TYPE
  VERIFICATION_DOCUMENT_EXPIRED
  VERIFICATION_DOCUMENT_FAILED_COPY
  VERIFICATION_DOCUMENT_FAILED_GREYSCALE
  VERIFICATION_DOCUMENT_FAILED_OTHER
  VERIFICATION_DOCUMENT_FAILED_TEST_MODE
  VERIFICATION_DOCUMENT_FRAUDULENT
  VERIFICATION_DOCUMENT_ID_NUMBER_MISMATCH
  VERIFICATION_DOCUMENT_ID_NUMBER_MISSING
  VERIFICATION_DOCUMENT_INCOMPLETE
  VERIFICATION_DOCUMENT_INVALID
  VERIFICATION_DOCUMENT_ISSUE_OR_EXPIRY_DATE_MISSING
  VERIFICATION_DOCUMENT_MANIPULATED
  VERIFICATION_DOCUMENT_MISSING_BACK
  VERIFICATION_DOCUMENT_MISSING_FRONT
  VERIFICATION_DOCUMENT_NAME_MISMATCH
  VERIFICATION_DOCUMENT_NAME_MISSING
  VERIFICATION_DOCUMENT_NATIONALITY_MISMATCH
  VERIFICATION_DOCUMENT_NOT_READABLE
  VERIFICATION_DOCUMENT_NOT_SIGNED
  VERIFICATION_DOCUMENT_NOT_UPLOADED
  VERIFICATION_DOCUMENT_PHOTO_MISMATCH
  VERIFICATION_DOCUMENT_TOO_LARGE
  VERIFICATION_DOCUMENT_TYPE_NOT_SUPPORTED
  VERIFICATION_FAILED_ADDRESS_MATCH
  VERIFICATION_FAILED_BUSINESS_IEC_NUMBER
  VERIFICATION_FAILED_DOCUMENT_MATCH
  VERIFICATION_FAILED_ID_NUMBER_MATCH
  VERIFICATION_FAILED_KEYED_IDENTITY
  VERIFICATION_FAILED_KEYED_MATCH
  VERIFICATION_FAILED_NAME_MATCH
  VERIFICATION_FAILED_OTHER
  VERIFICATION_FAILED_TAX_ID_MATCH
  VERIFICATION_FAILED_TAX_ID_NOT_ISSUED
  VERIFICATION_MISSING_EXECUTIVES
  VERIFICATION_MISSING_OWNERS
  VERIFICATION_REQUIRES_ADDITIONAL_MEMORANDUM_OF_ASSOCIATIONS
}

type LegalEntityPersonVerification {
  """A document showing address, either a passport, local ID card, or utility bill from a well-known utility company."""
  additionalDocument: AdditionalDocument
  """A user-displayable string describing the verification state for the person. For example, this may say "Provided identity information could not be verified"."""
  details: String
  """One of `document_address_mismatch`, `document_dob_mismatch`, `document_duplicate_type`, `document_id_number_mismatch`, `document_name_mismatch`, `document_nationality_mismatch`, `failed_keyed_identity`, or `failed_other`. A machine-readable code specifying the verification state for the person."""
  detailsCode: String
  document: LegalEntityPersonVerificationDocument
  """The state of verification for the person. Possible values are `unverified`, `pending`, or `verified`."""
  status: String!
}

"""A document showing address, either a passport, local ID card, or utility bill from a well-known utility company."""
type AdditionalDocument {
  """The back of an ID returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `identity_document`."""
  back: JSON
  """A user-displayable string describing the verification state of this document. For example, if a document is uploaded and the picture is too fuzzy, this may say "Identity document is too unclear to read"."""
  details: String
  """One of `document_corrupt`, `document_country_not_supported`, `document_expired`, `document_failed_copy`, `document_failed_other`, `document_failed_test_mode`, `document_fraudulent`, `document_failed_greyscale`, `document_incomplete`, `document_invalid`, `document_manipulated`, `document_missing_back`, `document_missing_front`, `document_not_readable`, `document_not_uploaded`, `document_photo_mismatch`, `document_too_large`, or `document_type_not_supported`. A machine-readable code specifying the verification state for this document."""
  detailsCode: String
  """The front of an ID returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `identity_document`."""
  front: JSON
}

type LegalEntityPersonVerificationDocument {
  """The back of an ID returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `identity_document`."""
  back: JSON
  """A user-displayable string describing the verification state of this document. For example, if a document is uploaded and the picture is too fuzzy, this may say "Identity document is too unclear to read"."""
  details: String
  """One of `document_corrupt`, `document_country_not_supported`, `document_expired`, `document_failed_copy`, `document_failed_other`, `document_failed_test_mode`, `document_fraudulent`, `document_failed_greyscale`, `document_incomplete`, `document_invalid`, `document_manipulated`, `document_missing_back`, `document_missing_front`, `document_not_readable`, `document_not_uploaded`, `document_photo_mismatch`, `document_too_large`, or `document_type_not_supported`. A machine-readable code specifying the verification state for this document."""
  detailsCode: String
  """The front of an ID returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `identity_document`."""
  front: JSON
}

enum Object3 {
  ACCOUNT
}

type AccountRequirements {
  """Date by which the fields in `currently_due` must be collected to keep the account enabled. These fields may disable the account sooner if the next threshold is reached before they are collected."""
  currentDeadline: Int
  """Fields that need to be collected to keep the account enabled. If not collected by `current_deadline`, these fields appear in `past_due` as well, and the account is disabled."""
  currentlyDue: [String]
  """If the account is disabled, this string describes why. Can be `requirements.past_due`, `requirements.pending_verification`, `listed`, `platform_paused`, `rejected.fraud`, `rejected.listed`, `rejected.terms_of_service`, `rejected.other`, `under_review`, or `other`."""
  disabledReason: String
  """Fields that are `currently_due` and need to be collected again because validation or verification failed."""
  errors: [AccountRequirementsError]
  """Fields that need to be collected assuming all volume thresholds are reached. As they become required, they appear in `currently_due` as well, and `current_deadline` becomes set."""
  eventuallyDue: [String]
  """Fields that weren't collected by `current_deadline`. These fields need to be collected to enable the account."""
  pastDue: [String]
  """Fields that may become required depending on the results of verification or review. Will be an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due`, `currently_due`, or `past_due`."""
  pendingVerification: [String]
}

"""Options for customizing how the account functions within Stripe."""
type Settings {
  bacsDebitPayments: BacsDebitPayments2
  branding: Branding
  cardIssuing: CardIssuing2
  cardPayments: CardPayments2
  dashboard: Dashboard
  payments: Payments
  payouts: Payouts
  sepaDebitPayments: SepaDebitPayments2
}

type BacsDebitPayments2 {
  """The Bacs Direct Debit Display Name for this account. For payments made with Bacs Direct Debit, this will appear on the mandate, and as the statement descriptor."""
  displayName: String
}

type Branding {
  """(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) An icon for the account. Must be square and at least 128px x 128px."""
  icon: JSON
  """(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) A logo for the account that will be used in Checkout instead of the icon and without the account's name next to it if provided. Must be at least 128px x 128px."""
  logo: JSON
  """A CSS hex color value representing the primary branding color for this account"""
  primaryColor: String
  """A CSS hex color value representing the secondary branding color for this account"""
  secondaryColor: String
}

type CardIssuing2 {
  tosAcceptance: CardIssuingAccountTermsOfService
}

type CardIssuingAccountTermsOfService {
  """The Unix timestamp marking when the account representative accepted the service agreement."""
  date: Int
  """The IP address from which the account representative accepted the service agreement."""
  ip: String
  """The user agent of the browser from which the account representative accepted the service agreement."""
  userAgent: String
}

type CardPayments2 {
  declineOn: AccountDeclineChargeOn
  """The default text that appears on credit card statements when a charge is made. This field prefixes any dynamic `statement_descriptor` specified on the charge. `statement_descriptor_prefix` is useful for maximizing descriptor space for the dynamic portion."""
  statementDescriptorPrefix: String
}

type AccountDeclineChargeOn {
  """Whether Stripe automatically declines charges with an incorrect ZIP or postal code. This setting only applies when a ZIP or postal code is provided and they fail bank verification."""
  avsFailure: Boolean!
  """Whether Stripe automatically declines charges with an incorrect CVC. This setting only applies when a CVC is provided and it fails bank verification."""
  cvcFailure: Boolean!
}

type Dashboard {
  """The display name for this account. This is used on the Stripe Dashboard to differentiate between accounts."""
  displayName: String
  """The timezone used in the Stripe Dashboard for this account. A list of possible time zone values is maintained at the [IANA Time Zone Database](http://www.iana.org/time-zones)."""
  timezone: String
}

type Payments {
  """The default text that appears on credit card statements when a charge is made. This field prefixes any dynamic `statement_descriptor` specified on the charge."""
  statementDescriptor: String
  """The Kana variation of the default text that appears on credit card statements when a charge is made (Japan only)"""
  statementDescriptorKana: String
  """The Kanji variation of the default text that appears on credit card statements when a charge is made (Japan only)"""
  statementDescriptorKanji: String
}

type Payouts {
  """A Boolean indicating if Stripe should try to reclaim negative balances from an attached bank account. See our [Understanding Connect Account Balances](https://stripe.com/docs/connect/account-balances) documentation for details. Default value is `true` for Express accounts and `false` for Custom accounts."""
  debitNegativeBalances: Boolean!
  schedule: TransferSchedule!
  """The text that appears on the bank account statement for payouts. If not set, this defaults to the platform's bank descriptor as set in the Dashboard."""
  statementDescriptor: String
}

type TransferSchedule {
  """The number of days charges for the account will be held before being paid out."""
  delayDays: Int!
  """How frequently funds will be paid out. One of `manual` (payouts only created via API call), `daily`, `weekly`, or `monthly`."""
  interval: String!
  """The day of the month funds will be paid out. Only shown if `interval` is monthly. Payouts scheduled between the 29th and 31st of the month are sent on the last day of shorter months."""
  monthlyAnchor: Int
  """The day of the week funds will be paid out, of the style 'monday', 'tuesday', etc. Only shown if `interval` is weekly."""
  weeklyAnchor: String
}

type SepaDebitPayments2 {
  """SEPA creditor identifier that identifies the company making the payment."""
  creditorId: String
}

type AccountTosAcceptance {
  """The Unix timestamp marking when the account representative accepted their service agreement"""
  date: Int
  """The IP address from which the account representative accepted their service agreement"""
  ip: String
  """The user's service agreement type"""
  serviceAgreement: String
  """The user agent of the browser from which the account representative accepted their service agreement"""
  userAgent: String
}

enum Type2 {
  CUSTOM
  EXPRESS
  STANDARD
}

type Polymorphic {
  account: JSON
  """The name of the person or business that owns the bank account."""
  accountHolderName: String
  """The type of entity that holds the account. This can be either `individual` or `company`."""
  accountHolderType: String
  """The bank account type. This can only be `checking` or `savings` in most countries. In Japan, this can only be `futsu` or `toza`."""
  accountType: String
  """City/District/Suburb/Town/Village."""
  addressCity: String
  """Billing address country, if provided when creating card."""
  addressCountry: String
  """Address line 1 (Street address/PO Box/Company name)."""
  addressLine1: String
  """If `address_line1` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`."""
  addressLine1Check: String
  """Address line 2 (Apartment/Suite/Unit/Building)."""
  addressLine2: String
  """State/County/Province/Region."""
  addressState: String
  """ZIP or postal code."""
  addressZip: String
  """If `address_zip` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`."""
  addressZipCheck: String
  availablePayoutMethods: JSON
  """Name of the bank associated with the routing number (e.g., `WELLS FARGO`)."""
  bankName: String
  """Card brand. Can be `American Express`, `Diners Club`, `Discover`, `JCB`, `MasterCard`, `UnionPay`, `Visa`, or `Unknown`."""
  brand: String
  country: JSON
  currency: JSON
  customer: JSON
  """If a CVC was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. A result of unchecked indicates that CVC was provided but hasn't been checked yet. Checks are typically performed when attaching a card to a Customer object, or when creating a charge. For more details, see [Check if a card is valid without a charge](https://support.stripe.com/questions/check-if-a-card-is-valid-without-a-charge)."""
  cvcCheck: String
  defaultForCurrency: JSON
  """(For tokenized numbers only.) The last four digits of the device account number."""
  dynamicLast4: String
  """Two-digit number representing the card's expiration month."""
  expMonth: Int
  """Four-digit number representing the card's expiration year."""
  expYear: Int
  fingerprint: JSON
  """Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`."""
  funding: String
  """Unique identifier for the object."""
  id: String
  last4: JSON
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."""
  metadata: JSON
  """Cardholder name."""
  name: String
  object: JSON
  """The recipient that this card belongs to. This attribute will not be in the card object if the card belongs to a customer or account instead."""
  recipient: JSON
  """The routing transit number for the bank account."""
  routingNumber: String
  """
  For bank accounts, possible values are `new`, `validated`, `verified`, `verification_failed`, or `errored`. A bank account that hasn't had any activity or validation performed is `new`. If Stripe can determine that the bank account exists, its status will be `validated`. Note that there often isn’t enough information to know (e.g., for smaller credit unions), and the validation is not always run. If customer bank account verification has succeeded, the bank account status will be `verified`. If the verification failed for any reason, such as microdeposit failure, the status will be `verification_failed`. If a transfer sent to this bank account fails, we'll set the status to `errored` and will not continue to send transfers until the bank details are updated.
  
  For external accounts, possible values are `new` and `errored`. Validations aren't run against external accounts because they're only used for payouts. This means the other statuses don't apply. If a transfer fails, the status is set to `errored` and transfers are stopped until account details are updated.
  """
  status: String
  """If the card number is tokenized, this is the method that was used. Can be `android_pay` (includes Google Pay), `apple_pay`, `masterpass`, `visa_checkout`, or null."""
  tokenizationMethod: String
}

type ListAccountCapability {
  data: [Capability]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

"""
This is an object representing a capability for a Stripe account.

Related guide: [Account capabilities](https://stripe.com/docs/connect/account-capabilities).
"""
type Capability {
  """The account for which the capability enables functionality."""
  account: JSON!
  """The identifier for the capability."""
  id: String!
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object6!
  """Whether the capability has been requested."""
  requested: Boolean!
  """Time at which the capability was requested. Measured in seconds since the Unix epoch."""
  requestedAt: Int
  requirements: AccountCapabilityRequirements
  """The status of the capability. Can be `active`, `inactive`, `pending`, or `unrequested`."""
  status: Status5!
}

enum Object6 {
  CAPABILITY
}

type AccountCapabilityRequirements {
  """Date by which the fields in `currently_due` must be collected to keep the capability enabled for the account. These fields may disable the capability sooner if the next threshold is reached before they are collected."""
  currentDeadline: Int
  """Fields that need to be collected to keep the capability enabled. If not collected by `current_deadline`, these fields appear in `past_due` as well, and the capability is disabled."""
  currentlyDue: [String]!
  """
  If the capability is disabled, this string describes why. Can be `requirements.past_due`, `requirements.pending_verification`, `listed`, `platform_paused`, `rejected.fraud`, `rejected.listed`, `rejected.terms_of_service`, `rejected.other`, `under_review`, or `other`.
  
  `rejected.unsupported_business` means that the account's business is not supported by the capability. For example, payment methods may restrict the businesses they support in their terms of service:
  
  - [Afterpay Clearpay's terms of service](/afterpay-clearpay/legal#restricted-businesses)
  
  If you believe that the rejection is in error, please contact support@stripe.com for assistance.
  """
  disabledReason: String
  """Fields that are `currently_due` and need to be collected again because validation or verification failed."""
  errors: [AccountRequirementsError]!
  """Fields that need to be collected assuming all volume thresholds are reached. As they become required, they appear in `currently_due` as well, and `current_deadline` becomes set."""
  eventuallyDue: [String]!
  """Fields that weren't collected by `current_deadline`. These fields need to be collected to enable the capability on the account."""
  pastDue: [String]!
  """Fields that may become required depending on the results of verification or review. Will be an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due`, `currently_due`, or `past_due`."""
  pendingVerification: [String]!
}

enum Status5 {
  ACTIVE
  DISABLED
  INACTIVE
  PENDING
  UNREQUESTED
}

type ExternalAccountList {
  """The list contains all external accounts that have been attached to the Stripe account. These may be bank accounts or cards."""
  data: [DataListItem]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

type V1AccountPeople2 {
  data: [Person]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

input Relationship2Input {
  director: Boolean
  executive: Boolean
  owner: Boolean
  representative: Boolean
}

type V1AccountPersons2 {
  data: [Person]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

type V1Accounts2 {
  data: [Account3]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

type ApplePayDomainList {
  data: [ApplePayDomain]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

type ApplePayDomain {
  """Time at which the object was created. Measured in seconds since the Unix epoch."""
  created: Int!
  domainName: String!
  """Unique identifier for the object."""
  id: String!
  """Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."""
  livemode: Boolean!
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object9!
}

enum Object9 {
  APPLE_PAY_DOMAIN
}

type V1ApplicationFees2 {
  data: [ApplicationFee]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

type ApplicationFee {
  """ID of the Stripe account this fee was taken from."""
  account: JSON!
  """Amount earned, in %s."""
  amount: Int!
  """Amount in %s refunded (can be less than the amount attribute on the fee if a partial refund was issued)"""
  amountRefunded: Int!
  """ID of the Connect application that earned the fee."""
  application: JSON!
  """Balance transaction that describes the impact of this collected application fee on your account balance (not including refunds)."""
  balanceTransaction: JSON
  """ID of the charge that the application fee was taken from."""
  charge: JSON!
  """Time at which the object was created. Measured in seconds since the Unix epoch."""
  created: Int!
  """Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."""
  currency: String!
  """Unique identifier for the object."""
  id: String!
  """Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."""
  livemode: Boolean!
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object10!
  """ID of the corresponding charge on the platform account, if this fee was the result of a charge using the `destination` parameter."""
  originatingTransaction: JSON
  """Whether the fee has been fully refunded. If the fee is only partially refunded, this attribute will still be false."""
  refunded: Boolean!
  """A list of refunds that have been applied to the fee."""
  refunds: Refunds!
}

enum Object10 {
  APPLICATION_FEE
}

"""A list of refunds that have been applied to the fee."""
type Refunds {
  """Details about each object."""
  data: [FeeRefund]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

"""
`Application Fee Refund` objects allow you to refund an application fee that
has previously been created but not yet refunded. Funds will be refunded to
the Stripe account from which the fee was originally collected.

Related guide: [Refunding Application Fees](https://stripe.com/docs/connect/destination-charges#refunding-app-fee).
"""
type FeeRefund {
  """Amount, in %s."""
  amount: Int!
  """Balance transaction that describes the impact on your account balance."""
  balanceTransaction: JSON
  """Time at which the object was created. Measured in seconds since the Unix epoch."""
  created: Int!
  """Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."""
  currency: String!
  """ID of the application fee that was refunded."""
  fee: JSON!
  """Unique identifier for the object."""
  id: String!
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."""
  metadata: JSON
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object11!
}

enum Object11 {
  FEE_REFUND
}

type FeeRefundList {
  """Details about each object."""
  data: [FeeRefund]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

"""
This is an object representing your Stripe balance. You can retrieve it to see
the balance currently on your Stripe account.

You can also retrieve the balance history, which contains a list of
[transactions](https://stripe.com/docs/reporting/balance-transaction-types) that contributed to the balance
(charges, payouts, and so forth).

The available and pending amounts for each currency are broken down further by
payment source types.

Related guide: [Understanding Connect Account Balances](https://stripe.com/docs/connect/account-balances).
"""
type Balance {
  """Funds that are available to be transferred or paid out, whether automatically by Stripe or explicitly via the [Transfers API](https://stripe.com/docs/api#transfers) or [Payouts API](https://stripe.com/docs/api#payouts). The available balance for each currency and payment type can be found in the `source_types` property."""
  available: [BalanceAmount]!
  """Funds held due to negative balances on connected Custom accounts. The connect reserve balance for each currency and payment type can be found in the `source_types` property."""
  connectReserved: [BalanceAmount]
  """Funds that can be paid out using Instant Payouts."""
  instantAvailable: [BalanceAmount]
  issuing: BalanceDetail
  """Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."""
  livemode: Boolean!
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object12!
  """Funds that are not yet available in the balance, due to the 7-day rolling pay cycle. The pending balance for each currency, and for each payment type, can be found in the `source_types` property."""
  pending: [BalanceAmount]!
}

type BalanceAmount {
  """Balance amount."""
  amount: Int!
  """Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."""
  currency: String!
  sourceTypes: BalanceAmountBySourceType
}

type BalanceAmountBySourceType {
  """Amount for bank account."""
  bankAccount: Int
  """Amount for card."""
  card: Int
  """Amount for FPX."""
  fpx: Int
}

type BalanceDetail {
  """Funds that are available for use."""
  available: [BalanceAmount]!
}

enum Object12 {
  BALANCE
}

type BalanceTransactionsList {
  data: [BalanceTransaction3]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

"""
Balance transactions represent funds moving through your Stripe account.
They're created for every type of transaction that comes into or flows out of your Stripe account balance.

Related guide: [Balance Transaction Types](https://stripe.com/docs/reports/balance-transaction-types).
"""
type BalanceTransaction3 {
  """Gross amount of the transaction, in %s."""
  amount: Int!
  """The date the transaction's net funds will become available in the Stripe balance."""
  availableOn: Int!
  """Time at which the object was created. Measured in seconds since the Unix epoch."""
  created: Int!
  """Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."""
  currency: String!
  """An arbitrary string attached to the object. Often useful for displaying to users."""
  description: String
  """The exchange rate used, if applicable, for this transaction. Specifically, if money was converted from currency A to currency B, then the `amount` in currency A, times `exchange_rate`, would be the `amount` in currency B. For example, suppose you charged a customer 10.00 EUR. Then the PaymentIntent's `amount` would be `1000` and `currency` would be `eur`. Suppose this was converted into 12.34 USD in your Stripe account. Then the BalanceTransaction's `amount` would be `1234`, `currency` would be `usd`, and `exchange_rate` would be `1.234`."""
  exchangeRate: Float
  """Fees (in %s) paid for this transaction."""
  fee: Int!
  """Detailed breakdown of fees (in %s) paid for this transaction."""
  feeDetails: [Fee3]!
  """Unique identifier for the object."""
  id: String!
  """Net amount of the transaction, in %s."""
  net: Int!
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object13!
  """[Learn more](https://stripe.com/docs/reports/reporting-categories) about how reporting categories can help you understand balance transactions from an accounting perspective."""
  reportingCategory: String!
  """The Stripe object to which this transaction is related."""
  source: JSON
  """If the transaction's net funds are available in the Stripe balance yet. Either `available` or `pending`."""
  status: String!
  """Transaction type: `adjustment`, `advance`, `advance_funding`, `anticipation_repayment`, `application_fee`, `application_fee_refund`, `charge`, `connect_collection_transfer`, `contribution`, `issuing_authorization_hold`, `issuing_authorization_release`, `issuing_dispute`, `issuing_transaction`, `payment`, `payment_failure_refund`, `payment_refund`, `payout`, `payout_cancel`, `payout_failure`, `refund`, `refund_failure`, `reserve_transaction`, `reserved_funds`, `stripe_fee`, `stripe_fx_fee`, `tax_fee`, `topup`, `topup_reversal`, `transfer`, `transfer_cancel`, `transfer_failure`, or `transfer_refund`. [Learn more](https://stripe.com/docs/reports/balance-transaction-types) about balance transaction types and what they represent. If you are looking to classify transactions for accounting purposes, you might want to consider `reporting_category` instead."""
  type: Type6!
}

type Fee3 {
  """Amount of the fee, in cents."""
  amount: Int!
  """ID of the Connect application that earned the fee."""
  application: String
  """Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."""
  currency: String!
  """An arbitrary string attached to the object. Often useful for displaying to users."""
  description: String
  """Type of the fee, one of: `application_fee`, `stripe_fee` or `tax`."""
  type: String!
}

enum Object13 {
  BALANCE_TRANSACTION
}

enum Type6 {
  ADJUSTMENT
  ADVANCE
  ADVANCE_FUNDING
  ANTICIPATION_REPAYMENT
  APPLICATION_FEE
  APPLICATION_FEE_REFUND
  CHARGE
  CONNECT_COLLECTION_TRANSFER
  CONTRIBUTION
  ISSUING_AUTHORIZATION_HOLD
  ISSUING_AUTHORIZATION_RELEASE
  ISSUING_DISPUTE
  ISSUING_TRANSACTION
  PAYMENT
  PAYMENT_FAILURE_REFUND
  PAYMENT_REFUND
  PAYOUT
  PAYOUT_CANCEL
  PAYOUT_FAILURE
  REFUND
  REFUND_FAILURE
  RESERVE_TRANSACTION
  RESERVED_FUNDS
  STRIPE_FEE
  STRIPE_FX_FEE
  TAX_FEE
  TOPUP
  TOPUP_REVERSAL
  TRANSFER
  TRANSFER_CANCEL
  TRANSFER_FAILURE
  TRANSFER_REFUND
}

type V1BillingPortalConfigurations2 {
  data: [BillingPortalConfiguration]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

"""A portal configuration describes the functionality and behavior of a portal session."""
type BillingPortalConfiguration {
  """Whether the configuration is active and can be used to create portal sessions."""
  active: Boolean!
  """ID of the Connect Application that created the configuration."""
  application: String
  businessProfile: PortalBusinessProfile!
  """Time at which the object was created. Measured in seconds since the Unix epoch."""
  created: Int!
  """The default URL to redirect customers to when they click on the portal's link to return to your website. This can be [overriden](https://stripe.com/docs/api/customer_portal/sessions/create#create_portal_session-return_url) when creating the session."""
  defaultReturnUrl: String
  features: PortalFeatures!
  """Unique identifier for the object."""
  id: String!
  """Whether the configuration is the default. If `true`, this configuration can be managed in the Dashboard and portal sessions will use this configuration unless it is overriden when creating the session."""
  isDefault: Boolean!
  """Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."""
  livemode: Boolean!
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object14!
  """Time at which the object was last updated. Measured in seconds since the Unix epoch."""
  updated: Int!
}

type PortalBusinessProfile {
  """The messaging shown to customers in the portal."""
  headline: String
  """A link to the business’s publicly available privacy policy."""
  privacyPolicyUrl: String!
  """A link to the business’s publicly available terms of service."""
  termsOfServiceUrl: String!
}

type PortalFeatures {
  customerUpdate: PortalCustomerUpdate!
  invoiceHistory: PortalInvoiceList!
  paymentMethodUpdate: PortalPaymentMethodUpdate!
  subscriptionCancel: PortalSubscriptionCancel!
  subscriptionPause: PortalSubscriptionPause!
  subscriptionUpdate: PortalSubscriptionUpdate!
}

type PortalCustomerUpdate {
  """The types of customer updates that are supported. When empty, customers are not updateable."""
  allowedUpdates: [AllowedUpdatesListItem]!
  """Whether the feature is enabled."""
  enabled: Boolean!
}

enum AllowedUpdatesListItem {
  ADDRESS
  EMAIL
  PHONE
  SHIPPING
  TAX_ID
}

type PortalInvoiceList {
  """Whether the feature is enabled."""
  enabled: Boolean!
}

type PortalPaymentMethodUpdate {
  """Whether the feature is enabled."""
  enabled: Boolean!
}

type PortalSubscriptionCancel {
  """Whether the feature is enabled."""
  enabled: Boolean!
  """Whether to cancel subscriptions immediately or at the end of the billing period."""
  mode: Mode!
  """Whether to create prorations when canceling subscriptions. Possible values are `none` and `create_prorations`."""
  prorationBehavior: ProrationBehavior!
}

enum Mode {
  AT_PERIOD_END
  IMMEDIATELY
}

enum ProrationBehavior {
  ALWAYS_INVOICE
  CREATE_PRORATIONS
  NONE
}

type PortalSubscriptionPause {
  """Whether the feature is enabled."""
  enabled: Boolean!
}

type PortalSubscriptionUpdate {
  """The types of subscription updates that are supported for items listed in the `products` attribute. When empty, subscriptions are not updateable."""
  defaultAllowedUpdates: [DefaultAllowedUpdatesListItem]!
  """Whether the feature is enabled."""
  enabled: Boolean!
  """The list of products that support subscription updates."""
  products: [PortalSubscriptionUpdateProduct]
  """Determines how to handle prorations resulting from subscription updates. Valid values are `none`, `create_prorations`, and `always_invoice`."""
  prorationBehavior: ProrationBehavior2!
}

enum DefaultAllowedUpdatesListItem {
  PRICE
  PROMOTION_CODE
  QUANTITY
}

type PortalSubscriptionUpdateProduct {
  """The list of price IDs which, when subscribed to, a subscription can be updated."""
  prices: [String]!
  """The product ID."""
  product: String!
}

enum ProrationBehavior2 {
  ALWAYS_INVOICE
  CREATE_PRORATIONS
  NONE
}

enum Object14 {
  BILLING_PORTAL_CONFIGURATION
}

type V1BitcoinReceivers2 {
  data: [BitcoinReceiver]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

type BitcoinReceiver {
  """True when this bitcoin receiver has received a non-zero amount of bitcoin."""
  active: Boolean!
  """The amount of `currency` that you are collecting as payment."""
  amount: Int!
  """The amount of `currency` to which `bitcoin_amount_received` has been converted."""
  amountReceived: Int!
  """The amount of bitcoin that the customer should send to fill the receiver. The `bitcoin_amount` is denominated in Satoshi: there are 10^8 Satoshi in one bitcoin."""
  bitcoinAmount: Int!
  """The amount of bitcoin that has been sent by the customer to this receiver."""
  bitcoinAmountReceived: Int!
  """This URI can be displayed to the customer as a clickable link (to activate their bitcoin client) or as a QR code (for mobile wallets)."""
  bitcoinUri: String!
  """Time at which the object was created. Measured in seconds since the Unix epoch."""
  created: Int!
  """Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) to which the bitcoin will be converted."""
  currency: String!
  """The customer ID of the bitcoin receiver."""
  customer: String
  """An arbitrary string attached to the object. Often useful for displaying to users."""
  description: String
  """The customer's email address, set by the API call that creates the receiver."""
  email: String
  """This flag is initially false and updates to true when the customer sends the `bitcoin_amount` to this receiver."""
  filled: Boolean!
  """Unique identifier for the object."""
  id: String!
  """A bitcoin address that is specific to this receiver. The customer can send bitcoin to this address to fill the receiver."""
  inboundAddress: String!
  """Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."""
  livemode: Boolean!
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."""
  metadata: JSON
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object16!
  """The ID of the payment created from the receiver, if any. Hidden when viewing the receiver with a publishable key."""
  payment: String
  """The refund address of this bitcoin receiver."""
  refundAddress: String
  """A list with one entry for each time that the customer sent bitcoin to the receiver. Hidden when viewing the receiver with a publishable key."""
  transactions: Transactions
  """This receiver contains uncaptured funds that can be used for a payment or refunded."""
  uncapturedFunds: Boolean!
  """Indicate if this source is used for payment."""
  usedForPayment: Boolean
}

enum Object16 {
  BITCOIN_RECEIVER
}

"""A list with one entry for each time that the customer sent bitcoin to the receiver. Hidden when viewing the receiver with a publishable key."""
type Transactions {
  """Details about each object."""
  data: [BitcoinTransaction]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

type BitcoinTransaction {
  """The amount of `currency` that the transaction was converted to in real-time."""
  amount: Int!
  """The amount of bitcoin contained in the transaction."""
  bitcoinAmount: Int!
  """Time at which the object was created. Measured in seconds since the Unix epoch."""
  created: Int!
  """Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) to which this transaction was converted."""
  currency: String!
  """Unique identifier for the object."""
  id: String!
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object17!
  """The receiver to which this transaction was sent."""
  receiver: String!
}

enum Object17 {
  BITCOIN_TRANSACTION
}

type BitcoinTransactionList {
  """Details about each object."""
  data: [BitcoinTransaction]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

type V1Charges2 {
  data: [Charge2]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

"""
To charge a credit or a debit card, you create a `Charge` object. You can
retrieve and refund individual charges as well as list all charges. Charges
are identified by a unique, random ID.

Related guide: [Accept a payment with the Charges API](https://stripe.com/docs/payments/accept-a-payment-charges).
"""
type Charge2 {
  """Amount intended to be collected by this payment. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99)."""
  amount: Int!
  """Amount in %s captured (can be less than the amount attribute on the charge if a partial capture was made)."""
  amountCaptured: Int!
  """Amount in %s refunded (can be less than the amount attribute on the charge if a partial refund was issued)."""
  amountRefunded: Int!
  """ID of the Connect application that created the charge."""
  application: JSON
  """The application fee (if any) for the charge. [See the Connect documentation](https://stripe.com/docs/connect/direct-charges#collecting-fees) for details."""
  applicationFee: JSON
  """The amount of the application fee (if any) requested for the charge. [See the Connect documentation](https://stripe.com/docs/connect/direct-charges#collecting-fees) for details."""
  applicationFeeAmount: Int
  """ID of the balance transaction that describes the impact of this charge on your account balance (not including refunds or disputes)."""
  balanceTransaction: JSON
  billingDetails: BillingDetails!
  """The full statement descriptor that is passed to card networks, and that is displayed on your customers' credit card and bank statements. Allows you to see what the statement descriptor looks like after the static and dynamic portions are combined."""
  calculatedStatementDescriptor: String
  """If the charge was created without capturing, this Boolean represents whether it is still uncaptured or has since been captured."""
  captured: Boolean!
  """Time at which the object was created. Measured in seconds since the Unix epoch."""
  created: Int!
  """Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."""
  currency: String!
  """ID of the customer this charge is for if one exists."""
  customer: JSON
  """An arbitrary string attached to the object. Often useful for displaying to users."""
  description: String
  """Whether the charge has been disputed."""
  disputed: Boolean!
  """Error code explaining reason for charge failure if available (see [the errors section](https://stripe.com/docs/api#errors) for a list of codes)."""
  failureCode: String
  """Message to user further explaining reason for charge failure if available."""
  failureMessage: String
  """Information on fraud assessments for the charge."""
  fraudDetails: FraudDetails
  """Unique identifier for the object."""
  id: String!
  """ID of the invoice this charge is for if one exists."""
  invoice: JSON
  """Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."""
  livemode: Boolean!
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."""
  metadata: JSON!
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object18!
  """The account (if any) the charge was made on behalf of without triggering an automatic transfer. See the [Connect documentation](https://stripe.com/docs/connect/charges-transfers) for details."""
  onBehalfOf: JSON
  """ID of the order this charge is for if one exists."""
  order: JSON
  """Details about whether the payment was accepted, and why. See [understanding declines](https://stripe.com/docs/declines) for details."""
  outcome: Outcome
  """`true` if the charge succeeded, or was successfully authorized for later capture."""
  paid: Boolean!
  """ID of the PaymentIntent associated with this charge, if one exists."""
  paymentIntent: JSON
  """ID of the payment method used in this charge."""
  paymentMethod: String
  """Details about the payment method at the time of the transaction."""
  paymentMethodDetails: PaymentMethodDetails
  """This is the email address that the receipt for this charge was sent to."""
  receiptEmail: String
  """This is the transaction number that appears on email receipts sent for this charge. This attribute will be `null` until a receipt has been sent."""
  receiptNumber: String
  """This is the URL to view the receipt for this charge. The receipt is kept up-to-date to the latest state of the charge, including any refunds. If the charge is for an Invoice, the receipt will be stylized as an Invoice receipt."""
  receiptUrl: String
  """Whether the charge has been fully refunded. If the charge is only partially refunded, this attribute will still be false."""
  refunded: Boolean!
  """A list of refunds that have been applied to the charge."""
  refunds: RefundList!
  """ID of the review associated with this charge if one exists."""
  review: JSON
  """Shipping information for the charge."""
  shipping: Shipping
  """The transfer ID which created this charge. Only present if the charge came from another Stripe account. [See the Connect documentation](https://stripe.com/docs/connect/destination-charges) for details."""
  sourceTransfer: JSON
  """For card charges, use `statement_descriptor_suffix` instead. Otherwise, you can use this value as the complete description of a charge on your customers’ statements. Must contain at least one letter, maximum 22 characters."""
  statementDescriptor: String
  """Provides information about the charge that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor."""
  statementDescriptorSuffix: String
  """The status of the payment is either `succeeded`, `pending`, or `failed`."""
  status: String!
  """ID of the transfer to the `destination` account (only applicable if the charge was created using the `destination` parameter)."""
  transfer: JSON
  """An optional dictionary including the account to automatically transfer to as part of a destination charge. [See the Connect documentation](https://stripe.com/docs/connect/destination-charges) for details."""
  transferData: TransferData
  """A string that identifies this transaction as part of a group. See the [Connect documentation](https://stripe.com/docs/connect/charges-transfers#transfer-options) for details."""
  transferGroup: String
}

type BillingDetails {
  """Billing address."""
  address: Address4
  """Email address."""
  email: String
  """Full name."""
  name: String
  """Billing phone number (including extension)."""
  phone: String
}

"""Billing address."""
type Address4 {
  """City, district, suburb, town, or village."""
  city: String
  """Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2))."""
  country: String
  """Address line 1 (e.g., street, PO Box, or company name)."""
  line1: String
  """Address line 2 (e.g., apartment, suite, unit, or building)."""
  line2: String
  """ZIP or postal code."""
  postalCode: String
  """State, county, province, or region."""
  state: String
}

"""Information on fraud assessments for the charge."""
type FraudDetails {
  """Assessments from Stripe. If set, the value is `fraudulent`."""
  stripeReport: String
  """Assessments reported by you. If set, possible values of are `safe` and `fraudulent`."""
  userReport: String
}

enum Object18 {
  CHARGE
}

"""Details about whether the payment was accepted, and why. See [understanding declines](https://stripe.com/docs/declines) for details."""
type Outcome {
  """Possible values are `approved_by_network`, `declined_by_network`, `not_sent_to_network`, and `reversed_after_approval`. The value `reversed_after_approval` indicates the payment was [blocked by Stripe](https://stripe.com/docs/declines#blocked-payments) after bank authorization, and may temporarily appear as "pending" on a cardholder's statement."""
  networkStatus: String
  """An enumerated value providing a more detailed explanation of the outcome's `type`. Charges blocked by Radar's default block rule have the value `highest_risk_level`. Charges placed in review by Radar's default review rule have the value `elevated_risk_level`. Charges authorized, blocked, or placed in review by custom rules have the value `rule`. See [understanding declines](https://stripe.com/docs/declines) for more details."""
  reason: String
  """Stripe Radar's evaluation of the riskiness of the payment. Possible values for evaluated payments are `normal`, `elevated`, `highest`. For non-card payments, and card-based payments predating the public assignment of risk levels, this field will have the value `not_assessed`. In the event of an error in the evaluation, this field will have the value `unknown`. This field is only available with Radar."""
  riskLevel: String
  """Stripe Radar's evaluation of the riskiness of the payment. Possible values for evaluated payments are between 0 and 100. For non-card payments, card-based payments predating the public assignment of risk scores, or in the event of an error during evaluation, this field will not be present. This field is only available with Radar for Fraud Teams."""
  riskScore: Int
  """The ID of the Radar rule that matched the payment, if applicable."""
  rule: JSON
  """A human-readable description of the outcome type and reason, designed for you (the recipient of the payment), not your customer."""
  sellerMessage: String
  """Possible values are `authorized`, `manual_review`, `issuer_declined`, `blocked`, and `invalid`. See [understanding declines](https://stripe.com/docs/declines) and [Radar reviews](https://stripe.com/docs/radar/reviews) for details."""
  type: String
}

"""Details about the payment method at the time of the transaction."""
type PaymentMethodDetails {
  achCreditTransfer: AchCreditTransfer
  achDebit: AchDebit
  acssDebit: AcssDebit
  afterpayClearpay: AfterpayClearpay
  alipay: Alipay
  auBecsDebit: AuBecsDebit
  bacsDebit: BacsDebit
  bancontact: Bancontact
  boleto: Boleto
  card: Card4
  cardPresent: CardPresent
  eps: Eps
  fpx: Fpx2
  giropay: Giropay
  grabpay: Grabpay
  ideal: Ideal
  interacPresent: InteracPresent
  klarna: JSON
  multibanco: Multibanco
  oxxo: Oxxo
  p24: P24
  sepaDebit: SepaDebit
  sofort: Sofort
  stripeAccount: JSON
  """
  The type of transaction-specific details of the payment method used in the payment, one of `ach_credit_transfer`, `ach_debit`, `acss_debit`, `alipay`, `au_becs_debit`, `bancontact`, `card`, `card_present`, `eps`, `giropay`, `ideal`, `klarna`, `multibanco`, `p24`, `sepa_debit`, `sofort`, `stripe_account`, or `wechat`.
  An additional hash is included on `payment_method_details` with a name matching this value.
  It contains information specific to the payment method.
  """
  type: String
  wechat: JSON
  wechatPay: WechatPay
}

type AchCreditTransfer {
  """Account number to transfer funds to."""
  accountNumber: String
  """Name of the bank associated with the routing number."""
  bankName: String
  """Routing transit number for the bank account to transfer funds to."""
  routingNumber: String
  """SWIFT code of the bank associated with the routing number."""
  swiftCode: String
}

type AchDebit {
  """Type of entity that holds the account. This can be either `individual` or `company`."""
  accountHolderType: AccountHolderType4
  """Name of the bank associated with the bank account."""
  bankName: String
  """Two-letter ISO code representing the country the bank account is located in."""
  country: String
  """Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same."""
  fingerprint: String
  """Last four digits of the bank account number."""
  last4: String
  """Routing transit number of the bank account."""
  routingNumber: String
}

enum AccountHolderType4 {
  COMPANY
  INDIVIDUAL
}

type AcssDebit {
  """Name of the bank associated with the bank account."""
  bankName: String
  """Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same."""
  fingerprint: String
  """Institution number of the bank account"""
  institutionNumber: String
  """Last four digits of the bank account number."""
  last4: String
  """ID of the mandate used to make this payment."""
  mandate: String
  """Transit number of the bank account."""
  transitNumber: String
}

type AfterpayClearpay {
  """Order identifier shown to the merchant in Afterpay’s online portal."""
  reference: String
}

type Alipay {
  """Uniquely identifies this particular Alipay account. You can use this attribute to check whether two Alipay accounts are the same."""
  fingerprint: String
  """Transaction ID of this particular Alipay transaction."""
  transactionId: String
}

type AuBecsDebit {
  """Bank-State-Branch number of the bank account."""
  bsbNumber: String
  """Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same."""
  fingerprint: String
  """Last four digits of the bank account number."""
  last4: String
  """ID of the mandate used to make this payment."""
  mandate: String
}

type BacsDebit {
  """Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same."""
  fingerprint: String
  """Last four digits of the bank account number."""
  last4: String
  """ID of the mandate used to make this payment."""
  mandate: String
  """Sort code of the bank account. (e.g., `10-20-30`)"""
  sortCode: String
}

type Bancontact {
  """Bank code of bank associated with the bank account."""
  bankCode: String
  """Name of the bank associated with the bank account."""
  bankName: String
  """Bank Identifier Code of the bank associated with the bank account."""
  bic: String
  """The ID of the SEPA Direct Debit PaymentMethod which was generated by this Charge."""
  generatedSepaDebit: JSON
  """The mandate for the SEPA Direct Debit PaymentMethod which was generated by this Charge."""
  generatedSepaDebitMandate: JSON
  """Last four characters of the IBAN."""
  ibanLast4: String
  """
  Preferred language of the Bancontact authorization page that the customer is redirected to.
  Can be one of `en`, `de`, `fr`, or `nl`
  """
  preferredLanguage: PreferredLanguage
  """
  Owner's verified full name. Values are verified or provided by Bancontact directly
  (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  """
  verifiedName: String
}

enum PreferredLanguage {
  DE
  EN
  FR
  NL
}

type Boleto {
  """Uniquely identifies this customer tax_id (CNPJ or CPF)"""
  taxId: String!
}

type Card4 {
  """Card brand. Can be `amex`, `diners`, `discover`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`."""
  brand: String
  """Check results by Card networks on Card address and CVC at time of payment."""
  checks: Checks
  """Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected."""
  country: String
  """Two-digit number representing the card's expiration month."""
  expMonth: Int!
  """Four-digit number representing the card's expiration year."""
  expYear: Int!
  """
  Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
  
  *Starting May 1, 2021, card fingerprint in India for Connect will change to allow two fingerprints for the same card --- one for India and one for the rest of the world.*
  """
  fingerprint: String
  """Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`."""
  funding: String
  """
  Installment details for this payment (Mexico only).
  
  For more information, see the [installments integration guide](https://stripe.com/docs/payments/installments).
  """
  installments: Installments
  """The last four digits of the card."""
  last4: String
  """Identifies which network this charge was processed on. Can be `amex`, `cartes_bancaires`, `diners`, `discover`, `interac`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`."""
  network: String
  """Populated if this transaction used 3D Secure authentication."""
  threeDSecure: ThreeDSecure2
  """If this Card is part of a card wallet, this contains the details of the card wallet."""
  wallet: Wallet
}

"""Check results by Card networks on Card address and CVC at time of payment."""
type Checks {
  """If a address line1 was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`."""
  addressLine1Check: String
  """If a address postal code was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`."""
  addressPostalCodeCheck: String
  """If a CVC was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`."""
  cvcCheck: String
}

"""
Installment details for this payment (Mexico only).

For more information, see the [installments integration guide](https://stripe.com/docs/payments/installments).
"""
type Installments {
  """Installment plan selected for the payment."""
  plan: Plan
}

"""Installment plan selected for the payment."""
type Plan {
  """For `fixed_count` installment plans, this is the number of installment payments your customer will make to their credit card."""
  count: Int
  """
  For `fixed_count` installment plans, this is the interval between installment payments your customer will make to their credit card.
  One of `month`.
  """
  interval: Interval3
  """Type of installment plan, one of `fixed_count`."""
  type: Type8
}

enum Interval3 {
  MONTH
}

enum Type8 {
  FIXED_COUNT
}

"""Populated if this transaction used 3D Secure authentication."""
type ThreeDSecure2 {
  """
  For authenticated transactions: how the customer was authenticated by
  the issuing bank.
  """
  authenticationFlow: AuthenticationFlow
  """Indicates the outcome of 3D Secure authentication."""
  result: Result
  """
  Additional information about why 3D Secure succeeded or failed based
  on the `result`.
  """
  resultReason: ResultReason
  """The version of 3D Secure that was used."""
  version: Version
}

enum AuthenticationFlow {
  CHALLENGE
  FRICTIONLESS
}

enum Result {
  ATTEMPT_ACKNOWLEDGED
  AUTHENTICATED
  FAILED
  NOT_SUPPORTED
  PROCESSING_ERROR
}

enum ResultReason {
  ABANDONED
  BYPASSED
  CANCELED
  CARD_NOT_ENROLLED
  NETWORK_NOT_SUPPORTED
  PROTOCOL_ERROR
  REJECTED
}

enum Version {
  _1_0_2
  _2_1_0
  _2_2_0
}

"""If this Card is part of a card wallet, this contains the details of the card wallet."""
type Wallet {
  amexExpressCheckout: JSON
  applePay: JSON
  """(For tokenized numbers only.) The last four digits of the device account number."""
  dynamicLast4: String
  googlePay: JSON
  masterpass: Masterpass
  samsungPay: JSON
  """The type of the card wallet, one of `amex_express_checkout`, `apple_pay`, `google_pay`, `masterpass`, `samsung_pay`, or `visa_checkout`. An additional hash is included on the Wallet subhash with a name matching this value. It contains additional information specific to the card wallet type."""
  type: Type9
  visaCheckout: VisaCheckout
}

type Masterpass {
  """Owner's verified billing address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated."""
  billingAddress: BillingAddress
  """Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated."""
  email: String
  """Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated."""
  name: String
  """Owner's verified shipping address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated."""
  shippingAddress: ShippingAddress
}

"""Owner's verified billing address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated."""
type BillingAddress {
  """City, district, suburb, town, or village."""
  city: String
  """Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2))."""
  country: String
  """Address line 1 (e.g., street, PO Box, or company name)."""
  line1: String
  """Address line 2 (e.g., apartment, suite, unit, or building)."""
  line2: String
  """ZIP or postal code."""
  postalCode: String
  """State, county, province, or region."""
  state: String
}

"""Owner's verified shipping address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated."""
type ShippingAddress {
  """City, district, suburb, town, or village."""
  city: String
  """Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2))."""
  country: String
  """Address line 1 (e.g., street, PO Box, or company name)."""
  line1: String
  """Address line 2 (e.g., apartment, suite, unit, or building)."""
  line2: String
  """ZIP or postal code."""
  postalCode: String
  """State, county, province, or region."""
  state: String
}

enum Type9 {
  AMEX_EXPRESS_CHECKOUT
  APPLE_PAY
  GOOGLE_PAY
  MASTERPASS
  SAMSUNG_PAY
  VISA_CHECKOUT
}

type VisaCheckout {
  """Owner's verified billing address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated."""
  billingAddress: BillingAddress
  """Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated."""
  email: String
  """Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated."""
  name: String
  """Owner's verified shipping address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated."""
  shippingAddress: ShippingAddress
}

type CardPresent {
  """Card brand. Can be `amex`, `diners`, `discover`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`."""
  brand: String
  """The cardholder name as read from the card, in [ISO 7813](https://en.wikipedia.org/wiki/ISO/IEC_7813) format. May include alphanumeric characters, special characters and first/last name separator (`/`)."""
  cardholderName: String
  """Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected."""
  country: String
  """Authorization response cryptogram."""
  emvAuthData: String
  """Two-digit number representing the card's expiration month."""
  expMonth: Int!
  """Four-digit number representing the card's expiration year."""
  expYear: Int!
  """
  Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
  
  *Starting May 1, 2021, card fingerprint in India for Connect will change to allow two fingerprints for the same card --- one for India and one for the rest of the world.*
  """
  fingerprint: String
  """Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`."""
  funding: String
  """ID of a card PaymentMethod generated from the card_present PaymentMethod that may be attached to a Customer for future transactions. Only present if it was possible to generate a card PaymentMethod."""
  generatedCard: String
  """The last four digits of the card."""
  last4: String
  """Identifies which network this charge was processed on. Can be `amex`, `cartes_bancaires`, `diners`, `discover`, `interac`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`."""
  network: String
  """How card details were read in this transaction."""
  readMethod: ReadMethod
  """A collection of fields required to be displayed on receipts. Only required for EMV transactions."""
  receipt: Receipt
}

enum ReadMethod {
  CONTACT_EMV
  CONTACTLESS_EMV
  CONTACTLESS_MAGSTRIPE_MODE
  MAGNETIC_STRIPE_FALLBACK
  MAGNETIC_STRIPE_TRACK2
}

"""A collection of fields required to be displayed on receipts. Only required for EMV transactions."""
type Receipt {
  """The type of account being debited or credited"""
  accountType: AccountType4
  """EMV tag 9F26, cryptogram generated by the integrated circuit chip."""
  applicationCryptogram: String
  """Mnenomic of the Application Identifier."""
  applicationPreferredName: String
  """Identifier for this transaction."""
  authorizationCode: String
  """EMV tag 8A. A code returned by the card issuer."""
  authorizationResponseCode: String
  """How the cardholder verified ownership of the card."""
  cardholderVerificationMethod: String
  """EMV tag 84. Similar to the application identifier stored on the integrated circuit chip."""
  dedicatedFileName: String
  """The outcome of a series of EMV functions performed by the card reader."""
  terminalVerificationResults: String
  """An indication of various EMV functions performed during the transaction."""
  transactionStatusInformation: String
}

enum AccountType4 {
  CHECKING
  CREDIT
  PREPAID
  UNKNOWN
}

type Eps {
  """The customer's bank. Should be one of `arzte_und_apotheker_bank`, `austrian_anadi_bank_ag`, `bank_austria`, `bankhaus_carl_spangler`, `bankhaus_schelhammer_und_schattera_ag`, `bawag_psk_ag`, `bks_bank_ag`, `brull_kallmus_bank_ag`, `btv_vier_lander_bank`, `capital_bank_grawe_gruppe_ag`, `dolomitenbank`, `easybank_ag`, `erste_bank_und_sparkassen`, `hypo_alpeadriabank_international_ag`, `hypo_noe_lb_fur_niederosterreich_u_wien`, `hypo_oberosterreich_salzburg_steiermark`, `hypo_tirol_bank_ag`, `hypo_vorarlberg_bank_ag`, `hypo_bank_burgenland_aktiengesellschaft`, `marchfelder_bank`, `oberbank_ag`, `raiffeisen_bankengruppe_osterreich`, `schoellerbank_ag`, `sparda_bank_wien`, `volksbank_gruppe`, `volkskreditbank_ag`, or `vr_bank_braunau`."""
  bank: Bank
  """
  Owner's verified full name. Values are verified or provided by EPS directly
  (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  EPS rarely provides this information so the attribute is usually empty.
  """
  verifiedName: String
}

enum Bank {
  ARZTE_UND_APOTHEKER_BANK
  AUSTRIAN_ANADI_BANK_AG
  BANK_AUSTRIA
  BANKHAUS_CARL_SPANGLER
  BANKHAUS_SCHELHAMMER_UND_SCHATTERA_AG
  BAWAG_PSK_AG
  BKS_BANK_AG
  BRULL_KALLMUS_BANK_AG
  BTV_VIER_LANDER_BANK
  CAPITAL_BANK_GRAWE_GRUPPE_AG
  DOLOMITENBANK
  EASYBANK_AG
  ERSTE_BANK_UND_SPARKASSEN
  HYPO_ALPEADRIABANK_INTERNATIONAL_AG
  HYPO_BANK_BURGENLAND_AKTIENGESELLSCHAFT
  HYPO_NOE_LB_FUR_NIEDEROSTERREICH_U_WIEN
  HYPO_OBEROSTERREICH_SALZBURG_STEIERMARK
  HYPO_TIROL_BANK_AG
  HYPO_VORARLBERG_BANK_AG
  MARCHFELDER_BANK
  OBERBANK_AG
  RAIFFEISEN_BANKENGRUPPE_OSTERREICH
  SCHOELLERBANK_AG
  SPARDA_BANK_WIEN
  VOLKSBANK_GRUPPE
  VOLKSKREDITBANK_AG
  VR_BANK_BRAUNAU
}

type Fpx2 {
  """The customer's bank. Can be one of `affin_bank`, `alliance_bank`, `ambank`, `bank_islam`, `bank_muamalat`, `bank_rakyat`, `bsn`, `cimb`, `hong_leong_bank`, `hsbc`, `kfh`, `maybank2u`, `ocbc`, `public_bank`, `rhb`, `standard_chartered`, `uob`, `deutsche_bank`, `maybank2e`, or `pb_enterprise`."""
  bank: Bank2!
  """Unique transaction id generated by FPX for every request from the merchant"""
  transactionId: String
}

enum Bank2 {
  AFFIN_BANK
  ALLIANCE_BANK
  AMBANK
  BANK_ISLAM
  BANK_MUAMALAT
  BANK_RAKYAT
  BSN
  CIMB
  DEUTSCHE_BANK
  HONG_LEONG_BANK
  HSBC
  KFH
  MAYBANK2E
  MAYBANK2U
  OCBC
  PB_ENTERPRISE
  PUBLIC_BANK
  RHB
  STANDARD_CHARTERED
  UOB
}

type Giropay {
  """Bank code of bank associated with the bank account."""
  bankCode: String
  """Name of the bank associated with the bank account."""
  bankName: String
  """Bank Identifier Code of the bank associated with the bank account."""
  bic: String
  """
  Owner's verified full name. Values are verified or provided by Giropay directly
  (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  Giropay rarely provides this information so the attribute is usually empty.
  """
  verifiedName: String
}

type Grabpay {
  """Unique transaction id generated by GrabPay"""
  transactionId: String
}

type Ideal {
  """The customer's bank. Can be one of `abn_amro`, `asn_bank`, `bunq`, `handelsbanken`, `ing`, `knab`, `moneyou`, `rabobank`, `regiobank`, `revolut`, `sns_bank`, `triodos_bank`, or `van_lanschot`."""
  bank: Bank3
  """The Bank Identifier Code of the customer's bank."""
  bic: Bic3
  """The ID of the SEPA Direct Debit PaymentMethod which was generated by this Charge."""
  generatedSepaDebit: JSON
  """The mandate for the SEPA Direct Debit PaymentMethod which was generated by this Charge."""
  generatedSepaDebitMandate: JSON
  """Last four characters of the IBAN."""
  ibanLast4: String
  """
  Owner's verified full name. Values are verified or provided by iDEAL directly
  (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  """
  verifiedName: String
}

enum Bank3 {
  ABN_AMRO
  ASN_BANK
  BUNQ
  HANDELSBANKEN
  ING
  KNAB
  MONEYOU
  RABOBANK
  REGIOBANK
  REVOLUT
  SNS_BANK
  TRIODOS_BANK
  VAN_LANSCHOT
}

enum Bic3 {
  ABNANL2A
  ASNBNL21
  BUNQNL2A
  FVLBNL22
  HANDNL2A
  INGBNL2A
  KNABNL2H
  MOYONL21
  RABONL2U
  RBRBNL21
  REVOLT21
  SNSBNL2A
  TRIONL2U
}

type InteracPresent {
  """Card brand. Can be `interac`, `mastercard` or `visa`."""
  brand: String
  """The cardholder name as read from the card, in [ISO 7813](https://en.wikipedia.org/wiki/ISO/IEC_7813) format. May include alphanumeric characters, special characters and first/last name separator (`/`)."""
  cardholderName: String
  """Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected."""
  country: String
  """Authorization response cryptogram."""
  emvAuthData: String
  """Two-digit number representing the card's expiration month."""
  expMonth: Int!
  """Four-digit number representing the card's expiration year."""
  expYear: Int!
  """
  Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
  
  *Starting May 1, 2021, card fingerprint in India for Connect will change to allow two fingerprints for the same card --- one for India and one for the rest of the world.*
  """
  fingerprint: String
  """Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`."""
  funding: String
  """ID of a card PaymentMethod generated from the card_present PaymentMethod that may be attached to a Customer for future transactions. Only present if it was possible to generate a card PaymentMethod."""
  generatedCard: String
  """The last four digits of the card."""
  last4: String
  """Identifies which network this charge was processed on. Can be `amex`, `cartes_bancaires`, `diners`, `discover`, `interac`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`."""
  network: String
  """EMV tag 5F2D. Preferred languages specified by the integrated circuit chip."""
  preferredLocales: [String]
  """How card details were read in this transaction."""
  readMethod: ReadMethod
  """A collection of fields required to be displayed on receipts. Only required for EMV transactions."""
  receipt: Receipt2
}

"""A collection of fields required to be displayed on receipts. Only required for EMV transactions."""
type Receipt2 {
  """The type of account being debited or credited"""
  accountType: AccountType5
  """EMV tag 9F26, cryptogram generated by the integrated circuit chip."""
  applicationCryptogram: String
  """Mnenomic of the Application Identifier."""
  applicationPreferredName: String
  """Identifier for this transaction."""
  authorizationCode: String
  """EMV tag 8A. A code returned by the card issuer."""
  authorizationResponseCode: String
  """How the cardholder verified ownership of the card."""
  cardholderVerificationMethod: String
  """EMV tag 84. Similar to the application identifier stored on the integrated circuit chip."""
  dedicatedFileName: String
  """The outcome of a series of EMV functions performed by the card reader."""
  terminalVerificationResults: String
  """An indication of various EMV functions performed during the transaction."""
  transactionStatusInformation: String
}

enum AccountType5 {
  CHECKING
  SAVINGS
  UNKNOWN
}

type Multibanco {
  """Entity number associated with this Multibanco payment."""
  entity: String
  """Reference number associated with this Multibanco payment."""
  reference: String
}

type Oxxo {
  """OXXO reference number"""
  number: String
}

type P24 {
  """The customer's bank. Can be one of `ing`, `citi_handlowy`, `tmobile_usbugi_bankowe`, `plus_bank`, `etransfer_pocztowy24`, `banki_spbdzielcze`, `bank_nowy_bfg_sa`, `getin_bank`, `blik`, `noble_pay`, `ideabank`, `envelobank`, `santander_przelew24`, `nest_przelew`, `mbank_mtransfer`, `inteligo`, `pbac_z_ipko`, `bnp_paribas`, `credit_agricole`, `toyota_bank`, `bank_pekao_sa`, `volkswagen_bank`, `bank_millennium`, `alior_bank`, or `boz`."""
  bank: Bank4
  """Unique reference for this Przelewy24 payment."""
  reference: String
  """
  Owner's verified full name. Values are verified or provided by Przelewy24 directly
  (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  Przelewy24 rarely provides this information so the attribute is usually empty.
  """
  verifiedName: String
}

enum Bank4 {
  ALIOR_BANK
  BANK_MILLENNIUM
  BANK_NOWY_BFG_SA
  BANK_PEKAO_SA
  BANKI_SPBDZIELCZE
  BLIK
  BNP_PARIBAS
  BOZ
  CITI_HANDLOWY
  CREDIT_AGRICOLE
  ENVELOBANK
  ETRANSFER_POCZTOWY24
  GETIN_BANK
  IDEABANK
  ING
  INTELIGO
  MBANK_MTRANSFER
  NEST_PRZELEW
  NOBLE_PAY
  PBAC_Z_IPKO
  PLUS_BANK
  SANTANDER_PRZELEW24
  TMOBILE_USBUGI_BANKOWE
  TOYOTA_BANK
  VOLKSWAGEN_BANK
}

type SepaDebit {
  """Bank code of bank associated with the bank account."""
  bankCode: String
  """Branch code of bank associated with the bank account."""
  branchCode: String
  """Two-letter ISO code representing the country the bank account is located in."""
  country: String
  """Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same."""
  fingerprint: String
  """Last four characters of the IBAN."""
  last4: String
  """ID of the mandate used to make this payment."""
  mandate: String
}

type Sofort {
  """Bank code of bank associated with the bank account."""
  bankCode: String
  """Name of the bank associated with the bank account."""
  bankName: String
  """Bank Identifier Code of the bank associated with the bank account."""
  bic: String
  """Two-letter ISO code representing the country the bank account is located in."""
  country: String
  """The ID of the SEPA Direct Debit PaymentMethod which was generated by this Charge."""
  generatedSepaDebit: JSON
  """The mandate for the SEPA Direct Debit PaymentMethod which was generated by this Charge."""
  generatedSepaDebitMandate: JSON
  """Last four characters of the IBAN."""
  ibanLast4: String
  """
  Preferred language of the SOFORT authorization page that the customer is redirected to.
  Can be one of `de`, `en`, `es`, `fr`, `it`, `nl`, or `pl`
  """
  preferredLanguage: PreferredLanguage2
  """
  Owner's verified full name. Values are verified or provided by SOFORT directly
  (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  """
  verifiedName: String
}

enum PreferredLanguage2 {
  DE
  EN
  ES
  FR
  IT
  NL
  PL
}

type WechatPay {
  """Uniquely identifies this particular WeChat Pay account. You can use this attribute to check whether two WeChat accounts are the same."""
  fingerprint: String
  """Transaction ID of this particular WeChat Pay transaction."""
  transactionId: String
}

"""A list of refunds that have been applied to the charge."""
type RefundList {
  """Details about each object."""
  data: [Refund]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

"""
`Refund` objects allow you to refund a charge that has previously been created
but not yet refunded. Funds will be refunded to the credit or debit card that
was originally charged.

Related guide: [Refunds](https://stripe.com/docs/refunds).
"""
type Refund {
  """Amount, in %s."""
  amount: Int!
  """Balance transaction that describes the impact on your account balance."""
  balanceTransaction: JSON
  """ID of the charge that was refunded."""
  charge: JSON
  """Time at which the object was created. Measured in seconds since the Unix epoch."""
  created: Int!
  """Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."""
  currency: String!
  """An arbitrary string attached to the object. Often useful for displaying to users. (Available on non-card refunds only)"""
  description: String
  """If the refund failed, this balance transaction describes the adjustment made on your account balance that reverses the initial balance transaction."""
  failureBalanceTransaction: JSON
  """If the refund failed, the reason for refund failure if known. Possible values are `lost_or_stolen_card`, `expired_or_canceled_card`, or `unknown`."""
  failureReason: String
  """Unique identifier for the object."""
  id: String!
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."""
  metadata: JSON
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object19!
  """ID of the PaymentIntent that was refunded."""
  paymentIntent: JSON
  """Reason for the refund, either user-provided (`duplicate`, `fraudulent`, or `requested_by_customer`) or generated by Stripe internally (`expired_uncaptured_charge`)."""
  reason: String
  """This is the transaction number that appears on email receipts sent for this refund."""
  receiptNumber: String
  """The transfer reversal that is associated with the refund. Only present if the charge came from another Stripe account. See the Connect documentation for details."""
  sourceTransferReversal: JSON
  """Status of the refund. For credit card refunds, this can be `pending`, `succeeded`, or `failed`. For other types of refunds, it can be `pending`, `succeeded`, `failed`, or `canceled`. Refer to our [refunds](https://stripe.com/docs/refunds#failed-refunds) documentation for more details."""
  status: String
  """If the accompanying transfer was reversed, the transfer reversal object. Only applicable if the charge was created using the destination parameter."""
  transferReversal: JSON
}

enum Object19 {
  REFUND
}

"""Shipping information for the charge."""
type Shipping {
  address: Address
  """The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc."""
  carrier: String
  """Recipient name."""
  name: String
  """Recipient phone (including extension)."""
  phone: String
  """The tracking number for a physical product, obtained from the delivery service. If multiple tracking numbers were generated for this purchase, please separate them with commas."""
  trackingNumber: String
}

"""An optional dictionary including the account to automatically transfer to as part of a destination charge. [See the Connect documentation](https://stripe.com/docs/connect/destination-charges) for details."""
type TransferData {
  """The amount transferred to the destination account, if specified. By default, the entire charge amount is transferred to the destination account."""
  amount: Int
  """ID of an existing, connected Stripe account to transfer funds to if `transfer_data` was specified in the charge request."""
  destination: JSON
}

"""
A dispute occurs when a customer questions your charge with their card issuer.
When this happens, you're given the opportunity to respond to the dispute with
evidence that shows that the charge is legitimate. You can find more
information about the dispute process in our [Disputes and
Fraud](/docs/disputes) documentation.

Related guide: [Disputes and Fraud](https://stripe.com/docs/disputes).
"""
type Dispute {
  """Disputed amount. Usually the amount of the charge, but can differ (usually because of currency fluctuation or because only part of the order is disputed)."""
  amount: Int!
  """List of zero, one, or two balance transactions that show funds withdrawn and reinstated to your Stripe account as a result of this dispute."""
  balanceTransactions: [BalanceTransaction3]!
  """ID of the charge that was disputed."""
  charge: JSON!
  """Time at which the object was created. Measured in seconds since the Unix epoch."""
  created: Int!
  """Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."""
  currency: String!
  evidence: DisputeEvidence!
  evidenceDetails: DisputeEvidenceDetails!
  """Unique identifier for the object."""
  id: String!
  """If true, it is still possible to refund the disputed payment. Once the payment has been fully refunded, no further funds will be withdrawn from your Stripe account as a result of this dispute."""
  isChargeRefundable: Boolean!
  """Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."""
  livemode: Boolean!
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."""
  metadata: JSON!
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object20!
  """ID of the PaymentIntent that was disputed."""
  paymentIntent: JSON
  """Reason given by cardholder for dispute. Possible values are `bank_cannot_process`, `check_returned`, `credit_not_processed`, `customer_initiated`, `debit_not_authorized`, `duplicate`, `fraudulent`, `general`, `incorrect_account_details`, `insufficient_funds`, `product_not_received`, `product_unacceptable`, `subscription_canceled`, or `unrecognized`. Read more about [dispute reasons](https://stripe.com/docs/disputes/categories)."""
  reason: String!
  """Current status of dispute. Possible values are `warning_needs_response`, `warning_under_review`, `warning_closed`, `needs_response`, `under_review`, `charge_refunded`, `won`, or `lost`."""
  status: Status9!
}

type DisputeEvidence {
  """Any server or activity logs showing proof that the customer accessed or downloaded the purchased digital product. This information should include IP addresses, corresponding timestamps, and any detailed recorded activity."""
  accessActivityLog: String
  """The billing address provided by the customer."""
  billingAddress: String
  """(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Your subscription cancellation policy, as shown to the customer."""
  cancellationPolicy: JSON
  """An explanation of how and when the customer was shown your refund policy prior to purchase."""
  cancellationPolicyDisclosure: String
  """A justification for why the customer's subscription was not canceled."""
  cancellationRebuttal: String
  """(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Any communication with the customer that you feel is relevant to your case. Examples include emails proving that the customer received the product or service, or demonstrating their use of or satisfaction with the product or service."""
  customerCommunication: JSON
  """The email address of the customer."""
  customerEmailAddress: String
  """The name of the customer."""
  customerName: String
  """The IP address that the customer used when making the purchase."""
  customerPurchaseIp: String
  """(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) A relevant document or contract showing the customer's signature."""
  customerSignature: JSON
  """(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Documentation for the prior charge that can uniquely identify the charge, such as a receipt, shipping label, work order, etc. This document should be paired with a similar document from the disputed payment that proves the two payments are separate."""
  duplicateChargeDocumentation: JSON
  """An explanation of the difference between the disputed charge versus the prior charge that appears to be a duplicate."""
  duplicateChargeExplanation: String
  """The Stripe ID for the prior charge which appears to be a duplicate of the disputed charge."""
  duplicateChargeId: String
  """A description of the product or service that was sold."""
  productDescription: String
  """(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Any receipt or message sent to the customer notifying them of the charge."""
  receipt: JSON
  """(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Your refund policy, as shown to the customer."""
  refundPolicy: JSON
  """Documentation demonstrating that the customer was shown your refund policy prior to purchase."""
  refundPolicyDisclosure: String
  """A justification for why the customer is not entitled to a refund."""
  refundRefusalExplanation: String
  """The date on which the customer received or began receiving the purchased service, in a clear human-readable format."""
  serviceDate: String
  """(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Documentation showing proof that a service was provided to the customer. This could include a copy of a signed contract, work order, or other form of written agreement."""
  serviceDocumentation: JSON
  """The address to which a physical product was shipped. You should try to include as complete address information as possible."""
  shippingAddress: String
  """The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc. If multiple carriers were used for this purchase, please separate them with commas."""
  shippingCarrier: String
  """The date on which a physical product began its route to the shipping address, in a clear human-readable format."""
  shippingDate: String
  """(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Documentation showing proof that a product was shipped to the customer at the same address the customer provided to you. This could include a copy of the shipment receipt, shipping label, etc. It should show the customer's full shipping address, if possible."""
  shippingDocumentation: JSON
  """The tracking number for a physical product, obtained from the delivery service. If multiple tracking numbers were generated for this purchase, please separate them with commas."""
  shippingTrackingNumber: String
  """(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Any additional evidence or statements."""
  uncategorizedFile: JSON
  """Any additional evidence or statements."""
  uncategorizedText: String
}

type DisputeEvidenceDetails {
  """Date by which evidence must be submitted in order to successfully challenge dispute. Will be null if the customer's bank or credit card company doesn't allow a response for this particular dispute."""
  dueBy: Int
  """Whether evidence has been staged for this dispute."""
  hasEvidence: Boolean!
  """Whether the last evidence submission was submitted past the due date. Defaults to `false` if no evidence submissions have occurred. If `true`, then delivery of the latest evidence is *not* guaranteed."""
  pastDue: Boolean!
  """The number of times evidence has been submitted. Typically, you may only submit evidence once."""
  submissionCount: Int!
}

enum Object20 {
  DISPUTE
}

enum Status9 {
  CHARGE_REFUNDED
  LOST
  NEEDS_RESPONSE
  UNDER_REVIEW
  WARNING_CLOSED
  WARNING_NEEDS_RESPONSE
  WARNING_UNDER_REVIEW
  WON
}

type RefundList2 {
  """Details about each object."""
  data: [Refund]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

type PaymentPagesCheckoutSessionList {
  data: [CheckoutSession]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

"""
A Checkout Session represents your customer's session as they pay for
one-time purchases or subscriptions through [Checkout](https://stripe.com/docs/payments/checkout).
We recommend creating a new Session each time your customer attempts to pay.

Once payment is successful, the Checkout Session will contain a reference
to the [Customer](https://stripe.com/docs/api/customers), and either the successful
[PaymentIntent](https://stripe.com/docs/api/payment_intents) or an active
[Subscription](https://stripe.com/docs/api/subscriptions).

You can create a Checkout Session on your server and pass its ID to the
client to begin Checkout.

Related guide: [Checkout Server Quickstart](https://stripe.com/docs/payments/checkout/api).
"""
type CheckoutSession {
  """Enables user redeemable promotion codes."""
  allowPromotionCodes: Boolean
  """Total of all items before discounts or taxes are applied."""
  amountSubtotal: Int
  """Total of all items after discounts and taxes are applied."""
  amountTotal: Int
  automaticTax: PaymentPagesCheckoutSessionAutomaticTax!
  """Describes whether Checkout should collect the customer's billing address."""
  billingAddressCollection: BillingAddressCollection
  """The URL the customer will be directed to if they decide to cancel payment and return to your website."""
  cancelUrl: String!
  """
  A unique string to reference the Checkout Session. This can be a
  customer ID, a cart ID, or similar, and can be used to reconcile the
  Session with your internal systems.
  """
  clientReferenceId: String
  """Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."""
  currency: String
  """
  The ID of the customer for this Session.
  For Checkout Sessions in `payment` or `subscription` mode, Checkout
  will create a new customer object based on information provided
  during the payment flow unless an existing customer was provided when
  the Session was created.
  """
  customer: JSON
  """The customer details including the customer's tax exempt status and the customer's tax IDs. Only present on Sessions in `payment` or `subscription` mode."""
  customerDetails: CustomerDetails
  """
  If provided, this value will be used when the Customer object is created.
  If not provided, customers will be asked to enter their email address.
  Use this parameter to prefill customer data if you already have an email
  on file. To access information about the customer once the payment flow is
  complete, use the `customer` attribute.
  """
  customerEmail: String
  """
  Unique identifier for the object. Used to pass to `redirectToCheckout`
  in Stripe.js.
  """
  id: String!
  """The line items purchased by the customer."""
  lineItems: LineItems
  """Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."""
  livemode: Boolean!
  """The IETF language tag of the locale Checkout is displayed in. If blank or `auto`, the browser's locale is used."""
  locale: Locale
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."""
  metadata: JSON
  """The mode of the Checkout Session."""
  mode: Mode3!
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object26!
  """The ID of the PaymentIntent for Checkout Sessions in `payment` mode."""
  paymentIntent: JSON
  """Payment-method-specific configuration for the PaymentIntent or SetupIntent of this CheckoutSession."""
  paymentMethodOptions: PaymentMethodOptions
  """
  A list of the types of payment methods (e.g. card) this Checkout
  Session is allowed to accept.
  """
  paymentMethodTypes: [String]!
  """
  The payment status of the Checkout Session, one of `paid`, `unpaid`, or `no_payment_required`.
  You can use this value to decide when to fulfill your customer's order.
  """
  paymentStatus: PaymentStatus!
  """The ID of the SetupIntent for Checkout Sessions in `setup` mode."""
  setupIntent: JSON
  """Shipping information for this Checkout Session."""
  shipping: Shipping2
  """When set, provides configuration for Checkout to collect a shipping address from a customer."""
  shippingAddressCollection: ShippingAddressCollection
  """
  Describes the type of transaction being performed by Checkout in order to customize
  relevant text on the page, such as the submit button. `submit_type` can only be
  specified on Checkout Sessions in `payment` mode, but not Checkout Sessions
  in `subscription` or `setup` mode.
  """
  submitType: SubmitType
  """The ID of the subscription for Checkout Sessions in `subscription` mode."""
  subscription: JSON
  """
  The URL the customer will be directed to after the payment or
  subscription creation is successful.
  """
  successUrl: String!
  taxIdCollection: PaymentPagesCheckoutSessionTaxIdCollection
  """Tax and discount details for the computed total amount."""
  totalDetails: TotalDetails
  """The URL to the Checkout Session."""
  url: String
}

type PaymentPagesCheckoutSessionAutomaticTax {
  """Indicates whether automatic tax is enabled for the session"""
  enabled: Boolean!
  """The status of the most recent automated tax calculation for this session."""
  status: Status10
}

enum Status10 {
  COMPLETE
  FAILED
  REQUIRES_LOCATION_INPUTS
}

enum BillingAddressCollection {
  AUTO
  REQUIRED
}

"""The customer details including the customer's tax exempt status and the customer's tax IDs. Only present on Sessions in `payment` or `subscription` mode."""
type CustomerDetails {
  """The customer’s email at time of checkout."""
  email: String
  """The customer’s tax exempt status at time of checkout."""
  taxExempt: TaxExempt
  """The customer’s tax IDs at time of checkout."""
  taxIds: [PaymentPagesCheckoutSessionTaxId]
}

enum TaxExempt {
  EXEMPT
  NONE
  REVERSE
}

type PaymentPagesCheckoutSessionTaxId {
  """The type of the tax ID, one of `eu_vat`, `br_cnpj`, `br_cpf`, `gb_vat`, `nz_gst`, `au_abn`, `in_gst`, `no_vat`, `za_vat`, `ch_vat`, `mx_rfc`, `sg_uen`, `ru_inn`, `ru_kpp`, `ca_bn`, `hk_br`, `es_cif`, `tw_vat`, `th_vat`, `jp_cn`, `jp_rn`, `li_uid`, `my_itn`, `us_ein`, `kr_brn`, `ca_qst`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `my_sst`, `sg_gst`, `ae_trn`, `cl_tin`, `sa_vat`, `id_npwp`, `my_frp`, `il_vat`, or `unknown`"""
  type: Type11!
  """The value of the tax ID."""
  value: String
}

enum Type11 {
  AE_TRN
  AU_ABN
  BR_CNPJ
  BR_CPF
  CA_BN
  CA_GST_HST
  CA_PST_BC
  CA_PST_MB
  CA_PST_SK
  CA_QST
  CH_VAT
  CL_TIN
  ES_CIF
  EU_VAT
  GB_VAT
  HK_BR
  ID_NPWP
  IL_VAT
  IN_GST
  JP_CN
  JP_RN
  KR_BRN
  LI_UID
  MX_RFC
  MY_FRP
  MY_ITN
  MY_SST
  NO_VAT
  NZ_GST
  RU_INN
  RU_KPP
  SA_VAT
  SG_GST
  SG_UEN
  TH_VAT
  TW_VAT
  UNKNOWN
  US_EIN
  ZA_VAT
}

"""The line items purchased by the customer."""
type LineItems {
  """Details about each object."""
  data: [Item]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

"""A line item."""
type Item {
  """Total before any discounts or taxes are applied."""
  amountSubtotal: Int!
  """Total after discounts and taxes."""
  amountTotal: Int!
  """Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."""
  currency: String!
  """An arbitrary string attached to the object. Often useful for displaying to users. Defaults to product name."""
  description: String!
  """The discounts applied to the line item."""
  discounts: [LineItemsDiscountAmount]
  """Unique identifier for the object."""
  id: String!
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object23!
  """The price used to generate the line item."""
  price: Price
  """The quantity of products being purchased."""
  quantity: Int
  """The taxes applied to the line item."""
  taxes: [LineItemsTaxAmount]
}

type LineItemsDiscountAmount {
  """The amount discounted."""
  amount: Int!
  """
  A discount represents the actual application of a coupon to a particular
  customer. It contains information about when the discount began and when it
  will end.
  
  Related guide: [Applying Discounts to Subscriptions](https://stripe.com/docs/billing/subscriptions/discounts).
  """
  discount: Discount!
}

"""
A discount represents the actual application of a coupon to a particular
customer. It contains information about when the discount began and when it
will end.

Related guide: [Applying Discounts to Subscriptions](https://stripe.com/docs/billing/subscriptions/discounts).
"""
type Discount {
  """The Checkout session that this coupon is applied to, if it is applied to a particular session in payment mode. Will not be present for subscription mode."""
  checkoutSession: String
  """
  A coupon contains information about a percent-off or amount-off discount you
  might want to apply to a customer. Coupons may be applied to [invoices](https://stripe.com/docs/api#invoices) or
  [orders](https://stripe.com/docs/api#create_order-coupon). Coupons do not work with conventional one-off [charges](https://stripe.com/docs/api#create_charge).
  """
  coupon: Coupon!
  """The ID of the customer associated with this discount."""
  customer: JSON
  """If the coupon has a duration of `repeating`, the date that this discount will end. If the coupon has a duration of `once` or `forever`, this attribute will be null."""
  end: Int
  """The ID of the discount object. Discounts cannot be fetched by ID. Use `expand[]=discounts` in API calls to expand discount IDs in an array."""
  id: String!
  """The invoice that the discount's coupon was applied to, if it was applied directly to a particular invoice."""
  invoice: String
  """The invoice item `id` (or invoice line item `id` for invoice line items of type='subscription') that the discount's coupon was applied to, if it was applied directly to a particular invoice item or invoice line item."""
  invoiceItem: String
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object22!
  """The promotion code applied to create this discount."""
  promotionCode: JSON
  """Date that the coupon was applied."""
  start: Int!
  """The subscription that this coupon is applied to, if it is applied to a particular subscription."""
  subscription: String
}

"""
A coupon contains information about a percent-off or amount-off discount you
might want to apply to a customer. Coupons may be applied to [invoices](https://stripe.com/docs/api#invoices) or
[orders](https://stripe.com/docs/api#create_order-coupon). Coupons do not work with conventional one-off [charges](https://stripe.com/docs/api#create_charge).
"""
type Coupon {
  """Amount (in the `currency` specified) that will be taken off the subtotal of any invoices for this customer."""
  amountOff: Int
  appliesTo: CouponAppliesTo
  """Time at which the object was created. Measured in seconds since the Unix epoch."""
  created: Int!
  """If `amount_off` has been set, the three-letter [ISO code for the currency](https://stripe.com/docs/currencies) of the amount to take off."""
  currency: String
  """One of `forever`, `once`, and `repeating`. Describes how long a customer who applies this coupon will get the discount."""
  duration: Duration!
  """If `duration` is `repeating`, the number of months the coupon applies. Null if coupon `duration` is `forever` or `once`."""
  durationInMonths: Int
  """Unique identifier for the object."""
  id: String!
  """Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."""
  livemode: Boolean!
  """Maximum number of times this coupon can be redeemed, in total, across all customers, before it is no longer valid."""
  maxRedemptions: Int
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."""
  metadata: JSON
  """Name of the coupon displayed to customers on for instance invoices or receipts."""
  name: String
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object21!
  """Percent that will be taken off the subtotal of any invoices for this customer for the duration of the coupon. For example, a coupon with percent_off of 50 will make a %s100 invoice %s50 instead."""
  percentOff: Float
  """Date after which the coupon can no longer be redeemed."""
  redeemBy: Int
  """Number of times this coupon has been applied to a customer."""
  timesRedeemed: Int!
  """Taking account of the above properties, whether this coupon can still be applied to a customer."""
  valid: Boolean!
}

type CouponAppliesTo {
  """A list of product IDs this coupon applies to"""
  products: [String]!
}

enum Duration {
  FOREVER
  ONCE
  REPEATING
}

enum Object21 {
  COUPON
}

enum Object22 {
  DISCOUNT
}

enum Object23 {
  ITEM
}

"""The price used to generate the line item."""
type Price {
  """Whether the price can be used for new purchases."""
  active: Boolean
  """Describes how to compute the price per period. Either `per_unit` or `tiered`. `per_unit` indicates that the fixed amount (specified in `unit_amount` or `unit_amount_decimal`) will be charged per unit in `quantity` (for prices with `usage_type=licensed`), or per unit of total usage (for prices with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as defined using the `tiers` and `tiers_mode` attributes."""
  billingScheme: BillingScheme
  """Time at which the object was created. Measured in seconds since the Unix epoch."""
  created: Int
  """Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."""
  currency: String
  """Unique identifier for the object."""
  id: String
  """Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."""
  livemode: Boolean
  """A lookup key used to retrieve prices dynamically from a static string."""
  lookupKey: String
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."""
  metadata: JSON
  """A brief description of the price, hidden from customers."""
  nickname: String
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object24
  """The ID of the product this price is associated with."""
  product: JSON
  """The recurring components of a price such as `interval` and `usage_type`."""
  recurring: Recurring
  """Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`. Once specified as either `inclusive` or `exclusive`, it cannot be changed."""
  taxBehavior: TaxBehavior
  """Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`."""
  tiers: [PriceTier]
  """Defines if the tiering price should be `graduated` or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per unit price. In `graduated` tiering, pricing can change as the quantity grows."""
  tiersMode: TiersMode
  """Apply a transformation to the reported usage or set quantity before computing the amount billed. Cannot be combined with `tiers`."""
  transformQuantity: TransformQuantity
  """One of `one_time` or `recurring` depending on whether the price is for a one-time purchase or a recurring (subscription) purchase."""
  type: Type12
  """The unit amount in %s to be charged, represented as a whole integer if possible. Only set if `billing_scheme=per_unit`."""
  unitAmount: Int
  """The unit amount in %s to be charged, represented as a decimal string with at most 12 decimal places. Only set if `billing_scheme=per_unit`."""
  unitAmountDecimal: String
}

enum BillingScheme {
  PER_UNIT
  TIERED
}

enum Object24 {
  PRICE
}

"""The recurring components of a price such as `interval` and `usage_type`."""
type Recurring {
  """Specifies a usage aggregation strategy for prices of `usage_type=metered`. Allowed values are `sum` for summing up all usage during a period, `last_during_period` for using the last usage record reported within a period, `last_ever` for using the last usage record ever (across period bounds) or `max` which uses the usage record with the maximum reported usage during a period. Defaults to `sum`."""
  aggregateUsage: AggregateUsage
  """The frequency at which a subscription is billed. One of `day`, `week`, `month` or `year`."""
  interval: Interval4
  """The number of intervals (specified in the `interval` attribute) between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months."""
  intervalCount: Int
  """Configures how the quantity per period should be determined. Can be either `metered` or `licensed`. `licensed` automatically bills the `quantity` set when adding it to a subscription. `metered` aggregates the total usage based on usage records. Defaults to `licensed`."""
  usageType: UsageType
}

enum AggregateUsage {
  LAST_DURING_PERIOD
  LAST_EVER
  MAX
  SUM
}

enum Interval4 {
  DAY
  MONTH
  WEEK
  YEAR
}

enum UsageType {
  LICENSED
  METERED
}

enum TaxBehavior {
  EXCLUSIVE
  INCLUSIVE
  UNSPECIFIED
}

type PriceTier {
  """Price for the entire tier."""
  flatAmount: Int
  """Same as `flat_amount`, but contains a decimal value with at most 12 decimal places."""
  flatAmountDecimal: String
  """Per unit price for units relevant to the tier."""
  unitAmount: Int
  """Same as `unit_amount`, but contains a decimal value with at most 12 decimal places."""
  unitAmountDecimal: String
  """Up to and including to this quantity will be contained in the tier."""
  upTo: Int
}

enum TiersMode {
  GRADUATED
  VOLUME
}

"""Apply a transformation to the reported usage or set quantity before computing the amount billed. Cannot be combined with `tiers`."""
type TransformQuantity {
  """Divide usage by this number."""
  divideBy: Int
  """After division, either round the result `up` or `down`."""
  round: Round
}

enum Round {
  DOWN
  UP
}

enum Type12 {
  ONE_TIME
  RECURRING
}

type LineItemsTaxAmount {
  """Amount of tax applied for this rate."""
  amount: Int!
  """
  Tax rates can be applied to [invoices](https://stripe.com/docs/billing/invoices/tax-rates), [subscriptions](https://stripe.com/docs/billing/subscriptions/taxes) and [Checkout Sessions](https://stripe.com/docs/payments/checkout/set-up-a-subscription#tax-rates) to collect tax.
  
  Related guide: [Tax Rates](https://stripe.com/docs/billing/taxes/tax-rates).
  """
  rate: TaxRate!
}

"""
Tax rates can be applied to [invoices](https://stripe.com/docs/billing/invoices/tax-rates), [subscriptions](https://stripe.com/docs/billing/subscriptions/taxes) and [Checkout Sessions](https://stripe.com/docs/payments/checkout/set-up-a-subscription#tax-rates) to collect tax.

Related guide: [Tax Rates](https://stripe.com/docs/billing/taxes/tax-rates).
"""
type TaxRate {
  """Defaults to `true`. When set to `false`, this tax rate cannot be used with new applications or Checkout Sessions, but will still work for subscriptions and invoices that already have it set."""
  active: Boolean!
  """Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2))."""
  country: String
  """Time at which the object was created. Measured in seconds since the Unix epoch."""
  created: Int!
  """An arbitrary string attached to the tax rate for your internal use only. It will not be visible to your customers."""
  description: String
  """The display name of the tax rates as it will appear to your customer on their receipt email, PDF, and the hosted invoice page."""
  displayName: String!
  """Unique identifier for the object."""
  id: String!
  """This specifies if the tax rate is inclusive or exclusive."""
  inclusive: Boolean!
  """The jurisdiction for the tax rate. You can use this label field for tax reporting purposes. It also appears on your customer’s invoice."""
  jurisdiction: String
  """Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."""
  livemode: Boolean!
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."""
  metadata: JSON
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object25!
  """This represents the tax rate percent out of 100."""
  percentage: Float!
  """[ISO 3166-2 subdivision code](https://en.wikipedia.org/wiki/ISO_3166-2:US), without country prefix. For example, "NY" for New York, United States."""
  state: String
  """The high-level tax type, such as `vat` or `sales_tax`."""
  taxType: TaxType
}

enum Object25 {
  TAX_RATE
}

enum TaxType {
  GST
  HST
  PST
  QST
  SALES_TAX
  VAT
}

enum Locale {
  AUTO
  BG
  CS
  DA
  DE
  EL
  EN
  EN_GB
  ES
  ES_419
  ET
  FI
  FR
  FR_CA
  HR
  HU
  ID
  IT
  JA
  KO
  LT
  LV
  MS
  MT
  NB
  NL
  PL
  PT
  PT_BR
  RO
  RU
  SK
  SL
  SV
  TH
  TR
  VI
  ZH
  ZH_HK
  ZH_TW
}

enum Mode3 {
  PAYMENT
  SETUP
  SUBSCRIPTION
}

enum Object26 {
  CHECKOUT_SESSION
}

"""Payment-method-specific configuration for the PaymentIntent or SetupIntent of this CheckoutSession."""
type PaymentMethodOptions {
  acssDebit: AcssDebit2
  boleto: Boleto2
  oxxo: Oxxo2
}

type AcssDebit2 {
  """Currency supported by the bank account. Returned when the Session is in `setup` mode."""
  currency: Currency21
  mandateOptions: CheckoutAcssDebitMandateOptions
  """Bank account verification method."""
  verificationMethod: VerificationMethod
}

enum Currency21 {
  CAD
  USD
}

type CheckoutAcssDebitMandateOptions {
  """A URL for custom mandate text"""
  customMandateUrl: String
  """Description of the interval. Only required if the 'payment_schedule' parameter is 'interval' or 'combined'."""
  intervalDescription: String
  """Payment schedule for the mandate."""
  paymentSchedule: PaymentSchedule
  """Transaction type of the mandate."""
  transactionType: TransactionType
}

enum PaymentSchedule {
  COMBINED
  INTERVAL
  SPORADIC
}

enum TransactionType {
  BUSINESS
  PERSONAL
}

enum VerificationMethod {
  AUTOMATIC
  INSTANT
  MICRODEPOSITS
}

type Boleto2 {
  """The number of calendar days before a Boleto voucher expires. For example, if you create a Boleto voucher on Monday and you set expires_after_days to 2, the Boleto voucher will expire on Wednesday at 23:59 America/Sao_Paulo time."""
  expiresAfterDays: Int!
}

type Oxxo2 {
  """The number of calendar days before an OXXO invoice expires. For example, if you create an OXXO invoice on Monday and you set expires_after_days to 2, the OXXO invoice will expire on Wednesday at 23:59 America/Mexico_City time."""
  expiresAfterDays: Int!
}

enum PaymentStatus {
  NO_PAYMENT_REQUIRED
  PAID
  UNPAID
}

"""Shipping information for this Checkout Session."""
type Shipping2 {
  address: Address
  """The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc."""
  carrier: String
  """Recipient name."""
  name: String
  """Recipient phone (including extension)."""
  phone: String
  """The tracking number for a physical product, obtained from the delivery service. If multiple tracking numbers were generated for this purchase, please separate them with commas."""
  trackingNumber: String
}

"""When set, provides configuration for Checkout to collect a shipping address from a customer."""
type ShippingAddressCollection {
  """
  An array of two-letter ISO country codes representing which countries Checkout should provide as options for
  shipping locations. Unsupported country codes: `AS, CX, CC, CU, HM, IR, KP, MH, FM, NF, MP, PW, SD, SY, UM, VI`.
  """
  allowedCountries: [AllowedCountriesListItem]
}

enum AllowedCountriesListItem {
  AC
  AD
  AE
  AF
  AG
  AI
  AL
  AM
  AO
  AQ
  AR
  AT
  AU
  AW
  AX
  AZ
  BA
  BB
  BD
  BE
  BF
  BG
  BH
  BI
  BJ
  BL
  BM
  BN
  BO
  BQ
  BR
  BS
  BT
  BV
  BW
  BY
  BZ
  CA
  CD
  CF
  CG
  CH
  CI
  CK
  CL
  CM
  CN
  CO
  CR
  CV
  CW
  CY
  CZ
  DE
  DJ
  DK
  DM
  DO
  DZ
  EC
  EE
  EG
  EH
  ER
  ES
  ET
  FI
  FJ
  FK
  FO
  FR
  GA
  GB
  GD
  GE
  GF
  GG
  GH
  GI
  GL
  GM
  GN
  GP
  GQ
  GR
  GS
  GT
  GU
  GW
  GY
  HK
  HN
  HR
  HT
  HU
  ID
  IE
  IL
  IM
  IN
  IO
  IQ
  IS
  IT
  JE
  JM
  JO
  JP
  KE
  KG
  KH
  KI
  KM
  KN
  KR
  KW
  KY
  KZ
  LA
  LB
  LC
  LI
  LK
  LR
  LS
  LT
  LU
  LV
  LY
  MA
  MC
  MD
  ME
  MF
  MG
  MK
  ML
  MM
  MN
  MO
  MQ
  MR
  MS
  MT
  MU
  MV
  MW
  MX
  MY
  MZ
  NA
  NC
  NE
  NG
  NI
  NL
  NO
  NP
  NR
  NU
  NZ
  OM
  PA
  PE
  PF
  PG
  PH
  PK
  PL
  PM
  PN
  PR
  PS
  PT
  PY
  QA
  RE
  RO
  RS
  RU
  RW
  SA
  SB
  SC
  SE
  SG
  SH
  SI
  SJ
  SK
  SL
  SM
  SN
  SO
  SR
  SS
  ST
  SV
  SX
  SZ
  TA
  TC
  TD
  TF
  TG
  TH
  TJ
  TK
  TL
  TM
  TN
  TO
  TR
  TT
  TV
  TW
  TZ
  UA
  UG
  US
  UY
  UZ
  VA
  VC
  VE
  VG
  VN
  VU
  WF
  WS
  XK
  YE
  YT
  ZA
  ZM
  ZW
  ZZ
}

enum SubmitType {
  AUTO
  BOOK
  DONATE
  PAY
}

type PaymentPagesCheckoutSessionTaxIdCollection {
  """Indicates whether tax ID collection is enabled for the session"""
  enabled: Boolean!
}

"""Tax and discount details for the computed total amount."""
type TotalDetails {
  """This is the sum of all the line item discounts."""
  amountDiscount: Int
  """This is the sum of all the line item shipping amounts."""
  amountShipping: Int
  """This is the sum of all the line item tax amounts."""
  amountTax: Int
  breakdown: Breakdown
}

type Breakdown {
  """The aggregated line item discounts."""
  discounts: [LineItemsDiscountAmount]!
  """The aggregated line item tax amounts by rate."""
  taxes: [LineItemsTaxAmount]!
}

type PaymentPagesCheckoutSessionListLineItems {
  """Details about each object."""
  data: [Item]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

type V1CountrySpecs2 {
  data: [CountrySpec]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

"""
Stripe needs to collect certain pieces of information about each account
created. These requirements can differ depending on the account's country. The
Country Specs API makes these rules available to your integration.

You can also view the information from this API call as [an online
guide](/docs/connect/required-verification-information).
"""
type CountrySpec {
  """The default currency for this country. This applies to both payment methods and bank accounts."""
  defaultCurrency: String!
  """Unique identifier for the object. Represented as the ISO country code for this country."""
  id: String!
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object27!
  """Currencies that can be accepted in the specific country (for transfers)."""
  supportedBankAccountCurrencies: JSON!
  """Currencies that can be accepted in the specified country (for payments)."""
  supportedPaymentCurrencies: [String]!
  """Payment methods available in the specified country. You may need to enable some payment methods (e.g., [ACH](https://stripe.com/docs/ach)) on your account before they appear in this list. The `stripe` payment method refers to [charging through your platform](https://stripe.com/docs/connect/destination-charges)."""
  supportedPaymentMethods: [String]!
  """Countries that can accept transfers from the specified country."""
  supportedTransferCountries: [String]!
  verificationFields: CountrySpecVerificationFields!
}

enum Object27 {
  COUNTRY_SPEC
}

type CountrySpecVerificationFields {
  company: CountrySpecVerificationFieldDetails!
  individual: CountrySpecVerificationFieldDetails!
}

type CountrySpecVerificationFieldDetails {
  """Additional fields which are only required for some users."""
  additional: [String]!
  """Fields which every account must eventually provide."""
  minimum: [String]!
}

type V1Coupons2 {
  data: [Coupon]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

type CreditNotesList {
  data: [CreditNote]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

"""
Issue a credit note to adjust an invoice's amount after the invoice is finalized.

Related guide: [Credit Notes](https://stripe.com/docs/billing/invoices/credit-notes).
"""
type CreditNote {
  """The integer amount in %s representing the total amount of the credit note, including tax."""
  amount: Int!
  """Time at which the object was created. Measured in seconds since the Unix epoch."""
  created: Int!
  """Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."""
  currency: String!
  """ID of the customer."""
  customer: JSON!
  """Customer balance transaction related to this credit note."""
  customerBalanceTransaction: JSON
  """The integer amount in %s representing the total amount of discount that was credited."""
  discountAmount: Int!
  """The aggregate amounts calculated per discount for all line items."""
  discountAmounts: [DiscountsResourceDiscountAmount]!
  """Unique identifier for the object."""
  id: String!
  """ID of the invoice."""
  invoice: JSON!
  """Line items that make up the credit note"""
  lines: Lines!
  """Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."""
  livemode: Boolean!
  """Customer-facing text that appears on the credit note PDF."""
  memo: String
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."""
  metadata: JSON
  """A unique number that identifies this particular credit note and appears on the PDF of the credit note and its associated invoice."""
  number: String!
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object29!
  """Amount that was credited outside of Stripe."""
  outOfBandAmount: Int
  """The link to download the PDF of the credit note."""
  pdf: String!
  """Reason for issuing this credit note, one of `duplicate`, `fraudulent`, `order_change`, or `product_unsatisfactory`"""
  reason: Reason7
  """Refund related to this credit note."""
  refund: JSON
  """Status of this credit note, one of `issued` or `void`. Learn more about [voiding credit notes](https://stripe.com/docs/billing/invoices/credit-notes#voiding)."""
  status: Status11!
  """The integer amount in %s representing the amount of the credit note, excluding tax and invoice level discounts."""
  subtotal: Int!
  """The aggregate amounts calculated per tax rate for all line items."""
  taxAmounts: [CreditNoteTaxAmount]!
  """The integer amount in %s representing the total amount of the credit note, including tax and all discount."""
  total: Int!
  """Type of this credit note, one of `pre_payment` or `post_payment`. A `pre_payment` credit note means it was issued when the invoice was open. A `post_payment` credit note means it was issued when the invoice was paid."""
  type: Type14!
  """The time that the credit note was voided."""
  voidedAt: Int
}

type DiscountsResourceDiscountAmount {
  """The amount, in %s, of the discount."""
  amount: Int!
  """The discount that was applied to get this discount amount."""
  discount: JSON!
}

"""Line items that make up the credit note"""
type Lines {
  """Details about each object."""
  data: [CreditNoteLineItem]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

type CreditNoteLineItem {
  """The integer amount in %s representing the gross amount being credited for this line item, excluding (exclusive) tax and discounts."""
  amount: Int!
  """Description of the item being credited."""
  description: String
  """The integer amount in %s representing the discount being credited for this line item."""
  discountAmount: Int!
  """The amount of discount calculated per discount for this line item"""
  discountAmounts: [DiscountsResourceDiscountAmount]!
  """Unique identifier for the object."""
  id: String!
  """ID of the invoice line item being credited"""
  invoiceLineItem: String
  """Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."""
  livemode: Boolean!
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object28!
  """The number of units of product being credited."""
  quantity: Int
  """The amount of tax calculated per tax rate for this line item"""
  taxAmounts: [CreditNoteTaxAmount]!
  """The tax rates which apply to the line item."""
  taxRates: [TaxRate]!
  """The type of the credit note line item, one of `invoice_line_item` or `custom_line_item`. When the type is `invoice_line_item` there is an additional `invoice_line_item` property on the resource the value of which is the id of the credited line item on the invoice."""
  type: Type13!
  """The cost of each unit of product being credited."""
  unitAmount: Int
  """Same as `unit_amount`, but contains a decimal value with at most 12 decimal places."""
  unitAmountDecimal: String
}

enum Object28 {
  CREDIT_NOTE_LINE_ITEM
}

type CreditNoteTaxAmount {
  """The amount, in %s, of the tax."""
  amount: Int!
  """Whether this tax amount is inclusive or exclusive."""
  inclusive: Boolean!
  """The tax rate that was applied to get this tax amount."""
  taxRate: JSON!
}

enum Type13 {
  CUSTOM_LINE_ITEM
  INVOICE_LINE_ITEM
}

enum Object29 {
  CREDIT_NOTE
}

enum Reason7 {
  DUPLICATE
  FRAUDULENT
  ORDER_CHANGE
  PRODUCT_UNSATISFACTORY
}

enum Status11 {
  ISSUED
  VOID
}

enum Type14 {
  POST_PAYMENT
  PRE_PAYMENT
}

type CreditNoteLinesList {
  """Details about each object."""
  data: [CreditNoteLineItem]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

input Lines3ListItemInput {
  amount: Int
  description: String
  invoiceLineItem: String
  quantity: Int
  taxRates: JSON
  type: Type15!
  unitAmount: Int
  unitAmountDecimal: String
}

enum Type15 {
  CUSTOM_LINE_ITEM
  INVOICE_LINE_ITEM
}

enum Reason18 {
  DUPLICATE
  FRAUDULENT
  ORDER_CHANGE
  PRODUCT_UNSATISFACTORY
}

type V1Customers2 {
  data: [Customer13]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

"""
`Customer` objects allow you to perform recurring charges, and to track
multiple charges, that are associated with the same customer. The API allows
you to create, delete, and update your customers. You can retrieve individual
customers as well as a list of all your customers.

Related guide: [Save a card during payment](https://stripe.com/docs/payments/save-during-payment).
"""
type Customer13 {
  """The customer's address."""
  address: Address7
  """Current balance, if any, being stored on the customer. If negative, the customer has credit to apply to their next invoice. If positive, the customer has an amount owed that will be added to their next invoice. The balance does not refer to any unpaid invoices; it solely takes into account amounts that have yet to be successfully applied to any invoice. This balance is only taken into account as invoices are finalized."""
  balance: Int
  """Time at which the object was created. Measured in seconds since the Unix epoch."""
  created: Int!
  """Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) the customer can be charged in for recurring billing purposes."""
  currency: String
  """
  ID of the default payment source for the customer.
  
  If you are using payment methods created via the PaymentMethods API, see the [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) field instead.
  """
  defaultSource: JSON
  """
  When the customer's latest invoice is billed by charging automatically, `delinquent` is `true` if the invoice's latest charge failed. When the customer's latest invoice is billed by sending an invoice, `delinquent` is `true` if the invoice isn't paid by its due date.
  
  If an invoice is marked uncollectible by [dunning](https://stripe.com/docs/billing/automatic-collection), `delinquent` doesn't get reset to `false`.
  """
  delinquent: Boolean
  """An arbitrary string attached to the object. Often useful for displaying to users."""
  description: String
  """Describes the current discount active on the customer, if there is one."""
  discount: Discount3
  """The customer's email address."""
  email: String
  """Unique identifier for the object."""
  id: String!
  """The prefix for the customer used to generate unique invoice numbers."""
  invoicePrefix: String
  invoiceSettings: InvoiceSettingCustomerSetting
  """Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."""
  livemode: Boolean!
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."""
  metadata: JSON
  """The customer's full name or business name."""
  name: String
  """The suffix of the customer's next invoice number, e.g., 0001."""
  nextInvoiceSequence: Int
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object30!
  """The customer's phone number."""
  phone: String
  """The customer's preferred locales (languages), ordered by preference."""
  preferredLocales: [String]
  """Mailing and shipping address for the customer. Appears on invoices emailed to this customer."""
  shipping: Shipping5
  """The customer's payment sources, if any."""
  sources: Sources
  """The customer's current subscriptions, if any."""
  subscriptions: Subscriptions
  tax: CustomerTax
  """Describes the customer's tax exemption status. One of `none`, `exempt`, or `reverse`. When set to `reverse`, invoice and receipt PDFs include the text **"Reverse charge"**."""
  taxExempt: TaxExempt2
  """The customer's tax IDs."""
  taxIds: TaxIDsList
}

"""The customer's address."""
type Address7 {
  """City, district, suburb, town, or village."""
  city: String
  """Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2))."""
  country: String
  """Address line 1 (e.g., street, PO Box, or company name)."""
  line1: String
  """Address line 2 (e.g., apartment, suite, unit, or building)."""
  line2: String
  """ZIP or postal code."""
  postalCode: String
  """State, county, province, or region."""
  state: String
}

"""Describes the current discount active on the customer, if there is one."""
type Discount3 {
  """The Checkout session that this coupon is applied to, if it is applied to a particular session in payment mode. Will not be present for subscription mode."""
  checkoutSession: String
  """
  A coupon contains information about a percent-off or amount-off discount you
  might want to apply to a customer. Coupons may be applied to [invoices](https://stripe.com/docs/api#invoices) or
  [orders](https://stripe.com/docs/api#create_order-coupon). Coupons do not work with conventional one-off [charges](https://stripe.com/docs/api#create_charge).
  """
  coupon: Coupon
  """The ID of the customer associated with this discount."""
  customer: JSON
  """If the coupon has a duration of `repeating`, the date that this discount will end. If the coupon has a duration of `once` or `forever`, this attribute will be null."""
  end: Int
  """The ID of the discount object. Discounts cannot be fetched by ID. Use `expand[]=discounts` in API calls to expand discount IDs in an array."""
  id: String
  """The invoice that the discount's coupon was applied to, if it was applied directly to a particular invoice."""
  invoice: String
  """The invoice item `id` (or invoice line item `id` for invoice line items of type='subscription') that the discount's coupon was applied to, if it was applied directly to a particular invoice item or invoice line item."""
  invoiceItem: String
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object22
  """The promotion code applied to create this discount."""
  promotionCode: JSON
  """Date that the coupon was applied."""
  start: Int
  """The subscription that this coupon is applied to, if it is applied to a particular subscription."""
  subscription: String
}

type InvoiceSettingCustomerSetting {
  """Default custom fields to be displayed on invoices for this customer."""
  customFields: [InvoiceSettingCustomField]
  """ID of a payment method that's attached to the customer, to be used as the customer's default payment method for subscriptions and invoices."""
  defaultPaymentMethod: JSON
  """Default footer to be displayed on invoices for this customer."""
  footer: String
}

type InvoiceSettingCustomField {
  """The name of the custom field."""
  name: String!
  """The value of the custom field."""
  value: String!
}

enum Object30 {
  CUSTOMER
}

"""Mailing and shipping address for the customer. Appears on invoices emailed to this customer."""
type Shipping5 {
  address: Address
  """The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc."""
  carrier: String
  """Recipient name."""
  name: String
  """Recipient phone (including extension)."""
  phone: String
  """The tracking number for a physical product, obtained from the delivery service. If multiple tracking numbers were generated for this purchase, please separate them with commas."""
  trackingNumber: String
}

"""The customer's payment sources, if any."""
type Sources {
  """Details about each object."""
  data: [Data21ListItem]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

type Data21ListItem {
  account: JSON
  """The name of the person or business that owns the bank account."""
  accountHolderName: String
  """The type of entity that holds the account. This can be either `individual` or `company`."""
  accountHolderType: String
  """The bank account type. This can only be `checking` or `savings` in most countries. In Japan, this can only be `futsu` or `toza`."""
  accountType: String
  achCreditTransfer: AchCreditTransfer2
  achDebit: AchDebit2
  acssDebit: AcssDebit4
  """True when this bitcoin receiver has received a non-zero amount of bitcoin."""
  active: Boolean
  """City/District/Suburb/Town/Village."""
  addressCity: String
  """Billing address country, if provided when creating card."""
  addressCountry: String
  """Address line 1 (Street address/PO Box/Company name)."""
  addressLine1: String
  """If `address_line1` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`."""
  addressLine1Check: String
  """Address line 2 (Apartment/Suite/Unit/Building)."""
  addressLine2: String
  """State/County/Province/Region."""
  addressState: String
  """ZIP or postal code."""
  addressZip: String
  """If `address_zip` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`."""
  addressZipCheck: String
  alipay: Alipay2
  amount: JSON
  """The amount of `currency` to which `bitcoin_amount_received` has been converted."""
  amountReceived: Int
  auBecsDebit: AuBecsDebit2
  availablePayoutMethods: JSON
  bancontact: Bancontact2
  """Name of the bank associated with the routing number (e.g., `WELLS FARGO`)."""
  bankName: String
  """The amount of bitcoin that the customer should send to fill the receiver. The `bitcoin_amount` is denominated in Satoshi: there are 10^8 Satoshi in one bitcoin."""
  bitcoinAmount: Int
  """The amount of bitcoin that has been sent by the customer to this receiver."""
  bitcoinAmountReceived: Int
  """This URI can be displayed to the customer as a clickable link (to activate their bitcoin client) or as a QR code (for mobile wallets)."""
  bitcoinUri: String
  """Card brand. Can be `American Express`, `Diners Club`, `Discover`, `JCB`, `MasterCard`, `UnionPay`, `Visa`, or `Unknown`."""
  brand: String
  card: Card6
  cardPresent: CardPresent2
  """The client secret of the source. Used for client-side retrieval using a publishable key."""
  clientSecret: String
  codeVerification: CodeVerification
  country: JSON
  """Time at which the object was created. Measured in seconds since the Unix epoch."""
  created: Int
  currency: JSON
  customer: JSON
  """If a CVC was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. A result of unchecked indicates that CVC was provided but hasn't been checked yet. Checks are typically performed when attaching a card to a Customer object, or when creating a charge. For more details, see [Check if a card is valid without a charge](https://support.stripe.com/questions/check-if-a-card-is-valid-without-a-charge)."""
  cvcCheck: String
  defaultForCurrency: JSON
  """An arbitrary string attached to the object. Often useful for displaying to users."""
  description: String
  """(For tokenized numbers only.) The last four digits of the device account number."""
  dynamicLast4: String
  """The customer's email address, set by the API call that creates the receiver."""
  email: String
  eps: Eps2
  """Two-digit number representing the card's expiration month."""
  expMonth: Int
  """Four-digit number representing the card's expiration year."""
  expYear: Int
  """This flag is initially false and updates to true when the customer sends the `bitcoin_amount` to this receiver."""
  filled: Boolean
  fingerprint: JSON
  """The authentication `flow` of the source. `flow` is one of `redirect`, `receiver`, `code_verification`, `none`."""
  flow: String
  """Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`."""
  funding: String
  giropay: Giropay2
  """Unique identifier for the object."""
  id: String
  ideal: Ideal2
  """A bitcoin address that is specific to this receiver. The customer can send bitcoin to this address to fill the receiver."""
  inboundAddress: String
  klarna: Klarna2
  last4: JSON
  """Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."""
  livemode: Boolean
  metadata: JSON
  multibanco: Multibanco2
  """Cardholder name."""
  name: String
  object: JSON
  """Information about the owner of the payment instrument that may be used or required by particular source types."""
  owner: Owner3
  p24: P242
  """The ID of the payment created from the receiver, if any. Hidden when viewing the receiver with a publishable key."""
  payment: String
  """If the Alipay account object is not reusable, the exact amount that you can create a charge for."""
  paymentAmount: Int
  """If the Alipay account object is not reusable, the exact currency that you can create a charge for."""
  paymentCurrency: String
  receiver: Receiver2
  """The recipient that this card belongs to. This attribute will not be in the card object if the card belongs to a customer or account instead."""
  recipient: JSON
  redirect: Redirect
  """The refund address of this bitcoin receiver."""
  refundAddress: String
  """True if you can create multiple payments using this account. If the account is reusable, then you can freely choose the amount of each payment."""
  reusable: Boolean
  """The routing transit number for the bank account."""
  routingNumber: String
  sepaDebit: SepaDebit2
  sofort: Sofort2
  sourceOrder: SourceOrder
  """Extra information about a source. This will appear on your customer's statement every time you charge the source."""
  statementDescriptor: String
  status: JSON
  threeDSecure: ThreeDSecure4
  """If the card number is tokenized, this is the method that was used. Can be `android_pay` (includes Google Pay), `apple_pay`, `masterpass`, `visa_checkout`, or null."""
  tokenizationMethod: String
  """A list with one entry for each time that the customer sent bitcoin to the receiver. Hidden when viewing the receiver with a publishable key."""
  transactions: Transactions
  """The `type` of the source. The `type` is a payment method, one of `ach_credit_transfer`, `ach_debit`, `alipay`, `bancontact`, `card`, `card_present`, `eps`, `giropay`, `ideal`, `multibanco`, `klarna`, `p24`, `sepa_debit`, `sofort`, `three_d_secure`, or `wechat`. An additional hash is included on the source with a name matching this value. It contains additional information specific to the [payment method](https://stripe.com/docs/sources) used."""
  type: Type18
  """This receiver contains uncaptured funds that can be used for a payment or refunded."""
  uncapturedFunds: Boolean
  """Either `reusable` or `single_use`. Whether this source should be reusable or not. Some source types may or may not be reusable by construction, while others may leave the option at creation. If an incompatible value is passed, an error will be returned."""
  usage: String
  """Whether this Alipay account object has ever been used for a payment."""
  used: Boolean
  """Indicate if this source is used for payment."""
  usedForPayment: Boolean
  """The username for the Alipay account."""
  username: String
  wechat: Wechat2
}

type AchCreditTransfer2 {
  accountNumber: String
  bankName: String
  fingerprint: String
  refundAccountHolderName: String
  refundAccountHolderType: String
  refundRoutingNumber: String
  routingNumber: String
  swiftCode: String
}

type AchDebit2 {
  bankName: String
  country: String
  fingerprint: String
  last4: String
  routingNumber: String
  type: String
}

type AcssDebit4 {
  bankAddressCity: String
  bankAddressLine1: String
  bankAddressLine2: String
  bankAddressPostalCode: String
  bankName: String
  category: String
  country: String
  fingerprint: String
  last4: String
  routingNumber: String
}

type Alipay2 {
  dataString: String
  nativeUrl: String
  statementDescriptor: String
}

type AuBecsDebit2 {
  bsbNumber: String
  fingerprint: String
  last4: String
}

type Bancontact2 {
  bankCode: String
  bankName: String
  bic: String
  ibanLast4: String
  preferredLanguage: String
  statementDescriptor: String
}

type Card6 {
  addressLine1Check: String
  addressZipCheck: String
  brand: String
  country: String
  cvcCheck: String
  dynamicLast4: String
  expMonth: Int
  expYear: Int
  fingerprint: String
  funding: String
  last4: String
  name: String
  threeDSecure: String
  tokenizationMethod: String
}

type CardPresent2 {
  applicationCryptogram: String
  applicationPreferredName: String
  authorizationCode: String
  authorizationResponseCode: String
  brand: String
  country: String
  cvmType: String
  dataType: String
  dedicatedFileName: String
  emvAuthData: String
  evidenceCustomerSignature: String
  evidenceTransactionCertificate: String
  expMonth: Int
  expYear: Int
  fingerprint: String
  funding: String
  last4: String
  posDeviceId: String
  posEntryMode: String
  readMethod: String
  reader: String
  terminalVerificationResults: String
  transactionStatusInformation: String
}

type CodeVerification {
  """The number of attempts remaining to authenticate the source object with a verification code."""
  attemptsRemaining: Int!
  """The status of the code verification, either `pending` (awaiting verification, `attempts_remaining` should be greater than 0), `succeeded` (successful verification) or `failed` (failed verification, cannot be verified anymore as `attempts_remaining` should be 0)."""
  status: String!
}

type Eps2 {
  reference: String
  statementDescriptor: String
}

type Giropay2 {
  bankCode: String
  bankName: String
  bic: String
  statementDescriptor: String
}

type Ideal2 {
  bank: String
  bic: String
  ibanLast4: String
  statementDescriptor: String
}

type Klarna2 {
  backgroundImageUrl: String
  clientToken: String
  firstName: String
  lastName: String
  locale: String
  logoUrl: String
  pageTitle: String
  payLaterAssetUrlsDescriptive: String
  payLaterAssetUrlsStandard: String
  payLaterName: String
  payLaterRedirectUrl: String
  payNowAssetUrlsDescriptive: String
  payNowAssetUrlsStandard: String
  payNowName: String
  payNowRedirectUrl: String
  payOverTimeAssetUrlsDescriptive: String
  payOverTimeAssetUrlsStandard: String
  payOverTimeName: String
  payOverTimeRedirectUrl: String
  paymentMethodCategories: String
  purchaseCountry: String
  purchaseType: String
  redirectUrl: String
  shippingDelay: Int
  shippingFirstName: String
  shippingLastName: String
}

type Multibanco2 {
  entity: String
  reference: String
  refundAccountHolderAddressCity: String
  refundAccountHolderAddressCountry: String
  refundAccountHolderAddressLine1: String
  refundAccountHolderAddressLine2: String
  refundAccountHolderAddressPostalCode: String
  refundAccountHolderAddressState: String
  refundAccountHolderName: String
  refundIban: String
}

"""Information about the owner of the payment instrument that may be used or required by particular source types."""
type Owner3 {
  """Owner's address."""
  address: Address8
  """Owner's email address."""
  email: String
  """Owner's full name."""
  name: String
  """Owner's phone number (including extension)."""
  phone: String
  """Verified owner's address. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated."""
  verifiedAddress: VerifiedAddress
  """Verified owner's email address. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated."""
  verifiedEmail: String
  """Verified owner's full name. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated."""
  verifiedName: String
  """Verified owner's phone number (including extension). Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated."""
  verifiedPhone: String
}

"""Owner's address."""
type Address8 {
  """City, district, suburb, town, or village."""
  city: String
  """Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2))."""
  country: String
  """Address line 1 (e.g., street, PO Box, or company name)."""
  line1: String
  """Address line 2 (e.g., apartment, suite, unit, or building)."""
  line2: String
  """ZIP or postal code."""
  postalCode: String
  """State, county, province, or region."""
  state: String
}

"""Verified owner's address. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated."""
type VerifiedAddress {
  """City, district, suburb, town, or village."""
  city: String
  """Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2))."""
  country: String
  """Address line 1 (e.g., street, PO Box, or company name)."""
  line1: String
  """Address line 2 (e.g., apartment, suite, unit, or building)."""
  line2: String
  """ZIP or postal code."""
  postalCode: String
  """State, county, province, or region."""
  state: String
}

type P242 {
  reference: String
}

type Receiver2 {
  """The address of the receiver source. This is the value that should be communicated to the customer to send their funds to."""
  address: String
  """The total amount that was moved to your balance. This is almost always equal to the amount charged. In rare cases when customers deposit excess funds and we are unable to refund those, those funds get moved to your balance and show up in amount_charged as well. The amount charged is expressed in the source's currency."""
  amountCharged: Int!
  """The total amount received by the receiver source. `amount_received = amount_returned + amount_charged` should be true for consumed sources unless customers deposit excess funds. The amount received is expressed in the source's currency."""
  amountReceived: Int!
  """The total amount that was returned to the customer. The amount returned is expressed in the source's currency."""
  amountReturned: Int!
  """Type of refund attribute method, one of `email`, `manual`, or `none`."""
  refundAttributesMethod: String!
  """Type of refund attribute status, one of `missing`, `requested`, or `available`."""
  refundAttributesStatus: String!
}

type Redirect {
  """The failure reason for the redirect, either `user_abort` (the customer aborted or dropped out of the redirect flow), `declined` (the authentication failed or the transaction was declined), or `processing_error` (the redirect failed due to a technical error). Present only if the redirect status is `failed`."""
  failureReason: String
  """The URL you provide to redirect the customer to after they authenticated their payment."""
  returnUrl: String!
  """The status of the redirect, either `pending` (ready to be used by your customer to authenticate the transaction), `succeeded` (succesful authentication, cannot be reused) or `not_required` (redirect should not be used) or `failed` (failed authentication, cannot be reused)."""
  status: String!
  """The URL provided to you to redirect a customer to as part of a `redirect` authentication flow."""
  url: String!
}

type SepaDebit2 {
  bankCode: String
  branchCode: String
  country: String
  fingerprint: String
  last4: String
  mandateReference: String
  mandateUrl: String
}

type Sofort2 {
  bankCode: String
  bankName: String
  bic: String
  country: String
  ibanLast4: String
  preferredLanguage: String
  statementDescriptor: String
}

type SourceOrder {
  """A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount for the order."""
  amount: Int!
  """Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."""
  currency: String!
  """The email address of the customer placing the order."""
  email: String
  """List of items constituting the order."""
  items: [SourceOrderItem]
  shipping: Shipping6
}

type SourceOrderItem {
  """The amount (price) for this order item."""
  amount: Int
  """This currency of this order item. Required when `amount` is present."""
  currency: String
  """Human-readable description for this order item."""
  description: String
  """The ID of the associated object for this line item. Expandable if not null (e.g., expandable to a SKU)."""
  parent: String
  """The quantity of this order item. When type is `sku`, this is the number of instances of the SKU to be ordered."""
  quantity: Int
  """The type of this order item. Must be `sku`, `tax`, or `shipping`."""
  type: String
}

type Shipping6 {
  address: Address
  """The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc."""
  carrier: String
  """Recipient name."""
  name: String
  """Recipient phone (including extension)."""
  phone: String
  """The tracking number for a physical product, obtained from the delivery service. If multiple tracking numbers were generated for this purchase, please separate them with commas."""
  trackingNumber: String
}

type ThreeDSecure4 {
  addressLine1Check: String
  addressZipCheck: String
  authenticated: Boolean
  brand: String
  card: String
  country: String
  customer: String
  cvcCheck: String
  dynamicLast4: String
  expMonth: Int
  expYear: Int
  fingerprint: String
  funding: String
  last4: String
  name: String
  threeDSecure: String
  tokenizationMethod: String
}

enum Type18 {
  ACH_CREDIT_TRANSFER
  ACH_DEBIT
  ACSS_DEBIT
  ALIPAY
  AU_BECS_DEBIT
  BANCONTACT
  CARD
  CARD_PRESENT
  EPS
  GIROPAY
  IDEAL
  KLARNA
  MULTIBANCO
  P24
  SEPA_DEBIT
  SOFORT
  THREE_D_SECURE
  WECHAT
}

type Wechat2 {
  prepayId: String
  qrCodeUrl: String
  statementDescriptor: String
}

"""The customer's current subscriptions, if any."""
type Subscriptions {
  """Details about each object."""
  data: [Subscription5]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

"""
Subscriptions allow you to charge a customer on a recurring basis.

Related guide: [Creating Subscriptions](https://stripe.com/docs/billing/subscriptions/creating).
"""
type Subscription5 {
  """A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account."""
  applicationFeePercent: Float
  automaticTax: SubscriptionAutomaticTax!
  """Determines the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices."""
  billingCycleAnchor: Int!
  """Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period"""
  billingThresholds: BillingThresholds
  """A date in the future at which the subscription will automatically get canceled"""
  cancelAt: Int
  """If the subscription has been canceled with the `at_period_end` flag set to `true`, `cancel_at_period_end` on the subscription will be true. You can use this attribute to determine whether a subscription that has a status of active is scheduled to be canceled at the end of the current period."""
  cancelAtPeriodEnd: Boolean!
  """If the subscription has been canceled, the date of that cancellation. If the subscription was canceled with `cancel_at_period_end`, `canceled_at` will reflect the time of the most recent update request, not the end of the subscription period when the subscription is automatically moved to a canceled state."""
  canceledAt: Int
  """Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions."""
  collectionMethod: CollectionMethod
  """Time at which the object was created. Measured in seconds since the Unix epoch."""
  created: Int!
  """End of the current period that the subscription has been invoiced for. At the end of this period, a new invoice will be created."""
  currentPeriodEnd: Int!
  """Start of the current period that the subscription has been invoiced for."""
  currentPeriodStart: Int!
  """ID of the customer who owns the subscription."""
  customer: JSON!
  """Number of days a customer has to pay invoices generated by this subscription. This value will be `null` for subscriptions where `collection_method=charge_automatically`."""
  daysUntilDue: Int
  """ID of the default payment method for the subscription. It must belong to the customer associated with the subscription. This takes precedence over `default_source`. If neither are set, invoices will use the customer's [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source)."""
  defaultPaymentMethod: JSON
  """ID of the default payment source for the subscription. It must belong to the customer associated with the subscription and be in a chargeable state. If `default_payment_method` is also set, `default_payment_method` will take precedence. If neither are set, invoices will use the customer's [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source)."""
  defaultSource: JSON
  """The tax rates that will apply to any subscription item that does not have `tax_rates` set. Invoices created will have their `default_tax_rates` populated from the subscription."""
  defaultTaxRates: [TaxRate]
  """Describes the current discount applied to this subscription, if there is one. When billing, a discount applied to a subscription overrides a discount applied on a customer-wide basis."""
  discount: Discount4
  """If the subscription has ended, the date the subscription ended."""
  endedAt: Int
  """Unique identifier for the object."""
  id: String!
  """List of subscription items, each with an attached price."""
  items: SubscriptionItemList!
  """The most recent invoice this subscription has generated."""
  latestInvoice: JSON
  """Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."""
  livemode: Boolean!
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."""
  metadata: JSON!
  """Specifies the approximate timestamp on which any pending invoice items will be billed according to the schedule provided at `pending_invoice_item_interval`."""
  nextPendingInvoiceItemInvoice: Int
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object32!
  """If specified, payment collection for this subscription will be paused."""
  pauseCollection: PauseCollection
  """Payment settings passed on to invoices created by the subscription."""
  paymentSettings: PaymentSettings
  """Specifies an interval for how often to bill for any pending invoice items. It is analogous to calling [Create an invoice](https://stripe.com/docs/api#create_invoice) for the given subscription at the specified interval."""
  pendingInvoiceItemInterval: PendingInvoiceItemInterval
  """You can use this [SetupIntent](https://stripe.com/docs/api/setup_intents) to collect user authentication when creating a subscription without immediate payment or updating a subscription's payment method, allowing you to optimize for off-session payments. Learn more in the [SCA Migration Guide](https://stripe.com/docs/billing/migration/strong-customer-authentication#scenario-2)."""
  pendingSetupIntent: JSON
  """If specified, [pending updates](https://stripe.com/docs/billing/subscriptions/pending-updates) that will be applied to the subscription once the `latest_invoice` has been paid."""
  pendingUpdate: PendingUpdate
  """The schedule attached to the subscription"""
  schedule: JSON
  """Date when the subscription was first created. The date might differ from the `created` date due to backdating."""
  startDate: Int!
  """
  Possible values are `incomplete`, `incomplete_expired`, `trialing`, `active`, `past_due`, `canceled`, or `unpaid`. 
  
  For `collection_method=charge_automatically` a subscription moves into `incomplete` if the initial payment attempt fails. A subscription in this state can only have metadata and default_source updated. Once the first invoice is paid, the subscription moves into an `active` state. If the first invoice is not paid within 23 hours, the subscription transitions to `incomplete_expired`. This is a terminal state, the open invoice will be voided and no further invoices will be generated. 
  
  A subscription that is currently in a trial period is `trialing` and moves to `active` when the trial period is over. 
  
  If subscription `collection_method=charge_automatically` it becomes `past_due` when payment to renew it fails and `canceled` or `unpaid` (depending on your subscriptions settings) when Stripe has exhausted all payment retry attempts. 
  
  If subscription `collection_method=send_invoice` it becomes `past_due` when its invoice is not paid by the due date, and `canceled` or `unpaid` if it is still not paid by an additional deadline after that. Note that when a subscription has a status of `unpaid`, no subsequent invoices will be attempted (invoices will be created, but then immediately automatically closed). After receiving updated payment information from a customer, you may choose to reopen and pay their closed invoices.
  """
  status: Status14!
  """The account (if any) the subscription's payments will be attributed to for tax reporting, and where funds from each payment will be transferred to for each of the subscription's invoices."""
  transferData: TransferData4
  """If the subscription has a trial, the end of that trial."""
  trialEnd: Int
  """If the subscription has a trial, the beginning of that trial."""
  trialStart: Int
}

type SubscriptionAutomaticTax {
  """Whether Stripe automatically computes tax on this subscription."""
  enabled: Boolean!
}

"""Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period"""
type BillingThresholds {
  """Monetary threshold that triggers the subscription to create an invoice"""
  amountGte: Int
  """Indicates if the `billing_cycle_anchor` should be reset when a threshold is reached. If true, `billing_cycle_anchor` will be updated to the date/time the threshold was last reached; otherwise, the value will remain unchanged. This value may not be `true` if the subscription contains items with plans that have `aggregate_usage=last_ever`."""
  resetBillingCycleAnchor: Boolean
}

enum CollectionMethod {
  CHARGE_AUTOMATICALLY
  SEND_INVOICE
}

"""Describes the current discount applied to this subscription, if there is one. When billing, a discount applied to a subscription overrides a discount applied on a customer-wide basis."""
type Discount4 {
  """The Checkout session that this coupon is applied to, if it is applied to a particular session in payment mode. Will not be present for subscription mode."""
  checkoutSession: String
  """
  A coupon contains information about a percent-off or amount-off discount you
  might want to apply to a customer. Coupons may be applied to [invoices](https://stripe.com/docs/api#invoices) or
  [orders](https://stripe.com/docs/api#create_order-coupon). Coupons do not work with conventional one-off [charges](https://stripe.com/docs/api#create_charge).
  """
  coupon: Coupon
  """The ID of the customer associated with this discount."""
  customer: JSON
  """If the coupon has a duration of `repeating`, the date that this discount will end. If the coupon has a duration of `once` or `forever`, this attribute will be null."""
  end: Int
  """The ID of the discount object. Discounts cannot be fetched by ID. Use `expand[]=discounts` in API calls to expand discount IDs in an array."""
  id: String
  """The invoice that the discount's coupon was applied to, if it was applied directly to a particular invoice."""
  invoice: String
  """The invoice item `id` (or invoice line item `id` for invoice line items of type='subscription') that the discount's coupon was applied to, if it was applied directly to a particular invoice item or invoice line item."""
  invoiceItem: String
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object22
  """The promotion code applied to create this discount."""
  promotionCode: JSON
  """Date that the coupon was applied."""
  start: Int
  """The subscription that this coupon is applied to, if it is applied to a particular subscription."""
  subscription: String
}

"""List of subscription items, each with an attached price."""
type SubscriptionItemList {
  """Details about each object."""
  data: [SubscriptionItem]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

"""
Subscription items allow you to create customer subscriptions with more than
one plan, making it easy to represent complex billing relationships.
"""
type SubscriptionItem {
  """Define thresholds at which an invoice will be sent, and the related subscription advanced to a new billing period"""
  billingThresholds: BillingThresholds2
  """Time at which the object was created. Measured in seconds since the Unix epoch."""
  created: Int!
  """Unique identifier for the object."""
  id: String!
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."""
  metadata: JSON!
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object31!
  """
  Prices define the unit cost, currency, and (optional) billing cycle for both recurring and one-time purchases of products.
  [Products](https://stripe.com/docs/api#products) help you track inventory or provisioning, and prices help you track payment terms. Different physical goods or levels of service should be represented by products, and pricing options should be represented by prices. This approach lets you change prices without having to change your provisioning scheme.
  
  For example, you might have a single "gold" product that has prices for $10/month, $100/year, and €9 once.
  
  Related guides: [Set up a subscription](https://stripe.com/docs/billing/subscriptions/set-up-subscription), [create an invoice](https://stripe.com/docs/billing/invoices/create), and more about [products and prices](https://stripe.com/docs/billing/prices-guide).
  """
  price: Price3!
  """The [quantity](https://stripe.com/docs/subscriptions/quantities) of the plan to which the customer should be subscribed."""
  quantity: Int
  """The `subscription` this `subscription_item` belongs to."""
  subscription: String!
  """The tax rates which apply to this `subscription_item`. When set, the `default_tax_rates` on the subscription do not apply to this `subscription_item`."""
  taxRates: [TaxRate]
}

"""Define thresholds at which an invoice will be sent, and the related subscription advanced to a new billing period"""
type BillingThresholds2 {
  """Usage threshold that triggers the subscription to create an invoice"""
  usageGte: Int
}

enum Object31 {
  SUBSCRIPTION_ITEM
}

"""
Prices define the unit cost, currency, and (optional) billing cycle for both recurring and one-time purchases of products.
[Products](https://stripe.com/docs/api#products) help you track inventory or provisioning, and prices help you track payment terms. Different physical goods or levels of service should be represented by products, and pricing options should be represented by prices. This approach lets you change prices without having to change your provisioning scheme.

For example, you might have a single "gold" product that has prices for $10/month, $100/year, and €9 once.

Related guides: [Set up a subscription](https://stripe.com/docs/billing/subscriptions/set-up-subscription), [create an invoice](https://stripe.com/docs/billing/invoices/create), and more about [products and prices](https://stripe.com/docs/billing/prices-guide).
"""
type Price3 {
  """Whether the price can be used for new purchases."""
  active: Boolean!
  """Describes how to compute the price per period. Either `per_unit` or `tiered`. `per_unit` indicates that the fixed amount (specified in `unit_amount` or `unit_amount_decimal`) will be charged per unit in `quantity` (for prices with `usage_type=licensed`), or per unit of total usage (for prices with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as defined using the `tiers` and `tiers_mode` attributes."""
  billingScheme: BillingScheme!
  """Time at which the object was created. Measured in seconds since the Unix epoch."""
  created: Int!
  """Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."""
  currency: String!
  """Unique identifier for the object."""
  id: String!
  """Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."""
  livemode: Boolean!
  """A lookup key used to retrieve prices dynamically from a static string."""
  lookupKey: String
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."""
  metadata: JSON!
  """A brief description of the price, hidden from customers."""
  nickname: String
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object24!
  """The ID of the product this price is associated with."""
  product: JSON!
  """The recurring components of a price such as `interval` and `usage_type`."""
  recurring: Recurring
  """Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`. Once specified as either `inclusive` or `exclusive`, it cannot be changed."""
  taxBehavior: TaxBehavior
  """Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`."""
  tiers: [PriceTier]
  """Defines if the tiering price should be `graduated` or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per unit price. In `graduated` tiering, pricing can change as the quantity grows."""
  tiersMode: TiersMode
  """Apply a transformation to the reported usage or set quantity before computing the amount billed. Cannot be combined with `tiers`."""
  transformQuantity: TransformQuantity
  """One of `one_time` or `recurring` depending on whether the price is for a one-time purchase or a recurring (subscription) purchase."""
  type: Type12!
  """The unit amount in %s to be charged, represented as a whole integer if possible. Only set if `billing_scheme=per_unit`."""
  unitAmount: Int
  """The unit amount in %s to be charged, represented as a decimal string with at most 12 decimal places. Only set if `billing_scheme=per_unit`."""
  unitAmountDecimal: String
}

enum Object32 {
  SUBSCRIPTION
}

"""If specified, payment collection for this subscription will be paused."""
type PauseCollection {
  """The payment collection behavior for this subscription while paused. One of `keep_as_draft`, `mark_uncollectible`, or `void`."""
  behavior: Behavior
  """The time after which the subscription will resume collecting payments."""
  resumesAt: Int
}

enum Behavior {
  KEEP_AS_DRAFT
  MARK_UNCOLLECTIBLE
  VOID
}

"""Payment settings passed on to invoices created by the subscription."""
type PaymentSettings {
  """Payment-method-specific configuration to provide to invoices created by the subscription."""
  paymentMethodOptions: PaymentMethodOptions2
  """The list of payment method types to provide to every invoice created by the subscription. If not set, Stripe attempts to automatically determine the types to use by looking at the invoice’s default payment method, the subscription’s default payment method, the customer’s default payment method, and your [invoice template settings](https://dashboard.stripe.com/settings/billing/invoice)."""
  paymentMethodTypes: [PaymentMethodTypes3ListItem]
}

"""Payment-method-specific configuration to provide to invoices created by the subscription."""
type PaymentMethodOptions2 {
  """This sub-hash contains details about the Bancontact payment method options to pass to invoices created by the subscription."""
  bancontact: Bancontact3
  """This sub-hash contains details about the Card payment method options to pass to invoices created by the subscription."""
  card: Card8
}

"""This sub-hash contains details about the Bancontact payment method options to pass to invoices created by the subscription."""
type Bancontact3 {
  """Preferred language of the Bancontact authorization page that the customer is redirected to."""
  preferredLanguage: PreferredLanguage5
}

enum PreferredLanguage5 {
  DE
  EN
  FR
  NL
}

"""This sub-hash contains details about the Card payment method options to pass to invoices created by the subscription."""
type Card8 {
  """We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine."""
  requestThreeDSecure: RequestThreeDSecure
}

enum RequestThreeDSecure {
  ANY
  AUTOMATIC
}

enum PaymentMethodTypes3ListItem {
  ACH_CREDIT_TRANSFER
  ACH_DEBIT
  AU_BECS_DEBIT
  BACS_DEBIT
  BANCONTACT
  BOLETO
  CARD
  FPX
  GIROPAY
  IDEAL
  SEPA_DEBIT
  SOFORT
  WECHAT_PAY
}

"""Specifies an interval for how often to bill for any pending invoice items. It is analogous to calling [Create an invoice](https://stripe.com/docs/api#create_invoice) for the given subscription at the specified interval."""
type PendingInvoiceItemInterval {
  """Specifies invoicing frequency. Either `day`, `week`, `month` or `year`."""
  interval: Interval6
  """The number of intervals between invoices. For example, `interval=month` and `interval_count=3` bills every 3 months. Maximum of one year interval allowed (1 year, 12 months, or 52 weeks)."""
  intervalCount: Int
}

enum Interval6 {
  DAY
  MONTH
  WEEK
  YEAR
}

"""If specified, [pending updates](https://stripe.com/docs/billing/subscriptions/pending-updates) that will be applied to the subscription once the `latest_invoice` has been paid."""
type PendingUpdate {
  """If the update is applied, determines the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices."""
  billingCycleAnchor: Int
  """The point after which the changes reflected by this update will be discarded and no longer applied."""
  expiresAt: Int
  """List of subscription items, each with an attached plan, that will be set if the update is applied."""
  subscriptionItems: [SubscriptionItem]
  """Unix timestamp representing the end of the trial period the customer will get before being charged for the first time, if the update is applied."""
  trialEnd: Int
  """Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `trial_end` is not allowed."""
  trialFromPlan: Boolean
}

enum Status14 {
  ACTIVE
  CANCELED
  INCOMPLETE
  INCOMPLETE_EXPIRED
  PAST_DUE
  TRIALING
  UNPAID
}

"""The account (if any) the subscription's payments will be attributed to for tax reporting, and where funds from each payment will be transferred to for each of the subscription's invoices."""
type TransferData4 {
  """A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the destination account. By default, the entire amount is transferred to the destination."""
  amountPercent: Float
  """The account where funds from the payment will be transferred to upon payment success."""
  destination: JSON
}

type CustomerTax {
  """Surfaces if automatic tax computation is possible given the current customer location information."""
  automaticTax: AutomaticTax2!
  """A recent IP address of the customer used for tax reporting and tax location inference."""
  ipAddress: String
  """The customer's location as identified by Stripe Tax."""
  location: Location
}

enum AutomaticTax2 {
  FAILED
  NOT_COLLECTING
  SUPPORTED
  UNRECOGNIZED_LOCATION
}

"""The customer's location as identified by Stripe Tax."""
type Location {
  """The customer's country as identified by Stripe Tax."""
  country: String
  """The data source used to infer the customer's location."""
  source: Source3
  """The customer's state, county, province, or region as identified by Stripe Tax."""
  state: String
}

enum Source3 {
  BILLING_ADDRESS
  IP_ADDRESS
  PAYMENT_METHOD
  SHIPPING_DESTINATION
}

enum TaxExempt2 {
  EXEMPT
  NONE
  REVERSE
}

"""The customer's tax IDs."""
type TaxIDsList {
  """Details about each object."""
  data: [TaxId3]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

"""
You can add one or multiple tax IDs to a [customer](https://stripe.com/docs/api/customers).
A customer's tax IDs are displayed on invoices and credit notes issued for the customer.

Related guide: [Customer Tax Identification Numbers](https://stripe.com/docs/billing/taxes/tax-ids).
"""
type TaxId3 {
  """Two-letter ISO code representing the country of the tax ID."""
  country: String
  """Time at which the object was created. Measured in seconds since the Unix epoch."""
  created: Int!
  """ID of the customer."""
  customer: JSON
  """Unique identifier for the object."""
  id: String!
  """Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."""
  livemode: Boolean!
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object33!
  """Type of the tax ID, one of `ae_trn`, `au_abn`, `br_cnpj`, `br_cpf`, `ca_bn`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `ca_qst`, `ch_vat`, `cl_tin`, `es_cif`, `eu_vat`, `gb_vat`, `hk_br`, `id_npwp`, `il_vat`, `in_gst`, `jp_cn`, `jp_rn`, `kr_brn`, `li_uid`, `mx_rfc`, `my_frp`, `my_itn`, `my_sst`, `no_vat`, `nz_gst`, `ru_inn`, `ru_kpp`, `sa_vat`, `sg_gst`, `sg_uen`, `th_vat`, `tw_vat`, `us_ein`, or `za_vat`. Note that some legacy tax IDs have type `unknown`"""
  type: Type19!
  """Value of the tax ID."""
  value: String!
  """Tax ID verification information."""
  verification: Verification3
}

enum Object33 {
  TAX_ID
}

enum Type19 {
  AE_TRN
  AU_ABN
  BR_CNPJ
  BR_CPF
  CA_BN
  CA_GST_HST
  CA_PST_BC
  CA_PST_MB
  CA_PST_SK
  CA_QST
  CH_VAT
  CL_TIN
  ES_CIF
  EU_VAT
  GB_VAT
  HK_BR
  ID_NPWP
  IL_VAT
  IN_GST
  JP_CN
  JP_RN
  KR_BRN
  LI_UID
  MX_RFC
  MY_FRP
  MY_ITN
  MY_SST
  NO_VAT
  NZ_GST
  RU_INN
  RU_KPP
  SA_VAT
  SG_GST
  SG_UEN
  TH_VAT
  TW_VAT
  UNKNOWN
  US_EIN
  ZA_VAT
}

"""Tax ID verification information."""
type Verification3 {
  """Verification status, one of `pending`, `verified`, `unverified`, or `unavailable`."""
  status: Status15
  """Verified address."""
  verifiedAddress: String
  """Verified name."""
  verifiedName: String
}

enum Status15 {
  PENDING
  UNAVAILABLE
  UNVERIFIED
  VERIFIED
}

type V1Customer2 {
  """The customer's address."""
  address: Address7
  """Current balance, if any, being stored on the customer. If negative, the customer has credit to apply to their next invoice. If positive, the customer has an amount owed that will be added to their next invoice. The balance does not refer to any unpaid invoices; it solely takes into account amounts that have yet to be successfully applied to any invoice. This balance is only taken into account as invoices are finalized."""
  balance: Int
  """Time at which the object was created. Measured in seconds since the Unix epoch."""
  created: Int
  """Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) the customer can be charged in for recurring billing purposes."""
  currency: String
  """
  ID of the default payment source for the customer.
  
  If you are using payment methods created via the PaymentMethods API, see the [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) field instead.
  """
  defaultSource: JSON
  """Always true for a deleted object"""
  deleted: Deleted
  """
  When the customer's latest invoice is billed by charging automatically, `delinquent` is `true` if the invoice's latest charge failed. When the customer's latest invoice is billed by sending an invoice, `delinquent` is `true` if the invoice isn't paid by its due date.
  
  If an invoice is marked uncollectible by [dunning](https://stripe.com/docs/billing/automatic-collection), `delinquent` doesn't get reset to `false`.
  """
  delinquent: Boolean
  """An arbitrary string attached to the object. Often useful for displaying to users."""
  description: String
  """Describes the current discount active on the customer, if there is one."""
  discount: Discount3
  """The customer's email address."""
  email: String
  """Unique identifier for the object."""
  id: String
  """The prefix for the customer used to generate unique invoice numbers."""
  invoicePrefix: String
  invoiceSettings: InvoiceSettings2
  """Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."""
  livemode: Boolean
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."""
  metadata: JSON
  """The customer's full name or business name."""
  name: String
  """The suffix of the customer's next invoice number, e.g., 0001."""
  nextInvoiceSequence: Int
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object30
  """The customer's phone number."""
  phone: String
  """The customer's preferred locales (languages), ordered by preference."""
  preferredLocales: [String]
  """Mailing and shipping address for the customer. Appears on invoices emailed to this customer."""
  shipping: Shipping5
  """The customer's payment sources, if any."""
  sources: Sources
  """The customer's current subscriptions, if any."""
  subscriptions: Subscriptions
  tax: Tax2
  """Describes the customer's tax exemption status. One of `none`, `exempt`, or `reverse`. When set to `reverse`, invoice and receipt PDFs include the text **"Reverse charge"**."""
  taxExempt: TaxExempt2
  """The customer's tax IDs."""
  taxIds: TaxIDsList
}

enum Deleted {
  TRUE
}

type InvoiceSettings2 {
  """Default custom fields to be displayed on invoices for this customer."""
  customFields: [InvoiceSettingCustomField]
  """ID of a payment method that's attached to the customer, to be used as the customer's default payment method for subscriptions and invoices."""
  defaultPaymentMethod: JSON
  """Default footer to be displayed on invoices for this customer."""
  footer: String
}

type Tax2 {
  """Surfaces if automatic tax computation is possible given the current customer location information."""
  automaticTax: AutomaticTax2!
  """A recent IP address of the customer used for tax reporting and tax location inference."""
  ipAddress: String
  """The customer's location as identified by Stripe Tax."""
  location: Location
}

type CustomerBalanceTransactionList {
  """Details about each object."""
  data: [CustomerBalanceTransaction2]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

"""
Each customer has a [`balance`](https://stripe.com/docs/api/customers/object#customer_object-balance) value,
which denotes a debit or credit that's automatically applied to their next invoice upon finalization.
You may modify the value directly by using the [update customer API](https://stripe.com/docs/api/customers/update),
or by creating a Customer Balance Transaction, which increments or decrements the customer's `balance` by the specified `amount`.

Related guide: [Customer Balance](https://stripe.com/docs/billing/customer/balance) to learn more.
"""
type CustomerBalanceTransaction2 {
  """The amount of the transaction. A negative value is a credit for the customer's balance, and a positive value is a debit to the customer's `balance`."""
  amount: Int!
  """Time at which the object was created. Measured in seconds since the Unix epoch."""
  created: Int!
  """The ID of the credit note (if any) related to the transaction."""
  creditNote: JSON
  """Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."""
  currency: String!
  """The ID of the customer the transaction belongs to."""
  customer: JSON!
  """An arbitrary string attached to the object. Often useful for displaying to users."""
  description: String
  """The customer's `balance` after the transaction was applied. A negative value decreases the amount due on the customer's next invoice. A positive value increases the amount due on the customer's next invoice."""
  endingBalance: Int!
  """Unique identifier for the object."""
  id: String!
  """The ID of the invoice (if any) related to the transaction."""
  invoice: JSON
  """Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."""
  livemode: Boolean!
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."""
  metadata: JSON
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object34!
  """Transaction type: `adjustment`, `applied_to_invoice`, `credit_note`, `initial`, `invoice_too_large`, `invoice_too_small`, `unspent_receiver_credit`, or `unapplied_from_invoice`. See the [Customer Balance page](https://stripe.com/docs/billing/customer/balance#types) to learn more about transaction types."""
  type: Type21!
}

enum Object34 {
  CUSTOMER_BALANCE_TRANSACTION
}

enum Type21 {
  ADJUSTMENT
  APPLIED_TO_INVOICE
  CREDIT_NOTE
  INITIAL
  INVOICE_TOO_LARGE
  INVOICE_TOO_SMALL
  MIGRATION
  UNAPPLIED_FROM_INVOICE
  UNSPENT_RECEIVER_CREDIT
}

type BankAccountList {
  """Details about each object."""
  data: [BankAccount7]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

"""
These bank accounts are payment methods on `Customer` objects.

On the other hand [External Accounts](https://stripe.com/docs/api#external_accounts) are transfer
destinations on `Account` objects for [Custom accounts](https://stripe.com/docs/connect/custom-accounts).
They can be bank accounts or debit cards as well, and are documented in the links above.

Related guide: [Bank Debits and Transfers](https://stripe.com/docs/payments/bank-debits-transfers).
"""
type BankAccount7 {
  """The ID of the account that the bank account is associated with."""
  account: JSON
  """The name of the person or business that owns the bank account."""
  accountHolderName: String
  """The type of entity that holds the account. This can be either `individual` or `company`."""
  accountHolderType: String
  """The bank account type. This can only be `checking` or `savings` in most countries. In Japan, this can only be `futsu` or `toza`."""
  accountType: String
  """A set of available payout methods for this bank account. Only values from this set should be passed as the `method` when creating a payout."""
  availablePayoutMethods: [AvailablePayoutMethods2ListItem]
  """Name of the bank associated with the routing number (e.g., `WELLS FARGO`)."""
  bankName: String
  """Two-letter ISO code representing the country the bank account is located in."""
  country: String!
  """Three-letter [ISO code for the currency](https://stripe.com/docs/payouts) paid out to the bank account."""
  currency: String!
  """The ID of the customer that the bank account is associated with."""
  customer: JSON
  """Whether this bank account is the default external account for its currency."""
  defaultForCurrency: Boolean
  """Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same."""
  fingerprint: String
  """Unique identifier for the object."""
  id: String!
  """The last four digits of the bank account number."""
  last4: String!
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."""
  metadata: JSON
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object35!
  """The routing transit number for the bank account."""
  routingNumber: String
  """
  For bank accounts, possible values are `new`, `validated`, `verified`, `verification_failed`, or `errored`. A bank account that hasn't had any activity or validation performed is `new`. If Stripe can determine that the bank account exists, its status will be `validated`. Note that there often isn’t enough information to know (e.g., for smaller credit unions), and the validation is not always run. If customer bank account verification has succeeded, the bank account status will be `verified`. If the verification failed for any reason, such as microdeposit failure, the status will be `verification_failed`. If a transfer sent to this bank account fails, we'll set the status to `errored` and will not continue to send transfers until the bank details are updated.
  
  For external accounts, possible values are `new` and `errored`. Validations aren't run against external accounts because they're only used for payouts. This means the other statuses don't apply. If a transfer fails, the status is set to `errored` and transfers are stopped until account details are updated.
  """
  status: String!
}

enum AvailablePayoutMethods2ListItem {
  INSTANT
  STANDARD
}

enum Object35 {
  BANK_ACCOUNT
}

type CardList {
  data: [Card2]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

type ApmsSourcesSourceList {
  """Details about each object."""
  data: [Data21ListItem]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

type PaymentSource {
  account: JSON
  """The name of the person or business that owns the bank account."""
  accountHolderName: String
  """The type of entity that holds the account. This can be either `individual` or `company`."""
  accountHolderType: String
  """The bank account type. This can only be `checking` or `savings` in most countries. In Japan, this can only be `futsu` or `toza`."""
  accountType: String
  achCreditTransfer: AchCreditTransfer2
  achDebit: AchDebit2
  acssDebit: AcssDebit4
  """True when this bitcoin receiver has received a non-zero amount of bitcoin."""
  active: Boolean
  """City/District/Suburb/Town/Village."""
  addressCity: String
  """Billing address country, if provided when creating card."""
  addressCountry: String
  """Address line 1 (Street address/PO Box/Company name)."""
  addressLine1: String
  """If `address_line1` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`."""
  addressLine1Check: String
  """Address line 2 (Apartment/Suite/Unit/Building)."""
  addressLine2: String
  """State/County/Province/Region."""
  addressState: String
  """ZIP or postal code."""
  addressZip: String
  """If `address_zip` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`."""
  addressZipCheck: String
  alipay: Alipay2
  amount: JSON
  """The amount of `currency` to which `bitcoin_amount_received` has been converted."""
  amountReceived: Int
  auBecsDebit: AuBecsDebit2
  availablePayoutMethods: JSON
  bancontact: Bancontact2
  """Name of the bank associated with the routing number (e.g., `WELLS FARGO`)."""
  bankName: String
  """The amount of bitcoin that the customer should send to fill the receiver. The `bitcoin_amount` is denominated in Satoshi: there are 10^8 Satoshi in one bitcoin."""
  bitcoinAmount: Int
  """The amount of bitcoin that has been sent by the customer to this receiver."""
  bitcoinAmountReceived: Int
  """This URI can be displayed to the customer as a clickable link (to activate their bitcoin client) or as a QR code (for mobile wallets)."""
  bitcoinUri: String
  """Card brand. Can be `American Express`, `Diners Club`, `Discover`, `JCB`, `MasterCard`, `UnionPay`, `Visa`, or `Unknown`."""
  brand: String
  """Business information about the account."""
  businessProfile: BusinessProfile
  """The business type."""
  businessType: BusinessType
  capabilities: Capabilities2
  card: Card6
  cardPresent: CardPresent2
  """Whether the account can create live charges."""
  chargesEnabled: Boolean
  """The client secret of the source. Used for client-side retrieval using a publishable key."""
  clientSecret: String
  codeVerification: CodeVerification
  company: Company2
  controller: Controller
  country: JSON
  """Time at which the object was created. Measured in seconds since the Unix epoch."""
  created: Int
  currency: JSON
  customer: JSON
  """If a CVC was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. A result of unchecked indicates that CVC was provided but hasn't been checked yet. Checks are typically performed when attaching a card to a Customer object, or when creating a charge. For more details, see [Check if a card is valid without a charge](https://support.stripe.com/questions/check-if-a-card-is-valid-without-a-charge)."""
  cvcCheck: String
  """Three-letter ISO currency code representing the default currency for the account. This must be a currency that [Stripe supports in the account's country](https://stripe.com/docs/payouts)."""
  defaultCurrency: String
  defaultForCurrency: JSON
  """An arbitrary string attached to the object. Often useful for displaying to users."""
  description: String
  """Whether account details have been submitted. Standard accounts cannot receive payouts before this is true."""
  detailsSubmitted: Boolean
  """(For tokenized numbers only.) The last four digits of the device account number."""
  dynamicLast4: String
  email: JSON
  eps: Eps2
  """Two-digit number representing the card's expiration month."""
  expMonth: Int
  """Four-digit number representing the card's expiration year."""
  expYear: Int
  """External accounts (bank accounts and debit cards) currently attached to this account"""
  externalAccounts: ExternalAccounts
  """This flag is initially false and updates to true when the customer sends the `bitcoin_amount` to this receiver."""
  filled: Boolean
  fingerprint: JSON
  """The authentication `flow` of the source. `flow` is one of `redirect`, `receiver`, `code_verification`, `none`."""
  flow: String
  """Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`."""
  funding: String
  giropay: Giropay2
  """Unique identifier for the object."""
  id: String
  ideal: Ideal2
  """A bitcoin address that is specific to this receiver. The customer can send bitcoin to this address to fill the receiver."""
  inboundAddress: String
  """
  This is an object representing a person associated with a Stripe account.
  
  A platform cannot access a Standard or Express account's persons after the account starts onboarding, such as after generating an account link for the account.
  See the [Standard onboarding](https://stripe.com/docs/connect/standard-accounts) or [Express onboarding documentation](https://stripe.com/docs/connect/express-accounts) for information about platform pre-filling and account onboarding steps.
  
  Related guide: [Handling Identity Verification with the API](https://stripe.com/docs/connect/identity-verification-api#person-information).
  """
  individual: Individual2
  klarna: Klarna2
  last4: JSON
  """Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."""
  livemode: Boolean
  metadata: JSON
  multibanco: Multibanco2
  """Cardholder name."""
  name: String
  object: JSON
  """Information about the owner of the payment instrument that may be used or required by particular source types."""
  owner: Owner3
  p24: P242
  """The ID of the payment created from the receiver, if any. Hidden when viewing the receiver with a publishable key."""
  payment: String
  """If the Alipay account object is not reusable, the exact amount that you can create a charge for."""
  paymentAmount: Int
  """If the Alipay account object is not reusable, the exact currency that you can create a charge for."""
  paymentCurrency: String
  """Whether Stripe can send payouts to this account."""
  payoutsEnabled: Boolean
  receiver: Receiver2
  """The recipient that this card belongs to. This attribute will not be in the card object if the card belongs to a customer or account instead."""
  recipient: JSON
  redirect: Redirect
  """The refund address of this bitcoin receiver."""
  refundAddress: String
  requirements: Requirements2
  """True if you can create multiple payments using this account. If the account is reusable, then you can freely choose the amount of each payment."""
  reusable: Boolean
  """The routing transit number for the bank account."""
  routingNumber: String
  sepaDebit: SepaDebit2
  """Options for customizing how the account functions within Stripe."""
  settings: Settings
  sofort: Sofort2
  sourceOrder: SourceOrder
  """Extra information about a source. This will appear on your customer's statement every time you charge the source."""
  statementDescriptor: String
  status: JSON
  threeDSecure: ThreeDSecure4
  """If the card number is tokenized, this is the method that was used. Can be `android_pay` (includes Google Pay), `apple_pay`, `masterpass`, `visa_checkout`, or null."""
  tokenizationMethod: String
  tosAcceptance: TosAcceptance2
  """A list with one entry for each time that the customer sent bitcoin to the receiver. Hidden when viewing the receiver with a publishable key."""
  transactions: Transactions
  type: JSON
  """This receiver contains uncaptured funds that can be used for a payment or refunded."""
  uncapturedFunds: Boolean
  """Either `reusable` or `single_use`. Whether this source should be reusable or not. Some source types may or may not be reusable by construction, while others may leave the option at creation. If an incompatible value is passed, an error will be returned."""
  usage: String
  """Whether this Alipay account object has ever been used for a payment."""
  used: Boolean
  """Indicate if this source is used for payment."""
  usedForPayment: Boolean
  """The username for the Alipay account."""
  username: String
  wechat: Wechat2
}

type Capabilities2 {
  """The status of the ACSS Direct Debits payments capability of the account, or whether the account can directly process ACSS Direct Debits charges."""
  acssDebitPayments: AcssDebitPayments
  """The status of the Afterpay Clearpay capability of the account, or whether the account can directly process Afterpay Clearpay charges."""
  afterpayClearpayPayments: AfterpayClearpayPayments
  """The status of the BECS Direct Debit (AU) payments capability of the account, or whether the account can directly process BECS Direct Debit (AU) charges."""
  auBecsDebitPayments: AuBecsDebitPayments
  """The status of the Bacs Direct Debits payments capability of the account, or whether the account can directly process Bacs Direct Debits charges."""
  bacsDebitPayments: BacsDebitPayments
  """The status of the Bancontact payments capability of the account, or whether the account can directly process Bancontact charges."""
  bancontactPayments: BancontactPayments
  """The status of the boleto payments capability of the account, or whether the account can directly process boleto charges."""
  boletoPayments: BoletoPayments
  """The status of the card issuing capability of the account, or whether you can use Issuing to distribute funds on cards"""
  cardIssuing: CardIssuing
  """The status of the card payments capability of the account, or whether the account can directly process credit and debit card charges."""
  cardPayments: CardPayments
  """The status of the Cartes Bancaires payments capability of the account, or whether the account can directly process Cartes Bancaires card charges in EUR currency."""
  cartesBancairesPayments: CartesBancairesPayments
  """The status of the EPS payments capability of the account, or whether the account can directly process EPS charges."""
  epsPayments: EpsPayments
  """The status of the FPX payments capability of the account, or whether the account can directly process FPX charges."""
  fpxPayments: FpxPayments
  """The status of the giropay payments capability of the account, or whether the account can directly process giropay charges."""
  giropayPayments: GiropayPayments
  """The status of the GrabPay payments capability of the account, or whether the account can directly process GrabPay charges."""
  grabpayPayments: GrabpayPayments
  """The status of the iDEAL payments capability of the account, or whether the account can directly process iDEAL charges."""
  idealPayments: IdealPayments
  """The status of the JCB payments capability of the account, or whether the account (Japan only) can directly process JCB credit card charges in JPY currency."""
  jcbPayments: JcbPayments
  """The status of the legacy payments capability of the account."""
  legacyPayments: LegacyPayments
  """The status of the OXXO payments capability of the account, or whether the account can directly process OXXO charges."""
  oxxoPayments: OxxoPayments
  """The status of the P24 payments capability of the account, or whether the account can directly process P24 charges."""
  p24Payments: P24Payments
  """The status of the SEPA Direct Debits payments capability of the account, or whether the account can directly process SEPA Direct Debits charges."""
  sepaDebitPayments: SepaDebitPayments
  """The status of the Sofort payments capability of the account, or whether the account can directly process Sofort charges."""
  sofortPayments: SofortPayments
  """The status of the tax reporting 1099-K (US) capability of the account."""
  taxReportingUs1099K: TaxReportingUs1099K
  """The status of the tax reporting 1099-MISC (US) capability of the account."""
  taxReportingUs1099Misc: TaxReportingUs1099Misc
  """The status of the transfers capability of the account, or whether your platform can transfer funds to the account."""
  transfers: Transfers
}

type Company2 {
  address: Address
  """The Kana variation of the company's primary address (Japan only)."""
  addressKana: AddressKana
  """The Kanji variation of the company's primary address (Japan only)."""
  addressKanji: AddressKanji
  """Whether the company's directors have been provided. This Boolean will be `true` if you've manually indicated that all directors are provided via [the `directors_provided` parameter](https://stripe.com/docs/api/accounts/update#update_account-company-directors_provided)."""
  directorsProvided: Boolean
  """Whether the company's executives have been provided. This Boolean will be `true` if you've manually indicated that all executives are provided via [the `executives_provided` parameter](https://stripe.com/docs/api/accounts/update#update_account-company-executives_provided), or if Stripe determined that sufficient executives were provided."""
  executivesProvided: Boolean
  """The company's legal name."""
  name: String
  """The Kana variation of the company's legal name (Japan only)."""
  nameKana: String
  """The Kanji variation of the company's legal name (Japan only)."""
  nameKanji: String
  """Whether the company's owners have been provided. This Boolean will be `true` if you've manually indicated that all owners are provided via [the `owners_provided` parameter](https://stripe.com/docs/api/accounts/update#update_account-company-owners_provided), or if Stripe determined that sufficient owners were provided. Stripe determines ownership requirements using both the number of owners provided and their total percent ownership (calculated by adding the `percent_ownership` of each owner together)."""
  ownersProvided: Boolean
  """The company's phone number (used for verification)."""
  phone: String
  """The category identifying the legal structure of the company or legal entity. See [Business structure](https://stripe.com/docs/connect/identity-verification#business-structure) for more details."""
  structure: Structure
  """Whether the company's business ID number was provided."""
  taxIdProvided: Boolean
  """The jurisdiction in which the `tax_id` is registered (Germany-based companies only)."""
  taxIdRegistrar: String
  """Whether the company's business VAT number was provided."""
  vatIdProvided: Boolean
  """Information on the verification state of the company."""
  verification: Verification
}

type Controller {
  """`true` if the Connect application retrieving the resource controls the account and can therefore exercise [platform controls](https://stripe.com/docs/connect/platform-controls-for-standard-accounts). Otherwise, this field is null."""
  isController: Boolean
  """The controller type. Can be `application`, if a Connect application controls the account, or `account`, if the account controls itself."""
  type: Type
}

"""
This is an object representing a person associated with a Stripe account.

A platform cannot access a Standard or Express account's persons after the account starts onboarding, such as after generating an account link for the account.
See the [Standard onboarding](https://stripe.com/docs/connect/standard-accounts) or [Express onboarding documentation](https://stripe.com/docs/connect/express-accounts) for information about platform pre-filling and account onboarding steps.

Related guide: [Handling Identity Verification with the API](https://stripe.com/docs/connect/identity-verification-api#person-information).
"""
type Individual2 {
  """The account the person is associated with."""
  account: String!
  address: Address
  addressKana: AddressKana2
  addressKanji: AddressKanji2
  """Time at which the object was created. Measured in seconds since the Unix epoch."""
  created: Int!
  dob: LegalEntityDob
  """The person's email address."""
  email: String
  """The person's first name."""
  firstName: String
  """The Kana variation of the person's first name (Japan only)."""
  firstNameKana: String
  """The Kanji variation of the person's first name (Japan only)."""
  firstNameKanji: String
  """The person's gender (International regulations require either "male" or "female")."""
  gender: String
  """Unique identifier for the object."""
  id: String!
  """Whether the person's `id_number` was provided."""
  idNumberProvided: Boolean
  """The person's last name."""
  lastName: String
  """The Kana variation of the person's last name (Japan only)."""
  lastNameKana: String
  """The Kanji variation of the person's last name (Japan only)."""
  lastNameKanji: String
  """The person's maiden name."""
  maidenName: String
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."""
  metadata: JSON
  """The country where the person is a national."""
  nationality: String
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object5!
  """The person's phone number."""
  phone: String
  """Indicates if the person or any of their representatives, family members, or other closely related persons, declares that they hold or have held an important public job or function, in any jurisdiction."""
  politicalExposure: PoliticalExposure
  relationship: PersonRelationship
  requirements: Requirements
  """Whether the last four digits of the person's Social Security number have been provided (U.S. only)."""
  ssnLast4Provided: Boolean
  verification: LegalEntityPersonVerification
}

type Requirements2 {
  """Date by which the fields in `currently_due` must be collected to keep the account enabled. These fields may disable the account sooner if the next threshold is reached before they are collected."""
  currentDeadline: Int
  """Fields that need to be collected to keep the account enabled. If not collected by `current_deadline`, these fields appear in `past_due` as well, and the account is disabled."""
  currentlyDue: [String]
  """If the account is disabled, this string describes why. Can be `requirements.past_due`, `requirements.pending_verification`, `listed`, `platform_paused`, `rejected.fraud`, `rejected.listed`, `rejected.terms_of_service`, `rejected.other`, `under_review`, or `other`."""
  disabledReason: String
  """Fields that are `currently_due` and need to be collected again because validation or verification failed."""
  errors: [AccountRequirementsError]
  """Fields that need to be collected assuming all volume thresholds are reached. As they become required, they appear in `currently_due` as well, and `current_deadline` becomes set."""
  eventuallyDue: [String]
  """Fields that weren't collected by `current_deadline`. These fields need to be collected to enable the account."""
  pastDue: [String]
  """Fields that may become required depending on the results of verification or review. Will be an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due`, `currently_due`, or `past_due`."""
  pendingVerification: [String]
}

type TosAcceptance2 {
  """The Unix timestamp marking when the account representative accepted their service agreement"""
  date: Int
  """The IP address from which the account representative accepted their service agreement"""
  ip: String
  """The user's service agreement type"""
  serviceAgreement: String
  """The user agent of the browser from which the account representative accepted their service agreement"""
  userAgent: String
}

type SubscriptionList {
  """Details about each object."""
  data: [Subscription5]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

type TaxIDsList2 {
  """Details about each object."""
  data: [TaxId3]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

type V1Disputes2 {
  data: [Dispute]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

type NotificationEventList {
  data: [Event]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

"""
Events are our way of letting you know when something interesting happens in
your account. When an interesting event occurs, we create a new `Event`
object. For example, when a charge succeeds, we create a `charge.succeeded`
event; and when an invoice payment attempt fails, we create an
`invoice.payment_failed` event. Note that many API requests may cause multiple
events to be created. For example, if you create a new subscription for a
customer, you will receive both a `customer.subscription.created` event and a
`charge.succeeded` event.

Events occur when the state of another API resource changes. The state of that
resource at the time of the change is embedded in the event's data field. For
example, a `charge.succeeded` event will contain a charge, and an
`invoice.payment_failed` event will contain an invoice.

As with other API resources, you can use endpoints to retrieve an
[individual event](https://stripe.com/docs/api#retrieve_event) or a [list of events](https://stripe.com/docs/api#list_events)
from the API. We also have a separate
[webhooks](http://en.wikipedia.org/wiki/Webhook) system for sending the
`Event` objects directly to an endpoint on your server. Webhooks are managed
in your
[account settings](https://dashboard.stripe.com/account/webhooks),
and our [Using Webhooks](https://stripe.com/docs/webhooks) guide will help you get set up.

When using [Connect](https://stripe.com/docs/connect), you can also receive notifications of
events that occur in connected accounts. For these events, there will be an
additional `account` attribute in the received `Event` object.

**NOTE:** Right now, access to events through the [Retrieve Event API](https://stripe.com/docs/api#retrieve_event) is
guaranteed only for 30 days.
"""
type Event {
  """The connected account that originated the event."""
  account: String
  """The Stripe API version used to render `data`. *Note: This property is populated only for events on or after October 31, 2014*."""
  apiVersion: String
  """Time at which the object was created. Measured in seconds since the Unix epoch."""
  created: Int!
  data: NotificationEventData!
  """Unique identifier for the object."""
  id: String!
  """Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."""
  livemode: Boolean!
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object38!
  """Number of webhooks that have yet to be successfully delivered (i.e., to return a 20x response) to the URLs you've specified."""
  pendingWebhooks: Int!
  """Information on the API request that instigated the event."""
  request: Request
  """Description of the event (e.g., `invoice.created` or `charge.refunded`)."""
  type: String!
}

type NotificationEventData {
  """Object containing the API resource relevant to the event. For example, an `invoice.created` event will have a full [invoice object](https://stripe.com/docs/api#invoice_object) as the value of the object key."""
  object: JSON!
  """Object containing the names of the attributes that have changed, and their previous values (sent along only with *.updated events)."""
  previousAttributes: JSON
}

enum Object38 {
  EVENT
}

"""Information on the API request that instigated the event."""
type Request {
  """ID of the API request that caused the event. If null, the event was automatic (e.g., Stripe's automatic subscription handling). Request logs are available in the [dashboard](https://dashboard.stripe.com/logs), but currently not in the API."""
  id: String
  """The idempotency key transmitted during the request, if any. *Note: This property is populated only for events on or after May 23, 2017*."""
  idempotencyKey: String
}

type V1ExchangeRates2 {
  data: [ExchangeRate2]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

"""
`Exchange Rate` objects allow you to determine the rates that Stripe is
currently using to convert from one currency to another. Since this number is
variable throughout the day, there are various reasons why you might want to
know the current rate (for example, to dynamically price an item for a user
with a default payment in a foreign currency).

If you want a guarantee that the charge is made with a certain exchange rate
you expect is current, you can pass in `exchange_rate` to charges endpoints.
If the value is no longer up to date, the charge won't go through. Please
refer to our [Exchange Rates API](https://stripe.com/docs/exchange-rates) guide for more
details.
"""
type ExchangeRate2 {
  """Unique identifier for the object. Represented as the three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html) in lowercase."""
  id: String!
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object39!
  """Hash where the keys are supported currencies and the values are the exchange rate at which the base id currency converts to the key currency."""
  rates: JSON!
}

enum Object39 {
  EXCHANGE_RATE
}

type V1FileLinks2 {
  data: [FileLink]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

"""
To share the contents of a `File` object with non-Stripe users, you can
create a `FileLink`. `FileLink`s contain a URL that can be used to
retrieve the contents of the file without authentication.
"""
type FileLink {
  """Time at which the object was created. Measured in seconds since the Unix epoch."""
  created: Int!
  """Whether this link is already expired."""
  expired: Boolean!
  """Time at which the link expires."""
  expiresAt: Int
  """The file object this link points to."""
  file: JSON!
  """Unique identifier for the object."""
  id: String!
  """Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."""
  livemode: Boolean!
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."""
  metadata: JSON!
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object40!
  """The publicly accessible URL to download the file."""
  url: String
}

enum Object40 {
  FILE_LINK
}

type V1Files2 {
  data: [File3]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

"""
This is an object representing a file hosted on Stripe's servers. The
file may have been uploaded by yourself using the [create file](https://stripe.com/docs/api#create_file)
request (for example, when uploading dispute evidence) or it may have
been created by Stripe (for example, the results of a [Sigma scheduled
query](#scheduled_queries)).

Related guide: [File Upload Guide](https://stripe.com/docs/file-upload).
"""
type File3 {
  """Time at which the object was created. Measured in seconds since the Unix epoch."""
  created: Int!
  """The time at which the file expires and is no longer available in epoch seconds."""
  expiresAt: Int
  """A filename for the file, suitable for saving to a filesystem."""
  filename: String
  """Unique identifier for the object."""
  id: String!
  """A list of [file links](https://stripe.com/docs/api#file_links) that point at this file."""
  links: Links
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object41!
  """The [purpose](https://stripe.com/docs/file-upload#uploading-a-file) of the uploaded file."""
  purpose: Purpose!
  """The size in bytes of the file object."""
  size: Int!
  """A user friendly title for the document."""
  title: String
  """The type of the file returned (e.g., `csv`, `pdf`, `jpg`, or `png`)."""
  type: String
  """The URL from which the file can be downloaded using your live secret API key."""
  url: String
}

"""A list of [file links](https://stripe.com/docs/api#file_links) that point at this file."""
type Links {
  """Details about each object."""
  data: [FileLink]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

enum Object41 {
  FILE
}

enum Purpose {
  ACCOUNT_REQUIREMENT
  ADDITIONAL_VERIFICATION
  BUSINESS_ICON
  BUSINESS_LOGO
  CUSTOMER_SIGNATURE
  DISPUTE_EVIDENCE
  DOCUMENT_PROVIDER_IDENTITY_DOCUMENT
  FINANCE_REPORT_RUN
  IDENTITY_DOCUMENT
  IDENTITY_DOCUMENT_DOWNLOADABLE
  PCI_DOCUMENT
  SELFIE
  SIGMA_SCHEDULED_QUERY
  TAX_DOCUMENT_USER_UPLOAD
}

enum Purpose2 {
  ACCOUNT_REQUIREMENT
  ADDITIONAL_VERIFICATION
  BUSINESS_ICON
  BUSINESS_LOGO
  CUSTOMER_SIGNATURE
  DISPUTE_EVIDENCE
  DOCUMENT_PROVIDER_IDENTITY_DOCUMENT
  FINANCE_REPORT_RUN
  IDENTITY_DOCUMENT
  IDENTITY_DOCUMENT_DOWNLOADABLE
  PCI_DOCUMENT
  SELFIE
  SIGMA_SCHEDULED_QUERY
  TAX_DOCUMENT_USER_UPLOAD
}

type V1IdentityVerificationReports2 {
  data: [IdentityVerificationReport]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

"""
A VerificationReport is the result of an attempt to collect and verify data from a user.
The collection of verification checks performed is determined from the `type` and `options`
parameters used. You can find the result of each verification check performed in the
appropriate sub-resource: `document`, `id_number`, `selfie`.

Each VerificationReport contains a copy of any data collected by the user as well as
reference IDs which can be used to access collected images through the [FileUpload](https://stripe.com/docs/api/files)
API. To configure and create VerificationReports, use the
[VerificationSession](https://stripe.com/docs/api/identity/verification_sessions) API.

Related guides: [Accessing verification results](https://stripe.com/docs/identity/verification-sessions#results).
"""
type IdentityVerificationReport {
  """Time at which the object was created. Measured in seconds since the Unix epoch."""
  created: Int!
  """Result from a document check"""
  document: GelatoDocumentReport
  """Unique identifier for the object."""
  id: String!
  """Result from an id_number check"""
  idNumber: GelatoIdNumberReport
  """Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."""
  livemode: Boolean!
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object42!
  options: GelatoVerificationReportOptions!
  """Result from a selfie check"""
  selfie: GelatoSelfieReport
  """Type of report."""
  type: Type26!
  """ID of the VerificationSession that created this report."""
  verificationSession: String
}

"""Result from a document check"""
type GelatoDocumentReport {
  """Address as it appears in the document."""
  address: Address12
  """Date of birth as it appears in the document."""
  dob: Dob8
  """Details on the verification error. Present when status is `unverified`."""
  error: Error
  """Expiration date of the document."""
  expirationDate: ExpirationDate
  """Array of [File](https://stripe.com/docs/api/files) ids containing images for this document."""
  files: [String]
  """First name as it appears in the document."""
  firstName: String
  """Issued date of the document."""
  issuedDate: IssuedDate
  """Issuing country of the document."""
  issuingCountry: String
  """Last name as it appears in the document."""
  lastName: String
  """Document ID number."""
  number: String
  """Status of this `document` check."""
  status: Status17!
  """Type of the document."""
  type: Type25
}

"""Address as it appears in the document."""
type Address12 {
  """City, district, suburb, town, or village."""
  city: String
  """Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2))."""
  country: String
  """Address line 1 (e.g., street, PO Box, or company name)."""
  line1: String
  """Address line 2 (e.g., apartment, suite, unit, or building)."""
  line2: String
  """ZIP or postal code."""
  postalCode: String
  """State, county, province, or region."""
  state: String
}

"""Date of birth as it appears in the document."""
type Dob8 {
  """Numerical day between 1 and 31."""
  day: Int
  """Numerical month between 1 and 12."""
  month: Int
  """The four-digit year."""
  year: Int
}

"""Details on the verification error. Present when status is `unverified`."""
type Error {
  """A short machine-readable string giving the reason for the verification failure."""
  code: Code2
  """A human-readable message giving the reason for the failure. These messages can be shown to your users."""
  reason: String
}

enum Code2 {
  DOCUMENT_EXPIRED
  DOCUMENT_TYPE_NOT_SUPPORTED
  DOCUMENT_UNVERIFIED_OTHER
}

"""Expiration date of the document."""
type ExpirationDate {
  """Numerical day between 1 and 31."""
  day: Int
  """Numerical month between 1 and 12."""
  month: Int
  """The four-digit year."""
  year: Int
}

"""Issued date of the document."""
type IssuedDate {
  """Numerical day between 1 and 31."""
  day: Int
  """Numerical month between 1 and 12."""
  month: Int
  """The four-digit year."""
  year: Int
}

enum Status17 {
  UNVERIFIED
  VERIFIED
}

enum Type25 {
  DRIVING_LICENSE
  ID_CARD
  PASSPORT
}

"""Result from an id_number check"""
type GelatoIdNumberReport {
  """Date of birth."""
  dob: Dob9
  """Details on the verification error. Present when status is `unverified`."""
  error: Error2
  """First name."""
  firstName: String
  """ID number."""
  idNumber: String
  """Type of ID number."""
  idNumberType: IdNumberType
  """Last name."""
  lastName: String
  """Status of this `id_number` check."""
  status: Status18!
}

"""Date of birth."""
type Dob9 {
  """Numerical day between 1 and 31."""
  day: Int
  """Numerical month between 1 and 12."""
  month: Int
  """The four-digit year."""
  year: Int
}

"""Details on the verification error. Present when status is `unverified`."""
type Error2 {
  """A short machine-readable string giving the reason for the verification failure."""
  code: Code3
  """A human-readable message giving the reason for the failure. These messages can be shown to your users."""
  reason: String
}

enum Code3 {
  ID_NUMBER_INSUFFICIENT_DOCUMENT_DATA
  ID_NUMBER_MISMATCH
  ID_NUMBER_UNVERIFIED_OTHER
}

enum IdNumberType {
  BR_CPF
  SG_NRIC
  US_SSN
}

enum Status18 {
  UNVERIFIED
  VERIFIED
}

enum Object42 {
  IDENTITY_VERIFICATION_REPORT
}

type GelatoVerificationReportOptions {
  document: GelatoReportDocumentOptions
  idNumber: JSON
}

type GelatoReportDocumentOptions {
  """Array of strings of allowed identity document types. If the provided identity document isn’t one of the allowed types, the verification check will fail with a document_type_not_allowed error code."""
  allowedTypes: [AllowedTypesListItem]
  """Collect an ID number and perform an [ID number check](https://stripe.com/docs/identity/verification-checks?type=id-number) with the document’s extracted name and date of birth."""
  requireIdNumber: Boolean
  """Disable image uploads, identity document images have to be captured using the device’s camera."""
  requireLiveCapture: Boolean
  """Capture a face image and perform a [selfie check](https://stripe.com/docs/identity/verification-checks?type=selfie) comparing a photo ID and a picture of your user’s face. [Learn more](https://stripe.com/docs/identity/selfie)."""
  requireMatchingSelfie: Boolean
}

enum AllowedTypesListItem {
  DRIVING_LICENSE
  ID_CARD
  PASSPORT
}

"""Result from a selfie check"""
type GelatoSelfieReport {
  """ID of the [File](https://stripe.com/docs/api/files) holding the image of the identity document used in this check."""
  document: String
  """Details on the verification error. Present when status is `unverified`."""
  error: Error3
  """ID of the [File](https://stripe.com/docs/api/files) holding the image of the selfie used in this check."""
  selfie: String
  """Status of this `selfie` check."""
  status: Status19!
}

"""Details on the verification error. Present when status is `unverified`."""
type Error3 {
  """A short machine-readable string giving the reason for the verification failure."""
  code: Code4
  """A human-readable message giving the reason for the failure. These messages can be shown to your users."""
  reason: String
}

enum Code4 {
  SELFIE_DOCUMENT_MISSING_PHOTO
  SELFIE_FACE_MISMATCH
  SELFIE_MANIPULATED
  SELFIE_UNVERIFIED_OTHER
}

enum Status19 {
  UNVERIFIED
  VERIFIED
}

enum Type26 {
  DOCUMENT
  ID_NUMBER
}

enum Type68 {
  DOCUMENT
  ID_NUMBER
}

type V1IdentityVerificationSessions2 {
  data: [IdentityVerificationSession]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

"""
A VerificationSession guides you through the process of collecting and verifying the identities
of your users. It contains details about the type of verification, such as what [verification
check](/docs/identity/verification-checks) to perform. Only create one VerificationSession for
each verification in your system.

A VerificationSession transitions through [multiple
statuses](/docs/identity/how-sessions-work) throughout its lifetime as it progresses through
the verification flow. The VerificationSession contains the user’s verified data after
verification checks are complete.

Related guide: [The Verification Sessions API](https://stripe.com/docs/identity/verification-sessions)
"""
type IdentityVerificationSession {
  """The short-lived client secret used by Stripe.js to [show a verification modal](https://stripe.com/docs/js/identity/modal) inside your app. This client secret expires after 24 hours and can only be used once. Don’t store it, log it, embed it in a URL, or expose it to anyone other than the user. Make sure that you have TLS enabled on any page that includes the client secret. Refer to our docs on [passing the client secret to the frontend](https://stripe.com/docs/identity/verification-sessions#client-secret) to learn more."""
  clientSecret: String
  """Time at which the object was created. Measured in seconds since the Unix epoch."""
  created: Int!
  """Unique identifier for the object."""
  id: String!
  """If present, this property tells you the last error encountered when processing the verification."""
  lastError: LastError
  """ID of the most recent VerificationReport. [Learn more about accessing detailed verification results.](https://stripe.com/docs/identity/verification-sessions#results)"""
  lastVerificationReport: JSON
  """Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."""
  livemode: Boolean!
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."""
  metadata: JSON!
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object43!
  options: GelatoVerificationSessionOptions!
  """Redaction status of this VerificationSession. If the VerificationSession is not redacted, this field will be null."""
  redaction: Redaction
  """Status of this VerificationSession. [Learn more about the lifecycle of sessions](https://stripe.com/docs/identity/how-sessions-work)."""
  status: Status21!
  """The type of [verification check](https://stripe.com/docs/identity/verification-checks) to be performed."""
  type: Type27!
  """The short-lived URL that you use to redirect a user to Stripe to submit their identity information. This URL expires after 24 hours and can only be used once. Don’t store it, log it, send it in emails or expose it to anyone other than the user. Refer to our docs on [verifying identity documents](https://stripe.com/docs/identity/verify-identity-documents?platform=web&type=redirect) to learn how to redirect users to Stripe."""
  url: String
  """The user’s verified data."""
  verifiedOutputs: VerifiedOutputs
}

"""If present, this property tells you the last error encountered when processing the verification."""
type LastError {
  """A short machine-readable string giving the reason for the verification or user-session failure."""
  code: Code5
  """A message that explains the reason for verification or user-session failure."""
  reason: String
}

enum Code5 {
  ABANDONED
  CONSENT_DECLINED
  COUNTRY_NOT_SUPPORTED
  DEVICE_NOT_SUPPORTED
  DOCUMENT_EXPIRED
  DOCUMENT_TYPE_NOT_SUPPORTED
  DOCUMENT_UNVERIFIED_OTHER
  ID_NUMBER_INSUFFICIENT_DOCUMENT_DATA
  ID_NUMBER_MISMATCH
  ID_NUMBER_UNVERIFIED_OTHER
  SELFIE_DOCUMENT_MISSING_PHOTO
  SELFIE_FACE_MISMATCH
  SELFIE_MANIPULATED
  SELFIE_UNVERIFIED_OTHER
  UNDER_SUPPORTED_AGE
}

enum Object43 {
  IDENTITY_VERIFICATION_SESSION
}

type GelatoVerificationSessionOptions {
  document: GelatoSessionDocumentOptions
  idNumber: JSON
}

type GelatoSessionDocumentOptions {
  """Array of strings of allowed identity document types. If the provided identity document isn’t one of the allowed types, the verification check will fail with a document_type_not_allowed error code."""
  allowedTypes: [AllowedTypesListItem]
  """Collect an ID number and perform an [ID number check](https://stripe.com/docs/identity/verification-checks?type=id-number) with the document’s extracted name and date of birth."""
  requireIdNumber: Boolean
  """Disable image uploads, identity document images have to be captured using the device’s camera."""
  requireLiveCapture: Boolean
  """Capture a face image and perform a [selfie check](https://stripe.com/docs/identity/verification-checks?type=selfie) comparing a photo ID and a picture of your user’s face. [Learn more](https://stripe.com/docs/identity/selfie)."""
  requireMatchingSelfie: Boolean
}

"""Redaction status of this VerificationSession. If the VerificationSession is not redacted, this field will be null."""
type Redaction {
  """Indicates whether this object and its related objects have been redacted or not."""
  status: Status20
}

enum Status20 {
  PROCESSING
  REDACTED
}

enum Status21 {
  CANCELED
  PROCESSING
  REQUIRES_INPUT
  VERIFIED
}

enum Type27 {
  DOCUMENT
  ID_NUMBER
}

"""The user’s verified data."""
type VerifiedOutputs {
  """The user's verified address."""
  address: Address13
  """The user’s verified date of birth."""
  dob: Dob10
  """The user's verified first name."""
  firstName: String
  """The user's verified id number."""
  idNumber: String
  """The user's verified id number type."""
  idNumberType: IdNumberType2
  """The user's verified last name."""
  lastName: String
}

"""The user's verified address."""
type Address13 {
  """City, district, suburb, town, or village."""
  city: String
  """Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2))."""
  country: String
  """Address line 1 (e.g., street, PO Box, or company name)."""
  line1: String
  """Address line 2 (e.g., apartment, suite, unit, or building)."""
  line2: String
  """ZIP or postal code."""
  postalCode: String
  """State, county, province, or region."""
  state: String
}

"""The user’s verified date of birth."""
type Dob10 {
  """Numerical day between 1 and 31."""
  day: Int
  """Numerical month between 1 and 12."""
  month: Int
  """The four-digit year."""
  year: Int
}

enum IdNumberType2 {
  BR_CPF
  SG_NRIC
  US_SSN
}

enum Status55 {
  CANCELED
  PROCESSING
  REQUIRES_INPUT
  VERIFIED
}

type V1Invoiceitems2 {
  data: [Invoiceitem]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

"""
Sometimes you want to add a charge or credit to a customer, but actually
charge or credit the customer's card only at the end of a regular billing
cycle. This is useful for combining several charges (to minimize
per-transaction fees), or for having Stripe tabulate your usage-based billing
totals.

Related guide: [Subscription Invoices](https://stripe.com/docs/billing/invoices/subscription#adding-upcoming-invoice-items).
"""
type Invoiceitem {
  """Amount (in the `currency` specified) of the invoice item. This should always be equal to `unit_amount * quantity`."""
  amount: Int!
  """Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."""
  currency: String!
  """The ID of the customer who will be billed when this invoice item is billed."""
  customer: JSON!
  """Time at which the object was created. Measured in seconds since the Unix epoch."""
  date: Int!
  """An arbitrary string attached to the object. Often useful for displaying to users."""
  description: String
  """If true, discounts will apply to this invoice item. Always false for prorations."""
  discountable: Boolean!
  """The discounts which apply to the invoice item. Item discounts are applied before invoice discounts. Use `expand[]=discounts` to expand each discount."""
  discounts: [JSON]
  """Unique identifier for the object."""
  id: String!
  """The ID of the invoice this invoice item belongs to."""
  invoice: JSON
  """Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."""
  livemode: Boolean!
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."""
  metadata: JSON
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object44!
  period: InvoiceLineItemPeriod!
  """The price of the invoice item."""
  price: Price7
  """Whether the invoice item was created automatically as a proration adjustment when the customer switched plans."""
  proration: Boolean!
  """Quantity of units for the invoice item. If the invoice item is a proration, the quantity of the subscription that the proration was computed for."""
  quantity: Int!
  """The subscription that this invoice item has been created for, if any."""
  subscription: JSON
  """The subscription item that this invoice item has been created for, if any."""
  subscriptionItem: String
  """The tax rates which apply to the invoice item. When set, the `default_tax_rates` on the invoice do not apply to this invoice item."""
  taxRates: [TaxRate]
  """Unit amount (in the `currency` specified) of the invoice item."""
  unitAmount: Int
  """Same as `unit_amount`, but contains a decimal value with at most 12 decimal places."""
  unitAmountDecimal: String
}

enum Object44 {
  INVOICEITEM
}

type InvoiceLineItemPeriod {
  """End of the line item's billing period"""
  end: Int!
  """Start of the line item's billing period"""
  start: Int!
}

"""The price of the invoice item."""
type Price7 {
  """Whether the price can be used for new purchases."""
  active: Boolean
  """Describes how to compute the price per period. Either `per_unit` or `tiered`. `per_unit` indicates that the fixed amount (specified in `unit_amount` or `unit_amount_decimal`) will be charged per unit in `quantity` (for prices with `usage_type=licensed`), or per unit of total usage (for prices with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as defined using the `tiers` and `tiers_mode` attributes."""
  billingScheme: BillingScheme
  """Time at which the object was created. Measured in seconds since the Unix epoch."""
  created: Int
  """Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."""
  currency: String
  """Unique identifier for the object."""
  id: String
  """Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."""
  livemode: Boolean
  """A lookup key used to retrieve prices dynamically from a static string."""
  lookupKey: String
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."""
  metadata: JSON
  """A brief description of the price, hidden from customers."""
  nickname: String
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object24
  """The ID of the product this price is associated with."""
  product: JSON
  """The recurring components of a price such as `interval` and `usage_type`."""
  recurring: Recurring
  """Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`. Once specified as either `inclusive` or `exclusive`, it cannot be changed."""
  taxBehavior: TaxBehavior
  """Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`."""
  tiers: [PriceTier]
  """Defines if the tiering price should be `graduated` or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per unit price. In `graduated` tiering, pricing can change as the quantity grows."""
  tiersMode: TiersMode
  """Apply a transformation to the reported usage or set quantity before computing the amount billed. Cannot be combined with `tiers`."""
  transformQuantity: TransformQuantity
  """One of `one_time` or `recurring` depending on whether the price is for a one-time purchase or a recurring (subscription) purchase."""
  type: Type12
  """The unit amount in %s to be charged, represented as a whole integer if possible. Only set if `billing_scheme=per_unit`."""
  unitAmount: Int
  """The unit amount in %s to be charged, represented as a decimal string with at most 12 decimal places. Only set if `billing_scheme=per_unit`."""
  unitAmountDecimal: String
}

type InvoicesList {
  data: [Invoice11]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

"""
Invoices are statements of amounts owed by a customer, and are either
generated one-off, or generated periodically from a subscription.

They contain [invoice items](https://stripe.com/docs/api#invoiceitems), and proration adjustments
that may be caused by subscription upgrades/downgrades (if necessary).

If your invoice is configured to be billed through automatic charges,
Stripe automatically finalizes your invoice and attempts payment. Note
that finalizing the invoice,
[when automatic](https://stripe.com/docs/billing/invoices/workflow/#auto_advance), does
not happen immediately as the invoice is created. Stripe waits
until one hour after the last webhook was successfully sent (or the last
webhook timed out after failing). If you (and the platforms you may have
connected to) have no webhooks configured, Stripe waits one hour after
creation to finalize the invoice.

If your invoice is configured to be billed by sending an email, then based on your
[email settings](https://dashboard.stripe.com/account/billing/automatic'),
Stripe will email the invoice to your customer and await payment. These
emails can contain a link to a hosted page to pay the invoice.

Stripe applies any customer credit on the account before determining the
amount due for the invoice (i.e., the amount that will be actually
charged). If the amount due for the invoice is less than Stripe's [minimum allowed charge
per currency](/docs/currencies#minimum-and-maximum-charge-amounts), the
invoice is automatically marked paid, and we add the amount due to the
customer's credit balance which is applied to the next invoice.

More details on the customer's credit balance are
[here](https://stripe.com/docs/billing/customer/balance).

Related guide: [Send Invoices to Customers](https://stripe.com/docs/billing/invoices/sending).
"""
type Invoice11 {
  """The country of the business associated with this invoice, most often the business creating the invoice."""
  accountCountry: String
  """The public name of the business associated with this invoice, most often the business creating the invoice."""
  accountName: String
  """The account tax IDs associated with the invoice. Only editable when the invoice is a draft."""
  accountTaxIds: [JSON]
  """Final amount due at this time for this invoice. If the invoice's total is smaller than the minimum charge amount, for example, or if there is account credit that can be applied to the invoice, the `amount_due` may be 0. If there is a positive `starting_balance` for the invoice (the customer owes money), the `amount_due` will also take that into account. The charge that gets generated for the invoice will be for the amount specified in `amount_due`."""
  amountDue: Int!
  """The amount, in %s, that was paid."""
  amountPaid: Int!
  """The amount remaining, in %s, that is due."""
  amountRemaining: Int!
  """The fee in %s that will be applied to the invoice and transferred to the application owner's Stripe account when the invoice is paid."""
  applicationFeeAmount: Int
  """Number of payment attempts made for this invoice, from the perspective of the payment retry schedule. Any payment attempt counts as the first attempt, and subsequently only automatic retries increment the attempt count. In other words, manual payment attempts after the first attempt do not affect the retry schedule."""
  attemptCount: Int!
  """Whether an attempt has been made to pay the invoice. An invoice is not attempted until 1 hour after the `invoice.created` webhook, for example, so you might not want to display that invoice as unpaid to your users."""
  attempted: Boolean!
  """Controls whether Stripe will perform [automatic collection](https://stripe.com/docs/billing/invoices/workflow/#auto_advance) of the invoice. When `false`, the invoice's state will not automatically advance without an explicit action."""
  autoAdvance: Boolean
  automaticTax: AutomaticTax3!
  """Indicates the reason why the invoice was created. `subscription_cycle` indicates an invoice created by a subscription advancing into a new period. `subscription_create` indicates an invoice created due to creating a subscription. `subscription_update` indicates an invoice created due to updating a subscription. `subscription` is set for all old invoices to indicate either a change to a subscription or a period advancement. `manual` is set for all invoices unrelated to a subscription (for example: created via the invoice editor). The `upcoming` value is reserved for simulated invoices per the upcoming invoice endpoint. `subscription_threshold` indicates an invoice created due to a billing threshold being reached."""
  billingReason: BillingReason
  """ID of the latest charge generated for this invoice, if any."""
  charge: JSON
  """Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this invoice using the default source attached to the customer. When sending an invoice, Stripe will email this invoice to the customer with payment instructions."""
  collectionMethod: CollectionMethod3
  """Time at which the object was created. Measured in seconds since the Unix epoch."""
  created: Int!
  """Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."""
  currency: String!
  """Custom fields displayed on the invoice."""
  customFields: [InvoiceSettingCustomField]
  """The ID of the customer who will be billed."""
  customer: JSON
  """The customer's address. Until the invoice is finalized, this field will equal `customer.address`. Once the invoice is finalized, this field will no longer be updated."""
  customerAddress: CustomerAddress
  """The customer's email. Until the invoice is finalized, this field will equal `customer.email`. Once the invoice is finalized, this field will no longer be updated."""
  customerEmail: String
  """The customer's name. Until the invoice is finalized, this field will equal `customer.name`. Once the invoice is finalized, this field will no longer be updated."""
  customerName: String
  """The customer's phone number. Until the invoice is finalized, this field will equal `customer.phone`. Once the invoice is finalized, this field will no longer be updated."""
  customerPhone: String
  """The customer's shipping information. Until the invoice is finalized, this field will equal `customer.shipping`. Once the invoice is finalized, this field will no longer be updated."""
  customerShipping: CustomerShipping
  """The customer's tax exempt status. Until the invoice is finalized, this field will equal `customer.tax_exempt`. Once the invoice is finalized, this field will no longer be updated."""
  customerTaxExempt: CustomerTaxExempt
  """The customer's tax IDs. Until the invoice is finalized, this field will contain the same tax IDs as `customer.tax_ids`. Once the invoice is finalized, this field will no longer be updated."""
  customerTaxIds: [InvoicesResourceInvoiceTaxId]
  """ID of the default payment method for the invoice. It must belong to the customer associated with the invoice. If not set, defaults to the subscription's default payment method, if any, or to the default payment method in the customer's invoice settings."""
  defaultPaymentMethod: JSON
  """ID of the default payment source for the invoice. It must belong to the customer associated with the invoice and be in a chargeable state. If not set, defaults to the subscription's default source, if any, or to the customer's default source."""
  defaultSource: JSON
  """The tax rates applied to this invoice, if any."""
  defaultTaxRates: [TaxRate]!
  """An arbitrary string attached to the object. Often useful for displaying to users. Referenced as 'memo' in the Dashboard."""
  description: String
  """Describes the current discount applied to this invoice, if there is one. Not populated if there are multiple discounts."""
  discount: Discount5
  """The discounts applied to the invoice. Line item discounts are applied before invoice discounts. Use `expand[]=discounts` to expand each discount."""
  discounts: [JSON]
  """The date on which payment for this invoice is due. This value will be `null` for invoices where `collection_method=charge_automatically`."""
  dueDate: Int
  """Ending customer balance after the invoice is finalized. Invoices are finalized approximately an hour after successful webhook delivery or when payment collection is attempted for the invoice. If the invoice has not been finalized yet, this will be null."""
  endingBalance: Int
  """Footer displayed on the invoice."""
  footer: String
  """The URL for the hosted invoice page, which allows customers to view and pay an invoice. If the invoice has not been finalized yet, this will be null."""
  hostedInvoiceUrl: String
  """Unique identifier for the object."""
  id: String
  """The link to download the PDF for the invoice. If the invoice has not been finalized yet, this will be null."""
  invoicePdf: String
  """The error encountered during the previous attempt to finalize the invoice. This field is cleared when the invoice is successfully finalized."""
  lastFinalizationError: LastFinalizationError
  """The individual line items that make up the invoice. `lines` is sorted as follows: invoice items in reverse chronological order, followed by the subscription, if any."""
  lines: InvoiceLinesList!
  """Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."""
  livemode: Boolean!
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."""
  metadata: JSON
  """The time at which payment will next be attempted. This value will be `null` for invoices where `collection_method=send_invoice`."""
  nextPaymentAttempt: Int
  """A unique, identifying string that appears on emails sent to the customer for this invoice. This starts with the customer's unique invoice_prefix if it is specified."""
  number: String
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object49!
  """The account (if any) for which the funds of the invoice payment are intended. If set, the invoice will be presented with the branding and support information of the specified account. See the [Invoices with Connect](https://stripe.com/docs/billing/invoices/connect) documentation for details."""
  onBehalfOf: JSON
  """Whether payment was successfully collected for this invoice. An invoice can be paid (most commonly) with a charge or with credit from the customer's account balance."""
  paid: Boolean!
  """The PaymentIntent associated with this invoice. The PaymentIntent is generated when the invoice is finalized, and can then be used to pay the invoice. Note that voiding an invoice will cancel the PaymentIntent."""
  paymentIntent: JSON
  paymentSettings: InvoicesPaymentSettings!
  """End of the usage period during which invoice items were added to this invoice."""
  periodEnd: Int!
  """Start of the usage period during which invoice items were added to this invoice."""
  periodStart: Int!
  """Total amount of all post-payment credit notes issued for this invoice."""
  postPaymentCreditNotesAmount: Int!
  """Total amount of all pre-payment credit notes issued for this invoice."""
  prePaymentCreditNotesAmount: Int!
  """The quote this invoice was generated from."""
  quote: JSON
  """This is the transaction number that appears on email receipts sent for this invoice."""
  receiptNumber: String
  """Starting customer balance before the invoice is finalized. If the invoice has not been finalized yet, this will be the current customer balance."""
  startingBalance: Int!
  """Extra information about an invoice for the customer's credit card statement."""
  statementDescriptor: String
  """The status of the invoice, one of `draft`, `open`, `paid`, `uncollectible`, or `void`. [Learn more](https://stripe.com/docs/billing/invoices/workflow#workflow-overview)"""
  status: Status25
  statusTransitions: InvoicesStatusTransitions!
  """The subscription that this invoice was prepared for, if any."""
  subscription: JSON
  """Only set for upcoming invoices that preview prorations. The time used to calculate prorations."""
  subscriptionProrationDate: Int
  """Total of all subscriptions, invoice items, and prorations on the invoice before any invoice level discount or tax is applied. Item discounts are already incorporated"""
  subtotal: Int!
  """The amount of tax on this invoice. This is the sum of all the tax amounts on this invoice."""
  tax: Int
  thresholdReason: InvoiceThresholdReason
  """Total after discounts and taxes."""
  total: Int!
  """The aggregate amounts calculated per discount across all line items."""
  totalDiscountAmounts: [DiscountsResourceDiscountAmount]
  """The aggregate amounts calculated per tax rate for all line items."""
  totalTaxAmounts: [InvoiceTaxAmount]!
  """The account (if any) the payment will be attributed to for tax reporting, and where funds from the payment will be transferred to for the invoice."""
  transferData: TransferData8
  """Invoices are automatically paid or sent 1 hour after webhooks are delivered, or until all webhook delivery attempts have [been exhausted](https://stripe.com/docs/billing/webhooks#understand). This field tracks the time when webhooks for this invoice were successfully delivered. If the invoice had no webhooks to deliver, this will be set while the invoice is being created."""
  webhooksDeliveredAt: Int
}

type AutomaticTax3 {
  """Whether Stripe automatically computes tax on this invoice."""
  enabled: Boolean!
  """The status of the most recent automated tax calculation for this invoice."""
  status: Status22
}

enum Status22 {
  COMPLETE
  FAILED
  REQUIRES_LOCATION_INPUTS
}

enum BillingReason {
  AUTOMATIC_PENDING_INVOICE_ITEM_INVOICE
  MANUAL
  QUOTE_ACCEPT
  SUBSCRIPTION
  SUBSCRIPTION_CREATE
  SUBSCRIPTION_CYCLE
  SUBSCRIPTION_THRESHOLD
  SUBSCRIPTION_UPDATE
  UPCOMING
}

enum CollectionMethod3 {
  CHARGE_AUTOMATICALLY
  SEND_INVOICE
}

"""The customer's address. Until the invoice is finalized, this field will equal `customer.address`. Once the invoice is finalized, this field will no longer be updated."""
type CustomerAddress {
  """City, district, suburb, town, or village."""
  city: String
  """Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2))."""
  country: String
  """Address line 1 (e.g., street, PO Box, or company name)."""
  line1: String
  """Address line 2 (e.g., apartment, suite, unit, or building)."""
  line2: String
  """ZIP or postal code."""
  postalCode: String
  """State, county, province, or region."""
  state: String
}

"""The customer's shipping information. Until the invoice is finalized, this field will equal `customer.shipping`. Once the invoice is finalized, this field will no longer be updated."""
type CustomerShipping {
  address: Address
  """The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc."""
  carrier: String
  """Recipient name."""
  name: String
  """Recipient phone (including extension)."""
  phone: String
  """The tracking number for a physical product, obtained from the delivery service. If multiple tracking numbers were generated for this purchase, please separate them with commas."""
  trackingNumber: String
}

enum CustomerTaxExempt {
  EXEMPT
  NONE
  REVERSE
}

type InvoicesResourceInvoiceTaxId {
  """The type of the tax ID, one of `eu_vat`, `br_cnpj`, `br_cpf`, `gb_vat`, `nz_gst`, `au_abn`, `in_gst`, `no_vat`, `za_vat`, `ch_vat`, `mx_rfc`, `sg_uen`, `ru_inn`, `ru_kpp`, `ca_bn`, `hk_br`, `es_cif`, `tw_vat`, `th_vat`, `jp_cn`, `jp_rn`, `li_uid`, `my_itn`, `us_ein`, `kr_brn`, `ca_qst`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `my_sst`, `sg_gst`, `ae_trn`, `cl_tin`, `sa_vat`, `id_npwp`, `my_frp`, `il_vat`, or `unknown`"""
  type: Type11!
  """The value of the tax ID."""
  value: String
}

"""Describes the current discount applied to this invoice, if there is one. Not populated if there are multiple discounts."""
type Discount5 {
  """The Checkout session that this coupon is applied to, if it is applied to a particular session in payment mode. Will not be present for subscription mode."""
  checkoutSession: String
  """
  A coupon contains information about a percent-off or amount-off discount you
  might want to apply to a customer. Coupons may be applied to [invoices](https://stripe.com/docs/api#invoices) or
  [orders](https://stripe.com/docs/api#create_order-coupon). Coupons do not work with conventional one-off [charges](https://stripe.com/docs/api#create_charge).
  """
  coupon: Coupon
  """The ID of the customer associated with this discount."""
  customer: JSON
  """If the coupon has a duration of `repeating`, the date that this discount will end. If the coupon has a duration of `once` or `forever`, this attribute will be null."""
  end: Int
  """The ID of the discount object. Discounts cannot be fetched by ID. Use `expand[]=discounts` in API calls to expand discount IDs in an array."""
  id: String
  """The invoice that the discount's coupon was applied to, if it was applied directly to a particular invoice."""
  invoice: String
  """The invoice item `id` (or invoice line item `id` for invoice line items of type='subscription') that the discount's coupon was applied to, if it was applied directly to a particular invoice item or invoice line item."""
  invoiceItem: String
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object22
  """The promotion code applied to create this discount."""
  promotionCode: JSON
  """Date that the coupon was applied."""
  start: Int
  """The subscription that this coupon is applied to, if it is applied to a particular subscription."""
  subscription: String
}

"""The error encountered during the previous attempt to finalize the invoice. This field is cleared when the invoice is successfully finalized."""
type LastFinalizationError {
  """For card errors, the ID of the failed charge."""
  charge: String
  """For some errors that could be handled programmatically, a short string indicating the [error code](https://stripe.com/docs/error-codes) reported."""
  code: String
  """For card errors resulting from a card issuer decline, a short string indicating the [card issuer's reason for the decline](https://stripe.com/docs/declines#issuer-declines) if they provide one."""
  declineCode: String
  """A URL to more information about the [error code](https://stripe.com/docs/error-codes) reported."""
  docUrl: String
  """A human-readable message providing more details about the error. For card errors, these messages can be shown to your users."""
  message: String
  """If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field."""
  param: String
  """
  A PaymentIntent guides you through the process of collecting a payment from your customer.
  We recommend that you create exactly one PaymentIntent for each order or
  customer session in your system. You can reference the PaymentIntent later to
  see the history of payment attempts for a particular session.
  
  A PaymentIntent transitions through
  [multiple statuses](https://stripe.com/docs/payments/intents#intent-statuses)
  throughout its lifetime as it interfaces with Stripe.js to perform
  authentication flows and ultimately creates at most one successful charge.
  
  Related guide: [Payment Intents API](https://stripe.com/docs/payments/payment-intents).
  """
  paymentIntent: PaymentIntent7
  """
  PaymentMethod objects represent your customer's payment instruments.
  They can be used with [PaymentIntents](https://stripe.com/docs/payments/payment-intents) to collect payments or saved to
  Customer objects to store instrument details for future payments.
  
  Related guides: [Payment Methods](https://stripe.com/docs/payments/payment-methods) and [More Payment Scenarios](https://stripe.com/docs/payments/more-payment-scenarios).
  """
  paymentMethod: PaymentMethod3
  """If the error is specific to the type of payment method, the payment method type that had a problem. This field is only populated for invoice-related errors."""
  paymentMethodType: String
  """
  A SetupIntent guides you through the process of setting up and saving a customer's payment credentials for future payments.
  For example, you could use a SetupIntent to set up and save your customer's card without immediately collecting a payment.
  Later, you can use [PaymentIntents](https://stripe.com/docs/api#payment_intents) to drive the payment flow.
  
  Create a SetupIntent as soon as you're ready to collect your customer's payment credentials.
  Do not maintain long-lived, unconfirmed SetupIntents as they may no longer be valid.
  The SetupIntent then transitions through multiple [statuses](https://stripe.com/docs/payments/intents#intent-statuses) as it guides
  you through the setup process.
  
  Successful SetupIntents result in payment credentials that are optimized for future payments.
  For example, cardholders in [certain regions](/guides/strong-customer-authentication) may need to be run through
  [Strong Customer Authentication](https://stripe.com/docs/strong-customer-authentication) at the time of payment method collection
  in order to streamline later [off-session payments](https://stripe.com/docs/payments/setup-intents).
  If the SetupIntent is used with a [Customer](https://stripe.com/docs/api#setup_intent_object-customer), upon success,
  it will automatically attach the resulting payment method to that Customer.
  We recommend using SetupIntents or [setup_future_usage](https://stripe.com/docs/api#payment_intent_object-setup_future_usage) on
  PaymentIntents to save payment methods in order to prevent saving invalid or unoptimized payment methods.
  
  By using SetupIntents, you ensure that your customers experience the minimum set of required friction,
  even as regulations change over time.
  
  Related guide: [Setup Intents API](https://stripe.com/docs/payments/setup-intents).
  """
  setupIntent: SetupIntent2
  """The source object for errors returned on a request involving a source."""
  source: Source9
  """The type of error returned. One of `api_error`, `card_error`, `idempotency_error`, or `invalid_request_error`"""
  type: Type30
}

"""
A PaymentIntent guides you through the process of collecting a payment from your customer.
We recommend that you create exactly one PaymentIntent for each order or
customer session in your system. You can reference the PaymentIntent later to
see the history of payment attempts for a particular session.

A PaymentIntent transitions through
[multiple statuses](https://stripe.com/docs/payments/intents#intent-statuses)
throughout its lifetime as it interfaces with Stripe.js to perform
authentication flows and ultimately creates at most one successful charge.

Related guide: [Payment Intents API](https://stripe.com/docs/payments/payment-intents).
"""
type PaymentIntent7 {
  """Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99)."""
  amount: Int!
  """Amount that can be captured from this PaymentIntent."""
  amountCapturable: Int
  """Amount that was collected by this PaymentIntent."""
  amountReceived: Int
  """ID of the Connect application that created the PaymentIntent."""
  application: JSON
  """The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. The amount of the application fee collected will be capped at the total payment amount. For more information, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts)."""
  applicationFeeAmount: Int
  """Populated when `status` is `canceled`, this is the time at which the PaymentIntent was canceled. Measured in seconds since the Unix epoch."""
  canceledAt: Int
  """Reason for cancellation of this PaymentIntent, either user-provided (`duplicate`, `fraudulent`, `requested_by_customer`, or `abandoned`) or generated by Stripe internally (`failed_invoice`, `void_invoice`, or `automatic`)."""
  cancellationReason: CancellationReason
  """Controls when the funds will be captured from the customer's account."""
  captureMethod: CaptureMethod2!
  """Charges that were created by this PaymentIntent, if any."""
  charges: Charges
  """
  The client secret of this PaymentIntent. Used for client-side retrieval using a publishable key. 
  
  The client secret can be used to complete a payment from your frontend. It should not be stored, logged, embedded in URLs, or exposed to anyone other than the customer. Make sure that you have TLS enabled on any page that includes the client secret.
  
  Refer to our docs to [accept a payment](https://stripe.com/docs/payments/accept-a-payment?integration=elements) and learn about how `client_secret` should be handled.
  """
  clientSecret: String
  confirmationMethod: ConfirmationMethod!
  """Time at which the object was created. Measured in seconds since the Unix epoch."""
  created: Int!
  """Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."""
  currency: String!
  """
  ID of the Customer this PaymentIntent belongs to, if one exists.
  
  Payment methods attached to other Customers cannot be used with this PaymentIntent.
  
  If present in combination with [setup_future_usage](https://stripe.com/docs/api#payment_intent_object-setup_future_usage), this PaymentIntent's payment method will be attached to the Customer after the PaymentIntent has been confirmed and any required actions from the user are complete.
  """
  customer: JSON
  """An arbitrary string attached to the object. Often useful for displaying to users."""
  description: String
  """Unique identifier for the object."""
  id: String!
  """ID of the invoice that created this PaymentIntent, if it exists."""
  invoice: JSON
  """The payment error encountered in the previous PaymentIntent confirmation. It will be cleared if the PaymentIntent is later updated for any reason."""
  lastPaymentError: LastPaymentError
  """Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."""
  livemode: Boolean!
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. For more information, see the [documentation](https://stripe.com/docs/payments/payment-intents/creating-payment-intents#storing-information-in-metadata)."""
  metadata: JSON
  """If present, this property tells you what actions you need to take in order for your customer to fulfill a payment using the provided source."""
  nextAction: NextAction2
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object47!
  """The account (if any) for which the funds of the PaymentIntent are intended. See the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts) for details."""
  onBehalfOf: JSON
  """ID of the payment method used in this PaymentIntent."""
  paymentMethod: JSON
  """Payment-method-specific configuration for this PaymentIntent."""
  paymentMethodOptions: PaymentMethodOptions5
  """The list of payment method types (e.g. card) that this PaymentIntent is allowed to use."""
  paymentMethodTypes: [String]!
  """Email address that the receipt for the resulting payment will be sent to. If `receipt_email` is specified for a payment in live mode, a receipt will be sent regardless of your [email settings](https://dashboard.stripe.com/account/emails)."""
  receiptEmail: String
  """ID of the review associated with this PaymentIntent, if any."""
  review: JSON
  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.
  
  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
  
  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setupFutureUsage: SetupFutureUsage2
  """Shipping information for this PaymentIntent."""
  shipping: Shipping9
  """For non-card charges, you can use this value as the complete description that appears on your customers’ statements. Must contain at least one letter, maximum 22 characters."""
  statementDescriptor: String
  """Provides information about a card payment that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor."""
  statementDescriptorSuffix: String
  """Status of this PaymentIntent, one of `requires_payment_method`, `requires_confirmation`, `requires_action`, `processing`, `requires_capture`, `canceled`, or `succeeded`. Read more about each PaymentIntent [status](https://stripe.com/docs/payments/intents#intent-statuses)."""
  status: Status24!
  """The data with which to automatically create a Transfer when the payment is finalized. See the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts) for details."""
  transferData: TransferData7
  """A string that identifies the resulting payment as part of a group. See the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts) for details."""
  transferGroup: String
}

enum CancellationReason {
  ABANDONED
  AUTOMATIC
  DUPLICATE
  FAILED_INVOICE
  FRAUDULENT
  REQUESTED_BY_CUSTOMER
  VOID_INVOICE
}

enum CaptureMethod2 {
  AUTOMATIC
  MANUAL
}

"""Charges that were created by this PaymentIntent, if any."""
type Charges {
  """This list only contains the latest charge, even if there were previously multiple unsuccessful charges. To view all previous charges for a PaymentIntent, you can filter the charges list using the `payment_intent` [parameter](https://stripe.com/docs/api/charges/list#list_charges-payment_intent)."""
  data: [Charge2]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

enum ConfirmationMethod {
  AUTOMATIC
  MANUAL
}

"""The payment error encountered in the previous PaymentIntent confirmation. It will be cleared if the PaymentIntent is later updated for any reason."""
type LastPaymentError {
  """For card errors, the ID of the failed charge."""
  charge: String
  """For some errors that could be handled programmatically, a short string indicating the [error code](https://stripe.com/docs/error-codes) reported."""
  code: String
  """For card errors resulting from a card issuer decline, a short string indicating the [card issuer's reason for the decline](https://stripe.com/docs/declines#issuer-declines) if they provide one."""
  declineCode: String
  """A URL to more information about the [error code](https://stripe.com/docs/error-codes) reported."""
  docUrl: String
  """A human-readable message providing more details about the error. For card errors, these messages can be shown to your users."""
  message: String
  """If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field."""
  param: String
  """
  A PaymentIntent guides you through the process of collecting a payment from your customer.
  We recommend that you create exactly one PaymentIntent for each order or
  customer session in your system. You can reference the PaymentIntent later to
  see the history of payment attempts for a particular session.
  
  A PaymentIntent transitions through
  [multiple statuses](https://stripe.com/docs/payments/intents#intent-statuses)
  throughout its lifetime as it interfaces with Stripe.js to perform
  authentication flows and ultimately creates at most one successful charge.
  
  Related guide: [Payment Intents API](https://stripe.com/docs/payments/payment-intents).
  """
  paymentIntent: PaymentIntent7
  """
  PaymentMethod objects represent your customer's payment instruments.
  They can be used with [PaymentIntents](https://stripe.com/docs/payments/payment-intents) to collect payments or saved to
  Customer objects to store instrument details for future payments.
  
  Related guides: [Payment Methods](https://stripe.com/docs/payments/payment-methods) and [More Payment Scenarios](https://stripe.com/docs/payments/more-payment-scenarios).
  """
  paymentMethod: PaymentMethod3
  """If the error is specific to the type of payment method, the payment method type that had a problem. This field is only populated for invoice-related errors."""
  paymentMethodType: String
  """
  A SetupIntent guides you through the process of setting up and saving a customer's payment credentials for future payments.
  For example, you could use a SetupIntent to set up and save your customer's card without immediately collecting a payment.
  Later, you can use [PaymentIntents](https://stripe.com/docs/api#payment_intents) to drive the payment flow.
  
  Create a SetupIntent as soon as you're ready to collect your customer's payment credentials.
  Do not maintain long-lived, unconfirmed SetupIntents as they may no longer be valid.
  The SetupIntent then transitions through multiple [statuses](https://stripe.com/docs/payments/intents#intent-statuses) as it guides
  you through the setup process.
  
  Successful SetupIntents result in payment credentials that are optimized for future payments.
  For example, cardholders in [certain regions](/guides/strong-customer-authentication) may need to be run through
  [Strong Customer Authentication](https://stripe.com/docs/strong-customer-authentication) at the time of payment method collection
  in order to streamline later [off-session payments](https://stripe.com/docs/payments/setup-intents).
  If the SetupIntent is used with a [Customer](https://stripe.com/docs/api#setup_intent_object-customer), upon success,
  it will automatically attach the resulting payment method to that Customer.
  We recommend using SetupIntents or [setup_future_usage](https://stripe.com/docs/api#payment_intent_object-setup_future_usage) on
  PaymentIntents to save payment methods in order to prevent saving invalid or unoptimized payment methods.
  
  By using SetupIntents, you ensure that your customers experience the minimum set of required friction,
  even as regulations change over time.
  
  Related guide: [Setup Intents API](https://stripe.com/docs/payments/setup-intents).
  """
  setupIntent: SetupIntent2
  """The source object for errors returned on a request involving a source."""
  source: Source9
  """The type of error returned. One of `api_error`, `card_error`, `idempotency_error`, or `invalid_request_error`"""
  type: Type30
}

"""
PaymentMethod objects represent your customer's payment instruments.
They can be used with [PaymentIntents](https://stripe.com/docs/payments/payment-intents) to collect payments or saved to
Customer objects to store instrument details for future payments.

Related guides: [Payment Methods](https://stripe.com/docs/payments/payment-methods) and [More Payment Scenarios](https://stripe.com/docs/payments/more-payment-scenarios).
"""
type PaymentMethod3 {
  acssDebit: PaymentMethodAcssDebit
  afterpayClearpay: JSON
  alipay: JSON
  auBecsDebit: PaymentMethodAuBecsDebit
  bacsDebit: PaymentMethodBacsDebit
  bancontact: JSON
  billingDetails: BillingDetails!
  boleto: PaymentMethodBoleto
  card: PaymentMethodCard
  cardPresent: JSON
  """Time at which the object was created. Measured in seconds since the Unix epoch."""
  created: Int!
  """The ID of the Customer to which this PaymentMethod is saved. This will not be set when the PaymentMethod has not been saved to a Customer."""
  customer: JSON
  eps: PaymentMethodEps
  fpx: PaymentMethodFpx
  giropay: JSON
  grabpay: JSON
  """Unique identifier for the object."""
  id: String!
  ideal: PaymentMethodIdeal
  interacPresent: JSON
  """Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."""
  livemode: Boolean!
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."""
  metadata: JSON
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object45!
  oxxo: JSON
  p24: PaymentMethodP24
  sepaDebit: PaymentMethodSepaDebit
  sofort: PaymentMethodSofort
  """The type of the PaymentMethod. An additional hash is included on the PaymentMethod with a name matching this value. It contains additional information specific to the PaymentMethod type."""
  type: Type29!
  wechatPay: JSON
}

type PaymentMethodAcssDebit {
  """Name of the bank associated with the bank account."""
  bankName: String
  """Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same."""
  fingerprint: String
  """Institution number of the bank account."""
  institutionNumber: String
  """Last four digits of the bank account number."""
  last4: String
  """Transit number of the bank account."""
  transitNumber: String
}

type PaymentMethodAuBecsDebit {
  """Six-digit number identifying bank and branch associated with this bank account."""
  bsbNumber: String
  """Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same."""
  fingerprint: String
  """Last four digits of the bank account number."""
  last4: String
}

type PaymentMethodBacsDebit {
  """Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same."""
  fingerprint: String
  """Last four digits of the bank account number."""
  last4: String
  """Sort code of the bank account. (e.g., `10-20-30`)"""
  sortCode: String
}

type PaymentMethodBoleto {
  """Uniquely identifies the customer tax id (CNPJ or CPF)"""
  taxId: String!
}

type PaymentMethodCard {
  """Card brand. Can be `amex`, `diners`, `discover`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`."""
  brand: String!
  """Checks on Card address and CVC if provided."""
  checks: Checks2
  """Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected."""
  country: String
  """Two-digit number representing the card's expiration month."""
  expMonth: Int!
  """Four-digit number representing the card's expiration year."""
  expYear: Int!
  """
  Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
  
  *Starting May 1, 2021, card fingerprint in India for Connect will change to allow two fingerprints for the same card --- one for India and one for the rest of the world.*
  """
  fingerprint: String
  """Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`."""
  funding: String!
  """Details of the original PaymentMethod that created this object."""
  generatedFrom: GeneratedFrom
  """The last four digits of the card."""
  last4: String!
  """Contains information about card networks that can be used to process the payment."""
  networks: Networks
  """Contains details on how this Card maybe be used for 3D Secure authentication."""
  threeDSecureUsage: ThreeDSecureUsage
  """If this Card is part of a card wallet, this contains the details of the card wallet."""
  wallet: Wallet2
}

"""Checks on Card address and CVC if provided."""
type Checks2 {
  """If a address line1 was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`."""
  addressLine1Check: String
  """If a address postal code was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`."""
  addressPostalCodeCheck: String
  """If a CVC was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`."""
  cvcCheck: String
}

"""Details of the original PaymentMethod that created this object."""
type GeneratedFrom {
  """The charge that created this object."""
  charge: String
  """Transaction-specific details of the payment method used in the payment."""
  paymentMethodDetails: PaymentMethodDetails2
  """The ID of the SetupAttempt that generated this PaymentMethod, if any."""
  setupAttempt: JSON
}

"""Transaction-specific details of the payment method used in the payment."""
type PaymentMethodDetails2 {
  cardPresent: CardPresent
  """The type of payment method transaction-specific details from the transaction that generated this `card` payment method. Always `card_present`."""
  type: String
}

"""Contains information about card networks that can be used to process the payment."""
type Networks {
  """All available networks for the card."""
  available: [String]
  """The preferred network for the card."""
  preferred: String
}

"""Contains details on how this Card maybe be used for 3D Secure authentication."""
type ThreeDSecureUsage {
  """Whether 3D Secure is supported on this card."""
  supported: Boolean
}

"""If this Card is part of a card wallet, this contains the details of the card wallet."""
type Wallet2 {
  amexExpressCheckout: JSON
  applePay: JSON
  """(For tokenized numbers only.) The last four digits of the device account number."""
  dynamicLast4: String
  googlePay: JSON
  masterpass: Masterpass2
  samsungPay: JSON
  """The type of the card wallet, one of `amex_express_checkout`, `apple_pay`, `google_pay`, `masterpass`, `samsung_pay`, or `visa_checkout`. An additional hash is included on the Wallet subhash with a name matching this value. It contains additional information specific to the card wallet type."""
  type: Type9
  visaCheckout: VisaCheckout2
}

type Masterpass2 {
  """Owner's verified billing address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated."""
  billingAddress: BillingAddress
  """Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated."""
  email: String
  """Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated."""
  name: String
  """Owner's verified shipping address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated."""
  shippingAddress: ShippingAddress
}

type VisaCheckout2 {
  """Owner's verified billing address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated."""
  billingAddress: BillingAddress
  """Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated."""
  email: String
  """Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated."""
  name: String
  """Owner's verified shipping address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated."""
  shippingAddress: ShippingAddress
}

type PaymentMethodEps {
  """The customer's bank. Should be one of `arzte_und_apotheker_bank`, `austrian_anadi_bank_ag`, `bank_austria`, `bankhaus_carl_spangler`, `bankhaus_schelhammer_und_schattera_ag`, `bawag_psk_ag`, `bks_bank_ag`, `brull_kallmus_bank_ag`, `btv_vier_lander_bank`, `capital_bank_grawe_gruppe_ag`, `dolomitenbank`, `easybank_ag`, `erste_bank_und_sparkassen`, `hypo_alpeadriabank_international_ag`, `hypo_noe_lb_fur_niederosterreich_u_wien`, `hypo_oberosterreich_salzburg_steiermark`, `hypo_tirol_bank_ag`, `hypo_vorarlberg_bank_ag`, `hypo_bank_burgenland_aktiengesellschaft`, `marchfelder_bank`, `oberbank_ag`, `raiffeisen_bankengruppe_osterreich`, `schoellerbank_ag`, `sparda_bank_wien`, `volksbank_gruppe`, `volkskreditbank_ag`, or `vr_bank_braunau`."""
  bank: Bank
}

type PaymentMethodFpx {
  """The customer's bank, if provided. Can be one of `affin_bank`, `alliance_bank`, `ambank`, `bank_islam`, `bank_muamalat`, `bank_rakyat`, `bsn`, `cimb`, `hong_leong_bank`, `hsbc`, `kfh`, `maybank2u`, `ocbc`, `public_bank`, `rhb`, `standard_chartered`, `uob`, `deutsche_bank`, `maybank2e`, or `pb_enterprise`."""
  bank: Bank6!
}

enum Bank6 {
  AFFIN_BANK
  ALLIANCE_BANK
  AMBANK
  BANK_ISLAM
  BANK_MUAMALAT
  BANK_RAKYAT
  BSN
  CIMB
  DEUTSCHE_BANK
  HONG_LEONG_BANK
  HSBC
  KFH
  MAYBANK2E
  MAYBANK2U
  OCBC
  PB_ENTERPRISE
  PUBLIC_BANK
  RHB
  STANDARD_CHARTERED
  UOB
}

type PaymentMethodIdeal {
  """The customer's bank, if provided. Can be one of `abn_amro`, `asn_bank`, `bunq`, `handelsbanken`, `ing`, `knab`, `moneyou`, `rabobank`, `regiobank`, `revolut`, `sns_bank`, `triodos_bank`, or `van_lanschot`."""
  bank: Bank7
  """The Bank Identifier Code of the customer's bank, if the bank was provided."""
  bic: Bic9
}

enum Bank7 {
  ABN_AMRO
  ASN_BANK
  BUNQ
  HANDELSBANKEN
  ING
  KNAB
  MONEYOU
  RABOBANK
  REGIOBANK
  REVOLUT
  SNS_BANK
  TRIODOS_BANK
  VAN_LANSCHOT
}

enum Bic9 {
  ABNANL2A
  ASNBNL21
  BUNQNL2A
  FVLBNL22
  HANDNL2A
  INGBNL2A
  KNABNL2H
  MOYONL21
  RABONL2U
  RBRBNL21
  REVOLT21
  SNSBNL2A
  TRIONL2U
}

enum Object45 {
  PAYMENT_METHOD
}

type PaymentMethodP24 {
  """The customer's bank, if provided."""
  bank: Bank8
}

enum Bank8 {
  ALIOR_BANK
  BANK_MILLENNIUM
  BANK_NOWY_BFG_SA
  BANK_PEKAO_SA
  BANKI_SPBDZIELCZE
  BLIK
  BNP_PARIBAS
  BOZ
  CITI_HANDLOWY
  CREDIT_AGRICOLE
  ENVELOBANK
  ETRANSFER_POCZTOWY24
  GETIN_BANK
  IDEABANK
  ING
  INTELIGO
  MBANK_MTRANSFER
  NEST_PRZELEW
  NOBLE_PAY
  PBAC_Z_IPKO
  PLUS_BANK
  SANTANDER_PRZELEW24
  TMOBILE_USBUGI_BANKOWE
  TOYOTA_BANK
  VOLKSWAGEN_BANK
}

type PaymentMethodSepaDebit {
  """Bank code of bank associated with the bank account."""
  bankCode: String
  """Branch code of bank associated with the bank account."""
  branchCode: String
  """Two-letter ISO code representing the country the bank account is located in."""
  country: String
  """Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same."""
  fingerprint: String
  """Information about the object that generated this PaymentMethod."""
  generatedFrom: GeneratedFrom2
  """Last four characters of the IBAN."""
  last4: String
}

"""Information about the object that generated this PaymentMethod."""
type GeneratedFrom2 {
  """The ID of the Charge that generated this PaymentMethod, if any."""
  charge: JSON
  """The ID of the SetupAttempt that generated this PaymentMethod, if any."""
  setupAttempt: JSON
}

type PaymentMethodSofort {
  """Two-letter ISO code representing the country the bank account is located in."""
  country: String
}

enum Type29 {
  ACSS_DEBIT
  AFTERPAY_CLEARPAY
  ALIPAY
  AU_BECS_DEBIT
  BACS_DEBIT
  BANCONTACT
  BOLETO
  CARD
  CARD_PRESENT
  EPS
  FPX
  GIROPAY
  GRABPAY
  IDEAL
  INTERAC_PRESENT
  OXXO
  P24
  SEPA_DEBIT
  SOFORT
  WECHAT_PAY
}

"""
A SetupIntent guides you through the process of setting up and saving a customer's payment credentials for future payments.
For example, you could use a SetupIntent to set up and save your customer's card without immediately collecting a payment.
Later, you can use [PaymentIntents](https://stripe.com/docs/api#payment_intents) to drive the payment flow.

Create a SetupIntent as soon as you're ready to collect your customer's payment credentials.
Do not maintain long-lived, unconfirmed SetupIntents as they may no longer be valid.
The SetupIntent then transitions through multiple [statuses](https://stripe.com/docs/payments/intents#intent-statuses) as it guides
you through the setup process.

Successful SetupIntents result in payment credentials that are optimized for future payments.
For example, cardholders in [certain regions](/guides/strong-customer-authentication) may need to be run through
[Strong Customer Authentication](https://stripe.com/docs/strong-customer-authentication) at the time of payment method collection
in order to streamline later [off-session payments](https://stripe.com/docs/payments/setup-intents).
If the SetupIntent is used with a [Customer](https://stripe.com/docs/api#setup_intent_object-customer), upon success,
it will automatically attach the resulting payment method to that Customer.
We recommend using SetupIntents or [setup_future_usage](https://stripe.com/docs/api#payment_intent_object-setup_future_usage) on
PaymentIntents to save payment methods in order to prevent saving invalid or unoptimized payment methods.

By using SetupIntents, you ensure that your customers experience the minimum set of required friction,
even as regulations change over time.

Related guide: [Setup Intents API](https://stripe.com/docs/payments/setup-intents).
"""
type SetupIntent2 {
  """ID of the Connect application that created the SetupIntent."""
  application: JSON
  """Reason for cancellation of this SetupIntent, one of `abandoned`, `requested_by_customer`, or `duplicate`."""
  cancellationReason: CancellationReason2
  """
  The client secret of this SetupIntent. Used for client-side retrieval using a publishable key.
  
  The client secret can be used to complete payment setup from your frontend. It should not be stored, logged, embedded in URLs, or exposed to anyone other than the customer. Make sure that you have TLS enabled on any page that includes the client secret.
  """
  clientSecret: String
  """Time at which the object was created. Measured in seconds since the Unix epoch."""
  created: Int!
  """
  ID of the Customer this SetupIntent belongs to, if one exists.
  
  If present, the SetupIntent's payment method will be attached to the Customer on successful setup. Payment methods attached to other Customers cannot be used with this SetupIntent.
  """
  customer: JSON
  """An arbitrary string attached to the object. Often useful for displaying to users."""
  description: String
  """Unique identifier for the object."""
  id: String!
  """The error encountered in the previous SetupIntent confirmation."""
  lastSetupError: LastSetupError
  """The most recent SetupAttempt for this SetupIntent."""
  latestAttempt: JSON
  """Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."""
  livemode: Boolean!
  """ID of the multi use Mandate generated by the SetupIntent."""
  mandate: JSON
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."""
  metadata: JSON
  """If present, this property tells you what actions you need to take in order for your customer to continue payment setup."""
  nextAction: NextAction
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object46!
  """The account (if any) for which the setup is intended."""
  onBehalfOf: JSON
  """ID of the payment method used with this SetupIntent."""
  paymentMethod: JSON
  """Payment-method-specific configuration for this SetupIntent."""
  paymentMethodOptions: PaymentMethodOptions4
  """The list of payment method types (e.g. card) that this SetupIntent is allowed to set up."""
  paymentMethodTypes: [String]!
  """ID of the single_use Mandate generated by the SetupIntent."""
  singleUseMandate: JSON
  """[Status](https://stripe.com/docs/payments/intents#intent-statuses) of this SetupIntent, one of `requires_payment_method`, `requires_confirmation`, `requires_action`, `processing`, `canceled`, or `succeeded`."""
  status: Status23!
  """
  Indicates how the payment method is intended to be used in the future.
  
  Use `on_session` if you intend to only reuse the payment method when the customer is in your checkout flow. Use `off_session` if your customer may or may not be in your checkout flow. If not provided, this value defaults to `off_session`.
  """
  usage: String!
}

enum CancellationReason2 {
  ABANDONED
  DUPLICATE
  REQUESTED_BY_CUSTOMER
}

"""The error encountered in the previous SetupIntent confirmation."""
type LastSetupError {
  """For card errors, the ID of the failed charge."""
  charge: String
  """For some errors that could be handled programmatically, a short string indicating the [error code](https://stripe.com/docs/error-codes) reported."""
  code: String
  """For card errors resulting from a card issuer decline, a short string indicating the [card issuer's reason for the decline](https://stripe.com/docs/declines#issuer-declines) if they provide one."""
  declineCode: String
  """A URL to more information about the [error code](https://stripe.com/docs/error-codes) reported."""
  docUrl: String
  """A human-readable message providing more details about the error. For card errors, these messages can be shown to your users."""
  message: String
  """If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field."""
  param: String
  """
  A PaymentIntent guides you through the process of collecting a payment from your customer.
  We recommend that you create exactly one PaymentIntent for each order or
  customer session in your system. You can reference the PaymentIntent later to
  see the history of payment attempts for a particular session.
  
  A PaymentIntent transitions through
  [multiple statuses](https://stripe.com/docs/payments/intents#intent-statuses)
  throughout its lifetime as it interfaces with Stripe.js to perform
  authentication flows and ultimately creates at most one successful charge.
  
  Related guide: [Payment Intents API](https://stripe.com/docs/payments/payment-intents).
  """
  paymentIntent: PaymentIntent7
  """
  PaymentMethod objects represent your customer's payment instruments.
  They can be used with [PaymentIntents](https://stripe.com/docs/payments/payment-intents) to collect payments or saved to
  Customer objects to store instrument details for future payments.
  
  Related guides: [Payment Methods](https://stripe.com/docs/payments/payment-methods) and [More Payment Scenarios](https://stripe.com/docs/payments/more-payment-scenarios).
  """
  paymentMethod: PaymentMethod3
  """If the error is specific to the type of payment method, the payment method type that had a problem. This field is only populated for invoice-related errors."""
  paymentMethodType: String
  """
  A SetupIntent guides you through the process of setting up and saving a customer's payment credentials for future payments.
  For example, you could use a SetupIntent to set up and save your customer's card without immediately collecting a payment.
  Later, you can use [PaymentIntents](https://stripe.com/docs/api#payment_intents) to drive the payment flow.
  
  Create a SetupIntent as soon as you're ready to collect your customer's payment credentials.
  Do not maintain long-lived, unconfirmed SetupIntents as they may no longer be valid.
  The SetupIntent then transitions through multiple [statuses](https://stripe.com/docs/payments/intents#intent-statuses) as it guides
  you through the setup process.
  
  Successful SetupIntents result in payment credentials that are optimized for future payments.
  For example, cardholders in [certain regions](/guides/strong-customer-authentication) may need to be run through
  [Strong Customer Authentication](https://stripe.com/docs/strong-customer-authentication) at the time of payment method collection
  in order to streamline later [off-session payments](https://stripe.com/docs/payments/setup-intents).
  If the SetupIntent is used with a [Customer](https://stripe.com/docs/api#setup_intent_object-customer), upon success,
  it will automatically attach the resulting payment method to that Customer.
  We recommend using SetupIntents or [setup_future_usage](https://stripe.com/docs/api#payment_intent_object-setup_future_usage) on
  PaymentIntents to save payment methods in order to prevent saving invalid or unoptimized payment methods.
  
  By using SetupIntents, you ensure that your customers experience the minimum set of required friction,
  even as regulations change over time.
  
  Related guide: [Setup Intents API](https://stripe.com/docs/payments/setup-intents).
  """
  setupIntent: SetupIntent2
  """The source object for errors returned on a request involving a source."""
  source: Source9
  """The type of error returned. One of `api_error`, `card_error`, `idempotency_error`, or `invalid_request_error`"""
  type: Type30
}

"""The source object for errors returned on a request involving a source."""
type Source9 {
  account: JSON
  """The name of the person or business that owns the bank account."""
  accountHolderName: String
  """The type of entity that holds the account. This can be either `individual` or `company`."""
  accountHolderType: String
  """The bank account type. This can only be `checking` or `savings` in most countries. In Japan, this can only be `futsu` or `toza`."""
  accountType: String
  achCreditTransfer: AchCreditTransfer2
  achDebit: AchDebit2
  acssDebit: AcssDebit4
  """City/District/Suburb/Town/Village."""
  addressCity: String
  """Billing address country, if provided when creating card."""
  addressCountry: String
  """Address line 1 (Street address/PO Box/Company name)."""
  addressLine1: String
  """If `address_line1` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`."""
  addressLine1Check: String
  """Address line 2 (Apartment/Suite/Unit/Building)."""
  addressLine2: String
  """State/County/Province/Region."""
  addressState: String
  """ZIP or postal code."""
  addressZip: String
  """If `address_zip` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`."""
  addressZipCheck: String
  alipay: Alipay2
  """A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount associated with the source. This is the amount for which the source will be chargeable once ready. Required for `single_use` sources."""
  amount: Int
  auBecsDebit: AuBecsDebit2
  availablePayoutMethods: JSON
  bancontact: Bancontact2
  """Name of the bank associated with the routing number (e.g., `WELLS FARGO`)."""
  bankName: String
  """Card brand. Can be `American Express`, `Diners Club`, `Discover`, `JCB`, `MasterCard`, `UnionPay`, `Visa`, or `Unknown`."""
  brand: String
  card: Card6
  cardPresent: CardPresent2
  """The client secret of the source. Used for client-side retrieval using a publishable key."""
  clientSecret: String
  codeVerification: CodeVerification
  country: JSON
  """Time at which the object was created. Measured in seconds since the Unix epoch."""
  created: Int
  currency: JSON
  customer: JSON
  """If a CVC was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. A result of unchecked indicates that CVC was provided but hasn't been checked yet. Checks are typically performed when attaching a card to a Customer object, or when creating a charge. For more details, see [Check if a card is valid without a charge](https://support.stripe.com/questions/check-if-a-card-is-valid-without-a-charge)."""
  cvcCheck: String
  defaultForCurrency: JSON
  """(For tokenized numbers only.) The last four digits of the device account number."""
  dynamicLast4: String
  eps: Eps2
  """Two-digit number representing the card's expiration month."""
  expMonth: Int
  """Four-digit number representing the card's expiration year."""
  expYear: Int
  fingerprint: JSON
  """The authentication `flow` of the source. `flow` is one of `redirect`, `receiver`, `code_verification`, `none`."""
  flow: String
  """Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`."""
  funding: String
  giropay: Giropay2
  """Unique identifier for the object."""
  id: String
  ideal: Ideal2
  klarna: Klarna2
  last4: JSON
  """Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."""
  livemode: Boolean
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."""
  metadata: JSON
  multibanco: Multibanco2
  """Cardholder name."""
  name: String
  object: JSON
  """Information about the owner of the payment instrument that may be used or required by particular source types."""
  owner: Owner3
  p24: P242
  receiver: Receiver2
  """The recipient that this card belongs to. This attribute will not be in the card object if the card belongs to a customer or account instead."""
  recipient: JSON
  redirect: Redirect
  """The routing transit number for the bank account."""
  routingNumber: String
  sepaDebit: SepaDebit2
  sofort: Sofort2
  sourceOrder: SourceOrder
  """Extra information about a source. This will appear on your customer's statement every time you charge the source."""
  statementDescriptor: String
  status: JSON
  threeDSecure: ThreeDSecure4
  """If the card number is tokenized, this is the method that was used. Can be `android_pay` (includes Google Pay), `apple_pay`, `masterpass`, `visa_checkout`, or null."""
  tokenizationMethod: String
  """The `type` of the source. The `type` is a payment method, one of `ach_credit_transfer`, `ach_debit`, `alipay`, `bancontact`, `card`, `card_present`, `eps`, `giropay`, `ideal`, `multibanco`, `klarna`, `p24`, `sepa_debit`, `sofort`, `three_d_secure`, or `wechat`. An additional hash is included on the source with a name matching this value. It contains additional information specific to the [payment method](https://stripe.com/docs/sources) used."""
  type: Type18
  """Either `reusable` or `single_use`. Whether this source should be reusable or not. Some source types may or may not be reusable by construction, while others may leave the option at creation. If an incompatible value is passed, an error will be returned."""
  usage: String
  wechat: Wechat2
}

enum Type30 {
  API_ERROR
  CARD_ERROR
  IDEMPOTENCY_ERROR
  INVALID_REQUEST_ERROR
}

"""If present, this property tells you what actions you need to take in order for your customer to continue payment setup."""
type NextAction {
  redirectToUrl: RedirectToUrl
  """Type of the next action to perform, one of `redirect_to_url`, `use_stripe_sdk`, `alipay_handle_redirect`, or `oxxo_display_details`."""
  type: String
  """When confirming a SetupIntent with Stripe.js, Stripe.js depends on the contents of this dictionary to invoke authentication flows. The shape of the contents is subject to change and is only intended to be used by Stripe.js."""
  useStripeSdk: JSON
  verifyWithMicrodeposits: VerifyWithMicrodeposits
}

type RedirectToUrl {
  """If the customer does not exit their browser while authenticating, they will be redirected to this specified URL after completion."""
  returnUrl: String
  """The URL you must redirect your customer to in order to authenticate."""
  url: String
}

type VerifyWithMicrodeposits {
  """The timestamp when the microdeposits are expected to land."""
  arrivalDate: Int!
  """The URL for the hosted verification page, which allows customers to verify their bank account."""
  hostedVerificationUrl: String!
}

enum Object46 {
  SETUP_INTENT
}

"""Payment-method-specific configuration for this SetupIntent."""
type PaymentMethodOptions4 {
  acssDebit: AcssDebit5
  card: Card14
  sepaDebit: SepaDebit3
}

type AcssDebit5 {
  """Currency supported by the bank account"""
  currency: Currency43
  mandateOptions: SetupIntentPaymentMethodOptionsMandateOptionsAcssDebit
  """Bank account verification method."""
  verificationMethod: VerificationMethod
}

enum Currency43 {
  CAD
  USD
}

type SetupIntentPaymentMethodOptionsMandateOptionsAcssDebit {
  """A URL for custom mandate text"""
  customMandateUrl: String
  """Description of the interval. Only required if the 'payment_schedule' parameter is 'interval' or 'combined'."""
  intervalDescription: String
  """Payment schedule for the mandate."""
  paymentSchedule: PaymentSchedule
  """Transaction type of the mandate."""
  transactionType: TransactionType
}

type Card14 {
  """We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. Permitted values include: `automatic` or `any`. If not provided, defaults to `automatic`. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine."""
  requestThreeDSecure: RequestThreeDSecure2
}

enum RequestThreeDSecure2 {
  ANY
  AUTOMATIC
  CHALLENGE_ONLY
}

type SepaDebit3 {
  mandateOptions: JSON
}

enum Status23 {
  CANCELED
  PROCESSING
  REQUIRES_ACTION
  REQUIRES_CONFIRMATION
  REQUIRES_PAYMENT_METHOD
  SUCCEEDED
}

"""If present, this property tells you what actions you need to take in order for your customer to fulfill a payment using the provided source."""
type NextAction2 {
  alipayHandleRedirect: AlipayHandleRedirect
  boletoDisplayDetails: BoletoDisplayDetails
  oxxoDisplayDetails: OxxoDisplayDetails
  redirectToUrl: RedirectToUrl2
  """Type of the next action to perform, one of `redirect_to_url`, `use_stripe_sdk`, `alipay_handle_redirect`, or `oxxo_display_details`."""
  type: String
  """When confirming a PaymentIntent with Stripe.js, Stripe.js depends on the contents of this dictionary to invoke authentication flows. The shape of the contents is subject to change and is only intended to be used by Stripe.js."""
  useStripeSdk: JSON
  verifyWithMicrodeposits: VerifyWithMicrodeposits2
  wechatPayDisplayQrCode: WechatPayDisplayQrCode
  wechatPayRedirectToAndroidApp: WechatPayRedirectToAndroidApp
  wechatPayRedirectToIosApp: WechatPayRedirectToIosApp
}

type AlipayHandleRedirect {
  """The native data to be used with Alipay SDK you must redirect your customer to in order to authenticate the payment in an Android App."""
  nativeData: String
  """The native URL you must redirect your customer to in order to authenticate the payment in an iOS App."""
  nativeUrl: String
  """If the customer does not exit their browser while authenticating, they will be redirected to this specified URL after completion."""
  returnUrl: String
  """The URL you must redirect your customer to in order to authenticate the payment."""
  url: String
}

type BoletoDisplayDetails {
  """The timestamp after which the boleto expires."""
  expiresAt: Int
  """The URL to the hosted boleto voucher page, which allows customers to view the boleto voucher."""
  hostedVoucherUrl: String
  """The boleto number."""
  number: String
  """The URL to the downloadable boleto voucher PDF."""
  pdf: String
}

type OxxoDisplayDetails {
  """The timestamp after which the OXXO voucher expires."""
  expiresAfter: Int
  """The URL for the hosted OXXO voucher page, which allows customers to view and print an OXXO voucher."""
  hostedVoucherUrl: String
  """OXXO reference number."""
  number: String
}

type RedirectToUrl2 {
  """If the customer does not exit their browser while authenticating, they will be redirected to this specified URL after completion."""
  returnUrl: String
  """The URL you must redirect your customer to in order to authenticate the payment."""
  url: String
}

type VerifyWithMicrodeposits2 {
  """The timestamp when the microdeposits are expected to land."""
  arrivalDate: Int!
  """The URL for the hosted verification page, which allows customers to verify their bank account."""
  hostedVerificationUrl: String!
}

type WechatPayDisplayQrCode {
  """The data being used to generate QR code"""
  data: String!
  """The base64 image data for a pre-generated QR code"""
  imageDataUrl: String!
}

type WechatPayRedirectToAndroidApp {
  """app_id is the APP ID registered on WeChat open platform"""
  appId: String!
  """nonce_str is a random string"""
  nonceStr: String!
  """package is static value"""
  package: String!
  """an unique merchant ID assigned by Wechat Pay"""
  partnerId: String!
  """an unique trading ID assigned by Wechat Pay"""
  prepayId: String!
  """A signature"""
  sign: String!
  """Specifies the current time in epoch format"""
  timestamp: String!
}

type WechatPayRedirectToIosApp {
  """An universal link that redirect to Wechat Pay APP"""
  nativeUrl: String!
}

enum Object47 {
  PAYMENT_INTENT
}

"""Payment-method-specific configuration for this PaymentIntent."""
type PaymentMethodOptions5 {
  acssDebit: AcssDebit6
  afterpayClearpay: AfterpayClearpay2
  alipay: JSON
  bancontact: Bancontact5
  boleto: Boleto2
  card: Card15
  cardPresent: JSON
  ideal: JSON
  oxxo: Oxxo2
  p24: JSON
  sepaDebit: SepaDebit4
  sofort: Sofort3
  wechatPay: WechatPay3
}

type AcssDebit6 {
  mandateOptions: PaymentIntentPaymentMethodOptionsMandateOptionsAcssDebit
  """Bank account verification method."""
  verificationMethod: VerificationMethod
}

type PaymentIntentPaymentMethodOptionsMandateOptionsAcssDebit {
  """A URL for custom mandate text"""
  customMandateUrl: String
  """Description of the interval. Only required if the 'payment_schedule' parameter is 'interval' or 'combined'."""
  intervalDescription: String
  """Payment schedule for the mandate."""
  paymentSchedule: PaymentSchedule
  """Transaction type of the mandate."""
  transactionType: TransactionType
}

type AfterpayClearpay2 {
  """
  Order identifier shown to the merchant in Afterpay’s online portal. We recommend using a value that helps you answer any questions a customer might have about
  the payment. The identifier is limited to 128 characters and may contain only letters, digits, underscores, backslashes and dashes.
  """
  reference: String
}

type Bancontact5 {
  """Preferred language of the Bancontact authorization page that the customer is redirected to."""
  preferredLanguage: PreferredLanguage5!
}

type Card15 {
  """
  Installment details for this payment (Mexico only).
  
  For more information, see the [installments integration guide](https://stripe.com/docs/payments/installments).
  """
  installments: Installments2
  """Selected network to process this payment intent on. Depends on the available networks of the card attached to the payment intent. Can be only set confirm-time."""
  network: Network4
  """We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. Permitted values include: `automatic` or `any`. If not provided, defaults to `automatic`. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine."""
  requestThreeDSecure: RequestThreeDSecure2
}

"""
Installment details for this payment (Mexico only).

For more information, see the [installments integration guide](https://stripe.com/docs/payments/installments).
"""
type Installments2 {
  """Installment plans that may be selected for this PaymentIntent."""
  availablePlans: [PaymentMethodDetailsCardInstallmentsPlan]
  """Whether Installments are enabled for this PaymentIntent."""
  enabled: Boolean
  """Installment plan selected for this PaymentIntent."""
  plan: Plan3
}

type PaymentMethodDetailsCardInstallmentsPlan {
  """For `fixed_count` installment plans, this is the number of installment payments your customer will make to their credit card."""
  count: Int
  """
  For `fixed_count` installment plans, this is the interval between installment payments your customer will make to their credit card.
  One of `month`.
  """
  interval: Interval3
  """Type of installment plan, one of `fixed_count`."""
  type: Type8!
}

"""Installment plan selected for this PaymentIntent."""
type Plan3 {
  """For `fixed_count` installment plans, this is the number of installment payments your customer will make to their credit card."""
  count: Int
  """
  For `fixed_count` installment plans, this is the interval between installment payments your customer will make to their credit card.
  One of `month`.
  """
  interval: Interval3
  """Type of installment plan, one of `fixed_count`."""
  type: Type8
}

enum Network4 {
  AMEX
  CARTES_BANCAIRES
  DINERS
  DISCOVER
  INTERAC
  JCB
  MASTERCARD
  UNIONPAY
  UNKNOWN
  VISA
}

type SepaDebit4 {
  mandateOptions: JSON
}

type Sofort3 {
  """Preferred language of the SOFORT authorization page that the customer is redirected to."""
  preferredLanguage: PreferredLanguage6
}

enum PreferredLanguage6 {
  DE
  EN
  ES
  FR
  IT
  NL
  PL
}

type WechatPay3 {
  """The app ID registered with WeChat Pay. Only required when client is ios or android."""
  appId: String
  """The client type that the end customer will pay from"""
  client: Client2
}

enum Client2 {
  ANDROID
  IOS
  WEB
}

enum SetupFutureUsage2 {
  OFF_SESSION
  ON_SESSION
}

"""Shipping information for this PaymentIntent."""
type Shipping9 {
  address: Address
  """The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc."""
  carrier: String
  """Recipient name."""
  name: String
  """Recipient phone (including extension)."""
  phone: String
  """The tracking number for a physical product, obtained from the delivery service. If multiple tracking numbers were generated for this purchase, please separate them with commas."""
  trackingNumber: String
}

enum Status24 {
  CANCELED
  PROCESSING
  REQUIRES_ACTION
  REQUIRES_CAPTURE
  REQUIRES_CONFIRMATION
  REQUIRES_PAYMENT_METHOD
  SUCCEEDED
}

"""The data with which to automatically create a Transfer when the payment is finalized. See the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts) for details."""
type TransferData7 {
  """Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99)."""
  amount: Int
  """
  The account (if any) the payment will be attributed to for tax
  reporting, and where funds from the payment will be transferred to upon
  payment success.
  """
  destination: JSON
}

"""The individual line items that make up the invoice. `lines` is sorted as follows: invoice items in reverse chronological order, followed by the subscription, if any."""
type InvoiceLinesList {
  """Details about each object."""
  data: [LineItem]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

type LineItem {
  """The amount, in %s."""
  amount: Int!
  """Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."""
  currency: String!
  """An arbitrary string attached to the object. Often useful for displaying to users."""
  description: String
  """The amount of discount calculated per discount for this line item."""
  discountAmounts: [DiscountsResourceDiscountAmount]
  """If true, discounts will apply to this line item. Always false for prorations."""
  discountable: Boolean!
  """The discounts applied to the invoice line item. Line item discounts are applied before invoice discounts. Use `expand[]=discounts` to expand each discount."""
  discounts: [JSON]
  """Unique identifier for the object."""
  id: String!
  """The ID of the [invoice item](https://stripe.com/docs/api/invoiceitems) associated with this line item if any."""
  invoiceItem: String
  """Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."""
  livemode: Boolean!
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Note that for line items with `type=subscription` this will reflect the metadata of the subscription that caused the line item to be created."""
  metadata: JSON!
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object48!
  period: InvoiceLineItemPeriod!
  """The price of the line item."""
  price: Price10
  """Whether this is a proration."""
  proration: Boolean!
  """The quantity of the subscription, if the line item is a subscription or a proration."""
  quantity: Int
  """The subscription that the invoice item pertains to, if any."""
  subscription: String
  """The subscription item that generated this invoice item. Left empty if the line item is not an explicit result of a subscription."""
  subscriptionItem: String
  """The amount of tax calculated per tax rate for this line item"""
  taxAmounts: [InvoiceTaxAmount]
  """The tax rates which apply to the line item."""
  taxRates: [TaxRate]
  """A string identifying the type of the source of this line item, either an `invoiceitem` or a `subscription`."""
  type: Type33!
}

enum Object48 {
  LINE_ITEM
}

"""The price of the line item."""
type Price10 {
  """Whether the price can be used for new purchases."""
  active: Boolean
  """Describes how to compute the price per period. Either `per_unit` or `tiered`. `per_unit` indicates that the fixed amount (specified in `unit_amount` or `unit_amount_decimal`) will be charged per unit in `quantity` (for prices with `usage_type=licensed`), or per unit of total usage (for prices with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as defined using the `tiers` and `tiers_mode` attributes."""
  billingScheme: BillingScheme
  """Time at which the object was created. Measured in seconds since the Unix epoch."""
  created: Int
  """Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."""
  currency: String
  """Unique identifier for the object."""
  id: String
  """Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."""
  livemode: Boolean
  """A lookup key used to retrieve prices dynamically from a static string."""
  lookupKey: String
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."""
  metadata: JSON
  """A brief description of the price, hidden from customers."""
  nickname: String
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object24
  """The ID of the product this price is associated with."""
  product: JSON
  """The recurring components of a price such as `interval` and `usage_type`."""
  recurring: Recurring
  """Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`. Once specified as either `inclusive` or `exclusive`, it cannot be changed."""
  taxBehavior: TaxBehavior
  """Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`."""
  tiers: [PriceTier]
  """Defines if the tiering price should be `graduated` or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per unit price. In `graduated` tiering, pricing can change as the quantity grows."""
  tiersMode: TiersMode
  """Apply a transformation to the reported usage or set quantity before computing the amount billed. Cannot be combined with `tiers`."""
  transformQuantity: TransformQuantity
  """One of `one_time` or `recurring` depending on whether the price is for a one-time purchase or a recurring (subscription) purchase."""
  type: Type12
  """The unit amount in %s to be charged, represented as a whole integer if possible. Only set if `billing_scheme=per_unit`."""
  unitAmount: Int
  """The unit amount in %s to be charged, represented as a decimal string with at most 12 decimal places. Only set if `billing_scheme=per_unit`."""
  unitAmountDecimal: String
}

type InvoiceTaxAmount {
  """The amount, in %s, of the tax."""
  amount: Int!
  """Whether this tax amount is inclusive or exclusive."""
  inclusive: Boolean!
  """The tax rate that was applied to get this tax amount."""
  taxRate: JSON!
}

enum Type33 {
  INVOICEITEM
  SUBSCRIPTION
}

enum Object49 {
  INVOICE
}

type InvoicesPaymentSettings {
  """Payment-method-specific configuration to provide to the invoice’s PaymentIntent."""
  paymentMethodOptions: PaymentMethodOptions6
  """The list of payment method types (e.g. card) to provide to the invoice’s PaymentIntent. If not set, Stripe attempts to automatically determine the types to use by looking at the invoice’s default payment method, the subscription’s default payment method, the customer’s default payment method, and your [invoice template settings](https://dashboard.stripe.com/settings/billing/invoice)."""
  paymentMethodTypes: [PaymentMethodTypes7ListItem]
}

"""Payment-method-specific configuration to provide to the invoice’s PaymentIntent."""
type PaymentMethodOptions6 {
  """If paying by `bancontact`, this sub-hash contains details about the Bancontact payment method options to pass to the invoice’s PaymentIntent."""
  bancontact: Bancontact6
  """If paying by `card`, this sub-hash contains details about the Card payment method options to pass to the invoice’s PaymentIntent."""
  card: Card16
}

"""If paying by `bancontact`, this sub-hash contains details about the Bancontact payment method options to pass to the invoice’s PaymentIntent."""
type Bancontact6 {
  """Preferred language of the Bancontact authorization page that the customer is redirected to."""
  preferredLanguage: PreferredLanguage5
}

"""If paying by `card`, this sub-hash contains details about the Card payment method options to pass to the invoice’s PaymentIntent."""
type Card16 {
  """We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine."""
  requestThreeDSecure: RequestThreeDSecure
}

enum PaymentMethodTypes7ListItem {
  ACH_CREDIT_TRANSFER
  ACH_DEBIT
  AU_BECS_DEBIT
  BACS_DEBIT
  BANCONTACT
  BOLETO
  CARD
  FPX
  GIROPAY
  IDEAL
  SEPA_DEBIT
  SOFORT
  WECHAT_PAY
}

enum Status25 {
  DELETED
  DRAFT
  OPEN
  PAID
  UNCOLLECTIBLE
  VOID
}

type InvoicesStatusTransitions {
  """The time that the invoice draft was finalized."""
  finalizedAt: Int
  """The time that the invoice was marked uncollectible."""
  markedUncollectibleAt: Int
  """The time that the invoice was paid."""
  paidAt: Int
  """The time that the invoice was voided."""
  voidedAt: Int
}

type InvoiceThresholdReason {
  """The total invoice amount threshold boundary if it triggered the threshold invoice."""
  amountGte: Int
  """Indicates which line items triggered a threshold invoice."""
  itemReasons: [InvoiceItemThresholdReason]!
}

type InvoiceItemThresholdReason {
  """The IDs of the line items that triggered the threshold invoice."""
  lineItemIds: [String]!
  """The quantity threshold boundary that applied to the given line item."""
  usageGte: Int!
}

"""The account (if any) the payment will be attributed to for tax reporting, and where funds from the payment will be transferred to for the invoice."""
type TransferData8 {
  """The amount in %s that will be transferred to the destination account when the invoice is paid. By default, the entire amount is transferred to the destination."""
  amount: Int
  """The account where funds from the payment will be transferred to upon payment success."""
  destination: JSON
}

enum CollectionMethod9 {
  CHARGE_AUTOMATICALLY
  SEND_INVOICE
}

enum Status56 {
  DRAFT
  OPEN
  PAID
  UNCOLLECTIBLE
  VOID
}

type InvoiceLinesList2 {
  """Details about each object."""
  data: [LineItem]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

input AutomaticTax6Input {
  enabled: Boolean!
}

input CustomerDetails2Input {
  address: JSON
  shipping: JSON
  tax: TaxParamInput
  taxExempt: TaxExempt4
  taxIds: [TaxIds2ListItemInput]
}

input TaxParamInput {
  ipAddress: JSON
}

enum TaxExempt4 {
  _
  EXEMPT
  NONE
  REVERSE
}

input TaxIds2ListItemInput {
  type: Type20!
  value: String!
}

enum Type20 {
  AE_TRN
  AU_ABN
  BR_CNPJ
  BR_CPF
  CA_BN
  CA_GST_HST
  CA_PST_BC
  CA_PST_MB
  CA_PST_SK
  CA_QST
  CH_VAT
  CL_TIN
  ES_CIF
  EU_VAT
  GB_VAT
  HK_BR
  ID_NPWP
  IL_VAT
  IN_GST
  JP_CN
  JP_RN
  KR_BRN
  LI_UID
  MX_RFC
  MY_FRP
  MY_ITN
  MY_SST
  NO_VAT
  NZ_GST
  RU_INN
  RU_KPP
  SA_VAT
  SG_GST
  SG_UEN
  TH_VAT
  TW_VAT
  US_EIN
  ZA_VAT
}

input InvoiceItemsListItemInput {
  amount: Int
  currency: String
  description: String
  discountable: Boolean
  discounts: JSON
  invoiceitem: String
  metadata: JSON
  period: Period3Input
  price: String
  priceData: OneTimePriceDataInput
  quantity: Int
  taxRates: JSON
  unitAmount: Int
  unitAmountDecimal: String
}

input Period3Input {
  end: Int!
  start: Int!
}

input OneTimePriceDataInput {
  currency: String!
  product: String!
  taxBehavior: TaxBehavior2
  unitAmount: Int
  unitAmountDecimal: String
}

enum TaxBehavior2 {
  EXCLUSIVE
  INCLUSIVE
  UNSPECIFIED
}

input SubscriptionItems2ListItemInput {
  billingThresholds: JSON
  clearUsage: Boolean
  deleted: Boolean
  id: String
  metadata: JSON
  price: String
  priceData: RecurringPriceDataInput
  quantity: Int
  taxRates: JSON
}

input RecurringPriceDataInput {
  currency: String!
  product: String!
  recurring: RecurringAdhocInput!
  taxBehavior: TaxBehavior2
  unitAmount: Int
  unitAmountDecimal: String
}

input RecurringAdhocInput {
  interval: Interval5!
  intervalCount: Int
}

enum Interval5 {
  DAY
  MONTH
  WEEK
  YEAR
}

enum SubscriptionProrationBehavior {
  ALWAYS_INVOICE
  CREATE_PRORATIONS
  NONE
}

type RadarIssuerFraudRecordList {
  data: [IssuerFraudRecord]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

"""
This resource has been renamed to [Early Fraud
Warning](#early_fraud_warning_object) and will be removed in a future API
version.
"""
type IssuerFraudRecord {
  """An IFR is actionable if it has not received a dispute and has not been fully refunded. You may wish to proactively refund a charge that receives an IFR, in order to avoid receiving a dispute later."""
  actionable: Boolean!
  """ID of the charge this issuer fraud record is for, optionally expanded."""
  charge: JSON!
  """Time at which the object was created. Measured in seconds since the Unix epoch."""
  created: Int!
  """The type of fraud labelled by the issuer. One of `card_never_received`, `fraudulent_card_application`, `made_with_counterfeit_card`, `made_with_lost_card`, `made_with_stolen_card`, `misc`, `unauthorized_use_of_card`."""
  fraudType: String!
  """If true, the associated charge is subject to [liability shift](https://stripe.com/docs/payments/3d-secure#disputed-payments)."""
  hasLiabilityShift: Boolean!
  """Unique identifier for the object."""
  id: String!
  """Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."""
  livemode: Boolean!
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object50!
  """The timestamp at which the card issuer posted the issuer fraud record."""
  postDate: Int!
}

enum Object50 {
  ISSUER_FRAUD_RECORD
}

type V1IssuingAuthorizations2 {
  data: [IssuingAuthorization]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

"""
When an [issued card](https://stripe.com/docs/issuing) is used to make a purchase, an Issuing `Authorization`
object is created. [Authorizations](https://stripe.com/docs/issuing/purchases/authorizations) must be approved for the
purchase to be completed successfully.

Related guide: [Issued Card Authorizations](https://stripe.com/docs/issuing/purchases/authorizations).
"""
type IssuingAuthorization {
  """The total amount that was authorized or rejected. This amount is in the card's currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal)."""
  amount: Int!
  """Detailed breakdown of amount components. These amounts are denominated in `currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal)."""
  amountDetails: AmountDetails
  """Whether the authorization has been approved."""
  approved: Boolean!
  """How the card details were provided."""
  authorizationMethod: AuthorizationMethod!
  """List of balance transactions associated with this authorization."""
  balanceTransactions: [BalanceTransaction3]!
  """You can [create physical or virtual cards](https://stripe.com/docs/issuing/cards) that are issued to cardholders."""
  card: IssuingCard2!
  """The cardholder to whom this authorization belongs."""
  cardholder: JSON
  """Time at which the object was created. Measured in seconds since the Unix epoch."""
  created: Int!
  """Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."""
  currency: String!
  """Unique identifier for the object."""
  id: String!
  """Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."""
  livemode: Boolean!
  """The total amount that was authorized or rejected. This amount is in the `merchant_currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal)."""
  merchantAmount: Int!
  """The currency that was presented to the cardholder for the authorization. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."""
  merchantCurrency: String!
  merchantData: IssuingAuthorizationMerchantData!
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."""
  metadata: JSON!
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object53!
  """The pending authorization request. This field will only be non-null during an `issuing_authorization.request` webhook."""
  pendingRequest: PendingRequest
  """History of every time `pending_request` was approved/denied, either by you directly or by Stripe (e.g. based on your `spending_controls`). If the merchant changes the authorization by performing an [incremental authorization](https://stripe.com/docs/issuing/purchases/authorizations), you can look at this field to see the previous requests for the authorization."""
  requestHistory: [IssuingAuthorizationRequest]!
  """The current status of the authorization in its lifecycle."""
  status: Status29!
  """List of [transactions](https://stripe.com/docs/api/issuing/transactions) associated with this authorization."""
  transactions: [IssuingTransaction]!
  verificationData: IssuingAuthorizationVerificationData!
  """The digital wallet used for this authorization. One of `apple_pay`, `google_pay`, or `samsung_pay`."""
  wallet: String
}

"""Detailed breakdown of amount components. These amounts are denominated in `currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal)."""
type AmountDetails {
  """The fee charged by the ATM for the cash withdrawal."""
  atmFee: Int
}

enum AuthorizationMethod {
  CHIP
  CONTACTLESS
  KEYED_IN
  ONLINE
  SWIPE
}

"""You can [create physical or virtual cards](https://stripe.com/docs/issuing/cards) that are issued to cardholders."""
type IssuingCard2 {
  """The brand of the card."""
  brand: String!
  """The reason why the card was canceled."""
  cancellationReason: CancellationReason3
  """
  An Issuing `Cardholder` object represents an individual or business entity who is [issued](https://stripe.com/docs/issuing) cards.
  
  Related guide: [How to create a Cardholder](https://stripe.com/docs/issuing/cards#create-cardholder)
  """
  cardholder: IssuingCardholder!
  """Time at which the object was created. Measured in seconds since the Unix epoch."""
  created: Int!
  """Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."""
  currency: String!
  """The card's CVC. For security reasons, this is only available for virtual cards, and will be omitted unless you explicitly request it with [the `expand` parameter](https://stripe.com/docs/api/expanding_objects). Additionally, it's only available via the ["Retrieve a card" endpoint](https://stripe.com/docs/api/issuing/cards/retrieve), not via "List all cards" or any other endpoint."""
  cvc: String
  """The expiration month of the card."""
  expMonth: Int!
  """The expiration year of the card."""
  expYear: Int!
  """Unique identifier for the object."""
  id: String!
  """The last 4 digits of the card number."""
  last4: String!
  """Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."""
  livemode: Boolean!
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."""
  metadata: JSON!
  """The full unredacted card number. For security reasons, this is only available for virtual cards, and will be omitted unless you explicitly request it with [the `expand` parameter](https://stripe.com/docs/api/expanding_objects). Additionally, it's only available via the ["Retrieve a card" endpoint](https://stripe.com/docs/api/issuing/cards/retrieve), not via "List all cards" or any other endpoint."""
  number: String
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object52!
  """The latest card that replaces this card, if any."""
  replacedBy: JSON
  """The card this card replaces, if any."""
  replacementFor: JSON
  """The reason why the previous card needed to be replaced."""
  replacementReason: ReplacementReason
  """Where and how the card will be shipped."""
  shipping: Shipping10
  spendingControls: IssuingCardAuthorizationControls!
  """Whether authorizations can be approved on this card."""
  status: Status28!
  """The type of the card."""
  type: Type36!
}

enum CancellationReason3 {
  LOST
  STOLEN
}

"""
An Issuing `Cardholder` object represents an individual or business entity who is [issued](https://stripe.com/docs/issuing) cards.

Related guide: [How to create a Cardholder](https://stripe.com/docs/issuing/cards#create-cardholder)
"""
type IssuingCardholder {
  billing: IssuingCardholderAddress!
  """Additional information about a `company` cardholder."""
  company: Company3
  """Time at which the object was created. Measured in seconds since the Unix epoch."""
  created: Int!
  """The cardholder's email address."""
  email: String
  """Unique identifier for the object."""
  id: String!
  """Additional information about an `individual` cardholder."""
  individual: Individual3
  """Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."""
  livemode: Boolean!
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."""
  metadata: JSON!
  """The cardholder's name. This will be printed on cards issued to them."""
  name: String!
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object51!
  """The cardholder's phone number."""
  phoneNumber: String
  requirements: IssuingCardholderRequirements!
  """Rules that control spending across this cardholder's cards. Refer to our [documentation](https://stripe.com/docs/issuing/controls/spending-controls) for more details."""
  spendingControls: SpendingControls
  """Specifies whether to permit authorizations on this cardholder's cards."""
  status: Status26!
  """One of `individual` or `company`."""
  type: Type34!
}

type IssuingCardholderAddress {
  address: Address!
}

"""Additional information about a `company` cardholder."""
type Company3 {
  """Whether the company's business ID number was provided."""
  taxIdProvided: Boolean
}

"""Additional information about an `individual` cardholder."""
type Individual3 {
  """The date of birth of this cardholder."""
  dob: Dob11
  """The first name of this cardholder."""
  firstName: String
  """The last name of this cardholder."""
  lastName: String
  """Government-issued ID document for this cardholder."""
  verification: Verification4
}

"""The date of birth of this cardholder."""
type Dob11 {
  """The day of birth, between 1 and 31."""
  day: Int
  """The month of birth, between 1 and 12."""
  month: Int
  """The four-digit year of birth."""
  year: Int
}

"""Government-issued ID document for this cardholder."""
type Verification4 {
  """An identifying document, either a passport or local ID card."""
  document: Document5
}

"""An identifying document, either a passport or local ID card."""
type Document5 {
  """The back of a document returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `identity_document`."""
  back: JSON
  """The front of a document returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `identity_document`."""
  front: JSON
}

enum Object51 {
  ISSUING_CARDHOLDER
}

type IssuingCardholderRequirements {
  """If `disabled_reason` is present, all cards will decline authorizations with `cardholder_verification_required` reason."""
  disabledReason: DisabledReason4
  """Array of fields that need to be collected in order to verify and re-enable the cardholder."""
  pastDue: [PastDue5ListItem]
}

enum DisabledReason4 {
  LISTED
  REJECTED_LISTED
  UNDER_REVIEW
}

enum PastDue5ListItem {
  COMPANY_TAX_ID
  INDIVIDUAL_DOB_DAY
  INDIVIDUAL_DOB_MONTH
  INDIVIDUAL_DOB_YEAR
  INDIVIDUAL_FIRST_NAME
  INDIVIDUAL_LAST_NAME
  INDIVIDUAL_VERIFICATION_DOCUMENT
}

"""Rules that control spending across this cardholder's cards. Refer to our [documentation](https://stripe.com/docs/issuing/controls/spending-controls) for more details."""
type SpendingControls {
  """Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations to allow. All other categories will be blocked. Cannot be set with `blocked_categories`."""
  allowedCategories: [AllowedCategoriesListItem]
  """Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations to decline. All other categories will be allowed. Cannot be set with `allowed_categories`."""
  blockedCategories: [BlockedCategoriesListItem]
  """Limit spending with amount-based rules that apply across this cardholder's cards."""
  spendingLimits: [IssuingCardholderSpendingLimit]
  """Currency of the amounts within `spending_limits`."""
  spendingLimitsCurrency: String
}

enum AllowedCategoriesListItem {
  AC_REFRIGERATION_REPAIR
  ACCOUNTING_BOOKKEEPING_SERVICES
  ADVERTISING_SERVICES
  AGRICULTURAL_COOPERATIVE
  AIRLINES_AIR_CARRIERS
  AIRPORTS_FLYING_FIELDS
  AMBULANCE_SERVICES
  AMUSEMENT_PARKS_CARNIVALS
  ANTIQUE_REPRODUCTIONS
  ANTIQUE_SHOPS
  AQUARIUMS
  ARCHITECTURAL_SURVEYING_SERVICES
  ART_DEALERS_AND_GALLERIES
  ARTISTS_SUPPLY_AND_CRAFT_SHOPS
  AUTO_AND_HOME_SUPPLY_STORES
  AUTO_BODY_REPAIR_SHOPS
  AUTO_PAINT_SHOPS
  AUTO_SERVICE_SHOPS
  AUTOMATED_CASH_DISBURSE
  AUTOMATED_FUEL_DISPENSERS
  AUTOMOBILE_ASSOCIATIONS
  AUTOMOTIVE_PARTS_AND_ACCESSORIES_STORES
  AUTOMOTIVE_TIRE_STORES
  BAIL_AND_BOND_PAYMENTS
  BAKERIES
  BANDS_ORCHESTRAS
  BARBER_AND_BEAUTY_SHOPS
  BETTING_CASINO_GAMBLING
  BICYCLE_SHOPS
  BILLIARD_POOL_ESTABLISHMENTS
  BOAT_DEALERS
  BOAT_RENTALS_AND_LEASES
  BOOK_STORES
  BOOKS_PERIODICALS_AND_NEWSPAPERS
  BOWLING_ALLEYS
  BUS_LINES
  BUSINESS_SECRETARIAL_SCHOOLS
  BUYING_SHOPPING_SERVICES
  CABLE_SATELLITE_AND_OTHER_PAY_TELEVISION_AND_RADIO
  CAMERA_AND_PHOTOGRAPHIC_SUPPLY_STORES
  CANDY_NUT_AND_CONFECTIONERY_STORES
  CAR_AND_TRUCK_DEALERS_NEW_USED
  CAR_AND_TRUCK_DEALERS_USED_ONLY
  CAR_RENTAL_AGENCIES
  CAR_WASHES
  CARPENTRY_SERVICES
  CARPET_UPHOLSTERY_CLEANING
  CATERERS
  CHARITABLE_AND_SOCIAL_SERVICE_ORGANIZATIONS_FUNDRAISING
  CHEMICALS_AND_ALLIED_PRODUCTS
  CHILD_CARE_SERVICES
  CHILDRENS_AND_INFANTS_WEAR_STORES
  CHIROPODISTS_PODIATRISTS
  CHIROPRACTORS
  CIGAR_STORES_AND_STANDS
  CIVIC_SOCIAL_FRATERNAL_ASSOCIATIONS
  CLEANING_AND_MAINTENANCE
  CLOTHING_RENTAL
  COLLEGES_UNIVERSITIES
  COMMERCIAL_EQUIPMENT
  COMMERCIAL_FOOTWEAR
  COMMERCIAL_PHOTOGRAPHY_ART_AND_GRAPHICS
  COMMUTER_TRANSPORT_AND_FERRIES
  COMPUTER_NETWORK_SERVICES
  COMPUTER_PROGRAMMING
  COMPUTER_REPAIR
  COMPUTER_SOFTWARE_STORES
  COMPUTERS_PERIPHERALS_AND_SOFTWARE
  CONCRETE_WORK_SERVICES
  CONSTRUCTION_MATERIALS
  CONSULTING_PUBLIC_RELATIONS
  CORRESPONDENCE_SCHOOLS
  COSMETIC_STORES
  COUNSELING_SERVICES
  COUNTRY_CLUBS
  COURIER_SERVICES
  COURT_COSTS
  CREDIT_REPORTING_AGENCIES
  CRUISE_LINES
  DAIRY_PRODUCTS_STORES
  DANCE_HALL_STUDIOS_SCHOOLS
  DATING_ESCORT_SERVICES
  DENTISTS_ORTHODONTISTS
  DEPARTMENT_STORES
  DETECTIVE_AGENCIES
  DIGITAL_GOODS_APPLICATIONS
  DIGITAL_GOODS_GAMES
  DIGITAL_GOODS_LARGE_VOLUME
  DIGITAL_GOODS_MEDIA
  DIRECT_MARKETING_CATALOG_MERCHANT
  DIRECT_MARKETING_COMBINATION_CATALOG_AND_RETAIL_MERCHANT
  DIRECT_MARKETING_INBOUND_TELEMARKETING
  DIRECT_MARKETING_INSURANCE_SERVICES
  DIRECT_MARKETING_OTHER
  DIRECT_MARKETING_OUTBOUND_TELEMARKETING
  DIRECT_MARKETING_SUBSCRIPTION
  DIRECT_MARKETING_TRAVEL
  DISCOUNT_STORES
  DOCTORS
  DOOR_TO_DOOR_SALES
  DRAPERY_WINDOW_COVERING_AND_UPHOLSTERY_STORES
  DRINKING_PLACES
  DRUG_STORES_AND_PHARMACIES
  DRUGS_DRUG_PROPRIETARIES_AND_DRUGGIST_SUNDRIES
  DRY_CLEANERS
  DURABLE_GOODS
  DUTY_FREE_STORES
  EATING_PLACES_RESTAURANTS
  EDUCATIONAL_SERVICES
  ELECTRIC_RAZOR_STORES
  ELECTRICAL_PARTS_AND_EQUIPMENT
  ELECTRICAL_SERVICES
  ELECTRONICS_REPAIR_SHOPS
  ELECTRONICS_STORES
  ELEMENTARY_SECONDARY_SCHOOLS
  EMPLOYMENT_TEMP_AGENCIES
  EQUIPMENT_RENTAL
  EXTERMINATING_SERVICES
  FAMILY_CLOTHING_STORES
  FAST_FOOD_RESTAURANTS
  FINANCIAL_INSTITUTIONS
  FINES_GOVERNMENT_ADMINISTRATIVE_ENTITIES
  FIREPLACE_FIREPLACE_SCREENS_AND_ACCESSORIES_STORES
  FLOOR_COVERING_STORES
  FLORISTS
  FLORISTS_SUPPLIES_NURSERY_STOCK_AND_FLOWERS
  FREEZER_AND_LOCKER_MEAT_PROVISIONERS
  FUEL_DEALERS_NON_AUTOMOTIVE
  FUNERAL_SERVICES_CREMATORIES
  FURNITURE_HOME_FURNISHINGS_AND_EQUIPMENT_STORES_EXCEPT_APPLIANCES
  FURNITURE_REPAIR_REFINISHING
  FURRIERS_AND_FUR_SHOPS
  GENERAL_SERVICES
  GIFT_CARD_NOVELTY_AND_SOUVENIR_SHOPS
  GLASS_PAINT_AND_WALLPAPER_STORES
  GLASSWARE_CRYSTAL_STORES
  GOLF_COURSES_PUBLIC
  GOVERNMENT_SERVICES
  GROCERY_STORES_SUPERMARKETS
  HARDWARE_EQUIPMENT_AND_SUPPLIES
  HARDWARE_STORES
  HEALTH_AND_BEAUTY_SPAS
  HEARING_AIDS_SALES_AND_SUPPLIES
  HEATING_PLUMBING_A_C
  HOBBY_TOY_AND_GAME_SHOPS
  HOME_SUPPLY_WAREHOUSE_STORES
  HOSPITALS
  HOTELS_MOTELS_AND_RESORTS
  HOUSEHOLD_APPLIANCE_STORES
  INDUSTRIAL_SUPPLIES
  INFORMATION_RETRIEVAL_SERVICES
  INSURANCE_DEFAULT
  INSURANCE_UNDERWRITING_PREMIUMS
  INTRA_COMPANY_PURCHASES
  JEWELRY_STORES_WATCHES_CLOCKS_AND_SILVERWARE_STORES
  LANDSCAPING_SERVICES
  LAUNDRIES
  LAUNDRY_CLEANING_SERVICES
  LEGAL_SERVICES_ATTORNEYS
  LUGGAGE_AND_LEATHER_GOODS_STORES
  LUMBER_BUILDING_MATERIALS_STORES
  MANUAL_CASH_DISBURSE
  MARINAS_SERVICE_AND_SUPPLIES
  MASONRY_STONEWORK_AND_PLASTER
  MASSAGE_PARLORS
  MEDICAL_AND_DENTAL_LABS
  MEDICAL_DENTAL_OPHTHALMIC_AND_HOSPITAL_EQUIPMENT_AND_SUPPLIES
  MEDICAL_SERVICES
  MEMBERSHIP_ORGANIZATIONS
  MENS_AND_BOYS_CLOTHING_AND_ACCESSORIES_STORES
  MENS_WOMENS_CLOTHING_STORES
  METAL_SERVICE_CENTERS
  MISCELLANEOUS
  MISCELLANEOUS_APPAREL_AND_ACCESSORY_SHOPS
  MISCELLANEOUS_AUTO_DEALERS
  MISCELLANEOUS_BUSINESS_SERVICES
  MISCELLANEOUS_FOOD_STORES
  MISCELLANEOUS_GENERAL_MERCHANDISE
  MISCELLANEOUS_GENERAL_SERVICES
  MISCELLANEOUS_HOME_FURNISHING_SPECIALTY_STORES
  MISCELLANEOUS_PUBLISHING_AND_PRINTING
  MISCELLANEOUS_RECREATION_SERVICES
  MISCELLANEOUS_REPAIR_SHOPS
  MISCELLANEOUS_SPECIALTY_RETAIL
  MOBILE_HOME_DEALERS
  MOTION_PICTURE_THEATERS
  MOTOR_FREIGHT_CARRIERS_AND_TRUCKING
  MOTOR_HOMES_DEALERS
  MOTOR_VEHICLE_SUPPLIES_AND_NEW_PARTS
  MOTORCYCLE_SHOPS_AND_DEALERS
  MOTORCYCLE_SHOPS_DEALERS
  MUSIC_STORES_MUSICAL_INSTRUMENTS_PIANOS_AND_SHEET_MUSIC
  NEWS_DEALERS_AND_NEWSSTANDS
  NON_FI_MONEY_ORDERS
  NON_FI_STORED_VALUE_CARD_PURCHASE_LOAD
  NONDURABLE_GOODS
  NURSERIES_LAWN_AND_GARDEN_SUPPLY_STORES
  NURSING_PERSONAL_CARE
  OFFICE_AND_COMMERCIAL_FURNITURE
  OPTICIANS_EYEGLASSES
  OPTOMETRISTS_OPHTHALMOLOGIST
  ORTHOPEDIC_GOODS_PROSTHETIC_DEVICES
  OSTEOPATHS
  PACKAGE_STORES_BEER_WINE_AND_LIQUOR
  PAINTS_VARNISHES_AND_SUPPLIES
  PARKING_LOTS_GARAGES
  PASSENGER_RAILWAYS
  PAWN_SHOPS
  PET_SHOPS_PET_FOOD_AND_SUPPLIES
  PETROLEUM_AND_PETROLEUM_PRODUCTS
  PHOTO_DEVELOPING
  PHOTOGRAPHIC_PHOTOCOPY_MICROFILM_EQUIPMENT_AND_SUPPLIES
  PHOTOGRAPHIC_STUDIOS
  PICTURE_VIDEO_PRODUCTION
  PIECE_GOODS_NOTIONS_AND_OTHER_DRY_GOODS
  PLUMBING_HEATING_EQUIPMENT_AND_SUPPLIES
  POLITICAL_ORGANIZATIONS
  POSTAL_SERVICES_GOVERNMENT_ONLY
  PRECIOUS_STONES_AND_METALS_WATCHES_AND_JEWELRY
  PROFESSIONAL_SERVICES
  PUBLIC_WAREHOUSING_AND_STORAGE
  QUICK_COPY_REPRO_AND_BLUEPRINT
  RAILROADS
  REAL_ESTATE_AGENTS_AND_MANAGERS_RENTALS
  RECORD_STORES
  RECREATIONAL_VEHICLE_RENTALS
  RELIGIOUS_GOODS_STORES
  RELIGIOUS_ORGANIZATIONS
  ROOFING_SIDING_SHEET_METAL
  SECRETARIAL_SUPPORT_SERVICES
  SECURITY_BROKERS_DEALERS
  SERVICE_STATIONS
  SEWING_NEEDLEWORK_FABRIC_AND_PIECE_GOODS_STORES
  SHOE_REPAIR_HAT_CLEANING
  SHOE_STORES
  SMALL_APPLIANCE_REPAIR
  SNOWMOBILE_DEALERS
  SPECIAL_TRADE_SERVICES
  SPECIALTY_CLEANING
  SPORTING_GOODS_STORES
  SPORTING_RECREATION_CAMPS
  SPORTS_AND_RIDING_APPAREL_STORES
  SPORTS_CLUBS_FIELDS
  STAMP_AND_COIN_STORES
  STATIONARY_OFFICE_SUPPLIES_PRINTING_AND_WRITING_PAPER
  STATIONERY_STORES_OFFICE_AND_SCHOOL_SUPPLY_STORES
  SWIMMING_POOLS_SALES
  T_UI_TRAVEL_GERMANY
  TAILORS_ALTERATIONS
  TAX_PAYMENTS_GOVERNMENT_AGENCIES
  TAX_PREPARATION_SERVICES
  TAXICABS_LIMOUSINES
  TELECOMMUNICATION_EQUIPMENT_AND_TELEPHONE_SALES
  TELECOMMUNICATION_SERVICES
  TELEGRAPH_SERVICES
  TENT_AND_AWNING_SHOPS
  TESTING_LABORATORIES
  THEATRICAL_TICKET_AGENCIES
  TIMESHARES
  TIRE_RETREADING_AND_REPAIR
  TOLLS_BRIDGE_FEES
  TOURIST_ATTRACTIONS_AND_EXHIBITS
  TOWING_SERVICES
  TRAILER_PARKS_CAMPGROUNDS
  TRANSPORTATION_SERVICES
  TRAVEL_AGENCIES_TOUR_OPERATORS
  TRUCK_STOP_ITERATION
  TRUCK_UTILITY_TRAILER_RENTALS
  TYPESETTING_PLATE_MAKING_AND_RELATED_SERVICES
  TYPEWRITER_STORES
  U_S_FEDERAL_GOVERNMENT_AGENCIES_OR_DEPARTMENTS
  UNIFORMS_COMMERCIAL_CLOTHING
  USED_MERCHANDISE_AND_SECONDHAND_STORES
  UTILITIES
  VARIETY_STORES
  VETERINARY_SERVICES
  VIDEO_AMUSEMENT_GAME_SUPPLIES
  VIDEO_GAME_ARCADES
  VIDEO_TAPE_RENTAL_STORES
  VOCATIONAL_TRADE_SCHOOLS
  WATCH_JEWELRY_REPAIR
  WELDING_REPAIR
  WHOLESALE_CLUBS
  WIG_AND_TOUPEE_STORES
  WIRES_MONEY_ORDERS
  WOMENS_ACCESSORY_AND_SPECIALTY_SHOPS
  WOMENS_READY_TO_WEAR_STORES
  WRECKING_AND_SALVAGE_YARDS
}

enum BlockedCategoriesListItem {
  AC_REFRIGERATION_REPAIR
  ACCOUNTING_BOOKKEEPING_SERVICES
  ADVERTISING_SERVICES
  AGRICULTURAL_COOPERATIVE
  AIRLINES_AIR_CARRIERS
  AIRPORTS_FLYING_FIELDS
  AMBULANCE_SERVICES
  AMUSEMENT_PARKS_CARNIVALS
  ANTIQUE_REPRODUCTIONS
  ANTIQUE_SHOPS
  AQUARIUMS
  ARCHITECTURAL_SURVEYING_SERVICES
  ART_DEALERS_AND_GALLERIES
  ARTISTS_SUPPLY_AND_CRAFT_SHOPS
  AUTO_AND_HOME_SUPPLY_STORES
  AUTO_BODY_REPAIR_SHOPS
  AUTO_PAINT_SHOPS
  AUTO_SERVICE_SHOPS
  AUTOMATED_CASH_DISBURSE
  AUTOMATED_FUEL_DISPENSERS
  AUTOMOBILE_ASSOCIATIONS
  AUTOMOTIVE_PARTS_AND_ACCESSORIES_STORES
  AUTOMOTIVE_TIRE_STORES
  BAIL_AND_BOND_PAYMENTS
  BAKERIES
  BANDS_ORCHESTRAS
  BARBER_AND_BEAUTY_SHOPS
  BETTING_CASINO_GAMBLING
  BICYCLE_SHOPS
  BILLIARD_POOL_ESTABLISHMENTS
  BOAT_DEALERS
  BOAT_RENTALS_AND_LEASES
  BOOK_STORES
  BOOKS_PERIODICALS_AND_NEWSPAPERS
  BOWLING_ALLEYS
  BUS_LINES
  BUSINESS_SECRETARIAL_SCHOOLS
  BUYING_SHOPPING_SERVICES
  CABLE_SATELLITE_AND_OTHER_PAY_TELEVISION_AND_RADIO
  CAMERA_AND_PHOTOGRAPHIC_SUPPLY_STORES
  CANDY_NUT_AND_CONFECTIONERY_STORES
  CAR_AND_TRUCK_DEALERS_NEW_USED
  CAR_AND_TRUCK_DEALERS_USED_ONLY
  CAR_RENTAL_AGENCIES
  CAR_WASHES
  CARPENTRY_SERVICES
  CARPET_UPHOLSTERY_CLEANING
  CATERERS
  CHARITABLE_AND_SOCIAL_SERVICE_ORGANIZATIONS_FUNDRAISING
  CHEMICALS_AND_ALLIED_PRODUCTS
  CHILD_CARE_SERVICES
  CHILDRENS_AND_INFANTS_WEAR_STORES
  CHIROPODISTS_PODIATRISTS
  CHIROPRACTORS
  CIGAR_STORES_AND_STANDS
  CIVIC_SOCIAL_FRATERNAL_ASSOCIATIONS
  CLEANING_AND_MAINTENANCE
  CLOTHING_RENTAL
  COLLEGES_UNIVERSITIES
  COMMERCIAL_EQUIPMENT
  COMMERCIAL_FOOTWEAR
  COMMERCIAL_PHOTOGRAPHY_ART_AND_GRAPHICS
  COMMUTER_TRANSPORT_AND_FERRIES
  COMPUTER_NETWORK_SERVICES
  COMPUTER_PROGRAMMING
  COMPUTER_REPAIR
  COMPUTER_SOFTWARE_STORES
  COMPUTERS_PERIPHERALS_AND_SOFTWARE
  CONCRETE_WORK_SERVICES
  CONSTRUCTION_MATERIALS
  CONSULTING_PUBLIC_RELATIONS
  CORRESPONDENCE_SCHOOLS
  COSMETIC_STORES
  COUNSELING_SERVICES
  COUNTRY_CLUBS
  COURIER_SERVICES
  COURT_COSTS
  CREDIT_REPORTING_AGENCIES
  CRUISE_LINES
  DAIRY_PRODUCTS_STORES
  DANCE_HALL_STUDIOS_SCHOOLS
  DATING_ESCORT_SERVICES
  DENTISTS_ORTHODONTISTS
  DEPARTMENT_STORES
  DETECTIVE_AGENCIES
  DIGITAL_GOODS_APPLICATIONS
  DIGITAL_GOODS_GAMES
  DIGITAL_GOODS_LARGE_VOLUME
  DIGITAL_GOODS_MEDIA
  DIRECT_MARKETING_CATALOG_MERCHANT
  DIRECT_MARKETING_COMBINATION_CATALOG_AND_RETAIL_MERCHANT
  DIRECT_MARKETING_INBOUND_TELEMARKETING
  DIRECT_MARKETING_INSURANCE_SERVICES
  DIRECT_MARKETING_OTHER
  DIRECT_MARKETING_OUTBOUND_TELEMARKETING
  DIRECT_MARKETING_SUBSCRIPTION
  DIRECT_MARKETING_TRAVEL
  DISCOUNT_STORES
  DOCTORS
  DOOR_TO_DOOR_SALES
  DRAPERY_WINDOW_COVERING_AND_UPHOLSTERY_STORES
  DRINKING_PLACES
  DRUG_STORES_AND_PHARMACIES
  DRUGS_DRUG_PROPRIETARIES_AND_DRUGGIST_SUNDRIES
  DRY_CLEANERS
  DURABLE_GOODS
  DUTY_FREE_STORES
  EATING_PLACES_RESTAURANTS
  EDUCATIONAL_SERVICES
  ELECTRIC_RAZOR_STORES
  ELECTRICAL_PARTS_AND_EQUIPMENT
  ELECTRICAL_SERVICES
  ELECTRONICS_REPAIR_SHOPS
  ELECTRONICS_STORES
  ELEMENTARY_SECONDARY_SCHOOLS
  EMPLOYMENT_TEMP_AGENCIES
  EQUIPMENT_RENTAL
  EXTERMINATING_SERVICES
  FAMILY_CLOTHING_STORES
  FAST_FOOD_RESTAURANTS
  FINANCIAL_INSTITUTIONS
  FINES_GOVERNMENT_ADMINISTRATIVE_ENTITIES
  FIREPLACE_FIREPLACE_SCREENS_AND_ACCESSORIES_STORES
  FLOOR_COVERING_STORES
  FLORISTS
  FLORISTS_SUPPLIES_NURSERY_STOCK_AND_FLOWERS
  FREEZER_AND_LOCKER_MEAT_PROVISIONERS
  FUEL_DEALERS_NON_AUTOMOTIVE
  FUNERAL_SERVICES_CREMATORIES
  FURNITURE_HOME_FURNISHINGS_AND_EQUIPMENT_STORES_EXCEPT_APPLIANCES
  FURNITURE_REPAIR_REFINISHING
  FURRIERS_AND_FUR_SHOPS
  GENERAL_SERVICES
  GIFT_CARD_NOVELTY_AND_SOUVENIR_SHOPS
  GLASS_PAINT_AND_WALLPAPER_STORES
  GLASSWARE_CRYSTAL_STORES
  GOLF_COURSES_PUBLIC
  GOVERNMENT_SERVICES
  GROCERY_STORES_SUPERMARKETS
  HARDWARE_EQUIPMENT_AND_SUPPLIES
  HARDWARE_STORES
  HEALTH_AND_BEAUTY_SPAS
  HEARING_AIDS_SALES_AND_SUPPLIES
  HEATING_PLUMBING_A_C
  HOBBY_TOY_AND_GAME_SHOPS
  HOME_SUPPLY_WAREHOUSE_STORES
  HOSPITALS
  HOTELS_MOTELS_AND_RESORTS
  HOUSEHOLD_APPLIANCE_STORES
  INDUSTRIAL_SUPPLIES
  INFORMATION_RETRIEVAL_SERVICES
  INSURANCE_DEFAULT
  INSURANCE_UNDERWRITING_PREMIUMS
  INTRA_COMPANY_PURCHASES
  JEWELRY_STORES_WATCHES_CLOCKS_AND_SILVERWARE_STORES
  LANDSCAPING_SERVICES
  LAUNDRIES
  LAUNDRY_CLEANING_SERVICES
  LEGAL_SERVICES_ATTORNEYS
  LUGGAGE_AND_LEATHER_GOODS_STORES
  LUMBER_BUILDING_MATERIALS_STORES
  MANUAL_CASH_DISBURSE
  MARINAS_SERVICE_AND_SUPPLIES
  MASONRY_STONEWORK_AND_PLASTER
  MASSAGE_PARLORS
  MEDICAL_AND_DENTAL_LABS
  MEDICAL_DENTAL_OPHTHALMIC_AND_HOSPITAL_EQUIPMENT_AND_SUPPLIES
  MEDICAL_SERVICES
  MEMBERSHIP_ORGANIZATIONS
  MENS_AND_BOYS_CLOTHING_AND_ACCESSORIES_STORES
  MENS_WOMENS_CLOTHING_STORES
  METAL_SERVICE_CENTERS
  MISCELLANEOUS
  MISCELLANEOUS_APPAREL_AND_ACCESSORY_SHOPS
  MISCELLANEOUS_AUTO_DEALERS
  MISCELLANEOUS_BUSINESS_SERVICES
  MISCELLANEOUS_FOOD_STORES
  MISCELLANEOUS_GENERAL_MERCHANDISE
  MISCELLANEOUS_GENERAL_SERVICES
  MISCELLANEOUS_HOME_FURNISHING_SPECIALTY_STORES
  MISCELLANEOUS_PUBLISHING_AND_PRINTING
  MISCELLANEOUS_RECREATION_SERVICES
  MISCELLANEOUS_REPAIR_SHOPS
  MISCELLANEOUS_SPECIALTY_RETAIL
  MOBILE_HOME_DEALERS
  MOTION_PICTURE_THEATERS
  MOTOR_FREIGHT_CARRIERS_AND_TRUCKING
  MOTOR_HOMES_DEALERS
  MOTOR_VEHICLE_SUPPLIES_AND_NEW_PARTS
  MOTORCYCLE_SHOPS_AND_DEALERS
  MOTORCYCLE_SHOPS_DEALERS
  MUSIC_STORES_MUSICAL_INSTRUMENTS_PIANOS_AND_SHEET_MUSIC
  NEWS_DEALERS_AND_NEWSSTANDS
  NON_FI_MONEY_ORDERS
  NON_FI_STORED_VALUE_CARD_PURCHASE_LOAD
  NONDURABLE_GOODS
  NURSERIES_LAWN_AND_GARDEN_SUPPLY_STORES
  NURSING_PERSONAL_CARE
  OFFICE_AND_COMMERCIAL_FURNITURE
  OPTICIANS_EYEGLASSES
  OPTOMETRISTS_OPHTHALMOLOGIST
  ORTHOPEDIC_GOODS_PROSTHETIC_DEVICES
  OSTEOPATHS
  PACKAGE_STORES_BEER_WINE_AND_LIQUOR
  PAINTS_VARNISHES_AND_SUPPLIES
  PARKING_LOTS_GARAGES
  PASSENGER_RAILWAYS
  PAWN_SHOPS
  PET_SHOPS_PET_FOOD_AND_SUPPLIES
  PETROLEUM_AND_PETROLEUM_PRODUCTS
  PHOTO_DEVELOPING
  PHOTOGRAPHIC_PHOTOCOPY_MICROFILM_EQUIPMENT_AND_SUPPLIES
  PHOTOGRAPHIC_STUDIOS
  PICTURE_VIDEO_PRODUCTION
  PIECE_GOODS_NOTIONS_AND_OTHER_DRY_GOODS
  PLUMBING_HEATING_EQUIPMENT_AND_SUPPLIES
  POLITICAL_ORGANIZATIONS
  POSTAL_SERVICES_GOVERNMENT_ONLY
  PRECIOUS_STONES_AND_METALS_WATCHES_AND_JEWELRY
  PROFESSIONAL_SERVICES
  PUBLIC_WAREHOUSING_AND_STORAGE
  QUICK_COPY_REPRO_AND_BLUEPRINT
  RAILROADS
  REAL_ESTATE_AGENTS_AND_MANAGERS_RENTALS
  RECORD_STORES
  RECREATIONAL_VEHICLE_RENTALS
  RELIGIOUS_GOODS_STORES
  RELIGIOUS_ORGANIZATIONS
  ROOFING_SIDING_SHEET_METAL
  SECRETARIAL_SUPPORT_SERVICES
  SECURITY_BROKERS_DEALERS
  SERVICE_STATIONS
  SEWING_NEEDLEWORK_FABRIC_AND_PIECE_GOODS_STORES
  SHOE_REPAIR_HAT_CLEANING
  SHOE_STORES
  SMALL_APPLIANCE_REPAIR
  SNOWMOBILE_DEALERS
  SPECIAL_TRADE_SERVICES
  SPECIALTY_CLEANING
  SPORTING_GOODS_STORES
  SPORTING_RECREATION_CAMPS
  SPORTS_AND_RIDING_APPAREL_STORES
  SPORTS_CLUBS_FIELDS
  STAMP_AND_COIN_STORES
  STATIONARY_OFFICE_SUPPLIES_PRINTING_AND_WRITING_PAPER
  STATIONERY_STORES_OFFICE_AND_SCHOOL_SUPPLY_STORES
  SWIMMING_POOLS_SALES
  T_UI_TRAVEL_GERMANY
  TAILORS_ALTERATIONS
  TAX_PAYMENTS_GOVERNMENT_AGENCIES
  TAX_PREPARATION_SERVICES
  TAXICABS_LIMOUSINES
  TELECOMMUNICATION_EQUIPMENT_AND_TELEPHONE_SALES
  TELECOMMUNICATION_SERVICES
  TELEGRAPH_SERVICES
  TENT_AND_AWNING_SHOPS
  TESTING_LABORATORIES
  THEATRICAL_TICKET_AGENCIES
  TIMESHARES
  TIRE_RETREADING_AND_REPAIR
  TOLLS_BRIDGE_FEES
  TOURIST_ATTRACTIONS_AND_EXHIBITS
  TOWING_SERVICES
  TRAILER_PARKS_CAMPGROUNDS
  TRANSPORTATION_SERVICES
  TRAVEL_AGENCIES_TOUR_OPERATORS
  TRUCK_STOP_ITERATION
  TRUCK_UTILITY_TRAILER_RENTALS
  TYPESETTING_PLATE_MAKING_AND_RELATED_SERVICES
  TYPEWRITER_STORES
  U_S_FEDERAL_GOVERNMENT_AGENCIES_OR_DEPARTMENTS
  UNIFORMS_COMMERCIAL_CLOTHING
  USED_MERCHANDISE_AND_SECONDHAND_STORES
  UTILITIES
  VARIETY_STORES
  VETERINARY_SERVICES
  VIDEO_AMUSEMENT_GAME_SUPPLIES
  VIDEO_GAME_ARCADES
  VIDEO_TAPE_RENTAL_STORES
  VOCATIONAL_TRADE_SCHOOLS
  WATCH_JEWELRY_REPAIR
  WELDING_REPAIR
  WHOLESALE_CLUBS
  WIG_AND_TOUPEE_STORES
  WIRES_MONEY_ORDERS
  WOMENS_ACCESSORY_AND_SPECIALTY_SHOPS
  WOMENS_READY_TO_WEAR_STORES
  WRECKING_AND_SALVAGE_YARDS
}

type IssuingCardholderSpendingLimit {
  """Maximum amount allowed to spend per interval."""
  amount: Int!
  """Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) this limit applies to. Omitting this field will apply the limit to all categories."""
  categories: [CategoriesListItem]
  """Interval (or event) to which the amount applies."""
  interval: Interval7!
}

enum CategoriesListItem {
  AC_REFRIGERATION_REPAIR
  ACCOUNTING_BOOKKEEPING_SERVICES
  ADVERTISING_SERVICES
  AGRICULTURAL_COOPERATIVE
  AIRLINES_AIR_CARRIERS
  AIRPORTS_FLYING_FIELDS
  AMBULANCE_SERVICES
  AMUSEMENT_PARKS_CARNIVALS
  ANTIQUE_REPRODUCTIONS
  ANTIQUE_SHOPS
  AQUARIUMS
  ARCHITECTURAL_SURVEYING_SERVICES
  ART_DEALERS_AND_GALLERIES
  ARTISTS_SUPPLY_AND_CRAFT_SHOPS
  AUTO_AND_HOME_SUPPLY_STORES
  AUTO_BODY_REPAIR_SHOPS
  AUTO_PAINT_SHOPS
  AUTO_SERVICE_SHOPS
  AUTOMATED_CASH_DISBURSE
  AUTOMATED_FUEL_DISPENSERS
  AUTOMOBILE_ASSOCIATIONS
  AUTOMOTIVE_PARTS_AND_ACCESSORIES_STORES
  AUTOMOTIVE_TIRE_STORES
  BAIL_AND_BOND_PAYMENTS
  BAKERIES
  BANDS_ORCHESTRAS
  BARBER_AND_BEAUTY_SHOPS
  BETTING_CASINO_GAMBLING
  BICYCLE_SHOPS
  BILLIARD_POOL_ESTABLISHMENTS
  BOAT_DEALERS
  BOAT_RENTALS_AND_LEASES
  BOOK_STORES
  BOOKS_PERIODICALS_AND_NEWSPAPERS
  BOWLING_ALLEYS
  BUS_LINES
  BUSINESS_SECRETARIAL_SCHOOLS
  BUYING_SHOPPING_SERVICES
  CABLE_SATELLITE_AND_OTHER_PAY_TELEVISION_AND_RADIO
  CAMERA_AND_PHOTOGRAPHIC_SUPPLY_STORES
  CANDY_NUT_AND_CONFECTIONERY_STORES
  CAR_AND_TRUCK_DEALERS_NEW_USED
  CAR_AND_TRUCK_DEALERS_USED_ONLY
  CAR_RENTAL_AGENCIES
  CAR_WASHES
  CARPENTRY_SERVICES
  CARPET_UPHOLSTERY_CLEANING
  CATERERS
  CHARITABLE_AND_SOCIAL_SERVICE_ORGANIZATIONS_FUNDRAISING
  CHEMICALS_AND_ALLIED_PRODUCTS
  CHILD_CARE_SERVICES
  CHILDRENS_AND_INFANTS_WEAR_STORES
  CHIROPODISTS_PODIATRISTS
  CHIROPRACTORS
  CIGAR_STORES_AND_STANDS
  CIVIC_SOCIAL_FRATERNAL_ASSOCIATIONS
  CLEANING_AND_MAINTENANCE
  CLOTHING_RENTAL
  COLLEGES_UNIVERSITIES
  COMMERCIAL_EQUIPMENT
  COMMERCIAL_FOOTWEAR
  COMMERCIAL_PHOTOGRAPHY_ART_AND_GRAPHICS
  COMMUTER_TRANSPORT_AND_FERRIES
  COMPUTER_NETWORK_SERVICES
  COMPUTER_PROGRAMMING
  COMPUTER_REPAIR
  COMPUTER_SOFTWARE_STORES
  COMPUTERS_PERIPHERALS_AND_SOFTWARE
  CONCRETE_WORK_SERVICES
  CONSTRUCTION_MATERIALS
  CONSULTING_PUBLIC_RELATIONS
  CORRESPONDENCE_SCHOOLS
  COSMETIC_STORES
  COUNSELING_SERVICES
  COUNTRY_CLUBS
  COURIER_SERVICES
  COURT_COSTS
  CREDIT_REPORTING_AGENCIES
  CRUISE_LINES
  DAIRY_PRODUCTS_STORES
  DANCE_HALL_STUDIOS_SCHOOLS
  DATING_ESCORT_SERVICES
  DENTISTS_ORTHODONTISTS
  DEPARTMENT_STORES
  DETECTIVE_AGENCIES
  DIGITAL_GOODS_APPLICATIONS
  DIGITAL_GOODS_GAMES
  DIGITAL_GOODS_LARGE_VOLUME
  DIGITAL_GOODS_MEDIA
  DIRECT_MARKETING_CATALOG_MERCHANT
  DIRECT_MARKETING_COMBINATION_CATALOG_AND_RETAIL_MERCHANT
  DIRECT_MARKETING_INBOUND_TELEMARKETING
  DIRECT_MARKETING_INSURANCE_SERVICES
  DIRECT_MARKETING_OTHER
  DIRECT_MARKETING_OUTBOUND_TELEMARKETING
  DIRECT_MARKETING_SUBSCRIPTION
  DIRECT_MARKETING_TRAVEL
  DISCOUNT_STORES
  DOCTORS
  DOOR_TO_DOOR_SALES
  DRAPERY_WINDOW_COVERING_AND_UPHOLSTERY_STORES
  DRINKING_PLACES
  DRUG_STORES_AND_PHARMACIES
  DRUGS_DRUG_PROPRIETARIES_AND_DRUGGIST_SUNDRIES
  DRY_CLEANERS
  DURABLE_GOODS
  DUTY_FREE_STORES
  EATING_PLACES_RESTAURANTS
  EDUCATIONAL_SERVICES
  ELECTRIC_RAZOR_STORES
  ELECTRICAL_PARTS_AND_EQUIPMENT
  ELECTRICAL_SERVICES
  ELECTRONICS_REPAIR_SHOPS
  ELECTRONICS_STORES
  ELEMENTARY_SECONDARY_SCHOOLS
  EMPLOYMENT_TEMP_AGENCIES
  EQUIPMENT_RENTAL
  EXTERMINATING_SERVICES
  FAMILY_CLOTHING_STORES
  FAST_FOOD_RESTAURANTS
  FINANCIAL_INSTITUTIONS
  FINES_GOVERNMENT_ADMINISTRATIVE_ENTITIES
  FIREPLACE_FIREPLACE_SCREENS_AND_ACCESSORIES_STORES
  FLOOR_COVERING_STORES
  FLORISTS
  FLORISTS_SUPPLIES_NURSERY_STOCK_AND_FLOWERS
  FREEZER_AND_LOCKER_MEAT_PROVISIONERS
  FUEL_DEALERS_NON_AUTOMOTIVE
  FUNERAL_SERVICES_CREMATORIES
  FURNITURE_HOME_FURNISHINGS_AND_EQUIPMENT_STORES_EXCEPT_APPLIANCES
  FURNITURE_REPAIR_REFINISHING
  FURRIERS_AND_FUR_SHOPS
  GENERAL_SERVICES
  GIFT_CARD_NOVELTY_AND_SOUVENIR_SHOPS
  GLASS_PAINT_AND_WALLPAPER_STORES
  GLASSWARE_CRYSTAL_STORES
  GOLF_COURSES_PUBLIC
  GOVERNMENT_SERVICES
  GROCERY_STORES_SUPERMARKETS
  HARDWARE_EQUIPMENT_AND_SUPPLIES
  HARDWARE_STORES
  HEALTH_AND_BEAUTY_SPAS
  HEARING_AIDS_SALES_AND_SUPPLIES
  HEATING_PLUMBING_A_C
  HOBBY_TOY_AND_GAME_SHOPS
  HOME_SUPPLY_WAREHOUSE_STORES
  HOSPITALS
  HOTELS_MOTELS_AND_RESORTS
  HOUSEHOLD_APPLIANCE_STORES
  INDUSTRIAL_SUPPLIES
  INFORMATION_RETRIEVAL_SERVICES
  INSURANCE_DEFAULT
  INSURANCE_UNDERWRITING_PREMIUMS
  INTRA_COMPANY_PURCHASES
  JEWELRY_STORES_WATCHES_CLOCKS_AND_SILVERWARE_STORES
  LANDSCAPING_SERVICES
  LAUNDRIES
  LAUNDRY_CLEANING_SERVICES
  LEGAL_SERVICES_ATTORNEYS
  LUGGAGE_AND_LEATHER_GOODS_STORES
  LUMBER_BUILDING_MATERIALS_STORES
  MANUAL_CASH_DISBURSE
  MARINAS_SERVICE_AND_SUPPLIES
  MASONRY_STONEWORK_AND_PLASTER
  MASSAGE_PARLORS
  MEDICAL_AND_DENTAL_LABS
  MEDICAL_DENTAL_OPHTHALMIC_AND_HOSPITAL_EQUIPMENT_AND_SUPPLIES
  MEDICAL_SERVICES
  MEMBERSHIP_ORGANIZATIONS
  MENS_AND_BOYS_CLOTHING_AND_ACCESSORIES_STORES
  MENS_WOMENS_CLOTHING_STORES
  METAL_SERVICE_CENTERS
  MISCELLANEOUS
  MISCELLANEOUS_APPAREL_AND_ACCESSORY_SHOPS
  MISCELLANEOUS_AUTO_DEALERS
  MISCELLANEOUS_BUSINESS_SERVICES
  MISCELLANEOUS_FOOD_STORES
  MISCELLANEOUS_GENERAL_MERCHANDISE
  MISCELLANEOUS_GENERAL_SERVICES
  MISCELLANEOUS_HOME_FURNISHING_SPECIALTY_STORES
  MISCELLANEOUS_PUBLISHING_AND_PRINTING
  MISCELLANEOUS_RECREATION_SERVICES
  MISCELLANEOUS_REPAIR_SHOPS
  MISCELLANEOUS_SPECIALTY_RETAIL
  MOBILE_HOME_DEALERS
  MOTION_PICTURE_THEATERS
  MOTOR_FREIGHT_CARRIERS_AND_TRUCKING
  MOTOR_HOMES_DEALERS
  MOTOR_VEHICLE_SUPPLIES_AND_NEW_PARTS
  MOTORCYCLE_SHOPS_AND_DEALERS
  MOTORCYCLE_SHOPS_DEALERS
  MUSIC_STORES_MUSICAL_INSTRUMENTS_PIANOS_AND_SHEET_MUSIC
  NEWS_DEALERS_AND_NEWSSTANDS
  NON_FI_MONEY_ORDERS
  NON_FI_STORED_VALUE_CARD_PURCHASE_LOAD
  NONDURABLE_GOODS
  NURSERIES_LAWN_AND_GARDEN_SUPPLY_STORES
  NURSING_PERSONAL_CARE
  OFFICE_AND_COMMERCIAL_FURNITURE
  OPTICIANS_EYEGLASSES
  OPTOMETRISTS_OPHTHALMOLOGIST
  ORTHOPEDIC_GOODS_PROSTHETIC_DEVICES
  OSTEOPATHS
  PACKAGE_STORES_BEER_WINE_AND_LIQUOR
  PAINTS_VARNISHES_AND_SUPPLIES
  PARKING_LOTS_GARAGES
  PASSENGER_RAILWAYS
  PAWN_SHOPS
  PET_SHOPS_PET_FOOD_AND_SUPPLIES
  PETROLEUM_AND_PETROLEUM_PRODUCTS
  PHOTO_DEVELOPING
  PHOTOGRAPHIC_PHOTOCOPY_MICROFILM_EQUIPMENT_AND_SUPPLIES
  PHOTOGRAPHIC_STUDIOS
  PICTURE_VIDEO_PRODUCTION
  PIECE_GOODS_NOTIONS_AND_OTHER_DRY_GOODS
  PLUMBING_HEATING_EQUIPMENT_AND_SUPPLIES
  POLITICAL_ORGANIZATIONS
  POSTAL_SERVICES_GOVERNMENT_ONLY
  PRECIOUS_STONES_AND_METALS_WATCHES_AND_JEWELRY
  PROFESSIONAL_SERVICES
  PUBLIC_WAREHOUSING_AND_STORAGE
  QUICK_COPY_REPRO_AND_BLUEPRINT
  RAILROADS
  REAL_ESTATE_AGENTS_AND_MANAGERS_RENTALS
  RECORD_STORES
  RECREATIONAL_VEHICLE_RENTALS
  RELIGIOUS_GOODS_STORES
  RELIGIOUS_ORGANIZATIONS
  ROOFING_SIDING_SHEET_METAL
  SECRETARIAL_SUPPORT_SERVICES
  SECURITY_BROKERS_DEALERS
  SERVICE_STATIONS
  SEWING_NEEDLEWORK_FABRIC_AND_PIECE_GOODS_STORES
  SHOE_REPAIR_HAT_CLEANING
  SHOE_STORES
  SMALL_APPLIANCE_REPAIR
  SNOWMOBILE_DEALERS
  SPECIAL_TRADE_SERVICES
  SPECIALTY_CLEANING
  SPORTING_GOODS_STORES
  SPORTING_RECREATION_CAMPS
  SPORTS_AND_RIDING_APPAREL_STORES
  SPORTS_CLUBS_FIELDS
  STAMP_AND_COIN_STORES
  STATIONARY_OFFICE_SUPPLIES_PRINTING_AND_WRITING_PAPER
  STATIONERY_STORES_OFFICE_AND_SCHOOL_SUPPLY_STORES
  SWIMMING_POOLS_SALES
  T_UI_TRAVEL_GERMANY
  TAILORS_ALTERATIONS
  TAX_PAYMENTS_GOVERNMENT_AGENCIES
  TAX_PREPARATION_SERVICES
  TAXICABS_LIMOUSINES
  TELECOMMUNICATION_EQUIPMENT_AND_TELEPHONE_SALES
  TELECOMMUNICATION_SERVICES
  TELEGRAPH_SERVICES
  TENT_AND_AWNING_SHOPS
  TESTING_LABORATORIES
  THEATRICAL_TICKET_AGENCIES
  TIMESHARES
  TIRE_RETREADING_AND_REPAIR
  TOLLS_BRIDGE_FEES
  TOURIST_ATTRACTIONS_AND_EXHIBITS
  TOWING_SERVICES
  TRAILER_PARKS_CAMPGROUNDS
  TRANSPORTATION_SERVICES
  TRAVEL_AGENCIES_TOUR_OPERATORS
  TRUCK_STOP_ITERATION
  TRUCK_UTILITY_TRAILER_RENTALS
  TYPESETTING_PLATE_MAKING_AND_RELATED_SERVICES
  TYPEWRITER_STORES
  U_S_FEDERAL_GOVERNMENT_AGENCIES_OR_DEPARTMENTS
  UNIFORMS_COMMERCIAL_CLOTHING
  USED_MERCHANDISE_AND_SECONDHAND_STORES
  UTILITIES
  VARIETY_STORES
  VETERINARY_SERVICES
  VIDEO_AMUSEMENT_GAME_SUPPLIES
  VIDEO_GAME_ARCADES
  VIDEO_TAPE_RENTAL_STORES
  VOCATIONAL_TRADE_SCHOOLS
  WATCH_JEWELRY_REPAIR
  WELDING_REPAIR
  WHOLESALE_CLUBS
  WIG_AND_TOUPEE_STORES
  WIRES_MONEY_ORDERS
  WOMENS_ACCESSORY_AND_SPECIALTY_SHOPS
  WOMENS_READY_TO_WEAR_STORES
  WRECKING_AND_SALVAGE_YARDS
}

enum Interval7 {
  ALL_TIME
  DAILY
  MONTHLY
  PER_AUTHORIZATION
  WEEKLY
  YEARLY
}

enum Status26 {
  ACTIVE
  BLOCKED
  INACTIVE
}

enum Type34 {
  COMPANY
  INDIVIDUAL
}

enum Object52 {
  ISSUING_CARD
}

enum ReplacementReason {
  DAMAGED
  EXPIRED
  LOST
  STOLEN
}

"""Where and how the card will be shipped."""
type Shipping10 {
  address: Address
  """The delivery company that shipped a card."""
  carrier: Carrier9
  """A unix timestamp representing a best estimate of when the card will be delivered."""
  eta: Int
  """Recipient name."""
  name: String
  """Shipment service, such as `standard` or `express`."""
  service: Service
  """The delivery status of the card."""
  status: Status27
  """A tracking number for a card shipment."""
  trackingNumber: String
  """A link to the shipping carrier's site where you can view detailed information about a card shipment."""
  trackingUrl: String
  """Packaging options."""
  type: Type35
}

enum Carrier9 {
  DHL
  FEDEX
  ROYAL_MAIL
  USPS
}

enum Service {
  EXPRESS
  PRIORITY
  STANDARD
}

enum Status27 {
  CANCELED
  DELIVERED
  FAILURE
  PENDING
  RETURNED
  SHIPPED
}

enum Type35 {
  BULK
  INDIVIDUAL
}

type IssuingCardAuthorizationControls {
  """Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations to allow. All other categories will be blocked. Cannot be set with `blocked_categories`."""
  allowedCategories: [AllowedCategoriesListItem]
  """Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations to decline. All other categories will be allowed. Cannot be set with `allowed_categories`."""
  blockedCategories: [BlockedCategoriesListItem]
  """Limit spending with amount-based rules that apply across any cards this card replaced (i.e., its `replacement_for` card and _that_ card's `replacement_for` card, up the chain)."""
  spendingLimits: [IssuingCardSpendingLimit]
  """Currency of the amounts within `spending_limits`. Always the same as the currency of the card."""
  spendingLimitsCurrency: String
}

type IssuingCardSpendingLimit {
  """Maximum amount allowed to spend per interval."""
  amount: Int!
  """Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) this limit applies to. Omitting this field will apply the limit to all categories."""
  categories: [CategoriesListItem]
  """Interval (or event) to which the amount applies."""
  interval: Interval7!
}

enum Status28 {
  ACTIVE
  CANCELED
  INACTIVE
}

enum Type36 {
  PHYSICAL
  VIRTUAL
}

type IssuingAuthorizationMerchantData {
  """A categorization of the seller's type of business. See our [merchant categories guide](https://stripe.com/docs/issuing/merchant-categories) for a list of possible values."""
  category: String!
  """The merchant category code for the seller’s business"""
  categoryCode: String!
  """City where the seller is located"""
  city: String
  """Country where the seller is located"""
  country: String
  """Name of the seller"""
  name: String
  """Identifier assigned to the seller by the card brand"""
  networkId: String!
  """Postal code where the seller is located"""
  postalCode: String
  """State where the seller is located"""
  state: String
}

enum Object53 {
  ISSUING_AUTHORIZATION
}

"""The pending authorization request. This field will only be non-null during an `issuing_authorization.request` webhook."""
type PendingRequest {
  """The additional amount Stripe will hold if the authorization is approved, in the card's [currency](https://stripe.com/docs/api#issuing_authorization_object-pending-request-currency) and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal)."""
  amount: Int
  """Detailed breakdown of amount components. These amounts are denominated in `currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal)."""
  amountDetails: AmountDetails
  """Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."""
  currency: String
  """If set `true`, you may provide [amount](https://stripe.com/docs/api/issuing/authorizations/approve#approve_issuing_authorization-amount) to control how much to hold for the authorization."""
  isAmountControllable: Boolean
  """The amount the merchant is requesting to be authorized in the `merchant_currency`. The amount is in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal)."""
  merchantAmount: Int
  """The local currency the merchant is requesting to authorize."""
  merchantCurrency: String
}

type IssuingAuthorizationRequest {
  """The `pending_request.amount` at the time of the request, presented in your card's currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). Stripe held this amount from your account to fund the authorization if the request was approved."""
  amount: Int!
  """Detailed breakdown of amount components. These amounts are denominated in `currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal)."""
  amountDetails: AmountDetails
  """Whether this request was approved."""
  approved: Boolean!
  """Time at which the object was created. Measured in seconds since the Unix epoch."""
  created: Int!
  """Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."""
  currency: String!
  """The `pending_request.merchant_amount` at the time of the request, presented in the `merchant_currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal)."""
  merchantAmount: Int!
  """The currency that was collected by the merchant and presented to the cardholder for the authorization. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."""
  merchantCurrency: String!
  """The reason for the approval or decline."""
  reason: Reason13!
}

enum Reason13 {
  ACCOUNT_DISABLED
  CARD_ACTIVE
  CARD_INACTIVE
  CARDHOLDER_INACTIVE
  CARDHOLDER_VERIFICATION_REQUIRED
  INSUFFICIENT_FUNDS
  NOT_ALLOWED
  SPENDING_CONTROLS
  SUSPECTED_FRAUD
  VERIFICATION_FAILED
  WEBHOOK_APPROVED
  WEBHOOK_DECLINED
  WEBHOOK_TIMEOUT
}

enum Status29 {
  CLOSED
  PENDING
  REVERSED
}

"""
Any use of an [issued card](https://stripe.com/docs/issuing) that results in funds entering or leaving
your Stripe account, such as a completed purchase or refund, is represented by an Issuing
`Transaction` object.

Related guide: [Issued Card Transactions](https://stripe.com/docs/issuing/purchases/transactions).
"""
type IssuingTransaction {
  """The transaction amount, which will be reflected in your balance. This amount is in your currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal)."""
  amount: Int!
  """Detailed breakdown of amount components. These amounts are denominated in `currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal)."""
  amountDetails: AmountDetails2
  """The `Authorization` object that led to this transaction."""
  authorization: JSON
  """ID of the [balance transaction](https://stripe.com/docs/api/balance_transactions) associated with this transaction."""
  balanceTransaction: JSON
  """The card used to make this transaction."""
  card: JSON!
  """The cardholder to whom this transaction belongs."""
  cardholder: JSON
  """Time at which the object was created. Measured in seconds since the Unix epoch."""
  created: Int!
  """Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."""
  currency: String!
  """If you've disputed the transaction, the ID of the dispute."""
  dispute: JSON
  """Unique identifier for the object."""
  id: String!
  """Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."""
  livemode: Boolean!
  """The amount that the merchant will receive, denominated in `merchant_currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). It will be different from `amount` if the merchant is taking payment in a different currency."""
  merchantAmount: Int!
  """The currency with which the merchant is taking payment."""
  merchantCurrency: String!
  merchantData: IssuingAuthorizationMerchantData!
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."""
  metadata: JSON!
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object54!
  """Additional purchase information that is optionally provided by the merchant."""
  purchaseDetails: PurchaseDetails
  """The nature of the transaction."""
  type: Type38!
  """The digital wallet used for this transaction. One of `apple_pay`, `google_pay`, or `samsung_pay`."""
  wallet: Wallet3
}

"""Detailed breakdown of amount components. These amounts are denominated in `currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal)."""
type AmountDetails2 {
  """The fee charged by the ATM for the cash withdrawal."""
  atmFee: Int
}

enum Object54 {
  ISSUING_TRANSACTION
}

"""Additional purchase information that is optionally provided by the merchant."""
type PurchaseDetails {
  """Information about the flight that was purchased with this transaction."""
  flight: Flight
  """Information about fuel that was purchased with this transaction."""
  fuel: Fuel
  """Information about lodging that was purchased with this transaction."""
  lodging: Lodging
  """The line items in the purchase."""
  receipt: [IssuingTransactionReceiptData]
  """A merchant-specific order number."""
  reference: String
}

"""Information about the flight that was purchased with this transaction."""
type Flight {
  """The time that the flight departed."""
  departureAt: Int
  """The name of the passenger."""
  passengerName: String
  """Whether the ticket is refundable."""
  refundable: Boolean
  """The legs of the trip."""
  segments: [IssuingTransactionFlightDataLeg]
  """The travel agency that issued the ticket."""
  travelAgency: String
}

type IssuingTransactionFlightDataLeg {
  """The three-letter IATA airport code of the flight's destination."""
  arrivalAirportCode: String
  """The airline carrier code."""
  carrier: String
  """The three-letter IATA airport code that the flight departed from."""
  departureAirportCode: String
  """The flight number."""
  flightNumber: String
  """The flight's service class."""
  serviceClass: String
  """Whether a stopover is allowed on this flight."""
  stopoverAllowed: Boolean
}

"""Information about fuel that was purchased with this transaction."""
type Fuel {
  """The type of fuel that was purchased. One of `diesel`, `unleaded_plus`, `unleaded_regular`, `unleaded_super`, or `other`."""
  type: String
  """The units for `volume_decimal`. One of `us_gallon` or `liter`."""
  unit: String
  """The cost in cents per each unit of fuel, represented as a decimal string with at most 12 decimal places."""
  unitCostDecimal: String
  """The volume of the fuel that was pumped, represented as a decimal string with at most 12 decimal places."""
  volumeDecimal: String
}

"""Information about lodging that was purchased with this transaction."""
type Lodging {
  """The time of checking into the lodging."""
  checkInAt: Int
  """The number of nights stayed at the lodging."""
  nights: Int
}

type IssuingTransactionReceiptData {
  """The description of the item. The maximum length of this field is 26 characters."""
  description: String
  """The quantity of the item."""
  quantity: Float
  """The total for this line item in cents."""
  total: Int
  """The unit cost of the item in cents."""
  unitCost: Int
}

enum Type38 {
  CAPTURE
  REFUND
}

enum Wallet3 {
  APPLE_PAY
  GOOGLE_PAY
  SAMSUNG_PAY
}

type IssuingAuthorizationVerificationData {
  """Whether the cardholder provided an address first line and if it matched the cardholder’s `billing.address.line1`."""
  addressLine1Check: AddressLine1Check14!
  """Whether the cardholder provided a postal code and if it matched the cardholder’s `billing.address.postal_code`."""
  addressPostalCodeCheck: AddressPostalCodeCheck3!
  """Whether the cardholder provided a CVC and if it matched Stripe’s record."""
  cvcCheck: CvcCheck14!
  """Whether the cardholder provided an expiry date and if it matched Stripe’s record."""
  expiryCheck: ExpiryCheck!
}

enum AddressLine1Check14 {
  MATCH
  MISMATCH
  NOT_PROVIDED
}

enum AddressPostalCodeCheck3 {
  MATCH
  MISMATCH
  NOT_PROVIDED
}

enum CvcCheck14 {
  MATCH
  MISMATCH
  NOT_PROVIDED
}

enum ExpiryCheck {
  MATCH
  MISMATCH
  NOT_PROVIDED
}

enum Status57 {
  CLOSED
  PENDING
  REVERSED
}

type V1IssuingCardholders2 {
  data: [IssuingCardholder]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

enum Status58 {
  ACTIVE
  BLOCKED
  INACTIVE
}

enum Type69 {
  COMPANY
  INDIVIDUAL
}

type V1IssuingCards2 {
  data: [IssuingCard2]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

enum Status59 {
  ACTIVE
  CANCELED
  INACTIVE
}

enum Type70 {
  PHYSICAL
  VIRTUAL
}

type IssuingDisputeList {
  data: [IssuingDispute]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

"""
As a [card issuer](https://stripe.com/docs/issuing), you can dispute transactions that the cardholder does not recognize, suspects to be fraudulent, or has other issues with.

Related guide: [Disputing Transactions](https://stripe.com/docs/issuing/purchases/disputes)
"""
type IssuingDispute {
  """Disputed amount. Usually the amount of the `transaction`, but can differ (usually because of currency fluctuation)."""
  amount: Int!
  """List of balance transactions associated with the dispute."""
  balanceTransactions: [BalanceTransaction3]
  """Time at which the object was created. Measured in seconds since the Unix epoch."""
  created: Int!
  """The currency the `transaction` was made in."""
  currency: String!
  evidence: IssuingDisputeEvidence!
  """Unique identifier for the object."""
  id: String!
  """Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."""
  livemode: Boolean!
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."""
  metadata: JSON!
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object55!
  """Current status of the dispute."""
  status: Status34!
  """The transaction being disputed."""
  transaction: JSON!
}

type IssuingDisputeEvidence {
  canceled: IssuingDisputeCanceledEvidence
  duplicate: IssuingDisputeDuplicateEvidence
  fraudulent: IssuingDisputeFraudulentEvidence
  merchandiseNotAsDescribed: IssuingDisputeMerchandiseNotAsDescribedEvidence
  notReceived: IssuingDisputeNotReceivedEvidence
  other: IssuingDisputeOtherEvidence
  """The reason for filing the dispute. Its value will match the field containing the evidence."""
  reason: Reason14!
  serviceNotAsDescribed: IssuingDisputeServiceNotAsDescribedEvidence
}

type IssuingDisputeCanceledEvidence {
  """(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute."""
  additionalDocumentation: JSON
  """Date when order was canceled."""
  canceledAt: Int
  """Whether the cardholder was provided with a cancellation policy."""
  cancellationPolicyProvided: Boolean
  """Reason for canceling the order."""
  cancellationReason: String
  """Date when the cardholder expected to receive the product."""
  expectedAt: Int
  """Explanation of why the cardholder is disputing this transaction."""
  explanation: String
  """Description of the merchandise or service that was purchased."""
  productDescription: String
  """Whether the product was a merchandise or service."""
  productType: ProductType
  """Result of cardholder's attempt to return the product."""
  returnStatus: ReturnStatus
  """Date when the product was returned or attempted to be returned."""
  returnedAt: Int
}

enum ProductType {
  MERCHANDISE
  SERVICE
}

enum ReturnStatus {
  MERCHANT_REJECTED
  SUCCESSFUL
}

type IssuingDisputeDuplicateEvidence {
  """(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute."""
  additionalDocumentation: JSON
  """(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Copy of the card statement showing that the product had already been paid for."""
  cardStatement: JSON
  """(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Copy of the receipt showing that the product had been paid for in cash."""
  cashReceipt: JSON
  """(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Image of the front and back of the check that was used to pay for the product."""
  checkImage: JSON
  """Explanation of why the cardholder is disputing this transaction."""
  explanation: String
  """Transaction (e.g., ipi_...) that the disputed transaction is a duplicate of. Of the two or more transactions that are copies of each other, this is original undisputed one."""
  originalTransaction: String
}

type IssuingDisputeFraudulentEvidence {
  """(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute."""
  additionalDocumentation: JSON
  """Explanation of why the cardholder is disputing this transaction."""
  explanation: String
}

type IssuingDisputeMerchandiseNotAsDescribedEvidence {
  """(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute."""
  additionalDocumentation: JSON
  """Explanation of why the cardholder is disputing this transaction."""
  explanation: String
  """Date when the product was received."""
  receivedAt: Int
  """Description of the cardholder's attempt to return the product."""
  returnDescription: String
  """Result of cardholder's attempt to return the product."""
  returnStatus: ReturnStatus
  """Date when the product was returned or attempted to be returned."""
  returnedAt: Int
}

type IssuingDisputeNotReceivedEvidence {
  """(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute."""
  additionalDocumentation: JSON
  """Date when the cardholder expected to receive the product."""
  expectedAt: Int
  """Explanation of why the cardholder is disputing this transaction."""
  explanation: String
  """Description of the merchandise or service that was purchased."""
  productDescription: String
  """Whether the product was a merchandise or service."""
  productType: ProductType
}

type IssuingDisputeOtherEvidence {
  """(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute."""
  additionalDocumentation: JSON
  """Explanation of why the cardholder is disputing this transaction."""
  explanation: String
  """Description of the merchandise or service that was purchased."""
  productDescription: String
  """Whether the product was a merchandise or service."""
  productType: ProductType
}

enum Reason14 {
  CANCELED
  DUPLICATE
  FRAUDULENT
  MERCHANDISE_NOT_AS_DESCRIBED
  NOT_RECEIVED
  OTHER
  SERVICE_NOT_AS_DESCRIBED
}

type IssuingDisputeServiceNotAsDescribedEvidence {
  """(ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute."""
  additionalDocumentation: JSON
  """Date when order was canceled."""
  canceledAt: Int
  """Reason for canceling the order."""
  cancellationReason: String
  """Explanation of why the cardholder is disputing this transaction."""
  explanation: String
  """Date when the product was received."""
  receivedAt: Int
}

enum Object55 {
  ISSUING_DISPUTE
}

enum Status34 {
  EXPIRED
  LOST
  SUBMITTED
  UNSUBMITTED
  WON
}

enum Status60 {
  EXPIRED
  LOST
  SUBMITTED
  UNSUBMITTED
  WON
}

type V1IssuingSettlements2 {
  data: [IssuingSettlement]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

"""When a non-stripe BIN is used, any use of an [issued card](https://stripe.com/docs/issuing) must be settled directly with the card network. The net amount owed is represented by an Issuing `Settlement` object."""
type IssuingSettlement {
  """The Bank Identification Number reflecting this settlement record."""
  bin: String!
  """The date that the transactions are cleared and posted to user's accounts."""
  clearingDate: Int!
  """Time at which the object was created. Measured in seconds since the Unix epoch."""
  created: Int!
  """Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."""
  currency: String!
  """Unique identifier for the object."""
  id: String!
  """The total interchange received as reimbursement for the transactions."""
  interchangeFees: Int!
  """Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."""
  livemode: Boolean!
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."""
  metadata: JSON!
  """The total net amount required to settle with the network."""
  netTotal: Int!
  """The card network for this settlement report. One of ["visa"]"""
  network: Network5!
  """The total amount of fees owed to the network."""
  networkFees: Int!
  """The Settlement Identification Number assigned by the network."""
  networkSettlementIdentifier: String!
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object56!
  """One of `international` or `uk_national_net`."""
  settlementService: String!
  """The total number of transactions reflected in this settlement."""
  transactionCount: Int!
  """The total transaction amount reflected in this settlement."""
  transactionVolume: Int!
}

enum Network5 {
  VISA
}

enum Object56 {
  ISSUING_SETTLEMENT
}

type V1IssuingTransactions2 {
  data: [IssuingTransaction]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

enum Type71 {
  CAPTURE
  REFUND
}

"""A Mandate is a record of the permission a customer has given you to debit their payment method."""
type Mandate6 {
  customerAcceptance: CustomerAcceptance!
  """Unique identifier for the object."""
  id: String!
  """Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."""
  livemode: Boolean!
  multiUse: JSON
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object57!
  """ID of the payment method associated with this mandate."""
  paymentMethod: JSON!
  paymentMethodDetails: MandatePaymentMethodDetails!
  singleUse: MandateSingleUse
  """The status of the mandate, which indicates whether it can be used to initiate a payment."""
  status: Status35!
  """The type of the mandate."""
  type: Type43!
}

type CustomerAcceptance {
  """The time at which the customer accepted the Mandate."""
  acceptedAt: Int
  offline: JSON
  online: OnlineAcceptance
  """The type of customer acceptance information included with the Mandate. One of `online` or `offline`."""
  type: Type41!
}

type OnlineAcceptance {
  """The IP address from which the Mandate was accepted by the customer."""
  ipAddress: String
  """The user agent of the browser from which the Mandate was accepted by the customer."""
  userAgent: String
}

enum Type41 {
  OFFLINE
  ONLINE
}

enum Object57 {
  MANDATE
}

type MandatePaymentMethodDetails {
  acssDebit: MandateAcssDebit
  auBecsDebit: MandateAuBecsDebit
  bacsDebit: MandateBacsDebit
  card: JSON
  sepaDebit: MandateSepaDebit
  """The type of the payment method associated with this mandate. An additional hash is included on `payment_method_details` with a name matching this value. It contains mandate information specific to the payment method."""
  type: String!
}

type MandateAcssDebit {
  """Description of the interval. Only required if the 'payment_schedule' parameter is 'interval' or 'combined'."""
  intervalDescription: String
  """Payment schedule for the mandate."""
  paymentSchedule: PaymentSchedule3!
  """Transaction type of the mandate."""
  transactionType: TransactionType3!
}

enum PaymentSchedule3 {
  COMBINED
  INTERVAL
  SPORADIC
}

enum TransactionType3 {
  BUSINESS
  PERSONAL
}

type MandateAuBecsDebit {
  """The URL of the mandate. This URL generally contains sensitive information about the customer and should be shared with them exclusively."""
  url: String!
}

type MandateBacsDebit {
  """The status of the mandate on the Bacs network. Can be one of `pending`, `revoked`, `refused`, or `accepted`."""
  networkStatus: NetworkStatus2!
  """The unique reference identifying the mandate on the Bacs network."""
  reference: String!
  """The URL that will contain the mandate that the customer has signed."""
  url: String!
}

enum NetworkStatus2 {
  ACCEPTED
  PENDING
  REFUSED
  REVOKED
}

type MandateSepaDebit {
  """The unique reference of the mandate."""
  reference: String!
  """The URL of the mandate. This URL generally contains sensitive information about the customer and should be shared with them exclusively."""
  url: String!
}

type MandateSingleUse {
  """On a single use mandate, the amount of the payment."""
  amount: Int!
  """On a single use mandate, the currency of the payment."""
  currency: String!
}

enum Status35 {
  ACTIVE
  INACTIVE
  PENDING
}

enum Type43 {
  MULTI_USE
  SINGLE_USE
}

type V1OrderReturns2 {
  data: [OrderReturn]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

"""
A return represents the full or partial return of a number of [order items](https://stripe.com/docs/api#order_items).
Returns always belong to an order, and may optionally contain a refund.

Related guide: [Handling Returns](https://stripe.com/docs/orders/guide#handling-returns).
"""
type OrderReturn {
  """A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount for the returned line item."""
  amount: Int!
  """Time at which the object was created. Measured in seconds since the Unix epoch."""
  created: Int!
  """Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."""
  currency: String!
  """Unique identifier for the object."""
  id: String!
  """The items included in this order return."""
  items: [OrderItem]!
  """Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."""
  livemode: Boolean!
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object59!
  """The order that this return includes items from."""
  order: JSON
  """The ID of the refund issued for this return."""
  refund: JSON
}

enum Object58 {
  ORDER_ITEM
}

enum Object59 {
  ORDER_RETURN
}

type V1Orders2 {
  data: [Order3]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

"""
Order objects are created to handle end customers' purchases of previously
defined [products](https://stripe.com/docs/api#products). You can create, retrieve, and pay individual orders, as well
as list all orders. Orders are identified by a unique, random ID.

Related guide: [Tax, Shipping, and Inventory](https://stripe.com/docs/orders).
"""
type Order3 {
  """A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount for the order."""
  amount: Int!
  """The total amount that was returned to the customer."""
  amountReturned: Int
  """ID of the Connect Application that created the order."""
  application: String
  """A fee in cents that will be applied to the order and transferred to the application owner’s Stripe account. The request must be made with an OAuth key or the Stripe-Account header in order to take an application fee. For more information, see the application fees documentation."""
  applicationFee: Int
  """The ID of the payment used to pay for the order. Present if the order status is `paid`, `fulfilled`, or `refunded`."""
  charge: JSON
  """Time at which the object was created. Measured in seconds since the Unix epoch."""
  created: Int!
  """Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."""
  currency: String!
  """The customer used for the order."""
  customer: JSON
  """The email address of the customer placing the order."""
  email: String
  """External coupon code to load for this order."""
  externalCouponCode: String
  """Unique identifier for the object."""
  id: String!
  """List of items constituting the order. An order can have up to 25 items."""
  items: [OrderItem]!
  """Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."""
  livemode: Boolean!
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."""
  metadata: JSON
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object60!
  """A list of returns that have taken place for this order."""
  returns: Returns
  """The shipping method that is currently selected for this order, if any. If present, it is equal to one of the `id`s of shipping methods in the `shipping_methods` array. At order creation time, if there are multiple shipping methods, Stripe will automatically selected the first method."""
  selectedShippingMethod: String
  """The shipping address for the order. Present if the order is for goods to be shipped."""
  shipping: Shipping11
  """A list of supported shipping methods for this order. The desired shipping method can be specified either by updating the order, or when paying it."""
  shippingMethods: [ShippingMethod]
  """Current order status. One of `created`, `paid`, `canceled`, `fulfilled`, or `returned`. More details in the [Orders Guide](https://stripe.com/docs/orders/guide#understanding-order-statuses)."""
  status: String!
  """The timestamps at which the order status was updated."""
  statusTransitions: StatusTransitions
  """Time at which the object was last updated. Measured in seconds since the Unix epoch."""
  updated: Int
  """The user's order ID if it is different from the Stripe order ID."""
  upstreamId: String
}

enum Object60 {
  ORDER
}

"""A list of returns that have taken place for this order."""
type Returns {
  """Details about each object."""
  data: [OrderReturn]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

"""The shipping address for the order. Present if the order is for goods to be shipped."""
type Shipping11 {
  address: Address
  """The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc."""
  carrier: String
  """Recipient name."""
  name: String
  """Recipient phone (including extension)."""
  phone: String
  """The tracking number for a physical product, obtained from the delivery service. If multiple tracking numbers were generated for this purchase, please separate them with commas."""
  trackingNumber: String
}

type ShippingMethod {
  """A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount for the line item."""
  amount: Int!
  """Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."""
  currency: String!
  """The estimated delivery date for the given shipping method. Can be either a specific date or a range."""
  deliveryEstimate: DeliveryEstimate
  """An arbitrary string attached to the object. Often useful for displaying to users."""
  description: String!
  """Unique identifier for the object."""
  id: String!
}

"""The estimated delivery date for the given shipping method. Can be either a specific date or a range."""
type DeliveryEstimate {
  """If `type` is `"exact"`, `date` will be the expected delivery date in the format YYYY-MM-DD."""
  date: String
  """If `type` is `"range"`, `earliest` will be be the earliest delivery date in the format YYYY-MM-DD."""
  earliest: String
  """If `type` is `"range"`, `latest` will be the latest delivery date in the format YYYY-MM-DD."""
  latest: String
  """The type of estimate. Must be either `"range"` or `"exact"`."""
  type: String
}

"""The timestamps at which the order status was updated."""
type StatusTransitions {
  """The time that the order was canceled."""
  canceled: Int
  """The time that the order was fulfilled."""
  fulfiled: Int
  """The time that the order was paid."""
  paid: Int
  """The time that the order was returned."""
  returned: Int
}

input StatusTransitions2Input {
  canceled: JSON
  fulfilled: JSON
  paid: JSON
  returned: JSON
}

type PaymentFlowsPaymentIntentList {
  data: [PaymentIntent7]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

type PaymentFlowsPaymentMethodList {
  data: [PaymentMethod3]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

enum Type72 {
  ACSS_DEBIT
  AFTERPAY_CLEARPAY
  ALIPAY
  AU_BECS_DEBIT
  BACS_DEBIT
  BANCONTACT
  BOLETO
  CARD
  EPS
  FPX
  GIROPAY
  GRABPAY
  IDEAL
  OXXO
  P24
  SEPA_DEBIT
  SOFORT
  WECHAT_PAY
}

type PayoutList {
  data: [Payout]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

"""
A `Payout` object is created when you receive funds from Stripe, or when you
initiate a payout to either a bank account or debit card of a [connected
Stripe account](/docs/connect/bank-debit-card-payouts). You can retrieve individual payouts,
as well as list all payouts. Payouts are made on [varying
schedules](/docs/connect/manage-payout-schedule), depending on your country and
industry.

Related guide: [Receiving Payouts](https://stripe.com/docs/payouts).
"""
type Payout {
  """Amount (in %s) to be transferred to your bank account or debit card."""
  amount: Int!
  """Date the payout is expected to arrive in the bank. This factors in delays like weekends or bank holidays."""
  arrivalDate: Int!
  """Returns `true` if the payout was created by an [automated payout schedule](https://stripe.com/docs/payouts#payout-schedule), and `false` if it was [requested manually](https://stripe.com/docs/payouts#manual-payouts)."""
  automatic: Boolean!
  """ID of the balance transaction that describes the impact of this payout on your account balance."""
  balanceTransaction: JSON
  """Time at which the object was created. Measured in seconds since the Unix epoch."""
  created: Int!
  """Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."""
  currency: String!
  """An arbitrary string attached to the object. Often useful for displaying to users."""
  description: String
  """ID of the bank account or card the payout was sent to."""
  destination: JSON
  """If the payout failed or was canceled, this will be the ID of the balance transaction that reversed the initial balance transaction, and puts the funds from the failed payout back in your balance."""
  failureBalanceTransaction: JSON
  """Error code explaining reason for payout failure if available. See [Types of payout failures](https://stripe.com/docs/api#payout_failures) for a list of failure codes."""
  failureCode: String
  """Message to user further explaining reason for payout failure if available."""
  failureMessage: String
  """Unique identifier for the object."""
  id: String!
  """Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."""
  livemode: Boolean!
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."""
  metadata: JSON
  """The method used to send this payout, which can be `standard` or `instant`. `instant` is only supported for payouts to debit cards. (See [Instant payouts for marketplaces](https://stripe.com/blog/instant-payouts-for-marketplaces) for more information.)"""
  method: String!
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object61!
  """If the payout reverses another, this is the ID of the original payout."""
  originalPayout: JSON
  """If the payout was reversed, this is the ID of the payout that reverses this payout."""
  reversedBy: JSON
  """The source balance this payout came from. One of `card`, `fpx`, or `bank_account`."""
  sourceType: String!
  """Extra information about a payout to be displayed on the user's bank statement."""
  statementDescriptor: String
  """Current status of the payout: `paid`, `pending`, `in_transit`, `canceled` or `failed`. A payout is `pending` until it is submitted to the bank, when it becomes `in_transit`. The status then changes to `paid` if the transaction goes through, or to `failed` or `canceled` (within 5 business days). Some failed payouts may initially show as `paid` but then change to `failed`."""
  status: String!
  """Can be `bank_account` or `card`."""
  type: Type50!
}

enum Object61 {
  PAYOUT
}

enum Type50 {
  BANK_ACCOUNT
  CARD
}

type PlanList {
  """Details about each object."""
  data: [Plan4]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

"""
You can now model subscriptions more flexibly using the [Prices API](https://stripe.com/docs/api#prices). It replaces the Plans API and is backwards compatible to simplify your migration.

Plans define the base price, currency, and billing cycle for recurring purchases of products.
[Products](https://stripe.com/docs/api#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.

For example, you might have a single "gold" product that has plans for $10/month, $100/year, €9/month, and €90/year.

Related guides: [Set up a subscription](https://stripe.com/docs/billing/subscriptions/set-up-subscription) and more about [products and prices](https://stripe.com/docs/billing/prices-guide).
"""
type Plan4 {
  """Whether the plan can be used for new purchases."""
  active: Boolean!
  """Specifies a usage aggregation strategy for plans of `usage_type=metered`. Allowed values are `sum` for summing up all usage during a period, `last_during_period` for using the last usage record reported within a period, `last_ever` for using the last usage record ever (across period bounds) or `max` which uses the usage record with the maximum reported usage during a period. Defaults to `sum`."""
  aggregateUsage: AggregateUsage2
  """The unit amount in %s to be charged, represented as a whole integer if possible. Only set if `billing_scheme=per_unit`."""
  amount: Int
  """The unit amount in %s to be charged, represented as a decimal string with at most 12 decimal places. Only set if `billing_scheme=per_unit`."""
  amountDecimal: String
  """Describes how to compute the price per period. Either `per_unit` or `tiered`. `per_unit` indicates that the fixed amount (specified in `amount`) will be charged per unit in `quantity` (for plans with `usage_type=licensed`), or per unit of total usage (for plans with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as defined using the `tiers` and `tiers_mode` attributes."""
  billingScheme: BillingScheme2!
  """Time at which the object was created. Measured in seconds since the Unix epoch."""
  created: Int!
  """Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."""
  currency: String!
  """Unique identifier for the object."""
  id: String!
  """The frequency at which a subscription is billed. One of `day`, `week`, `month` or `year`."""
  interval: Interval4!
  """The number of intervals (specified in the `interval` attribute) between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months."""
  intervalCount: Int!
  """Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."""
  livemode: Boolean!
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."""
  metadata: JSON
  """A brief description of the plan, hidden from customers."""
  nickname: String
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object62!
  """The product whose pricing this plan determines."""
  product: JSON
  """Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`."""
  tiers: [PlanTier]
  """Defines if the tiering price should be `graduated` or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per unit price. In `graduated` tiering, pricing can change as the quantity grows."""
  tiersMode: TiersMode
  """Apply a transformation to the reported usage or set quantity before computing the amount billed. Cannot be combined with `tiers`."""
  transformUsage: TransformUsage
  """Default number of trial days when subscribing a customer to this plan using [`trial_from_plan=true`](https://stripe.com/docs/api#create_subscription-trial_from_plan)."""
  trialPeriodDays: Int
  """Configures how the quantity per period should be determined. Can be either `metered` or `licensed`. `licensed` automatically bills the `quantity` set when adding it to a subscription. `metered` aggregates the total usage based on usage records. Defaults to `licensed`."""
  usageType: UsageType!
}

enum AggregateUsage2 {
  LAST_DURING_PERIOD
  LAST_EVER
  MAX
  SUM
}

enum BillingScheme2 {
  PER_UNIT
  TIERED
}

enum Object62 {
  PLAN
}

type PlanTier {
  """Price for the entire tier."""
  flatAmount: Int
  """Same as `flat_amount`, but contains a decimal value with at most 12 decimal places."""
  flatAmountDecimal: String
  """Per unit price for units relevant to the tier."""
  unitAmount: Int
  """Same as `unit_amount`, but contains a decimal value with at most 12 decimal places."""
  unitAmountDecimal: String
  """Up to and including to this quantity will be contained in the tier."""
  upTo: Int
}

"""Apply a transformation to the reported usage or set quantity before computing the amount billed. Cannot be combined with `tiers`."""
type TransformUsage {
  """Divide usage by this number."""
  divideBy: Int
  """After division, either round the result `up` or `down`."""
  round: Round
}

type PriceList {
  """Details about each object."""
  data: [Price3]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

input Recurring4Input {
  interval: Interval5
  usageType: UsageType2
}

enum UsageType2 {
  LICENSED
  METERED
}

enum Type73 {
  ONE_TIME
  RECURRING
}

type V1Products2 {
  data: [Product14]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

"""
Products describe the specific goods or services you offer to your customers.
For example, you might offer a Standard and Premium version of your goods or service; each version would be a separate Product.
They can be used in conjunction with [Prices](https://stripe.com/docs/api#prices) to configure pricing in Checkout and Subscriptions.

Related guides: [Set up a subscription](https://stripe.com/docs/billing/subscriptions/set-up-subscription) or accept [one-time payments with Checkout](https://stripe.com/docs/payments/checkout/client#create-products) and more about [Products and Prices](https://stripe.com/docs/billing/prices-guide)
"""
type Product14 {
  """Whether the product is currently available for purchase."""
  active: Boolean!
  """Time at which the object was created. Measured in seconds since the Unix epoch."""
  created: Int!
  """The product's description, meant to be displayable to the customer. Use this field to optionally store a long form explanation of the product being sold for your own rendering purposes."""
  description: String
  """Unique identifier for the object."""
  id: String!
  """A list of up to 8 URLs of images for this product, meant to be displayable to the customer."""
  images: [String]!
  """Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."""
  livemode: Boolean!
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."""
  metadata: JSON!
  """The product's name, meant to be displayable to the customer. Whenever this product is sold via a subscription, name will show up on associated invoice line item descriptions."""
  name: String!
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object63!
  """The dimensions of this product for shipping purposes."""
  packageDimensions: PackageDimensions
  """Whether this product is shipped (i.e., physical goods)."""
  shippable: Boolean
  """Extra information about a product which will appear on your customer's credit card statement. In the case that multiple products are billed at once, the first statement descriptor will be used."""
  statementDescriptor: String
  """A [tax code](https://stripe.com/docs/tax/tax-codes) ID."""
  taxCode: JSON
  """A label that represents units of this product in Stripe and on customers’ receipts and invoices. When set, this will be included in associated invoice line item descriptions."""
  unitLabel: String
  """Time at which the object was last updated. Measured in seconds since the Unix epoch."""
  updated: Int!
  """A URL of a publicly-accessible webpage for this product."""
  url: String
}

enum Object63 {
  PRODUCT
}

"""The dimensions of this product for shipping purposes."""
type PackageDimensions {
  """Height, in inches."""
  height: Float
  """Length, in inches."""
  length: Float
  """Weight, in ounces."""
  weight: Float
  """Width, in inches."""
  width: Float
}

type V1PromotionCodes2 {
  data: [PromotionCode11]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

"""
A Promotion Code represents a customer-redeemable code for a coupon. It can be used to
create multiple codes for a single coupon.
"""
type PromotionCode11 {
  """Whether the promotion code is currently active. A promotion code is only active if the coupon is also valid."""
  active: Boolean!
  """The customer-facing code. Regardless of case, this code must be unique across all active promotion codes for each customer."""
  code: String!
  """
  A coupon contains information about a percent-off or amount-off discount you
  might want to apply to a customer. Coupons may be applied to [invoices](https://stripe.com/docs/api#invoices) or
  [orders](https://stripe.com/docs/api#create_order-coupon). Coupons do not work with conventional one-off [charges](https://stripe.com/docs/api#create_charge).
  """
  coupon: Coupon!
  """Time at which the object was created. Measured in seconds since the Unix epoch."""
  created: Int!
  """The customer that this promotion code can be used by."""
  customer: JSON
  """Date at which the promotion code can no longer be redeemed."""
  expiresAt: Int
  """Unique identifier for the object."""
  id: String!
  """Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."""
  livemode: Boolean!
  """Maximum number of times this promotion code can be redeemed."""
  maxRedemptions: Int
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."""
  metadata: JSON
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object64!
  restrictions: PromotionCodesResourceRestrictions!
  """Number of times this promotion code has been used."""
  timesRedeemed: Int!
}

enum Object64 {
  PROMOTION_CODE
}

type PromotionCodesResourceRestrictions {
  """A Boolean indicating if the Promotion Code should only be redeemed for Customers without any successful payments or invoices"""
  firstTimeTransaction: Boolean!
  """Minimum amount required to redeem this Promotion Code into a Coupon (e.g., a purchase must be $100 or more to work)."""
  minimumAmount: Int
  """Three-letter [ISO code](https://stripe.com/docs/currencies) for minimum_amount"""
  minimumAmountCurrency: String
}

type V1Quotes2 {
  data: [Quote2]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

"""
A Quote is a way to model prices that you'd like to provide to a customer.
Once accepted, it will automatically create an invoice, subscription or subscription schedule.
"""
type Quote2 {
  """Total before any discounts or taxes are applied."""
  amountSubtotal: Int!
  """Total after discounts and taxes are applied."""
  amountTotal: Int!
  """The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. Only applicable if there are no line items with recurring prices on the quote."""
  applicationFeeAmount: Int
  """A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account. Only applicable if there are line items with recurring prices on the quote."""
  applicationFeePercent: Float
  automaticTax: QuotesResourceAutomaticTax!
  """Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay invoices at the end of the subscription cycle or on finalization using the default payment method attached to the subscription or customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions. Defaults to `charge_automatically`."""
  collectionMethod: CollectionMethod6!
  computed: QuotesResourceComputed!
  """Time at which the object was created. Measured in seconds since the Unix epoch."""
  created: Int!
  """Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."""
  currency: String
  """The customer which this quote belongs to. A customer is required before finalizing the quote. Once specified, it cannot be changed."""
  customer: JSON
  """The tax rates applied to this quote."""
  defaultTaxRates: [JSON]
  """A description that will be displayed on the quote PDF."""
  description: String
  """The discounts applied to this quote."""
  discounts: [JSON]!
  """The date on which the quote will be canceled if in `open` or `draft` status. Measured in seconds since the Unix epoch."""
  expiresAt: Int!
  """A footer that will be displayed on the quote PDF."""
  footer: String
  """Details of the quote that was cloned. See the [cloning documentation](https://stripe.com/docs/quotes/clone) for more details."""
  fromQuote: FromQuote
  """A header that will be displayed on the quote PDF."""
  header: String
  """Unique identifier for the object."""
  id: String!
  """The invoice that was created from this quote."""
  invoice: JSON
  """All invoices will be billed using the specified settings."""
  invoiceSettings: InvoiceSettings3
  """A list of items the customer is being quoted for."""
  lineItems: LineItems3
  """Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."""
  livemode: Boolean!
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."""
  metadata: JSON!
  """A unique number that identifies this particular quote. This number is assigned once the quote is [finalized](https://stripe.com/docs/quotes/overview#finalize)."""
  number: String
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object65!
  """The account on behalf of which to charge. See the [Connect documentation](https://support.stripe.com/questions/sending-invoices-on-behalf-of-connected-accounts) for details."""
  onBehalfOf: JSON
  """The status of the quote."""
  status: Status40!
  statusTransitions: QuotesResourceStatusTransitions!
  """The subscription that was created or updated from this quote."""
  subscription: JSON
  subscriptionData: QuotesResourceSubscriptionData!
  """The subscription schedule that was created or updated from this quote."""
  subscriptionSchedule: JSON
  totalDetails: QuotesResourceTotalDetails!
  """The account (if any) the payments will be attributed to for tax reporting, and where funds from each payment will be transferred to for each of the invoices."""
  transferData: TransferData12
}

type QuotesResourceAutomaticTax {
  """Automatically calculate taxes"""
  enabled: Boolean!
  """The status of the most recent automated tax calculation for this quote."""
  status: Status39
}

enum Status39 {
  COMPLETE
  FAILED
  REQUIRES_LOCATION_INPUTS
}

enum CollectionMethod6 {
  CHARGE_AUTOMATICALLY
  SEND_INVOICE
}

type QuotesResourceComputed {
  """The definitive totals and line items the customer will be charged on a recurring basis. Takes into account the line items with recurring prices and discounts with `duration=forever` coupons only. Defaults to `null` if no inputted line items with recurring prices."""
  recurring: Recurring3
  upfront: QuotesResourceUpfront!
}

"""The definitive totals and line items the customer will be charged on a recurring basis. Takes into account the line items with recurring prices and discounts with `duration=forever` coupons only. Defaults to `null` if no inputted line items with recurring prices."""
type Recurring3 {
  """Total before any discounts or taxes are applied."""
  amountSubtotal: Int
  """Total after discounts and taxes are applied."""
  amountTotal: Int
  """The frequency at which a subscription is billed. One of `day`, `week`, `month` or `year`."""
  interval: Interval4
  """The number of intervals (specified in the `interval` attribute) between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months."""
  intervalCount: Int
  totalDetails: TotalDetails2
}

type TotalDetails2 {
  """This is the sum of all the line item discounts."""
  amountDiscount: Int!
  """This is the sum of all the line item shipping amounts."""
  amountShipping: Int
  """This is the sum of all the line item tax amounts."""
  amountTax: Int!
  breakdown: QuotesResourceTotalDetailsResourceBreakdown
}

type QuotesResourceTotalDetailsResourceBreakdown {
  """The aggregated line item discounts."""
  discounts: [LineItemsDiscountAmount]!
  """The aggregated line item tax amounts by rate."""
  taxes: [LineItemsTaxAmount]!
}

type QuotesResourceUpfront {
  """Total before any discounts or taxes are applied."""
  amountSubtotal: Int!
  """Total after discounts and taxes are applied."""
  amountTotal: Int!
  """The line items that will appear on the next invoice after this quote is accepted. This does not include pending invoice items that exist on the customer but may still be included in the next invoice."""
  lineItems: QuotesResourceListLineItems
  totalDetails: QuotesResourceTotalDetails!
}

"""The line items that will appear on the next invoice after this quote is accepted. This does not include pending invoice items that exist on the customer but may still be included in the next invoice."""
type QuotesResourceListLineItems {
  """Details about each object."""
  data: [Item]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

type QuotesResourceTotalDetails {
  """This is the sum of all the line item discounts."""
  amountDiscount: Int!
  """This is the sum of all the line item shipping amounts."""
  amountShipping: Int
  """This is the sum of all the line item tax amounts."""
  amountTax: Int!
  breakdown: QuotesResourceTotalDetailsResourceBreakdown
}

"""Details of the quote that was cloned. See the [cloning documentation](https://stripe.com/docs/quotes/clone) for more details."""
type FromQuote {
  """Whether this quote is a revision of a different quote."""
  isRevision: Boolean
  """The quote that was cloned."""
  quote: JSON
}

"""All invoices will be billed using the specified settings."""
type InvoiceSettings3 {
  """Number of days within which a customer must pay invoices generated by this quote. This value will be `null` for quotes where `collection_method=charge_automatically`."""
  daysUntilDue: Int
}

"""A list of items the customer is being quoted for."""
type LineItems3 {
  """Details about each object."""
  data: [Item]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

enum Object65 {
  QUOTE
}

enum Status40 {
  ACCEPTED
  CANCELED
  DRAFT
  OPEN
}

type QuotesResourceStatusTransitions {
  """The time that the quote was accepted. Measured in seconds since Unix epoch."""
  acceptedAt: Int
  """The time that the quote was canceled. Measured in seconds since Unix epoch."""
  canceledAt: Int
  """The time that the quote was finalized. Measured in seconds since Unix epoch."""
  finalizedAt: Int
}

type QuotesResourceSubscriptionData {
  """When creating a new subscription, the date of which the subscription schedule will start after the quote is accepted. This date is ignored if it is in the past when the quote is accepted. Measured in seconds since the Unix epoch."""
  effectiveDate: Int
  """Integer representing the number of trial period days before the customer is charged for the first time."""
  trialPeriodDays: Int
}

"""The account (if any) the payments will be attributed to for tax reporting, and where funds from each payment will be transferred to for each of the invoices."""
type TransferData12 {
  """The amount in %s that will be transferred to the destination account when the invoice is paid. By default, the entire amount is transferred to the destination."""
  amount: Int
  """A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the destination account. By default, the entire amount will be transferred to the destination."""
  amountPercent: Float
  """The account where funds from the payment will be transferred to upon payment success."""
  destination: JSON
}

enum Status63 {
  ACCEPTED
  CANCELED
  DRAFT
  OPEN
}

type QuotesResourceListLineItems2 {
  """Details about each object."""
  data: [Item]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

type RadarEarlyFraudWarningList {
  data: [RadarEarlyFraudWarning]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

"""
An early fraud warning indicates that the card issuer has notified us that a
charge may be fraudulent.

Related guide: [Early Fraud Warnings](https://stripe.com/docs/disputes/measuring#early-fraud-warnings).
"""
type RadarEarlyFraudWarning {
  """An EFW is actionable if it has not received a dispute and has not been fully refunded. You may wish to proactively refund a charge that receives an EFW, in order to avoid receiving a dispute later."""
  actionable: Boolean!
  """ID of the charge this early fraud warning is for, optionally expanded."""
  charge: JSON!
  """Time at which the object was created. Measured in seconds since the Unix epoch."""
  created: Int!
  """The type of fraud labelled by the issuer. One of `card_never_received`, `fraudulent_card_application`, `made_with_counterfeit_card`, `made_with_lost_card`, `made_with_stolen_card`, `misc`, `unauthorized_use_of_card`."""
  fraudType: String!
  """Unique identifier for the object."""
  id: String!
  """Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."""
  livemode: Boolean!
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object66!
  """ID of the Payment Intent this early fraud warning is for, optionally expanded."""
  paymentIntent: JSON
}

enum Object66 {
  RADAR_EARLY_FRAUD_WARNING
}

type V1RadarValueListItems2 {
  data: [RadarValueListItem]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

"""
Value list items allow you to add specific values to a given Radar value list, which can then be used in rules.

Related guide: [Managing List Items](https://stripe.com/docs/radar/lists#managing-list-items).
"""
type RadarValueListItem {
  """Time at which the object was created. Measured in seconds since the Unix epoch."""
  created: Int!
  """The name or email address of the user who added this item to the value list."""
  createdBy: String!
  """Unique identifier for the object."""
  id: String!
  """Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."""
  livemode: Boolean!
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object67!
  """The value of the item."""
  value: String!
  """The identifier of the value list this item belongs to."""
  valueList: String!
}

enum Object67 {
  RADAR_VALUE_LIST_ITEM
}

type V1RadarValueLists2 {
  data: [RadarValueList]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

"""
Value lists allow you to group values together which can then be referenced in rules.

Related guide: [Default Stripe Lists](https://stripe.com/docs/radar/lists#managing-list-items).
"""
type RadarValueList {
  """The name of the value list for use in rules."""
  alias: String!
  """Time at which the object was created. Measured in seconds since the Unix epoch."""
  created: Int!
  """The name or email address of the user who created this value list."""
  createdBy: String!
  """Unique identifier for the object."""
  id: String!
  """The type of items in the value list. One of `card_fingerprint`, `card_bin`, `email`, `ip_address`, `country`, `string`, or `case_sensitive_string`."""
  itemType: ItemType!
  """List of items contained within this value list."""
  listItems: ListItems!
  """Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."""
  livemode: Boolean!
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."""
  metadata: JSON!
  """The name of the value list."""
  name: String!
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object68!
}

enum ItemType {
  CARD_BIN
  CARD_FINGERPRINT
  CASE_SENSITIVE_STRING
  COUNTRY
  EMAIL
  IP_ADDRESS
  STRING
}

"""List of items contained within this value list."""
type ListItems {
  """Details about each object."""
  data: [RadarValueListItem]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

enum Object68 {
  RADAR_VALUE_LIST
}

type V1Recipients2 {
  data: [Recipient10]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

"""
With `Recipient` objects, you can transfer money from your Stripe account to a
third-party bank account or debit card. The API allows you to create, delete,
and update your recipients. You can retrieve individual recipients as well as
a list of all your recipients.

**`Recipient` objects have been deprecated in favor of
[Connect](https://stripe.com/docs/connect), specifically Connect's much more powerful
[Account objects](https://stripe.com/docs/api#account). Stripe accounts that don't already use
recipients can no longer begin doing so. Please use `Account` objects
instead.**
"""
type Recipient10 {
  """Hash describing the current account on the recipient, if there is one."""
  activeAccount: ActiveAccount
  cards: Cards
  """Time at which the object was created. Measured in seconds since the Unix epoch."""
  created: Int!
  """The default card to use for creating transfers to this recipient."""
  defaultCard: JSON
  """An arbitrary string attached to the object. Often useful for displaying to users."""
  description: String
  email: String
  """Unique identifier for the object."""
  id: String!
  """Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."""
  livemode: Boolean!
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."""
  metadata: JSON!
  """The ID of the [Custom account](https://stripe.com/docs/connect/custom-accounts) this recipient was migrated to. If set, the recipient can no longer be updated, nor can transfers be made to it: use the Custom account instead."""
  migratedTo: JSON
  """Full, legal name of the recipient."""
  name: String
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object69!
  rolledBackFrom: JSON
  """Type of the recipient, one of `individual` or `corporation`."""
  type: String!
}

"""Hash describing the current account on the recipient, if there is one."""
type ActiveAccount {
  """The ID of the account that the bank account is associated with."""
  account: JSON
  """The name of the person or business that owns the bank account."""
  accountHolderName: String
  """The type of entity that holds the account. This can be either `individual` or `company`."""
  accountHolderType: String
  """The bank account type. This can only be `checking` or `savings` in most countries. In Japan, this can only be `futsu` or `toza`."""
  accountType: String
  """A set of available payout methods for this bank account. Only values from this set should be passed as the `method` when creating a payout."""
  availablePayoutMethods: [AvailablePayoutMethods2ListItem]
  """Name of the bank associated with the routing number (e.g., `WELLS FARGO`)."""
  bankName: String
  """Two-letter ISO code representing the country the bank account is located in."""
  country: String
  """Three-letter [ISO code for the currency](https://stripe.com/docs/payouts) paid out to the bank account."""
  currency: String
  """The ID of the customer that the bank account is associated with."""
  customer: JSON
  """Whether this bank account is the default external account for its currency."""
  defaultForCurrency: Boolean
  """Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same."""
  fingerprint: String
  """Unique identifier for the object."""
  id: String
  """The last four digits of the bank account number."""
  last4: String
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."""
  metadata: JSON
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object35
  """The routing transit number for the bank account."""
  routingNumber: String
  """
  For bank accounts, possible values are `new`, `validated`, `verified`, `verification_failed`, or `errored`. A bank account that hasn't had any activity or validation performed is `new`. If Stripe can determine that the bank account exists, its status will be `validated`. Note that there often isn’t enough information to know (e.g., for smaller credit unions), and the validation is not always run. If customer bank account verification has succeeded, the bank account status will be `verified`. If the verification failed for any reason, such as microdeposit failure, the status will be `verification_failed`. If a transfer sent to this bank account fails, we'll set the status to `errored` and will not continue to send transfers until the bank details are updated.
  
  For external accounts, possible values are `new` and `errored`. Validations aren't run against external accounts because they're only used for payouts. This means the other statuses don't apply. If a transfer fails, the status is set to `errored` and transfers are stopped until account details are updated.
  """
  status: String
}

type Cards {
  data: [Card2]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

enum Object69 {
  RECIPIENT
}

enum Type74 {
  CORPORATION
  INDIVIDUAL
}

type V1Recipient2 {
  """Hash describing the current account on the recipient, if there is one."""
  activeAccount: ActiveAccount
  cards: Cards
  """Time at which the object was created. Measured in seconds since the Unix epoch."""
  created: Int
  """The default card to use for creating transfers to this recipient."""
  defaultCard: JSON
  """Always true for a deleted object"""
  deleted: Deleted
  """An arbitrary string attached to the object. Often useful for displaying to users."""
  description: String
  email: String
  """Unique identifier for the object."""
  id: String
  """Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."""
  livemode: Boolean
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."""
  metadata: JSON
  """The ID of the [Custom account](https://stripe.com/docs/connect/custom-accounts) this recipient was migrated to. If set, the recipient can no longer be updated, nor can transfers be made to it: use the Custom account instead."""
  migratedTo: JSON
  """Full, legal name of the recipient."""
  name: String
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object69
  rolledBackFrom: JSON
  """Type of the recipient, one of `individual` or `corporation`."""
  type: String
}

type V1Refunds2 {
  data: [Refund]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

type V1ReportingReportRuns2 {
  data: [ReportingReportRun]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

"""
The Report Run object represents an instance of a report type generated with
specific run parameters. Once the object is created, Stripe begins processing the report.
When the report has finished running, it will give you a reference to a file
where you can retrieve your results. For an overview, see
[API Access to Reports](https://stripe.com/docs/reporting/statements/api).

Note that certain report types can only be run based on your live-mode data (not test-mode
data), and will error when queried without a [live-mode API key](https://stripe.com/docs/keys#test-live-modes).
"""
type ReportingReportRun {
  """Time at which the object was created. Measured in seconds since the Unix epoch."""
  created: Int!
  """
  If something should go wrong during the run, a message about the failure (populated when
   `status=failed`).
  """
  error: String
  """Unique identifier for the object."""
  id: String!
  """`true` if the report is run on live mode data and `false` if it is run on test mode data."""
  livemode: Boolean!
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object70!
  parameters: FinancialReportingFinanceReportRunRunParameters!
  """The ID of the [report type](https://stripe.com/docs/reports/report-types) to run, such as `"balance.summary.1"`."""
  reportType: String!
  """
  The file object representing the result of the report run (populated when
   `status=succeeded`).
  """
  result: Result2
  """
  Status of this report run. This will be `pending` when the run is initially created.
   When the run finishes, this will be set to `succeeded` and the `result` field will be populated.
   Rarely, we may encounter an error, at which point this will be set to `failed` and the `error` field will be populated.
  """
  status: String!
  """
  Timestamp at which this run successfully finished (populated when
   `status=succeeded`). Measured in seconds since the Unix epoch.
  """
  succeededAt: Int
}

enum Object70 {
  REPORTING_REPORT_RUN
}

type FinancialReportingFinanceReportRunRunParameters {
  """The set of output columns requested for inclusion in the report run."""
  columns: [String]
  """Connected account ID by which to filter the report run."""
  connectedAccount: String
  """Currency of objects to be included in the report run."""
  currency: String
  """Ending timestamp of data to be included in the report run (exclusive)."""
  intervalEnd: Int
  """Starting timestamp of data to be included in the report run."""
  intervalStart: Int
  """Payout ID by which to filter the report run."""
  payout: String
  """Category of balance transactions to be included in the report run."""
  reportingCategory: String
  """Defaults to `Etc/UTC`. The output timezone for all timestamps in the report. A list of possible time zone values is maintained at the [IANA Time Zone Database](http://www.iana.org/time-zones). Has no effect on `interval_start` or `interval_end`."""
  timezone: String
}

"""
The file object representing the result of the report run (populated when
 `status=succeeded`).
"""
type Result2 {
  """Time at which the object was created. Measured in seconds since the Unix epoch."""
  created: Int
  """The time at which the file expires and is no longer available in epoch seconds."""
  expiresAt: Int
  """A filename for the file, suitable for saving to a filesystem."""
  filename: String
  """Unique identifier for the object."""
  id: String
  """A list of [file links](https://stripe.com/docs/api#file_links) that point at this file."""
  links: Links
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object41
  """The [purpose](https://stripe.com/docs/file-upload#uploading-a-file) of the uploaded file."""
  purpose: Purpose
  """The size in bytes of the file object."""
  size: Int
  """A user friendly title for the document."""
  title: String
  """The type of the file returned (e.g., `csv`, `pdf`, `jpg`, or `png`)."""
  type: String
  """The URL from which the file can be downloaded using your live secret API key."""
  url: String
}

type FinancialReportingFinanceReportTypeList {
  data: [ReportingReportType]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

"""
The Report Type resource corresponds to a particular type of report, such as
the "Activity summary" or "Itemized payouts" reports. These objects are
identified by an ID belonging to a set of enumerated values. See
[API Access to Reports documentation](https://stripe.com/docs/reporting/statements/api)
for those Report Type IDs, along with required and optional parameters.

Note that certain report types can only be run based on your live-mode data (not test-mode
data), and will error when queried without a [live-mode API key](https://stripe.com/docs/keys#test-live-modes).
"""
type ReportingReportType {
  """Most recent time for which this Report Type is available. Measured in seconds since the Unix epoch."""
  dataAvailableEnd: Int!
  """Earliest time for which this Report Type is available. Measured in seconds since the Unix epoch."""
  dataAvailableStart: Int!
  """List of column names that are included by default when this Report Type gets run. (If the Report Type doesn't support the `columns` parameter, this will be null.)"""
  defaultColumns: [String]
  """The [ID of the Report Type](https://stripe.com/docs/reporting/statements/api#available-report-types), such as `balance.summary.1`."""
  id: String!
  """Human-readable name of the Report Type"""
  name: String!
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object71!
  """When this Report Type was latest updated. Measured in seconds since the Unix epoch."""
  updated: Int!
  """Version of the Report Type. Different versions report with the same ID will have the same purpose, but may take different run parameters or have different result schemas."""
  version: Int!
}

enum Object71 {
  REPORTING_REPORT_TYPE
}

type V1Reviews2 {
  data: [Review3]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

"""
Reviews can be used to supplement automated fraud detection with human expertise.

Learn more about [Radar](/radar) and reviewing payments
[here](https://stripe.com/docs/radar/reviews).
"""
type Review3 {
  """The ZIP or postal code of the card used, if applicable."""
  billingZip: String
  """The charge associated with this review."""
  charge: JSON
  """The reason the review was closed, or null if it has not yet been closed. One of `approved`, `refunded`, `refunded_as_fraud`, `disputed`, or `redacted`."""
  closedReason: ClosedReason
  """Time at which the object was created. Measured in seconds since the Unix epoch."""
  created: Int!
  """Unique identifier for the object."""
  id: String!
  """The IP address where the payment originated."""
  ipAddress: String
  """Information related to the location of the payment. Note that this information is an approximation and attempts to locate the nearest population center - it should not be used to determine a specific address."""
  ipAddressLocation: IpAddressLocation
  """Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."""
  livemode: Boolean!
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object72!
  """If `true`, the review needs action."""
  open: Boolean!
  """The reason the review was opened. One of `rule` or `manual`."""
  openedReason: OpenedReason!
  """The PaymentIntent ID associated with this review, if one exists."""
  paymentIntent: JSON
  """The reason the review is currently open or closed. One of `rule`, `manual`, `approved`, `refunded`, `refunded_as_fraud`, `disputed`, or `redacted`."""
  reason: String!
  """Information related to the browsing session of the user who initiated the payment."""
  session: Session
}

enum ClosedReason {
  APPROVED
  DISPUTED
  REDACTED
  REFUNDED
  REFUNDED_AS_FRAUD
}

"""Information related to the location of the payment. Note that this information is an approximation and attempts to locate the nearest population center - it should not be used to determine a specific address."""
type IpAddressLocation {
  """The city where the payment originated."""
  city: String
  """Two-letter ISO code representing the country where the payment originated."""
  country: String
  """The geographic latitude where the payment originated."""
  latitude: Float
  """The geographic longitude where the payment originated."""
  longitude: Float
  """The state/county/province/region where the payment originated."""
  region: String
}

enum Object72 {
  REVIEW
}

enum OpenedReason {
  MANUAL
  RULE
}

"""Information related to the browsing session of the user who initiated the payment."""
type Session {
  """The browser used in this browser session (e.g., `Chrome`)."""
  browser: String
  """Information about the device used for the browser session (e.g., `Samsung SM-G930T`)."""
  device: String
  """The platform for the browser session (e.g., `Macintosh`)."""
  platform: String
  """The version for the browser session (e.g., `61.0.3163.100`)."""
  version: String
}

type PaymentFlowsSetupIntentSetupAttemptList {
  data: [SetupAttempt3]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

"""
A SetupAttempt describes one attempted confirmation of a SetupIntent,
whether that confirmation was successful or unsuccessful. You can use
SetupAttempts to inspect details of a specific attempt at setting up a
payment method using a SetupIntent.
"""
type SetupAttempt3 {
  """The value of [application](https://stripe.com/docs/api/setup_intents/object#setup_intent_object-application) on the SetupIntent at the time of this confirmation."""
  application: JSON
  """Time at which the object was created. Measured in seconds since the Unix epoch."""
  created: Int!
  """The value of [customer](https://stripe.com/docs/api/setup_intents/object#setup_intent_object-customer) on the SetupIntent at the time of this confirmation."""
  customer: JSON
  """Unique identifier for the object."""
  id: String!
  """Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."""
  livemode: Boolean!
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object73!
  """The value of [on_behalf_of](https://stripe.com/docs/api/setup_intents/object#setup_intent_object-on_behalf_of) on the SetupIntent at the time of this confirmation."""
  onBehalfOf: JSON
  """ID of the payment method used with this SetupAttempt."""
  paymentMethod: JSON!
  paymentMethodDetails: SetupAttemptPaymentMethodDetails!
  """The error encountered during this attempt to confirm the SetupIntent, if any."""
  setupError: SetupError
  """ID of the SetupIntent that this attempt belongs to."""
  setupIntent: JSON!
  """Status of this SetupAttempt, one of `requires_confirmation`, `requires_action`, `processing`, `succeeded`, `failed`, or `abandoned`."""
  status: String!
  """The value of [usage](https://stripe.com/docs/api/setup_intents/object#setup_intent_object-usage) on the SetupIntent at the time of this confirmation, one of `off_session` or `on_session`."""
  usage: String!
}

enum Object73 {
  SETUP_ATTEMPT
}

type SetupAttemptPaymentMethodDetails {
  acssDebit: JSON
  auBecsDebit: JSON
  bacsDebit: JSON
  bancontact: SetupAttemptPaymentMethodDetailsBancontact
  card: SetupAttemptPaymentMethodDetailsCard
  cardPresent: SetupAttemptPaymentMethodDetailsCardPresent
  ideal: SetupAttemptPaymentMethodDetailsIdeal
  sepaDebit: JSON
  sofort: SetupAttemptPaymentMethodDetailsSofort
  """The type of the payment method used in the SetupIntent (e.g., `card`). An additional hash is included on `payment_method_details` with a name matching this value. It contains confirmation-specific information for the payment method."""
  type: String!
}

type SetupAttemptPaymentMethodDetailsBancontact {
  """Bank code of bank associated with the bank account."""
  bankCode: String
  """Name of the bank associated with the bank account."""
  bankName: String
  """Bank Identifier Code of the bank associated with the bank account."""
  bic: String
  """The ID of the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt."""
  generatedSepaDebit: JSON
  """The mandate for the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt."""
  generatedSepaDebitMandate: JSON
  """Last four characters of the IBAN."""
  ibanLast4: String
  """
  Preferred language of the Bancontact authorization page that the customer is redirected to.
  Can be one of `en`, `de`, `fr`, or `nl`
  """
  preferredLanguage: PreferredLanguage
  """
  Owner's verified full name. Values are verified or provided by Bancontact directly
  (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  """
  verifiedName: String
}

type SetupAttemptPaymentMethodDetailsCard {
  """Populated if this authorization used 3D Secure authentication."""
  threeDSecure: ThreeDSecure6
}

"""Populated if this authorization used 3D Secure authentication."""
type ThreeDSecure6 {
  """
  For authenticated transactions: how the customer was authenticated by
  the issuing bank.
  """
  authenticationFlow: AuthenticationFlow
  """Indicates the outcome of 3D Secure authentication."""
  result: Result
  """
  Additional information about why 3D Secure succeeded or failed based
  on the `result`.
  """
  resultReason: ResultReason
  """The version of 3D Secure that was used."""
  version: Version
}

type SetupAttemptPaymentMethodDetailsCardPresent {
  """The ID of the Card PaymentMethod which was generated by this SetupAttempt."""
  generatedCard: JSON
}

type SetupAttemptPaymentMethodDetailsIdeal {
  """The customer's bank. Can be one of `abn_amro`, `asn_bank`, `bunq`, `handelsbanken`, `ing`, `knab`, `moneyou`, `rabobank`, `regiobank`, `revolut`, `sns_bank`, `triodos_bank`, or `van_lanschot`."""
  bank: Bank3
  """The Bank Identifier Code of the customer's bank."""
  bic: Bic3
  """The ID of the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt."""
  generatedSepaDebit: JSON
  """The mandate for the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt."""
  generatedSepaDebitMandate: JSON
  """Last four characters of the IBAN."""
  ibanLast4: String
  """
  Owner's verified full name. Values are verified or provided by iDEAL directly
  (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  """
  verifiedName: String
}

type SetupAttemptPaymentMethodDetailsSofort {
  """Bank code of bank associated with the bank account."""
  bankCode: String
  """Name of the bank associated with the bank account."""
  bankName: String
  """Bank Identifier Code of the bank associated with the bank account."""
  bic: String
  """The ID of the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt."""
  generatedSepaDebit: JSON
  """The mandate for the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt."""
  generatedSepaDebitMandate: JSON
  """Last four characters of the IBAN."""
  ibanLast4: String
  """
  Preferred language of the Sofort authorization page that the customer is redirected to.
  Can be one of `en`, `de`, `fr`, or `nl`
  """
  preferredLanguage: PreferredLanguage7
  """
  Owner's verified full name. Values are verified or provided by Sofort directly
  (if supported) at the time of authorization or settlement. They cannot be set or mutated.
  """
  verifiedName: String
}

enum PreferredLanguage7 {
  DE
  EN
  FR
  NL
}

"""The error encountered during this attempt to confirm the SetupIntent, if any."""
type SetupError {
  """For card errors, the ID of the failed charge."""
  charge: String
  """For some errors that could be handled programmatically, a short string indicating the [error code](https://stripe.com/docs/error-codes) reported."""
  code: String
  """For card errors resulting from a card issuer decline, a short string indicating the [card issuer's reason for the decline](https://stripe.com/docs/declines#issuer-declines) if they provide one."""
  declineCode: String
  """A URL to more information about the [error code](https://stripe.com/docs/error-codes) reported."""
  docUrl: String
  """A human-readable message providing more details about the error. For card errors, these messages can be shown to your users."""
  message: String
  """If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field."""
  param: String
  """
  A PaymentIntent guides you through the process of collecting a payment from your customer.
  We recommend that you create exactly one PaymentIntent for each order or
  customer session in your system. You can reference the PaymentIntent later to
  see the history of payment attempts for a particular session.
  
  A PaymentIntent transitions through
  [multiple statuses](https://stripe.com/docs/payments/intents#intent-statuses)
  throughout its lifetime as it interfaces with Stripe.js to perform
  authentication flows and ultimately creates at most one successful charge.
  
  Related guide: [Payment Intents API](https://stripe.com/docs/payments/payment-intents).
  """
  paymentIntent: PaymentIntent7
  """
  PaymentMethod objects represent your customer's payment instruments.
  They can be used with [PaymentIntents](https://stripe.com/docs/payments/payment-intents) to collect payments or saved to
  Customer objects to store instrument details for future payments.
  
  Related guides: [Payment Methods](https://stripe.com/docs/payments/payment-methods) and [More Payment Scenarios](https://stripe.com/docs/payments/more-payment-scenarios).
  """
  paymentMethod: PaymentMethod3
  """If the error is specific to the type of payment method, the payment method type that had a problem. This field is only populated for invoice-related errors."""
  paymentMethodType: String
  """
  A SetupIntent guides you through the process of setting up and saving a customer's payment credentials for future payments.
  For example, you could use a SetupIntent to set up and save your customer's card without immediately collecting a payment.
  Later, you can use [PaymentIntents](https://stripe.com/docs/api#payment_intents) to drive the payment flow.
  
  Create a SetupIntent as soon as you're ready to collect your customer's payment credentials.
  Do not maintain long-lived, unconfirmed SetupIntents as they may no longer be valid.
  The SetupIntent then transitions through multiple [statuses](https://stripe.com/docs/payments/intents#intent-statuses) as it guides
  you through the setup process.
  
  Successful SetupIntents result in payment credentials that are optimized for future payments.
  For example, cardholders in [certain regions](/guides/strong-customer-authentication) may need to be run through
  [Strong Customer Authentication](https://stripe.com/docs/strong-customer-authentication) at the time of payment method collection
  in order to streamline later [off-session payments](https://stripe.com/docs/payments/setup-intents).
  If the SetupIntent is used with a [Customer](https://stripe.com/docs/api#setup_intent_object-customer), upon success,
  it will automatically attach the resulting payment method to that Customer.
  We recommend using SetupIntents or [setup_future_usage](https://stripe.com/docs/api#payment_intent_object-setup_future_usage) on
  PaymentIntents to save payment methods in order to prevent saving invalid or unoptimized payment methods.
  
  By using SetupIntents, you ensure that your customers experience the minimum set of required friction,
  even as regulations change over time.
  
  Related guide: [Setup Intents API](https://stripe.com/docs/payments/setup-intents).
  """
  setupIntent: SetupIntent2
  """The source object for errors returned on a request involving a source."""
  source: Source9
  """The type of error returned. One of `api_error`, `card_error`, `idempotency_error`, or `invalid_request_error`"""
  type: Type30
}

type PaymentFlowsSetupIntentList {
  data: [SetupIntent2]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

type V1SigmaScheduledQueryRuns2 {
  data: [ScheduledQueryRun]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

"""
If you have [scheduled a Sigma query](https://stripe.com/docs/sigma/scheduled-queries), you'll
receive a `sigma.scheduled_query_run.created` webhook each time the query
runs. The webhook contains a `ScheduledQueryRun` object, which you can use to
retrieve the query results.
"""
type ScheduledQueryRun {
  """Time at which the object was created. Measured in seconds since the Unix epoch."""
  created: Int!
  """When the query was run, Sigma contained a snapshot of your Stripe data at this time."""
  dataLoadTime: Int!
  error: SigmaScheduledQueryRunError
  """The file object representing the results of the query."""
  file: File4
  """Unique identifier for the object."""
  id: String!
  """Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."""
  livemode: Boolean!
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object74!
  """Time at which the result expires and is no longer available for download."""
  resultAvailableUntil: Int!
  """SQL for the query."""
  sql: String!
  """The query's execution status, which will be `completed` for successful runs, and `canceled`, `failed`, or `timed_out` otherwise."""
  status: String!
  """Title of the query."""
  title: String!
}

type SigmaScheduledQueryRunError {
  """Information about the run failure."""
  message: String!
}

"""The file object representing the results of the query."""
type File4 {
  """Time at which the object was created. Measured in seconds since the Unix epoch."""
  created: Int
  """The time at which the file expires and is no longer available in epoch seconds."""
  expiresAt: Int
  """A filename for the file, suitable for saving to a filesystem."""
  filename: String
  """Unique identifier for the object."""
  id: String
  """A list of [file links](https://stripe.com/docs/api#file_links) that point at this file."""
  links: Links
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object41
  """The [purpose](https://stripe.com/docs/file-upload#uploading-a-file) of the uploaded file."""
  purpose: Purpose
  """The size in bytes of the file object."""
  size: Int
  """A user friendly title for the document."""
  title: String
  """The type of the file returned (e.g., `csv`, `pdf`, `jpg`, or `png`)."""
  type: String
  """The URL from which the file can be downloaded using your live secret API key."""
  url: String
}

enum Object74 {
  SCHEDULED_QUERY_RUN
}

type V1Skus2 {
  data: [Sku]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

"""
Stores representations of [stock keeping units](http://en.wikipedia.org/wiki/Stock_keeping_unit).
SKUs describe specific product variations, taking into account any combination of: attributes,
currency, and cost. For example, a product may be a T-shirt, whereas a specific SKU represents
the `size: large`, `color: red` version of that shirt.

Can also be used to manage inventory.

Related guide: [Tax, Shipping, and Inventory](https://stripe.com/docs/orders).
"""
type Sku {
  """Whether the SKU is available for purchase."""
  active: Boolean!
  """A dictionary of attributes and values for the attributes defined by the product. If, for example, a product's attributes are `["size", "gender"]`, a valid SKU has the following dictionary of attributes: `{"size": "Medium", "gender": "Unisex"}`."""
  attributes: JSON!
  """Time at which the object was created. Measured in seconds since the Unix epoch."""
  created: Int!
  """Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."""
  currency: String!
  """Unique identifier for the object."""
  id: String!
  """The URL of an image for this SKU, meant to be displayable to the customer."""
  image: String
  inventory: SkuInventory!
  """Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."""
  livemode: Boolean!
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."""
  metadata: JSON!
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object75!
  """The dimensions of this SKU for shipping purposes."""
  packageDimensions: PackageDimensions3
  """The cost of the item as a positive integer in the smallest currency unit (that is, 100 cents to charge $1.00, or 100 to charge ¥100, Japanese Yen being a zero-decimal currency)."""
  price: Int!
  """The ID of the product this SKU is associated with. The product must be currently active."""
  product: JSON!
  """Time at which the object was last updated. Measured in seconds since the Unix epoch."""
  updated: Int!
}

type SkuInventory {
  """The count of inventory available. Will be present if and only if `type` is `finite`."""
  quantity: Int
  """Inventory type. Possible values are `finite`, `bucket` (not quantified), and `infinite`."""
  type: String!
  """An indicator of the inventory available. Possible values are `in_stock`, `limited`, and `out_of_stock`. Will be present if and only if `type` is `bucket`."""
  value: String
}

enum Object75 {
  SKU
}

"""The dimensions of this SKU for shipping purposes."""
type PackageDimensions3 {
  """Height, in inches."""
  height: Float
  """Length, in inches."""
  length: Float
  """Weight, in ounces."""
  weight: Float
  """Width, in inches."""
  width: Float
}

type V1Skus4 {
  """Whether the SKU is available for purchase."""
  active: Boolean
  """A dictionary of attributes and values for the attributes defined by the product. If, for example, a product's attributes are `["size", "gender"]`, a valid SKU has the following dictionary of attributes: `{"size": "Medium", "gender": "Unisex"}`."""
  attributes: JSON
  """Time at which the object was created. Measured in seconds since the Unix epoch."""
  created: Int
  """Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."""
  currency: String
  """Always true for a deleted object"""
  deleted: Deleted
  """Unique identifier for the object."""
  id: String
  """The URL of an image for this SKU, meant to be displayable to the customer."""
  image: String
  inventory: Inventory2
  """Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."""
  livemode: Boolean
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."""
  metadata: JSON
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object75
  """The dimensions of this SKU for shipping purposes."""
  packageDimensions: PackageDimensions3
  """The cost of the item as a positive integer in the smallest currency unit (that is, 100 cents to charge $1.00, or 100 to charge ¥100, Japanese Yen being a zero-decimal currency)."""
  price: Int
  """The ID of the product this SKU is associated with. The product must be currently active."""
  product: JSON
  """Time at which the object was last updated. Measured in seconds since the Unix epoch."""
  updated: Int
}

type Inventory2 {
  """The count of inventory available. Will be present if and only if `type` is `finite`."""
  quantity: Int
  """Inventory type. Possible values are `finite`, `bucket` (not quantified), and `infinite`."""
  type: String!
  """An indicator of the inventory available. Possible values are `in_stock`, `limited`, and `out_of_stock`. Will be present if and only if `type` is `bucket`."""
  value: String
}

"""
`Source` objects allow you to accept a variety of payment methods. They
represent a customer's payment instrument, and can be used with the Stripe API
just like a `Card` object: once chargeable, they can be charged, or can be
attached to customers.

Related guides: [Sources API](https://stripe.com/docs/sources) and [Sources & Customers](https://stripe.com/docs/sources/customers).
"""
type Source12 {
  achCreditTransfer: SourceTypeAchCreditTransfer
  achDebit: SourceTypeAchDebit
  acssDebit: SourceTypeAcssDebit
  alipay: SourceTypeAlipay
  """A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount associated with the source. This is the amount for which the source will be chargeable once ready. Required for `single_use` sources."""
  amount: Int
  auBecsDebit: SourceTypeAuBecsDebit
  bancontact: SourceTypeBancontact
  card: SourceTypeCard
  cardPresent: SourceTypeCardPresent
  """The client secret of the source. Used for client-side retrieval using a publishable key."""
  clientSecret: String!
  codeVerification: SourceCodeVerificationFlow
  """Time at which the object was created. Measured in seconds since the Unix epoch."""
  created: Int!
  """Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) associated with the source. This is the currency for which the source will be chargeable once ready. Required for `single_use` sources."""
  currency: String
  """The ID of the customer to which this source is attached. This will not be present when the source has not been attached to a customer."""
  customer: String
  eps: SourceTypeEps
  """The authentication `flow` of the source. `flow` is one of `redirect`, `receiver`, `code_verification`, `none`."""
  flow: String!
  giropay: SourceTypeGiropay
  """Unique identifier for the object."""
  id: String!
  ideal: SourceTypeIdeal
  klarna: SourceTypeKlarna
  """Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."""
  livemode: Boolean!
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."""
  metadata: JSON
  multibanco: SourceTypeMultibanco
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object76!
  """Information about the owner of the payment instrument that may be used or required by particular source types."""
  owner: Owner3
  p24: SourceTypeP24
  receiver: SourceReceiverFlow
  redirect: SourceRedirectFlow
  sepaDebit: SourceTypeSepaDebit
  sofort: SourceTypeSofort
  sourceOrder: SourceOrder
  """Extra information about a source. This will appear on your customer's statement every time you charge the source."""
  statementDescriptor: String
  """The status of the source, one of `canceled`, `chargeable`, `consumed`, `failed`, or `pending`. Only `chargeable` sources can be used to create a charge."""
  status: String!
  threeDSecure: SourceTypeThreeDSecure
  """The `type` of the source. The `type` is a payment method, one of `ach_credit_transfer`, `ach_debit`, `alipay`, `bancontact`, `card`, `card_present`, `eps`, `giropay`, `ideal`, `multibanco`, `klarna`, `p24`, `sepa_debit`, `sofort`, `three_d_secure`, or `wechat`. An additional hash is included on the source with a name matching this value. It contains additional information specific to the [payment method](https://stripe.com/docs/sources) used."""
  type: Type18!
  """Either `reusable` or `single_use`. Whether this source should be reusable or not. Some source types may or may not be reusable by construction, while others may leave the option at creation. If an incompatible value is passed, an error will be returned."""
  usage: String
  wechat: SourceTypeWechat
}

type SourceTypeAchCreditTransfer {
  accountNumber: String
  bankName: String
  fingerprint: String
  refundAccountHolderName: String
  refundAccountHolderType: String
  refundRoutingNumber: String
  routingNumber: String
  swiftCode: String
}

type SourceTypeAchDebit {
  bankName: String
  country: String
  fingerprint: String
  last4: String
  routingNumber: String
  type: String
}

type SourceTypeAcssDebit {
  bankAddressCity: String
  bankAddressLine1: String
  bankAddressLine2: String
  bankAddressPostalCode: String
  bankName: String
  category: String
  country: String
  fingerprint: String
  last4: String
  routingNumber: String
}

type SourceTypeAlipay {
  dataString: String
  nativeUrl: String
  statementDescriptor: String
}

type SourceTypeAuBecsDebit {
  bsbNumber: String
  fingerprint: String
  last4: String
}

type SourceTypeBancontact {
  bankCode: String
  bankName: String
  bic: String
  ibanLast4: String
  preferredLanguage: String
  statementDescriptor: String
}

type SourceTypeCard {
  addressLine1Check: String
  addressZipCheck: String
  brand: String
  country: String
  cvcCheck: String
  dynamicLast4: String
  expMonth: Int
  expYear: Int
  fingerprint: String
  funding: String
  last4: String
  name: String
  threeDSecure: String
  tokenizationMethod: String
}

type SourceTypeCardPresent {
  applicationCryptogram: String
  applicationPreferredName: String
  authorizationCode: String
  authorizationResponseCode: String
  brand: String
  country: String
  cvmType: String
  dataType: String
  dedicatedFileName: String
  emvAuthData: String
  evidenceCustomerSignature: String
  evidenceTransactionCertificate: String
  expMonth: Int
  expYear: Int
  fingerprint: String
  funding: String
  last4: String
  posDeviceId: String
  posEntryMode: String
  readMethod: String
  reader: String
  terminalVerificationResults: String
  transactionStatusInformation: String
}

type SourceCodeVerificationFlow {
  """The number of attempts remaining to authenticate the source object with a verification code."""
  attemptsRemaining: Int!
  """The status of the code verification, either `pending` (awaiting verification, `attempts_remaining` should be greater than 0), `succeeded` (successful verification) or `failed` (failed verification, cannot be verified anymore as `attempts_remaining` should be 0)."""
  status: String!
}

type SourceTypeEps {
  reference: String
  statementDescriptor: String
}

type SourceTypeGiropay {
  bankCode: String
  bankName: String
  bic: String
  statementDescriptor: String
}

type SourceTypeIdeal {
  bank: String
  bic: String
  ibanLast4: String
  statementDescriptor: String
}

type SourceTypeKlarna {
  backgroundImageUrl: String
  clientToken: String
  firstName: String
  lastName: String
  locale: String
  logoUrl: String
  pageTitle: String
  payLaterAssetUrlsDescriptive: String
  payLaterAssetUrlsStandard: String
  payLaterName: String
  payLaterRedirectUrl: String
  payNowAssetUrlsDescriptive: String
  payNowAssetUrlsStandard: String
  payNowName: String
  payNowRedirectUrl: String
  payOverTimeAssetUrlsDescriptive: String
  payOverTimeAssetUrlsStandard: String
  payOverTimeName: String
  payOverTimeRedirectUrl: String
  paymentMethodCategories: String
  purchaseCountry: String
  purchaseType: String
  redirectUrl: String
  shippingDelay: Int
  shippingFirstName: String
  shippingLastName: String
}

type SourceTypeMultibanco {
  entity: String
  reference: String
  refundAccountHolderAddressCity: String
  refundAccountHolderAddressCountry: String
  refundAccountHolderAddressLine1: String
  refundAccountHolderAddressLine2: String
  refundAccountHolderAddressPostalCode: String
  refundAccountHolderAddressState: String
  refundAccountHolderName: String
  refundIban: String
}

enum Object76 {
  SOURCE
}

type SourceTypeP24 {
  reference: String
}

type SourceReceiverFlow {
  """The address of the receiver source. This is the value that should be communicated to the customer to send their funds to."""
  address: String
  """The total amount that was moved to your balance. This is almost always equal to the amount charged. In rare cases when customers deposit excess funds and we are unable to refund those, those funds get moved to your balance and show up in amount_charged as well. The amount charged is expressed in the source's currency."""
  amountCharged: Int!
  """The total amount received by the receiver source. `amount_received = amount_returned + amount_charged` should be true for consumed sources unless customers deposit excess funds. The amount received is expressed in the source's currency."""
  amountReceived: Int!
  """The total amount that was returned to the customer. The amount returned is expressed in the source's currency."""
  amountReturned: Int!
  """Type of refund attribute method, one of `email`, `manual`, or `none`."""
  refundAttributesMethod: String!
  """Type of refund attribute status, one of `missing`, `requested`, or `available`."""
  refundAttributesStatus: String!
}

type SourceRedirectFlow {
  """The failure reason for the redirect, either `user_abort` (the customer aborted or dropped out of the redirect flow), `declined` (the authentication failed or the transaction was declined), or `processing_error` (the redirect failed due to a technical error). Present only if the redirect status is `failed`."""
  failureReason: String
  """The URL you provide to redirect the customer to after they authenticated their payment."""
  returnUrl: String!
  """The status of the redirect, either `pending` (ready to be used by your customer to authenticate the transaction), `succeeded` (succesful authentication, cannot be reused) or `not_required` (redirect should not be used) or `failed` (failed authentication, cannot be reused)."""
  status: String!
  """The URL provided to you to redirect a customer to as part of a `redirect` authentication flow."""
  url: String!
}

type SourceTypeSepaDebit {
  bankCode: String
  branchCode: String
  country: String
  fingerprint: String
  last4: String
  mandateReference: String
  mandateUrl: String
}

type SourceTypeSofort {
  bankCode: String
  bankName: String
  bic: String
  country: String
  ibanLast4: String
  preferredLanguage: String
  statementDescriptor: String
}

type SourceTypeThreeDSecure {
  addressLine1Check: String
  addressZipCheck: String
  authenticated: Boolean
  brand: String
  card: String
  country: String
  customer: String
  cvcCheck: String
  dynamicLast4: String
  expMonth: Int
  expYear: Int
  fingerprint: String
  funding: String
  last4: String
  name: String
  threeDSecure: String
  tokenizationMethod: String
}

type SourceTypeWechat {
  prepayId: String
  qrCodeUrl: String
  statementDescriptor: String
}

"""
Source mandate notifications should be created when a notification related to
a source mandate must be sent to the payer. They will trigger a webhook or
deliver an email to the customer.
"""
type SourceMandateNotification {
  acssDebit: SourceMandateNotificationAcssDebitData
  """A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the amount associated with the mandate notification. The amount is expressed in the currency of the underlying source. Required if the notification type is `debit_initiated`."""
  amount: Int
  bacsDebit: SourceMandateNotificationBacsDebitData
  """Time at which the object was created. Measured in seconds since the Unix epoch."""
  created: Int!
  """Unique identifier for the object."""
  id: String!
  """Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."""
  livemode: Boolean!
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object77!
  """The reason of the mandate notification. Valid reasons are `mandate_confirmed` or `debit_initiated`."""
  reason: String!
  sepaDebit: SourceMandateNotificationSepaDebitData
  """
  `Source` objects allow you to accept a variety of payment methods. They
  represent a customer's payment instrument, and can be used with the Stripe API
  just like a `Card` object: once chargeable, they can be charged, or can be
  attached to customers.
  
  Related guides: [Sources API](https://stripe.com/docs/sources) and [Sources & Customers](https://stripe.com/docs/sources/customers).
  """
  source: Source12!
  """The status of the mandate notification. Valid statuses are `pending` or `submitted`."""
  status: String!
  """The type of source this mandate notification is attached to. Should be the source type identifier code for the payment method, such as `three_d_secure`."""
  type: String!
}

type SourceMandateNotificationAcssDebitData {
  """The statement descriptor associate with the debit."""
  statementDescriptor: String
}

type SourceMandateNotificationBacsDebitData {
  """Last 4 digits of the account number associated with the debit."""
  last4: String
}

enum Object77 {
  SOURCE_MANDATE_NOTIFICATION
}

type SourceMandateNotificationSepaDebitData {
  """SEPA creditor ID."""
  creditorIdentifier: String
  """Last 4 digits of the account number associated with the debit."""
  last4: String
  """Mandate reference associated with the debit."""
  mandateReference: String
}

type ApmsSourcesSourceTransactionList {
  data: [SourceTransaction]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

"""
Some payment methods have no required amount that a customer must send.
Customers can be instructed to send any amount, and it can be made up of
multiple transactions. As such, sources can have multiple associated
transactions.
"""
type SourceTransaction {
  achCreditTransfer: SourceTransactionAchCreditTransferData
  """A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the amount your customer has pushed to the receiver."""
  amount: Int!
  chfCreditTransfer: SourceTransactionChfCreditTransferData
  """Time at which the object was created. Measured in seconds since the Unix epoch."""
  created: Int!
  """Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."""
  currency: String!
  gbpCreditTransfer: SourceTransactionGbpCreditTransferData
  """Unique identifier for the object."""
  id: String!
  """Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."""
  livemode: Boolean!
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object78!
  paperCheck: SourceTransactionPaperCheckData
  sepaCreditTransfer: SourceTransactionSepaCreditTransferData
  """The ID of the source this transaction is attached to."""
  source: String!
  """The status of the transaction, one of `succeeded`, `pending`, or `failed`."""
  status: String!
  """The type of source this transaction is attached to."""
  type: Type63!
}

type SourceTransactionAchCreditTransferData {
  """Customer data associated with the transfer."""
  customerData: String
  """Bank account fingerprint associated with the transfer."""
  fingerprint: String
  """Last 4 digits of the account number associated with the transfer."""
  last4: String
  """Routing number associated with the transfer."""
  routingNumber: String
}

type SourceTransactionChfCreditTransferData {
  """Reference associated with the transfer."""
  reference: String
  """Sender's country address."""
  senderAddressCountry: String
  """Sender's line 1 address."""
  senderAddressLine1: String
  """Sender's bank account IBAN."""
  senderIban: String
  """Sender's name."""
  senderName: String
}

type SourceTransactionGbpCreditTransferData {
  """Bank account fingerprint associated with the Stripe owned bank account receiving the transfer."""
  fingerprint: String
  """The credit transfer rails the sender used to push this transfer. The possible rails are: Faster Payments, BACS, CHAPS, and wire transfers. Currently only Faster Payments is supported."""
  fundingMethod: String
  """Last 4 digits of sender account number associated with the transfer."""
  last4: String
  """Sender entered arbitrary information about the transfer."""
  reference: String
  """Sender account number associated with the transfer."""
  senderAccountNumber: String
  """Sender name associated with the transfer."""
  senderName: String
  """Sender sort code associated with the transfer."""
  senderSortCode: String
}

enum Object78 {
  SOURCE_TRANSACTION
}

type SourceTransactionPaperCheckData {
  """Time at which the deposited funds will be available for use. Measured in seconds since the Unix epoch."""
  availableAt: String
  """Comma-separated list of invoice IDs associated with the paper check."""
  invoices: String
}

type SourceTransactionSepaCreditTransferData {
  """Reference associated with the transfer."""
  reference: String
  """Sender's bank account IBAN."""
  senderIban: String
  """Sender's name."""
  senderName: String
}

enum Type63 {
  ACH_CREDIT_TRANSFER
  ACH_DEBIT
  ALIPAY
  BANCONTACT
  CARD
  CARD_PRESENT
  EPS
  GIROPAY
  IDEAL
  KLARNA
  MULTIBANCO
  P24
  SEPA_DEBIT
  SOFORT
  THREE_D_SECURE
  WECHAT
}

type V1SubscriptionItems2 {
  data: [SubscriptionItem]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

type V1SubscriptionItemUsageRecordSummaries2 {
  data: [UsageRecordSummary]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

type UsageRecordSummary {
  """Unique identifier for the object."""
  id: String!
  """The invoice in which this usage period has been billed for."""
  invoice: String
  """Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."""
  livemode: Boolean!
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object79!
  period: Period2!
  """The ID of the subscription item this summary is describing."""
  subscriptionItem: String!
  """The total usage within this usage period."""
  totalUsage: Int!
}

enum Object79 {
  USAGE_RECORD_SUMMARY
}

type Period2 {
  """The end date of this usage period. All usage up to and including this point in time is included."""
  end: Int
  """The start date of this usage period. All usage after this point in time is included."""
  start: Int
}

type V1SubscriptionSchedules2 {
  data: [SubscriptionSchedule2]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

"""
A subscription schedule allows you to create and manage the lifecycle of a subscription by predefining expected changes.

Related guide: [Subscription Schedules](https://stripe.com/docs/billing/subscriptions/subscription-schedules).
"""
type SubscriptionSchedule2 {
  """Time at which the subscription schedule was canceled. Measured in seconds since the Unix epoch."""
  canceledAt: Int
  """Time at which the subscription schedule was completed. Measured in seconds since the Unix epoch."""
  completedAt: Int
  """Time at which the object was created. Measured in seconds since the Unix epoch."""
  created: Int!
  """Object representing the start and end dates for the current phase of the subscription schedule, if it is `active`."""
  currentPhase: CurrentPhase
  """ID of the customer who owns the subscription schedule."""
  customer: JSON!
  defaultSettings: SubscriptionSchedulesResourceDefaultSettings!
  """Behavior of the subscription schedule and underlying subscription when it ends. Possible values are `release` and `cancel`."""
  endBehavior: EndBehavior!
  """Unique identifier for the object."""
  id: String!
  """Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."""
  livemode: Boolean!
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."""
  metadata: JSON
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object81!
  """Configuration for the subscription schedule's phases."""
  phases: [SubscriptionSchedulePhaseConfiguration]!
  """Time at which the subscription schedule was released. Measured in seconds since the Unix epoch."""
  releasedAt: Int
  """ID of the subscription once managed by the subscription schedule (if it is released)."""
  releasedSubscription: String
  """The present status of the subscription schedule. Possible values are `not_started`, `active`, `completed`, `released`, and `canceled`. You can read more about the different states in our [behavior guide](https://stripe.com/docs/billing/subscriptions/subscription-schedules)."""
  status: Status51!
  """ID of the subscription managed by the subscription schedule."""
  subscription: JSON
}

"""Object representing the start and end dates for the current phase of the subscription schedule, if it is `active`."""
type CurrentPhase {
  """The end of this phase of the subscription schedule."""
  endDate: Int
  """The start of this phase of the subscription schedule."""
  startDate: Int
}

type SubscriptionSchedulesResourceDefaultSettings {
  """A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account during this phase of the schedule."""
  applicationFeePercent: Float
  automaticTax: SubscriptionSchedulesResourceDefaultSettingsAutomaticTax
  """Possible values are `phase_start` or `automatic`. If `phase_start` then billing cycle anchor of the subscription is set to the start of the phase when entering the phase. If `automatic` then the billing cycle anchor is automatically modified as needed when entering the phase. For more information, see the billing cycle [documentation](https://stripe.com/docs/billing/subscriptions/billing-cycle)."""
  billingCycleAnchor: BillingCycleAnchor5!
  """Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period"""
  billingThresholds: BillingThresholds
  """Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay the underlying subscription at the end of each billing cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions."""
  collectionMethod: CollectionMethod8
  """ID of the default payment method for the subscription schedule. If not set, invoices will use the default payment method in the customer's invoice settings."""
  defaultPaymentMethod: JSON
  """The subscription schedule's default invoice settings."""
  invoiceSettings: InvoiceSettings4
  """The account (if any) the associated subscription's payments will be attributed to for tax reporting, and where funds from each payment will be transferred to for each of the subscription's invoices."""
  transferData: TransferData15
}

type SubscriptionSchedulesResourceDefaultSettingsAutomaticTax {
  """Whether Stripe automatically computes tax on invoices created during this phase."""
  enabled: Boolean!
}

enum BillingCycleAnchor5 {
  AUTOMATIC
  PHASE_START
}

enum CollectionMethod8 {
  CHARGE_AUTOMATICALLY
  SEND_INVOICE
}

"""The subscription schedule's default invoice settings."""
type InvoiceSettings4 {
  """Number of days within which a customer must pay invoices generated by this subscription schedule. This value will be `null` for subscription schedules where `billing=charge_automatically`."""
  daysUntilDue: Int
}

"""The account (if any) the associated subscription's payments will be attributed to for tax reporting, and where funds from each payment will be transferred to for each of the subscription's invoices."""
type TransferData15 {
  """A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the destination account. By default, the entire amount is transferred to the destination."""
  amountPercent: Float
  """The account where funds from the payment will be transferred to upon payment success."""
  destination: JSON
}

enum EndBehavior {
  CANCEL
  NONE
  RELEASE
  RENEW
}

enum Object81 {
  SUBSCRIPTION_SCHEDULE
}

"""A phase describes the plans, coupon, and trialing status of a subscription for a predefined time period."""
type SubscriptionSchedulePhaseConfiguration {
  """A list of prices and quantities that will generate invoice items appended to the first invoice for this phase."""
  addInvoiceItems: [SubscriptionScheduleAddInvoiceItem]!
  """A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account during this phase of the schedule."""
  applicationFeePercent: Float
  automaticTax: SchedulesPhaseAutomaticTax
  """Possible values are `phase_start` or `automatic`. If `phase_start` then billing cycle anchor of the subscription is set to the start of the phase when entering the phase. If `automatic` then the billing cycle anchor is automatically modified as needed when entering the phase. For more information, see the billing cycle [documentation](https://stripe.com/docs/billing/subscriptions/billing-cycle)."""
  billingCycleAnchor: BillingCycleAnchor6
  """Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period"""
  billingThresholds: BillingThresholds
  """Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay the underlying subscription at the end of each billing cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions."""
  collectionMethod: CollectionMethod8
  """ID of the coupon to use during this phase of the subscription schedule."""
  coupon: JSON
  """ID of the default payment method for the subscription schedule. It must belong to the customer associated with the subscription schedule. If not set, invoices will use the default payment method in the customer's invoice settings."""
  defaultPaymentMethod: JSON
  """The default tax rates to apply to the subscription during this phase of the subscription schedule."""
  defaultTaxRates: [TaxRate]
  """The end of this phase of the subscription schedule."""
  endDate: Int!
  """The invoice settings applicable during this phase."""
  invoiceSettings: InvoiceSettings5
  """Subscription items to configure the subscription to during this phase of the subscription schedule."""
  items: [SubscriptionScheduleConfigurationItem]!
  """If the subscription schedule will prorate when transitioning to this phase. Possible values are `create_prorations` and `none`."""
  prorationBehavior: ProrationBehavior6!
  """The start of this phase of the subscription schedule."""
  startDate: Int!
  """The account (if any) the associated subscription's payments will be attributed to for tax reporting, and where funds from each payment will be transferred to for each of the subscription's invoices."""
  transferData: TransferData15
  """When the trial ends within the phase."""
  trialEnd: Int
}

"""An Add Invoice Item describes the prices and quantities that will be added as pending invoice items when entering a phase."""
type SubscriptionScheduleAddInvoiceItem {
  """ID of the price used to generate the invoice item."""
  price: JSON!
  """The quantity of the invoice item."""
  quantity: Int
  """The tax rates which apply to the item. When set, the `default_tax_rates` do not apply to this item."""
  taxRates: [TaxRate]
}

type SchedulesPhaseAutomaticTax {
  """Whether Stripe automatically computes tax on invoices created during this phase."""
  enabled: Boolean!
}

enum BillingCycleAnchor6 {
  AUTOMATIC
  PHASE_START
}

"""The invoice settings applicable during this phase."""
type InvoiceSettings5 {
  """Number of days within which a customer must pay invoices generated by this subscription schedule. This value will be `null` for subscription schedules where `billing=charge_automatically`."""
  daysUntilDue: Int
}

"""A phase item describes the price and quantity of a phase."""
type SubscriptionScheduleConfigurationItem {
  """Define thresholds at which an invoice will be sent, and the related subscription advanced to a new billing period"""
  billingThresholds: BillingThresholds2
  """ID of the price to which the customer should be subscribed."""
  price: JSON!
  """Quantity of the plan to which the customer should be subscribed."""
  quantity: Int
  """The tax rates which apply to this `phase_item`. When set, the `default_tax_rates` on the phase do not apply to this `phase_item`."""
  taxRates: [TaxRate]
}

enum ProrationBehavior6 {
  ALWAYS_INVOICE
  CREATE_PRORATIONS
  NONE
}

enum Status51 {
  ACTIVE
  CANCELED
  COMPLETED
  NOT_STARTED
  RELEASED
}

type V1Subscriptions2 {
  data: [Subscription5]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

enum Status64 {
  ACTIVE
  ALL
  CANCELED
  ENDED
  INCOMPLETE
  INCOMPLETE_EXPIRED
  PAST_DUE
  TRIALING
  UNPAID
}

type TaxProductResourceTaxCodeList {
  data: [TaxCode6]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

"""[Tax codes](https://stripe.com/docs/tax/tax-codes) classify goods and services for tax purposes."""
type TaxCode6 {
  """A detailed description of which types of products the tax code represents."""
  description: String!
  """Unique identifier for the object."""
  id: String!
  """A short name for the tax code."""
  name: String!
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object82!
}

enum Object82 {
  TAX_CODE
}

type V1TaxRates2 {
  data: [TaxRate]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

type TerminalLocationLocationList {
  data: [TerminalLocation]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

"""
A Location represents a grouping of readers.

Related guide: [Fleet Management](https://stripe.com/docs/terminal/creating-locations).
"""
type TerminalLocation {
  address: Address!
  """The display name of the location."""
  displayName: String!
  """Unique identifier for the object."""
  id: String!
  """Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."""
  livemode: Boolean!
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."""
  metadata: JSON!
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object84!
}

enum Object84 {
  TERMINAL_LOCATION
}

type TerminalReaderRetrieveReader {
  """A list of readers"""
  data: [TerminalReader]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

"""
A Reader represents a physical device for accepting payment details.

Related guide: [Connecting to a Reader](https://stripe.com/docs/terminal/readers/connecting).
"""
type TerminalReader {
  """The current software version of the reader."""
  deviceSwVersion: String
  """Type of reader, one of `bbpos_chipper2x` or `verifone_P400`."""
  deviceType: DeviceType!
  """Unique identifier for the object."""
  id: String!
  """The local IP address of the reader."""
  ipAddress: String
  """Custom label given to the reader for easier identification."""
  label: String!
  """Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."""
  livemode: Boolean!
  """The location identifier of the reader."""
  location: JSON
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."""
  metadata: JSON!
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object85!
  """Serial number of the reader."""
  serialNumber: String!
  """The networking status of the reader."""
  status: String
}

enum DeviceType {
  BBPOS_CHIPPER2X
  VERIFONE_P400
}

enum Object85 {
  TERMINAL_READER
}

enum DeviceType2 {
  BBPOS_CHIPPER2X
  VERIFONE_P400
}

enum Status65 {
  OFFLINE
  ONLINE
}

"""
Tokenization is the process Stripe uses to collect sensitive card or bank
account details, or personally identifiable information (PII), directly from
your customers in a secure manner. A token representing this information is
returned to your server to use. You should use our
[recommended payments integrations](https://stripe.com/docs/payments) to perform this process
client-side. This ensures that no sensitive card data touches your server,
and allows your integration to operate in a PCI-compliant way.

If you cannot use client-side tokenization, you can also create tokens using
the API with either your publishable or secret API key. Keep in mind that if
your integration uses this method, you are responsible for any PCI compliance
that may be required, and you must keep your secret API key safe. Unlike with
client-side tokenization, your customer's information is not sent directly to
Stripe, so we cannot determine how it is handled or stored.

Tokens cannot be stored or used more than once. To store card or bank account
information for later use, you can create [Customer](https://stripe.com/docs/api#customers)
objects or [Custom accounts](https://stripe.com/docs/api#external_accounts). Note that
[Radar](https://stripe.com/docs/radar), our integrated solution for automatic fraud protection,
performs best with integrations that use client-side tokenization.

Related guide: [Accept a payment](https://stripe.com/docs/payments/accept-a-payment-charges#web-create-token)
"""
type Token3 {
  """
  These bank accounts are payment methods on `Customer` objects.
  
  On the other hand [External Accounts](https://stripe.com/docs/api#external_accounts) are transfer
  destinations on `Account` objects for [Custom accounts](https://stripe.com/docs/connect/custom-accounts).
  They can be bank accounts or debit cards as well, and are documented in the links above.
  
  Related guide: [Bank Debits and Transfers](https://stripe.com/docs/payments/bank-debits-transfers).
  """
  bankAccount: BankAccount7
  """
  You can store multiple cards on a customer in order to charge the customer
  later. You can also store multiple debit cards on a recipient in order to
  transfer to those cards later.
  
  Related guide: [Card Payments with Sources](https://stripe.com/docs/sources/cards).
  """
  card: Card2
  """IP address of the client that generated the token."""
  clientIp: String
  """Time at which the object was created. Measured in seconds since the Unix epoch."""
  created: Int!
  """Unique identifier for the object."""
  id: String!
  """Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."""
  livemode: Boolean!
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object86!
  """Type of the token: `account`, `bank_account`, `card`, or `pii`."""
  type: String!
  """Whether this token has already been used (tokens can be used only once)."""
  used: Boolean!
}

enum Object86 {
  TOKEN
}

type TopupList {
  data: [Topup]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

"""
To top up your Stripe balance, you create a top-up object. You can retrieve
individual top-ups, as well as list all top-ups. Top-ups are identified by a
unique, random ID.

Related guide: [Topping Up your Platform Account](https://stripe.com/docs/connect/top-ups).
"""
type Topup {
  """Amount transferred."""
  amount: Int!
  """ID of the balance transaction that describes the impact of this top-up on your account balance. May not be specified depending on status of top-up."""
  balanceTransaction: JSON
  """Time at which the object was created. Measured in seconds since the Unix epoch."""
  created: Int!
  """Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."""
  currency: String!
  """An arbitrary string attached to the object. Often useful for displaying to users."""
  description: String
  """Date the funds are expected to arrive in your Stripe account for payouts. This factors in delays like weekends or bank holidays. May not be specified depending on status of top-up."""
  expectedAvailabilityDate: Int
  """Error code explaining reason for top-up failure if available (see [the errors section](https://stripe.com/docs/api#errors) for a list of codes)."""
  failureCode: String
  """Message to user further explaining reason for top-up failure if available."""
  failureMessage: String
  """Unique identifier for the object."""
  id: String!
  """Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."""
  livemode: Boolean!
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."""
  metadata: JSON!
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object87!
  """
  `Source` objects allow you to accept a variety of payment methods. They
  represent a customer's payment instrument, and can be used with the Stripe API
  just like a `Card` object: once chargeable, they can be charged, or can be
  attached to customers.
  
  Related guides: [Sources API](https://stripe.com/docs/sources) and [Sources & Customers](https://stripe.com/docs/sources/customers).
  """
  source: Source12!
  """Extra information about a top-up. This will appear on your source's bank statement. It must contain at least one letter."""
  statementDescriptor: String
  """The status of the top-up is either `canceled`, `failed`, `pending`, `reversed`, or `succeeded`."""
  status: Status53!
  """A string that identifies this top-up as part of a group."""
  transferGroup: String
}

enum Object87 {
  TOPUP
}

enum Status53 {
  CANCELED
  FAILED
  PENDING
  REVERSED
  SUCCEEDED
}

enum Status66 {
  CANCELED
  FAILED
  PENDING
  SUCCEEDED
}

type TransferList {
  """Details about each object."""
  data: [Transfer2]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

"""
A `Transfer` object is created when you move funds between Stripe accounts as
part of Connect.

Before April 6, 2017, transfers also represented movement of funds from a
Stripe account to a card or bank account. This behavior has since been split
out into a [Payout](https://stripe.com/docs/api#payout_object) object, with corresponding payout endpoints. For more
information, read about the
[transfer/payout split](https://stripe.com/docs/transfer-payout-split).

Related guide: [Creating Separate Charges and Transfers](https://stripe.com/docs/connect/charges-transfers).
"""
type Transfer2 {
  """Amount in %s to be transferred."""
  amount: Int!
  """Amount in %s reversed (can be less than the amount attribute on the transfer if a partial reversal was issued)."""
  amountReversed: Int!
  """Balance transaction that describes the impact of this transfer on your account balance."""
  balanceTransaction: JSON
  """Time that this record of the transfer was first created."""
  created: Int!
  """Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."""
  currency: String!
  """An arbitrary string attached to the object. Often useful for displaying to users."""
  description: String
  """ID of the Stripe account the transfer was sent to."""
  destination: JSON
  """If the destination is a Stripe account, this will be the ID of the payment that the destination account received for the transfer."""
  destinationPayment: JSON
  """Unique identifier for the object."""
  id: String!
  """Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."""
  livemode: Boolean!
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."""
  metadata: JSON!
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object88!
  """A list of reversals that have been applied to the transfer."""
  reversals: Reversals!
  """Whether the transfer has been fully reversed. If the transfer is only partially reversed, this attribute will still be false."""
  reversed: Boolean!
  """ID of the charge or payment that was used to fund the transfer. If null, the transfer was funded from the available balance."""
  sourceTransaction: JSON
  """The source balance this transfer came from. One of `card`, `fpx`, or `bank_account`."""
  sourceType: String
  """A string that identifies this transaction as part of a group. See the [Connect documentation](https://stripe.com/docs/connect/charges-transfers#transfer-options) for details."""
  transferGroup: String
}

enum Object88 {
  TRANSFER
}

"""A list of reversals that have been applied to the transfer."""
type Reversals {
  """Details about each object."""
  data: [TransferReversal2]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

"""
[Stripe Connect](https://stripe.com/docs/connect) platforms can reverse transfers made to a
connected account, either entirely or partially, and can also specify whether
to refund any related application fees. Transfer reversals add to the
platform's balance and subtract from the destination account's balance.

Reversing a transfer that was made for a [destination
charge](/docs/connect/destination-charges) is allowed only up to the amount of
the charge. It is possible to reverse a
[transfer_group](https://stripe.com/docs/connect/charges-transfers#transfer-options)
transfer only if the destination account has enough balance to cover the
reversal.

Related guide: [Reversing Transfers](https://stripe.com/docs/connect/charges-transfers#reversing-transfers).
"""
type TransferReversal2 {
  """Amount, in %s."""
  amount: Int!
  """Balance transaction that describes the impact on your account balance."""
  balanceTransaction: JSON
  """Time at which the object was created. Measured in seconds since the Unix epoch."""
  created: Int!
  """Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."""
  currency: String!
  """Linked payment refund for the transfer reversal."""
  destinationPaymentRefund: JSON
  """Unique identifier for the object."""
  id: String!
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."""
  metadata: JSON
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object89!
  """ID of the refund responsible for the transfer reversal."""
  sourceRefund: JSON
  """ID of the transfer that was reversed."""
  transfer: JSON!
}

enum Object89 {
  TRANSFER_REVERSAL
}

type TransferReversalList {
  """Details about each object."""
  data: [TransferReversal2]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

type V1WebhookEndpoints2 {
  data: [WebhookEndpoint]!
  """True if this list has another page of items after this one that can be fetched."""
  hasMore: Boolean!
  """String representing the object's type. Objects of the same type share the same value. Always has the value `list`."""
  object: Object4!
  """The URL where this list can be accessed."""
  url: String!
}

"""
You can configure [webhook endpoints](https://stripe.com/docs/webhooks/) via the API to be
notified about events that happen in your Stripe account or connected
accounts.

Most users configure webhooks from [the dashboard](https://dashboard.stripe.com/webhooks), which provides a user interface for registering and testing your webhook endpoints.

Related guide: [Setting up Webhooks](https://stripe.com/docs/webhooks/configure).
"""
type WebhookEndpoint {
  """The API version events are rendered as for this webhook endpoint."""
  apiVersion: String
  """The ID of the associated Connect application."""
  application: String
  """Time at which the object was created. Measured in seconds since the Unix epoch."""
  created: Int!
  """An optional description of what the webhook is used for."""
  description: String
  """The list of events to enable for this endpoint. `['*']` indicates that all events are enabled, except those that require explicit selection."""
  enabledEvents: [String]!
  """Unique identifier for the object."""
  id: String!
  """Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."""
  livemode: Boolean!
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."""
  metadata: JSON!
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object90!
  """The endpoint's secret, used to generate [webhook signatures](https://stripe.com/docs/webhooks/signatures). Only returned at creation."""
  secret: String
  """The status of the webhook. It can be `enabled` or `disabled`."""
  status: String!
  """The URL of the webhook endpoint."""
  url: String!
}

enum Object90 {
  WEBHOOK_ENDPOINT
}

type DeletedAccount {
  """Always true for a deleted object"""
  deleted: Deleted!
  """Unique identifier for the object."""
  id: String!
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object3!
}

input V1AccountInput {
  account: String
}

type DeletedExternalAccount {
  """Three-letter [ISO code for the currency](https://stripe.com/docs/payouts) paid out to the bank account."""
  currency: String
  """Always true for a deleted object"""
  deleted: Deleted
  """Unique identifier for the object."""
  id: String
  object: JSON
}

type DeletedPerson {
  """Always true for a deleted object"""
  deleted: Deleted!
  """Unique identifier for the object."""
  id: String!
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object5!
}

type DeletedApplePayDomain {
  """Always true for a deleted object"""
  deleted: Deleted!
  """Unique identifier for the object."""
  id: String!
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object9!
}

type DeletedCoupon {
  """Always true for a deleted object"""
  deleted: Deleted!
  """Unique identifier for the object."""
  id: String!
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object21!
}

type DeletedCustomer {
  """Always true for a deleted object"""
  deleted: Deleted!
  """Unique identifier for the object."""
  id: String!
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object30!
}

input V1CustomerBankAccountInput {
  """Specifies which fields in the response should be expanded."""
  expand: [String]
}

input V1CustomerCardInput {
  """Specifies which fields in the response should be expanded."""
  expand: [String]
}

type DeletedDiscount {
  """The Checkout session that this coupon is applied to, if it is applied to a particular session in payment mode. Will not be present for subscription mode."""
  checkoutSession: String
  """
  A coupon contains information about a percent-off or amount-off discount you
  might want to apply to a customer. Coupons may be applied to [invoices](https://stripe.com/docs/api#invoices) or
  [orders](https://stripe.com/docs/api#create_order-coupon). Coupons do not work with conventional one-off [charges](https://stripe.com/docs/api#create_charge).
  """
  coupon: Coupon!
  """The ID of the customer associated with this discount."""
  customer: JSON
  """Always true for a deleted object"""
  deleted: Deleted!
  """The ID of the discount object. Discounts cannot be fetched by ID. Use `expand[]=discounts` in API calls to expand discount IDs in an array."""
  id: String!
  """The invoice that the discount's coupon was applied to, if it was applied directly to a particular invoice."""
  invoice: String
  """The invoice item `id` (or invoice line item `id` for invoice line items of type='subscription') that the discount's coupon was applied to, if it was applied directly to a particular invoice item or invoice line item."""
  invoiceItem: String
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object22!
  """The promotion code applied to create this discount."""
  promotionCode: JSON
  """Date that the coupon was applied."""
  start: Int!
  """The subscription that this coupon is applied to, if it is applied to a particular subscription."""
  subscription: String
}

input V1CustomerSourceInput {
  """Specifies which fields in the response should be expanded."""
  expand: [String]
}

input V1CustomerSubscriptionInput {
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """Can be set to `true` if `at_period_end` is not set to `true`. Will generate a final invoice that invoices for any un-invoiced metered usage and new/pending proration invoice items."""
  invoiceNow: Boolean
  """Can be set to `true` if `at_period_end` is not set to `true`. Will generate a proration invoice item that credits remaining unused time until the subscription period end."""
  prorate: Boolean
}

type DeletedTaxId {
  """Always true for a deleted object"""
  deleted: Deleted!
  """Unique identifier for the object."""
  id: String!
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object33!
}

type EphemeralKey {
  """Time at which the object was created. Measured in seconds since the Unix epoch."""
  created: Int!
  """Time at which the key will expire. Measured in seconds since the Unix epoch."""
  expires: Int!
  """Unique identifier for the object."""
  id: String!
  """Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."""
  livemode: Boolean!
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object36!
  """The key's secret. You can use this value to make authorized requests to the Stripe API."""
  secret: String
}

enum Object36 {
  EPHEMERAL_KEY
}

input V1EphemeralKeyInput {
  """Specifies which fields in the response should be expanded."""
  expand: [String]
}

type DeletedInvoiceitem {
  """Always true for a deleted object"""
  deleted: Deleted!
  """Unique identifier for the object."""
  id: String!
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object44!
}

type DeletedInvoice {
  """Always true for a deleted object"""
  deleted: Deleted!
  """Unique identifier for the object."""
  id: String!
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object49!
}

type DeletedPlan {
  """Always true for a deleted object"""
  deleted: Deleted!
  """Unique identifier for the object."""
  id: String!
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object62!
}

type DeletedProduct {
  """Always true for a deleted object"""
  deleted: Deleted!
  """Unique identifier for the object."""
  id: String!
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object63!
}

type DeletedRadarValueListItem {
  """Always true for a deleted object"""
  deleted: Deleted!
  """Unique identifier for the object."""
  id: String!
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object67!
}

type DeletedRadarValueList {
  """Always true for a deleted object"""
  deleted: Deleted!
  """Unique identifier for the object."""
  id: String!
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object68!
}

type DeletedRecipient {
  """Always true for a deleted object"""
  deleted: Deleted!
  """Unique identifier for the object."""
  id: String!
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object69!
}

type DeletedSku {
  """Always true for a deleted object"""
  deleted: Deleted!
  """Unique identifier for the object."""
  id: String!
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object75!
}

type DeletedSubscriptionItem {
  """Always true for a deleted object"""
  deleted: Deleted!
  """Unique identifier for the object."""
  id: String!
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object31!
}

input V1SubscriptionItems4Input {
  """Delete all usage for the given subscription item. Allowed only when the current plan's `usage_type` is `metered`."""
  clearUsage: Boolean
  """
  Determines how to handle [prorations](https://stripe.com/docs/subscriptions/billing-cycle#prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item's `quantity` changes. Valid values are `create_prorations`, `none`, or `always_invoice`.
  
  Passing `create_prorations` will cause proration invoice items to be created when applicable. These proration items will only be invoiced immediately under [certain conditions](https://stripe.com/docs/subscriptions/upgrading-downgrading#immediate-payment). In order to always invoice immediately for prorations, pass `always_invoice`.
  
  Prorations can be disabled by passing `none`.
  """
  prorationBehavior: ProrationBehavior5
  """If set, the proration will be calculated as though the subscription was updated at the given time. This can be used to apply the same proration that was previewed with the [upcoming invoice](https://stripe.com/docs/api#retrieve_customer_invoice) endpoint."""
  prorationDate: Int
}

enum ProrationBehavior5 {
  ALWAYS_INVOICE
  CREATE_PRORATIONS
  NONE
}

input V1SubscriptionInput {
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """Will generate a final invoice that invoices for any un-invoiced metered usage and new/pending proration invoice items."""
  invoiceNow: Boolean
  """Will generate a proration invoice item that credits remaining unused time until the subscription period end."""
  prorate: Boolean
}

type DeletedTerminalLocation {
  """Always true for a deleted object"""
  deleted: Deleted!
  """Unique identifier for the object."""
  id: String!
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object84!
}

type DeletedTerminalReader {
  """Always true for a deleted object"""
  deleted: Deleted!
  """Unique identifier for the object."""
  id: String!
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object85!
}

type DeletedWebhookEndpoint {
  """Always true for a deleted object"""
  deleted: Deleted!
  """Unique identifier for the object."""
  id: String!
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object90!
}

input V13dSecureInput {
  """Amount of the charge that you will create when authentication completes."""
  amount: Int!
  """The ID of a card token, or the ID of a card belonging to the given customer."""
  card: String
  """Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."""
  currency: String!
  """The customer associated with this 3D secure authentication."""
  customer: String
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """The URL that the cardholder's browser will be returned to when authentication completes."""
  returnUrl: String!
}

input V1Account3Input {
  """An [account token](https://stripe.com/docs/api#create_account_token), used to securely provide details to the account."""
  accountToken: String
  """Either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/js), or a dictionary containing a user's bank account details."""
  bankAccount: JSON
  """Business information about the account."""
  businessProfile: BusinessProfileSpecsInput
  """The business type."""
  businessType: BusinessType2
  """Each key of the dictionary represents a capability, and each capability maps to its settings (e.g. whether it has been requested or not). Each capability will be inactive until you have provided its specific requirements and Stripe has verified them. An account may have some of its requested capabilities be active and some be inactive."""
  capabilities: CapabilitiesInput
  """Information about the company or business. This field is available for any `business_type`."""
  company: CompanyInput
  """Three-letter ISO currency code representing the default currency for the account. This must be a currency that [Stripe supports in the account's country](https://stripe.com/docs/payouts)."""
  defaultCurrency: String
  """Documents that may be submitted to satisfy various informational requests."""
  documents: DocumentsInput
  """The email address of the account holder. This is only to make the account easier to identify to you. Stripe will never directly email Custom accounts."""
  email: String
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """A card or bank account to attach to the account for receiving [payouts](https://stripe.com/docs/connect/bank-debit-card-payouts) (you won’t be able to use it for top-ups). You can provide either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/stripe-js), or a dictionary, as documented in the `external_account` parameter for [bank account](https://stripe.com/docs/api#account_create_bank_account) creation. <br><br>By default, providing an external account sets it as the new default external account for its currency, and deletes the old default if one exists. To add additional external accounts without replacing the existing default for the currency, use the bank account or card creation API."""
  externalAccount: String
  """Information about the person represented by the account. This field is null unless `business_type` is set to `individual`."""
  individual: IndividualInput
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
  """Options for customizing how the account functions within Stripe."""
  settings: SettingsSpecsUpdateInput
  """Details on the account's acceptance of the [Stripe Services Agreement](https://stripe.com/docs/connect/updating-accounts#tos-acceptance)."""
  tosAcceptance: TosAcceptanceSpecsInput
}

"""Business information about the account."""
input BusinessProfileSpecsInput {
  mcc: String
  name: String
  productDescription: String
  supportAddress: AddressSpecsInput
  supportEmail: String
  supportPhone: String
  supportUrl: JSON
  url: String
}

input AddressSpecsInput {
  city: String
  country: String
  line1: String
  line2: String
  postalCode: String
  state: String
}

enum BusinessType2 {
  COMPANY
  GOVERNMENT_ENTITY
  INDIVIDUAL
  NON_PROFIT
}

"""Each key of the dictionary represents a capability, and each capability maps to its settings (e.g. whether it has been requested or not). Each capability will be inactive until you have provided its specific requirements and Stripe has verified them. An account may have some of its requested capabilities be active and some be inactive."""
input CapabilitiesInput {
  acssDebitPayments: CapabilityParamInput
  afterpayClearpayPayments: AfterpayClearpayPayments2Input
  auBecsDebitPayments: AuBecsDebitPayments2Input
  bacsDebitPayments: BacsDebitPayments3Input
  bancontactPayments: BancontactPayments2Input
  boletoPayments: BoletoPayments2Input
  cardIssuing: CardIssuing3Input
  cardPayments: CardPayments3Input
  cartesBancairesPayments: CartesBancairesPayments2Input
  epsPayments: EpsPayments2Input
  fpxPayments: FpxPayments2Input
  giropayPayments: GiropayPayments2Input
  grabpayPayments: GrabpayPayments2Input
  idealPayments: IdealPayments2Input
  jcbPayments: JcbPayments2Input
  legacyPayments: LegacyPayments2Input
  oxxoPayments: OxxoPayments2Input
  p24Payments: P24Payments2Input
  sepaDebitPayments: SepaDebitPayments3Input
  sofortPayments: SofortPayments2Input
  taxReportingUs1099K: TaxReportingUs1099K2Input
  taxReportingUs1099Misc: TaxReportingUs1099Misc2Input
  transfers: Transfers2Input
}

input CapabilityParamInput {
  requested: Boolean
}

input AfterpayClearpayPayments2Input {
  requested: Boolean
}

input AuBecsDebitPayments2Input {
  requested: Boolean
}

input BacsDebitPayments3Input {
  requested: Boolean
}

input BancontactPayments2Input {
  requested: Boolean
}

input BoletoPayments2Input {
  requested: Boolean
}

input CardIssuing3Input {
  requested: Boolean
}

input CardPayments3Input {
  requested: Boolean
}

input CartesBancairesPayments2Input {
  requested: Boolean
}

input EpsPayments2Input {
  requested: Boolean
}

input FpxPayments2Input {
  requested: Boolean
}

input GiropayPayments2Input {
  requested: Boolean
}

input GrabpayPayments2Input {
  requested: Boolean
}

input IdealPayments2Input {
  requested: Boolean
}

input JcbPayments2Input {
  requested: Boolean
}

input LegacyPayments2Input {
  requested: Boolean
}

input OxxoPayments2Input {
  requested: Boolean
}

input P24Payments2Input {
  requested: Boolean
}

input SepaDebitPayments3Input {
  requested: Boolean
}

input SofortPayments2Input {
  requested: Boolean
}

input TaxReportingUs1099K2Input {
  requested: Boolean
}

input TaxReportingUs1099Misc2Input {
  requested: Boolean
}

input Transfers2Input {
  requested: Boolean
}

"""Information about the company or business. This field is available for any `business_type`."""
input CompanyInput {
  address: Address2Input
  addressKana: JapanAddressKanaSpecsInput
  addressKanji: JapanAddressKanjiSpecsInput
  directorsProvided: Boolean
  executivesProvided: Boolean
  name: String
  nameKana: String
  nameKanji: String
  ownersProvided: Boolean
  phone: String
  registrationNumber: String
  structure: Structure2
  taxId: String
  taxIdRegistrar: String
  vatId: String
  verification: VerificationSpecsInput
}

input Address2Input {
  city: String
  country: String
  line1: String
  line2: String
  postalCode: String
  state: String
}

input JapanAddressKanaSpecsInput {
  city: String
  country: String
  line1: String
  line2: String
  postalCode: String
  state: String
  town: String
}

input JapanAddressKanjiSpecsInput {
  city: String
  country: String
  line1: String
  line2: String
  postalCode: String
  state: String
  town: String
}

enum Structure2 {
  _
  FREE_ZONE_ESTABLISHMENT
  FREE_ZONE_LLC
  GOVERNMENT_INSTRUMENTALITY
  GOVERNMENTAL_UNIT
  INCORPORATED_NON_PROFIT
  LIMITED_LIABILITY_PARTNERSHIP
  LLC
  MULTI_MEMBER_LLC
  PRIVATE_COMPANY
  PRIVATE_CORPORATION
  PRIVATE_PARTNERSHIP
  PUBLIC_COMPANY
  PUBLIC_CORPORATION
  PUBLIC_PARTNERSHIP
  SINGLE_MEMBER_LLC
  SOLE_ESTABLISHMENT
  SOLE_PROPRIETORSHIP
  TAX_EXEMPT_GOVERNMENT_INSTRUMENTALITY
  UNINCORPORATED_ASSOCIATION
  UNINCORPORATED_NON_PROFIT
}

input VerificationSpecsInput {
  document: VerificationDocumentSpecsInput
}

input VerificationDocumentSpecsInput {
  back: String
  front: String
}

"""Documents that may be submitted to satisfy various informational requests."""
input DocumentsInput {
  bankAccountOwnershipVerification: BankAccountOwnershipVerificationInput
  companyLicense: CompanyLicenseInput
  companyMemorandumOfAssociation: CompanyMemorandumOfAssociationInput
  companyMinisterialDecree: CompanyMinisterialDecreeInput
  companyRegistrationVerification: CompanyRegistrationVerificationInput
  companyTaxIdVerification: CompanyTaxIdVerificationInput
}

input BankAccountOwnershipVerificationInput {
  files: [String]
}

input CompanyLicenseInput {
  files: [String]
}

input CompanyMemorandumOfAssociationInput {
  files: [String]
}

input CompanyMinisterialDecreeInput {
  files: [String]
}

input CompanyRegistrationVerificationInput {
  files: [String]
}

input CompanyTaxIdVerificationInput {
  files: [String]
}

"""Information about the person represented by the account. This field is null unless `business_type` is set to `individual`."""
input IndividualInput {
  address: Address2Input
  addressKana: JapanAddressKanaSpecsInput
  addressKanji: JapanAddressKanjiSpecsInput
  dob: JSON
  email: String
  firstName: String
  firstNameKana: String
  firstNameKanji: String
  gender: String
  idNumber: String
  lastName: String
  lastNameKana: String
  lastNameKanji: String
  maidenName: String
  metadata: JSON
  phone: String
  politicalExposure: PoliticalExposure2
  ssnLast4: String
  verification: PersonVerificationSpecsInput
}

enum PoliticalExposure2 {
  EXISTING
  NONE
}

input PersonVerificationSpecsInput {
  additionalDocument: PersonVerificationDocumentSpecsInput
  document: Document2Input
}

input PersonVerificationDocumentSpecsInput {
  back: String
  front: String
}

input Document2Input {
  back: String
  front: String
}

"""Options for customizing how the account functions within Stripe."""
input SettingsSpecsUpdateInput {
  branding: BrandingSettingsSpecsInput
  cardIssuing: CardIssuingSettingsSpecsInput
  cardPayments: CardPaymentsSettingsSpecsInput
  payments: PaymentsSettingsSpecsInput
  payouts: PayoutSettingsSpecsInput
}

input BrandingSettingsSpecsInput {
  icon: String
  logo: String
  primaryColor: String
  secondaryColor: String
}

input CardIssuingSettingsSpecsInput {
  tosAcceptance: TosAcceptanceInput
}

input TosAcceptanceInput {
  date: Int
  ip: String
  userAgent: String
}

input CardPaymentsSettingsSpecsInput {
  declineOn: DeclineOnInput
  statementDescriptorPrefix: String
}

input DeclineOnInput {
  avsFailure: Boolean
  cvcFailure: Boolean
}

input PaymentsSettingsSpecsInput {
  statementDescriptor: String
  statementDescriptorKana: String
  statementDescriptorKanji: String
}

input PayoutSettingsSpecsInput {
  debitNegativeBalances: Boolean
  schedule: ScheduleInput
  statementDescriptor: String
}

input ScheduleInput {
  delayDays: JSON
  interval: Interval2
  monthlyAnchor: Int
  weeklyAnchor: WeeklyAnchor2
}

enum Interval2 {
  DAILY
  MANUAL
  MONTHLY
  WEEKLY
}

enum WeeklyAnchor2 {
  FRIDAY
  MONDAY
  SATURDAY
  SUNDAY
  THURSDAY
  TUESDAY
  WEDNESDAY
}

"""Details on the account's acceptance of the [Stripe Services Agreement](https://stripe.com/docs/connect/updating-accounts#tos-acceptance)."""
input TosAcceptanceSpecsInput {
  date: Int
  ip: String
  serviceAgreement: String
  userAgent: String
}

input V1AccountBankAccountsInput {
  """Either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/js), or a dictionary containing a user's bank account details."""
  bankAccount: JSON
  """When set to true, or if this is the first external account added in this currency, this account becomes the default external account for its currency."""
  defaultForCurrency: Boolean
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """Please refer to full [documentation](https://stripe.com/docs/api) instead."""
  externalAccount: String
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
}

input V1AccountBankAccount2Input {
  """The name of the person or business that owns the bank account."""
  accountHolderName: String
  """The type of entity that holds the account. This can be either `individual` or `company`."""
  accountHolderType: AccountHolderType3
  """The bank account type. This can only be `checking` or `savings` in most countries. In Japan, this can only be `futsu` or `toza`."""
  accountType: AccountType3
  """City/District/Suburb/Town/Village."""
  addressCity: String
  """Billing address country, if provided when creating card."""
  addressCountry: String
  """Address line 1 (Street address/PO Box/Company name)."""
  addressLine1: String
  """Address line 2 (Apartment/Suite/Unit/Building)."""
  addressLine2: String
  """State/County/Province/Region."""
  addressState: String
  """ZIP or postal code."""
  addressZip: String
  """When set to true, this becomes the default external account for its currency."""
  defaultForCurrency: Boolean
  """Two digit number representing the card’s expiration month."""
  expMonth: String
  """Four digit number representing the card’s expiration year."""
  expYear: String
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
  """Cardholder name."""
  name: String
}

enum AccountHolderType3 {
  _
  COMPANY
  INDIVIDUAL
}

enum AccountType3 {
  CHECKING
  FUTSU
  SAVINGS
  TOZA
}

input V1AccountCapability2Input {
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """Passing true requests the capability for the account, if it is not already requested. A requested capability may not immediately become active. Any requirements to activate the capability are returned in the `requirements` arrays."""
  requested: Boolean
}

input V1AccountExternalAccounts2Input {
  """Either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/js), or a dictionary containing a user's bank account details."""
  bankAccount: JSON
  """When set to true, or if this is the first external account added in this currency, this account becomes the default external account for its currency."""
  defaultForCurrency: Boolean
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """Please refer to full [documentation](https://stripe.com/docs/api) instead."""
  externalAccount: String
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
}

input V1AccountExternalAccount2Input {
  """The name of the person or business that owns the bank account."""
  accountHolderName: String
  """The type of entity that holds the account. This can be either `individual` or `company`."""
  accountHolderType: AccountHolderType3
  """The bank account type. This can only be `checking` or `savings` in most countries. In Japan, this can only be `futsu` or `toza`."""
  accountType: AccountType3
  """City/District/Suburb/Town/Village."""
  addressCity: String
  """Billing address country, if provided when creating card."""
  addressCountry: String
  """Address line 1 (Street address/PO Box/Company name)."""
  addressLine1: String
  """Address line 2 (Apartment/Suite/Unit/Building)."""
  addressLine2: String
  """State/County/Province/Region."""
  addressState: String
  """ZIP or postal code."""
  addressZip: String
  """When set to true, this becomes the default external account for its currency."""
  defaultForCurrency: Boolean
  """Two digit number representing the card’s expiration month."""
  expMonth: String
  """Four digit number representing the card’s expiration year."""
  expYear: String
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
  """Cardholder name."""
  name: String
}

"""
Account Links are the means by which a Connect platform grants a connected account permission to access
Stripe-hosted applications, such as Connect Onboarding.

Related guide: [Connect Onboarding](https://stripe.com/docs/connect/connect-onboarding).
"""
type AccountLink {
  """Time at which the object was created. Measured in seconds since the Unix epoch."""
  created: Int!
  """The timestamp at which this account link will expire."""
  expiresAt: Int!
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object8!
  """The URL for the account link."""
  url: String!
}

enum Object8 {
  ACCOUNT_LINK
}

input V1AccountLinksInput {
  """The identifier of the account to create an account link for."""
  account: String!
  """Which information the platform needs to collect from the user. One of `currently_due` or `eventually_due`. Default is `currently_due`."""
  collect: Collect
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """The URL the user will be redirected to if the account link is expired, has been previously-visited, or is otherwise invalid. The URL you specify should attempt to generate a new account link with the same parameters used to create the original account link, then redirect the user to the new account link's URL so they can continue with Connect Onboarding. If a new account link cannot be generated or the redirect fails you should display a useful error to the user."""
  refreshUrl: String
  """The URL that the user will be redirected to upon leaving or completing the linked flow."""
  returnUrl: String
  """The type of account link the user is requesting. Possible values are `account_onboarding` or `account_update`."""
  type: Type3!
}

enum Collect {
  CURRENTLY_DUE
  EVENTUALLY_DUE
}

enum Type3 {
  ACCOUNT_ONBOARDING
  ACCOUNT_UPDATE
}

type LoginLink {
  """Time at which the object was created. Measured in seconds since the Unix epoch."""
  created: Int!
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object7!
  """The URL for the login link."""
  url: String!
}

enum Object7 {
  LOGIN_LINK
}

input V1AccountLoginLinksInput {
  account: String!
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """Where to redirect the user after they log out of their dashboard."""
  redirectUrl: String
}

input V1AccountPeople3Input {
  account: String
  """The person's address."""
  address: Address3Input
  """The Kana variation of the person's address (Japan only)."""
  addressKana: AddressKana3Input
  """The Kanji variation of the person's address (Japan only)."""
  addressKanji: AddressKanji3Input
  """The person's date of birth."""
  dob: JSON
  """Documents that may be submitted to satisfy various informational requests."""
  documents: PersonDocumentsSpecsInput
  """The person's email address."""
  email: String
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """The person's first name."""
  firstName: String
  """The Kana variation of the person's first name (Japan only)."""
  firstNameKana: String
  """The Kanji variation of the person's first name (Japan only)."""
  firstNameKanji: String
  """The person's gender (International regulations require either "male" or "female")."""
  gender: String
  """The person's ID number, as appropriate for their country. For example, a social security number in the U.S., social insurance number in Canada, etc. Instead of the number itself, you can also provide a [PII token provided by Stripe.js](https://stripe.com/docs/js/tokens_sources/create_token?type=pii)."""
  idNumber: String
  """The person's last name."""
  lastName: String
  """The Kana variation of the person's last name (Japan only)."""
  lastNameKana: String
  """The Kanji variation of the person's last name (Japan only)."""
  lastNameKanji: String
  """The person's maiden name."""
  maidenName: String
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
  """The country where the person is a national. Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)), or "XX" if unavailable."""
  nationality: String
  """A [person token](https://stripe.com/docs/connect/account-tokens), used to securely provide details to the person."""
  personToken: String
  """The person's phone number."""
  phone: String
  """Indicates if the person or any of their representatives, family members, or other closely related persons, declares that they hold or have held an important public job or function, in any jurisdiction."""
  politicalExposure: String
  """The relationship that this person has with the account's legal entity."""
  relationship: RelationshipInput
  """The last four digits of the person's Social Security number (U.S. only)."""
  ssnLast4: String
  """The person's verification status."""
  verification: Verification2Input
}

"""The person's address."""
input Address3Input {
  city: String
  country: String
  line1: String
  line2: String
  postalCode: String
  state: String
}

"""The Kana variation of the person's address (Japan only)."""
input AddressKana3Input {
  city: String
  country: String
  line1: String
  line2: String
  postalCode: String
  state: String
  town: String
}

"""The Kanji variation of the person's address (Japan only)."""
input AddressKanji3Input {
  city: String
  country: String
  line1: String
  line2: String
  postalCode: String
  state: String
  town: String
}

"""Documents that may be submitted to satisfy various informational requests."""
input PersonDocumentsSpecsInput {
  companyAuthorization: CompanyAuthorizationInput
  passport: PassportInput
  visa: VisaInput
}

input CompanyAuthorizationInput {
  files: [String]
}

input PassportInput {
  files: [String]
}

input VisaInput {
  files: [String]
}

"""The relationship that this person has with the account's legal entity."""
input RelationshipInput {
  director: Boolean
  executive: Boolean
  owner: Boolean
  percentOwnership: JSON
  representative: Boolean
  title: String
}

"""The person's verification status."""
input Verification2Input {
  additionalDocument: PersonVerificationDocumentSpecsInput
  document: Document2Input
}

input V1AccountPerson2Input {
  account: String
  """The person's address."""
  address: Address3Input
  """The Kana variation of the person's address (Japan only)."""
  addressKana: AddressKana3Input
  """The Kanji variation of the person's address (Japan only)."""
  addressKanji: AddressKanji3Input
  """The person's date of birth."""
  dob: JSON
  """Documents that may be submitted to satisfy various informational requests."""
  documents: PersonDocumentsSpecsInput
  """The person's email address."""
  email: String
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """The person's first name."""
  firstName: String
  """The Kana variation of the person's first name (Japan only)."""
  firstNameKana: String
  """The Kanji variation of the person's first name (Japan only)."""
  firstNameKanji: String
  """The person's gender (International regulations require either "male" or "female")."""
  gender: String
  """The person's ID number, as appropriate for their country. For example, a social security number in the U.S., social insurance number in Canada, etc. Instead of the number itself, you can also provide a [PII token provided by Stripe.js](https://stripe.com/docs/js/tokens_sources/create_token?type=pii)."""
  idNumber: String
  """The person's last name."""
  lastName: String
  """The Kana variation of the person's last name (Japan only)."""
  lastNameKana: String
  """The Kanji variation of the person's last name (Japan only)."""
  lastNameKanji: String
  """The person's maiden name."""
  maidenName: String
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
  """The country where the person is a national. Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)), or "XX" if unavailable."""
  nationality: String
  """A [person token](https://stripe.com/docs/connect/account-tokens), used to securely provide details to the person."""
  personToken: String
  """The person's phone number."""
  phone: String
  """Indicates if the person or any of their representatives, family members, or other closely related persons, declares that they hold or have held an important public job or function, in any jurisdiction."""
  politicalExposure: String
  """The relationship that this person has with the account's legal entity."""
  relationship: RelationshipInput
  """The last four digits of the person's Social Security number (U.S. only)."""
  ssnLast4: String
  """The person's verification status."""
  verification: Verification2Input
}

input V1AccountPersons3Input {
  account: String
  """The person's address."""
  address: Address3Input
  """The Kana variation of the person's address (Japan only)."""
  addressKana: AddressKana3Input
  """The Kanji variation of the person's address (Japan only)."""
  addressKanji: AddressKanji3Input
  """The person's date of birth."""
  dob: JSON
  """Documents that may be submitted to satisfy various informational requests."""
  documents: PersonDocumentsSpecsInput
  """The person's email address."""
  email: String
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """The person's first name."""
  firstName: String
  """The Kana variation of the person's first name (Japan only)."""
  firstNameKana: String
  """The Kanji variation of the person's first name (Japan only)."""
  firstNameKanji: String
  """The person's gender (International regulations require either "male" or "female")."""
  gender: String
  """The person's ID number, as appropriate for their country. For example, a social security number in the U.S., social insurance number in Canada, etc. Instead of the number itself, you can also provide a [PII token provided by Stripe.js](https://stripe.com/docs/js/tokens_sources/create_token?type=pii)."""
  idNumber: String
  """The person's last name."""
  lastName: String
  """The Kana variation of the person's last name (Japan only)."""
  lastNameKana: String
  """The Kanji variation of the person's last name (Japan only)."""
  lastNameKanji: String
  """The person's maiden name."""
  maidenName: String
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
  """The country where the person is a national. Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)), or "XX" if unavailable."""
  nationality: String
  """A [person token](https://stripe.com/docs/connect/account-tokens), used to securely provide details to the person."""
  personToken: String
  """The person's phone number."""
  phone: String
  """Indicates if the person or any of their representatives, family members, or other closely related persons, declares that they hold or have held an important public job or function, in any jurisdiction."""
  politicalExposure: String
  """The relationship that this person has with the account's legal entity."""
  relationship: RelationshipInput
  """The last four digits of the person's Social Security number (U.S. only)."""
  ssnLast4: String
  """The person's verification status."""
  verification: Verification2Input
}

input V1Accounts3Input {
  """An [account token](https://stripe.com/docs/api#create_account_token), used to securely provide details to the account."""
  accountToken: String
  """Either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/js), or a dictionary containing a user's bank account details."""
  bankAccount: JSON
  """Business information about the account."""
  businessProfile: BusinessProfileSpecsInput
  """The business type."""
  businessType: BusinessType2
  """Each key of the dictionary represents a capability, and each capability maps to its settings (e.g. whether it has been requested or not). Each capability will be inactive until you have provided its specific requirements and Stripe has verified them. An account may have some of its requested capabilities be active and some be inactive."""
  capabilities: CapabilitiesInput
  """Information about the company or business. This field is available for any `business_type`."""
  company: CompanyInput
  """The country in which the account holder resides, or in which the business is legally established. This should be an ISO 3166-1 alpha-2 country code. For example, if you are in the United States and the business for which you're creating an account is legally represented in Canada, you would use `CA` as the country for the account being created."""
  country: String
  """Three-letter ISO currency code representing the default currency for the account. This must be a currency that [Stripe supports in the account's country](https://stripe.com/docs/payouts)."""
  defaultCurrency: String
  """Documents that may be submitted to satisfy various informational requests."""
  documents: DocumentsInput
  """The email address of the account holder. This is only to make the account easier to identify to you. Stripe will never directly email Custom accounts."""
  email: String
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """A card or bank account to attach to the account for receiving [payouts](https://stripe.com/docs/connect/bank-debit-card-payouts) (you won’t be able to use it for top-ups). You can provide either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/stripe-js), or a dictionary, as documented in the `external_account` parameter for [bank account](https://stripe.com/docs/api#account_create_bank_account) creation. <br><br>By default, providing an external account sets it as the new default external account for its currency, and deletes the old default if one exists. To add additional external accounts without replacing the existing default for the currency, use the bank account or card creation API."""
  externalAccount: String
  """Information about the person represented by the account. This field is null unless `business_type` is set to `individual`."""
  individual: IndividualInput
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
  """Options for customizing how the account functions within Stripe."""
  settings: SettingsSpecsInput
  """Details on the account's acceptance of the [Stripe Services Agreement](https://stripe.com/docs/connect/updating-accounts#tos-acceptance)."""
  tosAcceptance: TosAcceptanceSpecsInput
  """The type of Stripe account to create. May be one of `custom`, `express` or `standard`."""
  type: Type4
}

"""Options for customizing how the account functions within Stripe."""
input SettingsSpecsInput {
  branding: BrandingSettingsSpecsInput
  cardIssuing: CardIssuingSettingsSpecsInput
  cardPayments: CardPaymentsSettingsSpecsInput
  payments: PaymentsSettingsSpecsInput
  payouts: PayoutSettingsSpecsInput
}

enum Type4 {
  CUSTOM
  EXPRESS
  STANDARD
}

input V1AccountLoginLinks2Input {
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """Where to redirect the user after they log out of their dashboard."""
  redirectUrl: String
}

input V1AccountPeople4Input {
  """The person's address."""
  address: Address3Input
  """The Kana variation of the person's address (Japan only)."""
  addressKana: AddressKana3Input
  """The Kanji variation of the person's address (Japan only)."""
  addressKanji: AddressKanji3Input
  """The person's date of birth."""
  dob: JSON
  """Documents that may be submitted to satisfy various informational requests."""
  documents: PersonDocumentsSpecsInput
  """The person's email address."""
  email: String
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """The person's first name."""
  firstName: String
  """The Kana variation of the person's first name (Japan only)."""
  firstNameKana: String
  """The Kanji variation of the person's first name (Japan only)."""
  firstNameKanji: String
  """The person's gender (International regulations require either "male" or "female")."""
  gender: String
  """The person's ID number, as appropriate for their country. For example, a social security number in the U.S., social insurance number in Canada, etc. Instead of the number itself, you can also provide a [PII token provided by Stripe.js](https://stripe.com/docs/js/tokens_sources/create_token?type=pii)."""
  idNumber: String
  """The person's last name."""
  lastName: String
  """The Kana variation of the person's last name (Japan only)."""
  lastNameKana: String
  """The Kanji variation of the person's last name (Japan only)."""
  lastNameKanji: String
  """The person's maiden name."""
  maidenName: String
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
  """The country where the person is a national. Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)), or "XX" if unavailable."""
  nationality: String
  """A [person token](https://stripe.com/docs/connect/account-tokens), used to securely provide details to the person."""
  personToken: String
  """The person's phone number."""
  phone: String
  """Indicates if the person or any of their representatives, family members, or other closely related persons, declares that they hold or have held an important public job or function, in any jurisdiction."""
  politicalExposure: String
  """The relationship that this person has with the account's legal entity."""
  relationship: RelationshipInput
  """The last four digits of the person's Social Security number (U.S. only)."""
  ssnLast4: String
  """The person's verification status."""
  verification: Verification2Input
}

input V1AccountPerson3Input {
  """The person's address."""
  address: Address3Input
  """The Kana variation of the person's address (Japan only)."""
  addressKana: AddressKana3Input
  """The Kanji variation of the person's address (Japan only)."""
  addressKanji: AddressKanji3Input
  """The person's date of birth."""
  dob: JSON
  """Documents that may be submitted to satisfy various informational requests."""
  documents: PersonDocumentsSpecsInput
  """The person's email address."""
  email: String
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """The person's first name."""
  firstName: String
  """The Kana variation of the person's first name (Japan only)."""
  firstNameKana: String
  """The Kanji variation of the person's first name (Japan only)."""
  firstNameKanji: String
  """The person's gender (International regulations require either "male" or "female")."""
  gender: String
  """The person's ID number, as appropriate for their country. For example, a social security number in the U.S., social insurance number in Canada, etc. Instead of the number itself, you can also provide a [PII token provided by Stripe.js](https://stripe.com/docs/js/tokens_sources/create_token?type=pii)."""
  idNumber: String
  """The person's last name."""
  lastName: String
  """The Kana variation of the person's last name (Japan only)."""
  lastNameKana: String
  """The Kanji variation of the person's last name (Japan only)."""
  lastNameKanji: String
  """The person's maiden name."""
  maidenName: String
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
  """The country where the person is a national. Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)), or "XX" if unavailable."""
  nationality: String
  """A [person token](https://stripe.com/docs/connect/account-tokens), used to securely provide details to the person."""
  personToken: String
  """The person's phone number."""
  phone: String
  """Indicates if the person or any of their representatives, family members, or other closely related persons, declares that they hold or have held an important public job or function, in any jurisdiction."""
  politicalExposure: String
  """The relationship that this person has with the account's legal entity."""
  relationship: RelationshipInput
  """The last four digits of the person's Social Security number (U.S. only)."""
  ssnLast4: String
  """The person's verification status."""
  verification: Verification2Input
}

input V1AccountPersons4Input {
  """The person's address."""
  address: Address3Input
  """The Kana variation of the person's address (Japan only)."""
  addressKana: AddressKana3Input
  """The Kanji variation of the person's address (Japan only)."""
  addressKanji: AddressKanji3Input
  """The person's date of birth."""
  dob: JSON
  """Documents that may be submitted to satisfy various informational requests."""
  documents: PersonDocumentsSpecsInput
  """The person's email address."""
  email: String
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """The person's first name."""
  firstName: String
  """The Kana variation of the person's first name (Japan only)."""
  firstNameKana: String
  """The Kanji variation of the person's first name (Japan only)."""
  firstNameKanji: String
  """The person's gender (International regulations require either "male" or "female")."""
  gender: String
  """The person's ID number, as appropriate for their country. For example, a social security number in the U.S., social insurance number in Canada, etc. Instead of the number itself, you can also provide a [PII token provided by Stripe.js](https://stripe.com/docs/js/tokens_sources/create_token?type=pii)."""
  idNumber: String
  """The person's last name."""
  lastName: String
  """The Kana variation of the person's last name (Japan only)."""
  lastNameKana: String
  """The Kanji variation of the person's last name (Japan only)."""
  lastNameKanji: String
  """The person's maiden name."""
  maidenName: String
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
  """The country where the person is a national. Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)), or "XX" if unavailable."""
  nationality: String
  """A [person token](https://stripe.com/docs/connect/account-tokens), used to securely provide details to the person."""
  personToken: String
  """The person's phone number."""
  phone: String
  """Indicates if the person or any of their representatives, family members, or other closely related persons, declares that they hold or have held an important public job or function, in any jurisdiction."""
  politicalExposure: String
  """The relationship that this person has with the account's legal entity."""
  relationship: RelationshipInput
  """The last four digits of the person's Social Security number (U.S. only)."""
  ssnLast4: String
  """The person's verification status."""
  verification: Verification2Input
}

input V1AccountRejectInput {
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """The reason for rejecting the account. Can be `fraud`, `terms_of_service`, or `other`."""
  reason: String!
}

input V1ApplePayDomains2Input {
  domainName: String!
  """Specifies which fields in the response should be expanded."""
  expand: [String]
}

input V1ApplicationFeesRefund2Input {
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
}

input V1ApplicationFeeRefundInput {
  amount: Int
  directive: String
  """Specifies which fields in the response should be expanded."""
  expand: [String]
}

input V1ApplicationFeeRefunds2Input {
  """A positive integer, in _%s_, representing how much of this fee to refund. Can refund only up to the remaining unrefunded amount of the fee."""
  amount: Int
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
}

input V1BillingPortalConfigurations3Input {
  """The business information shown to customers in the portal."""
  businessProfile: BusinessProfileCreateParamInput!
  """The default URL to redirect customers to when they click on the portal's link to return to your website. This can be [overriden](https://stripe.com/docs/api/customer_portal/sessions/create#create_portal_session-return_url) when creating the session."""
  defaultReturnUrl: JSON
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """Information about the features available in the portal."""
  features: FeaturesInput!
}

"""The business information shown to customers in the portal."""
input BusinessProfileCreateParamInput {
  headline: String
  privacyPolicyUrl: String!
  termsOfServiceUrl: String!
}

"""Information about the features available in the portal."""
input FeaturesInput {
  customerUpdate: CustomerUpdateInput
  invoiceHistory: InvoiceHistoryInput
  paymentMethodUpdate: PaymentMethodUpdateInput
  subscriptionCancel: SubscriptionCancelInput
  subscriptionPause: SubscriptionPauseInput
  subscriptionUpdate: SubscriptionUpdateInput
}

input CustomerUpdateInput {
  allowedUpdates: JSON!
  enabled: Boolean!
}

input InvoiceHistoryInput {
  enabled: Boolean!
}

input PaymentMethodUpdateInput {
  enabled: Boolean!
}

input SubscriptionCancelInput {
  enabled: Boolean!
  mode: Mode2
  prorationBehavior: ProrationBehavior3
}

enum Mode2 {
  AT_PERIOD_END
  IMMEDIATELY
}

enum ProrationBehavior3 {
  ALWAYS_INVOICE
  CREATE_PRORATIONS
  NONE
}

input SubscriptionPauseInput {
  enabled: Boolean
}

input SubscriptionUpdateInput {
  defaultAllowedUpdates: JSON!
  enabled: Boolean!
  products: JSON!
  prorationBehavior: ProrationBehavior3
}

input V1BillingPortalConfiguration2Input {
  """Whether the configuration is active and can be used to create portal sessions."""
  active: Boolean
  """The business information shown to customers in the portal."""
  businessProfile: BusinessProfileUpdateParamInput
  """The default URL to redirect customers to when they click on the portal's link to return to your website. This can be [overriden](https://stripe.com/docs/api/customer_portal/sessions/create#create_portal_session-return_url) when creating the session."""
  defaultReturnUrl: JSON
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """Information about the features available in the portal."""
  features: FeaturesUpdatingParamInput
}

"""The business information shown to customers in the portal."""
input BusinessProfileUpdateParamInput {
  headline: String
  privacyPolicyUrl: String
  termsOfServiceUrl: String
}

"""Information about the features available in the portal."""
input FeaturesUpdatingParamInput {
  customerUpdate: CustomerUpdateUpdatingParamInput
  invoiceHistory: InvoiceHistoryInput
  paymentMethodUpdate: PaymentMethodUpdateInput
  subscriptionCancel: SubscriptionCancelUpdatingParamInput
  subscriptionPause: SubscriptionPauseInput
  subscriptionUpdate: SubscriptionUpdateUpdatingParamInput
}

input CustomerUpdateUpdatingParamInput {
  allowedUpdates: JSON
  enabled: Boolean
}

input SubscriptionCancelUpdatingParamInput {
  enabled: Boolean
  mode: Mode2
  prorationBehavior: ProrationBehavior3
}

input SubscriptionUpdateUpdatingParamInput {
  defaultAllowedUpdates: JSON
  enabled: Boolean
  products: JSON
  prorationBehavior: ProrationBehavior3
}

"""
The Billing customer portal is a Stripe-hosted UI for subscription and
billing management.

A portal configuration describes the functionality and features that you
want to provide to your customers through the portal.

A portal session describes the instantiation of the customer portal for
a particular customer. By visiting the session's URL, the customer
can manage their subscriptions and billing details. For security reasons,
sessions are short-lived and will expire if the customer does not visit the URL.
Create sessions on-demand when customers intend to manage their subscriptions
and billing details.

Learn more in the [product overview](https://stripe.com/docs/billing/subscriptions/customer-portal)
and [integration guide](https://stripe.com/docs/billing/subscriptions/integrating-customer-portal).
"""
type BillingPortalSession {
  """The configuration used by this session, describing the features available."""
  configuration: JSON!
  """Time at which the object was created. Measured in seconds since the Unix epoch."""
  created: Int!
  """The ID of the customer for this session."""
  customer: String!
  """Unique identifier for the object."""
  id: String!
  """Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."""
  livemode: Boolean!
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object15!
  """The account for which the session was created on behalf of. When specified, only subscriptions and invoices with this `on_behalf_of` account appear in the portal. For more information, see the [docs](https://stripe.com/docs/connect/charges-transfers#on-behalf-of). Use the [Accounts API](https://stripe.com/docs/api/accounts/object#account_object-settings-branding) to modify the `on_behalf_of` account's branding settings, which the portal displays."""
  onBehalfOf: String
  """The URL to redirect customers to when they click on the portal's link to return to your website."""
  returnUrl: String!
  """The short-lived URL of the session that gives customers access to the customer portal."""
  url: String!
}

enum Object15 {
  BILLING_PORTAL_SESSION
}

input V1BillingPortalSessionsInput {
  """The ID of an existing [configuration](https://stripe.com/docs/api/customer_portal/configuration) to use for this session, describing its functionality and features. If not specified, the session uses the default configuration."""
  configuration: String
  """The ID of an existing customer."""
  customer: String!
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """The `on_behalf_of` account to use for this session. When specified, only subscriptions and invoices with this `on_behalf_of` account appear in the portal. For more information, see the [docs](https://stripe.com/docs/connect/charges-transfers#on-behalf-of). Use the [Accounts API](https://stripe.com/docs/api/accounts/object#account_object-settings-branding) to modify the `on_behalf_of` account's branding settings, which the portal displays."""
  onBehalfOf: String
  """The default URL to redirect customers to when they click on the portal's link to return to your website."""
  returnUrl: String
}

input V1Charges3Input {
  """Amount intended to be collected by this payment. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99)."""
  amount: Int
  applicationFee: Int
  """A fee in %s that will be applied to the charge and transferred to the application owner's Stripe account. The request must be made with an OAuth key or the `Stripe-Account` header in order to take an application fee. For more information, see the application fees [documentation](https://stripe.com/docs/connect/direct-charges#collecting-fees)."""
  applicationFeeAmount: Int
  """Whether to immediately capture the charge. Defaults to `true`. When `false`, the charge issues an authorization (or pre-authorization), and will need to be [captured](https://stripe.com/docs/api#capture_charge) later. Uncaptured charges expire in _seven days_. For more information, see the [authorizing charges and settling later](https://stripe.com/docs/charges/placing-a-hold) documentation."""
  capture: Boolean
  """A token, like the ones returned by [Stripe.js](https://stripe.com/docs/js)."""
  card: JSON
  """Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."""
  currency: String
  """The ID of an existing customer that will be charged in this request."""
  customer: String
  """An arbitrary string which you can attach to a `Charge` object. It is displayed when in the web interface alongside the charge. Note that if you use Stripe to send automatic email receipts to your customers, your receipt emails will include the `description` of the charge(s) that they are describing."""
  description: String
  destination: JSON
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
  """The Stripe account ID for which these funds are intended. Automatically set if you use the `destination` parameter. For details, see [Creating Separate Charges and Transfers](https://stripe.com/docs/connect/charges-transfers#on-behalf-of)."""
  onBehalfOf: String
  """The email address to which this charge's [receipt](https://stripe.com/docs/dashboard/receipts) will be sent. The receipt will not be sent until the charge is paid, and no receipts will be sent for test mode charges. If this charge is for a [Customer](https://stripe.com/docs/api/customers/object), the email address specified here will override the customer's email address. If `receipt_email` is specified for a charge in live mode, a receipt will be sent regardless of your [email settings](https://dashboard.stripe.com/account/emails)."""
  receiptEmail: String
  """Shipping information for the charge. Helps prevent fraud on charges for physical goods."""
  shipping: OptionalFieldsShippingInput
  """A payment source to be charged. This can be the ID of a [card](https://stripe.com/docs/api#cards) (i.e., credit or debit card), a [bank account](https://stripe.com/docs/api#bank_accounts), a [source](https://stripe.com/docs/api#sources), a [token](https://stripe.com/docs/api#tokens), or a [connected account](https://stripe.com/docs/connect/account-debits#charging-a-connected-account). For certain sources---namely, [cards](https://stripe.com/docs/api#cards), [bank accounts](https://stripe.com/docs/api#bank_accounts), and attached [sources](https://stripe.com/docs/api#sources)---you must also pass the ID of the associated customer."""
  source: String
  """For card charges, use `statement_descriptor_suffix` instead. Otherwise, you can use this value as the complete description of a charge on your customers’ statements. Must contain at least one letter, maximum 22 characters."""
  statementDescriptor: String
  """Provides information about the charge that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor."""
  statementDescriptorSuffix: String
  """An optional dictionary including the account to automatically transfer to as part of a destination charge. [See the Connect documentation](https://stripe.com/docs/connect/destination-charges) for details."""
  transferData: TransferDataSpecsInput
  """A string that identifies this transaction as part of a group. For details, see [Grouping transactions](https://stripe.com/docs/connect/charges-transfers#transfer-options)."""
  transferGroup: String
}

"""Shipping information for the charge. Helps prevent fraud on charges for physical goods."""
input OptionalFieldsShippingInput {
  address: OptionalFieldsAddressInput!
  carrier: String
  name: String!
  phone: String
  trackingNumber: String
}

input OptionalFieldsAddressInput {
  city: String
  country: String
  line1: String
  line2: String
  postalCode: String
  state: String
}

"""An optional dictionary including the account to automatically transfer to as part of a destination charge. [See the Connect documentation](https://stripe.com/docs/connect/destination-charges) for details."""
input TransferDataSpecsInput {
  amount: Int
  destination: String!
}

input V1Charge2Input {
  """The ID of an existing customer that will be associated with this request. This field may only be updated if there is no existing associated customer with this charge."""
  customer: String
  """An arbitrary string which you can attach to a charge object. It is displayed when in the web interface alongside the charge. Note that if you use Stripe to send automatic email receipts to your customers, your receipt emails will include the `description` of the charge(s) that they are describing."""
  description: String
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """A set of key-value pairs you can attach to a charge giving information about its riskiness. If you believe a charge is fraudulent, include a `user_report` key with a value of `fraudulent`. If you believe a charge is safe, include a `user_report` key with a value of `safe`. Stripe will use the information you send to improve our fraud detection algorithms."""
  fraudDetails: FraudDetails2Input
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
  """This is the email address that the receipt for this charge will be sent to. If this field is updated, then a new email receipt will be sent to the updated address."""
  receiptEmail: String
  """Shipping information for the charge. Helps prevent fraud on charges for physical goods."""
  shipping: OptionalFieldsShippingInput
  """A string that identifies this transaction as part of a group. `transfer_group` may only be provided if it has not been set. See the [Connect documentation](https://stripe.com/docs/connect/charges-transfers#transfer-options) for details."""
  transferGroup: String
}

"""A set of key-value pairs you can attach to a charge giving information about its riskiness. If you believe a charge is fraudulent, include a `user_report` key with a value of `fraudulent`. If you believe a charge is safe, include a `user_report` key with a value of `safe`. Stripe will use the information you send to improve our fraud detection algorithms."""
input FraudDetails2Input {
  userReport: UserReport2!
}

enum UserReport2 {
  _
  FRAUDULENT
  SAFE
}

input V1ChargeCaptureInput {
  """The amount to capture, which must be less than or equal to the original amount. Any additional amount will be automatically refunded."""
  amount: Int
  """An application fee to add on to this charge."""
  applicationFee: Int
  """An application fee amount to add on to this charge, which must be less than or equal to the original amount."""
  applicationFeeAmount: Int
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """The email address to send this charge's receipt to. This will override the previously-specified email address for this charge, if one was set. Receipts will not be sent in test mode."""
  receiptEmail: String
  """For card charges, use `statement_descriptor_suffix` instead. Otherwise, you can use this value as the complete description of a charge on your customers’ statements. Must contain at least one letter, maximum 22 characters."""
  statementDescriptor: String
  """Provides information about the charge that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor."""
  statementDescriptorSuffix: String
  """An optional dictionary including the account to automatically transfer to as part of a destination charge. [See the Connect documentation](https://stripe.com/docs/connect/destination-charges) for details."""
  transferData: TransferData2Input
  """A string that identifies this transaction as part of a group. `transfer_group` may only be provided if it has not been set. See the [Connect documentation](https://stripe.com/docs/connect/charges-transfers#transfer-options) for details."""
  transferGroup: String
}

"""An optional dictionary including the account to automatically transfer to as part of a destination charge. [See the Connect documentation](https://stripe.com/docs/connect/destination-charges) for details."""
input TransferData2Input {
  amount: Int
}

input V1ChargeDispute2Input {
  """Evidence to upload, to respond to a dispute. Updating any field in the hash will submit all fields in the hash for review. The combined character count of all fields is limited to 150,000."""
  evidence: EvidenceInput
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
  """Whether to immediately submit evidence to the bank. If `false`, evidence is staged on the dispute. Staged evidence is visible in the API and Dashboard, and can be submitted to the bank by making another request with this attribute set to `true` (the default)."""
  submit: Boolean
}

"""Evidence to upload, to respond to a dispute. Updating any field in the hash will submit all fields in the hash for review. The combined character count of all fields is limited to 150,000."""
input EvidenceInput {
  accessActivityLog: String
  billingAddress: String
  cancellationPolicy: String
  cancellationPolicyDisclosure: String
  cancellationRebuttal: String
  customerCommunication: String
  customerEmailAddress: String
  customerName: String
  customerPurchaseIp: String
  customerSignature: String
  duplicateChargeDocumentation: String
  duplicateChargeExplanation: String
  duplicateChargeId: String
  productDescription: String
  receipt: String
  refundPolicy: String
  refundPolicyDisclosure: String
  refundRefusalExplanation: String
  serviceDate: String
  serviceDocumentation: String
  shippingAddress: String
  shippingCarrier: String
  shippingDate: String
  shippingDocumentation: String
  shippingTrackingNumber: String
  uncategorizedFile: String
  uncategorizedText: String
}

input V1ChargeDisputeCloseInput {
  """Specifies which fields in the response should be expanded."""
  expand: [String]
}

input V1ChargeRefundInput {
  amount: Int
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
  paymentIntent: String
  reason: Reason6
  refundApplicationFee: Boolean
  reverseTransfer: Boolean
}

enum Reason6 {
  DUPLICATE
  FRAUDULENT
  REQUESTED_BY_CUSTOMER
}

input V1ChargeRefunds2Input {
  amount: Int
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
  paymentIntent: String
  reason: Reason6
  refundApplicationFee: Boolean
  reverseTransfer: Boolean
}

input V1ChargeRefund3Input {
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  metadata: JSON
}

input V1CheckoutSessions2Input {
  """Enables user redeemable promotion codes."""
  allowPromotionCodes: Boolean
  """Settings for automatic tax lookup for this session and resulting payments, invoices, and subscriptions."""
  automaticTax: AutomaticTaxInput
  """Specify whether Checkout should collect the customer's billing address."""
  billingAddressCollection: BillingAddressCollection2
  """The URL the customer will be directed to if they decide to cancel payment and return to your website."""
  cancelUrl: String!
  """
  A unique string to reference the Checkout Session. This can be a
  customer ID, a cart ID, or similar, and can be used to reconcile the
  session with your internal systems.
  """
  clientReferenceId: String
  """
  ID of an existing Customer, if one exists. In `payment` mode, the customer’s most recent card
  payment method will be used to prefill the email, name, card details, and billing address
  on the Checkout page. In `subscription` mode, the customer’s [default payment method](https://stripe.com/docs/api/customers/update#update_customer-invoice_settings-default_payment_method)
  will be used if it’s a card, and otherwise the most recent card will be used. A valid billing address is required for Checkout to prefill the customer's card details.
  
  If the customer changes their email on the Checkout page, the Customer object will be updated with the new email.
  
  If blank for Checkout Sessions in `payment` or `subscription` mode, Checkout will create a new Customer object based on information provided during the payment flow.
  
  You can set [`payment_intent_data.setup_future_usage`](https://stripe.com/docs/api/checkout/sessions/create#create_checkout_session-payment_intent_data-setup_future_usage) to have Checkout automatically attach the payment method to the Customer you pass in for future reuse.
  """
  customer: String
  """
  If provided, this value will be used when the Customer object is created.
  If not provided, customers will be asked to enter their email address.
  Use this parameter to prefill customer data if you already have an email
  on file. To access information about the customer once a session is
  complete, use the `customer` field.
  """
  customerEmail: String
  """Controls what fields on Customer can be updated by the Checkout Session. Can only be provided when `customer` is provided."""
  customerUpdate: CustomerUpdateParamsInput
  """The coupon or promotion code to apply to this Session. Currently, only up to one may be specified."""
  discounts: [Discounts3ListItemInput]
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """
  A list of items the customer is purchasing. Use this parameter to pass one-time or recurring [Prices](https://stripe.com/docs/api/prices).
  
  For `payment` mode, there is a maximum of 100 line items, however it is recommended to consolidate line items if there are more than a few dozen.
  
  For `subscription` mode, there is a maximum of 20 line items with recurring Prices and 20 line items with one-time Prices. Line items with one-time Prices in will be on the initial invoice only.
  """
  lineItems: [LineItems2ListItemInput]
  """The IETF language tag of the locale Checkout is displayed in. If blank or `auto`, the browser's locale is used."""
  locale: Locale2
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
  """The mode of the Checkout Session. Required when using prices or `setup` mode. Pass `subscription` if the Checkout Session includes at least one recurring item."""
  mode: Mode4
  """A subset of parameters to be passed to PaymentIntent creation for Checkout Sessions in `payment` mode."""
  paymentIntentData: PaymentIntentDataInput
  """Payment-method-specific configuration."""
  paymentMethodOptions: PaymentMethodOptionsParamInput
  """
  A list of the types of payment methods (e.g., `card`) this Checkout Session can accept.
  
  Read more about the supported payment methods and their requirements in our [payment
  method details guide](/docs/payments/checkout/payment-methods).
  
  If multiple payment methods are passed, Checkout will dynamically reorder them to
  prioritize the most relevant payment methods based on the customer's location and
  other characteristics.
  """
  paymentMethodTypes: [PaymentMethodTypes2ListItem]
  """A subset of parameters to be passed to SetupIntent creation for Checkout Sessions in `setup` mode."""
  setupIntentData: SetupIntentDataInput
  """When set, provides configuration for Checkout to collect a shipping address from a customer."""
  shippingAddressCollection: ShippingAddressCollectionParamsInput
  """The shipping rate to apply to this Session. Currently, only up to one may be specified."""
  shippingRates: [String]
  """
  Describes the type of transaction being performed by Checkout in order to customize
  relevant text on the page, such as the submit button. `submit_type` can only be
  specified on Checkout Sessions in `payment` mode, but not Checkout Sessions
  in `subscription` or `setup` mode.
  """
  submitType: SubmitType2
  """A subset of parameters to be passed to subscription creation for Checkout Sessions in `subscription` mode."""
  subscriptionData: SubscriptionDataInput
  """
  The URL to which Stripe should send customers when payment or setup
  is complete.
  If you’d like access to the Checkout Session for the successful
  payment, read more about it in the guide on [fulfilling orders](https://stripe.com/docs/payments/checkout/fulfill-orders).
  """
  successUrl: String!
  """Controls tax ID collection settings for the session."""
  taxIdCollection: TaxIdCollectionInput
}

"""Settings for automatic tax lookup for this session and resulting payments, invoices, and subscriptions."""
input AutomaticTaxInput {
  enabled: Boolean!
}

enum BillingAddressCollection2 {
  AUTO
  REQUIRED
}

"""Controls what fields on Customer can be updated by the Checkout Session. Can only be provided when `customer` is provided."""
input CustomerUpdateParamsInput {
  address: Address5
  name: Name17
  shipping: Shipping3
}

enum Address5 {
  AUTO
  NEVER
}

enum Name17 {
  AUTO
  NEVER
}

enum Shipping3 {
  AUTO
  NEVER
}

input Discounts3ListItemInput {
  coupon: String
  promotionCode: String
}

input LineItems2ListItemInput {
  adjustableQuantity: AdjustableQuantityInput
  amount: Int
  currency: String
  description: String
  dynamicTaxRates: [String]
  images: [String]
  name: String
  price: String
  priceData: PriceDataInput
  quantity: Int
  taxRates: [String]
}

input AdjustableQuantityInput {
  enabled: Boolean!
  maximum: Int
  minimum: Int
}

input PriceDataInput {
  currency: String!
  product: String
  productData: ProductDataInput
  recurring: RecurringAdhocInput
  taxBehavior: TaxBehavior2
  unitAmount: Int
  unitAmountDecimal: String
}

input ProductDataInput {
  description: String
  images: [String]
  metadata: JSON
  name: String!
  taxCode: String
}

enum Locale2 {
  AUTO
  BG
  CS
  DA
  DE
  EL
  EN
  EN_GB
  ES
  ES_419
  ET
  FI
  FR
  FR_CA
  HR
  HU
  ID
  IT
  JA
  KO
  LT
  LV
  MS
  MT
  NB
  NL
  PL
  PT
  PT_BR
  RO
  RU
  SK
  SL
  SV
  TH
  TR
  VI
  ZH
  ZH_HK
  ZH_TW
}

enum Mode4 {
  PAYMENT
  SETUP
  SUBSCRIPTION
}

"""A subset of parameters to be passed to PaymentIntent creation for Checkout Sessions in `payment` mode."""
input PaymentIntentDataInput {
  applicationFeeAmount: Int
  captureMethod: CaptureMethod
  description: String
  metadata: JSON
  onBehalfOf: String
  receiptEmail: String
  setupFutureUsage: SetupFutureUsage
  shipping: Shipping4Input
  statementDescriptor: String
  statementDescriptorSuffix: String
  transferData: TransferDataParamsInput
  transferGroup: String
}

enum CaptureMethod {
  AUTOMATIC
  MANUAL
}

enum SetupFutureUsage {
  OFF_SESSION
  ON_SESSION
}

input Shipping4Input {
  address: Address6Input!
  carrier: String
  name: String!
  phone: String
  trackingNumber: String
}

input Address6Input {
  city: String
  country: String
  line1: String!
  line2: String
  postalCode: String
  state: String
}

input TransferDataParamsInput {
  amount: Int
  destination: String!
}

"""Payment-method-specific configuration."""
input PaymentMethodOptionsParamInput {
  acssDebit: AcssDebit3Input
  boleto: Boleto3Input
  oxxo: Oxxo3Input
  wechatPay: WechatPay2Input
}

input AcssDebit3Input {
  currency: Currency24
  mandateOptions: MandateOptionsInput
  verificationMethod: VerificationMethod2
}

enum Currency24 {
  CAD
  USD
}

input MandateOptionsInput {
  customMandateUrl: JSON
  intervalDescription: String
  paymentSchedule: PaymentSchedule2
  transactionType: TransactionType2
}

enum PaymentSchedule2 {
  COMBINED
  INTERVAL
  SPORADIC
}

enum TransactionType2 {
  BUSINESS
  PERSONAL
}

enum VerificationMethod2 {
  AUTOMATIC
  INSTANT
  MICRODEPOSITS
}

input Boleto3Input {
  expiresAfterDays: Int
}

input Oxxo3Input {
  expiresAfterDays: Int
}

input WechatPay2Input {
  appId: String
  client: Client!
}

enum Client {
  ANDROID
  IOS
  WEB
}

enum PaymentMethodTypes2ListItem {
  ACSS_DEBIT
  AFTERPAY_CLEARPAY
  ALIPAY
  BACS_DEBIT
  BANCONTACT
  BOLETO
  CARD
  EPS
  FPX
  GIROPAY
  GRABPAY
  IDEAL
  OXXO
  P24
  SEPA_DEBIT
  SOFORT
  WECHAT_PAY
}

"""A subset of parameters to be passed to SetupIntent creation for Checkout Sessions in `setup` mode."""
input SetupIntentDataInput {
  description: String
  metadata: JSON
  onBehalfOf: String
}

"""When set, provides configuration for Checkout to collect a shipping address from a customer."""
input ShippingAddressCollectionParamsInput {
  allowedCountries: [AllowedCountries2ListItem]!
}

enum AllowedCountries2ListItem {
  AC
  AD
  AE
  AF
  AG
  AI
  AL
  AM
  AO
  AQ
  AR
  AT
  AU
  AW
  AX
  AZ
  BA
  BB
  BD
  BE
  BF
  BG
  BH
  BI
  BJ
  BL
  BM
  BN
  BO
  BQ
  BR
  BS
  BT
  BV
  BW
  BY
  BZ
  CA
  CD
  CF
  CG
  CH
  CI
  CK
  CL
  CM
  CN
  CO
  CR
  CV
  CW
  CY
  CZ
  DE
  DJ
  DK
  DM
  DO
  DZ
  EC
  EE
  EG
  EH
  ER
  ES
  ET
  FI
  FJ
  FK
  FO
  FR
  GA
  GB
  GD
  GE
  GF
  GG
  GH
  GI
  GL
  GM
  GN
  GP
  GQ
  GR
  GS
  GT
  GU
  GW
  GY
  HK
  HN
  HR
  HT
  HU
  ID
  IE
  IL
  IM
  IN
  IO
  IQ
  IS
  IT
  JE
  JM
  JO
  JP
  KE
  KG
  KH
  KI
  KM
  KN
  KR
  KW
  KY
  KZ
  LA
  LB
  LC
  LI
  LK
  LR
  LS
  LT
  LU
  LV
  LY
  MA
  MC
  MD
  ME
  MF
  MG
  MK
  ML
  MM
  MN
  MO
  MQ
  MR
  MS
  MT
  MU
  MV
  MW
  MX
  MY
  MZ
  NA
  NC
  NE
  NG
  NI
  NL
  NO
  NP
  NR
  NU
  NZ
  OM
  PA
  PE
  PF
  PG
  PH
  PK
  PL
  PM
  PN
  PR
  PS
  PT
  PY
  QA
  RE
  RO
  RS
  RU
  RW
  SA
  SB
  SC
  SE
  SG
  SH
  SI
  SJ
  SK
  SL
  SM
  SN
  SO
  SR
  SS
  ST
  SV
  SX
  SZ
  TA
  TC
  TD
  TF
  TG
  TH
  TJ
  TK
  TL
  TM
  TN
  TO
  TR
  TT
  TV
  TW
  TZ
  UA
  UG
  US
  UY
  UZ
  VA
  VC
  VE
  VG
  VN
  VU
  WF
  WS
  XK
  YE
  YT
  ZA
  ZM
  ZW
  ZZ
}

enum SubmitType2 {
  AUTO
  BOOK
  DONATE
  PAY
}

"""A subset of parameters to be passed to subscription creation for Checkout Sessions in `subscription` mode."""
input SubscriptionDataInput {
  applicationFeePercent: Float
  defaultTaxRates: [String]
  items: [ItemsListItemInput]
  metadata: JSON
  transferData: TransferData3Input
  trialEnd: Int
  trialPeriodDays: Int
}

input ItemsListItemInput {
  plan: String!
  quantity: Int
  taxRates: [String]
}

input TransferData3Input {
  amountPercent: Float
  destination: String!
}

"""Controls tax ID collection settings for the session."""
input TaxIdCollectionInput {
  enabled: Boolean!
}

input V1Coupons3Input {
  """A positive integer representing the amount to subtract from an invoice total (required if `percent_off` is not passed)."""
  amountOff: Int
  """A hash containing directions for what this Coupon will apply discounts to."""
  appliesTo: AppliesToInput
  """Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) of the `amount_off` parameter (required if `amount_off` is passed)."""
  currency: String
  """Specifies how long the discount will be in effect if used on a subscription. Can be `forever`, `once`, or `repeating`. Defaults to `once`."""
  duration: Duration2
  """Required only if `duration` is `repeating`, in which case it must be a positive integer that specifies the number of months the discount will be in effect."""
  durationInMonths: Int
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """Unique string of your choice that will be used to identify this coupon when applying it to a customer. If you don't want to specify a particular code, you can leave the ID blank and we'll generate a random code for you."""
  id: String
  """A positive integer specifying the number of times the coupon can be redeemed before it's no longer valid. For example, you might have a 50% off coupon that the first 20 readers of your blog can use."""
  maxRedemptions: Int
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
  """Name of the coupon displayed to customers on, for instance invoices, or receipts. By default the `id` is shown if `name` is not set."""
  name: String
  """A positive float larger than 0, and smaller or equal to 100, that represents the discount the coupon will apply (required if `amount_off` is not passed)."""
  percentOff: Float
  """Unix timestamp specifying the last time at which the coupon can be redeemed. After the redeem_by date, the coupon can no longer be applied to new customers."""
  redeemBy: Int
}

"""A hash containing directions for what this Coupon will apply discounts to."""
input AppliesToInput {
  products: [String]
}

enum Duration2 {
  FOREVER
  ONCE
  REPEATING
}

input V1Coupon2Input {
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
  """Name of the coupon displayed to customers on, for instance invoices, or receipts. By default the `id` is shown if `name` is not set."""
  name: String
}

input V1CreditNotes2Input {
  """The integer amount in %s representing the total amount of the credit note."""
  amount: Int
  """The integer amount in %s representing the amount to credit the customer's balance, which will be automatically applied to their next invoice."""
  creditAmount: Int
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """ID of the invoice."""
  invoice: String!
  """Line items that make up the credit note."""
  lines: [Lines2ListItemInput]
  """The credit note's memo appears on the credit note PDF."""
  memo: String
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
  """The integer amount in %s representing the amount that is credited outside of Stripe."""
  outOfBandAmount: Int
  """Reason for issuing this credit note, one of `duplicate`, `fraudulent`, `order_change`, or `product_unsatisfactory`"""
  reason: Reason8
  """ID of an existing refund to link this credit note to."""
  refund: String
  """The integer amount in %s representing the amount to refund. If set, a refund will be created for the charge associated with the invoice."""
  refundAmount: Int
}

input Lines2ListItemInput {
  amount: Int
  description: String
  invoiceLineItem: String
  quantity: Int
  taxRates: JSON
  type: Type15!
  unitAmount: Int
  unitAmountDecimal: String
}

enum Reason8 {
  DUPLICATE
  FRAUDULENT
  ORDER_CHANGE
  PRODUCT_UNSATISFACTORY
}

input V1CreditNote2Input {
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """Credit note memo."""
  memo: String
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
}

input V1CreditNoteVoidInput {
  """Specifies which fields in the response should be expanded."""
  expand: [String]
}

input V1Customers3Input {
  """The customer's address."""
  address: JSON
  """An integer amount in %s that represents the customer's current balance, which affect the customer's future invoices. A negative amount represents a credit that decreases the amount due on an invoice; a positive amount increases the amount due on an invoice."""
  balance: Int
  coupon: String
  """An arbitrary string that you can attach to a customer object. It is displayed alongside the customer in the dashboard."""
  description: String
  """Customer's email address. It's displayed alongside the customer in your dashboard and can be useful for searching and tracking. This may be up to *512 characters*."""
  email: String
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """The prefix for the customer used to generate unique invoice numbers. Must be 3–12 uppercase letters or numbers."""
  invoicePrefix: String
  """Default invoice settings for this customer."""
  invoiceSettings: InvoiceSettingsInput
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
  """The customer's full name or business name."""
  name: String
  """The sequence to be used on the customer's next invoice. Defaults to 1."""
  nextInvoiceSequence: Int
  paymentMethod: String
  """The customer's phone number."""
  phone: String
  """Customer's preferred languages, ordered by preference."""
  preferredLocales: [String]
  """The API ID of a promotion code to apply to the customer. The customer will have a discount applied on all recurring payments. Charges you create through the API will not have the discount."""
  promotionCode: String
  """The customer's shipping information. Appears on invoices emailed to this customer."""
  shipping: JSON
  source: String
  """Tax details about the customer."""
  tax: TaxInput
  """The customer's tax exemption. One of `none`, `exempt`, or `reverse`."""
  taxExempt: TaxExempt3
  """The customer's tax IDs."""
  taxIdData: [TaxIdDataListItemInput]
}

"""Default invoice settings for this customer."""
input InvoiceSettingsInput {
  customFields: JSON
  defaultPaymentMethod: String
  footer: String
}

"""Tax details about the customer."""
input TaxInput {
  ipAddress: JSON
}

enum TaxExempt3 {
  _
  EXEMPT
  NONE
  REVERSE
}

input TaxIdDataListItemInput {
  type: Type20!
  value: String!
}

input V1Customer3Input {
  """The customer's address."""
  address: JSON
  """An integer amount in %s that represents the customer's current balance, which affect the customer's future invoices. A negative amount represents a credit that decreases the amount due on an invoice; a positive amount increases the amount due on an invoice."""
  balance: Int
  """Either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/js), or a dictionary containing a user's bank account details."""
  bankAccount: JSON
  """A token, like the ones returned by [Stripe.js](https://stripe.com/docs/js)."""
  card: JSON
  coupon: String
  """ID of Alipay account to make the customer's new default for invoice payments."""
  defaultAlipayAccount: String
  """ID of bank account to make the customer's new default for invoice payments."""
  defaultBankAccount: String
  """ID of card to make the customer's new default for invoice payments."""
  defaultCard: String
  """
  If you are using payment methods created via the PaymentMethods API, see the [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/update#update_customer-invoice_settings-default_payment_method) parameter.
  
  Provide the ID of a payment source already attached to this customer to make it this customer's default payment source.
  
  If you want to add a new payment source and make it the default, see the [source](https://stripe.com/docs/api/customers/update#update_customer-source) property.
  """
  defaultSource: String
  """An arbitrary string that you can attach to a customer object. It is displayed alongside the customer in the dashboard."""
  description: String
  """Customer's email address. It's displayed alongside the customer in your dashboard and can be useful for searching and tracking. This may be up to *512 characters*."""
  email: String
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """The prefix for the customer used to generate unique invoice numbers. Must be 3–12 uppercase letters or numbers."""
  invoicePrefix: String
  """Default invoice settings for this customer."""
  invoiceSettings: InvoiceSettingsInput
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
  """The customer's full name or business name."""
  name: String
  """The sequence to be used on the customer's next invoice. Defaults to 1."""
  nextInvoiceSequence: Int
  """The customer's phone number."""
  phone: String
  """Customer's preferred languages, ordered by preference."""
  preferredLocales: [String]
  """The API ID of a promotion code to apply to the customer. The customer will have a discount applied on all recurring payments. Charges you create through the API will not have the discount."""
  promotionCode: String
  """The customer's shipping information. Appears on invoices emailed to this customer."""
  shipping: JSON
  source: String
  """Tax details about the customer."""
  tax: TaxInput
  """The customer's tax exemption. One of `none`, `exempt`, or `reverse`."""
  taxExempt: TaxExempt3
  """Unix timestamp representing the end of the trial period the customer will get before being charged for the first time. This will always overwrite any trials that might apply via a subscribed plan. If set, trial_end will override the default trial period of the plan the customer is being subscribed to. The special value `now` can be provided to end the customer's trial immediately. Can be at most two years from `billing_cycle_anchor`."""
  trialEnd: JSON
}

input V1CustomerBalanceTransactions2Input {
  """The integer amount in **%s** to apply to the customer's credit balance."""
  amount: Int!
  """Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). If the customer's [`currency`](https://stripe.com/docs/api/customers/object#customer_object-currency) is set, this value must match it. If the customer's `currency` is not set, it will be updated to this value."""
  currency: String!
  """An arbitrary string attached to the object. Often useful for displaying to users."""
  description: String
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
}

input V1CustomerBalanceTransactions3Input {
  """An arbitrary string attached to the object. Often useful for displaying to users."""
  description: String
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
}

input V1CustomerBankAccounts2Input {
  """A token returned by [Stripe.js](https://stripe.com/docs/js) representing the user’s Alipay account details."""
  alipayAccount: String
  """Either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/js), or a dictionary containing a user's bank account details."""
  bankAccount: JSON
  """A token, like the ones returned by [Stripe.js](https://stripe.com/docs/js)."""
  card: JSON
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
  """Please refer to full [documentation](https://stripe.com/docs/api) instead."""
  source: String
}

type V1CustomerBankAccount5 {
  account: JSON
  """The name of the person or business that owns the bank account."""
  accountHolderName: String
  """The type of entity that holds the account. This can be either `individual` or `company`."""
  accountHolderType: String
  """The bank account type. This can only be `checking` or `savings` in most countries. In Japan, this can only be `futsu` or `toza`."""
  accountType: String
  achCreditTransfer: AchCreditTransfer2
  achDebit: AchDebit2
  acssDebit: AcssDebit4
  """City/District/Suburb/Town/Village."""
  addressCity: String
  """Billing address country, if provided when creating card."""
  addressCountry: String
  """Address line 1 (Street address/PO Box/Company name)."""
  addressLine1: String
  """If `address_line1` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`."""
  addressLine1Check: String
  """Address line 2 (Apartment/Suite/Unit/Building)."""
  addressLine2: String
  """State/County/Province/Region."""
  addressState: String
  """ZIP or postal code."""
  addressZip: String
  """If `address_zip` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`."""
  addressZipCheck: String
  alipay: Alipay2
  """A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount associated with the source. This is the amount for which the source will be chargeable once ready. Required for `single_use` sources."""
  amount: Int
  auBecsDebit: AuBecsDebit2
  availablePayoutMethods: JSON
  bancontact: Bancontact2
  """Name of the bank associated with the routing number (e.g., `WELLS FARGO`)."""
  bankName: String
  """Card brand. Can be `American Express`, `Diners Club`, `Discover`, `JCB`, `MasterCard`, `UnionPay`, `Visa`, or `Unknown`."""
  brand: String
  card: Card6
  cardPresent: CardPresent2
  """The client secret of the source. Used for client-side retrieval using a publishable key."""
  clientSecret: String
  codeVerification: CodeVerification
  country: JSON
  """Time at which the object was created. Measured in seconds since the Unix epoch."""
  created: Int
  currency: JSON
  customer: JSON
  """If a CVC was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. A result of unchecked indicates that CVC was provided but hasn't been checked yet. Checks are typically performed when attaching a card to a Customer object, or when creating a charge. For more details, see [Check if a card is valid without a charge](https://support.stripe.com/questions/check-if-a-card-is-valid-without-a-charge)."""
  cvcCheck: String
  defaultForCurrency: JSON
  """(For tokenized numbers only.) The last four digits of the device account number."""
  dynamicLast4: String
  eps: Eps2
  """Two-digit number representing the card's expiration month."""
  expMonth: Int
  """Four-digit number representing the card's expiration year."""
  expYear: Int
  fingerprint: JSON
  """The authentication `flow` of the source. `flow` is one of `redirect`, `receiver`, `code_verification`, `none`."""
  flow: String
  """Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`."""
  funding: String
  giropay: Giropay2
  """Unique identifier for the object."""
  id: String
  ideal: Ideal2
  klarna: Klarna2
  last4: JSON
  """Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."""
  livemode: Boolean
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."""
  metadata: JSON
  multibanco: Multibanco2
  """Cardholder name."""
  name: String
  object: JSON
  """Information about the owner of the payment instrument that may be used or required by particular source types."""
  owner: Owner3
  p24: P242
  receiver: Receiver2
  """The recipient that this card belongs to. This attribute will not be in the card object if the card belongs to a customer or account instead."""
  recipient: JSON
  redirect: Redirect
  """The routing transit number for the bank account."""
  routingNumber: String
  sepaDebit: SepaDebit2
  sofort: Sofort2
  sourceOrder: SourceOrder
  """Extra information about a source. This will appear on your customer's statement every time you charge the source."""
  statementDescriptor: String
  status: JSON
  threeDSecure: ThreeDSecure4
  """If the card number is tokenized, this is the method that was used. Can be `android_pay` (includes Google Pay), `apple_pay`, `masterpass`, `visa_checkout`, or null."""
  tokenizationMethod: String
  """The `type` of the source. The `type` is a payment method, one of `ach_credit_transfer`, `ach_debit`, `alipay`, `bancontact`, `card`, `card_present`, `eps`, `giropay`, `ideal`, `multibanco`, `klarna`, `p24`, `sepa_debit`, `sofort`, `three_d_secure`, or `wechat`. An additional hash is included on the source with a name matching this value. It contains additional information specific to the [payment method](https://stripe.com/docs/sources) used."""
  type: Type18
  """Either `reusable` or `single_use`. Whether this source should be reusable or not. Some source types may or may not be reusable by construction, while others may leave the option at creation. If an incompatible value is passed, an error will be returned."""
  usage: String
  wechat: Wechat2
}

input V1CustomerBankAccount4Input {
  """The name of the person or business that owns the bank account."""
  accountHolderName: String
  """The type of entity that holds the account. This can be either `individual` or `company`."""
  accountHolderType: AccountHolderType8
  """City/District/Suburb/Town/Village."""
  addressCity: String
  """Billing address country, if provided when creating card."""
  addressCountry: String
  """Address line 1 (Street address/PO Box/Company name)."""
  addressLine1: String
  """Address line 2 (Apartment/Suite/Unit/Building)."""
  addressLine2: String
  """State/County/Province/Region."""
  addressState: String
  """ZIP or postal code."""
  addressZip: String
  """Two digit number representing the card’s expiration month."""
  expMonth: String
  """Four digit number representing the card’s expiration year."""
  expYear: String
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
  """Cardholder name."""
  name: String
  owner: Owner4Input
}

enum AccountHolderType8 {
  COMPANY
  INDIVIDUAL
}

input Owner4Input {
  address: SourceAddressInput
  email: String
  name: String
  phone: String
}

input SourceAddressInput {
  city: String
  country: String
  line1: String
  line2: String
  postalCode: String
  state: String
}

input V1CustomerBankAccountVerifyInput {
  """Two positive integers, in *cents*, equal to the values of the microdeposits sent to the bank account."""
  amounts: [Int]
  """Specifies which fields in the response should be expanded."""
  expand: [String]
}

input V1CustomerCards2Input {
  """A token returned by [Stripe.js](https://stripe.com/docs/js) representing the user’s Alipay account details."""
  alipayAccount: String
  """Either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/js), or a dictionary containing a user's bank account details."""
  bankAccount: JSON
  """A token, like the ones returned by [Stripe.js](https://stripe.com/docs/js)."""
  card: JSON
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
  """Please refer to full [documentation](https://stripe.com/docs/api) instead."""
  source: String
}

type V1CustomerCard5 {
  account: JSON
  """The name of the person or business that owns the bank account."""
  accountHolderName: String
  """The type of entity that holds the account. This can be either `individual` or `company`."""
  accountHolderType: String
  """The bank account type. This can only be `checking` or `savings` in most countries. In Japan, this can only be `futsu` or `toza`."""
  accountType: String
  achCreditTransfer: AchCreditTransfer2
  achDebit: AchDebit2
  acssDebit: AcssDebit4
  """City/District/Suburb/Town/Village."""
  addressCity: String
  """Billing address country, if provided when creating card."""
  addressCountry: String
  """Address line 1 (Street address/PO Box/Company name)."""
  addressLine1: String
  """If `address_line1` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`."""
  addressLine1Check: String
  """Address line 2 (Apartment/Suite/Unit/Building)."""
  addressLine2: String
  """State/County/Province/Region."""
  addressState: String
  """ZIP or postal code."""
  addressZip: String
  """If `address_zip` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`."""
  addressZipCheck: String
  alipay: Alipay2
  """A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount associated with the source. This is the amount for which the source will be chargeable once ready. Required for `single_use` sources."""
  amount: Int
  auBecsDebit: AuBecsDebit2
  availablePayoutMethods: JSON
  bancontact: Bancontact2
  """Name of the bank associated with the routing number (e.g., `WELLS FARGO`)."""
  bankName: String
  """Card brand. Can be `American Express`, `Diners Club`, `Discover`, `JCB`, `MasterCard`, `UnionPay`, `Visa`, or `Unknown`."""
  brand: String
  card: Card6
  cardPresent: CardPresent2
  """The client secret of the source. Used for client-side retrieval using a publishable key."""
  clientSecret: String
  codeVerification: CodeVerification
  country: JSON
  """Time at which the object was created. Measured in seconds since the Unix epoch."""
  created: Int
  currency: JSON
  customer: JSON
  """If a CVC was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. A result of unchecked indicates that CVC was provided but hasn't been checked yet. Checks are typically performed when attaching a card to a Customer object, or when creating a charge. For more details, see [Check if a card is valid without a charge](https://support.stripe.com/questions/check-if-a-card-is-valid-without-a-charge)."""
  cvcCheck: String
  defaultForCurrency: JSON
  """(For tokenized numbers only.) The last four digits of the device account number."""
  dynamicLast4: String
  eps: Eps2
  """Two-digit number representing the card's expiration month."""
  expMonth: Int
  """Four-digit number representing the card's expiration year."""
  expYear: Int
  fingerprint: JSON
  """The authentication `flow` of the source. `flow` is one of `redirect`, `receiver`, `code_verification`, `none`."""
  flow: String
  """Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`."""
  funding: String
  giropay: Giropay2
  """Unique identifier for the object."""
  id: String
  ideal: Ideal2
  klarna: Klarna2
  last4: JSON
  """Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."""
  livemode: Boolean
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."""
  metadata: JSON
  multibanco: Multibanco2
  """Cardholder name."""
  name: String
  object: JSON
  """Information about the owner of the payment instrument that may be used or required by particular source types."""
  owner: Owner3
  p24: P242
  receiver: Receiver2
  """The recipient that this card belongs to. This attribute will not be in the card object if the card belongs to a customer or account instead."""
  recipient: JSON
  redirect: Redirect
  """The routing transit number for the bank account."""
  routingNumber: String
  sepaDebit: SepaDebit2
  sofort: Sofort2
  sourceOrder: SourceOrder
  """Extra information about a source. This will appear on your customer's statement every time you charge the source."""
  statementDescriptor: String
  status: JSON
  threeDSecure: ThreeDSecure4
  """If the card number is tokenized, this is the method that was used. Can be `android_pay` (includes Google Pay), `apple_pay`, `masterpass`, `visa_checkout`, or null."""
  tokenizationMethod: String
  """The `type` of the source. The `type` is a payment method, one of `ach_credit_transfer`, `ach_debit`, `alipay`, `bancontact`, `card`, `card_present`, `eps`, `giropay`, `ideal`, `multibanco`, `klarna`, `p24`, `sepa_debit`, `sofort`, `three_d_secure`, or `wechat`. An additional hash is included on the source with a name matching this value. It contains additional information specific to the [payment method](https://stripe.com/docs/sources) used."""
  type: Type18
  """Either `reusable` or `single_use`. Whether this source should be reusable or not. Some source types may or may not be reusable by construction, while others may leave the option at creation. If an incompatible value is passed, an error will be returned."""
  usage: String
  wechat: Wechat2
}

input V1CustomerCard4Input {
  """The name of the person or business that owns the bank account."""
  accountHolderName: String
  """The type of entity that holds the account. This can be either `individual` or `company`."""
  accountHolderType: AccountHolderType8
  """City/District/Suburb/Town/Village."""
  addressCity: String
  """Billing address country, if provided when creating card."""
  addressCountry: String
  """Address line 1 (Street address/PO Box/Company name)."""
  addressLine1: String
  """Address line 2 (Apartment/Suite/Unit/Building)."""
  addressLine2: String
  """State/County/Province/Region."""
  addressState: String
  """ZIP or postal code."""
  addressZip: String
  """Two digit number representing the card’s expiration month."""
  expMonth: String
  """Four digit number representing the card’s expiration year."""
  expYear: String
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
  """Cardholder name."""
  name: String
  owner: Owner4Input
}

input V1CustomerSources2Input {
  """A token returned by [Stripe.js](https://stripe.com/docs/js) representing the user’s Alipay account details."""
  alipayAccount: String
  """Either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/js), or a dictionary containing a user's bank account details."""
  bankAccount: JSON
  """A token, like the ones returned by [Stripe.js](https://stripe.com/docs/js)."""
  card: JSON
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
  """Please refer to full [documentation](https://stripe.com/docs/api) instead."""
  source: String
}

type V1CustomerSource5 {
  account: JSON
  """The name of the person or business that owns the bank account."""
  accountHolderName: String
  """The type of entity that holds the account. This can be either `individual` or `company`."""
  accountHolderType: String
  """The bank account type. This can only be `checking` or `savings` in most countries. In Japan, this can only be `futsu` or `toza`."""
  accountType: String
  achCreditTransfer: AchCreditTransfer2
  achDebit: AchDebit2
  acssDebit: AcssDebit4
  """City/District/Suburb/Town/Village."""
  addressCity: String
  """Billing address country, if provided when creating card."""
  addressCountry: String
  """Address line 1 (Street address/PO Box/Company name)."""
  addressLine1: String
  """If `address_line1` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`."""
  addressLine1Check: String
  """Address line 2 (Apartment/Suite/Unit/Building)."""
  addressLine2: String
  """State/County/Province/Region."""
  addressState: String
  """ZIP or postal code."""
  addressZip: String
  """If `address_zip` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`."""
  addressZipCheck: String
  alipay: Alipay2
  """A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount associated with the source. This is the amount for which the source will be chargeable once ready. Required for `single_use` sources."""
  amount: Int
  auBecsDebit: AuBecsDebit2
  availablePayoutMethods: JSON
  bancontact: Bancontact2
  """Name of the bank associated with the routing number (e.g., `WELLS FARGO`)."""
  bankName: String
  """Card brand. Can be `American Express`, `Diners Club`, `Discover`, `JCB`, `MasterCard`, `UnionPay`, `Visa`, or `Unknown`."""
  brand: String
  card: Card6
  cardPresent: CardPresent2
  """The client secret of the source. Used for client-side retrieval using a publishable key."""
  clientSecret: String
  codeVerification: CodeVerification
  country: JSON
  """Time at which the object was created. Measured in seconds since the Unix epoch."""
  created: Int
  currency: JSON
  customer: JSON
  """If a CVC was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. A result of unchecked indicates that CVC was provided but hasn't been checked yet. Checks are typically performed when attaching a card to a Customer object, or when creating a charge. For more details, see [Check if a card is valid without a charge](https://support.stripe.com/questions/check-if-a-card-is-valid-without-a-charge)."""
  cvcCheck: String
  defaultForCurrency: JSON
  """(For tokenized numbers only.) The last four digits of the device account number."""
  dynamicLast4: String
  eps: Eps2
  """Two-digit number representing the card's expiration month."""
  expMonth: Int
  """Four-digit number representing the card's expiration year."""
  expYear: Int
  fingerprint: JSON
  """The authentication `flow` of the source. `flow` is one of `redirect`, `receiver`, `code_verification`, `none`."""
  flow: String
  """Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`."""
  funding: String
  giropay: Giropay2
  """Unique identifier for the object."""
  id: String
  ideal: Ideal2
  klarna: Klarna2
  last4: JSON
  """Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."""
  livemode: Boolean
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format."""
  metadata: JSON
  multibanco: Multibanco2
  """Cardholder name."""
  name: String
  object: JSON
  """Information about the owner of the payment instrument that may be used or required by particular source types."""
  owner: Owner3
  p24: P242
  receiver: Receiver2
  """The recipient that this card belongs to. This attribute will not be in the card object if the card belongs to a customer or account instead."""
  recipient: JSON
  redirect: Redirect
  """The routing transit number for the bank account."""
  routingNumber: String
  sepaDebit: SepaDebit2
  sofort: Sofort2
  sourceOrder: SourceOrder
  """Extra information about a source. This will appear on your customer's statement every time you charge the source."""
  statementDescriptor: String
  status: JSON
  threeDSecure: ThreeDSecure4
  """If the card number is tokenized, this is the method that was used. Can be `android_pay` (includes Google Pay), `apple_pay`, `masterpass`, `visa_checkout`, or null."""
  tokenizationMethod: String
  """The `type` of the source. The `type` is a payment method, one of `ach_credit_transfer`, `ach_debit`, `alipay`, `bancontact`, `card`, `card_present`, `eps`, `giropay`, `ideal`, `multibanco`, `klarna`, `p24`, `sepa_debit`, `sofort`, `three_d_secure`, or `wechat`. An additional hash is included on the source with a name matching this value. It contains additional information specific to the [payment method](https://stripe.com/docs/sources) used."""
  type: Type18
  """Either `reusable` or `single_use`. Whether this source should be reusable or not. Some source types may or may not be reusable by construction, while others may leave the option at creation. If an incompatible value is passed, an error will be returned."""
  usage: String
  wechat: Wechat2
}

input V1CustomerSource4Input {
  """The name of the person or business that owns the bank account."""
  accountHolderName: String
  """The type of entity that holds the account. This can be either `individual` or `company`."""
  accountHolderType: AccountHolderType8
  """City/District/Suburb/Town/Village."""
  addressCity: String
  """Billing address country, if provided when creating card."""
  addressCountry: String
  """Address line 1 (Street address/PO Box/Company name)."""
  addressLine1: String
  """Address line 2 (Apartment/Suite/Unit/Building)."""
  addressLine2: String
  """State/County/Province/Region."""
  addressState: String
  """ZIP or postal code."""
  addressZip: String
  """Two digit number representing the card’s expiration month."""
  expMonth: String
  """Four digit number representing the card’s expiration year."""
  expYear: String
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
  """Cardholder name."""
  name: String
  owner: Owner4Input
}

input V1CustomerSourceVerifyInput {
  """Two positive integers, in *cents*, equal to the values of the microdeposits sent to the bank account."""
  amounts: [Int]
  """Specifies which fields in the response should be expanded."""
  expand: [String]
}

input V1CustomerSubscriptions2Input {
  """A list of prices and quantities that will generate invoice items appended to the first invoice for this subscription. You may pass up to 20 items."""
  addInvoiceItems: [AddInvoiceItemsListItemInput]
  """A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account. The request must be made by a platform account on a connected account in order to set an application fee percentage. For more information, see the application fees [documentation](https://stripe.com/docs/connect/subscriptions#collecting-fees-on-subscriptions)."""
  applicationFeePercent: Float
  """Automatic tax settings for this subscription."""
  automaticTax: AutomaticTaxConfigInput
  """For new subscriptions, a past timestamp to backdate the subscription's start date to. If set, the first invoice will contain a proration for the timespan between the start date and the current time. Can be combined with trials and the billing cycle anchor."""
  backdateStartDate: Int
  """A future timestamp to anchor the subscription's [billing cycle](https://stripe.com/docs/subscriptions/billing-cycle). This is used to determine the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices."""
  billingCycleAnchor: Int
  """Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period. Pass an empty string to remove previously-defined thresholds."""
  billingThresholds: JSON
  """A timestamp at which the subscription should cancel. If set to a date before the current period ends, this will cause a proration if prorations have been enabled using `proration_behavior`. If set during a future period, this will always cause a proration for that period."""
  cancelAt: Int
  """Boolean indicating whether this subscription should cancel at the end of the current period."""
  cancelAtPeriodEnd: Boolean
  """Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions. Defaults to `charge_automatically`."""
  collectionMethod: CollectionMethod2
  """The ID of the coupon to apply to this subscription. A coupon applied to a subscription will only affect invoices created for that particular subscription."""
  coupon: String
  """Number of days a customer has to pay invoices generated by this subscription. Valid only for subscriptions where `collection_method` is set to `send_invoice`."""
  daysUntilDue: Int
  """ID of the default payment method for the subscription. It must belong to the customer associated with the subscription. This takes precedence over `default_source`. If neither are set, invoices will use the customer's [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source)."""
  defaultPaymentMethod: String
  """ID of the default payment source for the subscription. It must belong to the customer associated with the subscription and be in a chargeable state. If `default_payment_method` is also set, `default_payment_method` will take precedence. If neither are set, invoices will use the customer's [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source)."""
  defaultSource: String
  """The tax rates that will apply to any subscription item that does not have `tax_rates` set. Invoices created will have their `default_tax_rates` populated from the subscription."""
  defaultTaxRates: JSON
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """A list of up to 20 subscription items, each with an attached price."""
  items: [Items3ListItemInput]
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
  """Indicates if a customer is on or off-session while an invoice payment is attempted."""
  offSession: Boolean
  """
  Use `allow_incomplete` to create subscriptions with `status=incomplete` if the first invoice cannot be paid. Creating subscriptions with this status allows you to manage scenarios where additional user actions are needed to pay a subscription's invoice. For example, SCA regulation may require 3DS authentication to complete payment. See the [SCA Migration Guide](https://stripe.com/docs/billing/migration/strong-customer-authentication) for Billing to learn more. This is the default behavior.
  
  Use `default_incomplete` to create Subscriptions with `status=incomplete` when the first invoice requires payment, otherwise start as active. Subscriptions transition to `status=active` when successfully confirming the payment intent on the first invoice. This allows simpler management of scenarios where additional user actions are needed to pay a subscription’s invoice. Such as failed payments, [SCA regulation](https://stripe.com/docs/billing/migration/strong-customer-authentication), or collecting a mandate for a bank debit payment method. If the payment intent is not confirmed within 23 hours subscriptions transition to `status=incomplete_expired`, which is a terminal state.
  
  Use `error_if_incomplete` if you want Stripe to return an HTTP 402 status code if a subscription's first invoice cannot be paid. For example, if a payment method requires 3DS authentication due to SCA regulation and further user action is needed, this parameter does not create a subscription and returns an error instead. This was the default behavior for API versions prior to 2019-03-14. See the [changelog](https://stripe.com/docs/upgrades#2019-03-14) to learn more.
  
  `pending_if_incomplete` is only used with updates and cannot be passed when creating a subscription.
  """
  paymentBehavior: PaymentBehavior
  """Payment settings to pass to invoices created by the subscription."""
  paymentSettings: PaymentSettings2Input
  """Specifies an interval for how often to bill for any pending invoice items. It is analogous to calling [Create an invoice](https://stripe.com/docs/api#create_invoice) for the given subscription at the specified interval."""
  pendingInvoiceItemInterval: JSON
  """The API ID of a promotion code to apply to this subscription. A promotion code applied to a subscription will only affect invoices created for that particular subscription."""
  promotionCode: String
  """
  Determines how to handle [prorations](https://stripe.com/docs/subscriptions/billing-cycle#prorations) resulting from the `billing_cycle_anchor`. Valid values are `create_prorations` or `none`.
  
  Passing `create_prorations` will cause proration invoice items to be created when applicable. Prorations can be disabled by passing `none`. If no value is passed, the default is `create_prorations`.
  """
  prorationBehavior: ProrationBehavior4
  """If specified, the funds from the subscription's invoices will be transferred to the destination and the ID of the resulting transfers will be found on the resulting charges."""
  transferData: TransferData5Input
  """Unix timestamp representing the end of the trial period the customer will get before being charged for the first time. This will always overwrite any trials that might apply via a subscribed plan. If set, trial_end will override the default trial period of the plan the customer is being subscribed to. The special value `now` can be provided to end the customer's trial immediately. Can be at most two years from `billing_cycle_anchor`."""
  trialEnd: JSON
  """Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `trial_end` is not allowed."""
  trialFromPlan: Boolean
  """Integer representing the number of trial period days before the customer is charged for the first time. This will always overwrite any trials that might apply via a subscribed plan."""
  trialPeriodDays: Int
}

input AddInvoiceItemsListItemInput {
  price: String
  priceData: OneTimePriceDataInput
  quantity: Int
  taxRates: JSON
}

"""Automatic tax settings for this subscription."""
input AutomaticTaxConfigInput {
  enabled: Boolean!
}

enum CollectionMethod2 {
  CHARGE_AUTOMATICALLY
  SEND_INVOICE
}

input Items3ListItemInput {
  billingThresholds: JSON
  metadata: JSON
  price: String
  priceData: RecurringPriceDataInput
  quantity: Int
  taxRates: JSON
}

enum PaymentBehavior {
  ALLOW_INCOMPLETE
  DEFAULT_INCOMPLETE
  ERROR_IF_INCOMPLETE
  PENDING_IF_INCOMPLETE
}

"""Payment settings to pass to invoices created by the subscription."""
input PaymentSettings2Input {
  paymentMethodOptions: PaymentMethodOptions3Input
  paymentMethodTypes: JSON
}

input PaymentMethodOptions3Input {
  bancontact: JSON
  card: JSON
}

enum ProrationBehavior4 {
  ALWAYS_INVOICE
  CREATE_PRORATIONS
  NONE
}

"""If specified, the funds from the subscription's invoices will be transferred to the destination and the ID of the resulting transfers will be found on the resulting charges."""
input TransferData5Input {
  amountPercent: Float
  destination: String!
}

input V1CustomerSubscription3Input {
  """A list of prices and quantities that will generate invoice items appended to the first invoice for this subscription. You may pass up to 20 items."""
  addInvoiceItems: [AddInvoiceItemsListItemInput]
  """A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account. The request must be made by a platform account on a connected account in order to set an application fee percentage. For more information, see the application fees [documentation](https://stripe.com/docs/connect/subscriptions#collecting-fees-on-subscriptions)."""
  applicationFeePercent: Float
  """Automatic tax settings for this subscription."""
  automaticTax: AutomaticTaxConfigInput
  """Either `now` or `unchanged`. Setting the value to `now` resets the subscription's billing cycle anchor to the current time. For more information, see the billing cycle [documentation](https://stripe.com/docs/billing/subscriptions/billing-cycle)."""
  billingCycleAnchor: BillingCycleAnchor4
  """Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period. Pass an empty string to remove previously-defined thresholds."""
  billingThresholds: JSON
  """A timestamp at which the subscription should cancel. If set to a date before the current period ends, this will cause a proration if prorations have been enabled using `proration_behavior`. If set during a future period, this will always cause a proration for that period."""
  cancelAt: JSON
  """Boolean indicating whether this subscription should cancel at the end of the current period."""
  cancelAtPeriodEnd: Boolean
  """Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions. Defaults to `charge_automatically`."""
  collectionMethod: CollectionMethod2
  """The ID of the coupon to apply to this subscription. A coupon applied to a subscription will only affect invoices created for that particular subscription."""
  coupon: String
  """Number of days a customer has to pay invoices generated by this subscription. Valid only for subscriptions where `collection_method` is set to `send_invoice`."""
  daysUntilDue: Int
  """ID of the default payment method for the subscription. It must belong to the customer associated with the subscription. This takes precedence over `default_source`. If neither are set, invoices will use the customer's [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source)."""
  defaultPaymentMethod: String
  """ID of the default payment source for the subscription. It must belong to the customer associated with the subscription and be in a chargeable state. If `default_payment_method` is also set, `default_payment_method` will take precedence. If neither are set, invoices will use the customer's [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source)."""
  defaultSource: String
  """The tax rates that will apply to any subscription item that does not have `tax_rates` set. Invoices created will have their `default_tax_rates` populated from the subscription. Pass an empty string to remove previously-defined tax rates."""
  defaultTaxRates: JSON
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """A list of up to 20 subscription items, each with an attached price."""
  items: [Items4ListItemInput]
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
  """Indicates if a customer is on or off-session while an invoice payment is attempted."""
  offSession: Boolean
  """If specified, payment collection for this subscription will be paused."""
  pauseCollection: JSON
  """
  Use `allow_incomplete` to transition the subscription to `status=past_due` if a payment is required but cannot be paid. This allows you to manage scenarios where additional user actions are needed to pay a subscription's invoice. For example, SCA regulation may require 3DS authentication to complete payment. See the [SCA Migration Guide](https://stripe.com/docs/billing/migration/strong-customer-authentication) for Billing to learn more. This is the default behavior.
  
  Use `default_incomplete` to transition the subscription to `status=past_due` when payment is required and await explicit confirmation of the invoice's payment intent. This allows simpler management of scenarios where additional user actions are needed to pay a subscription’s invoice. Such as failed payments, [SCA regulation](https://stripe.com/docs/billing/migration/strong-customer-authentication), or collecting a mandate for a bank debit payment method.
  
  Use `pending_if_incomplete` to update the subscription using [pending updates](https://stripe.com/docs/billing/subscriptions/pending-updates). When you use `pending_if_incomplete` you can only pass the parameters [supported by pending updates](https://stripe.com/docs/billing/pending-updates-reference#supported-attributes).
  
  Use `error_if_incomplete` if you want Stripe to return an HTTP 402 status code if a subscription's invoice cannot be paid. For example, if a payment method requires 3DS authentication due to SCA regulation and further user action is needed, this parameter does not update the subscription and returns an error instead. This was the default behavior for API versions prior to 2019-03-14. See the [changelog](https://stripe.com/docs/upgrades#2019-03-14) to learn more.
  """
  paymentBehavior: PaymentBehavior2
  """Payment settings to pass to invoices created by the subscription."""
  paymentSettings: PaymentSettings2Input
  """Specifies an interval for how often to bill for any pending invoice items. It is analogous to calling [Create an invoice](https://stripe.com/docs/api#create_invoice) for the given subscription at the specified interval."""
  pendingInvoiceItemInterval: JSON
  """The promotion code to apply to this subscription. A promotion code applied to a subscription will only affect invoices created for that particular subscription."""
  promotionCode: String
  """
  Determines how to handle [prorations](https://stripe.com/docs/subscriptions/billing-cycle#prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item's `quantity` changes. Valid values are `create_prorations`, `none`, or `always_invoice`.
  
  Passing `create_prorations` will cause proration invoice items to be created when applicable. These proration items will only be invoiced immediately under [certain conditions](https://stripe.com/docs/subscriptions/upgrading-downgrading#immediate-payment). In order to always invoice immediately for prorations, pass `always_invoice`.
  
  Prorations can be disabled by passing `none`.
  """
  prorationBehavior: ProrationBehavior5
  """If set, the proration will be calculated as though the subscription was updated at the given time. This can be used to apply exactly the same proration that was previewed with [upcoming invoice](https://stripe.com/docs/api#retrieve_customer_invoice) endpoint. It can also be used to implement custom proration logic, such as prorating by day instead of by second, by providing the time that you wish to use for proration calculations."""
  prorationDate: Int
  """If specified, the funds from the subscription's invoices will be transferred to the destination and the ID of the resulting transfers will be found on the resulting charges. This will be unset if you POST an empty value."""
  transferData: JSON
  """Unix timestamp representing the end of the trial period the customer will get before being charged for the first time. This will always overwrite any trials that might apply via a subscribed plan. If set, trial_end will override the default trial period of the plan the customer is being subscribed to. The special value `now` can be provided to end the customer's trial immediately. Can be at most two years from `billing_cycle_anchor`."""
  trialEnd: JSON
  """Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `trial_end` is not allowed."""
  trialFromPlan: Boolean
}

enum BillingCycleAnchor4 {
  NOW
  UNCHANGED
}

input Items4ListItemInput {
  billingThresholds: JSON
  clearUsage: Boolean
  deleted: Boolean
  id: String
  metadata: JSON
  price: String
  priceData: RecurringPriceDataInput
  quantity: Int
  taxRates: JSON
}

enum PaymentBehavior2 {
  ALLOW_INCOMPLETE
  DEFAULT_INCOMPLETE
  ERROR_IF_INCOMPLETE
  PENDING_IF_INCOMPLETE
}

input V1CustomerTaxIds2Input {
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """Type of the tax ID, one of `ae_trn`, `au_abn`, `br_cnpj`, `br_cpf`, `ca_bn`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `ca_qst`, `ch_vat`, `cl_tin`, `es_cif`, `eu_vat`, `gb_vat`, `hk_br`, `id_npwp`, `il_vat`, `in_gst`, `jp_cn`, `jp_rn`, `kr_brn`, `li_uid`, `mx_rfc`, `my_frp`, `my_itn`, `my_sst`, `no_vat`, `nz_gst`, `ru_inn`, `ru_kpp`, `sa_vat`, `sg_gst`, `sg_uen`, `th_vat`, `tw_vat`, `us_ein`, or `za_vat`"""
  type: Type22!
  """Value of the tax ID."""
  value: String!
}

enum Type22 {
  AE_TRN
  AU_ABN
  BR_CNPJ
  BR_CPF
  CA_BN
  CA_GST_HST
  CA_PST_BC
  CA_PST_MB
  CA_PST_SK
  CA_QST
  CH_VAT
  CL_TIN
  ES_CIF
  EU_VAT
  GB_VAT
  HK_BR
  ID_NPWP
  IL_VAT
  IN_GST
  JP_CN
  JP_RN
  KR_BRN
  LI_UID
  MX_RFC
  MY_FRP
  MY_ITN
  MY_SST
  NO_VAT
  NZ_GST
  RU_INN
  RU_KPP
  SA_VAT
  SG_GST
  SG_UEN
  TH_VAT
  TW_VAT
  US_EIN
  ZA_VAT
}

input V1Dispute2Input {
  """Evidence to upload, to respond to a dispute. Updating any field in the hash will submit all fields in the hash for review. The combined character count of all fields is limited to 150,000."""
  evidence: EvidenceInput
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
  """Whether to immediately submit evidence to the bank. If `false`, evidence is staged on the dispute. Staged evidence is visible in the API and Dashboard, and can be submitted to the bank by making another request with this attribute set to `true` (the default)."""
  submit: Boolean
}

input V1DisputeCloseInput {
  """Specifies which fields in the response should be expanded."""
  expand: [String]
}

input V1EphemeralKeysInput {
  """The ID of the Customer you'd like to modify using the resulting ephemeral key."""
  customer: String
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """The ID of the Issuing Card you'd like to access using the resulting ephemeral key."""
  issuingCard: String
}

input V1FileLinks3Input {
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """A future timestamp after which the link will no longer be usable."""
  expiresAt: Int
  """The ID of the file. The file's `purpose` must be one of the following: `business_icon`, `business_logo`, `customer_signature`, `dispute_evidence`, `finance_report_run`, `identity_document_downloadable`, `pci_document`, `selfie`, `sigma_scheduled_query`, or `tax_document_user_upload`."""
  file: String!
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
}

input V1FileLinks4Input {
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """A future timestamp after which the link will no longer be usable, or `now` to expire the link immediately."""
  expiresAt: JSON
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
}

input V1IdentityVerificationSessions3Input {
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
  """A set of options for the session’s verification checks."""
  options: OptionsInput
  """The URL that the user will be redirected to upon completing the verification flow."""
  returnUrl: String
  """The type of [verification check](https://stripe.com/docs/identity/verification-checks) to be performed."""
  type: Type27!
}

"""A set of options for the session’s verification checks."""
input OptionsInput {
  document: JSON
}

input V1IdentityVerificationSessions4Input {
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
  """A set of options for the session’s verification checks."""
  options: OptionsInput
  """The type of [verification check](https://stripe.com/docs/identity/verification-checks) to be performed."""
  type: Type27
}

input V1IdentityVerificationSessionsCancelInput {
  """Specifies which fields in the response should be expanded."""
  expand: [String]
}

input V1IdentityVerificationSessionsRedactInput {
  """Specifies which fields in the response should be expanded."""
  expand: [String]
}

input V1Invoiceitems3Input {
  """The integer amount in %s of the charge to be applied to the upcoming invoice. Passing in a negative `amount` will reduce the `amount_due` on the invoice."""
  amount: Int
  """Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."""
  currency: String
  """The ID of the customer who will be billed when this invoice item is billed."""
  customer: String!
  """An arbitrary string which you can attach to the invoice item. The description is displayed in the invoice for easy tracking."""
  description: String
  """Controls whether discounts apply to this invoice item. Defaults to false for prorations or negative invoice items, and true for all other invoice items."""
  discountable: Boolean
  """The coupons to redeem into discounts for the invoice item or invoice line item."""
  discounts: JSON
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """The ID of an existing invoice to add this invoice item to. When left blank, the invoice item will be added to the next upcoming scheduled invoice. This is useful when adding invoice items in response to an invoice.created webhook. You can only add invoice items to draft invoices and there is a maximum of 250 items per invoice."""
  invoice: String
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
  """The period associated with this invoice item."""
  period: PeriodInput
  """The ID of the price object."""
  price: String
  """Data used to generate a new [Price](https://stripe.com/docs/api/prices) object inline."""
  priceData: PriceData2Input
  """Non-negative integer. The quantity of units for the invoice item."""
  quantity: Int
  """The ID of a subscription to add this invoice item to. When left blank, the invoice item will be be added to the next upcoming scheduled invoice. When set, scheduled invoices for subscriptions other than the specified subscription will ignore the invoice item. Use this when you want to express that an invoice item has been accrued within the context of a particular subscription."""
  subscription: String
  """The tax rates which apply to the invoice item. When set, the `default_tax_rates` on the invoice do not apply to this invoice item."""
  taxRates: [String]
  """The integer unit amount in %s of the charge to be applied to the upcoming invoice. This `unit_amount` will be multiplied by the quantity to get the full amount. Passing in a negative `unit_amount` will reduce the `amount_due` on the invoice."""
  unitAmount: Int
  """Same as `unit_amount`, but accepts a decimal value in %s with at most 12 decimal places. Only one of `unit_amount` and `unit_amount_decimal` can be set."""
  unitAmountDecimal: String
}

"""The period associated with this invoice item."""
input PeriodInput {
  end: Int!
  start: Int!
}

"""Data used to generate a new [Price](https://stripe.com/docs/api/prices) object inline."""
input PriceData2Input {
  currency: String!
  product: String!
  taxBehavior: TaxBehavior2
  unitAmount: Int
  unitAmountDecimal: String
}

input V1Invoiceitem2Input {
  """The integer amount in %s of the charge to be applied to the upcoming invoice. If you want to apply a credit to the customer's account, pass a negative amount."""
  amount: Int
  """An arbitrary string which you can attach to the invoice item. The description is displayed in the invoice for easy tracking."""
  description: String
  """Controls whether discounts apply to this invoice item. Defaults to false for prorations or negative invoice items, and true for all other invoice items. Cannot be set to true for prorations."""
  discountable: Boolean
  """The coupons & existing discounts which apply to the invoice item or invoice line item. Item discounts are applied before invoice discounts. Pass an empty string to remove previously-defined discounts."""
  discounts: JSON
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
  """The period associated with this invoice item."""
  period: PeriodInput
  """The ID of the price object."""
  price: String
  """Data used to generate a new [Price](https://stripe.com/docs/api/prices) object inline."""
  priceData: PriceData2Input
  """Non-negative integer. The quantity of units for the invoice item."""
  quantity: Int
  """The tax rates which apply to the invoice item. When set, the `default_tax_rates` on the invoice do not apply to this invoice item. Pass an empty string to remove previously-defined tax rates."""
  taxRates: JSON
  """The integer unit amount in %s of the charge to be applied to the upcoming invoice. This unit_amount will be multiplied by the quantity to get the full amount. If you want to apply a credit to the customer's account, pass a negative unit_amount."""
  unitAmount: Int
  """Same as `unit_amount`, but accepts a decimal value in %s with at most 12 decimal places. Only one of `unit_amount` and `unit_amount_decimal` can be set."""
  unitAmountDecimal: String
}

input V1Invoices2Input {
  """The account tax IDs associated with the invoice. Only editable when the invoice is a draft."""
  accountTaxIds: JSON
  """A fee in %s that will be applied to the invoice and transferred to the application owner's Stripe account. The request must be made with an OAuth key or the Stripe-Account header in order to take an application fee. For more information, see the application fees [documentation](https://stripe.com/docs/billing/invoices/connect#collecting-fees)."""
  applicationFeeAmount: Int
  """Controls whether Stripe will perform [automatic collection](https://stripe.com/docs/billing/invoices/workflow/#auto_advance) of the invoice. When `false`, the invoice's state will not automatically advance without an explicit action."""
  autoAdvance: Boolean
  """Settings for automatic tax lookup for this invoice."""
  automaticTax: AutomaticTaxParamInput
  """Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this invoice using the default source attached to the customer. When sending an invoice, Stripe will email this invoice to the customer with payment instructions. Defaults to `charge_automatically`."""
  collectionMethod: CollectionMethod4
  """A list of up to 4 custom fields to be displayed on the invoice."""
  customFields: JSON
  """The ID of the customer who will be billed."""
  customer: String!
  """The number of days from when the invoice is created until it is due. Valid only for invoices where `collection_method=send_invoice`."""
  daysUntilDue: Int
  """ID of the default payment method for the invoice. It must belong to the customer associated with the invoice. If not set, defaults to the subscription's default payment method, if any, or to the default payment method in the customer's invoice settings."""
  defaultPaymentMethod: String
  """ID of the default payment source for the invoice. It must belong to the customer associated with the invoice and be in a chargeable state. If not set, defaults to the subscription's default source, if any, or to the customer's default source."""
  defaultSource: String
  """The tax rates that will apply to any line item that does not have `tax_rates` set."""
  defaultTaxRates: [String]
  """An arbitrary string attached to the object. Often useful for displaying to users. Referenced as 'memo' in the Dashboard."""
  description: String
  """The coupons to redeem into discounts for the invoice. If not specified, inherits the discount from the invoice's customer. Pass an empty string to avoid inheriting any discounts."""
  discounts: JSON
  """The date on which payment for this invoice is due. Valid only for invoices where `collection_method=send_invoice`."""
  dueDate: Int
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """Footer to be displayed on the invoice."""
  footer: String
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
  """The account (if any) for which the funds of the invoice payment are intended. If set, the invoice will be presented with the branding and support information of the specified account. See the [Invoices with Connect](https://stripe.com/docs/billing/invoices/connect) documentation for details."""
  onBehalfOf: String
  """Configuration settings for the PaymentIntent that is generated when the invoice is finalized."""
  paymentSettings: PaymentSettings3Input
  """Extra information about a charge for the customer's credit card statement. It must contain at least one letter. If not specified and this invoice is part of a subscription, the default `statement_descriptor` will be set to the first subscription item's product's `statement_descriptor`."""
  statementDescriptor: String
  """The ID of the subscription to invoice, if any. If not set, the created invoice will include all pending invoice items for the customer. If set, the created invoice will only include pending invoice items for that subscription and pending invoice items not associated with any subscription. The subscription's billing cycle and regular subscription events won't be affected."""
  subscription: String
  """If specified, the funds from the invoice will be transferred to the destination and the ID of the resulting transfer will be found on the invoice's charge."""
  transferData: TransferData9Input
}

"""Settings for automatic tax lookup for this invoice."""
input AutomaticTaxParamInput {
  enabled: Boolean!
}

enum CollectionMethod4 {
  CHARGE_AUTOMATICALLY
  SEND_INVOICE
}

"""Configuration settings for the PaymentIntent that is generated when the invoice is finalized."""
input PaymentSettings3Input {
  paymentMethodOptions: PaymentMethodOptions3Input
  paymentMethodTypes: JSON
}

"""If specified, the funds from the invoice will be transferred to the destination and the ID of the resulting transfer will be found on the invoice's charge."""
input TransferData9Input {
  amount: Int
  destination: String!
}

input V1Invoice2Input {
  """The account tax IDs associated with the invoice. Only editable when the invoice is a draft."""
  accountTaxIds: JSON
  """A fee in %s that will be applied to the invoice and transferred to the application owner's Stripe account. The request must be made with an OAuth key or the Stripe-Account header in order to take an application fee. For more information, see the application fees [documentation](https://stripe.com/docs/billing/invoices/connect#collecting-fees)."""
  applicationFeeAmount: Int
  """Controls whether Stripe will perform [automatic collection](https://stripe.com/docs/billing/invoices/workflow/#auto_advance) of the invoice."""
  autoAdvance: Boolean
  """Settings for automatic tax lookup for this invoice."""
  automaticTax: AutomaticTaxParamInput
  """Either `charge_automatically` or `send_invoice`. This field can be updated only on `draft` invoices."""
  collectionMethod: CollectionMethod5
  """A list of up to 4 custom fields to be displayed on the invoice. If a value for `custom_fields` is specified, the list specified will replace the existing custom field list on this invoice. Pass an empty string to remove previously-defined fields."""
  customFields: JSON
  """The number of days from which the invoice is created until it is due. Only valid for invoices where `collection_method=send_invoice`. This field can only be updated on `draft` invoices."""
  daysUntilDue: Int
  """ID of the default payment method for the invoice. It must belong to the customer associated with the invoice. If not set, defaults to the subscription's default payment method, if any, or to the default payment method in the customer's invoice settings."""
  defaultPaymentMethod: String
  """ID of the default payment source for the invoice. It must belong to the customer associated with the invoice and be in a chargeable state. If not set, defaults to the subscription's default source, if any, or to the customer's default source."""
  defaultSource: String
  """The tax rates that will apply to any line item that does not have `tax_rates` set. Pass an empty string to remove previously-defined tax rates."""
  defaultTaxRates: JSON
  """An arbitrary string attached to the object. Often useful for displaying to users. Referenced as 'memo' in the Dashboard."""
  description: String
  """The discounts that will apply to the invoice. Pass an empty string to remove previously-defined discounts."""
  discounts: JSON
  """The date on which payment for this invoice is due. Only valid for invoices where `collection_method=send_invoice`. This field can only be updated on `draft` invoices."""
  dueDate: Int
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """Footer to be displayed on the invoice."""
  footer: String
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
  """The account (if any) for which the funds of the invoice payment are intended. If set, the invoice will be presented with the branding and support information of the specified account. See the [Invoices with Connect](https://stripe.com/docs/billing/invoices/connect) documentation for details."""
  onBehalfOf: JSON
  """Configuration settings for the PaymentIntent that is generated when the invoice is finalized."""
  paymentSettings: PaymentSettings3Input
  """Extra information about a charge for the customer's credit card statement. It must contain at least one letter. If not specified and this invoice is part of a subscription, the default `statement_descriptor` will be set to the first subscription item's product's `statement_descriptor`."""
  statementDescriptor: String
  """If specified, the funds from the invoice will be transferred to the destination and the ID of the resulting transfer will be found on the invoice's charge. This will be unset if you POST an empty value."""
  transferData: JSON
}

enum CollectionMethod5 {
  CHARGE_AUTOMATICALLY
  SEND_INVOICE
}

input V1InvoiceFinalizeInput {
  """Controls whether Stripe will perform [automatic collection](https://stripe.com/docs/billing/invoices/overview#auto-advance) of the invoice. When `false`, the invoice's state will not automatically advance without an explicit action."""
  autoAdvance: Boolean
  """Specifies which fields in the response should be expanded."""
  expand: [String]
}

input V1InvoiceMarkUncollectibleInput {
  """Specifies which fields in the response should be expanded."""
  expand: [String]
}

input V1InvoicePayInput {
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """
  In cases where the source used to pay the invoice has insufficient funds, passing `forgive=true` controls whether a charge should be attempted for the full amount available on the source, up to the amount to fully pay the invoice. This effectively forgives the difference between the amount available on the source and the amount due. 
  
  Passing `forgive=false` will fail the charge if the source hasn't been pre-funded with the right amount. An example for this case is with ACH Credit Transfers and wires: if the amount wired is less than the amount due by a small amount, you might want to forgive the difference. Defaults to `false`.
  """
  forgive: Boolean
  """Indicates if a customer is on or off-session while an invoice payment is attempted. Defaults to `true` (off-session)."""
  offSession: Boolean
  """Boolean representing whether an invoice is paid outside of Stripe. This will result in no charge being made. Defaults to `false`."""
  paidOutOfBand: Boolean
  """A PaymentMethod to be charged. The PaymentMethod must be the ID of a PaymentMethod belonging to the customer associated with the invoice being paid."""
  paymentMethod: String
  """A payment source to be charged. The source must be the ID of a source belonging to the customer associated with the invoice being paid."""
  source: String
}

input V1InvoiceSendInput {
  """Specifies which fields in the response should be expanded."""
  expand: [String]
}

input V1InvoiceVoidInput {
  """Specifies which fields in the response should be expanded."""
  expand: [String]
}

input V1IssuingAuthorization2Input {
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
}

input V1IssuingAuthorizationApproveInput {
  """If the authorization's `pending_request.is_amount_controllable` property is `true`, you may provide this value to control how much to hold for the authorization. Must be positive (use [`decline`](https://stripe.com/docs/api/issuing/authorizations/decline) to decline an authorization request)."""
  amount: Int
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
}

input V1IssuingAuthorizationDeclineInput {
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
}

input V1IssuingCardholders3Input {
  """The cardholder's billing address."""
  billing: BillingInput!
  """Additional information about a `company` cardholder."""
  company: CompanyParamInput
  """The cardholder's email address."""
  email: String
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """Additional information about an `individual` cardholder."""
  individual: IndividualParamInput
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
  """The cardholder's name. This will be printed on cards issued to them."""
  name: String!
  """The cardholder's phone number. This will be transformed to [E.164](https://en.wikipedia.org/wiki/E.164) if it is not provided in that format already."""
  phoneNumber: String
  """Rules that control spending across this cardholder's cards. Refer to our [documentation](https://stripe.com/docs/issuing/controls/spending-controls) for more details."""
  spendingControls: AuthorizationControlsParamV2Input
  """Specifies whether to permit authorizations on this cardholder's cards. Defaults to `active`."""
  status: Status30
  """One of `individual` or `company`."""
  type: Type34!
}

"""The cardholder's billing address."""
input BillingInput {
  address: RequiredAddressInput!
}

input RequiredAddressInput {
  city: String!
  country: String!
  line1: String!
  line2: String
  postalCode: String!
  state: String
}

"""Additional information about a `company` cardholder."""
input CompanyParamInput {
  taxId: String
}

"""Additional information about an `individual` cardholder."""
input IndividualParamInput {
  dob: DateOfBirthSpecsInput
  firstName: String!
  lastName: String!
  verification: PersonVerificationParamInput
}

input DateOfBirthSpecsInput {
  day: Int!
  month: Int!
  year: Int!
}

input PersonVerificationParamInput {
  document: PersonVerificationDocumentParamInput
}

input PersonVerificationDocumentParamInput {
  back: String
  front: String
}

"""Rules that control spending across this cardholder's cards. Refer to our [documentation](https://stripe.com/docs/issuing/controls/spending-controls) for more details."""
input AuthorizationControlsParamV2Input {
  allowedCategories: [AllowedCategories2ListItem]
  blockedCategories: [BlockedCategories2ListItem]
  spendingLimits: [SpendingLimits3ListItemInput]
  spendingLimitsCurrency: String
}

enum AllowedCategories2ListItem {
  AC_REFRIGERATION_REPAIR
  ACCOUNTING_BOOKKEEPING_SERVICES
  ADVERTISING_SERVICES
  AGRICULTURAL_COOPERATIVE
  AIRLINES_AIR_CARRIERS
  AIRPORTS_FLYING_FIELDS
  AMBULANCE_SERVICES
  AMUSEMENT_PARKS_CARNIVALS
  ANTIQUE_REPRODUCTIONS
  ANTIQUE_SHOPS
  AQUARIUMS
  ARCHITECTURAL_SURVEYING_SERVICES
  ART_DEALERS_AND_GALLERIES
  ARTISTS_SUPPLY_AND_CRAFT_SHOPS
  AUTO_AND_HOME_SUPPLY_STORES
  AUTO_BODY_REPAIR_SHOPS
  AUTO_PAINT_SHOPS
  AUTO_SERVICE_SHOPS
  AUTOMATED_CASH_DISBURSE
  AUTOMATED_FUEL_DISPENSERS
  AUTOMOBILE_ASSOCIATIONS
  AUTOMOTIVE_PARTS_AND_ACCESSORIES_STORES
  AUTOMOTIVE_TIRE_STORES
  BAIL_AND_BOND_PAYMENTS
  BAKERIES
  BANDS_ORCHESTRAS
  BARBER_AND_BEAUTY_SHOPS
  BETTING_CASINO_GAMBLING
  BICYCLE_SHOPS
  BILLIARD_POOL_ESTABLISHMENTS
  BOAT_DEALERS
  BOAT_RENTALS_AND_LEASES
  BOOK_STORES
  BOOKS_PERIODICALS_AND_NEWSPAPERS
  BOWLING_ALLEYS
  BUS_LINES
  BUSINESS_SECRETARIAL_SCHOOLS
  BUYING_SHOPPING_SERVICES
  CABLE_SATELLITE_AND_OTHER_PAY_TELEVISION_AND_RADIO
  CAMERA_AND_PHOTOGRAPHIC_SUPPLY_STORES
  CANDY_NUT_AND_CONFECTIONERY_STORES
  CAR_AND_TRUCK_DEALERS_NEW_USED
  CAR_AND_TRUCK_DEALERS_USED_ONLY
  CAR_RENTAL_AGENCIES
  CAR_WASHES
  CARPENTRY_SERVICES
  CARPET_UPHOLSTERY_CLEANING
  CATERERS
  CHARITABLE_AND_SOCIAL_SERVICE_ORGANIZATIONS_FUNDRAISING
  CHEMICALS_AND_ALLIED_PRODUCTS
  CHILD_CARE_SERVICES
  CHILDRENS_AND_INFANTS_WEAR_STORES
  CHIROPODISTS_PODIATRISTS
  CHIROPRACTORS
  CIGAR_STORES_AND_STANDS
  CIVIC_SOCIAL_FRATERNAL_ASSOCIATIONS
  CLEANING_AND_MAINTENANCE
  CLOTHING_RENTAL
  COLLEGES_UNIVERSITIES
  COMMERCIAL_EQUIPMENT
  COMMERCIAL_FOOTWEAR
  COMMERCIAL_PHOTOGRAPHY_ART_AND_GRAPHICS
  COMMUTER_TRANSPORT_AND_FERRIES
  COMPUTER_NETWORK_SERVICES
  COMPUTER_PROGRAMMING
  COMPUTER_REPAIR
  COMPUTER_SOFTWARE_STORES
  COMPUTERS_PERIPHERALS_AND_SOFTWARE
  CONCRETE_WORK_SERVICES
  CONSTRUCTION_MATERIALS
  CONSULTING_PUBLIC_RELATIONS
  CORRESPONDENCE_SCHOOLS
  COSMETIC_STORES
  COUNSELING_SERVICES
  COUNTRY_CLUBS
  COURIER_SERVICES
  COURT_COSTS
  CREDIT_REPORTING_AGENCIES
  CRUISE_LINES
  DAIRY_PRODUCTS_STORES
  DANCE_HALL_STUDIOS_SCHOOLS
  DATING_ESCORT_SERVICES
  DENTISTS_ORTHODONTISTS
  DEPARTMENT_STORES
  DETECTIVE_AGENCIES
  DIGITAL_GOODS_APPLICATIONS
  DIGITAL_GOODS_GAMES
  DIGITAL_GOODS_LARGE_VOLUME
  DIGITAL_GOODS_MEDIA
  DIRECT_MARKETING_CATALOG_MERCHANT
  DIRECT_MARKETING_COMBINATION_CATALOG_AND_RETAIL_MERCHANT
  DIRECT_MARKETING_INBOUND_TELEMARKETING
  DIRECT_MARKETING_INSURANCE_SERVICES
  DIRECT_MARKETING_OTHER
  DIRECT_MARKETING_OUTBOUND_TELEMARKETING
  DIRECT_MARKETING_SUBSCRIPTION
  DIRECT_MARKETING_TRAVEL
  DISCOUNT_STORES
  DOCTORS
  DOOR_TO_DOOR_SALES
  DRAPERY_WINDOW_COVERING_AND_UPHOLSTERY_STORES
  DRINKING_PLACES
  DRUG_STORES_AND_PHARMACIES
  DRUGS_DRUG_PROPRIETARIES_AND_DRUGGIST_SUNDRIES
  DRY_CLEANERS
  DURABLE_GOODS
  DUTY_FREE_STORES
  EATING_PLACES_RESTAURANTS
  EDUCATIONAL_SERVICES
  ELECTRIC_RAZOR_STORES
  ELECTRICAL_PARTS_AND_EQUIPMENT
  ELECTRICAL_SERVICES
  ELECTRONICS_REPAIR_SHOPS
  ELECTRONICS_STORES
  ELEMENTARY_SECONDARY_SCHOOLS
  EMPLOYMENT_TEMP_AGENCIES
  EQUIPMENT_RENTAL
  EXTERMINATING_SERVICES
  FAMILY_CLOTHING_STORES
  FAST_FOOD_RESTAURANTS
  FINANCIAL_INSTITUTIONS
  FINES_GOVERNMENT_ADMINISTRATIVE_ENTITIES
  FIREPLACE_FIREPLACE_SCREENS_AND_ACCESSORIES_STORES
  FLOOR_COVERING_STORES
  FLORISTS
  FLORISTS_SUPPLIES_NURSERY_STOCK_AND_FLOWERS
  FREEZER_AND_LOCKER_MEAT_PROVISIONERS
  FUEL_DEALERS_NON_AUTOMOTIVE
  FUNERAL_SERVICES_CREMATORIES
  FURNITURE_HOME_FURNISHINGS_AND_EQUIPMENT_STORES_EXCEPT_APPLIANCES
  FURNITURE_REPAIR_REFINISHING
  FURRIERS_AND_FUR_SHOPS
  GENERAL_SERVICES
  GIFT_CARD_NOVELTY_AND_SOUVENIR_SHOPS
  GLASS_PAINT_AND_WALLPAPER_STORES
  GLASSWARE_CRYSTAL_STORES
  GOLF_COURSES_PUBLIC
  GOVERNMENT_SERVICES
  GROCERY_STORES_SUPERMARKETS
  HARDWARE_EQUIPMENT_AND_SUPPLIES
  HARDWARE_STORES
  HEALTH_AND_BEAUTY_SPAS
  HEARING_AIDS_SALES_AND_SUPPLIES
  HEATING_PLUMBING_A_C
  HOBBY_TOY_AND_GAME_SHOPS
  HOME_SUPPLY_WAREHOUSE_STORES
  HOSPITALS
  HOTELS_MOTELS_AND_RESORTS
  HOUSEHOLD_APPLIANCE_STORES
  INDUSTRIAL_SUPPLIES
  INFORMATION_RETRIEVAL_SERVICES
  INSURANCE_DEFAULT
  INSURANCE_UNDERWRITING_PREMIUMS
  INTRA_COMPANY_PURCHASES
  JEWELRY_STORES_WATCHES_CLOCKS_AND_SILVERWARE_STORES
  LANDSCAPING_SERVICES
  LAUNDRIES
  LAUNDRY_CLEANING_SERVICES
  LEGAL_SERVICES_ATTORNEYS
  LUGGAGE_AND_LEATHER_GOODS_STORES
  LUMBER_BUILDING_MATERIALS_STORES
  MANUAL_CASH_DISBURSE
  MARINAS_SERVICE_AND_SUPPLIES
  MASONRY_STONEWORK_AND_PLASTER
  MASSAGE_PARLORS
  MEDICAL_AND_DENTAL_LABS
  MEDICAL_DENTAL_OPHTHALMIC_AND_HOSPITAL_EQUIPMENT_AND_SUPPLIES
  MEDICAL_SERVICES
  MEMBERSHIP_ORGANIZATIONS
  MENS_AND_BOYS_CLOTHING_AND_ACCESSORIES_STORES
  MENS_WOMENS_CLOTHING_STORES
  METAL_SERVICE_CENTERS
  MISCELLANEOUS
  MISCELLANEOUS_APPAREL_AND_ACCESSORY_SHOPS
  MISCELLANEOUS_AUTO_DEALERS
  MISCELLANEOUS_BUSINESS_SERVICES
  MISCELLANEOUS_FOOD_STORES
  MISCELLANEOUS_GENERAL_MERCHANDISE
  MISCELLANEOUS_GENERAL_SERVICES
  MISCELLANEOUS_HOME_FURNISHING_SPECIALTY_STORES
  MISCELLANEOUS_PUBLISHING_AND_PRINTING
  MISCELLANEOUS_RECREATION_SERVICES
  MISCELLANEOUS_REPAIR_SHOPS
  MISCELLANEOUS_SPECIALTY_RETAIL
  MOBILE_HOME_DEALERS
  MOTION_PICTURE_THEATERS
  MOTOR_FREIGHT_CARRIERS_AND_TRUCKING
  MOTOR_HOMES_DEALERS
  MOTOR_VEHICLE_SUPPLIES_AND_NEW_PARTS
  MOTORCYCLE_SHOPS_AND_DEALERS
  MOTORCYCLE_SHOPS_DEALERS
  MUSIC_STORES_MUSICAL_INSTRUMENTS_PIANOS_AND_SHEET_MUSIC
  NEWS_DEALERS_AND_NEWSSTANDS
  NON_FI_MONEY_ORDERS
  NON_FI_STORED_VALUE_CARD_PURCHASE_LOAD
  NONDURABLE_GOODS
  NURSERIES_LAWN_AND_GARDEN_SUPPLY_STORES
  NURSING_PERSONAL_CARE
  OFFICE_AND_COMMERCIAL_FURNITURE
  OPTICIANS_EYEGLASSES
  OPTOMETRISTS_OPHTHALMOLOGIST
  ORTHOPEDIC_GOODS_PROSTHETIC_DEVICES
  OSTEOPATHS
  PACKAGE_STORES_BEER_WINE_AND_LIQUOR
  PAINTS_VARNISHES_AND_SUPPLIES
  PARKING_LOTS_GARAGES
  PASSENGER_RAILWAYS
  PAWN_SHOPS
  PET_SHOPS_PET_FOOD_AND_SUPPLIES
  PETROLEUM_AND_PETROLEUM_PRODUCTS
  PHOTO_DEVELOPING
  PHOTOGRAPHIC_PHOTOCOPY_MICROFILM_EQUIPMENT_AND_SUPPLIES
  PHOTOGRAPHIC_STUDIOS
  PICTURE_VIDEO_PRODUCTION
  PIECE_GOODS_NOTIONS_AND_OTHER_DRY_GOODS
  PLUMBING_HEATING_EQUIPMENT_AND_SUPPLIES
  POLITICAL_ORGANIZATIONS
  POSTAL_SERVICES_GOVERNMENT_ONLY
  PRECIOUS_STONES_AND_METALS_WATCHES_AND_JEWELRY
  PROFESSIONAL_SERVICES
  PUBLIC_WAREHOUSING_AND_STORAGE
  QUICK_COPY_REPRO_AND_BLUEPRINT
  RAILROADS
  REAL_ESTATE_AGENTS_AND_MANAGERS_RENTALS
  RECORD_STORES
  RECREATIONAL_VEHICLE_RENTALS
  RELIGIOUS_GOODS_STORES
  RELIGIOUS_ORGANIZATIONS
  ROOFING_SIDING_SHEET_METAL
  SECRETARIAL_SUPPORT_SERVICES
  SECURITY_BROKERS_DEALERS
  SERVICE_STATIONS
  SEWING_NEEDLEWORK_FABRIC_AND_PIECE_GOODS_STORES
  SHOE_REPAIR_HAT_CLEANING
  SHOE_STORES
  SMALL_APPLIANCE_REPAIR
  SNOWMOBILE_DEALERS
  SPECIAL_TRADE_SERVICES
  SPECIALTY_CLEANING
  SPORTING_GOODS_STORES
  SPORTING_RECREATION_CAMPS
  SPORTS_AND_RIDING_APPAREL_STORES
  SPORTS_CLUBS_FIELDS
  STAMP_AND_COIN_STORES
  STATIONARY_OFFICE_SUPPLIES_PRINTING_AND_WRITING_PAPER
  STATIONERY_STORES_OFFICE_AND_SCHOOL_SUPPLY_STORES
  SWIMMING_POOLS_SALES
  T_UI_TRAVEL_GERMANY
  TAILORS_ALTERATIONS
  TAX_PAYMENTS_GOVERNMENT_AGENCIES
  TAX_PREPARATION_SERVICES
  TAXICABS_LIMOUSINES
  TELECOMMUNICATION_EQUIPMENT_AND_TELEPHONE_SALES
  TELECOMMUNICATION_SERVICES
  TELEGRAPH_SERVICES
  TENT_AND_AWNING_SHOPS
  TESTING_LABORATORIES
  THEATRICAL_TICKET_AGENCIES
  TIMESHARES
  TIRE_RETREADING_AND_REPAIR
  TOLLS_BRIDGE_FEES
  TOURIST_ATTRACTIONS_AND_EXHIBITS
  TOWING_SERVICES
  TRAILER_PARKS_CAMPGROUNDS
  TRANSPORTATION_SERVICES
  TRAVEL_AGENCIES_TOUR_OPERATORS
  TRUCK_STOP_ITERATION
  TRUCK_UTILITY_TRAILER_RENTALS
  TYPESETTING_PLATE_MAKING_AND_RELATED_SERVICES
  TYPEWRITER_STORES
  U_S_FEDERAL_GOVERNMENT_AGENCIES_OR_DEPARTMENTS
  UNIFORMS_COMMERCIAL_CLOTHING
  USED_MERCHANDISE_AND_SECONDHAND_STORES
  UTILITIES
  VARIETY_STORES
  VETERINARY_SERVICES
  VIDEO_AMUSEMENT_GAME_SUPPLIES
  VIDEO_GAME_ARCADES
  VIDEO_TAPE_RENTAL_STORES
  VOCATIONAL_TRADE_SCHOOLS
  WATCH_JEWELRY_REPAIR
  WELDING_REPAIR
  WHOLESALE_CLUBS
  WIG_AND_TOUPEE_STORES
  WIRES_MONEY_ORDERS
  WOMENS_ACCESSORY_AND_SPECIALTY_SHOPS
  WOMENS_READY_TO_WEAR_STORES
  WRECKING_AND_SALVAGE_YARDS
}

enum BlockedCategories2ListItem {
  AC_REFRIGERATION_REPAIR
  ACCOUNTING_BOOKKEEPING_SERVICES
  ADVERTISING_SERVICES
  AGRICULTURAL_COOPERATIVE
  AIRLINES_AIR_CARRIERS
  AIRPORTS_FLYING_FIELDS
  AMBULANCE_SERVICES
  AMUSEMENT_PARKS_CARNIVALS
  ANTIQUE_REPRODUCTIONS
  ANTIQUE_SHOPS
  AQUARIUMS
  ARCHITECTURAL_SURVEYING_SERVICES
  ART_DEALERS_AND_GALLERIES
  ARTISTS_SUPPLY_AND_CRAFT_SHOPS
  AUTO_AND_HOME_SUPPLY_STORES
  AUTO_BODY_REPAIR_SHOPS
  AUTO_PAINT_SHOPS
  AUTO_SERVICE_SHOPS
  AUTOMATED_CASH_DISBURSE
  AUTOMATED_FUEL_DISPENSERS
  AUTOMOBILE_ASSOCIATIONS
  AUTOMOTIVE_PARTS_AND_ACCESSORIES_STORES
  AUTOMOTIVE_TIRE_STORES
  BAIL_AND_BOND_PAYMENTS
  BAKERIES
  BANDS_ORCHESTRAS
  BARBER_AND_BEAUTY_SHOPS
  BETTING_CASINO_GAMBLING
  BICYCLE_SHOPS
  BILLIARD_POOL_ESTABLISHMENTS
  BOAT_DEALERS
  BOAT_RENTALS_AND_LEASES
  BOOK_STORES
  BOOKS_PERIODICALS_AND_NEWSPAPERS
  BOWLING_ALLEYS
  BUS_LINES
  BUSINESS_SECRETARIAL_SCHOOLS
  BUYING_SHOPPING_SERVICES
  CABLE_SATELLITE_AND_OTHER_PAY_TELEVISION_AND_RADIO
  CAMERA_AND_PHOTOGRAPHIC_SUPPLY_STORES
  CANDY_NUT_AND_CONFECTIONERY_STORES
  CAR_AND_TRUCK_DEALERS_NEW_USED
  CAR_AND_TRUCK_DEALERS_USED_ONLY
  CAR_RENTAL_AGENCIES
  CAR_WASHES
  CARPENTRY_SERVICES
  CARPET_UPHOLSTERY_CLEANING
  CATERERS
  CHARITABLE_AND_SOCIAL_SERVICE_ORGANIZATIONS_FUNDRAISING
  CHEMICALS_AND_ALLIED_PRODUCTS
  CHILD_CARE_SERVICES
  CHILDRENS_AND_INFANTS_WEAR_STORES
  CHIROPODISTS_PODIATRISTS
  CHIROPRACTORS
  CIGAR_STORES_AND_STANDS
  CIVIC_SOCIAL_FRATERNAL_ASSOCIATIONS
  CLEANING_AND_MAINTENANCE
  CLOTHING_RENTAL
  COLLEGES_UNIVERSITIES
  COMMERCIAL_EQUIPMENT
  COMMERCIAL_FOOTWEAR
  COMMERCIAL_PHOTOGRAPHY_ART_AND_GRAPHICS
  COMMUTER_TRANSPORT_AND_FERRIES
  COMPUTER_NETWORK_SERVICES
  COMPUTER_PROGRAMMING
  COMPUTER_REPAIR
  COMPUTER_SOFTWARE_STORES
  COMPUTERS_PERIPHERALS_AND_SOFTWARE
  CONCRETE_WORK_SERVICES
  CONSTRUCTION_MATERIALS
  CONSULTING_PUBLIC_RELATIONS
  CORRESPONDENCE_SCHOOLS
  COSMETIC_STORES
  COUNSELING_SERVICES
  COUNTRY_CLUBS
  COURIER_SERVICES
  COURT_COSTS
  CREDIT_REPORTING_AGENCIES
  CRUISE_LINES
  DAIRY_PRODUCTS_STORES
  DANCE_HALL_STUDIOS_SCHOOLS
  DATING_ESCORT_SERVICES
  DENTISTS_ORTHODONTISTS
  DEPARTMENT_STORES
  DETECTIVE_AGENCIES
  DIGITAL_GOODS_APPLICATIONS
  DIGITAL_GOODS_GAMES
  DIGITAL_GOODS_LARGE_VOLUME
  DIGITAL_GOODS_MEDIA
  DIRECT_MARKETING_CATALOG_MERCHANT
  DIRECT_MARKETING_COMBINATION_CATALOG_AND_RETAIL_MERCHANT
  DIRECT_MARKETING_INBOUND_TELEMARKETING
  DIRECT_MARKETING_INSURANCE_SERVICES
  DIRECT_MARKETING_OTHER
  DIRECT_MARKETING_OUTBOUND_TELEMARKETING
  DIRECT_MARKETING_SUBSCRIPTION
  DIRECT_MARKETING_TRAVEL
  DISCOUNT_STORES
  DOCTORS
  DOOR_TO_DOOR_SALES
  DRAPERY_WINDOW_COVERING_AND_UPHOLSTERY_STORES
  DRINKING_PLACES
  DRUG_STORES_AND_PHARMACIES
  DRUGS_DRUG_PROPRIETARIES_AND_DRUGGIST_SUNDRIES
  DRY_CLEANERS
  DURABLE_GOODS
  DUTY_FREE_STORES
  EATING_PLACES_RESTAURANTS
  EDUCATIONAL_SERVICES
  ELECTRIC_RAZOR_STORES
  ELECTRICAL_PARTS_AND_EQUIPMENT
  ELECTRICAL_SERVICES
  ELECTRONICS_REPAIR_SHOPS
  ELECTRONICS_STORES
  ELEMENTARY_SECONDARY_SCHOOLS
  EMPLOYMENT_TEMP_AGENCIES
  EQUIPMENT_RENTAL
  EXTERMINATING_SERVICES
  FAMILY_CLOTHING_STORES
  FAST_FOOD_RESTAURANTS
  FINANCIAL_INSTITUTIONS
  FINES_GOVERNMENT_ADMINISTRATIVE_ENTITIES
  FIREPLACE_FIREPLACE_SCREENS_AND_ACCESSORIES_STORES
  FLOOR_COVERING_STORES
  FLORISTS
  FLORISTS_SUPPLIES_NURSERY_STOCK_AND_FLOWERS
  FREEZER_AND_LOCKER_MEAT_PROVISIONERS
  FUEL_DEALERS_NON_AUTOMOTIVE
  FUNERAL_SERVICES_CREMATORIES
  FURNITURE_HOME_FURNISHINGS_AND_EQUIPMENT_STORES_EXCEPT_APPLIANCES
  FURNITURE_REPAIR_REFINISHING
  FURRIERS_AND_FUR_SHOPS
  GENERAL_SERVICES
  GIFT_CARD_NOVELTY_AND_SOUVENIR_SHOPS
  GLASS_PAINT_AND_WALLPAPER_STORES
  GLASSWARE_CRYSTAL_STORES
  GOLF_COURSES_PUBLIC
  GOVERNMENT_SERVICES
  GROCERY_STORES_SUPERMARKETS
  HARDWARE_EQUIPMENT_AND_SUPPLIES
  HARDWARE_STORES
  HEALTH_AND_BEAUTY_SPAS
  HEARING_AIDS_SALES_AND_SUPPLIES
  HEATING_PLUMBING_A_C
  HOBBY_TOY_AND_GAME_SHOPS
  HOME_SUPPLY_WAREHOUSE_STORES
  HOSPITALS
  HOTELS_MOTELS_AND_RESORTS
  HOUSEHOLD_APPLIANCE_STORES
  INDUSTRIAL_SUPPLIES
  INFORMATION_RETRIEVAL_SERVICES
  INSURANCE_DEFAULT
  INSURANCE_UNDERWRITING_PREMIUMS
  INTRA_COMPANY_PURCHASES
  JEWELRY_STORES_WATCHES_CLOCKS_AND_SILVERWARE_STORES
  LANDSCAPING_SERVICES
  LAUNDRIES
  LAUNDRY_CLEANING_SERVICES
  LEGAL_SERVICES_ATTORNEYS
  LUGGAGE_AND_LEATHER_GOODS_STORES
  LUMBER_BUILDING_MATERIALS_STORES
  MANUAL_CASH_DISBURSE
  MARINAS_SERVICE_AND_SUPPLIES
  MASONRY_STONEWORK_AND_PLASTER
  MASSAGE_PARLORS
  MEDICAL_AND_DENTAL_LABS
  MEDICAL_DENTAL_OPHTHALMIC_AND_HOSPITAL_EQUIPMENT_AND_SUPPLIES
  MEDICAL_SERVICES
  MEMBERSHIP_ORGANIZATIONS
  MENS_AND_BOYS_CLOTHING_AND_ACCESSORIES_STORES
  MENS_WOMENS_CLOTHING_STORES
  METAL_SERVICE_CENTERS
  MISCELLANEOUS
  MISCELLANEOUS_APPAREL_AND_ACCESSORY_SHOPS
  MISCELLANEOUS_AUTO_DEALERS
  MISCELLANEOUS_BUSINESS_SERVICES
  MISCELLANEOUS_FOOD_STORES
  MISCELLANEOUS_GENERAL_MERCHANDISE
  MISCELLANEOUS_GENERAL_SERVICES
  MISCELLANEOUS_HOME_FURNISHING_SPECIALTY_STORES
  MISCELLANEOUS_PUBLISHING_AND_PRINTING
  MISCELLANEOUS_RECREATION_SERVICES
  MISCELLANEOUS_REPAIR_SHOPS
  MISCELLANEOUS_SPECIALTY_RETAIL
  MOBILE_HOME_DEALERS
  MOTION_PICTURE_THEATERS
  MOTOR_FREIGHT_CARRIERS_AND_TRUCKING
  MOTOR_HOMES_DEALERS
  MOTOR_VEHICLE_SUPPLIES_AND_NEW_PARTS
  MOTORCYCLE_SHOPS_AND_DEALERS
  MOTORCYCLE_SHOPS_DEALERS
  MUSIC_STORES_MUSICAL_INSTRUMENTS_PIANOS_AND_SHEET_MUSIC
  NEWS_DEALERS_AND_NEWSSTANDS
  NON_FI_MONEY_ORDERS
  NON_FI_STORED_VALUE_CARD_PURCHASE_LOAD
  NONDURABLE_GOODS
  NURSERIES_LAWN_AND_GARDEN_SUPPLY_STORES
  NURSING_PERSONAL_CARE
  OFFICE_AND_COMMERCIAL_FURNITURE
  OPTICIANS_EYEGLASSES
  OPTOMETRISTS_OPHTHALMOLOGIST
  ORTHOPEDIC_GOODS_PROSTHETIC_DEVICES
  OSTEOPATHS
  PACKAGE_STORES_BEER_WINE_AND_LIQUOR
  PAINTS_VARNISHES_AND_SUPPLIES
  PARKING_LOTS_GARAGES
  PASSENGER_RAILWAYS
  PAWN_SHOPS
  PET_SHOPS_PET_FOOD_AND_SUPPLIES
  PETROLEUM_AND_PETROLEUM_PRODUCTS
  PHOTO_DEVELOPING
  PHOTOGRAPHIC_PHOTOCOPY_MICROFILM_EQUIPMENT_AND_SUPPLIES
  PHOTOGRAPHIC_STUDIOS
  PICTURE_VIDEO_PRODUCTION
  PIECE_GOODS_NOTIONS_AND_OTHER_DRY_GOODS
  PLUMBING_HEATING_EQUIPMENT_AND_SUPPLIES
  POLITICAL_ORGANIZATIONS
  POSTAL_SERVICES_GOVERNMENT_ONLY
  PRECIOUS_STONES_AND_METALS_WATCHES_AND_JEWELRY
  PROFESSIONAL_SERVICES
  PUBLIC_WAREHOUSING_AND_STORAGE
  QUICK_COPY_REPRO_AND_BLUEPRINT
  RAILROADS
  REAL_ESTATE_AGENTS_AND_MANAGERS_RENTALS
  RECORD_STORES
  RECREATIONAL_VEHICLE_RENTALS
  RELIGIOUS_GOODS_STORES
  RELIGIOUS_ORGANIZATIONS
  ROOFING_SIDING_SHEET_METAL
  SECRETARIAL_SUPPORT_SERVICES
  SECURITY_BROKERS_DEALERS
  SERVICE_STATIONS
  SEWING_NEEDLEWORK_FABRIC_AND_PIECE_GOODS_STORES
  SHOE_REPAIR_HAT_CLEANING
  SHOE_STORES
  SMALL_APPLIANCE_REPAIR
  SNOWMOBILE_DEALERS
  SPECIAL_TRADE_SERVICES
  SPECIALTY_CLEANING
  SPORTING_GOODS_STORES
  SPORTING_RECREATION_CAMPS
  SPORTS_AND_RIDING_APPAREL_STORES
  SPORTS_CLUBS_FIELDS
  STAMP_AND_COIN_STORES
  STATIONARY_OFFICE_SUPPLIES_PRINTING_AND_WRITING_PAPER
  STATIONERY_STORES_OFFICE_AND_SCHOOL_SUPPLY_STORES
  SWIMMING_POOLS_SALES
  T_UI_TRAVEL_GERMANY
  TAILORS_ALTERATIONS
  TAX_PAYMENTS_GOVERNMENT_AGENCIES
  TAX_PREPARATION_SERVICES
  TAXICABS_LIMOUSINES
  TELECOMMUNICATION_EQUIPMENT_AND_TELEPHONE_SALES
  TELECOMMUNICATION_SERVICES
  TELEGRAPH_SERVICES
  TENT_AND_AWNING_SHOPS
  TESTING_LABORATORIES
  THEATRICAL_TICKET_AGENCIES
  TIMESHARES
  TIRE_RETREADING_AND_REPAIR
  TOLLS_BRIDGE_FEES
  TOURIST_ATTRACTIONS_AND_EXHIBITS
  TOWING_SERVICES
  TRAILER_PARKS_CAMPGROUNDS
  TRANSPORTATION_SERVICES
  TRAVEL_AGENCIES_TOUR_OPERATORS
  TRUCK_STOP_ITERATION
  TRUCK_UTILITY_TRAILER_RENTALS
  TYPESETTING_PLATE_MAKING_AND_RELATED_SERVICES
  TYPEWRITER_STORES
  U_S_FEDERAL_GOVERNMENT_AGENCIES_OR_DEPARTMENTS
  UNIFORMS_COMMERCIAL_CLOTHING
  USED_MERCHANDISE_AND_SECONDHAND_STORES
  UTILITIES
  VARIETY_STORES
  VETERINARY_SERVICES
  VIDEO_AMUSEMENT_GAME_SUPPLIES
  VIDEO_GAME_ARCADES
  VIDEO_TAPE_RENTAL_STORES
  VOCATIONAL_TRADE_SCHOOLS
  WATCH_JEWELRY_REPAIR
  WELDING_REPAIR
  WHOLESALE_CLUBS
  WIG_AND_TOUPEE_STORES
  WIRES_MONEY_ORDERS
  WOMENS_ACCESSORY_AND_SPECIALTY_SHOPS
  WOMENS_READY_TO_WEAR_STORES
  WRECKING_AND_SALVAGE_YARDS
}

input SpendingLimits3ListItemInput {
  amount: Int!
  categories: [Categories2ListItem]
  interval: Interval8!
}

enum Categories2ListItem {
  AC_REFRIGERATION_REPAIR
  ACCOUNTING_BOOKKEEPING_SERVICES
  ADVERTISING_SERVICES
  AGRICULTURAL_COOPERATIVE
  AIRLINES_AIR_CARRIERS
  AIRPORTS_FLYING_FIELDS
  AMBULANCE_SERVICES
  AMUSEMENT_PARKS_CARNIVALS
  ANTIQUE_REPRODUCTIONS
  ANTIQUE_SHOPS
  AQUARIUMS
  ARCHITECTURAL_SURVEYING_SERVICES
  ART_DEALERS_AND_GALLERIES
  ARTISTS_SUPPLY_AND_CRAFT_SHOPS
  AUTO_AND_HOME_SUPPLY_STORES
  AUTO_BODY_REPAIR_SHOPS
  AUTO_PAINT_SHOPS
  AUTO_SERVICE_SHOPS
  AUTOMATED_CASH_DISBURSE
  AUTOMATED_FUEL_DISPENSERS
  AUTOMOBILE_ASSOCIATIONS
  AUTOMOTIVE_PARTS_AND_ACCESSORIES_STORES
  AUTOMOTIVE_TIRE_STORES
  BAIL_AND_BOND_PAYMENTS
  BAKERIES
  BANDS_ORCHESTRAS
  BARBER_AND_BEAUTY_SHOPS
  BETTING_CASINO_GAMBLING
  BICYCLE_SHOPS
  BILLIARD_POOL_ESTABLISHMENTS
  BOAT_DEALERS
  BOAT_RENTALS_AND_LEASES
  BOOK_STORES
  BOOKS_PERIODICALS_AND_NEWSPAPERS
  BOWLING_ALLEYS
  BUS_LINES
  BUSINESS_SECRETARIAL_SCHOOLS
  BUYING_SHOPPING_SERVICES
  CABLE_SATELLITE_AND_OTHER_PAY_TELEVISION_AND_RADIO
  CAMERA_AND_PHOTOGRAPHIC_SUPPLY_STORES
  CANDY_NUT_AND_CONFECTIONERY_STORES
  CAR_AND_TRUCK_DEALERS_NEW_USED
  CAR_AND_TRUCK_DEALERS_USED_ONLY
  CAR_RENTAL_AGENCIES
  CAR_WASHES
  CARPENTRY_SERVICES
  CARPET_UPHOLSTERY_CLEANING
  CATERERS
  CHARITABLE_AND_SOCIAL_SERVICE_ORGANIZATIONS_FUNDRAISING
  CHEMICALS_AND_ALLIED_PRODUCTS
  CHILD_CARE_SERVICES
  CHILDRENS_AND_INFANTS_WEAR_STORES
  CHIROPODISTS_PODIATRISTS
  CHIROPRACTORS
  CIGAR_STORES_AND_STANDS
  CIVIC_SOCIAL_FRATERNAL_ASSOCIATIONS
  CLEANING_AND_MAINTENANCE
  CLOTHING_RENTAL
  COLLEGES_UNIVERSITIES
  COMMERCIAL_EQUIPMENT
  COMMERCIAL_FOOTWEAR
  COMMERCIAL_PHOTOGRAPHY_ART_AND_GRAPHICS
  COMMUTER_TRANSPORT_AND_FERRIES
  COMPUTER_NETWORK_SERVICES
  COMPUTER_PROGRAMMING
  COMPUTER_REPAIR
  COMPUTER_SOFTWARE_STORES
  COMPUTERS_PERIPHERALS_AND_SOFTWARE
  CONCRETE_WORK_SERVICES
  CONSTRUCTION_MATERIALS
  CONSULTING_PUBLIC_RELATIONS
  CORRESPONDENCE_SCHOOLS
  COSMETIC_STORES
  COUNSELING_SERVICES
  COUNTRY_CLUBS
  COURIER_SERVICES
  COURT_COSTS
  CREDIT_REPORTING_AGENCIES
  CRUISE_LINES
  DAIRY_PRODUCTS_STORES
  DANCE_HALL_STUDIOS_SCHOOLS
  DATING_ESCORT_SERVICES
  DENTISTS_ORTHODONTISTS
  DEPARTMENT_STORES
  DETECTIVE_AGENCIES
  DIGITAL_GOODS_APPLICATIONS
  DIGITAL_GOODS_GAMES
  DIGITAL_GOODS_LARGE_VOLUME
  DIGITAL_GOODS_MEDIA
  DIRECT_MARKETING_CATALOG_MERCHANT
  DIRECT_MARKETING_COMBINATION_CATALOG_AND_RETAIL_MERCHANT
  DIRECT_MARKETING_INBOUND_TELEMARKETING
  DIRECT_MARKETING_INSURANCE_SERVICES
  DIRECT_MARKETING_OTHER
  DIRECT_MARKETING_OUTBOUND_TELEMARKETING
  DIRECT_MARKETING_SUBSCRIPTION
  DIRECT_MARKETING_TRAVEL
  DISCOUNT_STORES
  DOCTORS
  DOOR_TO_DOOR_SALES
  DRAPERY_WINDOW_COVERING_AND_UPHOLSTERY_STORES
  DRINKING_PLACES
  DRUG_STORES_AND_PHARMACIES
  DRUGS_DRUG_PROPRIETARIES_AND_DRUGGIST_SUNDRIES
  DRY_CLEANERS
  DURABLE_GOODS
  DUTY_FREE_STORES
  EATING_PLACES_RESTAURANTS
  EDUCATIONAL_SERVICES
  ELECTRIC_RAZOR_STORES
  ELECTRICAL_PARTS_AND_EQUIPMENT
  ELECTRICAL_SERVICES
  ELECTRONICS_REPAIR_SHOPS
  ELECTRONICS_STORES
  ELEMENTARY_SECONDARY_SCHOOLS
  EMPLOYMENT_TEMP_AGENCIES
  EQUIPMENT_RENTAL
  EXTERMINATING_SERVICES
  FAMILY_CLOTHING_STORES
  FAST_FOOD_RESTAURANTS
  FINANCIAL_INSTITUTIONS
  FINES_GOVERNMENT_ADMINISTRATIVE_ENTITIES
  FIREPLACE_FIREPLACE_SCREENS_AND_ACCESSORIES_STORES
  FLOOR_COVERING_STORES
  FLORISTS
  FLORISTS_SUPPLIES_NURSERY_STOCK_AND_FLOWERS
  FREEZER_AND_LOCKER_MEAT_PROVISIONERS
  FUEL_DEALERS_NON_AUTOMOTIVE
  FUNERAL_SERVICES_CREMATORIES
  FURNITURE_HOME_FURNISHINGS_AND_EQUIPMENT_STORES_EXCEPT_APPLIANCES
  FURNITURE_REPAIR_REFINISHING
  FURRIERS_AND_FUR_SHOPS
  GENERAL_SERVICES
  GIFT_CARD_NOVELTY_AND_SOUVENIR_SHOPS
  GLASS_PAINT_AND_WALLPAPER_STORES
  GLASSWARE_CRYSTAL_STORES
  GOLF_COURSES_PUBLIC
  GOVERNMENT_SERVICES
  GROCERY_STORES_SUPERMARKETS
  HARDWARE_EQUIPMENT_AND_SUPPLIES
  HARDWARE_STORES
  HEALTH_AND_BEAUTY_SPAS
  HEARING_AIDS_SALES_AND_SUPPLIES
  HEATING_PLUMBING_A_C
  HOBBY_TOY_AND_GAME_SHOPS
  HOME_SUPPLY_WAREHOUSE_STORES
  HOSPITALS
  HOTELS_MOTELS_AND_RESORTS
  HOUSEHOLD_APPLIANCE_STORES
  INDUSTRIAL_SUPPLIES
  INFORMATION_RETRIEVAL_SERVICES
  INSURANCE_DEFAULT
  INSURANCE_UNDERWRITING_PREMIUMS
  INTRA_COMPANY_PURCHASES
  JEWELRY_STORES_WATCHES_CLOCKS_AND_SILVERWARE_STORES
  LANDSCAPING_SERVICES
  LAUNDRIES
  LAUNDRY_CLEANING_SERVICES
  LEGAL_SERVICES_ATTORNEYS
  LUGGAGE_AND_LEATHER_GOODS_STORES
  LUMBER_BUILDING_MATERIALS_STORES
  MANUAL_CASH_DISBURSE
  MARINAS_SERVICE_AND_SUPPLIES
  MASONRY_STONEWORK_AND_PLASTER
  MASSAGE_PARLORS
  MEDICAL_AND_DENTAL_LABS
  MEDICAL_DENTAL_OPHTHALMIC_AND_HOSPITAL_EQUIPMENT_AND_SUPPLIES
  MEDICAL_SERVICES
  MEMBERSHIP_ORGANIZATIONS
  MENS_AND_BOYS_CLOTHING_AND_ACCESSORIES_STORES
  MENS_WOMENS_CLOTHING_STORES
  METAL_SERVICE_CENTERS
  MISCELLANEOUS
  MISCELLANEOUS_APPAREL_AND_ACCESSORY_SHOPS
  MISCELLANEOUS_AUTO_DEALERS
  MISCELLANEOUS_BUSINESS_SERVICES
  MISCELLANEOUS_FOOD_STORES
  MISCELLANEOUS_GENERAL_MERCHANDISE
  MISCELLANEOUS_GENERAL_SERVICES
  MISCELLANEOUS_HOME_FURNISHING_SPECIALTY_STORES
  MISCELLANEOUS_PUBLISHING_AND_PRINTING
  MISCELLANEOUS_RECREATION_SERVICES
  MISCELLANEOUS_REPAIR_SHOPS
  MISCELLANEOUS_SPECIALTY_RETAIL
  MOBILE_HOME_DEALERS
  MOTION_PICTURE_THEATERS
  MOTOR_FREIGHT_CARRIERS_AND_TRUCKING
  MOTOR_HOMES_DEALERS
  MOTOR_VEHICLE_SUPPLIES_AND_NEW_PARTS
  MOTORCYCLE_SHOPS_AND_DEALERS
  MOTORCYCLE_SHOPS_DEALERS
  MUSIC_STORES_MUSICAL_INSTRUMENTS_PIANOS_AND_SHEET_MUSIC
  NEWS_DEALERS_AND_NEWSSTANDS
  NON_FI_MONEY_ORDERS
  NON_FI_STORED_VALUE_CARD_PURCHASE_LOAD
  NONDURABLE_GOODS
  NURSERIES_LAWN_AND_GARDEN_SUPPLY_STORES
  NURSING_PERSONAL_CARE
  OFFICE_AND_COMMERCIAL_FURNITURE
  OPTICIANS_EYEGLASSES
  OPTOMETRISTS_OPHTHALMOLOGIST
  ORTHOPEDIC_GOODS_PROSTHETIC_DEVICES
  OSTEOPATHS
  PACKAGE_STORES_BEER_WINE_AND_LIQUOR
  PAINTS_VARNISHES_AND_SUPPLIES
  PARKING_LOTS_GARAGES
  PASSENGER_RAILWAYS
  PAWN_SHOPS
  PET_SHOPS_PET_FOOD_AND_SUPPLIES
  PETROLEUM_AND_PETROLEUM_PRODUCTS
  PHOTO_DEVELOPING
  PHOTOGRAPHIC_PHOTOCOPY_MICROFILM_EQUIPMENT_AND_SUPPLIES
  PHOTOGRAPHIC_STUDIOS
  PICTURE_VIDEO_PRODUCTION
  PIECE_GOODS_NOTIONS_AND_OTHER_DRY_GOODS
  PLUMBING_HEATING_EQUIPMENT_AND_SUPPLIES
  POLITICAL_ORGANIZATIONS
  POSTAL_SERVICES_GOVERNMENT_ONLY
  PRECIOUS_STONES_AND_METALS_WATCHES_AND_JEWELRY
  PROFESSIONAL_SERVICES
  PUBLIC_WAREHOUSING_AND_STORAGE
  QUICK_COPY_REPRO_AND_BLUEPRINT
  RAILROADS
  REAL_ESTATE_AGENTS_AND_MANAGERS_RENTALS
  RECORD_STORES
  RECREATIONAL_VEHICLE_RENTALS
  RELIGIOUS_GOODS_STORES
  RELIGIOUS_ORGANIZATIONS
  ROOFING_SIDING_SHEET_METAL
  SECRETARIAL_SUPPORT_SERVICES
  SECURITY_BROKERS_DEALERS
  SERVICE_STATIONS
  SEWING_NEEDLEWORK_FABRIC_AND_PIECE_GOODS_STORES
  SHOE_REPAIR_HAT_CLEANING
  SHOE_STORES
  SMALL_APPLIANCE_REPAIR
  SNOWMOBILE_DEALERS
  SPECIAL_TRADE_SERVICES
  SPECIALTY_CLEANING
  SPORTING_GOODS_STORES
  SPORTING_RECREATION_CAMPS
  SPORTS_AND_RIDING_APPAREL_STORES
  SPORTS_CLUBS_FIELDS
  STAMP_AND_COIN_STORES
  STATIONARY_OFFICE_SUPPLIES_PRINTING_AND_WRITING_PAPER
  STATIONERY_STORES_OFFICE_AND_SCHOOL_SUPPLY_STORES
  SWIMMING_POOLS_SALES
  T_UI_TRAVEL_GERMANY
  TAILORS_ALTERATIONS
  TAX_PAYMENTS_GOVERNMENT_AGENCIES
  TAX_PREPARATION_SERVICES
  TAXICABS_LIMOUSINES
  TELECOMMUNICATION_EQUIPMENT_AND_TELEPHONE_SALES
  TELECOMMUNICATION_SERVICES
  TELEGRAPH_SERVICES
  TENT_AND_AWNING_SHOPS
  TESTING_LABORATORIES
  THEATRICAL_TICKET_AGENCIES
  TIMESHARES
  TIRE_RETREADING_AND_REPAIR
  TOLLS_BRIDGE_FEES
  TOURIST_ATTRACTIONS_AND_EXHIBITS
  TOWING_SERVICES
  TRAILER_PARKS_CAMPGROUNDS
  TRANSPORTATION_SERVICES
  TRAVEL_AGENCIES_TOUR_OPERATORS
  TRUCK_STOP_ITERATION
  TRUCK_UTILITY_TRAILER_RENTALS
  TYPESETTING_PLATE_MAKING_AND_RELATED_SERVICES
  TYPEWRITER_STORES
  U_S_FEDERAL_GOVERNMENT_AGENCIES_OR_DEPARTMENTS
  UNIFORMS_COMMERCIAL_CLOTHING
  USED_MERCHANDISE_AND_SECONDHAND_STORES
  UTILITIES
  VARIETY_STORES
  VETERINARY_SERVICES
  VIDEO_AMUSEMENT_GAME_SUPPLIES
  VIDEO_GAME_ARCADES
  VIDEO_TAPE_RENTAL_STORES
  VOCATIONAL_TRADE_SCHOOLS
  WATCH_JEWELRY_REPAIR
  WELDING_REPAIR
  WHOLESALE_CLUBS
  WIG_AND_TOUPEE_STORES
  WIRES_MONEY_ORDERS
  WOMENS_ACCESSORY_AND_SPECIALTY_SHOPS
  WOMENS_READY_TO_WEAR_STORES
  WRECKING_AND_SALVAGE_YARDS
}

enum Interval8 {
  ALL_TIME
  DAILY
  MONTHLY
  PER_AUTHORIZATION
  WEEKLY
  YEARLY
}

enum Status30 {
  ACTIVE
  INACTIVE
}

input V1IssuingCardholder2Input {
  """The cardholder's billing address."""
  billing: BillingInput
  """Additional information about a `company` cardholder."""
  company: CompanyParamInput
  """The cardholder's email address."""
  email: String
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """Additional information about an `individual` cardholder."""
  individual: IndividualParamInput
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
  """The cardholder's phone number."""
  phoneNumber: String
  """Rules that control spending across this cardholder's cards. Refer to our [documentation](https://stripe.com/docs/issuing/controls/spending-controls) for more details."""
  spendingControls: AuthorizationControlsParamV2Input
  """Specifies whether to permit authorizations on this cardholder's cards."""
  status: Status31
}

enum Status31 {
  ACTIVE
  INACTIVE
}

input V1IssuingCards3Input {
  """The [Cardholder](https://stripe.com/docs/api#issuing_cardholder_object) object with which the card will be associated."""
  cardholder: String
  """The currency for the card."""
  currency: String!
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
  """The card this is meant to be a replacement for (if any)."""
  replacementFor: String
  """If `replacement_for` is specified, this should indicate why that card is being replaced."""
  replacementReason: ReplacementReason2
  """The address where the card will be shipped."""
  shipping: ShippingSpecsInput
  """Rules that control spending for this card. Refer to our [documentation](https://stripe.com/docs/issuing/controls/spending-controls) for more details."""
  spendingControls: AuthorizationControlsParamInput
  """Whether authorizations can be approved on this card. Defaults to `inactive`."""
  status: Status32
  """The type of card to issue. Possible values are `physical` or `virtual`."""
  type: Type40!
}

enum ReplacementReason2 {
  DAMAGED
  EXPIRED
  LOST
  STOLEN
}

"""The address where the card will be shipped."""
input ShippingSpecsInput {
  address: RequiredAddressInput!
  name: String!
  service: Service2
  type: Type39
}

enum Service2 {
  EXPRESS
  PRIORITY
  STANDARD
}

enum Type39 {
  BULK
  INDIVIDUAL
}

"""Rules that control spending for this card. Refer to our [documentation](https://stripe.com/docs/issuing/controls/spending-controls) for more details."""
input AuthorizationControlsParamInput {
  allowedCategories: [AllowedCategories2ListItem]
  blockedCategories: [BlockedCategories2ListItem]
  spendingLimits: [SpendingLimits3ListItemInput]
}

enum Status32 {
  ACTIVE
  INACTIVE
}

enum Type40 {
  PHYSICAL
  VIRTUAL
}

input V1IssuingCard2Input {
  """Reason why the `status` of this card is `canceled`."""
  cancellationReason: CancellationReason4
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
  """Rules that control spending for this card. Refer to our [documentation](https://stripe.com/docs/issuing/controls/spending-controls) for more details."""
  spendingControls: AuthorizationControlsParamInput
  """Dictates whether authorizations can be approved on this card. If this card is being canceled because it was lost or stolen, this information should be provided as `cancellation_reason`."""
  status: Status33
}

enum CancellationReason4 {
  LOST
  STOLEN
}

enum Status33 {
  ACTIVE
  CANCELED
  INACTIVE
}

input V1IssuingDisputes2Input {
  """Evidence provided for the dispute."""
  evidence: EvidenceParamInput
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
  """The ID of the issuing transaction to create a dispute for."""
  transaction: String!
}

"""Evidence provided for the dispute."""
input EvidenceParamInput {
  canceled: JSON
  duplicate: JSON
  fraudulent: JSON
  merchandiseNotAsDescribed: JSON
  notReceived: JSON
  other: JSON
  reason: Reason15
  serviceNotAsDescribed: JSON
}

enum Reason15 {
  CANCELED
  DUPLICATE
  FRAUDULENT
  MERCHANDISE_NOT_AS_DESCRIBED
  NOT_RECEIVED
  OTHER
  SERVICE_NOT_AS_DESCRIBED
}

input V1IssuingDispute2Input {
  """Evidence provided for the dispute."""
  evidence: EvidenceParamInput
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
}

input V1IssuingDisputeSubmitInput {
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
}

input V1IssuingSettlement2Input {
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
}

input V1IssuingTransaction2Input {
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
}

input V1Orders3Input {
  """A coupon code that represents a discount to be applied to this order. Must be one-time duration and in same currency as the order. An order can have multiple coupons."""
  coupon: String
  """Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."""
  currency: String!
  """The ID of an existing customer to use for this order. If provided, the customer email and shipping address will be used to create the order. Subsequently, the customer will also be charged to pay the order. If `email` or `shipping` are also provided, they will override the values retrieved from the customer object."""
  customer: String
  """The email address of the customer placing the order."""
  email: String
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """List of items constituting the order. An order can have up to 25 items."""
  items: [Items7ListItemInput]
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
  """Shipping address for the order. Required if any of the SKUs are for products that have `shippable` set to true."""
  shipping: Shipping12Input
}

input Items7ListItemInput {
  amount: Int
  currency: String
  description: String
  parent: String
  quantity: Int
  type: Type46
}

enum Type46 {
  DISCOUNT
  SHIPPING
  SKU
  TAX
}

"""Shipping address for the order. Required if any of the SKUs are for products that have `shippable` set to true."""
input Shipping12Input {
  address: OptionalFieldsAddressInput!
  name: String!
  phone: String
}

input V1Order2Input {
  """A coupon code that represents a discount to be applied to this order. Must be one-time duration and in same currency as the order. An order can have multiple coupons."""
  coupon: String
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
  """The shipping method to select for fulfilling this order. If specified, must be one of the `id`s of a shipping method in the `shipping_methods` array. If specified, will overwrite the existing selected shipping method, updating `items` as necessary."""
  selectedShippingMethod: String
  """Tracking information once the order has been fulfilled."""
  shipping: ShippingTrackingParamsInput
  """Current order status. One of `created`, `paid`, `canceled`, `fulfilled`, or `returned`. More detail in the [Orders Guide](https://stripe.com/docs/orders/guide#understanding-order-statuses)."""
  status: Status37
}

"""Tracking information once the order has been fulfilled."""
input ShippingTrackingParamsInput {
  carrier: String!
  trackingNumber: String!
}

enum Status37 {
  CANCELED
  CREATED
  FULFILLED
  PAID
  RETURNED
}

input V1OrderPayInput {
  """A fee in %s that will be applied to the order and transferred to the application owner's Stripe account. The request must be made with an OAuth key or the `Stripe-Account` header in order to take an application fee. For more information, see the application fees [documentation](https://stripe.com/docs/connect/direct-charges#collecting-fees)."""
  applicationFee: Int
  """The ID of an existing customer that will be charged for this order. If no customer was attached to the order at creation, either `source` or `customer` is required. Otherwise, the specified customer will be charged instead of the one attached to the order."""
  customer: String
  """The email address of the customer placing the order. Required if not previously specified for the order."""
  email: String
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
  """A [Token](https://stripe.com/docs/api#tokens)'s or a [Source](https://stripe.com/docs/api#sources)'s ID, as returned by [Elements](https://stripe.com/docs/elements). If no customer was attached to the order at creation, either `source` or `customer` is required. Otherwise, the specified source will be charged intead of the customer attached to the order."""
  source: String
}

input V1OrderReturns3Input {
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """List of items to return."""
  items: JSON
}

input V1PaymentIntents2Input {
  """Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99)."""
  amount: Int!
  """The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. The amount of the application fee collected will be capped at the total payment amount. For more information, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts)."""
  applicationFeeAmount: Int
  """Controls when the funds will be captured from the customer's account."""
  captureMethod: CaptureMethod2
  """Set to `true` to attempt to [confirm](https://stripe.com/docs/api/payment_intents/confirm) this PaymentIntent immediately. This parameter defaults to `false`. When creating and confirming a PaymentIntent at the same time, parameters available in the [confirm](https://stripe.com/docs/api/payment_intents/confirm) API may also be provided."""
  confirm: Boolean
  confirmationMethod: ConfirmationMethod
  """Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."""
  currency: String!
  """
  ID of the Customer this PaymentIntent belongs to, if one exists.
  
  Payment methods attached to other Customers cannot be used with this PaymentIntent.
  
  If present in combination with [setup_future_usage](https://stripe.com/docs/api#payment_intent_object-setup_future_usage), this PaymentIntent's payment method will be attached to the Customer after the PaymentIntent has been confirmed and any required actions from the user are complete.
  """
  customer: String
  """An arbitrary string attached to the object. Often useful for displaying to users."""
  description: String
  """Set to `true` to fail the payment attempt if the PaymentIntent transitions into `requires_action`. This parameter is intended for simpler integrations that do not handle customer actions, like [saving cards without authentication](https://stripe.com/docs/payments/save-card-without-authentication). This parameter can only be used with [`confirm=true`](https://stripe.com/docs/api/payment_intents/create#create_payment_intent-confirm)."""
  errorOnRequiresAction: Boolean
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """ID of the mandate to be used for this payment. This parameter can only be used with [`confirm=true`](https://stripe.com/docs/api/payment_intents/create#create_payment_intent-confirm)."""
  mandate: String
  """This hash contains details about the Mandate to create. This parameter can only be used with [`confirm=true`](https://stripe.com/docs/api/payment_intents/create#create_payment_intent-confirm)."""
  mandateData: MandateDataInput
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
  """Set to `true` to indicate that the customer is not in your checkout flow during this payment attempt, and therefore is unable to authenticate. This parameter is intended for scenarios where you collect card details and [charge them later](https://stripe.com/docs/payments/cards/charging-saved-cards). This parameter can only be used with [`confirm=true`](https://stripe.com/docs/api/payment_intents/create#create_payment_intent-confirm)."""
  offSession: JSON
  """The Stripe account ID for which these funds are intended. For details, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts)."""
  onBehalfOf: String
  """
  ID of the payment method (a PaymentMethod, Card, or [compatible Source](https://stripe.com/docs/payments/payment-methods/transitioning#compatibility) object) to attach to this PaymentIntent.
  
  If this parameter is omitted with `confirm=true`, `customer.default_source` will be attached as this PaymentIntent's payment instrument to improve the migration experience for users of the Charges API. We recommend that you explicitly provide the `payment_method` going forward.
  """
  paymentMethod: String
  """
  If provided, this hash will be used to create a PaymentMethod. The new PaymentMethod will appear
  in the [payment_method](https://stripe.com/docs/api/payment_intents/object#payment_intent_object-payment_method)
  property on the PaymentIntent.
  """
  paymentMethodData: PaymentMethodDataInput
  """Payment-method-specific configuration for this PaymentIntent."""
  paymentMethodOptions: PaymentMethodOptions7Input
  """The list of payment method types (e.g. card) that this PaymentIntent is allowed to use. If this is not provided, defaults to ["card"]."""
  paymentMethodTypes: [String]
  """Email address that the receipt for the resulting payment will be sent to. If `receipt_email` is specified for a payment in live mode, a receipt will be sent regardless of your [email settings](https://dashboard.stripe.com/account/emails)."""
  receiptEmail: String
  """The URL to redirect your customer back to after they authenticate or cancel their payment on the payment method's app or site. If you'd prefer to redirect to a mobile application, you can alternatively supply an application URI scheme. This parameter can only be used with [`confirm=true`](https://stripe.com/docs/api/payment_intents/create#create_payment_intent-confirm)."""
  returnUrl: String
  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.
  
  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
  
  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  """
  setupFutureUsage: SetupFutureUsage3
  """Shipping information for this PaymentIntent."""
  shipping: Shipping13Input
  """For non-card charges, you can use this value as the complete description that appears on your customers’ statements. Must contain at least one letter, maximum 22 characters."""
  statementDescriptor: String
  """Provides information about a card payment that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor."""
  statementDescriptorSuffix: String
  """
  The parameters used to automatically create a Transfer when the payment succeeds.
  For more information, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts).
  """
  transferData: TransferDataCreationParamsInput
  """A string that identifies the resulting payment as part of a group. See the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts) for details."""
  transferGroup: String
  """Set to `true` only when using manual confirmation and the iOS or Android SDKs to handle additional authentication steps."""
  useStripeSdk: Boolean
}

"""This hash contains details about the Mandate to create. This parameter can only be used with [`confirm=true`](https://stripe.com/docs/api/payment_intents/create#create_payment_intent-confirm)."""
input MandateDataInput {
  customerAcceptance: CustomerAcceptanceParamInput!
}

input CustomerAcceptanceParamInput {
  acceptedAt: Int
  offline: JSON
  online: OnlineInput
  type: Type47!
}

input OnlineInput {
  ipAddress: String!
  userAgent: String!
}

enum Type47 {
  OFFLINE
  ONLINE
}

"""
If provided, this hash will be used to create a PaymentMethod. The new PaymentMethod will appear
in the [payment_method](https://stripe.com/docs/api/payment_intents/object#payment_intent_object-payment_method)
property on the PaymentIntent.
"""
input PaymentMethodDataInput {
  acssDebit: PaymentMethodParamInput
  afterpayClearpay: JSON
  alipay: JSON
  auBecsDebit: AuBecsDebit3Input
  bacsDebit: BacsDebit2Input
  bancontact: JSON
  billingDetails: BillingDetailsInnerParamsInput
  boleto: Boleto4Input
  eps: Eps3Input
  fpx: Fpx3Input
  giropay: JSON
  grabpay: JSON
  ideal: Ideal4Input
  interacPresent: JSON
  metadata: JSON
  oxxo: JSON
  p24: P244Input
  sepaDebit: SepaDebit5Input
  sofort: Sofort4Input
  type: Type48!
  wechatPay: JSON
}

input PaymentMethodParamInput {
  accountNumber: String!
  institutionNumber: String!
  transitNumber: String!
}

input AuBecsDebit3Input {
  accountNumber: String!
  bsbNumber: String!
}

input BacsDebit2Input {
  accountNumber: String
  sortCode: String
}

input BillingDetailsInnerParamsInput {
  address: JSON
  email: String
  name: String
  phone: String
}

input Boleto4Input {
  taxId: String!
}

input Eps3Input {
  bank: Bank9
}

enum Bank9 {
  ARZTE_UND_APOTHEKER_BANK
  AUSTRIAN_ANADI_BANK_AG
  BANK_AUSTRIA
  BANKHAUS_CARL_SPANGLER
  BANKHAUS_SCHELHAMMER_UND_SCHATTERA_AG
  BAWAG_PSK_AG
  BKS_BANK_AG
  BRULL_KALLMUS_BANK_AG
  BTV_VIER_LANDER_BANK
  CAPITAL_BANK_GRAWE_GRUPPE_AG
  DOLOMITENBANK
  EASYBANK_AG
  ERSTE_BANK_UND_SPARKASSEN
  HYPO_ALPEADRIABANK_INTERNATIONAL_AG
  HYPO_BANK_BURGENLAND_AKTIENGESELLSCHAFT
  HYPO_NOE_LB_FUR_NIEDEROSTERREICH_U_WIEN
  HYPO_OBEROSTERREICH_SALZBURG_STEIERMARK
  HYPO_TIROL_BANK_AG
  HYPO_VORARLBERG_BANK_AG
  MARCHFELDER_BANK
  OBERBANK_AG
  RAIFFEISEN_BANKENGRUPPE_OSTERREICH
  SCHOELLERBANK_AG
  SPARDA_BANK_WIEN
  VOLKSBANK_GRUPPE
  VOLKSKREDITBANK_AG
  VR_BANK_BRAUNAU
}

input Fpx3Input {
  bank: Bank10!
}

enum Bank10 {
  AFFIN_BANK
  ALLIANCE_BANK
  AMBANK
  BANK_ISLAM
  BANK_MUAMALAT
  BANK_RAKYAT
  BSN
  CIMB
  DEUTSCHE_BANK
  HONG_LEONG_BANK
  HSBC
  KFH
  MAYBANK2E
  MAYBANK2U
  OCBC
  PB_ENTERPRISE
  PUBLIC_BANK
  RHB
  STANDARD_CHARTERED
  UOB
}

input Ideal4Input {
  bank: Bank11
}

enum Bank11 {
  ABN_AMRO
  ASN_BANK
  BUNQ
  HANDELSBANKEN
  ING
  KNAB
  MONEYOU
  RABOBANK
  REGIOBANK
  REVOLUT
  SNS_BANK
  TRIODOS_BANK
  VAN_LANSCHOT
}

input P244Input {
  bank: Bank12
}

enum Bank12 {
  ALIOR_BANK
  BANK_MILLENNIUM
  BANK_NOWY_BFG_SA
  BANK_PEKAO_SA
  BANKI_SPBDZIELCZE
  BLIK
  BNP_PARIBAS
  BOZ
  CITI_HANDLOWY
  CREDIT_AGRICOLE
  ENVELOBANK
  ETRANSFER_POCZTOWY24
  GETIN_BANK
  IDEABANK
  ING
  INTELIGO
  MBANK_MTRANSFER
  NEST_PRZELEW
  NOBLE_PAY
  PBAC_Z_IPKO
  PLUS_BANK
  SANTANDER_PRZELEW24
  TMOBILE_USBUGI_BANKOWE
  TOYOTA_BANK
  VOLKSWAGEN_BANK
}

input SepaDebit5Input {
  iban: String!
}

input Sofort4Input {
  country: Country51!
}

enum Country51 {
  AT
  BE
  DE
  ES
  IT
  NL
}

enum Type48 {
  ACSS_DEBIT
  AFTERPAY_CLEARPAY
  ALIPAY
  AU_BECS_DEBIT
  BACS_DEBIT
  BANCONTACT
  BOLETO
  EPS
  FPX
  GIROPAY
  GRABPAY
  IDEAL
  OXXO
  P24
  SEPA_DEBIT
  SOFORT
  WECHAT_PAY
}

"""Payment-method-specific configuration for this PaymentIntent."""
input PaymentMethodOptions7Input {
  acssDebit: JSON
  afterpayClearpay: JSON
  alipay: JSON
  bancontact: JSON
  boleto: JSON
  card: JSON
  cardPresent: JSON
  ideal: JSON
  oxxo: JSON
  p24: JSON
  sepaDebit: JSON
  sofort: JSON
  wechatPay: JSON
}

enum SetupFutureUsage3 {
  OFF_SESSION
  ON_SESSION
}

"""Shipping information for this PaymentIntent."""
input Shipping13Input {
  address: OptionalFieldsAddressInput!
  carrier: String
  name: String!
  phone: String
  trackingNumber: String
}

"""
The parameters used to automatically create a Transfer when the payment succeeds.
For more information, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts).
"""
input TransferDataCreationParamsInput {
  amount: Int
  destination: String!
}

input V1PaymentIntents3Input {
  """Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99)."""
  amount: Int
  """The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. The amount of the application fee collected will be capped at the total payment amount. For more information, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts)."""
  applicationFeeAmount: JSON
  """Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."""
  currency: String
  """
  ID of the Customer this PaymentIntent belongs to, if one exists.
  
  Payment methods attached to other Customers cannot be used with this PaymentIntent.
  
  If present in combination with [setup_future_usage](https://stripe.com/docs/api#payment_intent_object-setup_future_usage), this PaymentIntent's payment method will be attached to the Customer after the PaymentIntent has been confirmed and any required actions from the user are complete.
  """
  customer: String
  """An arbitrary string attached to the object. Often useful for displaying to users."""
  description: String
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
  """ID of the payment method (a PaymentMethod, Card, or [compatible Source](https://stripe.com/docs/payments/payment-methods/transitioning#compatibility) object) to attach to this PaymentIntent."""
  paymentMethod: String
  """
  If provided, this hash will be used to create a PaymentMethod. The new PaymentMethod will appear
  in the [payment_method](https://stripe.com/docs/api/payment_intents/object#payment_intent_object-payment_method)
  property on the PaymentIntent.
  """
  paymentMethodData: PaymentMethodDataInput
  """Payment-method-specific configuration for this PaymentIntent."""
  paymentMethodOptions: PaymentMethodOptions7Input
  """The list of payment method types (e.g. card) that this PaymentIntent is allowed to use."""
  paymentMethodTypes: [String]
  """Email address that the receipt for the resulting payment will be sent to. If `receipt_email` is specified for a payment in live mode, a receipt will be sent regardless of your [email settings](https://dashboard.stripe.com/account/emails)."""
  receiptEmail: JSON
  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.
  
  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
  
  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  
  If `setup_future_usage` is already set and you are performing a request using a publishable key, you may only update the value from `on_session` to `off_session`.
  """
  setupFutureUsage: SetupFutureUsage4
  """Shipping information for this PaymentIntent."""
  shipping: JSON
  """For non-card charges, you can use this value as the complete description that appears on your customers’ statements. Must contain at least one letter, maximum 22 characters."""
  statementDescriptor: String
  """Provides information about a card payment that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor."""
  statementDescriptorSuffix: String
  """The parameters used to automatically create a Transfer when the payment succeeds. For more information, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts)."""
  transferData: TransferDataUpdateParamsInput
  """A string that identifies the resulting payment as part of a group. `transfer_group` may only be provided if it has not been set. See the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts) for details."""
  transferGroup: String
}

enum SetupFutureUsage4 {
  _
  OFF_SESSION
  ON_SESSION
}

"""The parameters used to automatically create a Transfer when the payment succeeds. For more information, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts)."""
input TransferDataUpdateParamsInput {
  amount: Int
}

input V1PaymentIntentsCancelInput {
  """Reason for canceling this PaymentIntent. Possible values are `duplicate`, `fraudulent`, `requested_by_customer`, or `abandoned`"""
  cancellationReason: CancellationReason7
  """Specifies which fields in the response should be expanded."""
  expand: [String]
}

enum CancellationReason7 {
  ABANDONED
  DUPLICATE
  FRAUDULENT
  REQUESTED_BY_CUSTOMER
}

input V1PaymentIntentsCaptureInput {
  """The amount to capture from the PaymentIntent, which must be less than or equal to the original amount. Any additional amount will be automatically refunded. Defaults to the full `amount_capturable` if not provided."""
  amountToCapture: Int
  """The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. The amount of the application fee collected will be capped at the total payment amount. For more information, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts)."""
  applicationFeeAmount: Int
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """For non-card charges, you can use this value as the complete description that appears on your customers’ statements. Must contain at least one letter, maximum 22 characters."""
  statementDescriptor: String
  """Provides information about a card payment that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor."""
  statementDescriptorSuffix: String
  """
  The parameters used to automatically create a Transfer when the payment
  is captured. For more information, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts).
  """
  transferData: TransferData11Input
}

"""
The parameters used to automatically create a Transfer when the payment
is captured. For more information, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts).
"""
input TransferData11Input {
  amount: Int
}

input V1PaymentIntentsConfirmInput {
  """The client secret of the PaymentIntent."""
  clientSecret: String
  """Set to `true` to fail the payment attempt if the PaymentIntent transitions into `requires_action`. This parameter is intended for simpler integrations that do not handle customer actions, like [saving cards without authentication](https://stripe.com/docs/payments/save-card-without-authentication)."""
  errorOnRequiresAction: Boolean
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """ID of the mandate to be used for this payment."""
  mandate: String
  """This hash contains details about the Mandate to create"""
  mandateData: MandateData2Input
  """Set to `true` to indicate that the customer is not in your checkout flow during this payment attempt, and therefore is unable to authenticate. This parameter is intended for scenarios where you collect card details and [charge them later](https://stripe.com/docs/payments/cards/charging-saved-cards)."""
  offSession: JSON
  """ID of the payment method (a PaymentMethod, Card, or [compatible Source](https://stripe.com/docs/payments/payment-methods/transitioning#compatibility) object) to attach to this PaymentIntent."""
  paymentMethod: String
  """
  If provided, this hash will be used to create a PaymentMethod. The new PaymentMethod will appear
  in the [payment_method](https://stripe.com/docs/api/payment_intents/object#payment_intent_object-payment_method)
  property on the PaymentIntent.
  """
  paymentMethodData: PaymentMethodDataInput
  """Payment-method-specific configuration for this PaymentIntent."""
  paymentMethodOptions: PaymentMethodOptions7Input
  """The list of payment method types (e.g. card) that this PaymentIntent is allowed to use."""
  paymentMethodTypes: [String]
  """Email address that the receipt for the resulting payment will be sent to. If `receipt_email` is specified for a payment in live mode, a receipt will be sent regardless of your [email settings](https://dashboard.stripe.com/account/emails)."""
  receiptEmail: JSON
  """
  The URL to redirect your customer back to after they authenticate or cancel their payment on the payment method's app or site.
  If you'd prefer to redirect to a mobile application, you can alternatively supply an application URI scheme.
  This parameter is only used for cards and other redirect-based payment methods.
  """
  returnUrl: String
  """
  Indicates that you intend to make future payments with this PaymentIntent's payment method.
  
  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
  
  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
  
  If `setup_future_usage` is already set and you are performing a request using a publishable key, you may only update the value from `on_session` to `off_session`.
  """
  setupFutureUsage: SetupFutureUsage4
  """Shipping information for this PaymentIntent."""
  shipping: JSON
  """Set to `true` only when using manual confirmation and the iOS or Android SDKs to handle additional authentication steps."""
  useStripeSdk: Boolean
}

"""This hash contains details about the Mandate to create"""
input MandateData2Input {
  customerAcceptance: JSON
}

input V1PaymentMethods2Input {
  """If this is an `acss_debit` PaymentMethod, this hash contains details about the ACSS Debit payment method."""
  acssDebit: AcssDebit8Input
  """If this is an `AfterpayClearpay` PaymentMethod, this hash contains details about the AfterpayClearpay payment method."""
  afterpayClearpay: JSON
  """If this is an `Alipay` PaymentMethod, this hash contains details about the Alipay payment method."""
  alipay: JSON
  """If this is an `au_becs_debit` PaymentMethod, this hash contains details about the bank account."""
  auBecsDebit: AuBecsDebit4Input
  """If this is a `bacs_debit` PaymentMethod, this hash contains details about the Bacs Direct Debit bank account."""
  bacsDebit: BacsDebit3Input
  """If this is a `bancontact` PaymentMethod, this hash contains details about the Bancontact payment method."""
  bancontact: JSON
  """Billing information associated with the PaymentMethod that may be used or required by particular types of payment methods."""
  billingDetails: BillingDetails2Input
  """If this is a `boleto` PaymentMethod, this hash contains details about the Boleto payment method."""
  boleto: Boleto6Input
  """If this is a `card` PaymentMethod, this hash contains the user's card details. For backwards compatibility, you can alternatively provide a Stripe token (e.g., for Apple Pay, Amex Express Checkout, or legacy Checkout) into the card hash with format `card: {token: "tok_visa"}`. When providing a card number, you must meet the requirements for [PCI compliance](https://stripe.com/docs/security#validating-pci-compliance). We strongly recommend using Stripe.js instead of interacting with this API directly."""
  card: Card19Input
  """The `Customer` to whom the original PaymentMethod is attached."""
  customer: String
  """If this is an `eps` PaymentMethod, this hash contains details about the EPS payment method."""
  eps: Eps4Input
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """If this is an `fpx` PaymentMethod, this hash contains details about the FPX payment method."""
  fpx: Fpx4Input
  """If this is a `giropay` PaymentMethod, this hash contains details about the Giropay payment method."""
  giropay: JSON
  """If this is a `grabpay` PaymentMethod, this hash contains details about the GrabPay payment method."""
  grabpay: JSON
  """If this is an `ideal` PaymentMethod, this hash contains details about the iDEAL payment method."""
  ideal: Ideal6Input
  """If this is an `interac_present` PaymentMethod, this hash contains details about the Interac Present payment method."""
  interacPresent: JSON
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
  """If this is an `oxxo` PaymentMethod, this hash contains details about the OXXO payment method."""
  oxxo: JSON
  """If this is a `p24` PaymentMethod, this hash contains details about the P24 payment method."""
  p24: P246Input
  """The PaymentMethod to share."""
  paymentMethod: String
  """If this is a `sepa_debit` PaymentMethod, this hash contains details about the SEPA debit bank account."""
  sepaDebit: SepaDebit7Input
  """If this is a `sofort` PaymentMethod, this hash contains details about the SOFORT payment method."""
  sofort: Sofort6Input
  """The type of the PaymentMethod. An additional hash is included on the PaymentMethod with a name matching this value. It contains additional information specific to the PaymentMethod type."""
  type: Type49
  """If this is an `wechat_pay` PaymentMethod, this hash contains details about the wechat_pay payment method."""
  wechatPay: JSON
}

"""If this is an `acss_debit` PaymentMethod, this hash contains details about the ACSS Debit payment method."""
input AcssDebit8Input {
  accountNumber: String!
  institutionNumber: String!
  transitNumber: String!
}

"""If this is an `au_becs_debit` PaymentMethod, this hash contains details about the bank account."""
input AuBecsDebit4Input {
  accountNumber: String!
  bsbNumber: String!
}

"""If this is a `bacs_debit` PaymentMethod, this hash contains details about the Bacs Direct Debit bank account."""
input BacsDebit3Input {
  accountNumber: String
  sortCode: String
}

"""Billing information associated with the PaymentMethod that may be used or required by particular types of payment methods."""
input BillingDetails2Input {
  address: JSON
  email: String
  name: String
  phone: String
}

"""If this is a `boleto` PaymentMethod, this hash contains details about the Boleto payment method."""
input Boleto6Input {
  taxId: String!
}

"""If this is a `card` PaymentMethod, this hash contains the user's card details. For backwards compatibility, you can alternatively provide a Stripe token (e.g., for Apple Pay, Amex Express Checkout, or legacy Checkout) into the card hash with format `card: {token: "tok_visa"}`. When providing a card number, you must meet the requirements for [PCI compliance](https://stripe.com/docs/security#validating-pci-compliance). We strongly recommend using Stripe.js instead of interacting with this API directly."""
input Card19Input {
  cvc: String
  expMonth: Int
  expYear: Int
  number: String
  token: String
}

"""If this is an `eps` PaymentMethod, this hash contains details about the EPS payment method."""
input Eps4Input {
  bank: Bank9
}

"""If this is an `fpx` PaymentMethod, this hash contains details about the FPX payment method."""
input Fpx4Input {
  bank: Bank10!
}

"""If this is an `ideal` PaymentMethod, this hash contains details about the iDEAL payment method."""
input Ideal6Input {
  bank: Bank11
}

"""If this is a `p24` PaymentMethod, this hash contains details about the P24 payment method."""
input P246Input {
  bank: Bank12
}

"""If this is a `sepa_debit` PaymentMethod, this hash contains details about the SEPA debit bank account."""
input SepaDebit7Input {
  iban: String!
}

"""If this is a `sofort` PaymentMethod, this hash contains details about the SOFORT payment method."""
input Sofort6Input {
  country: Country51!
}

enum Type49 {
  ACSS_DEBIT
  AFTERPAY_CLEARPAY
  ALIPAY
  AU_BECS_DEBIT
  BACS_DEBIT
  BANCONTACT
  BOLETO
  CARD
  EPS
  FPX
  GIROPAY
  GRABPAY
  IDEAL
  OXXO
  P24
  SEPA_DEBIT
  SOFORT
  WECHAT_PAY
}

input V1PaymentMethod2Input {
  """Billing information associated with the PaymentMethod that may be used or required by particular types of payment methods."""
  billingDetails: BillingDetails2Input
  """If this is a `card` PaymentMethod, this hash contains the user's card details."""
  card: UpdateApiParamInput
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
}

"""If this is a `card` PaymentMethod, this hash contains the user's card details."""
input UpdateApiParamInput {
  expMonth: Int
  expYear: Int
}

input V1PaymentMethodAttachInput {
  """The ID of the customer to which to attach the PaymentMethod."""
  customer: String!
  """Specifies which fields in the response should be expanded."""
  expand: [String]
}

input V1PaymentMethodDetachInput {
  """Specifies which fields in the response should be expanded."""
  expand: [String]
}

input V1Payouts2Input {
  """A positive integer in cents representing how much to payout."""
  amount: Int!
  """Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."""
  currency: String!
  """An arbitrary string attached to the object. Often useful for displaying to users."""
  description: String
  """The ID of a bank account or a card to send the payout to. If no destination is supplied, the default external account for the specified currency will be used."""
  destination: String
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
  """The method used to send this payout, which can be `standard` or `instant`. `instant` is only supported for payouts to debit cards. (See [Instant payouts for marketplaces for more information](https://stripe.com/blog/instant-payouts-for-marketplaces).)"""
  method: Method2
  """The balance type of your Stripe balance to draw this payout from. Balances for different payment sources are kept separately. You can find the amounts with the balances API. One of `bank_account`, `card`, or `fpx`."""
  sourceType: SourceType2
  """A string to be displayed on the recipient's bank or card statement. This may be at most 22 characters. Attempting to use a `statement_descriptor` longer than 22 characters will return an error. Note: Most banks will truncate this information and/or display it inconsistently. Some may not display it at all."""
  statementDescriptor: String
}

enum Method2 {
  INSTANT
  STANDARD
}

enum SourceType2 {
  BANK_ACCOUNT
  CARD
  FPX
}

input V1Payout2Input {
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
}

input V1PayoutCancelInput {
  """Specifies which fields in the response should be expanded."""
  expand: [String]
}

input V1PayoutReverseInput {
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
}

input V1Plans2Input {
  """Whether the plan is currently available for new subscriptions. Defaults to `true`."""
  active: Boolean
  """Specifies a usage aggregation strategy for plans of `usage_type=metered`. Allowed values are `sum` for summing up all usage during a period, `last_during_period` for using the last usage record reported within a period, `last_ever` for using the last usage record ever (across period bounds) or `max` which uses the usage record with the maximum reported usage during a period. Defaults to `sum`."""
  aggregateUsage: AggregateUsage3
  """A positive integer in %s (or 0 for a free plan) representing how much to charge on a recurring basis."""
  amount: Int
  """Same as `amount`, but accepts a decimal value with at most 12 decimal places. Only one of `amount` and `amount_decimal` can be set."""
  amountDecimal: String
  """Describes how to compute the price per period. Either `per_unit` or `tiered`. `per_unit` indicates that the fixed amount (specified in `amount`) will be charged per unit in `quantity` (for plans with `usage_type=licensed`), or per unit of total usage (for plans with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as defined using the `tiers` and `tiers_mode` attributes."""
  billingScheme: BillingScheme2
  """Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."""
  currency: String!
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """An identifier randomly generated by Stripe. Used to identify this plan when subscribing a customer. You can optionally override this ID, but the ID must be unique across all plans in your Stripe account. You can, however, use the same plan ID in both live and test modes."""
  id: String
  """Specifies billing frequency. Either `day`, `week`, `month` or `year`."""
  interval: Interval9!
  """The number of intervals between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months. Maximum of one year interval allowed (1 year, 12 months, or 52 weeks)."""
  intervalCount: Int
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
  """A brief description of the plan, hidden from customers."""
  nickname: String
  product: JSON
  """Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`."""
  tiers: [Tiers3ListItemInput]
  """Defines if the tiering price should be `graduated` or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per unit price, in `graduated` tiering pricing can successively change as the quantity grows."""
  tiersMode: TiersMode2
  """Apply a transformation to the reported usage or set quantity before computing the billed price. Cannot be combined with `tiers`."""
  transformUsage: TransformUsageParamInput
  """Default number of trial days when subscribing a customer to this plan using [`trial_from_plan=true`](https://stripe.com/docs/api#create_subscription-trial_from_plan)."""
  trialPeriodDays: Int
  """Configures how the quantity per period should be determined. Can be either `metered` or `licensed`. `licensed` automatically bills the `quantity` set when adding it to a subscription. `metered` aggregates the total usage based on usage records. Defaults to `licensed`."""
  usageType: UsageType
}

enum AggregateUsage3 {
  LAST_DURING_PERIOD
  LAST_EVER
  MAX
  SUM
}

enum Interval9 {
  DAY
  MONTH
  WEEK
  YEAR
}

input Tiers3ListItemInput {
  flatAmount: Int
  flatAmountDecimal: String
  unitAmount: Int
  unitAmountDecimal: String
  upTo: JSON!
}

enum TiersMode2 {
  GRADUATED
  VOLUME
}

"""Apply a transformation to the reported usage or set quantity before computing the billed price. Cannot be combined with `tiers`."""
input TransformUsageParamInput {
  divideBy: Int!
  round: Round2!
}

enum Round2 {
  DOWN
  UP
}

input V1Plan2Input {
  """Whether the plan is currently available for new subscriptions."""
  active: Boolean
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
  """A brief description of the plan, hidden from customers."""
  nickname: String
  """The product the plan belongs to. This cannot be changed once it has been used in a subscription or subscription schedule."""
  product: String
  """Default number of trial days when subscribing a customer to this plan using [`trial_from_plan=true`](https://stripe.com/docs/api#create_subscription-trial_from_plan)."""
  trialPeriodDays: Int
}

input V1Prices2Input {
  """Whether the price can be used for new purchases. Defaults to `true`."""
  active: Boolean
  """Describes how to compute the price per period. Either `per_unit` or `tiered`. `per_unit` indicates that the fixed amount (specified in `unit_amount` or `unit_amount_decimal`) will be charged per unit in `quantity` (for prices with `usage_type=licensed`), or per unit of total usage (for prices with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as defined using the `tiers` and `tiers_mode` attributes."""
  billingScheme: BillingScheme
  """Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."""
  currency: String!
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """A lookup key used to retrieve prices dynamically from a static string."""
  lookupKey: String
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
  """A brief description of the price, hidden from customers."""
  nickname: String
  """The ID of the product that this price will belong to."""
  product: String
  """These fields can be used to create a new product that this price will belong to."""
  productData: InlineProductParamsInput
  """The recurring components of a price such as `interval` and `usage_type`."""
  recurring: Recurring2Input
  """Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`. Once specified as either `inclusive` or `exclusive`, it cannot be changed."""
  taxBehavior: TaxBehavior3
  """Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`."""
  tiers: [Tiers3ListItemInput]
  """Defines if the tiering price should be `graduated` or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per unit price, in `graduated` tiering pricing can successively change as the quantity grows."""
  tiersMode: TiersMode2
  """If set to true, will atomically remove the lookup key from the existing price, and assign it to this price."""
  transferLookupKey: Boolean
  """Apply a transformation to the reported usage or set quantity before computing the billed price. Cannot be combined with `tiers`."""
  transformQuantity: TransformQuantity2Input
  """A positive integer in %s (or 0 for a free price) representing how much to charge."""
  unitAmount: Int
  """Same as `unit_amount`, but accepts a decimal value in %s with at most 12 decimal places. Only one of `unit_amount` and `unit_amount_decimal` can be set."""
  unitAmountDecimal: String
}

"""These fields can be used to create a new product that this price will belong to."""
input InlineProductParamsInput {
  active: Boolean
  id: String
  metadata: JSON
  name: String!
  statementDescriptor: String
  taxCode: String
  unitLabel: String
}

"""The recurring components of a price such as `interval` and `usage_type`."""
input Recurring2Input {
  aggregateUsage: AggregateUsage4
  interval: Interval5!
  intervalCount: Int
  usageType: UsageType2
}

enum AggregateUsage4 {
  LAST_DURING_PERIOD
  LAST_EVER
  MAX
  SUM
}

enum TaxBehavior3 {
  EXCLUSIVE
  INCLUSIVE
  UNSPECIFIED
}

"""Apply a transformation to the reported usage or set quantity before computing the billed price. Cannot be combined with `tiers`."""
input TransformQuantity2Input {
  divideBy: Int!
  round: Round2!
}

input V1Price2Input {
  """Whether the price can be used for new purchases. Defaults to `true`."""
  active: Boolean
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """A lookup key used to retrieve prices dynamically from a static string."""
  lookupKey: String
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
  """A brief description of the price, hidden from customers."""
  nickname: String
  """Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`. Once specified as either `inclusive` or `exclusive`, it cannot be changed."""
  taxBehavior: TaxBehavior3
  """If set to true, will atomically remove the lookup key from the existing price, and assign it to this price."""
  transferLookupKey: Boolean
}

input V1Products3Input {
  """Whether the product is currently available for purchase. Defaults to `true`."""
  active: Boolean
  """The product's description, meant to be displayable to the customer. Use this field to optionally store a long form explanation of the product being sold for your own rendering purposes."""
  description: String
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """An identifier will be randomly generated by Stripe. You can optionally override this ID, but the ID must be unique across all products in your Stripe account."""
  id: String
  """A list of up to 8 URLs of images for this product, meant to be displayable to the customer."""
  images: [String]
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
  """The product's name, meant to be displayable to the customer. Whenever this product is sold via a subscription, name will show up on associated invoice line item descriptions."""
  name: String!
  """The dimensions of this product for shipping purposes."""
  packageDimensions: PackageDimensionsSpecsInput
  """Whether this product is shipped (i.e., physical goods)."""
  shippable: Boolean
  """
  An arbitrary string to be displayed on your customer's credit card or bank statement. While most banks display this information consistently, some may display it incorrectly or not at all.
  
  This may be up to 22 characters. The statement description may not include `<`, `>`, `\`, `"`, `'` characters, and will appear on your customer's statement in capital letters. Non-ASCII characters are automatically stripped.
   It must contain at least one letter.
  """
  statementDescriptor: String
  """A [tax code](https://stripe.com/docs/tax/tax-codes) ID."""
  taxCode: String
  """A label that represents units of this product in Stripe and on customers’ receipts and invoices. When set, this will be included in associated invoice line item descriptions."""
  unitLabel: String
  """A URL of a publicly-accessible webpage for this product."""
  url: String
}

"""The dimensions of this product for shipping purposes."""
input PackageDimensionsSpecsInput {
  height: Float!
  length: Float!
  weight: Float!
  width: Float!
}

input V1Product2Input {
  """Whether the product is available for purchase."""
  active: Boolean
  """The product's description, meant to be displayable to the customer. Use this field to optionally store a long form explanation of the product being sold for your own rendering purposes."""
  description: String
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """A list of up to 8 URLs of images for this product, meant to be displayable to the customer."""
  images: JSON
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
  """The product's name, meant to be displayable to the customer. Whenever this product is sold via a subscription, name will show up on associated invoice line item descriptions."""
  name: String
  """The dimensions of this product for shipping purposes."""
  packageDimensions: JSON
  """Whether this product is shipped (i.e., physical goods)."""
  shippable: Boolean
  """
  An arbitrary string to be displayed on your customer's credit card or bank statement. While most banks display this information consistently, some may display it incorrectly or not at all.
  
  This may be up to 22 characters. The statement description may not include `<`, `>`, `\`, `"`, `'` characters, and will appear on your customer's statement in capital letters. Non-ASCII characters are automatically stripped.
   It must contain at least one letter. May only be set if `type=service`.
  """
  statementDescriptor: String
  """A [tax code](https://stripe.com/docs/tax/tax-codes) ID."""
  taxCode: JSON
  """A label that represents units of this product in Stripe and on customers’ receipts and invoices. When set, this will be included in associated invoice line item descriptions. May only be set if `type=service`."""
  unitLabel: String
  """A URL of a publicly-accessible webpage for this product."""
  url: String
}

input V1PromotionCodes3Input {
  """Whether the promotion code is currently active."""
  active: Boolean
  """The customer-facing code. Regardless of case, this code must be unique across all active promotion codes for a specific customer. If left blank, we will generate one automatically."""
  code: String
  """The coupon for this promotion code."""
  coupon: String!
  """The customer that this promotion code can be used by. If not set, the promotion code can be used by all customers."""
  customer: String
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """The timestamp at which this promotion code will expire. If the coupon has specified a `redeems_by`, then this value cannot be after the coupon's `redeems_by`."""
  expiresAt: Int
  """A positive integer specifying the number of times the promotion code can be redeemed. If the coupon has specified a `max_redemptions`, then this value cannot be greater than the coupon's `max_redemptions`."""
  maxRedemptions: Int
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
  """Settings that restrict the redemption of the promotion code."""
  restrictions: RestrictionsInput
}

"""Settings that restrict the redemption of the promotion code."""
input RestrictionsInput {
  firstTimeTransaction: Boolean
  minimumAmount: Int
  minimumAmountCurrency: String
}

input V1PromotionCode2Input {
  """Whether the promotion code is currently active. A promotion code can only be reactivated when the coupon is still valid and the promotion code is otherwise redeemable."""
  active: Boolean
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
}

input V1Quotes3Input {
  """The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. There cannot be any line items with recurring prices when using this field."""
  applicationFeeAmount: JSON
  """A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account. There must be at least 1 line item with a recurring price to use this field."""
  applicationFeePercent: JSON
  """Settings for automatic tax lookup for this quote and resulting invoices and subscriptions."""
  automaticTax: AutomaticTax4Input
  """Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay invoices at the end of the subscription cycle or at invoice finalization using the default payment method attached to the subscription or customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions. Defaults to `charge_automatically`."""
  collectionMethod: CollectionMethod7
  """The customer for which this quote belongs to. A customer is required before finalizing the quote. Once specified, it cannot be changed."""
  customer: String
  """The tax rates that will apply to any line item that does not have `tax_rates` set."""
  defaultTaxRates: JSON
  """A description that will be displayed on the quote PDF. If no value is passed, the default description configured in your [quote template settings](https://dashboard.stripe.com/settings/billing/quote) will be used."""
  description: String
  """The discounts applied to the quote. You can only set up to one discount."""
  discounts: JSON
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """A future timestamp on which the quote will be canceled if in `open` or `draft` status. Measured in seconds since the Unix epoch. If no value is passed, the default expiration date configured in your [quote template settings](https://dashboard.stripe.com/settings/billing/quote) will be used."""
  expiresAt: Int
  """A footer that will be displayed on the quote PDF. If no value is passed, the default footer configured in your [quote template settings](https://dashboard.stripe.com/settings/billing/quote) will be used."""
  footer: String
  """Clone an existing quote. The new quote will be created in `status=draft`. When using this parameter, you cannot specify any other parameters except for `expires_at`."""
  fromQuote: FromQuoteParamsInput
  """A header that will be displayed on the quote PDF. If no value is passed, the default header configured in your [quote template settings](https://dashboard.stripe.com/settings/billing/quote) will be used."""
  header: String
  """All invoices will be billed using the specified settings."""
  invoiceSettings: QuoteParamInput
  """A list of line items the customer is being quoted for. Each line item includes information about the product, the quantity, and the resulting cost."""
  lineItems: [LineItems4ListItemInput]
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
  """The account on behalf of which to charge."""
  onBehalfOf: JSON
  """When creating a subscription or subscription schedule, the specified configuration data will be used. There must be at least one line item with a recurring price for a subscription or subscription schedule to be created. A subscription schedule is created if `subscription_data[effective_date]` is present and in the future, otherwise a subscription is created."""
  subscriptionData: SubscriptionDataCreateParamsInput
  """The data with which to automatically create a Transfer for each of the invoices."""
  transferData: JSON
}

"""Settings for automatic tax lookup for this quote and resulting invoices and subscriptions."""
input AutomaticTax4Input {
  enabled: Boolean!
}

enum CollectionMethod7 {
  CHARGE_AUTOMATICALLY
  SEND_INVOICE
}

"""Clone an existing quote. The new quote will be created in `status=draft`. When using this parameter, you cannot specify any other parameters except for `expires_at`."""
input FromQuoteParamsInput {
  isRevision: Boolean
  quote: String!
}

"""All invoices will be billed using the specified settings."""
input QuoteParamInput {
  daysUntilDue: Int
}

input LineItems4ListItemInput {
  price: String
  priceData: PriceData3Input
  quantity: Int
  taxRates: JSON
}

input PriceData3Input {
  currency: String!
  product: String!
  recurring: RecurringAdhocInput
  taxBehavior: TaxBehavior2
  unitAmount: Int
  unitAmountDecimal: String
}

"""When creating a subscription or subscription schedule, the specified configuration data will be used. There must be at least one line item with a recurring price for a subscription or subscription schedule to be created. A subscription schedule is created if `subscription_data[effective_date]` is present and in the future, otherwise a subscription is created."""
input SubscriptionDataCreateParamsInput {
  effectiveDate: JSON
  trialPeriodDays: JSON
}

input V1Quote2Input {
  """The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. There cannot be any line items with recurring prices when using this field."""
  applicationFeeAmount: JSON
  """A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account. There must be at least 1 line item with a recurring price to use this field."""
  applicationFeePercent: JSON
  """Settings for automatic tax lookup for this quote and resulting invoices and subscriptions."""
  automaticTax: AutomaticTax4Input
  """Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay invoices at the end of the subscription cycle or at invoice finalization using the default payment method attached to the subscription or customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions. Defaults to `charge_automatically`."""
  collectionMethod: CollectionMethod7
  """The customer for which this quote belongs to. A customer is required before finalizing the quote. Once specified, it cannot be changed."""
  customer: String
  """The tax rates that will apply to any line item that does not have `tax_rates` set."""
  defaultTaxRates: JSON
  """A description that will be displayed on the quote PDF."""
  description: String
  """The discounts applied to the quote. You can only set up to one discount."""
  discounts: JSON
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """A future timestamp on which the quote will be canceled if in `open` or `draft` status. Measured in seconds since the Unix epoch."""
  expiresAt: Int
  """A footer that will be displayed on the quote PDF."""
  footer: String
  """A header that will be displayed on the quote PDF."""
  header: String
  """All invoices will be billed using the specified settings."""
  invoiceSettings: QuoteParamInput
  """A list of line items the customer is being quoted for. Each line item includes information about the product, the quantity, and the resulting cost."""
  lineItems: [LineItems5ListItemInput]
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
  """The account on behalf of which to charge."""
  onBehalfOf: JSON
  """When creating a subscription or subscription schedule, the specified configuration data will be used. There must be at least one line item with a recurring price for a subscription or subscription schedule to be created. A subscription schedule is created if `subscription_data[effective_date]` is present and in the future, otherwise a subscription is created."""
  subscriptionData: SubscriptionDataUpdateParamsInput
  """The data with which to automatically create a Transfer for each of the invoices."""
  transferData: JSON
}

input LineItems5ListItemInput {
  id: String
  price: String
  priceData: PriceData3Input
  quantity: Int
  taxRates: JSON
}

"""When creating a subscription or subscription schedule, the specified configuration data will be used. There must be at least one line item with a recurring price for a subscription or subscription schedule to be created. A subscription schedule is created if `subscription_data[effective_date]` is present and in the future, otherwise a subscription is created."""
input SubscriptionDataUpdateParamsInput {
  effectiveDate: JSON
  trialPeriodDays: JSON
}

input V1QuoteAcceptInput {
  """Specifies which fields in the response should be expanded."""
  expand: [String]
}

input V1QuoteCancelInput {
  """Specifies which fields in the response should be expanded."""
  expand: [String]
}

input V1QuoteFinalizeInput {
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """A future timestamp on which the quote will be canceled if in `open` or `draft` status. Measured in seconds since the Unix epoch."""
  expiresAt: Int
}

input V1RadarValueListItems3Input {
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """The value of the item (whose type must match the type of the parent value list)."""
  value: String!
  """The identifier of the value list which the created item will be added to."""
  valueList: String!
}

input V1RadarValueLists3Input {
  """The name of the value list for use in rules."""
  alias: String!
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """Type of the items in the value list. One of `card_fingerprint`, `card_bin`, `email`, `ip_address`, `country`, `string`, or `case_sensitive_string`. Use `string` if the item type is unknown or mixed."""
  itemType: ItemType2
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
  """The human-readable name of the value list."""
  name: String!
}

enum ItemType2 {
  CARD_BIN
  CARD_FINGERPRINT
  CASE_SENSITIVE_STRING
  COUNTRY
  EMAIL
  IP_ADDRESS
  STRING
}

input V1RadarValueList2Input {
  """The name of the value list for use in rules."""
  alias: String
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
  """The human-readable name of the value list."""
  name: String
}

input V1Recipients3Input {
  """A bank account to attach to the recipient. You can provide either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/stripe-js), or a dictionary containing a user's bank account details, with the options described below."""
  bankAccount: String
  """A U.S. Visa or MasterCard debit card (_not_ prepaid) to attach to the recipient. If the debit card is not valid, recipient creation will fail. You can provide either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/stripe-js), or a dictionary containing a user's debit card details, with the options described below. Although not all information is required, the extra info helps prevent fraud."""
  card: String
  """An arbitrary string which you can attach to a `Recipient` object. It is displayed alongside the recipient in the web interface."""
  description: String
  """The recipient's email address. It is displayed alongside the recipient in the web interface, and can be useful for searching and tracking."""
  email: String
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
  """The recipient's full, legal name. For type `individual`, should be in the format `First Last`, `First Middle Last`, or `First M Last` (no prefixes or suffixes). For `corporation`, the full, incorporated name."""
  name: String!
  """The recipient's tax ID, as a string. For type `individual`, the full SSN; for type `corporation`, the full EIN."""
  taxId: String
  """Type of the recipient: either `individual` or `corporation`."""
  type: String!
}

input V1Recipient3Input {
  """A bank account to attach to the recipient. You can provide either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/stripe-js), or a dictionary containing a user's bank account details, with the options described below."""
  bankAccount: String
  """A U.S. Visa or MasterCard debit card (not prepaid) to attach to the recipient. You can provide either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/stripe-js), or a dictionary containing a user's debit card details, with the options described below. Passing `card` will create a new card, make it the new recipient default card, and delete the old recipient default (if one exists). If you want to add additional debit cards instead of replacing the existing default, use the [card creation API](https://stripe.com/docs/api#create_card). Whenever you attach a card to a recipient, Stripe will automatically validate the debit card."""
  card: String
  """ID of the card to set as the recipient's new default for payouts."""
  defaultCard: String
  """An arbitrary string which you can attach to a `Recipient` object. It is displayed alongside the recipient in the web interface."""
  description: String
  """The recipient's email address. It is displayed alongside the recipient in the web interface, and can be useful for searching and tracking."""
  email: String
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
  """The recipient's full, legal name. For type `individual`, should be in the format `First Last`, `First Middle Last`, or `First M Last` (no prefixes or suffixes). For `corporation`, the full, incorporated name."""
  name: String
  """The recipient's tax ID, as a string. For type `individual`, the full SSN; for type `corporation`, the full EIN."""
  taxId: String
}

input V1Refunds3Input {
  amount: Int
  charge: String
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
  paymentIntent: String
  reason: Reason6
  refundApplicationFee: Boolean
  reverseTransfer: Boolean
}

input V1Refund2Input {
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
}

input V1ReportingReportRuns3Input {
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """Parameters specifying how the report should be run. Different Report Types have different required and optional parameters, listed in the [API Access to Reports](https://stripe.com/docs/reporting/statements/api) documentation."""
  parameters: ParametersInput
  """The ID of the [report type](https://stripe.com/docs/reporting/statements/api#report-types) to run, such as `"balance.summary.1"`."""
  reportType: String!
}

"""Parameters specifying how the report should be run. Different Report Types have different required and optional parameters, listed in the [API Access to Reports](https://stripe.com/docs/reporting/statements/api) documentation."""
input ParametersInput {
  columns: [String]
  connectedAccount: String
  currency: String
  intervalEnd: Int
  intervalStart: Int
  payout: String
  reportingCategory: ReportingCategory3
  timezone: Timezone3
}

enum ReportingCategory3 {
  ADVANCE
  ADVANCE_FUNDING
  ANTICIPATION_REPAYMENT
  CHARGE
  CHARGE_FAILURE
  CONNECT_COLLECTION_TRANSFER
  CONNECT_RESERVED_FUNDS
  CONTRIBUTION
  DISPUTE
  DISPUTE_REVERSAL
  FEE
  FINANCING_PAYDOWN
  FINANCING_PAYDOWN_REVERSAL
  FINANCING_PAYOUT
  FINANCING_PAYOUT_REVERSAL
  ISSUING_AUTHORIZATION_HOLD
  ISSUING_AUTHORIZATION_RELEASE
  ISSUING_DISPUTE
  ISSUING_TRANSACTION
  NETWORK_COST
  OTHER_ADJUSTMENT
  PARTIAL_CAPTURE_REVERSAL
  PAYOUT
  PAYOUT_REVERSAL
  PLATFORM_EARNING
  PLATFORM_EARNING_REFUND
  REFUND
  REFUND_FAILURE
  RISK_RESERVED_FUNDS
  TAX
  TOPUP
  TOPUP_REVERSAL
  TRANSFER
  TRANSFER_REVERSAL
}

enum Timezone3 {
  AFRICA_ABIDJAN
  AFRICA_ACCRA
  AFRICA_ADDIS_ABABA
  AFRICA_ALGIERS
  AFRICA_ASMARA
  AFRICA_ASMERA
  AFRICA_BAMAKO
  AFRICA_BANGUI
  AFRICA_BANJUL
  AFRICA_BISSAU
  AFRICA_BLANTYRE
  AFRICA_BRAZZAVILLE
  AFRICA_BUJUMBURA
  AFRICA_CAIRO
  AFRICA_CASABLANCA
  AFRICA_CEUTA
  AFRICA_CONAKRY
  AFRICA_DAKAR
  AFRICA_DAR_ES_SALAAM
  AFRICA_DJIBOUTI
  AFRICA_DOUALA
  AFRICA_EL_AAIUN
  AFRICA_FREETOWN
  AFRICA_GABORONE
  AFRICA_HARARE
  AFRICA_JOHANNESBURG
  AFRICA_JUBA
  AFRICA_KAMPALA
  AFRICA_KHARTOUM
  AFRICA_KIGALI
  AFRICA_KINSHASA
  AFRICA_LAGOS
  AFRICA_LIBREVILLE
  AFRICA_LOME
  AFRICA_LUANDA
  AFRICA_LUBUMBASHI
  AFRICA_LUSAKA
  AFRICA_MALABO
  AFRICA_MAPUTO
  AFRICA_MASERU
  AFRICA_MBABANE
  AFRICA_MOGADISHU
  AFRICA_MONROVIA
  AFRICA_NAIROBI
  AFRICA_NDJAMENA
  AFRICA_NIAMEY
  AFRICA_NOUAKCHOTT
  AFRICA_OUAGADOUGOU
  AFRICA_PORTO_NOVO
  AFRICA_SAO_TOME
  AFRICA_TIMBUKTU
  AFRICA_TRIPOLI
  AFRICA_TUNIS
  AFRICA_WINDHOEK
  AMERICA_ADAK
  AMERICA_ANCHORAGE
  AMERICA_ANGUILLA
  AMERICA_ANTIGUA
  AMERICA_ARAGUAINA
  AMERICA_ARGENTINA_BUENOS_AIRES
  AMERICA_ARGENTINA_CATAMARCA
  AMERICA_ARGENTINA_COMODRIVADAVIA
  AMERICA_ARGENTINA_CORDOBA
  AMERICA_ARGENTINA_JUJUY
  AMERICA_ARGENTINA_LA_RIOJA
  AMERICA_ARGENTINA_MENDOZA
  AMERICA_ARGENTINA_RIO_GALLEGOS
  AMERICA_ARGENTINA_SALTA
  AMERICA_ARGENTINA_SAN_JUAN
  AMERICA_ARGENTINA_SAN_LUIS
  AMERICA_ARGENTINA_TUCUMAN
  AMERICA_ARGENTINA_USHUAIA
  AMERICA_ARUBA
  AMERICA_ASUNCION
  AMERICA_ATIKOKAN
  AMERICA_ATKA
  AMERICA_BAHIA
  AMERICA_BAHIA_BANDERAS
  AMERICA_BARBADOS
  AMERICA_BELEM
  AMERICA_BELIZE
  AMERICA_BLANC_SABLON
  AMERICA_BOA_VISTA
  AMERICA_BOGOTA
  AMERICA_BOISE
  AMERICA_BUENOS_AIRES
  AMERICA_CAMBRIDGE_BAY
  AMERICA_CAMPO_GRANDE
  AMERICA_CANCUN
  AMERICA_CARACAS
  AMERICA_CATAMARCA
  AMERICA_CAYENNE
  AMERICA_CAYMAN
  AMERICA_CHICAGO
  AMERICA_CHIHUAHUA
  AMERICA_CORAL_HARBOUR
  AMERICA_CORDOBA
  AMERICA_COSTA_RICA
  AMERICA_CRESTON
  AMERICA_CUIABA
  AMERICA_CURACAO
  AMERICA_DANMARKSHAVN
  AMERICA_DAWSON
  AMERICA_DAWSON_CREEK
  AMERICA_DENVER
  AMERICA_DETROIT
  AMERICA_DOMINICA
  AMERICA_EDMONTON
  AMERICA_EIRUNEPE
  AMERICA_EL_SALVADOR
  AMERICA_ENSENADA
  AMERICA_FORT_NELSON
  AMERICA_FORT_WAYNE
  AMERICA_FORTALEZA
  AMERICA_GLACE_BAY
  AMERICA_GODTHAB
  AMERICA_GOOSE_BAY
  AMERICA_GRAND_TURK
  AMERICA_GRENADA
  AMERICA_GUADELOUPE
  AMERICA_GUATEMALA
  AMERICA_GUAYAQUIL
  AMERICA_GUYANA
  AMERICA_HALIFAX
  AMERICA_HAVANA
  AMERICA_HERMOSILLO
  AMERICA_INDIANA_INDIANAPOLIS
  AMERICA_INDIANA_KNOX
  AMERICA_INDIANA_MARENGO
  AMERICA_INDIANA_PETERSBURG
  AMERICA_INDIANA_TELL_CITY
  AMERICA_INDIANA_VEVAY
  AMERICA_INDIANA_VINCENNES
  AMERICA_INDIANA_WINAMAC
  AMERICA_INDIANAPOLIS
  AMERICA_INUVIK
  AMERICA_IQALUIT
  AMERICA_JAMAICA
  AMERICA_JUJUY
  AMERICA_JUNEAU
  AMERICA_KENTUCKY_LOUISVILLE
  AMERICA_KENTUCKY_MONTICELLO
  AMERICA_KNOX_IN
  AMERICA_KRALENDIJK
  AMERICA_LA_PAZ
  AMERICA_LIMA
  AMERICA_LOS_ANGELES
  AMERICA_LOUISVILLE
  AMERICA_LOWER_PRINCES
  AMERICA_MACEIO
  AMERICA_MANAGUA
  AMERICA_MANAUS
  AMERICA_MARIGOT
  AMERICA_MARTINIQUE
  AMERICA_MATAMOROS
  AMERICA_MAZATLAN
  AMERICA_MENDOZA
  AMERICA_MENOMINEE
  AMERICA_MERIDA
  AMERICA_METLAKATLA
  AMERICA_MEXICO_CITY
  AMERICA_MIQUELON
  AMERICA_MONCTON
  AMERICA_MONTERREY
  AMERICA_MONTEVIDEO
  AMERICA_MONTREAL
  AMERICA_MONTSERRAT
  AMERICA_NASSAU
  AMERICA_NEW_YORK
  AMERICA_NIPIGON
  AMERICA_NOME
  AMERICA_NORONHA
  AMERICA_NORTH_DAKOTA_BEULAH
  AMERICA_NORTH_DAKOTA_CENTER
  AMERICA_NORTH_DAKOTA_NEW_SALEM
  AMERICA_OJINAGA
  AMERICA_PANAMA
  AMERICA_PANGNIRTUNG
  AMERICA_PARAMARIBO
  AMERICA_PHOENIX
  AMERICA_PORT_AU_PRINCE
  AMERICA_PORT_OF_SPAIN
  AMERICA_PORTO_ACRE
  AMERICA_PORTO_VELHO
  AMERICA_PUERTO_RICO
  AMERICA_PUNTA_ARENAS
  AMERICA_RAINY_RIVER
  AMERICA_RANKIN_INLET
  AMERICA_RECIFE
  AMERICA_REGINA
  AMERICA_RESOLUTE
  AMERICA_RIO_BRANCO
  AMERICA_ROSARIO
  AMERICA_SANTA_ISABEL
  AMERICA_SANTAREM
  AMERICA_SANTIAGO
  AMERICA_SANTO_DOMINGO
  AMERICA_SAO_PAULO
  AMERICA_SCORESBYSUND
  AMERICA_SHIPROCK
  AMERICA_SITKA
  AMERICA_ST_BARTHELEMY
  AMERICA_ST_JOHNS
  AMERICA_ST_KITTS
  AMERICA_ST_LUCIA
  AMERICA_ST_THOMAS
  AMERICA_ST_VINCENT
  AMERICA_SWIFT_CURRENT
  AMERICA_TEGUCIGALPA
  AMERICA_THULE
  AMERICA_THUNDER_BAY
  AMERICA_TIJUANA
  AMERICA_TORONTO
  AMERICA_TORTOLA
  AMERICA_VANCOUVER
  AMERICA_VIRGIN
  AMERICA_WHITEHORSE
  AMERICA_WINNIPEG
  AMERICA_YAKUTAT
  AMERICA_YELLOWKNIFE
  ANTARCTICA_CASEY
  ANTARCTICA_DAVIS
  ANTARCTICA_DUMONTDURVILLE
  ANTARCTICA_MACQUARIE
  ANTARCTICA_MAWSON
  ANTARCTICA_MCMURDO
  ANTARCTICA_PALMER
  ANTARCTICA_ROTHERA
  ANTARCTICA_SOUTH_POLE
  ANTARCTICA_SYOWA
  ANTARCTICA_TROLL
  ANTARCTICA_VOSTOK
  ARCTIC_LONGYEARBYEN
  ASIA_ADEN
  ASIA_ALMATY
  ASIA_AMMAN
  ASIA_ANADYR
  ASIA_AQTAU
  ASIA_AQTOBE
  ASIA_ASHGABAT
  ASIA_ASHKHABAD
  ASIA_ATYRAU
  ASIA_BAGHDAD
  ASIA_BAHRAIN
  ASIA_BAKU
  ASIA_BANGKOK
  ASIA_BARNAUL
  ASIA_BEIRUT
  ASIA_BISHKEK
  ASIA_BRUNEI
  ASIA_CALCUTTA
  ASIA_CHITA
  ASIA_CHOIBALSAN
  ASIA_CHONGQING
  ASIA_CHUNGKING
  ASIA_COLOMBO
  ASIA_DACCA
  ASIA_DAMASCUS
  ASIA_DHAKA
  ASIA_DILI
  ASIA_DUBAI
  ASIA_DUSHANBE
  ASIA_FAMAGUSTA
  ASIA_GAZA
  ASIA_HARBIN
  ASIA_HEBRON
  ASIA_HO_CHI_MINH
  ASIA_HONG_KONG
  ASIA_HOVD
  ASIA_IRKUTSK
  ASIA_ISTANBUL
  ASIA_JAKARTA
  ASIA_JAYAPURA
  ASIA_JERUSALEM
  ASIA_KABUL
  ASIA_KAMCHATKA
  ASIA_KARACHI
  ASIA_KASHGAR
  ASIA_KATHMANDU
  ASIA_KATMANDU
  ASIA_KHANDYGA
  ASIA_KOLKATA
  ASIA_KRASNOYARSK
  ASIA_KUALA_LUMPUR
  ASIA_KUCHING
  ASIA_KUWAIT
  ASIA_MACAO
  ASIA_MACAU
  ASIA_MAGADAN
  ASIA_MAKASSAR
  ASIA_MANILA
  ASIA_MUSCAT
  ASIA_NICOSIA
  ASIA_NOVOKUZNETSK
  ASIA_NOVOSIBIRSK
  ASIA_OMSK
  ASIA_ORAL
  ASIA_PHNOM_PENH
  ASIA_PONTIANAK
  ASIA_PYONGYANG
  ASIA_QATAR
  ASIA_QOSTANAY
  ASIA_QYZYLORDA
  ASIA_RANGOON
  ASIA_RIYADH
  ASIA_SAIGON
  ASIA_SAKHALIN
  ASIA_SAMARKAND
  ASIA_SEOUL
  ASIA_SHANGHAI
  ASIA_SINGAPORE
  ASIA_SREDNEKOLYMSK
  ASIA_TAIPEI
  ASIA_TASHKENT
  ASIA_TBILISI
  ASIA_TEHRAN
  ASIA_TEL_AVIV
  ASIA_THIMBU
  ASIA_THIMPHU
  ASIA_TOKYO
  ASIA_TOMSK
  ASIA_UJUNG_PANDANG
  ASIA_ULAANBAATAR
  ASIA_ULAN_BATOR
  ASIA_URUMQI
  ASIA_UST_NERA
  ASIA_VIENTIANE
  ASIA_VLADIVOSTOK
  ASIA_YAKUTSK
  ASIA_YANGON
  ASIA_YEKATERINBURG
  ASIA_YEREVAN
  ATLANTIC_AZORES
  ATLANTIC_BERMUDA
  ATLANTIC_CANARY
  ATLANTIC_CAPE_VERDE
  ATLANTIC_FAEROE
  ATLANTIC_FAROE
  ATLANTIC_JAN_MAYEN
  ATLANTIC_MADEIRA
  ATLANTIC_REYKJAVIK
  ATLANTIC_SOUTH_GEORGIA
  ATLANTIC_ST_HELENA
  ATLANTIC_STANLEY
  AUSTRALIA_ACT
  AUSTRALIA_ADELAIDE
  AUSTRALIA_BRISBANE
  AUSTRALIA_BROKEN_HILL
  AUSTRALIA_CANBERRA
  AUSTRALIA_CURRIE
  AUSTRALIA_DARWIN
  AUSTRALIA_EUCLA
  AUSTRALIA_HOBART
  AUSTRALIA_LHI
  AUSTRALIA_LINDEMAN
  AUSTRALIA_LORD_HOWE
  AUSTRALIA_MELBOURNE
  AUSTRALIA_NSW
  AUSTRALIA_NORTH
  AUSTRALIA_PERTH
  AUSTRALIA_QUEENSLAND
  AUSTRALIA_SOUTH
  AUSTRALIA_SYDNEY
  AUSTRALIA_TASMANIA
  AUSTRALIA_VICTORIA
  AUSTRALIA_WEST
  AUSTRALIA_YANCOWINNA
  BRAZIL_ACRE
  BRAZIL_DENORONHA
  BRAZIL_EAST
  BRAZIL_WEST
  CET
  CST6CDT
  CANADA_ATLANTIC
  CANADA_CENTRAL
  CANADA_EASTERN
  CANADA_MOUNTAIN
  CANADA_NEWFOUNDLAND
  CANADA_PACIFIC
  CANADA_SASKATCHEWAN
  CANADA_YUKON
  CHILE_CONTINENTAL
  CHILE_EASTERISLAND
  CUBA
  EET
  EST
  EST5EDT
  EGYPT
  EIRE
  ETC_GMT
  ETC_GMT_0
  ETC_GMT_1
  ETC_GMT_10
  ETC_GMT_11
  ETC_GMT_12
  ETC_GMT_2
  ETC_GMT_3
  ETC_GMT_4
  ETC_GMT_5
  ETC_GMT_6
  ETC_GMT_7
  ETC_GMT_8
  ETC_GMT_9
  ETC_GMT_13
  ETC_GMT_14
  ETC_GMT0
  ETC_GREENWICH
  ETC_UCT
  ETC_UTC
  ETC_UNIVERSAL
  ETC_ZULU
  EUROPE_AMSTERDAM
  EUROPE_ANDORRA
  EUROPE_ASTRAKHAN
  EUROPE_ATHENS
  EUROPE_BELFAST
  EUROPE_BELGRADE
  EUROPE_BERLIN
  EUROPE_BRATISLAVA
  EUROPE_BRUSSELS
  EUROPE_BUCHAREST
  EUROPE_BUDAPEST
  EUROPE_BUSINGEN
  EUROPE_CHISINAU
  EUROPE_COPENHAGEN
  EUROPE_DUBLIN
  EUROPE_GIBRALTAR
  EUROPE_GUERNSEY
  EUROPE_HELSINKI
  EUROPE_ISLE_OF_MAN
  EUROPE_ISTANBUL
  EUROPE_JERSEY
  EUROPE_KALININGRAD
  EUROPE_KIEV
  EUROPE_KIROV
  EUROPE_LISBON
  EUROPE_LJUBLJANA
  EUROPE_LONDON
  EUROPE_LUXEMBOURG
  EUROPE_MADRID
  EUROPE_MALTA
  EUROPE_MARIEHAMN
  EUROPE_MINSK
  EUROPE_MONACO
  EUROPE_MOSCOW
  EUROPE_NICOSIA
  EUROPE_OSLO
  EUROPE_PARIS
  EUROPE_PODGORICA
  EUROPE_PRAGUE
  EUROPE_RIGA
  EUROPE_ROME
  EUROPE_SAMARA
  EUROPE_SAN_MARINO
  EUROPE_SARAJEVO
  EUROPE_SARATOV
  EUROPE_SIMFEROPOL
  EUROPE_SKOPJE
  EUROPE_SOFIA
  EUROPE_STOCKHOLM
  EUROPE_TALLINN
  EUROPE_TIRANE
  EUROPE_TIRASPOL
  EUROPE_ULYANOVSK
  EUROPE_UZHGOROD
  EUROPE_VADUZ
  EUROPE_VATICAN
  EUROPE_VIENNA
  EUROPE_VILNIUS
  EUROPE_VOLGOGRAD
  EUROPE_WARSAW
  EUROPE_ZAGREB
  EUROPE_ZAPOROZHYE
  EUROPE_ZURICH
  FACTORY
  GB
  GB_EIRE
  GMT
  GMT_0
  GMT0
  GREENWICH
  HST
  HONGKONG
  ICELAND
  INDIAN_ANTANANARIVO
  INDIAN_CHAGOS
  INDIAN_CHRISTMAS
  INDIAN_COCOS
  INDIAN_COMORO
  INDIAN_KERGUELEN
  INDIAN_MAHE
  INDIAN_MALDIVES
  INDIAN_MAURITIUS
  INDIAN_MAYOTTE
  INDIAN_REUNION
  IRAN
  ISRAEL
  JAMAICA
  JAPAN
  KWAJALEIN
  LIBYA
  MET
  MST
  MST7MDT
  MEXICO_BAJANORTE
  MEXICO_BAJASUR
  MEXICO_GENERAL
  NZ
  NZ_CHAT
  NAVAJO
  PRC
  PST8PDT
  PACIFIC_APIA
  PACIFIC_AUCKLAND
  PACIFIC_BOUGAINVILLE
  PACIFIC_CHATHAM
  PACIFIC_CHUUK
  PACIFIC_EASTER
  PACIFIC_EFATE
  PACIFIC_ENDERBURY
  PACIFIC_FAKAOFO
  PACIFIC_FIJI
  PACIFIC_FUNAFUTI
  PACIFIC_GALAPAGOS
  PACIFIC_GAMBIER
  PACIFIC_GUADALCANAL
  PACIFIC_GUAM
  PACIFIC_HONOLULU
  PACIFIC_JOHNSTON
  PACIFIC_KIRITIMATI
  PACIFIC_KOSRAE
  PACIFIC_KWAJALEIN
  PACIFIC_MAJURO
  PACIFIC_MARQUESAS
  PACIFIC_MIDWAY
  PACIFIC_NAURU
  PACIFIC_NIUE
  PACIFIC_NORFOLK
  PACIFIC_NOUMEA
  PACIFIC_PAGO_PAGO
  PACIFIC_PALAU
  PACIFIC_PITCAIRN
  PACIFIC_POHNPEI
  PACIFIC_PONAPE
  PACIFIC_PORT_MORESBY
  PACIFIC_RAROTONGA
  PACIFIC_SAIPAN
  PACIFIC_SAMOA
  PACIFIC_TAHITI
  PACIFIC_TARAWA
  PACIFIC_TONGATAPU
  PACIFIC_TRUK
  PACIFIC_WAKE
  PACIFIC_WALLIS
  PACIFIC_YAP
  POLAND
  PORTUGAL
  ROC
  ROK
  SINGAPORE
  TURKEY
  UCT
  US_ALASKA
  US_ALEUTIAN
  US_ARIZONA
  US_CENTRAL
  US_EAST_INDIANA
  US_EASTERN
  US_HAWAII
  US_INDIANA_STARKE
  US_MICHIGAN
  US_MOUNTAIN
  US_PACIFIC
  US_PACIFIC_NEW
  US_SAMOA
  UTC
  UNIVERSAL
  W_SU
  WET
  ZULU
}

input V1ReviewApproveInput {
  """Specifies which fields in the response should be expanded."""
  expand: [String]
}

input V1SetupIntents2Input {
  """Set to `true` to attempt to confirm this SetupIntent immediately. This parameter defaults to `false`. If the payment method attached is a card, a return_url may be provided in case additional authentication is required."""
  confirm: Boolean
  """
  ID of the Customer this SetupIntent belongs to, if one exists.
  
  If present, the SetupIntent's payment method will be attached to the Customer on successful setup. Payment methods attached to other Customers cannot be used with this SetupIntent.
  """
  customer: String
  """An arbitrary string attached to the object. Often useful for displaying to users."""
  description: String
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """This hash contains details about the Mandate to create. This parameter can only be used with [`confirm=true`](https://stripe.com/docs/api/setup_intents/create#create_setup_intent-confirm)."""
  mandateData: SecretKeyParamInput
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
  """The Stripe account ID for which this SetupIntent is created."""
  onBehalfOf: String
  """ID of the payment method (a PaymentMethod, Card, or saved Source object) to attach to this SetupIntent."""
  paymentMethod: String
  """Payment-method-specific configuration for this SetupIntent."""
  paymentMethodOptions: PaymentMethodOptions8Input
  """The list of payment method types (e.g. card) that this SetupIntent is allowed to use. If this is not provided, defaults to ["card"]."""
  paymentMethodTypes: [String]
  """The URL to redirect your customer back to after they authenticate or cancel their payment on the payment method's app or site. If you'd prefer to redirect to a mobile application, you can alternatively supply an application URI scheme. This parameter can only be used with [`confirm=true`](https://stripe.com/docs/api/setup_intents/create#create_setup_intent-confirm)."""
  returnUrl: String
  """If this hash is populated, this SetupIntent will generate a single_use Mandate on success."""
  singleUse: SingleUseInput
  """Indicates how the payment method is intended to be used in the future. If not provided, this value defaults to `off_session`."""
  usage: Usage9
}

"""This hash contains details about the Mandate to create. This parameter can only be used with [`confirm=true`](https://stripe.com/docs/api/setup_intents/create#create_setup_intent-confirm)."""
input SecretKeyParamInput {
  customerAcceptance: CustomerAcceptanceParamInput!
}

"""Payment-method-specific configuration for this SetupIntent."""
input PaymentMethodOptions8Input {
  acssDebit: SetupIntentPaymentMethodOptionsParamInput
  card: SetupIntentParamInput
  sepaDebit: SepaDebit8Input
}

input SetupIntentPaymentMethodOptionsParamInput {
  currency: Currency24
  mandateOptions: SetupIntentPaymentMethodOptionsMandateOptionsParamInput
  verificationMethod: VerificationMethod2
}

input SetupIntentPaymentMethodOptionsMandateOptionsParamInput {
  customMandateUrl: JSON
  intervalDescription: String
  paymentSchedule: PaymentSchedule2
  transactionType: TransactionType2
}

input SetupIntentParamInput {
  requestThreeDSecure: RequestThreeDSecure3
}

enum RequestThreeDSecure3 {
  ANY
  AUTOMATIC
}

input SepaDebit8Input {
  mandateOptions: JSON
}

"""If this hash is populated, this SetupIntent will generate a single_use Mandate on success."""
input SingleUseInput {
  amount: Int!
  currency: String!
}

enum Usage9 {
  OFF_SESSION
  ON_SESSION
}

input V1SetupIntents3Input {
  """
  ID of the Customer this SetupIntent belongs to, if one exists.
  
  If present, the SetupIntent's payment method will be attached to the Customer on successful setup. Payment methods attached to other Customers cannot be used with this SetupIntent.
  """
  customer: String
  """An arbitrary string attached to the object. Often useful for displaying to users."""
  description: String
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
  """ID of the payment method (a PaymentMethod, Card, or saved Source object) to attach to this SetupIntent."""
  paymentMethod: String
  """Payment-method-specific configuration for this SetupIntent."""
  paymentMethodOptions: PaymentMethodOptions8Input
  """The list of payment method types (e.g. card) that this SetupIntent is allowed to set up. If this is not provided, defaults to ["card"]."""
  paymentMethodTypes: [String]
}

input V1SetupIntentsCancelInput {
  """Reason for canceling this SetupIntent. Possible values are `abandoned`, `requested_by_customer`, or `duplicate`"""
  cancellationReason: CancellationReason8
  """Specifies which fields in the response should be expanded."""
  expand: [String]
}

enum CancellationReason8 {
  ABANDONED
  DUPLICATE
  REQUESTED_BY_CUSTOMER
}

input V1SetupIntentsConfirmInput {
  """The client secret of the SetupIntent."""
  clientSecret: String
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """This hash contains details about the Mandate to create"""
  mandateData: MandateData2Input
  """ID of the payment method (a PaymentMethod, Card, or saved Source object) to attach to this SetupIntent."""
  paymentMethod: String
  """Payment-method-specific configuration for this SetupIntent."""
  paymentMethodOptions: PaymentMethodOptions8Input
  """
  The URL to redirect your customer back to after they authenticate on the payment method's app or site.
  If you'd prefer to redirect to a mobile application, you can alternatively supply an application URI scheme.
  This parameter is only used for cards and other redirect-based payment methods.
  """
  returnUrl: String
}

input V1Skus3Input {
  """Whether the SKU is available for purchase. Default to `true`."""
  active: Boolean
  """A dictionary of attributes and values for the attributes defined by the product. If, for example, a product's attributes are `["size", "gender"]`, a valid SKU has the following dictionary of attributes: `{"size": "Medium", "gender": "Unisex"}`."""
  attributes: JSON
  """Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."""
  currency: String!
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """The identifier for the SKU. Must be unique. If not provided, an identifier will be randomly generated."""
  id: String
  """The URL of an image for this SKU, meant to be displayable to the customer."""
  image: String
  """Description of the SKU's inventory."""
  inventory: InventoryInput!
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
  """The dimensions of this SKU for shipping purposes."""
  packageDimensions: PackageDimensions4Input
  """The cost of the item as a nonnegative integer in the smallest currency unit (that is, 100 cents to charge $1.00, or 100 to charge ¥100, Japanese Yen being a zero-decimal currency)."""
  price: Int!
  """The ID of the product this SKU is associated with. Must be a product with type `good`."""
  product: String!
}

"""Description of the SKU's inventory."""
input InventoryInput {
  quantity: Int
  type: Type58!
  value: Value10
}

enum Type58 {
  BUCKET
  FINITE
  INFINITE
}

enum Value10 {
  _
  IN_STOCK
  LIMITED
  OUT_OF_STOCK
}

"""The dimensions of this SKU for shipping purposes."""
input PackageDimensions4Input {
  height: Float!
  length: Float!
  weight: Float!
  width: Float!
}

input V1Skus5Input {
  """Whether this SKU is available for purchase."""
  active: Boolean
  """A dictionary of attributes and values for the attributes defined by the product. When specified, `attributes` will partially update the existing attributes dictionary on the product, with the postcondition that a value must be present for each attribute key on the product."""
  attributes: JSON
  """Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."""
  currency: String
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """The URL of an image for this SKU, meant to be displayable to the customer."""
  image: String
  """Description of the SKU's inventory."""
  inventory: InventoryUpdateSpecsInput
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
  """The dimensions of this SKU for shipping purposes."""
  packageDimensions: JSON
  """The cost of the item as a positive integer in the smallest currency unit (that is, 100 cents to charge $1.00, or 100 to charge ¥100, Japanese Yen being a zero-decimal currency)."""
  price: Int
  """The ID of the product that this SKU should belong to. The product must exist, have the same set of attribute names as the SKU's current product, and be of type `good`."""
  product: String
}

"""Description of the SKU's inventory."""
input InventoryUpdateSpecsInput {
  quantity: Int
  type: Type58
  value: Value10
}

input V1SourcesInput {
  """Amount associated with the source. This is the amount for which the source will be chargeable once ready. Required for `single_use` sources. Not supported for `receiver` type sources, where charge amount may not be specified until funds land."""
  amount: Int
  """Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) associated with the source. This is the currency for which the source will be chargeable once ready."""
  currency: String
  """The `Customer` to whom the original source is attached to. Must be set when the original source is not a `Source` (e.g., `Card`)."""
  customer: String
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """The authentication `flow` of the source to create. `flow` is one of `redirect`, `receiver`, `code_verification`, `none`. It is generally inferred unless a type supports multiple flows."""
  flow: Flow7
  """Information about a mandate possibility attached to a source object (generally for bank debits) as well as its acceptance status."""
  mandate: MandateParamsInput
  metadata: JSON
  """The source to share."""
  originalSource: String
  """Information about the owner of the payment instrument that may be used or required by particular source types."""
  owner: Owner5Input
  """Optional parameters for the receiver flow. Can be set only if the source is a receiver (`flow` is `receiver`)."""
  receiver: ReceiverParamsInput
  """Parameters required for the redirect flow. Required if the source is authenticated by a redirect (`flow` is `redirect`)."""
  redirect: RedirectParamsInput
  """Information about the items and shipping associated with the source. Required for transactional credit (for example Klarna) sources before you can charge it."""
  sourceOrder: ShallowOrderSpecsInput
  """An arbitrary string to be displayed on your customer's statement. As an example, if your website is `RunClub` and the item you're charging for is a race ticket, you may want to specify a `statement_descriptor` of `RunClub 5K race ticket.` While many payment types will display this information, some may not display it at all."""
  statementDescriptor: String
  """An optional token used to create the source. When passed, token properties will override source parameters."""
  token: String
  """The `type` of the source to create. Required unless `customer` and `original_source` are specified (see the [Cloning card Sources](https://stripe.com/docs/sources/connect#cloning-card-sources) guide)"""
  type: String
  usage: Usage10
}

enum Flow7 {
  CODE_VERIFICATION
  NONE
  RECEIVER
  REDIRECT
}

"""Information about a mandate possibility attached to a source object (generally for bank debits) as well as its acceptance status."""
input MandateParamsInput {
  acceptance: AcceptanceInput
  amount: JSON
  currency: String
  interval: Interval10
  notificationMethod: NotificationMethod
}

input AcceptanceInput {
  date: Int
  ip: String
  offline: MandateOfflineAcceptanceParamsInput
  online: MandateOnlineAcceptanceParamsInput
  status: Status45!
  type: Type47
  userAgent: String
}

input MandateOfflineAcceptanceParamsInput {
  contactEmail: String!
}

input MandateOnlineAcceptanceParamsInput {
  date: Int
  ip: String
  userAgent: String
}

enum Status45 {
  ACCEPTED
  PENDING
  REFUSED
  REVOKED
}

enum Interval10 {
  ONE_TIME
  SCHEDULED
  VARIABLE
}

enum NotificationMethod {
  DEPRECATED_NONE
  EMAIL
  MANUAL
  NONE
  STRIPE_EMAIL
}

"""Information about the owner of the payment instrument that may be used or required by particular source types."""
input Owner5Input {
  address: SourceAddressInput
  email: String
  name: String
  phone: String
}

"""Optional parameters for the receiver flow. Can be set only if the source is a receiver (`flow` is `receiver`)."""
input ReceiverParamsInput {
  refundAttributesMethod: RefundAttributesMethod2
}

enum RefundAttributesMethod2 {
  EMAIL
  MANUAL
  NONE
}

"""Parameters required for the redirect flow. Required if the source is authenticated by a redirect (`flow` is `redirect`)."""
input RedirectParamsInput {
  returnUrl: String!
}

"""Information about the items and shipping associated with the source. Required for transactional credit (for example Klarna) sources before you can charge it."""
input ShallowOrderSpecsInput {
  items: [Items9ListItemInput]
  shipping: OrderShippingInput
}

input Items9ListItemInput {
  amount: Int
  currency: String
  description: String
  parent: String
  quantity: Int
  type: Type46
}

input OrderShippingInput {
  address: Address6Input!
  carrier: String
  name: String
  phone: String
  trackingNumber: String
}

enum Usage10 {
  REUSABLE
  SINGLE_USE
}

input V1Source2Input {
  """Amount associated with the source."""
  amount: Int
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """Information about a mandate possibility attached to a source object (generally for bank debits) as well as its acceptance status."""
  mandate: MandateParamsInput
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
  """Information about the owner of the payment instrument that may be used or required by particular source types."""
  owner: Owner5Input
  """Information about the items and shipping associated with the source. Required for transactional credit (for example Klarna) sources before you can charge it."""
  sourceOrder: OrderParamsInput
}

"""Information about the items and shipping associated with the source. Required for transactional credit (for example Klarna) sources before you can charge it."""
input OrderParamsInput {
  items: [Items9ListItemInput]
  shipping: OrderShippingInput
}

input V1SourceVerifyInput {
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """The values needed to verify the source."""
  values: [String]!
}

input V1SubscriptionItems3Input {
  """Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period. When updating, pass an empty string to remove previously-defined thresholds."""
  billingThresholds: JSON
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
  """
  Use `allow_incomplete` to transition the subscription to `status=past_due` if a payment is required but cannot be paid. This allows you to manage scenarios where additional user actions are needed to pay a subscription's invoice. For example, SCA regulation may require 3DS authentication to complete payment. See the [SCA Migration Guide](https://stripe.com/docs/billing/migration/strong-customer-authentication) for Billing to learn more. This is the default behavior.
  
  Use `default_incomplete` to transition the subscription to `status=past_due` when payment is required and await explicit confirmation of the invoice's payment intent. This allows simpler management of scenarios where additional user actions are needed to pay a subscription’s invoice. Such as failed payments, [SCA regulation](https://stripe.com/docs/billing/migration/strong-customer-authentication), or collecting a mandate for a bank debit payment method.
  
  Use `pending_if_incomplete` to update the subscription using [pending updates](https://stripe.com/docs/billing/subscriptions/pending-updates). When you use `pending_if_incomplete` you can only pass the parameters [supported by pending updates](https://stripe.com/docs/billing/pending-updates-reference#supported-attributes).
  
  Use `error_if_incomplete` if you want Stripe to return an HTTP 402 status code if a subscription's invoice cannot be paid. For example, if a payment method requires 3DS authentication due to SCA regulation and further user action is needed, this parameter does not update the subscription and returns an error instead. This was the default behavior for API versions prior to 2019-03-14. See the [changelog](https://stripe.com/docs/upgrades#2019-03-14) to learn more.
  """
  paymentBehavior: PaymentBehavior2
  """The ID of the price object."""
  price: String
  """Data used to generate a new [Price](https://stripe.com/docs/api/prices) object inline."""
  priceData: PriceData4Input
  """
  Determines how to handle [prorations](https://stripe.com/docs/subscriptions/billing-cycle#prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item's `quantity` changes. Valid values are `create_prorations`, `none`, or `always_invoice`.
  
  Passing `create_prorations` will cause proration invoice items to be created when applicable. These proration items will only be invoiced immediately under [certain conditions](https://stripe.com/docs/subscriptions/upgrading-downgrading#immediate-payment). In order to always invoice immediately for prorations, pass `always_invoice`.
  
  Prorations can be disabled by passing `none`.
  """
  prorationBehavior: ProrationBehavior5
  """If set, the proration will be calculated as though the subscription was updated at the given time. This can be used to apply the same proration that was previewed with the [upcoming invoice](https://stripe.com/docs/api#retrieve_customer_invoice) endpoint."""
  prorationDate: Int
  """The quantity you'd like to apply to the subscription item you're creating."""
  quantity: Int
  """The identifier of the subscription to modify."""
  subscription: String!
  """A list of [Tax Rate](https://stripe.com/docs/api/tax_rates) ids. These Tax Rates will override the [`default_tax_rates`](https://stripe.com/docs/api/subscriptions/create#create_subscription-default_tax_rates) on the Subscription. When updating, pass an empty string to remove previously-defined tax rates."""
  taxRates: JSON
}

"""Data used to generate a new [Price](https://stripe.com/docs/api/prices) object inline."""
input PriceData4Input {
  currency: String!
  product: String!
  recurring: RecurringAdhocInput!
  taxBehavior: TaxBehavior2
  unitAmount: Int
  unitAmountDecimal: String
}

input V1SubscriptionItems5Input {
  """Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period. When updating, pass an empty string to remove previously-defined thresholds."""
  billingThresholds: JSON
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
  """Indicates if a customer is on or off-session while an invoice payment is attempted."""
  offSession: Boolean
  """
  Use `allow_incomplete` to transition the subscription to `status=past_due` if a payment is required but cannot be paid. This allows you to manage scenarios where additional user actions are needed to pay a subscription's invoice. For example, SCA regulation may require 3DS authentication to complete payment. See the [SCA Migration Guide](https://stripe.com/docs/billing/migration/strong-customer-authentication) for Billing to learn more. This is the default behavior.
  
  Use `default_incomplete` to transition the subscription to `status=past_due` when payment is required and await explicit confirmation of the invoice's payment intent. This allows simpler management of scenarios where additional user actions are needed to pay a subscription’s invoice. Such as failed payments, [SCA regulation](https://stripe.com/docs/billing/migration/strong-customer-authentication), or collecting a mandate for a bank debit payment method.
  
  Use `pending_if_incomplete` to update the subscription using [pending updates](https://stripe.com/docs/billing/subscriptions/pending-updates). When you use `pending_if_incomplete` you can only pass the parameters [supported by pending updates](https://stripe.com/docs/billing/pending-updates-reference#supported-attributes).
  
  Use `error_if_incomplete` if you want Stripe to return an HTTP 402 status code if a subscription's invoice cannot be paid. For example, if a payment method requires 3DS authentication due to SCA regulation and further user action is needed, this parameter does not update the subscription and returns an error instead. This was the default behavior for API versions prior to 2019-03-14. See the [changelog](https://stripe.com/docs/upgrades#2019-03-14) to learn more.
  """
  paymentBehavior: PaymentBehavior2
  """The ID of the price object. When changing a subscription item's price, `quantity` is set to 1 unless a `quantity` parameter is provided."""
  price: String
  """Data used to generate a new [Price](https://stripe.com/docs/api/prices) object inline."""
  priceData: PriceData4Input
  """
  Determines how to handle [prorations](https://stripe.com/docs/subscriptions/billing-cycle#prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item's `quantity` changes. Valid values are `create_prorations`, `none`, or `always_invoice`.
  
  Passing `create_prorations` will cause proration invoice items to be created when applicable. These proration items will only be invoiced immediately under [certain conditions](https://stripe.com/docs/subscriptions/upgrading-downgrading#immediate-payment). In order to always invoice immediately for prorations, pass `always_invoice`.
  
  Prorations can be disabled by passing `none`.
  """
  prorationBehavior: ProrationBehavior5
  """If set, the proration will be calculated as though the subscription was updated at the given time. This can be used to apply the same proration that was previewed with the [upcoming invoice](https://stripe.com/docs/api#retrieve_customer_invoice) endpoint."""
  prorationDate: Int
  """The quantity you'd like to apply to the subscription item you're creating."""
  quantity: Int
  """A list of [Tax Rate](https://stripe.com/docs/api/tax_rates) ids. These Tax Rates will override the [`default_tax_rates`](https://stripe.com/docs/api/subscriptions/create#create_subscription-default_tax_rates) on the Subscription. When updating, pass an empty string to remove previously-defined tax rates."""
  taxRates: JSON
}

"""
Usage records allow you to report customer usage and metrics to Stripe for
metered billing of subscription prices.

Related guide: [Metered Billing](https://stripe.com/docs/billing/subscriptions/metered-billing).
"""
type UsageRecord {
  """Unique identifier for the object."""
  id: String!
  """Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode."""
  livemode: Boolean!
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object80!
  """The usage quantity for the specified date."""
  quantity: Int!
  """The ID of the subscription item this usage record contains data for."""
  subscriptionItem: String!
  """The timestamp when this usage occurred."""
  timestamp: Int!
}

enum Object80 {
  USAGE_RECORD
}

input V1SubscriptionItemUsageRecordsInput {
  """Valid values are `increment` (default) or `set`. When using `increment` the specified `quantity` will be added to the usage at the specified timestamp. The `set` action will overwrite the usage quantity at that timestamp. If the subscription has [billing thresholds](https://stripe.com/docs/api/subscriptions/object#subscription_object-billing_thresholds), `increment` is the only allowed value."""
  action: Action
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """The usage quantity for the specified timestamp."""
  quantity: Int!
  """The timestamp for the usage event. This timestamp must be within the current billing period of the subscription of the provided `subscription_item`."""
  timestamp: Int!
}

enum Action {
  INCREMENT
  SET
}

input V1SubscriptionSchedules3Input {
  """The identifier of the customer to create the subscription schedule for."""
  customer: String
  """Object representing the subscription schedule's default settings."""
  defaultSettings: DefaultSettingsInput
  """Configures how the subscription schedule behaves when it ends. Possible values are `release` or `cancel` with the default being `release`. `release` will end the subscription schedule and keep the underlying subscription running.`cancel` will end the subscription schedule and cancel the underlying subscription."""
  endBehavior: EndBehavior2
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """Migrate an existing subscription to be managed by a subscription schedule. If this parameter is set, a subscription schedule will be created using the subscription's item(s), set to auto-renew using the subscription's interval. When using this parameter, other parameters (such as phase values) cannot be set. To create a subscription schedule with other modifications, we recommend making two separate API calls."""
  fromSubscription: String
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
  """List representing phases of the subscription schedule. Each phase can be customized to have different durations, plans, and coupons. If there are multiple phases, the `end_date` of one phase will always equal the `start_date` of the next phase."""
  phases: [Phases2ListItemInput]
  """When the subscription schedule starts. We recommend using `now` so that it starts the subscription immediately. You can also use a Unix timestamp to backdate the subscription so that it starts on a past date, or set a future date for the subscription to start on."""
  startDate: JSON
}

"""Object representing the subscription schedule's default settings."""
input DefaultSettingsInput {
  applicationFeePercent: Float
  automaticTax: AutomaticTax5Input
  billingCycleAnchor: BillingCycleAnchor7
  billingThresholds: JSON
  collectionMethod: CollectionMethod9
  defaultPaymentMethod: String
  invoiceSettings: SubscriptionSchedulesParamInput
  transferData: JSON
}

input AutomaticTax5Input {
  enabled: Boolean!
}

enum BillingCycleAnchor7 {
  AUTOMATIC
  PHASE_START
}

input SubscriptionSchedulesParamInput {
  daysUntilDue: Int
}

enum EndBehavior2 {
  CANCEL
  NONE
  RELEASE
  RENEW
}

input Phases2ListItemInput {
  addInvoiceItems: [AddInvoiceItems3ListItemInput]
  applicationFeePercent: Float
  automaticTax: AutomaticTax5Input
  billingCycleAnchor: BillingCycleAnchor7
  billingThresholds: JSON
  collectionMethod: CollectionMethod9
  coupon: String
  defaultPaymentMethod: String
  defaultTaxRates: JSON
  endDate: Int
  invoiceSettings: SubscriptionSchedulesParamInput
  items: [Items11ListItemInput]!
  iterations: Int
  prorationBehavior: ProrationBehavior3
  transferData: TransferData3Input
  trial: Boolean
  trialEnd: Int
}

input AddInvoiceItems3ListItemInput {
  price: String
  priceData: OneTimePriceDataInput
  quantity: Int
  taxRates: JSON
}

input Items11ListItemInput {
  billingThresholds: JSON
  price: String
  priceData: RecurringPriceDataInput
  quantity: Int
  taxRates: JSON
}

input V1SubscriptionSchedules4Input {
  """Object representing the subscription schedule's default settings."""
  defaultSettings: DefaultSettingsInput
  """Configures how the subscription schedule behaves when it ends. Possible values are `release` or `cancel` with the default being `release`. `release` will end the subscription schedule and keep the underlying subscription running.`cancel` will end the subscription schedule and cancel the underlying subscription."""
  endBehavior: EndBehavior2
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
  """List representing phases of the subscription schedule. Each phase can be customized to have different durations, plans, and coupons. If there are multiple phases, the `end_date` of one phase will always equal the `start_date` of the next phase. Note that past phases can be omitted."""
  phases: [Phases3ListItemInput]
  """If the update changes the current phase, indicates if the changes should be prorated. Possible values are `create_prorations` or `none`, and the default value is `create_prorations`."""
  prorationBehavior: ProrationBehavior7
}

input Phases3ListItemInput {
  addInvoiceItems: [AddInvoiceItems3ListItemInput]
  applicationFeePercent: Float
  automaticTax: AutomaticTax5Input
  billingCycleAnchor: BillingCycleAnchor7
  billingThresholds: JSON
  collectionMethod: CollectionMethod9
  coupon: String
  defaultPaymentMethod: String
  defaultTaxRates: JSON
  endDate: JSON
  invoiceSettings: SubscriptionSchedulesParamInput
  items: [Items11ListItemInput]!
  iterations: Int
  prorationBehavior: ProrationBehavior3
  startDate: JSON
  transferData: TransferData3Input
  trial: Boolean
  trialEnd: JSON
}

enum ProrationBehavior7 {
  ALWAYS_INVOICE
  CREATE_PRORATIONS
  NONE
}

input V1SubscriptionSchedulesCancelInput {
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """If the subscription schedule is `active`, indicates if a final invoice will be generated that contains any un-invoiced metered usage and new/pending proration invoice items. Defaults to `true`."""
  invoiceNow: Boolean
  """If the subscription schedule is `active`, indicates if the cancellation should be prorated. Defaults to `true`."""
  prorate: Boolean
}

input V1SubscriptionSchedulesReleaseInput {
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """Keep any cancellation on the subscription that the schedule has set"""
  preserveCancelDate: Boolean
}

input V1Subscriptions3Input {
  """A list of prices and quantities that will generate invoice items appended to the first invoice for this subscription. You may pass up to 20 items."""
  addInvoiceItems: [AddInvoiceItemsListItemInput]
  """A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account. The request must be made by a platform account on a connected account in order to set an application fee percentage. For more information, see the application fees [documentation](https://stripe.com/docs/connect/subscriptions#collecting-fees-on-subscriptions)."""
  applicationFeePercent: Float
  """Automatic tax settings for this subscription."""
  automaticTax: AutomaticTaxConfigInput
  """For new subscriptions, a past timestamp to backdate the subscription's start date to. If set, the first invoice will contain a proration for the timespan between the start date and the current time. Can be combined with trials and the billing cycle anchor."""
  backdateStartDate: Int
  """A future timestamp to anchor the subscription's [billing cycle](https://stripe.com/docs/subscriptions/billing-cycle). This is used to determine the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices."""
  billingCycleAnchor: Int
  """Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period. Pass an empty string to remove previously-defined thresholds."""
  billingThresholds: JSON
  """A timestamp at which the subscription should cancel. If set to a date before the current period ends, this will cause a proration if prorations have been enabled using `proration_behavior`. If set during a future period, this will always cause a proration for that period."""
  cancelAt: Int
  """Boolean indicating whether this subscription should cancel at the end of the current period."""
  cancelAtPeriodEnd: Boolean
  """Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions. Defaults to `charge_automatically`."""
  collectionMethod: CollectionMethod2
  """The ID of the coupon to apply to this subscription. A coupon applied to a subscription will only affect invoices created for that particular subscription."""
  coupon: String
  """The identifier of the customer to subscribe."""
  customer: String!
  """Number of days a customer has to pay invoices generated by this subscription. Valid only for subscriptions where `collection_method` is set to `send_invoice`."""
  daysUntilDue: Int
  """ID of the default payment method for the subscription. It must belong to the customer associated with the subscription. This takes precedence over `default_source`. If neither are set, invoices will use the customer's [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source)."""
  defaultPaymentMethod: String
  """ID of the default payment source for the subscription. It must belong to the customer associated with the subscription and be in a chargeable state. If `default_payment_method` is also set, `default_payment_method` will take precedence. If neither are set, invoices will use the customer's [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source)."""
  defaultSource: String
  """The tax rates that will apply to any subscription item that does not have `tax_rates` set. Invoices created will have their `default_tax_rates` populated from the subscription."""
  defaultTaxRates: JSON
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """A list of up to 20 subscription items, each with an attached price."""
  items: [Items3ListItemInput]
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
  """Indicates if a customer is on or off-session while an invoice payment is attempted."""
  offSession: Boolean
  """
  Use `allow_incomplete` to create subscriptions with `status=incomplete` if the first invoice cannot be paid. Creating subscriptions with this status allows you to manage scenarios where additional user actions are needed to pay a subscription's invoice. For example, SCA regulation may require 3DS authentication to complete payment. See the [SCA Migration Guide](https://stripe.com/docs/billing/migration/strong-customer-authentication) for Billing to learn more. This is the default behavior.
  
  Use `default_incomplete` to create Subscriptions with `status=incomplete` when the first invoice requires payment, otherwise start as active. Subscriptions transition to `status=active` when successfully confirming the payment intent on the first invoice. This allows simpler management of scenarios where additional user actions are needed to pay a subscription’s invoice. Such as failed payments, [SCA regulation](https://stripe.com/docs/billing/migration/strong-customer-authentication), or collecting a mandate for a bank debit payment method. If the payment intent is not confirmed within 23 hours subscriptions transition to `status=incomplete_expired`, which is a terminal state.
  
  Use `error_if_incomplete` if you want Stripe to return an HTTP 402 status code if a subscription's first invoice cannot be paid. For example, if a payment method requires 3DS authentication due to SCA regulation and further user action is needed, this parameter does not create a subscription and returns an error instead. This was the default behavior for API versions prior to 2019-03-14. See the [changelog](https://stripe.com/docs/upgrades#2019-03-14) to learn more.
  
  `pending_if_incomplete` is only used with updates and cannot be passed when creating a subscription.
  """
  paymentBehavior: PaymentBehavior
  """Payment settings to pass to invoices created by the subscription."""
  paymentSettings: PaymentSettings2Input
  """Specifies an interval for how often to bill for any pending invoice items. It is analogous to calling [Create an invoice](https://stripe.com/docs/api#create_invoice) for the given subscription at the specified interval."""
  pendingInvoiceItemInterval: JSON
  """The API ID of a promotion code to apply to this subscription. A promotion code applied to a subscription will only affect invoices created for that particular subscription."""
  promotionCode: String
  """
  Determines how to handle [prorations](https://stripe.com/docs/subscriptions/billing-cycle#prorations) resulting from the `billing_cycle_anchor`. Valid values are `create_prorations` or `none`.
  
  Passing `create_prorations` will cause proration invoice items to be created when applicable. Prorations can be disabled by passing `none`. If no value is passed, the default is `create_prorations`.
  """
  prorationBehavior: ProrationBehavior4
  """If specified, the funds from the subscription's invoices will be transferred to the destination and the ID of the resulting transfers will be found on the resulting charges."""
  transferData: TransferData5Input
  """Unix timestamp representing the end of the trial period the customer will get before being charged for the first time. This will always overwrite any trials that might apply via a subscribed plan. If set, trial_end will override the default trial period of the plan the customer is being subscribed to. The special value `now` can be provided to end the customer's trial immediately. Can be at most two years from `billing_cycle_anchor`."""
  trialEnd: JSON
  """Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `trial_end` is not allowed."""
  trialFromPlan: Boolean
  """Integer representing the number of trial period days before the customer is charged for the first time. This will always overwrite any trials that might apply via a subscribed plan."""
  trialPeriodDays: Int
}

input V1Subscription3Input {
  """A list of prices and quantities that will generate invoice items appended to the first invoice for this subscription. You may pass up to 20 items."""
  addInvoiceItems: [AddInvoiceItemsListItemInput]
  """A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account. The request must be made by a platform account on a connected account in order to set an application fee percentage. For more information, see the application fees [documentation](https://stripe.com/docs/connect/subscriptions#collecting-fees-on-subscriptions)."""
  applicationFeePercent: Float
  """Automatic tax settings for this subscription."""
  automaticTax: AutomaticTaxConfigInput
  """Either `now` or `unchanged`. Setting the value to `now` resets the subscription's billing cycle anchor to the current time. For more information, see the billing cycle [documentation](https://stripe.com/docs/billing/subscriptions/billing-cycle)."""
  billingCycleAnchor: BillingCycleAnchor4
  """Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period. Pass an empty string to remove previously-defined thresholds."""
  billingThresholds: JSON
  """A timestamp at which the subscription should cancel. If set to a date before the current period ends, this will cause a proration if prorations have been enabled using `proration_behavior`. If set during a future period, this will always cause a proration for that period."""
  cancelAt: JSON
  """Boolean indicating whether this subscription should cancel at the end of the current period."""
  cancelAtPeriodEnd: Boolean
  """Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions. Defaults to `charge_automatically`."""
  collectionMethod: CollectionMethod2
  """The ID of the coupon to apply to this subscription. A coupon applied to a subscription will only affect invoices created for that particular subscription."""
  coupon: String
  """Number of days a customer has to pay invoices generated by this subscription. Valid only for subscriptions where `collection_method` is set to `send_invoice`."""
  daysUntilDue: Int
  """ID of the default payment method for the subscription. It must belong to the customer associated with the subscription. This takes precedence over `default_source`. If neither are set, invoices will use the customer's [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source)."""
  defaultPaymentMethod: String
  """ID of the default payment source for the subscription. It must belong to the customer associated with the subscription and be in a chargeable state. If `default_payment_method` is also set, `default_payment_method` will take precedence. If neither are set, invoices will use the customer's [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source)."""
  defaultSource: String
  """The tax rates that will apply to any subscription item that does not have `tax_rates` set. Invoices created will have their `default_tax_rates` populated from the subscription. Pass an empty string to remove previously-defined tax rates."""
  defaultTaxRates: JSON
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """A list of up to 20 subscription items, each with an attached price."""
  items: [Items4ListItemInput]
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
  """Indicates if a customer is on or off-session while an invoice payment is attempted."""
  offSession: Boolean
  """If specified, payment collection for this subscription will be paused."""
  pauseCollection: JSON
  """
  Use `allow_incomplete` to transition the subscription to `status=past_due` if a payment is required but cannot be paid. This allows you to manage scenarios where additional user actions are needed to pay a subscription's invoice. For example, SCA regulation may require 3DS authentication to complete payment. See the [SCA Migration Guide](https://stripe.com/docs/billing/migration/strong-customer-authentication) for Billing to learn more. This is the default behavior.
  
  Use `default_incomplete` to transition the subscription to `status=past_due` when payment is required and await explicit confirmation of the invoice's payment intent. This allows simpler management of scenarios where additional user actions are needed to pay a subscription’s invoice. Such as failed payments, [SCA regulation](https://stripe.com/docs/billing/migration/strong-customer-authentication), or collecting a mandate for a bank debit payment method.
  
  Use `pending_if_incomplete` to update the subscription using [pending updates](https://stripe.com/docs/billing/subscriptions/pending-updates). When you use `pending_if_incomplete` you can only pass the parameters [supported by pending updates](https://stripe.com/docs/billing/pending-updates-reference#supported-attributes).
  
  Use `error_if_incomplete` if you want Stripe to return an HTTP 402 status code if a subscription's invoice cannot be paid. For example, if a payment method requires 3DS authentication due to SCA regulation and further user action is needed, this parameter does not update the subscription and returns an error instead. This was the default behavior for API versions prior to 2019-03-14. See the [changelog](https://stripe.com/docs/upgrades#2019-03-14) to learn more.
  """
  paymentBehavior: PaymentBehavior2
  """Payment settings to pass to invoices created by the subscription."""
  paymentSettings: PaymentSettings2Input
  """Specifies an interval for how often to bill for any pending invoice items. It is analogous to calling [Create an invoice](https://stripe.com/docs/api#create_invoice) for the given subscription at the specified interval."""
  pendingInvoiceItemInterval: JSON
  """The promotion code to apply to this subscription. A promotion code applied to a subscription will only affect invoices created for that particular subscription."""
  promotionCode: String
  """
  Determines how to handle [prorations](https://stripe.com/docs/subscriptions/billing-cycle#prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item's `quantity` changes. Valid values are `create_prorations`, `none`, or `always_invoice`.
  
  Passing `create_prorations` will cause proration invoice items to be created when applicable. These proration items will only be invoiced immediately under [certain conditions](https://stripe.com/docs/subscriptions/upgrading-downgrading#immediate-payment). In order to always invoice immediately for prorations, pass `always_invoice`.
  
  Prorations can be disabled by passing `none`.
  """
  prorationBehavior: ProrationBehavior5
  """If set, the proration will be calculated as though the subscription was updated at the given time. This can be used to apply exactly the same proration that was previewed with [upcoming invoice](https://stripe.com/docs/api#retrieve_customer_invoice) endpoint. It can also be used to implement custom proration logic, such as prorating by day instead of by second, by providing the time that you wish to use for proration calculations."""
  prorationDate: Int
  """If specified, the funds from the subscription's invoices will be transferred to the destination and the ID of the resulting transfers will be found on the resulting charges. This will be unset if you POST an empty value."""
  transferData: JSON
  """Unix timestamp representing the end of the trial period the customer will get before being charged for the first time. This will always overwrite any trials that might apply via a subscribed plan. If set, trial_end will override the default trial period of the plan the customer is being subscribed to. The special value `now` can be provided to end the customer's trial immediately. Can be at most two years from `billing_cycle_anchor`."""
  trialEnd: JSON
  """Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `trial_end` is not allowed."""
  trialFromPlan: Boolean
}

input V1TaxRates3Input {
  """Flag determining whether the tax rate is active or inactive (archived). Inactive tax rates cannot be used with new applications or Checkout Sessions, but will still work for subscriptions and invoices that already have it set."""
  active: Boolean
  """Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2))."""
  country: String
  """An arbitrary string attached to the tax rate for your internal use only. It will not be visible to your customers."""
  description: String
  """The display name of the tax rate, which will be shown to users."""
  displayName: String!
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """This specifies if the tax rate is inclusive or exclusive."""
  inclusive: Boolean!
  """The jurisdiction for the tax rate. You can use this label field for tax reporting purposes. It also appears on your customer’s invoice."""
  jurisdiction: String
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
  """This represents the tax rate percent out of 100."""
  percentage: Float!
  """[ISO 3166-2 subdivision code](https://en.wikipedia.org/wiki/ISO_3166-2:US), without country prefix. For example, "NY" for New York, United States."""
  state: String
  """The high-level tax type, such as `vat` or `sales_tax`."""
  taxType: TaxType2
}

enum TaxType2 {
  GST
  HST
  PST
  QST
  SALES_TAX
  VAT
}

input V1TaxRate2Input {
  """Flag determining whether the tax rate is active or inactive (archived). Inactive tax rates cannot be used with new applications or Checkout Sessions, but will still work for subscriptions and invoices that already have it set."""
  active: Boolean
  """Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2))."""
  country: String
  """An arbitrary string attached to the tax rate for your internal use only. It will not be visible to your customers."""
  description: String
  """The display name of the tax rate, which will be shown to users."""
  displayName: String
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """The jurisdiction for the tax rate. You can use this label field for tax reporting purposes. It also appears on your customer’s invoice."""
  jurisdiction: String
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
  """[ISO 3166-2 subdivision code](https://en.wikipedia.org/wiki/ISO_3166-2:US), without country prefix. For example, "NY" for New York, United States."""
  state: String
  """The high-level tax type, such as `vat` or `sales_tax`."""
  taxType: TaxType2
}

"""
A Connection Token is used by the Stripe Terminal SDK to connect to a reader.

Related guide: [Fleet Management](https://stripe.com/docs/terminal/creating-locations).
"""
type TerminalConnectionToken {
  """The id of the location that this connection token is scoped to. Note that location scoping only applies to internet-connected readers. For more details, see [the docs on scoping connection tokens](https://stripe.com/docs/terminal/readers/fleet-management#connection-tokens)."""
  location: String
  """String representing the object's type. Objects of the same type share the same value."""
  object: Object83!
  """Your application should pass this token to the Stripe Terminal SDK."""
  secret: String!
}

enum Object83 {
  TERMINAL_CONNECTION_TOKEN
}

input V1TerminalConnectionTokensInput {
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """The id of the location that this connection token is scoped to. If specified the connection token will only be usable with readers assigned to that location, otherwise the connection token will be usable with all readers. Note that location scoping only applies to internet-connected readers. For more details, see [the docs on scoping connection tokens](https://stripe.com/docs/terminal/readers/fleet-management#connection-tokens)."""
  location: String
}

input V1TerminalLocations2Input {
  """The full address of the location."""
  address: CreateLocationAddressParamInput!
  """A name for the location."""
  displayName: String!
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
}

"""The full address of the location."""
input CreateLocationAddressParamInput {
  city: String
  country: String!
  line1: String
  line2: String
  postalCode: String
  state: String
}

input V1TerminalLocation2Input {
  """The full address of the location."""
  address: Address17Input
  """A name for the location."""
  displayName: String
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
}

"""The full address of the location."""
input Address17Input {
  city: String
  country: String
  line1: String
  line2: String
  postalCode: String
  state: String
}

input V1TerminalReaders2Input {
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """Custom label given to the reader for easier identification. If no label is specified, the registration code will be used."""
  label: String
  """The location to assign the reader to. If no location is specified, the reader will be assigned to the account's default location."""
  location: String
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
  """A code generated by the reader used for registering to an account."""
  registrationCode: String!
}

input V1TerminalReader2Input {
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """The new label of the reader."""
  label: String
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
}

input V1TokensInput {
  """Information for the account this token will represent."""
  account: ConnectJsAccountTokenSpecsInput
  """The bank account this token will represent."""
  bankAccount: TokenCreateBankAccountInput
  card: JSON
  """The customer (owned by the application's account) for which to create a token. This can be used only with an [OAuth access token](https://stripe.com/docs/connect/standard-accounts) or [Stripe-Account header](https://stripe.com/docs/connect/authentication). For more details, see [Cloning Saved Payment Methods](https://stripe.com/docs/connect/cloning-saved-payment-methods)."""
  customer: String
  """The updated CVC value this token will represent."""
  cvcUpdate: CvcUpdateInput
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """Information for the person this token will represent."""
  person: PersonTokenSpecsInput
  """The PII this token will represent."""
  pii: PiiInput
}

"""Information for the account this token will represent."""
input ConnectJsAccountTokenSpecsInput {
  businessType: BusinessType3
  company: CompanySpecsInput
  individual: IndividualSpecsInput
  tosShownAndAccepted: Boolean
}

enum BusinessType3 {
  COMPANY
  GOVERNMENT_ENTITY
  INDIVIDUAL
  NON_PROFIT
}

input CompanySpecsInput {
  address: Address2Input
  addressKana: JapanAddressKanaSpecsInput
  addressKanji: JapanAddressKanjiSpecsInput
  directorsProvided: Boolean
  executivesProvided: Boolean
  name: String
  nameKana: String
  nameKanji: String
  ownersProvided: Boolean
  phone: String
  registrationNumber: String
  structure: Structure2
  taxId: String
  taxIdRegistrar: String
  vatId: String
  verification: VerificationSpecsInput
}

input IndividualSpecsInput {
  address: Address2Input
  addressKana: JapanAddressKanaSpecsInput
  addressKanji: JapanAddressKanjiSpecsInput
  dob: JSON
  email: String
  firstName: String
  firstNameKana: String
  firstNameKanji: String
  gender: String
  idNumber: String
  lastName: String
  lastNameKana: String
  lastNameKanji: String
  maidenName: String
  metadata: JSON
  phone: String
  politicalExposure: PoliticalExposure2
  ssnLast4: String
  verification: PersonVerificationSpecsInput
}

"""The bank account this token will represent."""
input TokenCreateBankAccountInput {
  accountHolderName: String
  accountHolderType: AccountHolderType14
  accountNumber: String!
  accountType: AccountType14
  country: String!
  currency: String
  routingNumber: String
}

enum AccountHolderType14 {
  COMPANY
  INDIVIDUAL
}

enum AccountType14 {
  CHECKING
  FUTSU
  SAVINGS
  TOZA
}

"""The updated CVC value this token will represent."""
input CvcUpdateInput {
  cvc: String!
}

"""Information for the person this token will represent."""
input PersonTokenSpecsInput {
  address: Address2Input
  addressKana: JapanAddressKanaSpecsInput
  addressKanji: JapanAddressKanjiSpecsInput
  dob: JSON
  documents: Documents2Input
  email: String
  firstName: String
  firstNameKana: String
  firstNameKanji: String
  gender: String
  idNumber: String
  lastName: String
  lastNameKana: String
  lastNameKanji: String
  maidenName: String
  metadata: JSON
  nationality: String
  phone: String
  politicalExposure: String
  relationship: RelationshipSpecsInput
  ssnLast4: String
  verification: PersonVerificationSpecsInput
}

input Documents2Input {
  companyAuthorization: CompanyAuthorizationInput
  passport: PassportInput
  visa: VisaInput
}

input RelationshipSpecsInput {
  director: Boolean
  executive: Boolean
  owner: Boolean
  percentOwnership: JSON
  representative: Boolean
  title: String
}

"""The PII this token will represent."""
input PiiInput {
  idNumber: String
}

input V1Topups2Input {
  """A positive integer representing how much to transfer."""
  amount: Int!
  """Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies)."""
  currency: String!
  """An arbitrary string attached to the object. Often useful for displaying to users."""
  description: String
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
  """The ID of a source to transfer funds from. For most users, this should be left unspecified which will use the bank account that was set up in the dashboard for the specified currency. In test mode, this can be a test bank token (see [Testing Top-ups](https://stripe.com/docs/connect/testing#testing-top-ups))."""
  source: String
  """Extra information about a top-up for the source's bank statement. Limited to 15 ASCII characters."""
  statementDescriptor: String
  """A string that identifies this top-up as part of a group."""
  transferGroup: String
}

input V1Topup2Input {
  """An arbitrary string attached to the object. Often useful for displaying to users."""
  description: String
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
}

input V1TopupCancelInput {
  """Specifies which fields in the response should be expanded."""
  expand: [String]
}

input V1Transfers2Input {
  """A positive integer in %s representing how much to transfer."""
  amount: Int
  """3-letter [ISO code for currency](https://stripe.com/docs/payouts)."""
  currency: String!
  """An arbitrary string attached to the object. Often useful for displaying to users."""
  description: String
  """The ID of a connected Stripe account. <a href="/docs/connect/charges-transfers">See the Connect documentation</a> for details."""
  destination: String!
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
  """You can use this parameter to transfer funds from a charge before they are added to your available balance. A pending balance will transfer immediately but the funds will not become available until the original charge becomes available. [See the Connect documentation](https://stripe.com/docs/connect/charges-transfers#transfer-availability) for details."""
  sourceTransaction: String
  """The source balance to use for this transfer. One of `bank_account`, `card`, or `fpx`. For most users, this will default to `card`."""
  sourceType: SourceType4
  """A string that identifies this transaction as part of a group. See the [Connect documentation](https://stripe.com/docs/connect/charges-transfers#transfer-options) for details."""
  transferGroup: String
}

enum SourceType4 {
  BANK_ACCOUNT
  CARD
  FPX
}

input V1TransferReversals2Input {
  """A positive integer in %s representing how much of this transfer to reverse. Can only reverse up to the unreversed amount remaining of the transfer. Partial transfer reversals are only allowed for transfers to Stripe Accounts. Defaults to the entire transfer amount."""
  amount: Int
  """An arbitrary string which you can attach to a reversal object. It is displayed alongside the reversal in the Dashboard. This will be unset if you POST an empty value."""
  description: String
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
  """Boolean indicating whether the application fee should be refunded when reversing this transfer. If a full transfer reversal is given, the full application fee will be refunded. Otherwise, the application fee will be refunded with an amount proportional to the amount of the transfer reversed."""
  refundApplicationFee: Boolean
}

input V1Transfer2Input {
  """An arbitrary string attached to the object. Often useful for displaying to users."""
  description: String
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
}

input V1TransferReversal2Input {
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
}

input V1WebhookEndpoints3Input {
  """Events sent to this endpoint will be generated with this Stripe Version instead of your account's default Stripe Version."""
  apiVersion: ApiVersion3
  """Whether this endpoint should receive events from connected accounts (`true`), or from your account (`false`). Defaults to `false`."""
  connect: Boolean
  """An optional description of what the webhook is used for."""
  description: String
  """The list of events to enable for this endpoint. You may specify `['*']` to enable all events, except those that require explicit selection."""
  enabledEvents: [EnabledEvents2ListItem]!
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
  """The URL of the webhook endpoint."""
  url: String!
}

enum ApiVersion3 {
  _2011_01_01
  _2011_06_21
  _2011_06_28
  _2011_08_01
  _2011_09_15
  _2011_11_17
  _2012_02_23
  _2012_03_25
  _2012_06_18
  _2012_06_28
  _2012_07_09
  _2012_09_24
  _2012_10_26
  _2012_11_07
  _2013_02_11
  _2013_02_13
  _2013_07_05
  _2013_08_12
  _2013_08_13
  _2013_10_29
  _2013_12_03
  _2014_01_31
  _2014_03_13
  _2014_03_28
  _2014_05_19
  _2014_06_13
  _2014_06_17
  _2014_07_22
  _2014_07_26
  _2014_08_04
  _2014_08_20
  _2014_09_08
  _2014_10_07
  _2014_11_05
  _2014_11_20
  _2014_12_08
  _2014_12_17
  _2014_12_22
  _2015_01_11
  _2015_01_26
  _2015_02_10
  _2015_02_16
  _2015_02_18
  _2015_03_24
  _2015_04_07
  _2015_06_15
  _2015_07_07
  _2015_07_13
  _2015_07_28
  _2015_08_07
  _2015_08_19
  _2015_09_03
  _2015_09_08
  _2015_09_23
  _2015_10_01
  _2015_10_12
  _2015_10_16
  _2016_02_03
  _2016_02_19
  _2016_02_22
  _2016_02_23
  _2016_02_29
  _2016_03_07
  _2016_06_15
  _2016_07_06
  _2016_10_19
  _2017_01_27
  _2017_02_14
  _2017_04_06
  _2017_05_25
  _2017_06_05
  _2017_08_15
  _2017_12_14
  _2018_01_23
  _2018_02_05
  _2018_02_06
  _2018_02_28
  _2018_05_21
  _2018_07_27
  _2018_08_23
  _2018_09_06
  _2018_09_24
  _2018_10_31
  _2018_11_08
  _2019_02_11
  _2019_02_19
  _2019_03_14
  _2019_05_16
  _2019_08_14
  _2019_09_09
  _2019_10_08
  _2019_10_17
  _2019_11_05
  _2019_12_03
  _2020_03_02
  _2020_08_27
}

enum EnabledEvents2ListItem {
  _
  ACCOUNT_APPLICATION_AUTHORIZED
  ACCOUNT_APPLICATION_DEAUTHORIZED
  ACCOUNT_EXTERNAL_ACCOUNT_CREATED
  ACCOUNT_EXTERNAL_ACCOUNT_DELETED
  ACCOUNT_EXTERNAL_ACCOUNT_UPDATED
  ACCOUNT_UPDATED
  APPLICATION_FEE_CREATED
  APPLICATION_FEE_REFUND_UPDATED
  APPLICATION_FEE_REFUNDED
  BALANCE_AVAILABLE
  BILLING_PORTAL_CONFIGURATION_CREATED
  BILLING_PORTAL_CONFIGURATION_UPDATED
  CAPABILITY_UPDATED
  CHARGE_CAPTURED
  CHARGE_DISPUTE_CLOSED
  CHARGE_DISPUTE_CREATED
  CHARGE_DISPUTE_FUNDS_REINSTATED
  CHARGE_DISPUTE_FUNDS_WITHDRAWN
  CHARGE_DISPUTE_UPDATED
  CHARGE_EXPIRED
  CHARGE_FAILED
  CHARGE_PENDING
  CHARGE_REFUND_UPDATED
  CHARGE_REFUNDED
  CHARGE_SUCCEEDED
  CHARGE_UPDATED
  CHECKOUT_SESSION_ASYNC_PAYMENT_FAILED
  CHECKOUT_SESSION_ASYNC_PAYMENT_SUCCEEDED
  CHECKOUT_SESSION_COMPLETED
  COUPON_CREATED
  COUPON_DELETED
  COUPON_UPDATED
  CREDIT_NOTE_CREATED
  CREDIT_NOTE_UPDATED
  CREDIT_NOTE_VOIDED
  CUSTOMER_CREATED
  CUSTOMER_DELETED
  CUSTOMER_DISCOUNT_CREATED
  CUSTOMER_DISCOUNT_DELETED
  CUSTOMER_DISCOUNT_UPDATED
  CUSTOMER_SOURCE_CREATED
  CUSTOMER_SOURCE_DELETED
  CUSTOMER_SOURCE_EXPIRING
  CUSTOMER_SOURCE_UPDATED
  CUSTOMER_SUBSCRIPTION_CREATED
  CUSTOMER_SUBSCRIPTION_DELETED
  CUSTOMER_SUBSCRIPTION_PENDING_UPDATE_APPLIED
  CUSTOMER_SUBSCRIPTION_PENDING_UPDATE_EXPIRED
  CUSTOMER_SUBSCRIPTION_TRIAL_WILL_END
  CUSTOMER_SUBSCRIPTION_UPDATED
  CUSTOMER_TAX_ID_CREATED
  CUSTOMER_TAX_ID_DELETED
  CUSTOMER_TAX_ID_UPDATED
  CUSTOMER_UPDATED
  FILE_CREATED
  IDENTITY_VERIFICATION_SESSION_CANCELED
  IDENTITY_VERIFICATION_SESSION_CREATED
  IDENTITY_VERIFICATION_SESSION_PROCESSING
  IDENTITY_VERIFICATION_SESSION_REDACTED
  IDENTITY_VERIFICATION_SESSION_REQUIRES_INPUT
  IDENTITY_VERIFICATION_SESSION_VERIFIED
  INVOICE_CREATED
  INVOICE_DELETED
  INVOICE_FINALIZATION_FAILED
  INVOICE_FINALIZED
  INVOICE_MARKED_UNCOLLECTIBLE
  INVOICE_PAID
  INVOICE_PAYMENT_ACTION_REQUIRED
  INVOICE_PAYMENT_FAILED
  INVOICE_PAYMENT_SUCCEEDED
  INVOICE_SENT
  INVOICE_UPCOMING
  INVOICE_UPDATED
  INVOICE_VOIDED
  INVOICEITEM_CREATED
  INVOICEITEM_DELETED
  INVOICEITEM_UPDATED
  ISSUING_AUTHORIZATION_CREATED
  ISSUING_AUTHORIZATION_REQUEST
  ISSUING_AUTHORIZATION_UPDATED
  ISSUING_CARD_CREATED
  ISSUING_CARD_UPDATED
  ISSUING_CARDHOLDER_CREATED
  ISSUING_CARDHOLDER_UPDATED
  ISSUING_DISPUTE_CLOSED
  ISSUING_DISPUTE_CREATED
  ISSUING_DISPUTE_FUNDS_REINSTATED
  ISSUING_DISPUTE_SUBMITTED
  ISSUING_DISPUTE_UPDATED
  ISSUING_TRANSACTION_CREATED
  ISSUING_TRANSACTION_UPDATED
  MANDATE_UPDATED
  ORDER_CREATED
  ORDER_PAYMENT_FAILED
  ORDER_PAYMENT_SUCCEEDED
  ORDER_UPDATED
  ORDER_RETURN_CREATED
  PAYMENT_INTENT_AMOUNT_CAPTURABLE_UPDATED
  PAYMENT_INTENT_CANCELED
  PAYMENT_INTENT_CREATED
  PAYMENT_INTENT_PAYMENT_FAILED
  PAYMENT_INTENT_PROCESSING
  PAYMENT_INTENT_REQUIRES_ACTION
  PAYMENT_INTENT_SUCCEEDED
  PAYMENT_METHOD_ATTACHED
  PAYMENT_METHOD_AUTOMATICALLY_UPDATED
  PAYMENT_METHOD_DETACHED
  PAYMENT_METHOD_UPDATED
  PAYOUT_CANCELED
  PAYOUT_CREATED
  PAYOUT_FAILED
  PAYOUT_PAID
  PAYOUT_UPDATED
  PERSON_CREATED
  PERSON_DELETED
  PERSON_UPDATED
  PLAN_CREATED
  PLAN_DELETED
  PLAN_UPDATED
  PRICE_CREATED
  PRICE_DELETED
  PRICE_UPDATED
  PRODUCT_CREATED
  PRODUCT_DELETED
  PRODUCT_UPDATED
  PROMOTION_CODE_CREATED
  PROMOTION_CODE_UPDATED
  QUOTE_ACCEPTED
  QUOTE_CANCELED
  QUOTE_CREATED
  QUOTE_FINALIZED
  RADAR_EARLY_FRAUD_WARNING_CREATED
  RADAR_EARLY_FRAUD_WARNING_UPDATED
  RECIPIENT_CREATED
  RECIPIENT_DELETED
  RECIPIENT_UPDATED
  REPORTING_REPORT_RUN_FAILED
  REPORTING_REPORT_RUN_SUCCEEDED
  REPORTING_REPORT_TYPE_UPDATED
  REVIEW_CLOSED
  REVIEW_OPENED
  SETUP_INTENT_CANCELED
  SETUP_INTENT_CREATED
  SETUP_INTENT_REQUIRES_ACTION
  SETUP_INTENT_SETUP_FAILED
  SETUP_INTENT_SUCCEEDED
  SIGMA_SCHEDULED_QUERY_RUN_CREATED
  SKU_CREATED
  SKU_DELETED
  SKU_UPDATED
  SOURCE_CANCELED
  SOURCE_CHARGEABLE
  SOURCE_FAILED
  SOURCE_MANDATE_NOTIFICATION
  SOURCE_REFUND_ATTRIBUTES_REQUIRED
  SOURCE_TRANSACTION_CREATED
  SOURCE_TRANSACTION_UPDATED
  SUBSCRIPTION_SCHEDULE_ABORTED
  SUBSCRIPTION_SCHEDULE_CANCELED
  SUBSCRIPTION_SCHEDULE_COMPLETED
  SUBSCRIPTION_SCHEDULE_CREATED
  SUBSCRIPTION_SCHEDULE_EXPIRING
  SUBSCRIPTION_SCHEDULE_RELEASED
  SUBSCRIPTION_SCHEDULE_UPDATED
  TAX_RATE_CREATED
  TAX_RATE_UPDATED
  TOPUP_CANCELED
  TOPUP_CREATED
  TOPUP_FAILED
  TOPUP_REVERSED
  TOPUP_SUCCEEDED
  TRANSFER_CREATED
  TRANSFER_FAILED
  TRANSFER_PAID
  TRANSFER_REVERSED
  TRANSFER_UPDATED
}

input V1WebhookEndpoint2Input {
  """An optional description of what the webhook is used for."""
  description: String
  """Disable the webhook endpoint if set to true."""
  disabled: Boolean
  """The list of events to enable for this endpoint. You may specify `['*']` to enable all events, except those that require explicit selection."""
  enabledEvents: [EnabledEvents2ListItem]
  """Specifies which fields in the response should be expanded."""
  expand: [String]
  """Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`."""
  metadata: JSON
  """The URL of the webhook endpoint."""
  url: String
}
